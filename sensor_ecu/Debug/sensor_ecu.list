
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f0d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0801f260  0801f260  0002f260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020224  08020224  00040208  2**0
                  CONTENTS
  4 .ARM          00000008  08020224  08020224  00030224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802022c  0802022c  00040208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0802022c  0802022c  0003022c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020250  08020250  00030250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08020258  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040208  2**0
                  CONTENTS
 10 .bss          0000a48c  20000208  20000208  00040208  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a694  2000a694  00040208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000ab431  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001750c  00000000  00000000  000eb669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00007100  00000000  00000000  00102b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006c60  00000000  00000000  00109c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003a4e2  00000000  00000000  001108d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006dab3  00000000  00000000  0014adba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f5c1  00000000  00000000  001b886d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002c7e2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00020478  00000000  00000000  002c7e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f248 	.word	0x0801f248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801f248 	.word	0x0801f248

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f016 ffd4 	bl	80181f0 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f01a fc44 	bl	801bae4 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f016 fb6f 	bl	8017944 <printf_>
 8001266:	f01a fc6d 	bl	801bb44 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007b4 	.word	0x200007b4
 8001278:	0801f260 	.word	0x0801f260

0800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:
#include "task.h"

TaskHandle_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012a4:	f019 fc70 	bl	801ab88 <xTaskGetCurrentTaskHandle>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012ac:	6013      	str	r3, [r2, #0]

	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>


	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f019 fdf3 	bl	801aebc <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f009 fa61 	bl	800a7a4 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	20000224 	.word	0x20000224

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 7301 	movw	r3, #1793	; 0x701
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff8e 	bl	8002254 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f016 ff51 	bl	80181f0 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f843 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f016 fc66 	bl	8017c38 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007b4 	.word	0x200007b4
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f826 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x58>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f018 fb47 	bl	8019a3c <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <_ZN7canzero9heartbeat14consumer_entryEPv+0x4e>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 ff2a 	bl	800221c <_ZN7canzero9setStatusE9cz_status>
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
		}
		else{
			canzero::handle_heartbeat_miss();
 80013ca:	f009 f9f5 	bl	800a7b8 <_ZN7canzero21handle_heartbeat_missEv>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ce:	e7d9      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013d0:	20000228 	.word	0x20000228
 80013d4:	10624dd3 	.word	0x10624dd3

080013d8 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013dc:	f005 fc28 	bl	8006c30 <_Z24OD_HeartbeatInterval_getv>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <_Z41__static_initialization_and_destruction_0ii>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4293      	cmp	r3, r2
 8001400:	d107      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001402:	2201      	movs	r2, #1
 8001404:	2100      	movs	r1, #0
 8001406:	20c8      	movs	r0, #200	; 0xc8
 8001408:	f018 f998 	bl	801973c <xStreamBufferGenericCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000228 	.word	0x20000228

08001420 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffdd 	bl	80013e8 <_Z41__static_initialization_and_destruction_0ii>
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4798      	blx	r3
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd4 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f927 	bl	800170c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN7canzero10receiver_tD1Ev>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffde 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN7canzero10receiver_taSERKS0_>:
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f939 	bl	800176a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7d1a      	ldrb	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	751a      	strb	r2, [r3, #20]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08d      	sub	sp, #52	; 0x34
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800152e:	f016 fa09 	bl	8017944 <printf_>
	taskENTER_CRITICAL();
 8001532:	f01a fad7 	bl	801bae4 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800153e:	600a      	str	r2, [r1, #0]
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8ec 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	1c53      	adds	r3, r2, #1
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 8001570:	4413      	add	r3, r2
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffb2 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 800157e:	f01a fae1 	bl	801bb44 <vPortExitCritical>
	return id;
 8001582:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff9d 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
	return id;
 800158e:	4623      	mov	r3, r4
}
 8001590:	4618      	mov	r0, r3
 8001592:	3734      	adds	r7, #52	; 0x34
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	0801f294 	.word	0x0801f294
 800159c:	2000022c 	.word	0x2000022c
 80015a0:	200007a8 	.word	0x200007a8
 80015a4:	20000230 	.word	0x20000230

080015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12f      	bne.n	800161c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d258      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80015ca:	4930      	ldr	r1, [pc, #192]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3314      	adds	r3, #20
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4829      	ldr	r0, [pc, #164]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	3310      	adds	r3, #16
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d10c      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001606:	4413      	add	r3, r2
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f8c8 	bl	80017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3301      	adds	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e7d1      	b.n	80015c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d228      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800162a:	4918      	ldr	r1, [pc, #96]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3310      	adds	r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4299      	cmp	r1, r3
 8001658:	d10c      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001666:	4413      	add	r3, r2
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f898 	bl	80017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e7d1      	b.n	8001620 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 800167c:	7dfb      	ldrb	r3, [r7, #23]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007a8 	.word	0x200007a8
 800168c:	20000230 	.word	0x20000230

08001690 <_ZN3can25unregisterMessageReceiverEj>:



namespace can {

void unregisterMessageReceiver(unsigned int id){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	using namespace canzero;
	taskENTER_CRITICAL();
 8001698:	f01a fa24 	bl	801bae4 <vPortEnterCritical>
	for(size_t i = 0;i<g_size;i++){
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d226      	bcs.n	80016f8 <_ZN3can25unregisterMessageReceiverEj+0x68>
		if(g_receivers[i].m_receiverId == id){
 80016aa:	4917      	ldr	r1, [pc, #92]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3318      	adds	r3, #24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d116      	bne.n	80016f0 <_ZN3can25unregisterMessageReceiverEj+0x60>
			g_receivers[i] = g_receivers[--g_size];
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016ce:	1898      	adds	r0, r3, r2
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016e8:	4413      	add	r3, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fef9 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	for(size_t i = 0;i<g_size;i++){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e7d3      	b.n	80016a0 <_ZN3can25unregisterMessageReceiverEj+0x10>
		}
	}
	taskEXIT_CRITICAL();
 80016f8:	f01a fa24 	bl	801bb44 <vPortExitCritical>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200007a8 	.word	0x200007a8
 8001708:	20000230 	.word	0x20000230

0800170c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe8a 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fe7c 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f000 f84d 	bl	80017d8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
	}
    }
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffd3 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f836 	bl	80017f8 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe7f 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 8001796:	687b      	ldr	r3, [r7, #4]
      }
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe60 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 80017b8:	f01a fcc8 	bl	801c14c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68dc      	ldr	r4, [r3, #12]
 80017c0:	687d      	ldr	r5, [r7, #4]
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f000 f839 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4628      	mov	r0, r5
 80017ce:	47a0      	blx	r4
 80017d0:	bf00      	nop
    }
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}

080017d8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe45 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f82c 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f103 0208 	add.w	r2, r3, #8
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3308      	adds	r3, #8
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f000 f855 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f103 020c 	add.w	r2, r3, #12
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	330c      	adds	r3, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f000 f876 	bl	800191e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffed 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001876:	4602      	mov	r2, r0
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001880:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f7ff ffe3 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001892:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffd8 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80018a0:	4602      	mov	r2, r0
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffed 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018da:	4603      	mov	r3, r0
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7ff ffe7 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018e6:	4603      	mov	r3, r0
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffde 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018f8:	4603      	mov	r3, r0
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	601a      	str	r2, [r3, #0]
    }
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffed 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800192e:	4603      	mov	r3, r0
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f7ff ffe7 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800193a:	4603      	mov	r3, r0
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffde 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800194c:	4603      	mov	r3, r0
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]
    }
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_Z41__static_initialization_and_destruction_0ii>:

}
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10f      	bne.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	4293      	cmp	r3, r2
 8001974:	d10a      	bne.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001978:	2431      	movs	r4, #49	; 0x31
 800197a:	461d      	mov	r5, r3
 800197c:	2c00      	cmp	r4, #0
 800197e:	db05      	blt.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff fd94 	bl	80014ae <_ZN7canzero10receiver_tC1Ev>
 8001986:	351c      	adds	r5, #28
 8001988:	3c01      	subs	r4, #1
 800198a:	e7f7      	b.n	800197c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001998:	4293      	cmp	r3, r2
 800199a:	d108      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 800199c:	4c07      	ldr	r4, [pc, #28]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d004      	beq.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 80019a4:	3c1c      	subs	r4, #28
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fd8e 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
 80019ac:	e7f7      	b.n	800199e <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000230 	.word	0x20000230
 80019bc:	200007a8 	.word	0x200007a8

080019c0 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff ffc7 	bl	800195c <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff ffbf 	bl	800195c <_Z41__static_initialization_and_destruction_0ii>
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 80019e0:	b084      	sub	sp, #16
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	f107 0c08 	add.w	ip, r7, #8
 80019ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80019ee:	f107 0008 	add.w	r0, r7, #8
 80019f2:	f000 f835 	bl	8001a60 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_Z9processRX9RxMessage+0x74>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	230a      	movs	r3, #10
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f107 0108 	add.w	r1, r7, #8
 8001a08:	f017 ff26 	bl	8019858 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001a0c:	e01c      	b.n	8001a48 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001a0e:	f107 0008 	add.w	r0, r7, #8
 8001a12:	f7ff fdc9 	bl	80015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d115      	bne.n	8001a48 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8001a22:	f01a f85f 	bl	801bae4 <vPortEnterCritical>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <_Z9processRX9RxMessage+0x78>)
 8001a2c:	f015 ff8a 	bl	8017944 <printf_>
 8001a30:	f01a f888 	bl	801bb44 <vPortExitCritical>
}
 8001a34:	e008      	b.n	8001a48 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001a36:	f01a f855 	bl	801bae4 <vPortEnterCritical>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <_Z9processRX9RxMessage+0x7c>)
 8001a40:	f015 ff80 	bl	8017944 <printf_>
 8001a44:	f01a f87e 	bl	801bb44 <vPortExitCritical>
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a50:	b004      	add	sp, #16
 8001a52:	4770      	bx	lr
 8001a54:	200007ac 	.word	0x200007ac
 8001a58:	0801f2c0 	.word	0x0801f2c0
 8001a5c:	0801f2e4 	.word	0x0801f2e4

08001a60 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e000      	b.n	8001a86 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a84:	2300      	movs	r3, #0
    }
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <_Z41__static_initialization_and_destruction_0ii>:
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10c      	bne.n	8001abe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d107      	bne.n	8001abe <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	20c8      	movs	r0, #200	; 0xc8
 8001ab4:	f017 fe42 	bl	801973c <xStreamBufferGenericCreate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001abc:	6013      	str	r3, [r2, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200007ac 	.word	0x200007ac

08001acc <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff ffdd 	bl	8001a94 <_Z41__static_initialization_and_destruction_0ii>
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10c      	bne.n	8001b06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d107      	bne.n	8001b06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001af8:	2124      	movs	r1, #36	; 0x24
 8001afa:	2010      	movs	r0, #16
 8001afc:	f016 fb04 	bl	8018108 <osMessageQueueNew>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	0801f884 	.word	0x0801f884
 8001b14:	200007b0 	.word	0x200007b0

08001b18 <_GLOBAL__sub_I_czReceiveQueue>:
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff ffdb 	bl	8001adc <_Z41__static_initialization_and_destruction_0ii>
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2c:	f3bf 8f4f 	dsb	sy
}
 8001b30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <__NVIC_SystemReset+0x24>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b3a:	4904      	ldr	r1, [pc, #16]	; (8001b4c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_SystemReset+0x28>)
 8001b3e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b42:	f3bf 8f4f 	dsb	sy
}
 8001b46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <__NVIC_SystemReset+0x20>
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	05fa0004 	.word	0x05fa0004

08001b54 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b092      	sub	sp, #72	; 0x48
 8001b58:	af06      	add	r7, sp, #24
 8001b5a:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <_Z15cz_receive_taskPv+0xa4>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f107 010c 	add.w	r1, r7, #12
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f016 fba1 	bl	80182b0 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d136      	bne.n	8001be2 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f8e3 	bl	8001d44 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	d1e7      	bne.n	8001b5c <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001b8c:	f7ff ffcc 	bl	8001b28 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f8ee 	bl	8001d76 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 f959 	bl	8005e5c <_Z22handleSDORequestUploadRK9RxMessage>
 8001baa:	e7d7      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f8f9 	bl	8001da8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fbc0 	bl	8005346 <_Z24handleSDORequestDownloadRK9RxMessage>
 8001bc6:	e7c9      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001bc8:	466d      	mov	r5, sp
 8001bca:	f107 041c 	add.w	r4, r7, #28
 8001bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	602b      	str	r3, [r5, #0]
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bdc:	f7ff ff00 	bl	80019e0 <_Z9processRX9RxMessage>
 8001be0:	e7bc      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d1b9      	bne.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001be8:	f019 ff7c 	bl	801bae4 <vPortEnterCritical>
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <_Z15cz_receive_taskPv+0xa8>)
 8001bee:	f015 fea9 	bl	8017944 <printf_>
 8001bf2:	f019 ffa7 	bl	801bb44 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001bf6:	e7b1      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
 8001bf8:	200007b0 	.word	0x200007b0
 8001bfc:	0801f318 	.word	0x0801f318

08001c00 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b096      	sub	sp, #88	; 0x58
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001c08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f010 f83c 	bl	8011c90 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c18:	f107 040c 	add.w	r4, r7, #12
 8001c1c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	dc0e      	bgt.n	8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c36:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	4413      	add	r3, r2
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	4413      	add	r3, r2
 8001c48:	460a      	mov	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	3301      	adds	r3, #1
 8001c50:	657b      	str	r3, [r7, #84]	; 0x54
 8001c52:	e7ed      	b.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f107 010c 	add.w	r1, r7, #12
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f016 fac6 	bl	80181f0 <osMessageQueuePut>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0

	}
}
 8001c68:	bf00      	nop
 8001c6a:	3758      	adds	r7, #88	; 0x58
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	200007b0 	.word	0x200007b0

08001c74 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c84:	2101      	movs	r1, #1
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f010 f802 	bl	8011c90 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c8c:	f107 040c 	add.w	r4, r7, #12
 8001c90:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	dc0e      	bgt.n	8001cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001caa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	4413      	add	r3, r2
 8001cb2:	7819      	ldrb	r1, [r3, #0]
 8001cb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	4413      	add	r3, r2
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc6:	e7ed      	b.n	8001ca4 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f107 010c 	add.w	r1, r7, #12
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f016 fa8c 	bl	80181f0 <osMessageQueuePut>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0

	}
}
 8001cdc:	bf00      	nop
 8001cde:	3758      	adds	r7, #88	; 0x58
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	200007b0 	.word	0x200007b0

08001ce8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f010 fb16 	bl	8012322 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_CAN_ErrorCallback+0x44>)
 8001d14:	f015 fe16 	bl	8017944 <printf_>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d22:	bf00      	nop
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0801f330 	.word	0x0801f330

08001d30 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f240 7281 	movw	r2, #1921	; 0x781
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e000      	b.n	8001d6a <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d68:	2300      	movs	r3, #0
    }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e000      	b.n	8001d9c <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d9a:	2300      	movs	r3, #0
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f240 6201 	movw	r2, #1537	; 0x601
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e000      	b.n	8001dce <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001dcc:	2300      	movs	r3, #0
    }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10c      	bne.n	8001e06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d107      	bne.n	8001e06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001df8:	2120      	movs	r1, #32
 8001dfa:	2010      	movs	r0, #16
 8001dfc:	f016 f984 	bl	8018108 <osMessageQueueNew>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0801f89c 	.word	0x0801f89c
 8001e14:	200007b4 	.word	0x200007b4

08001e18 <_GLOBAL__sub_I_czSendQueue>:
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff ffdb 	bl	8001ddc <_Z41__static_initialization_and_destruction_0ii>
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f9c9 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001e3e:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <_Z13cz_send_entryPv+0x180>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	f107 010c 	add.w	r1, r7, #12
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f016 fa30 	bl	80182b0 <osMessageQueueGet>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001e60:	f00e f88a 	bl	800ff78 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d901      	bls.n	8001e6e <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001e6a:	f00e f885 	bl	800ff78 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d102      	bne.n	8001e8a <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
 8001e88:	e010      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e90:	d102      	bne.n	8001e98 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	e009      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea6:	e001      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001eac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eae:	f00f feba 	bl	8011c26 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001ec2:	f107 0008 	add.w	r0, r7, #8
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	f103 0218 	add.w	r2, r3, #24
 8001ece:	f107 010c 	add.w	r1, r7, #12
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ed6:	f00f fdcb 	bl	8011a70 <HAL_CAN_AddTxMessage>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d059      	beq.n	8001f9e <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001eea:	f00e f845 	bl	800ff78 <Error_Handler>
 8001eee:	e056      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10c      	bne.n	8001f12 <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <_Z13cz_send_entryPv+0x18c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <_Z13cz_send_entryPv+0x18c>)
 8001f00:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001f02:	f019 fdef 	bl	801bae4 <vPortEnterCritical>
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <_Z13cz_send_entryPv+0x190>)
 8001f08:	f015 fd1c 	bl	8017944 <printf_>
 8001f0c:	f019 fe1a 	bl	801bb44 <vPortExitCritical>
 8001f10:	e00b      	b.n	8001f2a <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <_Z13cz_send_entryPv+0x194>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <_Z13cz_send_entryPv+0x194>)
 8001f1a:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001f1c:	f019 fde2 	bl	801bae4 <vPortEnterCritical>
 8001f20:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <_Z13cz_send_entryPv+0x198>)
 8001f22:	f015 fd0f 	bl	8017944 <printf_>
 8001f26:	f019 fe0d 	bl	801bb44 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f015 fe84 	bl	8017c38 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001f30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f32:	f00f fe78 	bl	8011c26 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001f46:	f107 0008 	add.w	r0, r7, #8
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	f103 0218 	add.w	r2, r3, #24
 8001f52:	f107 010c 	add.w	r1, r7, #12
 8001f56:	4603      	mov	r3, r0
 8001f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f5a:	f00f fd89 	bl	8011a70 <HAL_CAN_AddTxMessage>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001f6e:	f008 fc34 	bl	800a7da <_ZN7canzero32handle_trasmission_request_errorEv>
 8001f72:	e014      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_Z13cz_send_entryPv+0x19c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <_Z13cz_send_entryPv+0x19c>)
 8001f84:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001f88:	f008 fc1d 	bl	800a7c6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001f8c:	e007      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <_Z13cz_send_entryPv+0x1a0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <_Z13cz_send_entryPv+0x1a0>)
 8001f96:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001f9a:	f008 fc14 	bl	800a7c6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001fa4:	e74b      	b.n	8001e3e <_Z13cz_send_entryPv+0x16>
 8001fa6:	bf00      	nop
 8001fa8:	200007b4 	.word	0x200007b4
 8001fac:	20000f90 	.word	0x20000f90
 8001fb0:	20000fb8 	.word	0x20000fb8
 8001fb4:	20000914 	.word	0x20000914
 8001fb8:	0801f358 	.word	0x0801f358
 8001fbc:	2000092c 	.word	0x2000092c
 8001fc0:	0801f380 	.word	0x0801f380
 8001fc4:	2000090c 	.word	0x2000090c
 8001fc8:	20000924 	.word	0x20000924

08001fcc <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001fd2:	2080      	movs	r0, #128	; 0x80
 8001fd4:	f000 f922 	bl	800221c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dc51      	bgt.n	8002086 <_ZN7canzero4initEv+0xba>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <_ZN7canzero4initEv+0x23c>)
 8001fec:	0b5b      	lsrs	r3, r3, #13
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <_ZN7canzero4initEv+0x23c>)
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001ffe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	b29b      	uxth	r3, r3
 8002006:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8002008:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	b29b      	uxth	r3, r3
 8002010:	f043 0306 	orr.w	r3, r3, #6
 8002014:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	0fda      	lsrs	r2, r3, #31
 800201a:	4413      	add	r3, r2
 800201c:	105b      	asrs	r3, r3, #1
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <_ZN7canzero4initEv+0x60>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e001      	b.n	8002030 <_ZN7canzero4initEv+0x64>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002030:	2301      	movs	r3, #1
 8002032:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002034:	230e      	movs	r3, #14
 8002036:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800203c:	463b      	mov	r3, r7
 800203e:	4619      	mov	r1, r3
 8002040:	4872      	ldr	r0, [pc, #456]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002042:	f00f fbf1 	bl	8011828 <HAL_CAN_ConfigFilter>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <_ZN7canzero4initEv+0x8e>
			Error_Handler(); /* Filter configuration Error */
 8002056:	f00d ff8f 	bl	800ff78 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	330e      	adds	r3, #14
 800205e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	486a      	ldr	r0, [pc, #424]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002066:	f00f fbdf 	bl	8011828 <HAL_CAN_ConfigFilter>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZN7canzero4initEv+0xb2>
			Error_Handler(); /* Filter configuration Error */
 800207a:	f00d ff7d 	bl	800ff78 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	3301      	adds	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002084:	e7aa      	b.n	8001fdc <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b16      	cmp	r3, #22
 800208e:	dc6a      	bgt.n	8002166 <_ZN7canzero4initEv+0x19a>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	0fda      	lsrs	r2, r3, #31
 8002094:	4413      	add	r3, r2
 8002096:	105b      	asrs	r3, r3, #1
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 80020a0:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <_ZN7canzero4initEv+0x248>)
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <_ZN7canzero4initEv+0x24c>)
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	f043 0318 	orr.w	r3, r3, #24
 80020ba:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	2b16      	cmp	r3, #22
 80020c0:	d106      	bne.n	80020d0 <_ZN7canzero4initEv+0x104>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 80020ca:	2306      	movs	r3, #6
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e011      	b.n	80020f4 <_ZN7canzero4initEv+0x128>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <_ZN7canzero4initEv+0x248>)
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <_ZN7canzero4initEv+0x24c>)
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	f043 0318 	orr.w	r3, r3, #24
 80020f2:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	0fda      	lsrs	r2, r3, #31
 80020f8:	4413      	add	r3, r2
 80020fa:	105b      	asrs	r3, r3, #1
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_ZN7canzero4initEv+0x13e>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e001      	b.n	800210e <_ZN7canzero4initEv+0x142>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800210a:	2301      	movs	r3, #1
 800210c:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002112:	230e      	movs	r3, #14
 8002114:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	483c      	ldr	r0, [pc, #240]	; (800220c <_ZN7canzero4initEv+0x240>)
 800211c:	f00f fb84 	bl	8011828 <HAL_CAN_ConfigFilter>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <_ZN7canzero4initEv+0x168>
			Error_Handler(); /* Filter configuration Error */
 8002130:	f00d ff22 	bl	800ff78 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	0fda      	lsrs	r2, r3, #31
 8002138:	4413      	add	r3, r2
 800213a:	105b      	asrs	r3, r3, #1
 800213c:	330f      	adds	r3, #15
 800213e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4832      	ldr	r0, [pc, #200]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002146:	f00f fb6f 	bl	8011828 <HAL_CAN_ConfigFilter>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <_ZN7canzero4initEv+0x192>
			Error_Handler(); /* Filter configuration Error */
 800215a:	f00d ff0d 	bl	800ff78 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	3302      	adds	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
 8002164:	e791      	b.n	800208a <_ZN7canzero4initEv+0xbe>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8002166:	4829      	ldr	r0, [pc, #164]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002168:	f00f fc3e 	bl	80119e8 <HAL_CAN_Start>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <_ZN7canzero4initEv+0x1b2>
 8002172:	4827      	ldr	r0, [pc, #156]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002174:	f00f fc38 	bl	80119e8 <HAL_CAN_Start>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <_ZN7canzero4initEv+0x1b6>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <_ZN7canzero4initEv+0x1b8>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZN7canzero4initEv+0x1c0>
		Error_Handler(); /* Start Error */
 8002188:	f00d fef6 	bl	800ff78 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800218c:	2102      	movs	r1, #2
 800218e:	481f      	ldr	r0, [pc, #124]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002190:	f00f fe90 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 8002194:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800219a:	2110      	movs	r1, #16
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <_ZN7canzero4initEv+0x240>)
 800219e:	f00f fe89 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ac:	4817      	ldr	r0, [pc, #92]	; (800220c <_ZN7canzero4initEv+0x240>)
 80021ae:	f00f fe81 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZN7canzero4initEv+0x1f0>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <_ZN7canzero4initEv+0x1f2>
 80021bc:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <_ZN7canzero4initEv+0x1fa>
		Error_Handler();
 80021c2:	f00d fed9 	bl	800ff78 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021c6:	2102      	movs	r1, #2
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021ca:	f00f fe73 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 80021ce:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10e      	bne.n	80021f2 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80021d4:	2110      	movs	r1, #16
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021d8:	f00f fe6c 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021e8:	f00f fe64 	bl	8011eb4 <HAL_CAN_ActivateNotification>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <_ZN7canzero4initEv+0x22a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <_ZN7canzero4initEv+0x22c>
 80021f6:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <_ZN7canzero4initEv+0x234>
		Error_Handler();
 80021fc:	f00d febc 	bl	800ff78 <Error_Handler>
	}
}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	; 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	1ffffffa 	.word	0x1ffffffa
 800220c:	20000f90 	.word	0x20000f90
 8002210:	20000fb8 	.word	0x20000fb8
 8002214:	0801f910 	.word	0x0801f910
 8002218:	0801f8b4 	.word	0x0801f8b4

0800221c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 31ff 	mov.w	r1, #4294967295
 800222e:	4618      	mov	r0, r3
 8002230:	f015 fda3 	bl	8017d7a <osMutexAcquire>
	nodeStatus = new_status;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_ZN7canzero9setStatusE9cz_status+0x30>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f015 fde6 	bl	8017e10 <osMutexRelease>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200007b8 	.word	0x200007b8
 8002250:	200007bc 	.word	0x200007bc

08002254 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <_ZN7canzero9getStatusEv+0x30>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f04f 31ff 	mov.w	r1, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f015 fd89 	bl	8017d7a <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <_ZN7canzero9getStatusEv+0x34>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <_ZN7canzero9getStatusEv+0x30>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f015 fdcc 	bl	8017e10 <osMutexRelease>
	return returnValue;
 8002278:	79fb      	ldrb	r3, [r7, #7]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200007b8 	.word	0x200007b8
 8002288:	200007bc 	.word	0x200007bc

0800228c <_Z41__static_initialization_and_destruction_0ii>:
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10a      	bne.n	80022b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80022a8:	f015 fce1 	bl	8017c6e <osMutexNew>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	0801f96c 	.word	0x0801f96c
 80022c0:	200007b8 	.word	0x200007b8

080022c4 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7ff ffdd 	bl	800228c <_Z41__static_initialization_and_destruction_0ii>
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af02      	add	r7, sp, #8
 80022da:	6078      	str	r0, [r7, #4]
	canzero::init();
 80022dc:	f7ff fe76 	bl	8001fcc <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2318      	movs	r3, #24
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f4:	4942      	ldr	r1, [pc, #264]	; (8002400 <canzero_start+0x12c>)
 80022f6:	4843      	ldr	r0, [pc, #268]	; (8002404 <canzero_start+0x130>)
 80022f8:	f017 fe03 	bl	8019f02 <xTaskCreate>
 80022fc:	6378      	str	r0, [r7, #52]	; 0x34
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	2b01      	cmp	r3, #1
 8002302:	d006      	beq.n	8002312 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002304:	f019 fbee 	bl	801bae4 <vPortEnterCritical>
 8002308:	483f      	ldr	r0, [pc, #252]	; (8002408 <canzero_start+0x134>)
 800230a:	f015 fb1b 	bl	8017944 <printf_>
 800230e:	f019 fc19 	bl	801bb44 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8002316:	f107 0318 	add.w	r3, r7, #24
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2318      	movs	r3, #24
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	4939      	ldr	r1, [pc, #228]	; (800240c <canzero_start+0x138>)
 8002328:	4839      	ldr	r0, [pc, #228]	; (8002410 <canzero_start+0x13c>)
 800232a:	f017 fdea 	bl	8019f02 <xTaskCreate>
 800232e:	6338      	str	r0, [r7, #48]	; 0x30
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	2b01      	cmp	r3, #1
 8002334:	d006      	beq.n	8002344 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8002336:	f019 fbd5 	bl	801bae4 <vPortEnterCritical>
 800233a:	4836      	ldr	r0, [pc, #216]	; (8002414 <canzero_start+0x140>)
 800233c:	f015 fb02 	bl	8017944 <printf_>
 8002340:	f019 fc00 	bl	801bb44 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2318      	movs	r3, #24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002358:	492f      	ldr	r1, [pc, #188]	; (8002418 <canzero_start+0x144>)
 800235a:	4830      	ldr	r0, [pc, #192]	; (800241c <canzero_start+0x148>)
 800235c:	f017 fdd1 	bl	8019f02 <xTaskCreate>
 8002360:	62f8      	str	r0, [r7, #44]	; 0x2c
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d006      	beq.n	8002376 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8002368:	f019 fbbc 	bl	801bae4 <vPortEnterCritical>
 800236c:	482c      	ldr	r0, [pc, #176]	; (8002420 <canzero_start+0x14c>)
 800236e:	f015 fae9 	bl	8017944 <printf_>
 8002372:	f019 fbe7 	bl	801bb44 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2318      	movs	r3, #24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238a:	4926      	ldr	r1, [pc, #152]	; (8002424 <canzero_start+0x150>)
 800238c:	4826      	ldr	r0, [pc, #152]	; (8002428 <canzero_start+0x154>)
 800238e:	f017 fdb8 	bl	8019f02 <xTaskCreate>
 8002392:	62b8      	str	r0, [r7, #40]	; 0x28
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2b01      	cmp	r3, #1
 8002398:	d006      	beq.n	80023a8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800239a:	f019 fba3 	bl	801bae4 <vPortEnterCritical>
 800239e:	4823      	ldr	r0, [pc, #140]	; (800242c <canzero_start+0x158>)
 80023a0:	f015 fad0 	bl	8017944 <printf_>
 80023a4:	f019 fbce 	bl	801bb44 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2328      	movs	r3, #40	; 0x28
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023bc:	491c      	ldr	r1, [pc, #112]	; (8002430 <canzero_start+0x15c>)
 80023be:	481d      	ldr	r0, [pc, #116]	; (8002434 <canzero_start+0x160>)
 80023c0:	f017 fd9f 	bl	8019f02 <xTaskCreate>
 80023c4:	6278      	str	r0, [r7, #36]	; 0x24
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d001      	beq.n	80023d0 <canzero_start+0xfc>
		Error_Handler();
 80023cc:	f00d fdd4 	bl	800ff78 <Error_Handler>
	}

	TaskHandle_t sendOdEntriesHandle = nullptr;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
	BaseType_t sendOdEntriesStatus = xTaskCreate(sendOdEntriesTask, "cz_sendod", 128, NULL,
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	2317      	movs	r3, #23
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	4915      	ldr	r1, [pc, #84]	; (8002438 <canzero_start+0x164>)
 80023e4:	4815      	ldr	r0, [pc, #84]	; (800243c <canzero_start+0x168>)
 80023e6:	f017 fd8c 	bl	8019f02 <xTaskCreate>
 80023ea:	6238      	str	r0, [r7, #32]
			osPriorityBelowNormal7, &sendOdEntriesHandle);
	if(sendOdEntriesStatus != pdPASS){
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <canzero_start+0x122>
		Error_Handler();
 80023f2:	f00d fdc1 	bl	800ff78 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	f015 fc1d 	bl	8017c38 <osDelay>
 80023fe:	e7fa      	b.n	80023f6 <canzero_start+0x122>
 8002400:	0801f3b8 	.word	0x0801f3b8
 8002404:	08001e29 	.word	0x08001e29
 8002408:	0801f3c0 	.word	0x0801f3c0
 800240c:	0801f3e4 	.word	0x0801f3e4
 8002410:	08001b55 	.word	0x08001b55
 8002414:	0801f3f0 	.word	0x0801f3f0
 8002418:	0801f418 	.word	0x0801f418
 800241c:	0800137d 	.word	0x0800137d
 8002420:	0801f424 	.word	0x0801f424
 8002424:	0801f454 	.word	0x0801f454
 8002428:	08001315 	.word	0x08001315
 800242c:	0801f460 	.word	0x0801f460
 8002430:	0801f490 	.word	0x0801f490
 8002434:	0800129d 	.word	0x0800129d
 8002438:	0801f498 	.word	0x0801f498
 800243c:	08007ead 	.word	0x08007ead

08002440 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

	}
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <_ZN10AdcChannel8setValueEt>:

	uint16_t get() {
		return m_value;
	}

	void setValue(uint16_t value){
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]
		m_value = value;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	801a      	strh	r2, [r3, #0]
	}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ffc2 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 80024d2:	b5b0      	push	{r4, r5, r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	240f      	movs	r4, #15
 80024de:	461d      	mov	r5, r3
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	db05      	blt.n	80024f0 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 80024e4:	4628      	mov	r0, r5
 80024e6:	f000 f9bb 	bl	8002860 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80024ea:	3510      	adds	r5, #16
 80024ec:	3c01      	subs	r4, #1
 80024ee:	e7f7      	b.n	80024e0 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}

08002502 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8002502:	b590      	push	{r4, r7, lr}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	429c      	cmp	r4, r3
 800251a:	d004      	beq.n	8002526 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800251c:	3c10      	subs	r4, #16
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff ffca 	bl	80024b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8002524:	e7f7      	b.n	8002516 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bd90      	pop	{r4, r7, pc}

08002530 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
 8002534:	4801      	ldr	r0, [pc, #4]	; (800253c <__tcf_0+0xc>)
 8002536:	f7ff ffe4 	bl	8002502 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200007c0 	.word	0x200007c0

08002540 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f3bf 8f5b 	dmb	ish
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002562:	f019 fddf 	bl	801c124 <__cxa_guard_acquire>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8002578:	f7ff ffab 	bl	80024d2 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 800257c:	4806      	ldr	r0, [pc, #24]	; (8002598 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 800257e:	f01a f846 	bl	801c60e <atexit>
 8002582:	4803      	ldr	r0, [pc, #12]	; (8002590 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002584:	f019 fdda 	bl	801c13c <__cxa_guard_release>
		return instance;
 8002588:	4b02      	ldr	r3, [pc, #8]	; (8002594 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200008c4 	.word	0x200008c4
 8002594:	200007c0 	.word	0x200007c0
 8002598:	08002531 	.word	0x08002531

0800259c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025ac:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025b4:	1c59      	adds	r1, r3, #1
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f958 	bl	800287a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 80025ca:	68fb      	ldr	r3, [r7, #12]
	}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	18d0      	adds	r0, r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f000 f941 	bl	800287a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f952 	bl	80028b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	switch (module) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <_ZL17AdcModuleToHandle9AdcModule+0x16>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d002      	beq.n	800263e <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 8002638:	e003      	b.n	8002642 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 800263c:	e004      	b.n	8002648 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8002640:	e002      	b.n	8002648 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8002642:	f00d fc99 	bl	800ff78 <Error_Handler>
		return nullptr;
 8002646:	2300      	movs	r3, #0
	}
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000e40 	.word	0x20000e40
 8002654:	20000e88 	.word	0x20000e88

08002658 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d104      	bne.n	8002678 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f8e4 	bl	8002840 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 800268a:	6838      	ldr	r0, [r7, #0]
 800268c:	f7ff ffca 	bl	8002624 <_ZL17AdcModuleToHandle9AdcModule>
 8002690:	4602      	mov	r2, r0
					)) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
					)) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685c      	ldr	r4, [r3, #4]
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 80026a6:	429c      	cmp	r4, r3
 80026a8:	d801      	bhi.n	80026ae <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 80026aa:	0063      	lsls	r3, r4, #1
 80026ac:	e001      	b.n	80026b2 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	4618      	mov	r0, r3
 80026b4:	f019 fd45 	bl	801c142 <_Znaj>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461e      	mov	r6, r3
 80026bc:	4635      	mov	r5, r6
 80026be:	1e63      	subs	r3, r4, #1
 80026c0:	461c      	mov	r4, r3
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	db05      	blt.n	80026d2 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 80026c6:	4628      	mov	r0, r5
 80026c8:	f7ff fedc 	bl	8002484 <_ZN10AdcChannelC1Ev>
 80026cc:	3502      	adds	r5, #2
 80026ce:	3c01      	subs	r4, #1
 80026d0:	e7f7      	b.n	80026c2 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d801      	bhi.n	80026e4 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	e001      	b.n	80026e8 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	4618      	mov	r0, r3
 80026ea:	f019 fd2a 	bl	801c142 <_Znaj>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
					)) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80026fc:	f7ff ff20 	bl	8002540 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8002700:	4604      	mov	r4, r0
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f8ea 	bl	80028e4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ff40 	bl	800259c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 800271c:	4602      	mov	r2, r0
					)) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fec6 	bl	80024b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2001      	movs	r0, #1
 8002732:	f015 fbaa 	bl	8017e8a <osSemaphoreNew>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800274e:	461a      	mov	r2, r3
 8002750:	f00e fbb4 	bl	8010ebc <HAL_ADC_Start_DMA>
		update();
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f83f 	bl	80027d8 <_ZN19AdcModuleController6updateEv>
	}
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002764:	3ffffffc 	.word	0x3ffffffc

08002768 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8002770:	f7ff fee6 	bl	8002540 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4619      	mov	r1, r3
 800277c:	4610      	mov	r0, r2
 800277e:	f7ff ff29 	bl	80025d4 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f015 fc9e 	bl	80180c8 <osSemaphoreGetCount>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	bf14      	ite	ne
 8002792:	2301      	movne	r3, #1
 8002794:	2300      	moveq	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d006      	beq.n	80027aa <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	4618      	mov	r0, r3
 80027a6:	f015 fbf9 	bl	8017f9c <osSemaphoreAcquire>
		}
		delete[] m_channels;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <_ZN19AdcModuleControllerD1Ev+0x54>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f019 fcb2 	bl	801c120 <_ZdaPv>
		delete[] m_buffer;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <_ZN19AdcModuleControllerD1Ev+0x66>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f019 fca9 	bl	801c120 <_ZdaPv>
	}
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZN19AdcModuleController6updateEv>:
			Error_Handler();
		}
		return m_channels + rank;
	}

	void update() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295
 80027e8:	4618      	mov	r0, r3
 80027ea:	f015 fbd7 	bl	8017f9c <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d211      	bcs.n	8002820 <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	18d0      	adds	r0, r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	f7ff fe41 	bl	800249a <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3301      	adds	r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	e7e8      	b.n	80027f2 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002832:	461a      	mov	r2, r3
 8002834:	f00e fb42 	bl	8010ebc <HAL_ADC_Start_DMA>
	}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_ZN19AdcModuleController15dmaCplrCallbackEv>:
			update();
	}

private:

	void dmaCplrCallback() {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4618      	mov	r0, r3
 8002854:	f015 fbf4 	bl	8018040 <osSemaphoreRelease>
	}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fde0 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f854 	bl	8002938 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f870 	bl	800297c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe09 	bl	80024b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 80028a6:	687b      	ldr	r3, [r7, #4]
      }
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	4798      	blx	r3
	    _M_manager = nullptr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
	return *this;
 80028da:	687b      	ldr	r3, [r7, #4]
      }
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe fd9d 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80028f6:	463b      	mov	r3, r7
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 f86b 	bl	80029d4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00f      	beq.n	8002924 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8002904:	687c      	ldr	r4, [r7, #4]
 8002906:	463b      	mov	r3, r7
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f86e 	bl	80029ea <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800290e:	4603      	mov	r3, r0
 8002910:	4619      	mov	r1, r3
 8002912:	4620      	mov	r0, r4
 8002914:	f000 f874 	bl	8002a00 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 800291c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 8002922:	609a      	str	r2, [r3, #8]
      }
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	08002a25 	.word	0x08002a25
 8002934:	08002a4f 	.word	0x08002a4f

08002938 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fd73 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f000 f89e 	bl	8002a8c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	609a      	str	r2, [r3, #8]
    }
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe ff6a 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0208 	add.w	r2, r3, #8
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	3308      	adds	r3, #8
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f7fe ff93 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f103 020c 	add.w	r2, r3, #12
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f000 f886 	bl	8002ac2 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	  { return true; }
 80029dc:	2301      	movs	r3, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f7ff ffed 	bl	80029ea <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4622      	mov	r2, r4
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f872 	bl	8002b00 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}

08002a24 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f87f 	bl	8002b32 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002a34:	4604      	mov	r4, r0
 8002a36:	6838      	ldr	r0, [r7, #0]
 8002a38:	f7ff ffc1 	bl	80029be <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4620      	mov	r0, r4
 8002a42:	f000 f887 	bl	8002b54 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8002a46:	bf00      	nop
      }
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}

08002a4e <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002a4e:	b590      	push	{r4, r7, lr}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d109      	bne.n	8002a76 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f88c 	bl	8002b80 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	68b8      	ldr	r0, [r7, #8]
 8002a6c:	f000 f861 	bl	8002b32 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002a70:	4603      	mov	r3, r0
 8002a72:	6023      	str	r3, [r4, #0]
	    break;
 8002a74:	e005      	b.n	8002a82 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68b9      	ldr	r1, [r7, #8]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f88b 	bl	8002b98 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8002a82:	2300      	movs	r3, #0
      }
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fceb 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffed 	bl	8002aac <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002ad8:	6838      	ldr	r0, [r7, #0]
 8002ada:	f7ff ffe7 	bl	8002aac <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffde 	bl	8002aac <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002af0:	4603      	mov	r3, r0
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]
    }
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002b0c:	68b8      	ldr	r0, [r7, #8]
 8002b0e:	f7ff ff6c 	bl	80029ea <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002b12:	4604      	mov	r4, r0
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fc9f 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	2004      	movs	r0, #4
 8002b20:	f7ff fc8e 	bl	8002440 <_ZnwjPv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd90      	pop	{r4, r7, pc}

08002b32 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f857 	bl	8002bee <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002b40:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f85f 	bl	8002c06 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	bf00      	nop
	}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f85c 	bl	8002c1c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002b64:	4604      	mov	r4, r0
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f7ff ff29 	bl	80029be <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f000 f85d 	bl	8002c32 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdb0      	pop	{r4, r5, r7, pc}

08002b80 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fc65 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d016      	beq.n	8002bda <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	dc19      	bgt.n	8002be4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d00a      	beq.n	8002bce <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8002bb8:	e014      	b.n	8002be4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff ffe0 	bl	8002b80 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	68b8      	ldr	r0, [r7, #8]
 8002bc4:	f7ff ffb5 	bl	8002b32 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	6023      	str	r3, [r4, #0]
	      break;
 8002bcc:	e00a      	b.n	8002be4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002bce:	462a      	mov	r2, r5
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f844 	bl	8002c60 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8002bd8:	e004      	b.n	8002be4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002bda:	4621      	mov	r1, r4
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f858 	bl	8002c92 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002be2:	bf00      	nop
	  return false;
 8002be4:	2300      	movs	r3, #0
	}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bdb0      	pop	{r4, r5, r7, pc}

08002bee <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fc39 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	7338      	strb	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff ffec 	bl	8002c1c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002c44:	4604      	mov	r4, r0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff feb9 	bl	80029be <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff fd00 	bl	8002658 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}

08002c60 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002c6c:	68b8      	ldr	r0, [r7, #8]
 8002c6e:	f7ff ffbe 	bl	8002bee <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002c72:	4604      	mov	r4, r0
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7ff fbef 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	2004      	movs	r0, #4
 8002c80:	f7ff fbde 	bl	8002440 <_ZnwjPv>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	6013      	str	r3, [r2, #0]
	}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}

08002c92 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f804 	bl	8002caa <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fbd0 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ccc:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cd0:	f019 fa6c 	bl	801c1ac <roundf>
 8002cd4:	eef0 7a40 	vmov.f32	s15, s0
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8002ce2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ce6:	b0a2      	sub	sp, #136	; 0x88
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002cee:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002d00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d12:	7113      	strb	r3, [r2, #4]
 8002d14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d18:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002d1c:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	441a      	add	r2, r3
 8002d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d36:	3302      	adds	r3, #2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	441a      	add	r2, r3
 8002d3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d42:	3303      	adds	r3, #3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	4413      	add	r3, r2
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	4615      	mov	r5, r2
 8002d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d54:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8002d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d5c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d64:	3304      	adds	r3, #4
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d6e:	677a      	str	r2, [r7, #116]	; 0x74
 8002d70:	f04f 0000 	mov.w	r0, #0
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d82:	3305      	adds	r3, #5
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8002d98:	0233      	lsls	r3, r6, #8
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	eb10 0802 	adds.w	r8, r0, r2
 8002da0:	eb41 0903 	adc.w	r9, r1, r3
 8002da4:	eb14 0308 	adds.w	r3, r4, r8
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
 8002daa:	eb45 0309 	adc.w	r3, r5, r9
 8002dae:	667b      	str	r3, [r7, #100]	; 0x64
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002db8:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8002dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002dc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dc8:	3306      	adds	r3, #6
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dde:	0419      	lsls	r1, r3, #16
 8002de0:	2000      	movs	r0, #0
 8002de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002de6:	3307      	adds	r3, #7
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	653b      	str	r3, [r7, #80]	; 0x50
 8002df0:	657a      	str	r2, [r7, #84]	; 0x54
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8002dfc:	0633      	lsls	r3, r6, #24
 8002dfe:	2200      	movs	r2, #0
 8002e00:	eb10 0a02 	adds.w	sl, r0, r2
 8002e04:	eb41 0b03 	adc.w	fp, r1, r3
 8002e08:	eb14 030a 	adds.w	r3, r4, sl
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e0e:	eb45 030b 	adc.w	r3, r5, fp
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002e1c:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e24:	3307      	adds	r3, #7
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e2e:	3306      	adds	r3, #6
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	441a      	add	r2, r3
 8002e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e3a:	3305      	adds	r3, #5
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	441a      	add	r2, r3
 8002e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e46:	3304      	adds	r3, #4
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	643b      	str	r3, [r7, #64]	; 0x40
 8002e52:	647a      	str	r2, [r7, #68]	; 0x44
 8002e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002e5c:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	0019      	movs	r1, r3
 8002e84:	2000      	movs	r0, #0
 8002e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
 8002e94:	637a      	str	r2, [r7, #52]	; 0x34
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002ea0:	0233      	lsls	r3, r6, #8
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	1886      	adds	r6, r0, r2
 8002ea6:	62be      	str	r6, [r7, #40]	; 0x28
 8002ea8:	eb41 0303 	adc.w	r3, r1, r3
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	18e3      	adds	r3, r4, r3
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	eb45 0303 	adc.w	r3, r5, r3
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002ec8:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8002ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ed8:	3301      	adds	r3, #1
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	61fa      	str	r2, [r7, #28]
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	0419      	lsls	r1, r3, #16
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2200      	movs	r2, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	617a      	str	r2, [r7, #20]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	693e      	ldr	r6, [r7, #16]
 8002f0a:	0633      	lsls	r3, r6, #24
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	1886      	adds	r6, r0, r2
 8002f10:	60be      	str	r6, [r7, #8]
 8002f12:	eb41 0303 	adc.w	r3, r1, r3
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	eb45 0303 	adc.w	r3, r5, r3
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f32:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3788      	adds	r7, #136	; 0x88
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f44:	4770      	bx	lr

08002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002f46:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5c:	d302      	bcc.n	8002f64 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002f5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002f62:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	8af9      	ldrh	r1, [r7, #22]
 8002f70:	2000      	movs	r0, #0
 8002f72:	468a      	mov	sl, r1
 8002f74:	4683      	mov	fp, r0
 8002f76:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8002f7a:	2500      	movs	r5, #0
 8002f7c:	ea42 0804 	orr.w	r8, r2, r4
 8002f80:	ea43 0905 	orr.w	r9, r3, r5
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f94:	4770      	bx	lr

08002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	b293      	uxth	r3, r2
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	81fb      	strh	r3, [r7, #14]
                return value;
 8002fae:	89fb      	ldrh	r3, [r7, #14]
            }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>:
        class SensorF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002fbc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	4698      	mov	r8, r3
 8002fdc:	4691      	mov	r9, r2
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8002fea:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8002fee:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002ff2:	b294      	uxth	r4, r2
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	ea40 0a04 	orr.w	sl, r0, r4
 8002ffa:	ea41 0b05 	orr.w	fp, r1, r5
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800300e:	4770      	bx	lr

08003010 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2320);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2320) {
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ffba 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003022:	4603      	mov	r3, r0
 8003024:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d000      	beq.n	8003036 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x26>
                    while(1);
 8003034:	e7fe      	b.n	8003034 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	0c02      	lsrs	r2, r0, #16
 8003046:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800304a:	0c0b      	lsrs	r3, r1, #16
 800304c:	4613      	mov	r3, r2
 800304e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800305c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	6178      	str	r0, [r7, #20]
 8003066:	6139      	str	r1, [r7, #16]
 8003068:	60fa      	str	r2, [r7, #12]
 800306a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800306e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003072:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003110 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb4>
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	dd01      	ble.n	8003084 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x28>
                    value = max;
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb8>)
 8003082:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003084:	edd7 7a02 	vldr	s15, [r7, #8]
 8003088:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003118 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xbc>
 800308c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003094:	d501      	bpl.n	800309a <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x3e>
                    value = min;
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc0>)
 8003098:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3329);
 800309a:	f640 5301 	movw	r3, #3329	; 0xd01
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff4f 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80030a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80030ac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003120 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc4>
 80030b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030b4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003124 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc8>
 80030b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030bc:	eeb0 0a47 	vmov.f32	s0, s14
 80030c0:	f7ff fdff 	bl	8002cc2 <_ZSt5roundf>
 80030c4:	eef0 7a40 	vmov.f32	s15, s0
 80030c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030cc:	ee17 3a90 	vmov	r3, s15
 80030d0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	8bf9      	ldrh	r1, [r7, #30]
 80030da:	2000      	movs	r0, #0
 80030dc:	4688      	mov	r8, r1
 80030de:	4681      	mov	r9, r0
 80030e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80030e4:	6079      	str	r1, [r7, #4]
 80030e6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	683c      	ldr	r4, [r7, #0]
 80030ee:	2500      	movs	r5, #0
 80030f0:	ea42 0a04 	orr.w	sl, r2, r4
 80030f4:	ea43 0b05 	orr.w	fp, r3, r5
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2204      	movs	r2, #4
 8003102:	701a      	strb	r2, [r3, #0]
            }
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310e:	bf00      	nop
 8003110:	440ad666 	.word	0x440ad666
 8003114:	440ad666 	.word	0x440ad666
 8003118:	c2c80000 	.word	0xc2c80000
 800311c:	c2c80000 	.word	0xc2c80000
 8003120:	42c80000 	.word	0x42c80000
 8003124:	3c23d70a 	.word	0x3c23d70a

08003128 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b088      	sub	sp, #32
 800312e:	af00      	add	r7, sp, #0
 8003130:	6178      	str	r0, [r7, #20]
 8003132:	6139      	str	r1, [r7, #16]
 8003134:	60fa      	str	r2, [r7, #12]
 8003136:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800313a:	edd7 7a02 	vldr	s15, [r7, #8]
 800313e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031dc <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb4>
 8003142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	dd01      	ble.n	8003150 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x28>
                    value = max;
 800314c:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb8>)
 800314e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003150:	edd7 7a02 	vldr	s15, [r7, #8]
 8003154:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031e4 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xbc>
 8003158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	d501      	bpl.n	8003166 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x3e>
                    value = min;
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc0>)
 8003164:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3328);
 8003166:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff fee9 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003174:	edd7 7a02 	vldr	s15, [r7, #8]
 8003178:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80031ec <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc4>
 800317c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003180:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80031f0 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc8>
 8003184:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003188:	eeb0 0a47 	vmov.f32	s0, s14
 800318c:	f7ff fd99 	bl	8002cc2 <_ZSt5roundf>
 8003190:	eef0 7a40 	vmov.f32	s15, s0
 8003194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003198:	ee17 3a90 	vmov	r3, s15
 800319c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	8bf9      	ldrh	r1, [r7, #30]
 80031a6:	2000      	movs	r0, #0
 80031a8:	4688      	mov	r8, r1
 80031aa:	4681      	mov	r9, r0
 80031ac:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80031b0:	6079      	str	r1, [r7, #4]
 80031b2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80031b6:	6039      	str	r1, [r7, #0]
 80031b8:	683c      	ldr	r4, [r7, #0]
 80031ba:	2500      	movs	r5, #0
 80031bc:	ea42 0a04 	orr.w	sl, r2, r4
 80031c0:	ea43 0b05 	orr.w	fp, r3, r5
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2204      	movs	r2, #4
 80031ce:	701a      	strb	r2, [r3, #0]
            }
 80031d0:	bf00      	nop
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	440ad666 	.word	0x440ad666
 80031e0:	440ad666 	.word	0x440ad666
 80031e4:	c2c80000 	.word	0xc2c80000
 80031e8:	c2c80000 	.word	0xc2c80000
 80031ec:	42c80000 	.word	0x42c80000
 80031f0:	3c23d70a 	.word	0x3c23d70a

080031f4 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3073            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6178      	str	r0, [r7, #20]
 80031fe:	6139      	str	r1, [r7, #16]
 8003200:	60fa      	str	r2, [r7, #12]
 8003202:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3073);
 8003204:	f640 4301 	movw	r3, #3073	; 0xc01
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6939      	ldr	r1, [r7, #16]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7ff fe9a 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	8bf9      	ldrh	r1, [r7, #30]
 800321e:	2000      	movs	r0, #0
 8003220:	4688      	mov	r8, r1
 8003222:	4681      	mov	r9, r0
 8003224:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003228:	6079      	str	r1, [r7, #4]
 800322a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800322e:	6039      	str	r1, [r7, #0]
 8003230:	683c      	ldr	r4, [r7, #0]
 8003232:	2500      	movs	r5, #0
 8003234:	ea42 0a04 	orr.w	sl, r2, r4
 8003238:	ea43 0b05 	orr.w	fp, r3, r5
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2204      	movs	r2, #4
 8003246:	701a      	strb	r2, [r3, #0]
            }
 8003248:	bf00      	nop
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003252 <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3072            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003252:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6178      	str	r0, [r7, #20]
 800325c:	6139      	str	r1, [r7, #16]
 800325e:	60fa      	str	r2, [r7, #12]
 8003260:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3072);
 8003262:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff fe6b 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327a:	8bf9      	ldrh	r1, [r7, #30]
 800327c:	2000      	movs	r0, #0
 800327e:	4688      	mov	r8, r1
 8003280:	4681      	mov	r9, r0
 8003282:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003286:	6079      	str	r1, [r7, #4]
 8003288:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	683c      	ldr	r4, [r7, #0]
 8003290:	2500      	movs	r5, #0
 8003292:	ea42 0a04 	orr.w	sl, r2, r4
 8003296:	ea43 0b05 	orr.w	fp, r3, r5
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2204      	movs	r2, #4
 80032a4:	701a      	strb	r2, [r3, #0]
            }
 80032a6:	bf00      	nop
 80032a8:	3720      	adds	r7, #32
 80032aa:	46bd      	mov	sp, r7
 80032ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032b0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80032b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b4:	b088      	sub	sp, #32
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6178      	str	r0, [r7, #20]
 80032ba:	6139      	str	r1, [r7, #16]
 80032bc:	60fa      	str	r2, [r7, #12]
 80032be:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80032c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032c6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003364 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb4>
 80032ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	dd01      	ble.n	80032d8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x28>
                    value = max;
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb8>)
 80032d6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80032d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032dc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800336c <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xbc>
 80032e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e8:	d501      	bpl.n	80032ee <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x3e>
                    value = min;
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc0>)
 80032ec:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2816);
 80032ee:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6939      	ldr	r1, [r7, #16]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff fe25 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80032fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003300:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003374 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc4>
 8003304:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003308:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003378 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc8>
 800330c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003310:	eeb0 0a47 	vmov.f32	s0, s14
 8003314:	f7ff fcd5 	bl	8002cc2 <_ZSt5roundf>
 8003318:	eef0 7a40 	vmov.f32	s15, s0
 800331c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	8bf9      	ldrh	r1, [r7, #30]
 800332e:	2000      	movs	r0, #0
 8003330:	4688      	mov	r8, r1
 8003332:	4681      	mov	r9, r0
 8003334:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003338:	6079      	str	r1, [r7, #4]
 800333a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800333e:	6039      	str	r1, [r7, #0]
 8003340:	683c      	ldr	r4, [r7, #0]
 8003342:	2500      	movs	r5, #0
 8003344:	ea42 0a04 	orr.w	sl, r2, r4
 8003348:	ea43 0b05 	orr.w	fp, r3, r5
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2204      	movs	r2, #4
 8003356:	701a      	strb	r2, [r3, #0]
            }
 8003358:	bf00      	nop
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003362:	bf00      	nop
 8003364:	440ad666 	.word	0x440ad666
 8003368:	440ad666 	.word	0x440ad666
 800336c:	c2c80000 	.word	0xc2c80000
 8003370:	c2c80000 	.word	0xc2c80000
 8003374:	42c80000 	.word	0x42c80000
 8003378:	3c23d70a 	.word	0x3c23d70a

0800337c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b088      	sub	sp, #32
 8003382:	af00      	add	r7, sp, #0
 8003384:	6178      	str	r0, [r7, #20]
 8003386:	6139      	str	r1, [r7, #16]
 8003388:	60fa      	str	r2, [r7, #12]
 800338a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800338e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003392:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003430 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb4>
 8003396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	dd01      	ble.n	80033a4 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x28>
                    value = max;
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb8>)
 80033a2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80033a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003438 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xbc>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d501      	bpl.n	80033ba <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x3e>
                    value = min;
 80033b6:	4b21      	ldr	r3, [pc, #132]	; (800343c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc0>)
 80033b8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2611);
 80033ba:	f640 2333 	movw	r3, #2611	; 0xa33
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	6978      	ldr	r0, [r7, #20]
 80033c4:	f7ff fdbf 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80033c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033cc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003440 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc4>
 80033d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003444 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc8>
 80033d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033dc:	eeb0 0a47 	vmov.f32	s0, s14
 80033e0:	f7ff fc6f 	bl	8002cc2 <_ZSt5roundf>
 80033e4:	eef0 7a40 	vmov.f32	s15, s0
 80033e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ec:	ee17 3a90 	vmov	r3, s15
 80033f0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	8bf9      	ldrh	r1, [r7, #30]
 80033fa:	2000      	movs	r0, #0
 80033fc:	4688      	mov	r8, r1
 80033fe:	4681      	mov	r9, r0
 8003400:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003404:	6079      	str	r1, [r7, #4]
 8003406:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800340a:	6039      	str	r1, [r7, #0]
 800340c:	683c      	ldr	r4, [r7, #0]
 800340e:	2500      	movs	r5, #0
 8003410:	ea42 0a04 	orr.w	sl, r2, r4
 8003414:	ea43 0b05 	orr.w	fp, r3, r5
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2204      	movs	r2, #4
 8003422:	701a      	strb	r2, [r3, #0]
            }
 8003424:	bf00      	nop
 8003426:	3720      	adds	r7, #32
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	440ad666 	.word	0x440ad666
 8003434:	440ad666 	.word	0x440ad666
 8003438:	c2c80000 	.word	0xc2c80000
 800343c:	c2c80000 	.word	0xc2c80000
 8003440:	42c80000 	.word	0x42c80000
 8003444:	3c23d70a 	.word	0x3c23d70a

08003448 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344c:	b088      	sub	sp, #32
 800344e:	af00      	add	r7, sp, #0
 8003450:	6178      	str	r0, [r7, #20]
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	60fa      	str	r2, [r7, #12]
 8003456:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800345a:	edd7 7a02 	vldr	s15, [r7, #8]
 800345e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80034fc <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb4>
 8003462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	dd01      	ble.n	8003470 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x28>
                    value = max;
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb8>)
 800346e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003470:	edd7 7a02 	vldr	s15, [r7, #8]
 8003474:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003504 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xbc>
 8003478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d501      	bpl.n	8003486 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x3e>
                    value = min;
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc0>)
 8003484:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2610);
 8003486:	f640 2332 	movw	r3, #2610	; 0xa32
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	6939      	ldr	r1, [r7, #16]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff fd59 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003494:	edd7 7a02 	vldr	s15, [r7, #8]
 8003498:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800350c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc4>
 800349c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034a0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003510 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc8>
 80034a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034a8:	eeb0 0a47 	vmov.f32	s0, s14
 80034ac:	f7ff fc09 	bl	8002cc2 <_ZSt5roundf>
 80034b0:	eef0 7a40 	vmov.f32	s15, s0
 80034b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b8:	ee17 3a90 	vmov	r3, s15
 80034bc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	8bf9      	ldrh	r1, [r7, #30]
 80034c6:	2000      	movs	r0, #0
 80034c8:	4688      	mov	r8, r1
 80034ca:	4681      	mov	r9, r0
 80034cc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80034d0:	6079      	str	r1, [r7, #4]
 80034d2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80034d6:	6039      	str	r1, [r7, #0]
 80034d8:	683c      	ldr	r4, [r7, #0]
 80034da:	2500      	movs	r5, #0
 80034dc:	ea42 0a04 	orr.w	sl, r2, r4
 80034e0:	ea43 0b05 	orr.w	fp, r3, r5
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2204      	movs	r2, #4
 80034ee:	701a      	strb	r2, [r3, #0]
            }
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fa:	bf00      	nop
 80034fc:	440ad666 	.word	0x440ad666
 8003500:	440ad666 	.word	0x440ad666
 8003504:	c2c80000 	.word	0xc2c80000
 8003508:	c2c80000 	.word	0xc2c80000
 800350c:	42c80000 	.word	0x42c80000
 8003510:	3c23d70a 	.word	0x3c23d70a

08003514 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af00      	add	r7, sp, #0
 800351c:	6178      	str	r0, [r7, #20]
 800351e:	6139      	str	r1, [r7, #16]
 8003520:	60fa      	str	r2, [r7, #12]
 8003522:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003526:	edd7 7a02 	vldr	s15, [r7, #8]
 800352a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80035c8 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb4>
 800352e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	dd01      	ble.n	800353c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x28>
                    value = max;
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb8>)
 800353a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800353c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003540:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80035d0 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xbc>
 8003544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354c:	d501      	bpl.n	8003552 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x3e>
                    value = min;
 800354e:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc0>)
 8003550:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2609);
 8003552:	f640 2331 	movw	r3, #2609	; 0xa31
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	6939      	ldr	r1, [r7, #16]
 800355a:	6978      	ldr	r0, [r7, #20]
 800355c:	f7ff fcf3 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003560:	edd7 7a02 	vldr	s15, [r7, #8]
 8003564:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80035d8 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc4>
 8003568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800356c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80035dc <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc8>
 8003570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003574:	eeb0 0a47 	vmov.f32	s0, s14
 8003578:	f7ff fba3 	bl	8002cc2 <_ZSt5roundf>
 800357c:	eef0 7a40 	vmov.f32	s15, s0
 8003580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003584:	ee17 3a90 	vmov	r3, s15
 8003588:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	8bf9      	ldrh	r1, [r7, #30]
 8003592:	2000      	movs	r0, #0
 8003594:	4688      	mov	r8, r1
 8003596:	4681      	mov	r9, r0
 8003598:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800359c:	6079      	str	r1, [r7, #4]
 800359e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035a2:	6039      	str	r1, [r7, #0]
 80035a4:	683c      	ldr	r4, [r7, #0]
 80035a6:	2500      	movs	r5, #0
 80035a8:	ea42 0a04 	orr.w	sl, r2, r4
 80035ac:	ea43 0b05 	orr.w	fp, r3, r5
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
            }
 80035bc:	bf00      	nop
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	440ad666 	.word	0x440ad666
 80035cc:	440ad666 	.word	0x440ad666
 80035d0:	c2c80000 	.word	0xc2c80000
 80035d4:	c2c80000 	.word	0xc2c80000
 80035d8:	42c80000 	.word	0x42c80000
 80035dc:	3c23d70a 	.word	0x3c23d70a

080035e0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6178      	str	r0, [r7, #20]
 80035ea:	6139      	str	r1, [r7, #16]
 80035ec:	60fa      	str	r2, [r7, #12]
 80035ee:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80035f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035f6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003694 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb4>
 80035fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	dd01      	ble.n	8003608 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x28>
                    value = max;
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb8>)
 8003606:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003608:	edd7 7a02 	vldr	s15, [r7, #8]
 800360c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800369c <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xbc>
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d501      	bpl.n	800361e <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x3e>
                    value = min;
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc0>)
 800361c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2608);
 800361e:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff fc8d 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 800362c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003630:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036a4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc4>
 8003634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003638:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80036a8 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc8>
 800363c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003640:	eeb0 0a47 	vmov.f32	s0, s14
 8003644:	f7ff fb3d 	bl	8002cc2 <_ZSt5roundf>
 8003648:	eef0 7a40 	vmov.f32	s15, s0
 800364c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	8bf9      	ldrh	r1, [r7, #30]
 800365e:	2000      	movs	r0, #0
 8003660:	4688      	mov	r8, r1
 8003662:	4681      	mov	r9, r0
 8003664:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003668:	6079      	str	r1, [r7, #4]
 800366a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800366e:	6039      	str	r1, [r7, #0]
 8003670:	683c      	ldr	r4, [r7, #0]
 8003672:	2500      	movs	r5, #0
 8003674:	ea42 0a04 	orr.w	sl, r2, r4
 8003678:	ea43 0b05 	orr.w	fp, r3, r5
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2204      	movs	r2, #4
 8003686:	701a      	strb	r2, [r3, #0]
            }
 8003688:	bf00      	nop
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003692:	bf00      	nop
 8003694:	440ad666 	.word	0x440ad666
 8003698:	440ad666 	.word	0x440ad666
 800369c:	c2c80000 	.word	0xc2c80000
 80036a0:	c2c80000 	.word	0xc2c80000
 80036a4:	42c80000 	.word	0x42c80000
 80036a8:	3c23d70a 	.word	0x3c23d70a

080036ac <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6178      	str	r0, [r7, #20]
 80036b6:	6139      	str	r1, [r7, #16]
 80036b8:	60fa      	str	r2, [r7, #12]
 80036ba:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80036be:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003760 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb4>
 80036c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	dd01      	ble.n	80036d4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x28>
                    value = max;
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb8>)
 80036d2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80036d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003768 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xbc>
 80036dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d501      	bpl.n	80036ea <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x3e>
                    value = min;
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc0>)
 80036e8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2601);
 80036ea:	f640 2329 	movw	r3, #2601	; 0xa29
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6939      	ldr	r1, [r7, #16]
 80036f2:	6978      	ldr	r0, [r7, #20]
 80036f4:	f7ff fc27 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80036f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80036fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003770 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc4>
 8003700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003704:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003774 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc8>
 8003708:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800370c:	eeb0 0a47 	vmov.f32	s0, s14
 8003710:	f7ff fad7 	bl	8002cc2 <_ZSt5roundf>
 8003714:	eef0 7a40 	vmov.f32	s15, s0
 8003718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800371c:	ee17 3a90 	vmov	r3, s15
 8003720:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	8bf9      	ldrh	r1, [r7, #30]
 800372a:	2000      	movs	r0, #0
 800372c:	4688      	mov	r8, r1
 800372e:	4681      	mov	r9, r0
 8003730:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003734:	6079      	str	r1, [r7, #4]
 8003736:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800373a:	6039      	str	r1, [r7, #0]
 800373c:	683c      	ldr	r4, [r7, #0]
 800373e:	2500      	movs	r5, #0
 8003740:	ea42 0a04 	orr.w	sl, r2, r4
 8003744:	ea43 0b05 	orr.w	fp, r3, r5
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2204      	movs	r2, #4
 8003752:	701a      	strb	r2, [r3, #0]
            }
 8003754:	bf00      	nop
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375e:	bf00      	nop
 8003760:	440ad666 	.word	0x440ad666
 8003764:	440ad666 	.word	0x440ad666
 8003768:	c2c80000 	.word	0xc2c80000
 800376c:	c2c80000 	.word	0xc2c80000
 8003770:	42c80000 	.word	0x42c80000
 8003774:	3c23d70a 	.word	0x3c23d70a

08003778 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b088      	sub	sp, #32
 800377e:	af00      	add	r7, sp, #0
 8003780:	6178      	str	r0, [r7, #20]
 8003782:	6139      	str	r1, [r7, #16]
 8003784:	60fa      	str	r2, [r7, #12]
 8003786:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800378a:	edd7 7a02 	vldr	s15, [r7, #8]
 800378e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800382c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb4>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	dd01      	ble.n	80037a0 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x28>
                    value = max;
 800379c:	4b24      	ldr	r3, [pc, #144]	; (8003830 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb8>)
 800379e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80037a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003834 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xbc>
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d501      	bpl.n	80037b6 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x3e>
                    value = min;
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc0>)
 80037b4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2600);
 80037b6:	f640 2328 	movw	r3, #2600	; 0xa28
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	6939      	ldr	r1, [r7, #16]
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7ff fbc1 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80037c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800383c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc4>
 80037cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037d0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003840 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc8>
 80037d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037d8:	eeb0 0a47 	vmov.f32	s0, s14
 80037dc:	f7ff fa71 	bl	8002cc2 <_ZSt5roundf>
 80037e0:	eef0 7a40 	vmov.f32	s15, s0
 80037e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e8:	ee17 3a90 	vmov	r3, s15
 80037ec:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	8bf9      	ldrh	r1, [r7, #30]
 80037f6:	2000      	movs	r0, #0
 80037f8:	4688      	mov	r8, r1
 80037fa:	4681      	mov	r9, r0
 80037fc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003800:	6079      	str	r1, [r7, #4]
 8003802:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003806:	6039      	str	r1, [r7, #0]
 8003808:	683c      	ldr	r4, [r7, #0]
 800380a:	2500      	movs	r5, #0
 800380c:	ea42 0a04 	orr.w	sl, r2, r4
 8003810:	ea43 0b05 	orr.w	fp, r3, r5
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2204      	movs	r2, #4
 800381e:	701a      	strb	r2, [r3, #0]
            }
 8003820:	bf00      	nop
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	440ad666 	.word	0x440ad666
 8003830:	440ad666 	.word	0x440ad666
 8003834:	c2c80000 	.word	0xc2c80000
 8003838:	c2c80000 	.word	0xc2c80000
 800383c:	42c80000 	.word	0x42c80000
 8003840:	3c23d70a 	.word	0x3c23d70a

08003844 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b088      	sub	sp, #32
 800384a:	af00      	add	r7, sp, #0
 800384c:	6178      	str	r0, [r7, #20]
 800384e:	6139      	str	r1, [r7, #16]
 8003850:	60fa      	str	r2, [r7, #12]
 8003852:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003856:	edd7 7a02 	vldr	s15, [r7, #8]
 800385a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80038f8 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 800385e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	dd01      	ble.n	800386c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 800386a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800386c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003870:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003900 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8003874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387c:	d501      	bpl.n	8003882 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800387e:	4b21      	ldr	r3, [pc, #132]	; (8003904 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8003880:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2599);
 8003882:	f640 2327 	movw	r3, #2599	; 0xa27
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	6978      	ldr	r0, [r7, #20]
 800388c:	f7ff fb5b 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003890:	edd7 7a02 	vldr	s15, [r7, #8]
 8003894:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003908 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8003898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800390c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 80038a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038a4:	eeb0 0a47 	vmov.f32	s0, s14
 80038a8:	f7ff fa0b 	bl	8002cc2 <_ZSt5roundf>
 80038ac:	eef0 7a40 	vmov.f32	s15, s0
 80038b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b4:	ee17 3a90 	vmov	r3, s15
 80038b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	8bf9      	ldrh	r1, [r7, #30]
 80038c2:	2000      	movs	r0, #0
 80038c4:	4688      	mov	r8, r1
 80038c6:	4681      	mov	r9, r0
 80038c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80038cc:	6079      	str	r1, [r7, #4]
 80038ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	683c      	ldr	r4, [r7, #0]
 80038d6:	2500      	movs	r5, #0
 80038d8:	ea42 0a04 	orr.w	sl, r2, r4
 80038dc:	ea43 0b05 	orr.w	fp, r3, r5
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2204      	movs	r2, #4
 80038ea:	701a      	strb	r2, [r3, #0]
            }
 80038ec:	bf00      	nop
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	440ad666 	.word	0x440ad666
 80038fc:	440ad666 	.word	0x440ad666
 8003900:	c2c80000 	.word	0xc2c80000
 8003904:	c2c80000 	.word	0xc2c80000
 8003908:	42c80000 	.word	0x42c80000
 800390c:	3c23d70a 	.word	0x3c23d70a

08003910 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	6178      	str	r0, [r7, #20]
 800391a:	6139      	str	r1, [r7, #16]
 800391c:	60fa      	str	r2, [r7, #12]
 800391e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003922:	edd7 7a02 	vldr	s15, [r7, #8]
 8003926:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80039c4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 800392a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	dd01      	ble.n	8003938 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003934:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 8003936:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003938:	edd7 7a02 	vldr	s15, [r7, #8]
 800393c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80039cc <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 8003940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d501      	bpl.n	800394e <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800394a:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 800394c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2598);
 800394e:	f640 2326 	movw	r3, #2598	; 0xa26
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	6939      	ldr	r1, [r7, #16]
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff faf5 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 800395c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003960:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039d4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 8003964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003968:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80039d8 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 800396c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003970:	eeb0 0a47 	vmov.f32	s0, s14
 8003974:	f7ff f9a5 	bl	8002cc2 <_ZSt5roundf>
 8003978:	eef0 7a40 	vmov.f32	s15, s0
 800397c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003980:	ee17 3a90 	vmov	r3, s15
 8003984:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	8bf9      	ldrh	r1, [r7, #30]
 800398e:	2000      	movs	r0, #0
 8003990:	4688      	mov	r8, r1
 8003992:	4681      	mov	r9, r0
 8003994:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003998:	6079      	str	r1, [r7, #4]
 800399a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800399e:	6039      	str	r1, [r7, #0]
 80039a0:	683c      	ldr	r4, [r7, #0]
 80039a2:	2500      	movs	r5, #0
 80039a4:	ea42 0a04 	orr.w	sl, r2, r4
 80039a8:	ea43 0b05 	orr.w	fp, r3, r5
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2204      	movs	r2, #4
 80039b6:	701a      	strb	r2, [r3, #0]
            }
 80039b8:	bf00      	nop
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c2:	bf00      	nop
 80039c4:	440ad666 	.word	0x440ad666
 80039c8:	440ad666 	.word	0x440ad666
 80039cc:	c2c80000 	.word	0xc2c80000
 80039d0:	c2c80000 	.word	0xc2c80000
 80039d4:	42c80000 	.word	0x42c80000
 80039d8:	3c23d70a 	.word	0x3c23d70a

080039dc <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b088      	sub	sp, #32
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6178      	str	r0, [r7, #20]
 80039e6:	6139      	str	r1, [r7, #16]
 80039e8:	60fa      	str	r2, [r7, #12]
 80039ea:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80039ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80039f2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003a90 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 80039f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	dd01      	ble.n	8003a04 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 8003a02:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003a04:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a08:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003a98 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 8003a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	d501      	bpl.n	8003a1a <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003a16:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 8003a18:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2597);
 8003a1a:	f640 2325 	movw	r3, #2597	; 0xa25
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	6939      	ldr	r1, [r7, #16]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff fa8f 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003aa0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 8003a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a34:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003aa4 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 8003a38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a3c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a40:	f7ff f93f 	bl	8002cc2 <_ZSt5roundf>
 8003a44:	eef0 7a40 	vmov.f32	s15, s0
 8003a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a4c:	ee17 3a90 	vmov	r3, s15
 8003a50:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	8bf9      	ldrh	r1, [r7, #30]
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	4688      	mov	r8, r1
 8003a5e:	4681      	mov	r9, r0
 8003a60:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003a64:	6079      	str	r1, [r7, #4]
 8003a66:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003a6a:	6039      	str	r1, [r7, #0]
 8003a6c:	683c      	ldr	r4, [r7, #0]
 8003a6e:	2500      	movs	r5, #0
 8003a70:	ea42 0a04 	orr.w	sl, r2, r4
 8003a74:	ea43 0b05 	orr.w	fp, r3, r5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2204      	movs	r2, #4
 8003a82:	701a      	strb	r2, [r3, #0]
            }
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	440ad666 	.word	0x440ad666
 8003a94:	440ad666 	.word	0x440ad666
 8003a98:	c2c80000 	.word	0xc2c80000
 8003a9c:	c2c80000 	.word	0xc2c80000
 8003aa0:	42c80000 	.word	0x42c80000
 8003aa4:	3c23d70a 	.word	0x3c23d70a

08003aa8 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2592);
 8003ab8:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fa40 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4698      	mov	r8, r3
 8003ad6:	4691      	mov	r9, r2
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ae4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ae8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003aec:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003af0:	2500      	movs	r5, #0
 8003af2:	ea40 0a04 	orr.w	sl, r0, r4
 8003af6:	ea41 0b05 	orr.w	fp, r1, r5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	701a      	strb	r2, [r3, #0]
            }
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b10 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2309);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2309) {
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fa3a 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	f640 1305 	movw	r3, #2309	; 0x905
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d000      	beq.n	8003b3a <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x2a>
                    while(1);
 8003b38:	e7fe      	b.n	8003b38 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	0c02      	lsrs	r2, r0, #16
 8003b4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b4e:	0c0b      	lsrs	r3, r1, #16
 8003b50:	4613      	mov	r3, r2
 8003b52:	73fb      	strb	r3, [r7, #15]
                return value;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(1);
            constexpr static float max = static_cast<float>(300);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b64:	b088      	sub	sp, #32
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6178      	str	r0, [r7, #20]
 8003b6a:	6139      	str	r1, [r7, #16]
 8003b6c:	60fa      	str	r2, [r7, #12]
 8003b6e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003b72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c0c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xac>
 8003b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	dd01      	ble.n	8003b88 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x28>
                    value = max;
 8003b84:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb0>)
 8003b86:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d502      	bpl.n	8003ba0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x40>
                    value = min;
 8003b9a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b9e:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2308);
 8003ba0:	f640 1304 	movw	r3, #2308	; 0x904
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f7ff f9cc 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 8003bae:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bb2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003c14 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb4>
 8003bb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bba:	eeb0 0a47 	vmov.f32	s0, s14
 8003bbe:	f7ff f880 	bl	8002cc2 <_ZSt5roundf>
 8003bc2:	eef0 7a40 	vmov.f32	s15, s0
 8003bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bca:	ee17 3a90 	vmov	r3, s15
 8003bce:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	8bf9      	ldrh	r1, [r7, #30]
 8003bd8:	2000      	movs	r0, #0
 8003bda:	4688      	mov	r8, r1
 8003bdc:	4681      	mov	r9, r0
 8003bde:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003be2:	6079      	str	r1, [r7, #4]
 8003be4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003be8:	6039      	str	r1, [r7, #0]
 8003bea:	683c      	ldr	r4, [r7, #0]
 8003bec:	2500      	movs	r5, #0
 8003bee:	ea42 0a04 	orr.w	sl, r2, r4
 8003bf2:	ea43 0b05 	orr.w	fp, r3, r5
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	701a      	strb	r2, [r3, #0]
            }
 8003c02:	bf00      	nop
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0c:	43960000 	.word	0x43960000
 8003c10:	43960000 	.word	0x43960000
 8003c14:	3ba3d70a 	.word	0x3ba3d70a

08003c18 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2308) {
 8003c22:	6839      	ldr	r1, [r7, #0]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f9b6 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f640 1304 	movw	r3, #2308	; 0x904
 8003c32:	429a      	cmp	r2, r3
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d000      	beq.n	8003c42 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x2a>
                    while(1);
 8003c40:	e7fe      	b.n	8003c40 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	0c02      	lsrs	r2, r0, #16
 8003c52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c56:	0c0b      	lsrs	r3, r1, #16
 8003c58:	4613      	mov	r3, r2
 8003c5a:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 8003c5c:	89fb      	ldrh	r3, [r7, #14]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c66:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003c78 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x60>
 8003c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	3ba3d70a 	.word	0x3ba3d70a

08003c7c <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2307            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2307);
 8003c8c:	f640 1303 	movw	r3, #2307	; 0x903
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff f956 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4698      	mov	r8, r3
 8003caa:	4691      	mov	r9, r2
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003cb8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003cbc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003cc0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003cc4:	2500      	movs	r5, #0
 8003cc6:	ea40 0a04 	orr.w	sl, r0, r4
 8003cca:	ea41 0b05 	orr.w	fp, r1, r5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	701a      	strb	r2, [r3, #0]
            }
 8003cda:	bf00      	nop
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ce4 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2307) {
 8003cee:	6839      	ldr	r1, [r7, #0]
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff f950 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f640 1303 	movw	r3, #2307	; 0x903
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d000      	beq.n	8003d0e <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x2a>
                    while(1);
 8003d0c:	e7fe      	b.n	8003d0c <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	0c02      	lsrs	r2, r0, #16
 8003d1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d22:	0c0b      	lsrs	r3, r1, #16
 8003d24:	4613      	mov	r3, r2
 8003d26:	73fb      	strb	r3, [r7, #15]
                return value;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2306            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003d32:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2306);
 8003d42:	f640 1302 	movw	r3, #2306	; 0x902
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff f8fb 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4698      	mov	r8, r3
 8003d60:	4691      	mov	r9, r2
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003d6e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003d72:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003d76:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003d7a:	2500      	movs	r5, #0
 8003d7c:	ea40 0a04 	orr.w	sl, r0, r4
 8003d80:	ea41 0b05 	orr.w	fp, r1, r5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	701a      	strb	r2, [r3, #0]
            }
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d9a <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2306) {
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff f8f5 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	f640 1302 	movw	r3, #2306	; 0x902
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d000      	beq.n	8003dc4 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x2a>
                    while(1);
 8003dc2:	e7fe      	b.n	8003dc2 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	0c02      	lsrs	r2, r0, #16
 8003dd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003dd8:	0c0b      	lsrs	r3, r1, #16
 8003dda:	4613      	mov	r3, r2
 8003ddc:	73fb      	strb	r3, [r7, #15]
                return value;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint8_t min = static_cast<uint8_t>(5);
            constexpr static uint8_t max = static_cast<uint8_t>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x1a>
                    value = max;
 8003dfe:	2364      	movs	r3, #100	; 0x64
 8003e00:	70fb      	strb	r3, [r7, #3]
                }
                if (value < min) {
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d801      	bhi.n	8003e0c <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x24>
                    value = min;
 8003e08:	2305      	movs	r3, #5
 8003e0a:	70fb      	strb	r3, [r7, #3]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2305);
 8003e0c:	f640 1301 	movw	r3, #2305	; 0x901
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff f896 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2200      	movs	r2, #0
 8003e28:	4698      	mov	r8, r3
 8003e2a:	4691      	mov	r9, r2
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003e38:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003e3c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003e40:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003e44:	2500      	movs	r5, #0
 8003e46:	ea40 0a04 	orr.w	sl, r0, r4
 8003e4a:	ea41 0b05 	orr.w	fp, r1, r5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]
            }
 8003e5a:	bf00      	nop
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e64 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2305) {
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff f890 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f640 1301 	movw	r3, #2305	; 0x901
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d000      	beq.n	8003e8e <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x2a>
                    while(1);
 8003e8c:	e7fe      	b.n	8003e8c <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	0c02      	lsrs	r2, r0, #16
 8003e9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ea2:	0c0b      	lsrs	r3, r1, #16
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	73fb      	strb	r3, [r7, #15]
                return value;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2304            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003eb2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2304);
 8003ec2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7ff f83b 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2200      	movs	r2, #0
 8003ede:	4698      	mov	r8, r3
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003eee:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ef2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ef6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003efa:	2500      	movs	r5, #0
 8003efc:	ea40 0a04 	orr.w	sl, r0, r4
 8003f00:	ea41 0b05 	orr.w	fp, r1, r5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	701a      	strb	r2, [r3, #0]
            }
 8003f10:	bf00      	nop
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f1a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2304) {
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff f835 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d000      	beq.n	8003f40 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x26>
                    while(1);
 8003f3e:	e7fe      	b.n	8003f3e <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	0c02      	lsrs	r2, r0, #16
 8003f50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f54:	0c0b      	lsrs	r3, r1, #16
 8003f56:	4613      	mov	r3, r2
 8003f58:	73fb      	strb	r3, [r7, #15]
                return value;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0.01);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6178      	str	r0, [r7, #20]
 8003f6e:	6139      	str	r1, [r7, #16]
 8003f70:	60fa      	str	r2, [r7, #12]
 8003f72:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003f76:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f7a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004010 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xac>
 8003f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	dd01      	ble.n	8003f8c <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x28>
                    value = max;
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb0>)
 8003f8a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f90:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004018 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 8003f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	d501      	bpl.n	8003fa2 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x3e>
                    value = min;
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	; (800401c <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb8>)
 8003fa0:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2048);
 8003fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7fe ffcb 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 8003fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fb4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004018 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 8003fb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003fbc:	eeb0 0a47 	vmov.f32	s0, s14
 8003fc0:	f7fe fe7f 	bl	8002cc2 <_ZSt5roundf>
 8003fc4:	eef0 7a40 	vmov.f32	s15, s0
 8003fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fcc:	ee17 3a90 	vmov	r3, s15
 8003fd0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	8bf9      	ldrh	r1, [r7, #30]
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4688      	mov	r8, r1
 8003fde:	4681      	mov	r9, r0
 8003fe0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003fe4:	6079      	str	r1, [r7, #4]
 8003fe6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003fea:	6039      	str	r1, [r7, #0]
 8003fec:	683c      	ldr	r4, [r7, #0]
 8003fee:	2500      	movs	r5, #0
 8003ff0:	ea42 0a04 	orr.w	sl, r2, r4
 8003ff4:	ea43 0b05 	orr.w	fp, r3, r5
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2204      	movs	r2, #4
 8004002:	701a      	strb	r2, [r3, #0]
            }
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	42c80000 	.word	0x42c80000
 8004014:	42c80000 	.word	0x42c80000
 8004018:	3c23d70a 	.word	0x3c23d70a
 800401c:	3c23d70a 	.word	0x3c23d70a

08004020 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2048) {
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fe ffb2 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004032:	4603      	mov	r3, r0
 8004034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004038:	bf14      	ite	ne
 800403a:	2301      	movne	r3, #1
 800403c:	2300      	moveq	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d000      	beq.n	8004046 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x26>
                    while(1);
 8004044:	e7fe      	b.n	8004044 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	0c02      	lsrs	r2, r0, #16
 8004056:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800405a:	0c0b      	lsrs	r3, r1, #16
 800405c:	4613      	mov	r3, r2
 800405e:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 8004060:	89fb      	ldrh	r3, [r7, #14]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800406a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800407c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x5c>
 800406e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8004072:	eeb0 0a67 	vmov.f32	s0, s15
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	3c23d70a 	.word	0x3c23d70a

08004080 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	6178      	str	r0, [r7, #20]
 800408a:	6139      	str	r1, [r7, #16]
 800408c:	60fa      	str	r2, [r7, #12]
 800408e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004096:	d302      	bcc.n	800409e <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8004098:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800409c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1129);
 800409e:	f240 4369 	movw	r3, #1129	; 0x469
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6939      	ldr	r1, [r7, #16]
 80040a6:	6978      	ldr	r0, [r7, #20]
 80040a8:	f7fe ff4d 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	69f9      	ldr	r1, [r7, #28]
 80040b8:	2000      	movs	r0, #0
 80040ba:	468a      	mov	sl, r1
 80040bc:	4683      	mov	fp, r0
 80040be:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80040c2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80040c6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80040ca:	0424      	lsls	r4, r4, #16
 80040cc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80040d0:	ea42 0104 	orr.w	r1, r2, r4
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	432b      	orrs	r3, r5
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040e0:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2205      	movs	r2, #5
 80040e8:	701a      	strb	r2, [r3, #0]
            }
 80040ea:	bf00      	nop
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040f4 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80040f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1128);
 8004104:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7fe ff1a 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2200      	movs	r2, #0
 8004120:	4698      	mov	r8, r3
 8004122:	4691      	mov	r9, r2
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004130:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004134:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004138:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800413c:	2500      	movs	r5, #0
 800413e:	ea40 0a04 	orr.w	sl, r0, r4
 8004142:	ea41 0b05 	orr.w	fp, r1, r5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	701a      	strb	r2, [r3, #0]
            }
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800415c <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b088      	sub	sp, #32
 8004162:	af00      	add	r7, sp, #0
 8004164:	6178      	str	r0, [r7, #20]
 8004166:	6139      	str	r1, [r7, #16]
 8004168:	60fa      	str	r2, [r7, #12]
 800416a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004172:	d302      	bcc.n	800417a <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8004174:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004178:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1127);
 800417a:	f240 4367 	movw	r3, #1127	; 0x467
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7fe fedf 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	69f9      	ldr	r1, [r7, #28]
 8004194:	2000      	movs	r0, #0
 8004196:	468a      	mov	sl, r1
 8004198:	4683      	mov	fp, r0
 800419a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800419e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80041a2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80041a6:	0424      	lsls	r4, r4, #16
 80041a8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80041ac:	ea42 0104 	orr.w	r1, r2, r4
 80041b0:	6039      	str	r1, [r7, #0]
 80041b2:	432b      	orrs	r3, r5
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041bc:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2205      	movs	r2, #5
 80041c4:	701a      	strb	r2, [r3, #0]
            }
 80041c6:	bf00      	nop
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041d0 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80041d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d4:	b086      	sub	sp, #24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1126);
 80041e0:	f240 4366 	movw	r3, #1126	; 0x466
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7fe feac 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	2200      	movs	r2, #0
 80041fc:	4698      	mov	r8, r3
 80041fe:	4691      	mov	r9, r2
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800420c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004210:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004214:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004218:	2500      	movs	r5, #0
 800421a:	ea40 0a04 	orr.w	sl, r0, r4
 800421e:	ea41 0b05 	orr.w	fp, r1, r5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	701a      	strb	r2, [r3, #0]
            }
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004238 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	6178      	str	r0, [r7, #20]
 8004242:	6139      	str	r1, [r7, #16]
 8004244:	60fa      	str	r2, [r7, #12]
 8004246:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8004248:	897b      	ldrh	r3, [r7, #10]
 800424a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800424e:	d902      	bls.n	8004256 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8004250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004254:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	2b7c      	cmp	r3, #124	; 0x7c
 800425a:	d801      	bhi.n	8004260 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800425c:	237d      	movs	r3, #125	; 0x7d
 800425e:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1124);
 8004260:	f240 4364 	movw	r3, #1124	; 0x464
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	6939      	ldr	r1, [r7, #16]
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f7fe fe6c 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	8bf9      	ldrh	r1, [r7, #30]
 800427a:	2000      	movs	r0, #0
 800427c:	4688      	mov	r8, r1
 800427e:	4681      	mov	r9, r0
 8004280:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004284:	6079      	str	r1, [r7, #4]
 8004286:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800428a:	6039      	str	r1, [r7, #0]
 800428c:	683c      	ldr	r4, [r7, #0]
 800428e:	2500      	movs	r5, #0
 8004290:	ea42 0a04 	orr.w	sl, r2, r4
 8004294:	ea43 0b05 	orr.w	fp, r3, r5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2204      	movs	r2, #4
 80042a2:	701a      	strb	r2, [r3, #0]
            }
 80042a4:	bf00      	nop
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042ae <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1124) {
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fe6b 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	f240 4364 	movw	r3, #1124	; 0x464
 80042c8:	429a      	cmp	r2, r3
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d000      	beq.n	80042d8 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80042d6:	e7fe      	b.n	80042d6 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	0c02      	lsrs	r2, r0, #16
 80042e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042ec:	0c0b      	lsrs	r3, r1, #16
 80042ee:	4613      	mov	r3, r2
 80042f0:	81fb      	strh	r3, [r7, #14]
                return value;
 80042f2:	89fb      	ldrh	r3, [r7, #14]
            }
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1123);
 800430c:	f240 4363 	movw	r3, #1123	; 0x463
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7fe fe16 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2200      	movs	r2, #0
 8004328:	4698      	mov	r8, r3
 800432a:	4691      	mov	r9, r2
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004338:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800433c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004340:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004344:	2500      	movs	r5, #0
 8004346:	ea40 0a04 	orr.w	sl, r0, r4
 800434a:	ea41 0b05 	orr.w	fp, r1, r5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2203      	movs	r2, #3
 8004358:	701a      	strb	r2, [r3, #0]
            }
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004364 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1123) {
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fe fe10 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	f240 4363 	movw	r3, #1123	; 0x463
 800437e:	429a      	cmp	r2, r3
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d000      	beq.n	800438e <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 800438c:	e7fe      	b.n	800438c <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	0c02      	lsrs	r2, r0, #16
 800439e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043a2:	0c0b      	lsrs	r3, r1, #16
 80043a4:	4613      	mov	r3, r2
 80043a6:	73fb      	strb	r3, [r7, #15]
                return value;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6178      	str	r0, [r7, #20]
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	60fa      	str	r2, [r7, #12]
 80043c2:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1122);
 80043c4:	f240 4362 	movw	r3, #1122	; 0x462
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	6978      	ldr	r0, [r7, #20]
 80043ce:	f7fe fdba 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	69f9      	ldr	r1, [r7, #28]
 80043de:	2000      	movs	r0, #0
 80043e0:	468a      	mov	sl, r1
 80043e2:	4683      	mov	fp, r0
 80043e4:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80043e8:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80043ec:	480c      	ldr	r0, [pc, #48]	; (8004420 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 80043ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043f2:	ea08 0400 	and.w	r4, r8, r0
 80043f6:	ea09 0501 	and.w	r5, r9, r1
 80043fa:	ea42 0104 	orr.w	r1, r2, r4
 80043fe:	6039      	str	r1, [r7, #0]
 8004400:	432b      	orrs	r3, r5
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	e9d7 1200 	ldrd	r1, r2, [r7]
 800440a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2206      	movs	r2, #6
 8004412:	701a      	strb	r2, [r3, #0]
            }
 8004414:	bf00      	nop
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	ffff0000 	.word	0xffff0000

08004424 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1121);
 8004434:	f240 4361 	movw	r3, #1121	; 0x461
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7fe fd82 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2200      	movs	r2, #0
 8004450:	4698      	mov	r8, r3
 8004452:	4691      	mov	r9, r2
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004460:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004464:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004468:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800446c:	2500      	movs	r5, #0
 800446e:	ea40 0a04 	orr.w	sl, r0, r4
 8004472:	ea41 0b05 	orr.w	fp, r1, r5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2203      	movs	r2, #3
 8004480:	701a      	strb	r2, [r3, #0]
            }
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800448c <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b086      	sub	sp, #24
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1120);
 800449c:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7fe fd4e 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80044aa:	78fb      	ldrb	r3, [r7, #3]
 80044ac:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	2200      	movs	r2, #0
 80044b8:	4698      	mov	r8, r3
 80044ba:	4691      	mov	r9, r2
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80044c8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80044cc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80044d0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80044d4:	2500      	movs	r5, #0
 80044d6:	ea40 0a04 	orr.w	sl, r0, r4
 80044da:	ea41 0b05 	orr.w	fp, r1, r5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2203      	movs	r2, #3
 80044e8:	701a      	strb	r2, [r3, #0]
            }
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080044f4 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b088      	sub	sp, #32
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6178      	str	r0, [r7, #20]
 80044fe:	6139      	str	r1, [r7, #16]
 8004500:	60fa      	str	r2, [r7, #12]
 8004502:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450a:	d302      	bcc.n	8004512 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800450c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004510:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1113);
 8004512:	f240 4359 	movw	r3, #1113	; 0x459
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6939      	ldr	r1, [r7, #16]
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f7fe fd13 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	2000      	movs	r0, #0
 800452e:	468a      	mov	sl, r1
 8004530:	4683      	mov	fp, r0
 8004532:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004536:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800453a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800453e:	0424      	lsls	r4, r4, #16
 8004540:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004544:	ea42 0104 	orr.w	r1, r2, r4
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	432b      	orrs	r3, r5
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004554:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2205      	movs	r2, #5
 800455c:	701a      	strb	r2, [r3, #0]
            }
 800455e:	bf00      	nop
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004568 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1112);
 8004578:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7fe fce0 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	2200      	movs	r2, #0
 8004594:	4698      	mov	r8, r3
 8004596:	4691      	mov	r9, r2
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80045a4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80045a8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80045ac:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80045b0:	2500      	movs	r5, #0
 80045b2:	ea40 0a04 	orr.w	sl, r0, r4
 80045b6:	ea41 0b05 	orr.w	fp, r1, r5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	701a      	strb	r2, [r3, #0]
            }
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045d0 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80045d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6178      	str	r0, [r7, #20]
 80045da:	6139      	str	r1, [r7, #16]
 80045dc:	60fa      	str	r2, [r7, #12]
 80045de:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e6:	d302      	bcc.n	80045ee <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80045e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80045ec:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1111);
 80045ee:	f240 4357 	movw	r3, #1111	; 0x457
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6939      	ldr	r1, [r7, #16]
 80045f6:	6978      	ldr	r0, [r7, #20]
 80045f8:	f7fe fca5 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	2000      	movs	r0, #0
 800460a:	468a      	mov	sl, r1
 800460c:	4683      	mov	fp, r0
 800460e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004612:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004616:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800461a:	0424      	lsls	r4, r4, #16
 800461c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004620:	ea42 0104 	orr.w	r1, r2, r4
 8004624:	6039      	str	r1, [r7, #0]
 8004626:	432b      	orrs	r3, r5
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004630:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2205      	movs	r2, #5
 8004638:	701a      	strb	r2, [r3, #0]
            }
 800463a:	bf00      	nop
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004644 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1110);
 8004654:	f240 4356 	movw	r3, #1110	; 0x456
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7fe fc72 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2200      	movs	r2, #0
 8004670:	4698      	mov	r8, r3
 8004672:	4691      	mov	r9, r2
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004680:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004684:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004688:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800468c:	2500      	movs	r5, #0
 800468e:	ea40 0a04 	orr.w	sl, r0, r4
 8004692:	ea41 0b05 	orr.w	fp, r1, r5
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2203      	movs	r2, #3
 80046a0:	701a      	strb	r2, [r3, #0]
            }
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046ac <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6178      	str	r0, [r7, #20]
 80046b6:	6139      	str	r1, [r7, #16]
 80046b8:	60fa      	str	r2, [r7, #12]
 80046ba:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c2:	d902      	bls.n	80046ca <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80046c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046c8:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	2b7c      	cmp	r3, #124	; 0x7c
 80046ce:	d801      	bhi.n	80046d4 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80046d0:	237d      	movs	r3, #125	; 0x7d
 80046d2:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1108);
 80046d4:	f240 4354 	movw	r3, #1108	; 0x454
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	6939      	ldr	r1, [r7, #16]
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	f7fe fc32 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	8bf9      	ldrh	r1, [r7, #30]
 80046ee:	2000      	movs	r0, #0
 80046f0:	4688      	mov	r8, r1
 80046f2:	4681      	mov	r9, r0
 80046f4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80046f8:	6079      	str	r1, [r7, #4]
 80046fa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80046fe:	6039      	str	r1, [r7, #0]
 8004700:	683c      	ldr	r4, [r7, #0]
 8004702:	2500      	movs	r5, #0
 8004704:	ea42 0a04 	orr.w	sl, r2, r4
 8004708:	ea43 0b05 	orr.w	fp, r3, r5
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2204      	movs	r2, #4
 8004716:	701a      	strb	r2, [r3, #0]
            }
 8004718:	bf00      	nop
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004722 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1108) {
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fc31 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	f240 4354 	movw	r3, #1108	; 0x454
 800473c:	429a      	cmp	r2, r3
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d000      	beq.n	800474c <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800474a:	e7fe      	b.n	800474a <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	0c02      	lsrs	r2, r0, #16
 800475c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004760:	0c0b      	lsrs	r3, r1, #16
 8004762:	4613      	mov	r3, r2
 8004764:	81fb      	strh	r3, [r7, #14]
                return value;
 8004766:	89fb      	ldrh	r3, [r7, #14]
            }
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1107);
 8004780:	f240 4353 	movw	r3, #1107	; 0x453
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7fe fbdc 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2200      	movs	r2, #0
 800479c:	4698      	mov	r8, r3
 800479e:	4691      	mov	r9, r2
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80047ac:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80047b0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80047b4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80047b8:	2500      	movs	r5, #0
 80047ba:	ea40 0a04 	orr.w	sl, r0, r4
 80047be:	ea41 0b05 	orr.w	fp, r1, r5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2203      	movs	r2, #3
 80047cc:	701a      	strb	r2, [r3, #0]
            }
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047d8 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1107) {
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fbd6 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	f240 4353 	movw	r3, #1107	; 0x453
 80047f2:	429a      	cmp	r2, r3
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d000      	beq.n	8004802 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8004800:	e7fe      	b.n	8004800 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	0c02      	lsrs	r2, r0, #16
 8004812:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004816:	0c0b      	lsrs	r3, r1, #16
 8004818:	4613      	mov	r3, r2
 800481a:	73fb      	strb	r3, [r7, #15]
                return value;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800482c:	b088      	sub	sp, #32
 800482e:	af00      	add	r7, sp, #0
 8004830:	6178      	str	r0, [r7, #20]
 8004832:	6139      	str	r1, [r7, #16]
 8004834:	60fa      	str	r2, [r7, #12]
 8004836:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1106);
 8004838:	f240 4352 	movw	r3, #1106	; 0x452
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	6939      	ldr	r1, [r7, #16]
 8004840:	6978      	ldr	r0, [r7, #20]
 8004842:	f7fe fb80 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	2000      	movs	r0, #0
 8004854:	468a      	mov	sl, r1
 8004856:	4683      	mov	fp, r0
 8004858:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800485c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004860:	480c      	ldr	r0, [pc, #48]	; (8004894 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8004862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004866:	ea08 0400 	and.w	r4, r8, r0
 800486a:	ea09 0501 	and.w	r5, r9, r1
 800486e:	ea42 0104 	orr.w	r1, r2, r4
 8004872:	6039      	str	r1, [r7, #0]
 8004874:	432b      	orrs	r3, r5
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800487e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2206      	movs	r2, #6
 8004886:	701a      	strb	r2, [r3, #0]
            }
 8004888:	bf00      	nop
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004892:	bf00      	nop
 8004894:	ffff0000 	.word	0xffff0000

08004898 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1105);
 80048a8:	f240 4351 	movw	r3, #1105	; 0x451
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7fe fb48 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	2200      	movs	r2, #0
 80048c4:	4698      	mov	r8, r3
 80048c6:	4691      	mov	r9, r2
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80048d4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80048d8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80048dc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80048e0:	2500      	movs	r5, #0
 80048e2:	ea40 0a04 	orr.w	sl, r0, r4
 80048e6:	ea41 0b05 	orr.w	fp, r1, r5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2203      	movs	r2, #3
 80048f4:	701a      	strb	r2, [r3, #0]
            }
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004900 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1104);
 8004910:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7fe fb14 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004928:	7dfb      	ldrb	r3, [r7, #23]
 800492a:	2200      	movs	r2, #0
 800492c:	4698      	mov	r8, r3
 800492e:	4691      	mov	r9, r2
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800493c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004940:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004944:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004948:	2500      	movs	r5, #0
 800494a:	ea40 0a04 	orr.w	sl, r0, r4
 800494e:	ea41 0b05 	orr.w	fp, r1, r5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2203      	movs	r2, #3
 800495c:	701a      	strb	r2, [r3, #0]
            }
 800495e:	bf00      	nop
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004968 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800496c:	b088      	sub	sp, #32
 800496e:	af00      	add	r7, sp, #0
 8004970:	6178      	str	r0, [r7, #20]
 8004972:	6139      	str	r1, [r7, #16]
 8004974:	60fa      	str	r2, [r7, #12]
 8004976:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497e:	d302      	bcc.n	8004986 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8004980:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004984:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1073);
 8004986:	f240 4331 	movw	r3, #1073	; 0x431
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6939      	ldr	r1, [r7, #16]
 800498e:	6978      	ldr	r0, [r7, #20]
 8004990:	f7fe fad9 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	2000      	movs	r0, #0
 80049a2:	468a      	mov	sl, r1
 80049a4:	4683      	mov	fp, r0
 80049a6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80049aa:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80049ae:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80049b2:	0424      	lsls	r4, r4, #16
 80049b4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80049b8:	ea42 0104 	orr.w	r1, r2, r4
 80049bc:	6039      	str	r1, [r7, #0]
 80049be:	432b      	orrs	r3, r5
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049c8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2205      	movs	r2, #5
 80049d0:	701a      	strb	r2, [r3, #0]
            }
 80049d2:	bf00      	nop
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049dc <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80049dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e0:	b088      	sub	sp, #32
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6178      	str	r0, [r7, #20]
 80049e6:	6139      	str	r1, [r7, #16]
 80049e8:	60fa      	str	r2, [r7, #12]
 80049ea:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1072);
 80049ec:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6939      	ldr	r1, [r7, #16]
 80049f4:	6978      	ldr	r0, [r7, #20]
 80049f6:	f7fe faa6 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	69f9      	ldr	r1, [r7, #28]
 8004a06:	2000      	movs	r0, #0
 8004a08:	468a      	mov	sl, r1
 8004a0a:	4683      	mov	fp, r0
 8004a0c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004a10:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004a14:	480c      	ldr	r0, [pc, #48]	; (8004a48 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8004a16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a1a:	ea08 0400 	and.w	r4, r8, r0
 8004a1e:	ea09 0501 	and.w	r5, r9, r1
 8004a22:	ea42 0104 	orr.w	r1, r2, r4
 8004a26:	6039      	str	r1, [r7, #0]
 8004a28:	432b      	orrs	r3, r5
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a32:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2206      	movs	r2, #6
 8004a3a:	701a      	strb	r2, [r3, #0]
            }
 8004a3c:	bf00      	nop
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	ffff0000 	.word	0xffff0000

08004a4c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8004a5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a62:	d305      	bcc.n	8004a70 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1057);
 8004a70:	f240 4321 	movw	r3, #1057	; 0x421
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7fe fa64 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8004a7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a82:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	040b      	lsls	r3, r1, #16
 8004a9a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8004a9e:	0402      	lsls	r2, r0, #16
 8004aa0:	ea48 0402 	orr.w	r4, r8, r2
 8004aa4:	ea49 0503 	orr.w	r5, r9, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	701a      	strb	r2, [r3, #0]
            }
 8004ab4:	bf00      	nop
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004abe <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004abe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8004acc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad4:	d305      	bcc.n	8004ae2 <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ade:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1056);
 8004ae2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fe fa2b 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8004af0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004af4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004afe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	040b      	lsls	r3, r1, #16
 8004b0c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8004b10:	0402      	lsls	r2, r0, #16
 8004b12:	ea48 0402 	orr.w	r4, r8, r2
 8004b16:	ea49 0503 	orr.w	r5, r9, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2208      	movs	r2, #8
 8004b24:	701a      	strb	r2, [r3, #0]
            }
 8004b26:	bf00      	nop
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004b30 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1046);
 8004b40:	f240 4316 	movw	r3, #1046	; 0x416
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fe f9fc 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	4691      	mov	r9, r2
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004b6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004b70:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004b74:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004b78:	2500      	movs	r5, #0
 8004b7a:	ea40 0a04 	orr.w	sl, r0, r4
 8004b7e:	ea41 0b05 	orr.w	fp, r1, r5
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	701a      	strb	r2, [r3, #0]
            }
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b98 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1045);
 8004ba8:	f240 4315 	movw	r3, #1045	; 0x415
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7fe f9c8 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4698      	mov	r8, r3
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004bd4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004bd8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004bdc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004be0:	2500      	movs	r5, #0
 8004be2:	ea40 0a04 	orr.w	sl, r0, r4
 8004be6:	ea41 0b05 	orr.w	fp, r1, r5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	701a      	strb	r2, [r3, #0]
            }
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c00 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6178      	str	r0, [r7, #20]
 8004c0a:	6139      	str	r1, [r7, #16]
 8004c0c:	60fa      	str	r2, [r7, #12]
 8004c0e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c16:	d302      	bcc.n	8004c1e <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8004c18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004c1c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1044);
 8004c1e:	f240 4314 	movw	r3, #1044	; 0x414
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6939      	ldr	r1, [r7, #16]
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f7fe f98d 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	69f9      	ldr	r1, [r7, #28]
 8004c38:	2000      	movs	r0, #0
 8004c3a:	468a      	mov	sl, r1
 8004c3c:	4683      	mov	fp, r0
 8004c3e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004c42:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004c46:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8004c4a:	0424      	lsls	r4, r4, #16
 8004c4c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004c50:	ea42 0104 	orr.w	r1, r2, r4
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	432b      	orrs	r3, r5
 8004c58:	607b      	str	r3, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c60:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2205      	movs	r2, #5
 8004c68:	701a      	strb	r2, [r3, #0]
            }
 8004c6a:	bf00      	nop
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c74 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6178      	str	r0, [r7, #20]
 8004c7e:	6139      	str	r1, [r7, #16]
 8004c80:	60fa      	str	r2, [r7, #12]
 8004c82:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c8a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004d1c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8004c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c96:	dd01      	ble.n	8004c9c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 8004c9a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	d502      	bpl.n	8004cb0 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1043);
 8004cb0:	f240 4313 	movw	r3, #1043	; 0x413
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	6939      	ldr	r1, [r7, #16]
 8004cb8:	6978      	ldr	r0, [r7, #20]
 8004cba:	f7fe f944 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8004cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004d24 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8004cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cca:	eeb0 0a47 	vmov.f32	s0, s14
 8004cce:	f7fd fff8 	bl	8002cc2 <_ZSt5roundf>
 8004cd2:	eef0 7a40 	vmov.f32	s15, s0
 8004cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cda:	ee17 3a90 	vmov	r3, s15
 8004cde:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	8bf9      	ldrh	r1, [r7, #30]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	4688      	mov	r8, r1
 8004cec:	4681      	mov	r9, r0
 8004cee:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004cf2:	6079      	str	r1, [r7, #4]
 8004cf4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	683c      	ldr	r4, [r7, #0]
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	ea42 0a04 	orr.w	sl, r2, r4
 8004d02:	ea43 0b05 	orr.w	fp, r3, r5
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	701a      	strb	r2, [r3, #0]
            }
 8004d12:	bf00      	nop
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1c:	428311ec 	.word	0x428311ec
 8004d20:	428311ec 	.word	0x428311ec
 8004d24:	3a83126f 	.word	0x3a83126f

08004d28 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6178      	str	r0, [r7, #20]
 8004d32:	6139      	str	r1, [r7, #16]
 8004d34:	60fa      	str	r2, [r7, #12]
 8004d36:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d3e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004ddc <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8004d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	dd01      	ble.n	8004d50 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8004d4c:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8004d4e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004d50:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d54:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8004d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	d501      	bpl.n	8004d66 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8004d64:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1042);
 8004d66:	f240 4312 	movw	r3, #1042	; 0x412
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6939      	ldr	r1, [r7, #16]
 8004d6e:	6978      	ldr	r0, [r7, #20]
 8004d70:	f7fe f8e9 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8004d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d78:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004d7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d80:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004de8 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8004d84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004d88:	eeb0 0a47 	vmov.f32	s0, s14
 8004d8c:	f7fd ff99 	bl	8002cc2 <_ZSt5roundf>
 8004d90:	eef0 7a40 	vmov.f32	s15, s0
 8004d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d98:	ee17 3a90 	vmov	r3, s15
 8004d9c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	8bf9      	ldrh	r1, [r7, #30]
 8004da6:	2000      	movs	r0, #0
 8004da8:	4688      	mov	r8, r1
 8004daa:	4681      	mov	r9, r0
 8004dac:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004db0:	6079      	str	r1, [r7, #4]
 8004db2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004db6:	6039      	str	r1, [r7, #0]
 8004db8:	683c      	ldr	r4, [r7, #0]
 8004dba:	2500      	movs	r5, #0
 8004dbc:	ea42 0a04 	orr.w	sl, r2, r4
 8004dc0:	ea43 0b05 	orr.w	fp, r3, r5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	701a      	strb	r2, [r3, #0]
            }
 8004dd0:	bf00      	nop
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dda:	bf00      	nop
 8004ddc:	441c5666 	.word	0x441c5666
 8004de0:	441c5666 	.word	0x441c5666
 8004de4:	c1f00000 	.word	0xc1f00000
 8004de8:	3c23d70a 	.word	0x3c23d70a

08004dec <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df0:	b088      	sub	sp, #32
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6178      	str	r0, [r7, #20]
 8004df6:	6139      	str	r1, [r7, #16]
 8004df8:	60fa      	str	r2, [r7, #12]
 8004dfa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8004e04:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004e06:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1041);
 8004e08:	f240 4311 	movw	r3, #1041	; 0x411
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f7fe f898 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	089b      	lsrs	r3, r3, #2
 8004e1a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	2000      	movs	r0, #0
 8004e26:	4688      	mov	r8, r1
 8004e28:	4681      	mov	r9, r0
 8004e2a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004e2e:	6079      	str	r1, [r7, #4]
 8004e30:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	683c      	ldr	r4, [r7, #0]
 8004e38:	2500      	movs	r5, #0
 8004e3a:	ea42 0a04 	orr.w	sl, r2, r4
 8004e3e:	ea43 0b05 	orr.w	fp, r3, r5
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	701a      	strb	r2, [r3, #0]
            }
 8004e4e:	bf00      	nop
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e58:	0003fffc 	.word	0x0003fffc

08004e5c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6178      	str	r0, [r7, #20]
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	60fa      	str	r2, [r7, #12]
 8004e6a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004e6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e72:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004f10 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8004e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	dd01      	ble.n	8004e84 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8004e82:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	d502      	bpl.n	8004e98 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1040);
 8004e98:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7fe f850 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8004ea6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eaa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004eae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8004eb6:	f7fd ff04 	bl	8002cc2 <_ZSt5roundf>
 8004eba:	eef0 7a40 	vmov.f32	s15, s0
 8004ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec2:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ec6:	793b      	ldrb	r3, [r7, #4]
 8004ec8:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ed0:	7ffb      	ldrb	r3, [r7, #31]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4698      	mov	r8, r3
 8004ed6:	4691      	mov	r9, r2
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004ee4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004ee8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004eec:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	ea40 0a04 	orr.w	sl, r0, r4
 8004ef6:	ea41 0b05 	orr.w	fp, r1, r5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2203      	movs	r2, #3
 8004f04:	701a      	strb	r2, [r3, #0]
            }
 8004f06:	bf00      	nop
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f10:	42c80000 	.word	0x42c80000
 8004f14:	42c80000 	.word	0x42c80000

08004f18 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6178      	str	r0, [r7, #20]
 8004f22:	6139      	str	r1, [r7, #16]
 8004f24:	60fa      	str	r2, [r7, #12]
 8004f26:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 33);
 8004f28:	2321      	movs	r3, #33	; 0x21
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6939      	ldr	r1, [r7, #16]
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f7fe f809 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004f34:	897b      	ldrh	r3, [r7, #10]
 8004f36:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	8bf9      	ldrh	r1, [r7, #30]
 8004f40:	2000      	movs	r0, #0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4681      	mov	r9, r0
 8004f46:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004f4a:	6079      	str	r1, [r7, #4]
 8004f4c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	683c      	ldr	r4, [r7, #0]
 8004f54:	2500      	movs	r5, #0
 8004f56:	ea42 0a04 	orr.w	sl, r2, r4
 8004f5a:	ea43 0b05 	orr.w	fp, r3, r5
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2204      	movs	r2, #4
 8004f68:	701a      	strb	r2, [r3, #0]
            }
 8004f6a:	bf00      	nop
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f74 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 33) {
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fe f808 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b21      	cmp	r3, #33	; 0x21
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d000      	beq.n	8004f98 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8004f96:	e7fe      	b.n	8004f96 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	0c02      	lsrs	r2, r0, #16
 8004fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fac:	0c0b      	lsrs	r3, r1, #16
 8004fae:	4613      	mov	r3, r2
 8004fb0:	81fb      	strh	r3, [r7, #14]
                return value;
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
            }
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 32);
 8004fcc:	2320      	movs	r3, #32
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7fd ffb7 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4698      	mov	r8, r3
 8004fe8:	4691      	mov	r9, r2
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004ff6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004ffa:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004ffe:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8005002:	2500      	movs	r5, #0
 8005004:	ea40 0a04 	orr.w	sl, r0, r4
 8005008:	ea41 0b05 	orr.w	fp, r1, r5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	701a      	strb	r2, [r3, #0]
            }
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005022 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 32) {
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fd ffb1 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8005034:	4603      	mov	r3, r0
 8005036:	2b20      	cmp	r3, #32
 8005038:	bf14      	ite	ne
 800503a:	2301      	movne	r3, #1
 800503c:	2300      	moveq	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d000      	beq.n	8005046 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8005044:	e7fe      	b.n	8005044 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	0c02      	lsrs	r2, r0, #16
 8005056:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800505a:	0c0b      	lsrs	r3, r1, #16
 800505c:	4613      	mov	r3, r2
 800505e:	73fb      	strb	r3, [r7, #15]
                return value;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
            }
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800506a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6178      	str	r0, [r7, #20]
 8005074:	6139      	str	r1, [r7, #16]
 8005076:	60fa      	str	r2, [r7, #12]
 8005078:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 16);
 800507a:	2310      	movs	r3, #16
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f7fd ff60 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8005086:	897b      	ldrh	r3, [r7, #10]
 8005088:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	8bf9      	ldrh	r1, [r7, #30]
 8005092:	2000      	movs	r0, #0
 8005094:	4688      	mov	r8, r1
 8005096:	4681      	mov	r9, r0
 8005098:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800509c:	6079      	str	r1, [r7, #4]
 800509e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80050a2:	6039      	str	r1, [r7, #0]
 80050a4:	683c      	ldr	r4, [r7, #0]
 80050a6:	2500      	movs	r5, #0
 80050a8:	ea42 0a04 	orr.w	sl, r2, r4
 80050ac:	ea43 0b05 	orr.w	fp, r3, r5
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2204      	movs	r2, #4
 80050ba:	701a      	strb	r2, [r3, #0]
            }
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050c6 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 16) {
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fd ff5f 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b10      	cmp	r3, #16
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d000      	beq.n	80050ea <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80050e8:	e7fe      	b.n	80050e8 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	0c02      	lsrs	r2, r0, #16
 80050fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80050fe:	0c0b      	lsrs	r3, r1, #16
 8005100:	4613      	mov	r3, r2
 8005102:	81fb      	strh	r3, [r7, #14]
                return value;
 8005104:	89fb      	ldrh	r3, [r7, #14]
            }
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800510e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6178      	str	r0, [r7, #20]
 8005118:	6139      	str	r1, [r7, #16]
 800511a:	60fa      	str	r2, [r7, #12]
 800511c:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 5);
 800511e:	2305      	movs	r3, #5
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6939      	ldr	r1, [r7, #16]
 8005124:	6978      	ldr	r0, [r7, #20]
 8005126:	f7fd ff0e 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	8bf9      	ldrh	r1, [r7, #30]
 8005136:	2000      	movs	r0, #0
 8005138:	4688      	mov	r8, r1
 800513a:	4681      	mov	r9, r0
 800513c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8005140:	6079      	str	r1, [r7, #4]
 8005142:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8005146:	6039      	str	r1, [r7, #0]
 8005148:	683c      	ldr	r4, [r7, #0]
 800514a:	2500      	movs	r5, #0
 800514c:	ea42 0a04 	orr.w	sl, r2, r4
 8005150:	ea43 0b05 	orr.w	fp, r3, r5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2204      	movs	r2, #4
 800515e:	701a      	strb	r2, [r3, #0]
            }
 8005160:	bf00      	nop
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800516a <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800516a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6178      	str	r0, [r7, #20]
 8005174:	6139      	str	r1, [r7, #16]
 8005176:	60fa      	str	r2, [r7, #12]
 8005178:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 4);
 800517a:	2304      	movs	r3, #4
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	6939      	ldr	r1, [r7, #16]
 8005180:	6978      	ldr	r0, [r7, #20]
 8005182:	f7fd fee0 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8005186:	897b      	ldrh	r3, [r7, #10]
 8005188:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	8bf9      	ldrh	r1, [r7, #30]
 8005192:	2000      	movs	r0, #0
 8005194:	4688      	mov	r8, r1
 8005196:	4681      	mov	r9, r0
 8005198:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800519c:	6079      	str	r1, [r7, #4]
 800519e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80051a2:	6039      	str	r1, [r7, #0]
 80051a4:	683c      	ldr	r4, [r7, #0]
 80051a6:	2500      	movs	r5, #0
 80051a8:	ea42 0a04 	orr.w	sl, r2, r4
 80051ac:	ea43 0b05 	orr.w	fp, r3, r5
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2204      	movs	r2, #4
 80051ba:	701a      	strb	r2, [r3, #0]
            }
 80051bc:	bf00      	nop
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080051c6 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80051c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6178      	str	r0, [r7, #20]
 80051d0:	6139      	str	r1, [r7, #16]
 80051d2:	60fa      	str	r2, [r7, #12]
 80051d4:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3);
 80051d6:	2303      	movs	r3, #3
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	6939      	ldr	r1, [r7, #16]
 80051dc:	6978      	ldr	r0, [r7, #20]
 80051de:	f7fd feb2 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	8bf9      	ldrh	r1, [r7, #30]
 80051ee:	2000      	movs	r0, #0
 80051f0:	4688      	mov	r8, r1
 80051f2:	4681      	mov	r9, r0
 80051f4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80051f8:	6079      	str	r1, [r7, #4]
 80051fa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80051fe:	6039      	str	r1, [r7, #0]
 8005200:	683c      	ldr	r4, [r7, #0]
 8005202:	2500      	movs	r5, #0
 8005204:	ea42 0a04 	orr.w	sl, r2, r4
 8005208:	ea43 0b05 	orr.w	fp, r3, r5
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2204      	movs	r2, #4
 8005216:	701a      	strb	r2, [r3, #0]
            }
 8005218:	bf00      	nop
 800521a:	3720      	adds	r7, #32
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005222 <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8005222:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2);
 8005232:	2302      	movs	r3, #2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7fd fe84 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2200      	movs	r2, #0
 800524c:	4698      	mov	r8, r3
 800524e:	4691      	mov	r9, r2
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800525c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005260:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005264:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8005268:	2500      	movs	r5, #0
 800526a:	ea40 0a04 	orr.w	sl, r0, r4
 800526e:	ea41 0b05 	orr.w	fp, r1, r5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2203      	movs	r2, #3
 800527c:	701a      	strb	r2, [r3, #0]
            }
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005288 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8005288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1);
 8005298:	2301      	movs	r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7fd fe51 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2200      	movs	r2, #0
 80052b2:	4698      	mov	r8, r3
 80052b4:	4691      	mov	r9, r2
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80052c2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80052c6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80052ca:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80052ce:	2500      	movs	r5, #0
 80052d0:	ea40 0a04 	orr.w	sl, r0, r4
 80052d4:	ea41 0b05 	orr.w	fp, r1, r5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2203      	movs	r2, #3
 80052e2:	701a      	strb	r2, [r3, #0]
            }
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080052ee <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	2300      	movs	r3, #0
 8005302:	2202      	movs	r2, #2
 8005304:	f240 6101 	movw	r1, #1537	; 0x601
 8005308:	f7fd fceb 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8005310:	f240 6201 	movw	r2, #1537	; 0x601
 8005314:	4293      	cmp	r3, r2
 8005316:	d000      	beq.n	800531a <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8005318:	e7fe      	b.n	8005318 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	331c      	adds	r3, #28
 8005334:	461a      	mov	r2, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ffd9 	bl	80052ee <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8005346:	b580      	push	{r7, lr}
 8005348:	b08a      	sub	sp, #40	; 0x28
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ffe5 	bl	8005324 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	4618      	mov	r0, r3
 8005360:	f002 fdf0 	bl	8007f44 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 8005364:	4603      	mov	r3, r0
 8005366:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8005368:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f814 	bl	8005398 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8005370:	bf00      	nop
 8005372:	3728      	adds	r7, #40	; 0x28
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	2300      	movs	r3, #0
 8005384:	2208      	movs	r2, #8
 8005386:	f240 5181 	movw	r1, #1409	; 0x581
 800538a:	f7fb fdff 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8005398:	b580      	push	{r7, lr}
 800539a:	b092      	sub	sp, #72	; 0x48
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 80053a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ffe6 	bl	8005378 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	f640 5201 	movw	r2, #3329	; 0xd01
 80053b8:	4293      	cmp	r3, r2
 80053ba:	f000 84ec 	beq.w	8005d96 <_Z31handleSDORequestDownloadBySDOIDt+0x9fe>
 80053be:	f640 5201 	movw	r2, #3329	; 0xd01
 80053c2:	4293      	cmp	r3, r2
 80053c4:	f300 84f6 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 80053c8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80053cc:	f000 84d4 	beq.w	8005d78 <_Z31handleSDORequestDownloadBySDOIDt+0x9e0>
 80053d0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80053d4:	f300 84ee 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 80053d8:	f640 4201 	movw	r2, #3073	; 0xc01
 80053dc:	4293      	cmp	r3, r2
 80053de:	f000 84bd 	beq.w	8005d5c <_Z31handleSDORequestDownloadBySDOIDt+0x9c4>
 80053e2:	f640 4201 	movw	r2, #3073	; 0xc01
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f300 84e4 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 80053ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053f0:	f000 84a6 	beq.w	8005d40 <_Z31handleSDORequestDownloadBySDOIDt+0x9a8>
 80053f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053f8:	f300 84dc 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 80053fc:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005400:	f000 848f 	beq.w	8005d22 <_Z31handleSDORequestDownloadBySDOIDt+0x98a>
 8005404:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005408:	f300 84d4 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 800540c:	f640 2233 	movw	r2, #2611	; 0xa33
 8005410:	4293      	cmp	r3, r2
 8005412:	f300 84cf 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8005416:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800541a:	da16      	bge.n	800544a <_Z31handleSDORequestDownloadBySDOIDt+0xb2>
 800541c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005420:	f300 84c8 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8005424:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005428:	da40      	bge.n	80054ac <_Z31handleSDORequestDownloadBySDOIDt+0x114>
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542e:	f000 8374 	beq.w	8005b1a <_Z31handleSDORequestDownloadBySDOIDt+0x782>
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	f300 84bd 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 800543a:	2b21      	cmp	r3, #33	; 0x21
 800543c:	f300 8166 	bgt.w	800570c <_Z31handleSDORequestDownloadBySDOIDt+0x374>
 8005440:	2b00      	cmp	r3, #0
 8005442:	f300 8119 	bgt.w	8005678 <_Z31handleSDORequestDownloadBySDOIDt+0x2e0>
 8005446:	f000 bcb5 	b.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 800544a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 800544e:	2b13      	cmp	r3, #19
 8005450:	f200 84b0 	bhi.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <_Z31handleSDORequestDownloadBySDOIDt+0xc4>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005bf3 	.word	0x08005bf3
 8005460:	08005db5 	.word	0x08005db5
 8005464:	08005db5 	.word	0x08005db5
 8005468:	08005db5 	.word	0x08005db5
 800546c:	08005db5 	.word	0x08005db5
 8005470:	08005c0f 	.word	0x08005c0f
 8005474:	08005c2d 	.word	0x08005c2d
 8005478:	08005c4b 	.word	0x08005c4b
 800547c:	08005c69 	.word	0x08005c69
 8005480:	08005c8d 	.word	0x08005c8d
 8005484:	08005db5 	.word	0x08005db5
 8005488:	08005db5 	.word	0x08005db5
 800548c:	08005db5 	.word	0x08005db5
 8005490:	08005db5 	.word	0x08005db5
 8005494:	08005db5 	.word	0x08005db5
 8005498:	08005db5 	.word	0x08005db5
 800549c:	08005cab 	.word	0x08005cab
 80054a0:	08005cc9 	.word	0x08005cc9
 80054a4:	08005ce7 	.word	0x08005ce7
 80054a8:	08005d05 	.word	0x08005d05
 80054ac:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	f200 847f 	bhi.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <_Z31handleSDORequestDownloadBySDOIDt+0x124>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	08005b39 	.word	0x08005b39
 80054c0:	08005b55 	.word	0x08005b55
 80054c4:	08005b71 	.word	0x08005b71
 80054c8:	08005b8d 	.word	0x08005b8d
 80054cc:	08005ba9 	.word	0x08005ba9
 80054d0:	08005bc7 	.word	0x08005bc7
 80054d4:	08005db5 	.word	0x08005db5
 80054d8:	08005db5 	.word	0x08005db5
 80054dc:	08005db5 	.word	0x08005db5
 80054e0:	08005db5 	.word	0x08005db5
 80054e4:	08005db5 	.word	0x08005db5
 80054e8:	08005db5 	.word	0x08005db5
 80054ec:	08005db5 	.word	0x08005db5
 80054f0:	08005db5 	.word	0x08005db5
 80054f4:	08005db5 	.word	0x08005db5
 80054f8:	08005db5 	.word	0x08005db5
 80054fc:	08005bdd 	.word	0x08005bdd
 8005500:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005504:	2b59      	cmp	r3, #89	; 0x59
 8005506:	f200 8455 	bhi.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <_Z31handleSDORequestDownloadBySDOIDt+0x178>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005801 	.word	0x08005801
 8005514:	0800581f 	.word	0x0800581f
 8005518:	08005839 	.word	0x08005839
 800551c:	08005857 	.word	0x08005857
 8005520:	08005875 	.word	0x08005875
 8005524:	0800588f 	.word	0x0800588f
 8005528:	080058ab 	.word	0x080058ab
 800552c:	08005db5 	.word	0x08005db5
 8005530:	08005db5 	.word	0x08005db5
 8005534:	08005db5 	.word	0x08005db5
 8005538:	08005db5 	.word	0x08005db5
 800553c:	08005db5 	.word	0x08005db5
 8005540:	08005db5 	.word	0x08005db5
 8005544:	08005db5 	.word	0x08005db5
 8005548:	08005db5 	.word	0x08005db5
 800554c:	08005db5 	.word	0x08005db5
 8005550:	080058c7 	.word	0x080058c7
 8005554:	080058e1 	.word	0x080058e1
 8005558:	08005db5 	.word	0x08005db5
 800555c:	08005db5 	.word	0x08005db5
 8005560:	08005db5 	.word	0x08005db5
 8005564:	08005db5 	.word	0x08005db5
 8005568:	08005db5 	.word	0x08005db5
 800556c:	08005db5 	.word	0x08005db5
 8005570:	08005db5 	.word	0x08005db5
 8005574:	08005db5 	.word	0x08005db5
 8005578:	08005db5 	.word	0x08005db5
 800557c:	08005db5 	.word	0x08005db5
 8005580:	08005db5 	.word	0x08005db5
 8005584:	08005db5 	.word	0x08005db5
 8005588:	08005db5 	.word	0x08005db5
 800558c:	08005db5 	.word	0x08005db5
 8005590:	080058fb 	.word	0x080058fb
 8005594:	08005915 	.word	0x08005915
 8005598:	08005db5 	.word	0x08005db5
 800559c:	08005db5 	.word	0x08005db5
 80055a0:	08005db5 	.word	0x08005db5
 80055a4:	08005db5 	.word	0x08005db5
 80055a8:	08005db5 	.word	0x08005db5
 80055ac:	08005db5 	.word	0x08005db5
 80055b0:	08005db5 	.word	0x08005db5
 80055b4:	08005db5 	.word	0x08005db5
 80055b8:	08005db5 	.word	0x08005db5
 80055bc:	08005db5 	.word	0x08005db5
 80055c0:	08005db5 	.word	0x08005db5
 80055c4:	08005db5 	.word	0x08005db5
 80055c8:	08005db5 	.word	0x08005db5
 80055cc:	08005db5 	.word	0x08005db5
 80055d0:	08005db5 	.word	0x08005db5
 80055d4:	08005db5 	.word	0x08005db5
 80055d8:	08005db5 	.word	0x08005db5
 80055dc:	08005db5 	.word	0x08005db5
 80055e0:	08005db5 	.word	0x08005db5
 80055e4:	08005db5 	.word	0x08005db5
 80055e8:	08005db5 	.word	0x08005db5
 80055ec:	08005db5 	.word	0x08005db5
 80055f0:	08005db5 	.word	0x08005db5
 80055f4:	08005db5 	.word	0x08005db5
 80055f8:	08005db5 	.word	0x08005db5
 80055fc:	08005db5 	.word	0x08005db5
 8005600:	08005db5 	.word	0x08005db5
 8005604:	08005db5 	.word	0x08005db5
 8005608:	08005db5 	.word	0x08005db5
 800560c:	08005db5 	.word	0x08005db5
 8005610:	0800592f 	.word	0x0800592f
 8005614:	0800594b 	.word	0x0800594b
 8005618:	08005967 	.word	0x08005967
 800561c:	08005981 	.word	0x08005981
 8005620:	0800599d 	.word	0x0800599d
 8005624:	08005db5 	.word	0x08005db5
 8005628:	080059b9 	.word	0x080059b9
 800562c:	080059d5 	.word	0x080059d5
 8005630:	080059ef 	.word	0x080059ef
 8005634:	08005a0b 	.word	0x08005a0b
 8005638:	08005db5 	.word	0x08005db5
 800563c:	08005db5 	.word	0x08005db5
 8005640:	08005db5 	.word	0x08005db5
 8005644:	08005db5 	.word	0x08005db5
 8005648:	08005db5 	.word	0x08005db5
 800564c:	08005db5 	.word	0x08005db5
 8005650:	08005a25 	.word	0x08005a25
 8005654:	08005a41 	.word	0x08005a41
 8005658:	08005a5d 	.word	0x08005a5d
 800565c:	08005a77 	.word	0x08005a77
 8005660:	08005a93 	.word	0x08005a93
 8005664:	08005db5 	.word	0x08005db5
 8005668:	08005aaf 	.word	0x08005aaf
 800566c:	08005acb 	.word	0x08005acb
 8005670:	08005ae5 	.word	0x08005ae5
 8005674:	08005b01 	.word	0x08005b01
 8005678:	3b01      	subs	r3, #1
 800567a:	2b20      	cmp	r3, #32
 800567c:	f200 839a 	bhi.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <_Z31handleSDORequestDownloadBySDOIDt+0x2f0>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	08005721 	.word	0x08005721
 800568c:	0800573d 	.word	0x0800573d
 8005690:	08005759 	.word	0x08005759
 8005694:	08005775 	.word	0x08005775
 8005698:	08005791 	.word	0x08005791
 800569c:	08005db5 	.word	0x08005db5
 80056a0:	08005db5 	.word	0x08005db5
 80056a4:	08005db5 	.word	0x08005db5
 80056a8:	08005db5 	.word	0x08005db5
 80056ac:	08005db5 	.word	0x08005db5
 80056b0:	08005db5 	.word	0x08005db5
 80056b4:	08005db5 	.word	0x08005db5
 80056b8:	08005db5 	.word	0x08005db5
 80056bc:	08005db5 	.word	0x08005db5
 80056c0:	08005db5 	.word	0x08005db5
 80056c4:	080057ad 	.word	0x080057ad
 80056c8:	08005db5 	.word	0x08005db5
 80056cc:	08005db5 	.word	0x08005db5
 80056d0:	08005db5 	.word	0x08005db5
 80056d4:	08005db5 	.word	0x08005db5
 80056d8:	08005db5 	.word	0x08005db5
 80056dc:	08005db5 	.word	0x08005db5
 80056e0:	08005db5 	.word	0x08005db5
 80056e4:	08005db5 	.word	0x08005db5
 80056e8:	08005db5 	.word	0x08005db5
 80056ec:	08005db5 	.word	0x08005db5
 80056f0:	08005db5 	.word	0x08005db5
 80056f4:	08005db5 	.word	0x08005db5
 80056f8:	08005db5 	.word	0x08005db5
 80056fc:	08005db5 	.word	0x08005db5
 8005700:	08005db5 	.word	0x08005db5
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057e5 	.word	0x080057e5
 800570c:	f240 4269 	movw	r2, #1129	; 0x469
 8005710:	4293      	cmp	r3, r2
 8005712:	f300 834f 	bgt.w	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8005716:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800571a:	f6bf aef1 	bge.w	8005500 <_Z31handleSDORequestDownloadBySDOIDt+0x168>
 800571e:	e349      	b.n	8005db4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8005720:	f001 f9fa 	bl	8006b18 <_Z13OD_NodeID_getv>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f002 fc1a 	bl	8007f68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800573a:	e343      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 800573c:	f001 fa08 	bl	8006b50 <_Z17OD_NodeStatus_getv>
 8005740:	4603      	mov	r3, r0
 8005742:	461a      	mov	r2, r3
 8005744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f002 fc21 	bl	8007f92 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005756:	e335      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8005758:	f001 fa16 	bl	8006b88 <_Z22OD_ProtocolVersion_getv>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f002 fc28 	bl	8007fbc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005772:	e327      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8005774:	f001 fa24 	bl	8006bc0 <_Z19OD_StackVersion_getv>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f002 fc2f 	bl	8007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800578e:	e319      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8005790:	f001 fa32 	bl	8006bf8 <_Z17OD_DbcVersion_getv>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 fc36 	bl	8008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80057aa:	e30b      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80057ac:	f001 fa40 	bl	8006c30 <_Z24OD_HeartbeatInterval_getv>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 fc3d 	bl	800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80057c6:	e2fd      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80057c8:	f001 fa6a 	bl	8006ca0 <_Z21OD_SendOdOnBootup_getv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	461a      	mov	r2, r3
 80057d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f002 fc44 	bl	8008064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80057e2:	e2ef      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 80057e4:	f001 fa94 	bl	8006d10 <_Z26OD_OdEntrySendInterval_getv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 fc4b 	bl	800808e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80057fe:	e2e1      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8005800:	f001 fabe 	bl	8006d80 <_Z15OD_CpuUsage_getv>
 8005804:	eef0 7a40 	vmov.f32	s15, s0
 8005808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800580c:	eeb0 0a67 	vmov.f32	s0, s15
 8005810:	4618      	mov	r0, r3
 8005812:	f002 fc51 	bl	80080b8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800581c:	e2d2      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 800581e:	f001 fae9 	bl	8006df4 <_Z14OD_MemFree_getv>
 8005822:	4602      	mov	r2, r0
 8005824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f002 fc5b 	bl	80080e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005830:	2300      	movs	r3, #0
 8005832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005836:	e2c5      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8005838:	f001 fb14 	bl	8006e64 <_Z16OD_BoardTemp_getv>
 800583c:	eef0 7a40 	vmov.f32	s15, s0
 8005840:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005844:	eeb0 0a67 	vmov.f32	s0, s15
 8005848:	4618      	mov	r0, r3
 800584a:	f002 fc60 	bl	800810e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800584e:	2300      	movs	r3, #0
 8005850:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005854:	e2b6      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8005856:	f001 fb3f 	bl	8006ed8 <_Z19OD_InputVoltage_getv>
 800585a:	eef0 7a40 	vmov.f32	s15, s0
 800585e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005862:	eeb0 0a67 	vmov.f32	s0, s15
 8005866:	4618      	mov	r0, r3
 8005868:	f002 fc68 	bl	800813c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005872:	e2a7      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8005874:	f001 fb6a 	bl	8006f4c <_Z14OD_runtime_getv>
 8005878:	4602      	mov	r2, r0
 800587a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f002 fc72 	bl	800816a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800588c:	e29a      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 800588e:	f001 fb79 	bl	8006f84 <_Z12OD_SdcIn_getv>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589a:	4611      	mov	r1, r2
 800589c:	4618      	mov	r0, r3
 800589e:	f002 fc78 	bl	8008192 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80058a8:	e28c      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 80058aa:	f001 fb87 	bl	8006fbc <_Z13OD_SdcOut_getv>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f002 fc7f 	bl	80081bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80058c4:	e27e      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 80058c6:	f001 fb95 	bl	8006ff4 <_Z15OD_ChipUID1_getv>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058d2:	4608      	mov	r0, r1
 80058d4:	f002 fc87 	bl	80081e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80058de:	e271      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 80058e0:	f001 fba8 	bl	8007034 <_Z15OD_ChipUID2_getv>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058ec:	4608      	mov	r0, r1
 80058ee:	f002 fc93 	bl	8008218 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80058f8:	e264      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 80058fa:	f001 fbbb 	bl	8007074 <_Z16OD_BuildDate_getv>
 80058fe:	4602      	mov	r2, r0
 8005900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f002 fc9f 	bl	800824a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005912:	e257      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005914:	f001 fbca 	bl	80070ac <_Z16OD_BuildTime_getv>
 8005918:	4602      	mov	r2, r0
 800591a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f002 fca6 	bl	8008272 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005926:	2300      	movs	r3, #0
 8005928:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800592c:	e24a      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800592e:	f001 fbd9 	bl	80070e4 <_Z20OD_CAN1_TxErrCnt_getv>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f002 fcac 	bl	800829a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005948:	e23c      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800594a:	f001 fbe7 	bl	800711c <_Z20OD_CAN1_RxErrCnt_getv>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f002 fcb3 	bl	80082c4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005964:	e22e      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005966:	f001 fbf5 	bl	8007154 <_Z25OD_CAN1_lastErrorCode_getv>
 800596a:	4602      	mov	r2, r0
 800596c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005970:	4611      	mov	r1, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f002 fcbb 	bl	80082ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800597e:	e221      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005980:	f001 fc04 	bl	800718c <_Z26OD_CAN1_autoErrorReset_getv>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f002 fcc1 	bl	8008316 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800599a:	e213      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800599c:	f001 fc2e 	bl	80071fc <_Z20OD_CAN1_Baudrate_getv>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f002 fcc8 	bl	8008340 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80059b6:	e205      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 80059b8:	f001 fc58 	bl	800726c <_Z18OD_CAN1_Status_getv>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f002 fccf 	bl	800836a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80059d2:	e1f7      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80059d4:	f001 fc66 	bl	80072a4 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80059d8:	4602      	mov	r2, r0
 80059da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fcd7 	bl	8008394 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80059ec:	e1ea      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80059ee:	f001 fc75 	bl	80072dc <_Z23OD_CAN1_ErrorStatus_getv>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059fa:	4611      	mov	r1, r2
 80059fc:	4618      	mov	r0, r3
 80059fe:	f002 fcdd 	bl	80083bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a08:	e1dc      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005a0a:	f001 fc83 	bl	8007314 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f002 fce5 	bl	80083e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a22:	e1cf      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005a24:	f001 fc92 	bl	800734c <_Z20OD_CAN2_TxErrCnt_getv>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f002 fceb 	bl	800840e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a3e:	e1c1      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005a40:	f001 fca0 	bl	8007384 <_Z20OD_CAN2_RxErrCnt_getv>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 fcf2 	bl	8008438 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a5a:	e1b3      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005a5c:	f001 fcae 	bl	80073bc <_Z25OD_CAN2_lastErrorCode_getv>
 8005a60:	4602      	mov	r2, r0
 8005a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 fcfa 	bl	8008462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a74:	e1a6      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005a76:	f001 fcbd 	bl	80073f4 <_Z26OD_CAN2_autoErrorReset_getv>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 fd00 	bl	800848a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005a90:	e198      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8005a92:	f001 fce7 	bl	8007464 <_Z20OD_CAN2_Baudrate_getv>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 fd07 	bl	80084b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005aac:	e18a      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8005aae:	f001 fd11 	bl	80074d4 <_Z18OD_CAN2_Status_getv>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f002 fd0e 	bl	80084de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005ac8:	e17c      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005aca:	f001 fd1f 	bl	800750c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 fd16 	bl	8008508 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005ae2:	e16f      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005ae4:	f001 fd2e 	bl	8007544 <_Z23OD_CAN2_ErrorStatus_getv>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f002 fd1c 	bl	8008530 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005afe:	e161      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005b00:	f001 fd3c 	bl	800757c <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005b04:	4602      	mov	r2, r0
 8005b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f002 fd24 	bl	800855a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005b18:	e154      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x800:    // OD_samplingInterval
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005b1a:	f001 fd4b 	bl	80075b4 <_Z23OD_samplingInterval_getv>
 8005b1e:	eef0 7a40 	vmov.f32	s15, s0
 8005b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b26:	eeb0 0a67 	vmov.f32	s0, s15
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 fd29 	bl	8008582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005b36:	e145      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x900:    // OD_TelemetryCommands
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005b38:	f001 fd76 	bl	8007628 <_Z24OD_TelemetryCommands_getv>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f002 fd32 	bl	80085b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005b52:	e137      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x901:    // OD_StateMachineInterval
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005b54:	f001 fda0 	bl	8007698 <_Z27OD_StateMachineInterval_getv>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f002 fd39 	bl	80085da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005b6e:	e129      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x902:    // OD_StateMachineActivate
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 8005b70:	f001 fdca 	bl	8007708 <_Z27OD_StateMachineActivate_getv>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f002 fd40 	bl	8008604 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005b8a:	e11b      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x903:    // OD_HVBatteryMode
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005b8c:	f001 fdf4 	bl	8007778 <_Z20OD_HVBatteryMode_getv>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b98:	4611      	mov	r1, r2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f002 fd47 	bl	800862e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005ba6:	e10d      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x904:    // OD_EncoderWheelDiameter
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005ba8:	f001 fe1e 	bl	80077e8 <_Z27OD_EncoderWheelDiameter_getv>
 8005bac:	eef0 7a40 	vmov.f32	s15, s0
 8005bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f002 fd4d 	bl	8008658 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005bc4:	e0fe      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x905:    // OD_EncoderResetPosition
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8005bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd0:	f640 1105 	movw	r1, #2309	; 0x905
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f002 fd56 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005bda:	e0f3      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x910:    // OD_SetReset
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be6:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fd4b 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005bf0:	e0e8      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8005bf2:	f001 fe6b 	bl	80078cc <_Z17OD_IMU_number_getv>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 fd55 	bl	80086b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005c0c:	e0da      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8005c0e:	f001 fe79 	bl	8007904 <_Z23OD_IMU1_Temperature_getv>
 8005c12:	eef0 7a40 	vmov.f32	s15, s0
 8005c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f002 fd5b 	bl	80086da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005c2a:	e0cb      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8005c2c:	f001 fe88 	bl	8007940 <_Z23OD_IMU2_Temperature_getv>
 8005c30:	eef0 7a40 	vmov.f32	s15, s0
 8005c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c38:	eeb0 0a67 	vmov.f32	s0, s15
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 fd63 	bl	8008708 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005c48:	e0bc      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8005c4a:	f001 fe97 	bl	800797c <_Z23OD_IMU3_Temperature_getv>
 8005c4e:	eef0 7a40 	vmov.f32	s15, s0
 8005c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c56:	eeb0 0a67 	vmov.f32	s0, s15
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f002 fd6b 	bl	8008736 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005c66:	e0ad      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA28:    // OD_IMU_AccelX
        	printf("send imu accelX\n");
 8005c68:	4864      	ldr	r0, [pc, #400]	; (8005dfc <_Z31handleSDORequestDownloadBySDOIDt+0xa64>)
 8005c6a:	f011 fe6b 	bl	8017944 <printf_>
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 8005c6e:	f001 fea3 	bl	80079b8 <_Z17OD_IMU_AccelX_getv>
 8005c72:	eef0 7a40 	vmov.f32	s15, s0
 8005c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f002 fd70 	bl	8008764 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005c8a:	e09b      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA29:    // OD_IMU_AccelY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 8005c8c:	f001 fece 	bl	8007a2c <_Z17OD_IMU_AccelY_getv>
 8005c90:	eef0 7a40 	vmov.f32	s15, s0
 8005c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c98:	eeb0 0a67 	vmov.f32	s0, s15
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f002 fd78 	bl	8008792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005ca8:	e08c      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA30:    // OD_IMU_AccelZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 8005caa:	f001 fef9 	bl	8007aa0 <_Z17OD_IMU_AccelZ_getv>
 8005cae:	eef0 7a40 	vmov.f32	s15, s0
 8005cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f002 fd80 	bl	80087c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005cc6:	e07d      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA31:    // OD_IMU_GyroX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 8005cc8:	f001 ff24 	bl	8007b14 <_Z16OD_IMU_GyroX_getv>
 8005ccc:	eef0 7a40 	vmov.f32	s15, s0
 8005cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f002 fd88 	bl	80087ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005ce4:	e06e      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA32:    // OD_IMU_GyroY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 8005ce6:	f001 ff4f 	bl	8007b88 <_Z16OD_IMU_GyroY_getv>
 8005cea:	eef0 7a40 	vmov.f32	s15, s0
 8005cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f002 fd90 	bl	800881c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d02:	e05f      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA33:    // OD_IMU_GyroZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8005d04:	f001 ff7a 	bl	8007bfc <_Z16OD_IMU_GyroZ_getv>
 8005d08:	eef0 7a40 	vmov.f32	s15, s0
 8005d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d10:	eeb0 0a67 	vmov.f32	s0, s15
 8005d14:	4618      	mov	r0, r3
 8005d16:	f002 fd98 	bl	800884a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d20:	e050      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xB00:    // OD_CoolingPressure
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8005d22:	f001 ffa5 	bl	8007c70 <_Z22OD_CoolingPressure_getv>
 8005d26:	eef0 7a40 	vmov.f32	s15, s0
 8005d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d32:	4618      	mov	r0, r3
 8005d34:	f002 fda0 	bl	8008878 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d3e:	e041      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xC00:    // OD_FiducialRightCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8005d40:	f001 ffd0 	bl	8007ce4 <_Z27OD_FiducialRightCounter_getv>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f002 fda9 	bl	80088a6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d5a:	e033      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xC01:    // OD_FiducialLeftCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 8005d5c:	f001 fffa 	bl	8007d54 <_Z26OD_FiducialLeftCounter_getv>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f002 fdb0 	bl	80088d0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d76:	e025      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xD00:    // OD_Position
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 8005d78:	f002 f824 	bl	8007dc4 <_Z15OD_Position_getv>
 8005d7c:	eef0 7a40 	vmov.f32	s15, s0
 8005d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d84:	eeb0 0a67 	vmov.f32	s0, s15
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f002 fdb6 	bl	80088fa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005d94:	e016      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xD01:    // OD_Velocity
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 8005d96:	f002 f84f 	bl	8007e38 <_Z15OD_Velocity_getv>
 8005d9a:	eef0 7a40 	vmov.f32	s15, s0
 8005d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da2:	eeb0 0a67 	vmov.f32	s0, s15
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 fdbe 	bl	8008928 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005db2:	e007      	b.n	8005dc4 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f002 fc62 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005dc2:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 8005dc4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f002 fdc1 	bl	8008956 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fb fa08 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <_Z31handleSDORequestDownloadBySDOIDt+0xa68>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	2300      	movs	r3, #0
 8005dee:	2200      	movs	r2, #0
 8005df0:	f012 f9fe 	bl	80181f0 <osMessageQueuePut>
}
 8005df4:	bf00      	nop
 8005df6:	3748      	adds	r7, #72	; 0x48
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	0801f4a4 	.word	0x0801f4a4
 8005e00:	200007b4 	.word	0x200007b4

08005e04 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2300      	movs	r3, #0
 8005e18:	2208      	movs	r2, #8
 8005e1a:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8005e1e:	f7fc ff60 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8005e26:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d000      	beq.n	8005e30 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8005e2e:	e7fe      	b.n	8005e2e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	331c      	adds	r3, #28
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ffd9 	bl	8005e04 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b0a0      	sub	sp, #128	; 0x80
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8005e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ffe5 	bl	8005e3a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8005e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fa7f 	bl	8005378 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8005e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e84:	4618      	mov	r0, r3
 8005e86:	f002 fd7b 	bl	8008980 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 8005e90:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8005e94:	f640 5201 	movw	r2, #3329	; 0xd01
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f000 8607 	beq.w	8006aac <_Z22handleSDORequestUploadRK9RxMessage+0xc50>
 8005e9e:	f640 5201 	movw	r2, #3329	; 0xd01
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	f300 8611 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005ea8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005eac:	f000 85e9 	beq.w	8006a82 <_Z22handleSDORequestUploadRK9RxMessage+0xc26>
 8005eb0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8005eb4:	f300 8609 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005eb8:	f640 4201 	movw	r2, #3073	; 0xc01
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	f000 85d2 	beq.w	8006a66 <_Z22handleSDORequestUploadRK9RxMessage+0xc0a>
 8005ec2:	f640 4201 	movw	r2, #3073	; 0xc01
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	f300 85ff 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed0:	f000 85bb 	beq.w	8006a4a <_Z22handleSDORequestUploadRK9RxMessage+0xbee>
 8005ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed8:	f300 85f7 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005edc:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005ee0:	f000 85a4 	beq.w	8006a2c <_Z22handleSDORequestUploadRK9RxMessage+0xbd0>
 8005ee4:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005ee8:	f300 85ef 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005eec:	f640 2233 	movw	r2, #2611	; 0xa33
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f300 85ea 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005ef6:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8005efa:	da16      	bge.n	8005f2a <_Z22handleSDORequestUploadRK9RxMessage+0xce>
 8005efc:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005f00:	f300 85e3 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005f04:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005f08:	da40      	bge.n	8005f8c <_Z22handleSDORequestUploadRK9RxMessage+0x130>
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0e:	f000 83f0 	beq.w	80066f2 <_Z22handleSDORequestUploadRK9RxMessage+0x896>
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f16:	f300 85d8 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005f1a:	2b21      	cmp	r3, #33	; 0x21
 8005f1c:	f300 8166 	bgt.w	80061ec <_Z22handleSDORequestUploadRK9RxMessage+0x390>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f300 8119 	bgt.w	8006158 <_Z22handleSDORequestUploadRK9RxMessage+0x2fc>
 8005f26:	f000 bdd0 	b.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005f2a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8005f2e:	2b13      	cmp	r3, #19
 8005f30:	f200 85cb 	bhi.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <_Z22handleSDORequestUploadRK9RxMessage+0xe0>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08006903 	.word	0x08006903
 8005f40:	08006acb 	.word	0x08006acb
 8005f44:	08006acb 	.word	0x08006acb
 8005f48:	08006acb 	.word	0x08006acb
 8005f4c:	08006acb 	.word	0x08006acb
 8005f50:	0800691f 	.word	0x0800691f
 8005f54:	0800693d 	.word	0x0800693d
 8005f58:	0800695b 	.word	0x0800695b
 8005f5c:	08006979 	.word	0x08006979
 8005f60:	08006997 	.word	0x08006997
 8005f64:	08006acb 	.word	0x08006acb
 8005f68:	08006acb 	.word	0x08006acb
 8005f6c:	08006acb 	.word	0x08006acb
 8005f70:	08006acb 	.word	0x08006acb
 8005f74:	08006acb 	.word	0x08006acb
 8005f78:	08006acb 	.word	0x08006acb
 8005f7c:	080069b5 	.word	0x080069b5
 8005f80:	080069d3 	.word	0x080069d3
 8005f84:	080069f1 	.word	0x080069f1
 8005f88:	08006a0f 	.word	0x08006a0f
 8005f8c:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	f200 859a 	bhi.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <_Z22handleSDORequestUploadRK9RxMessage+0x140>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08006753 	.word	0x08006753
 8005fa0:	08006789 	.word	0x08006789
 8005fa4:	080067d7 	.word	0x080067d7
 8005fa8:	0800680d 	.word	0x0800680d
 8005fac:	08006843 	.word	0x08006843
 8005fb0:	080068a3 	.word	0x080068a3
 8005fb4:	08006acb 	.word	0x08006acb
 8005fb8:	08006acb 	.word	0x08006acb
 8005fbc:	08006acb 	.word	0x08006acb
 8005fc0:	08006acb 	.word	0x08006acb
 8005fc4:	08006acb 	.word	0x08006acb
 8005fc8:	08006acb 	.word	0x08006acb
 8005fcc:	08006acb 	.word	0x08006acb
 8005fd0:	08006acb 	.word	0x08006acb
 8005fd4:	08006acb 	.word	0x08006acb
 8005fd8:	08006acb 	.word	0x08006acb
 8005fdc:	080068d3 	.word	0x080068d3
 8005fe0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005fe4:	2b59      	cmp	r3, #89	; 0x59
 8005fe6:	f200 8570 	bhi.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <_Z22handleSDORequestUploadRK9RxMessage+0x194>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	0800633d 	.word	0x0800633d
 8005ff4:	0800635b 	.word	0x0800635b
 8005ff8:	08006375 	.word	0x08006375
 8005ffc:	08006393 	.word	0x08006393
 8006000:	080063b1 	.word	0x080063b1
 8006004:	080063cb 	.word	0x080063cb
 8006008:	080063e7 	.word	0x080063e7
 800600c:	08006acb 	.word	0x08006acb
 8006010:	08006acb 	.word	0x08006acb
 8006014:	08006acb 	.word	0x08006acb
 8006018:	08006acb 	.word	0x08006acb
 800601c:	08006acb 	.word	0x08006acb
 8006020:	08006acb 	.word	0x08006acb
 8006024:	08006acb 	.word	0x08006acb
 8006028:	08006acb 	.word	0x08006acb
 800602c:	08006acb 	.word	0x08006acb
 8006030:	08006403 	.word	0x08006403
 8006034:	0800641d 	.word	0x0800641d
 8006038:	08006acb 	.word	0x08006acb
 800603c:	08006acb 	.word	0x08006acb
 8006040:	08006acb 	.word	0x08006acb
 8006044:	08006acb 	.word	0x08006acb
 8006048:	08006acb 	.word	0x08006acb
 800604c:	08006acb 	.word	0x08006acb
 8006050:	08006acb 	.word	0x08006acb
 8006054:	08006acb 	.word	0x08006acb
 8006058:	08006acb 	.word	0x08006acb
 800605c:	08006acb 	.word	0x08006acb
 8006060:	08006acb 	.word	0x08006acb
 8006064:	08006acb 	.word	0x08006acb
 8006068:	08006acb 	.word	0x08006acb
 800606c:	08006acb 	.word	0x08006acb
 8006070:	08006437 	.word	0x08006437
 8006074:	08006451 	.word	0x08006451
 8006078:	08006acb 	.word	0x08006acb
 800607c:	08006acb 	.word	0x08006acb
 8006080:	08006acb 	.word	0x08006acb
 8006084:	08006acb 	.word	0x08006acb
 8006088:	08006acb 	.word	0x08006acb
 800608c:	08006acb 	.word	0x08006acb
 8006090:	08006acb 	.word	0x08006acb
 8006094:	08006acb 	.word	0x08006acb
 8006098:	08006acb 	.word	0x08006acb
 800609c:	08006acb 	.word	0x08006acb
 80060a0:	08006acb 	.word	0x08006acb
 80060a4:	08006acb 	.word	0x08006acb
 80060a8:	08006acb 	.word	0x08006acb
 80060ac:	08006acb 	.word	0x08006acb
 80060b0:	08006acb 	.word	0x08006acb
 80060b4:	08006acb 	.word	0x08006acb
 80060b8:	08006acb 	.word	0x08006acb
 80060bc:	08006acb 	.word	0x08006acb
 80060c0:	08006acb 	.word	0x08006acb
 80060c4:	08006acb 	.word	0x08006acb
 80060c8:	08006acb 	.word	0x08006acb
 80060cc:	08006acb 	.word	0x08006acb
 80060d0:	08006acb 	.word	0x08006acb
 80060d4:	08006acb 	.word	0x08006acb
 80060d8:	08006acb 	.word	0x08006acb
 80060dc:	08006acb 	.word	0x08006acb
 80060e0:	08006acb 	.word	0x08006acb
 80060e4:	08006acb 	.word	0x08006acb
 80060e8:	08006acb 	.word	0x08006acb
 80060ec:	08006acb 	.word	0x08006acb
 80060f0:	0800646b 	.word	0x0800646b
 80060f4:	08006487 	.word	0x08006487
 80060f8:	080064a3 	.word	0x080064a3
 80060fc:	080064bd 	.word	0x080064bd
 8006100:	080064f3 	.word	0x080064f3
 8006104:	08006acb 	.word	0x08006acb
 8006108:	08006543 	.word	0x08006543
 800610c:	0800655f 	.word	0x0800655f
 8006110:	08006579 	.word	0x08006579
 8006114:	08006595 	.word	0x08006595
 8006118:	08006acb 	.word	0x08006acb
 800611c:	08006acb 	.word	0x08006acb
 8006120:	08006acb 	.word	0x08006acb
 8006124:	08006acb 	.word	0x08006acb
 8006128:	08006acb 	.word	0x08006acb
 800612c:	08006acb 	.word	0x08006acb
 8006130:	080065af 	.word	0x080065af
 8006134:	080065cb 	.word	0x080065cb
 8006138:	080065e7 	.word	0x080065e7
 800613c:	08006601 	.word	0x08006601
 8006140:	08006637 	.word	0x08006637
 8006144:	08006acb 	.word	0x08006acb
 8006148:	08006687 	.word	0x08006687
 800614c:	080066a3 	.word	0x080066a3
 8006150:	080066bd 	.word	0x080066bd
 8006154:	080066d9 	.word	0x080066d9
 8006158:	3b01      	subs	r3, #1
 800615a:	2b20      	cmp	r3, #32
 800615c:	f200 84b5 	bhi.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <_Z22handleSDORequestUploadRK9RxMessage+0x30c>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	08006203 	.word	0x08006203
 800616c:	08006221 	.word	0x08006221
 8006170:	0800623f 	.word	0x0800623f
 8006174:	0800625d 	.word	0x0800625d
 8006178:	0800627b 	.word	0x0800627b
 800617c:	08006acb 	.word	0x08006acb
 8006180:	08006acb 	.word	0x08006acb
 8006184:	08006acb 	.word	0x08006acb
 8006188:	08006acb 	.word	0x08006acb
 800618c:	08006acb 	.word	0x08006acb
 8006190:	08006acb 	.word	0x08006acb
 8006194:	08006acb 	.word	0x08006acb
 8006198:	08006acb 	.word	0x08006acb
 800619c:	08006acb 	.word	0x08006acb
 80061a0:	08006acb 	.word	0x08006acb
 80061a4:	08006299 	.word	0x08006299
 80061a8:	08006acb 	.word	0x08006acb
 80061ac:	08006acb 	.word	0x08006acb
 80061b0:	08006acb 	.word	0x08006acb
 80061b4:	08006acb 	.word	0x08006acb
 80061b8:	08006acb 	.word	0x08006acb
 80061bc:	08006acb 	.word	0x08006acb
 80061c0:	08006acb 	.word	0x08006acb
 80061c4:	08006acb 	.word	0x08006acb
 80061c8:	08006acb 	.word	0x08006acb
 80061cc:	08006acb 	.word	0x08006acb
 80061d0:	08006acb 	.word	0x08006acb
 80061d4:	08006acb 	.word	0x08006acb
 80061d8:	08006acb 	.word	0x08006acb
 80061dc:	08006acb 	.word	0x08006acb
 80061e0:	08006acb 	.word	0x08006acb
 80061e4:	080062d1 	.word	0x080062d1
 80061e8:	08006307 	.word	0x08006307
 80061ec:	f240 4269 	movw	r2, #1129	; 0x469
 80061f0:	4293      	cmp	r3, r2
 80061f2:	f300 846a 	bgt.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80061f6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80061fa:	f6bf aef1 	bge.w	8005fe0 <_Z22handleSDORequestUploadRK9RxMessage+0x184>
 80061fe:	f000 bc64 	b.w	8006aca <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006202:	2303      	movs	r3, #3
 8006204:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8006208:	f000 fc86 	bl	8006b18 <_Z13OD_NodeID_getv>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fea6 	bl	8007f68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800621c:	f000 bc5e 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006220:	2303      	movs	r3, #3
 8006222:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8006226:	f000 fc93 	bl	8006b50 <_Z17OD_NodeStatus_getv>
 800622a:	4603      	mov	r3, r0
 800622c:	461a      	mov	r2, r3
 800622e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f001 feac 	bl	8007f92 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800623a:	f000 bc4f 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800623e:	2303      	movs	r3, #3
 8006240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8006244:	f000 fca0 	bl	8006b88 <_Z22OD_ProtocolVersion_getv>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 feb2 	bl	8007fbc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8006258:	f000 bc40 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800625c:	2303      	movs	r3, #3
 800625e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8006262:	f000 fcad 	bl	8006bc0 <_Z19OD_StackVersion_getv>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f001 feb8 	bl	8007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8006276:	f000 bc31 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800627a:	2303      	movs	r3, #3
 800627c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8006280:	f000 fcba 	bl	8006bf8 <_Z17OD_DbcVersion_getv>
 8006284:	4603      	mov	r3, r0
 8006286:	461a      	mov	r2, r3
 8006288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f001 febe 	bl	8008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8006294:	f000 bc22 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_HeartbeatInterval>();
 8006298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800629c:	4618      	mov	r0, r3
 800629e:	f002 fb81 	bl	80089a4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80062a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fcdb 	bl	8006c68 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80062b8:	f000 fcba 	bl	8006c30 <_Z24OD_HeartbeatInterval_getv>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 feb7 	bl	800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 80062cc:	f000 bc06 	b.w	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SendOdOnBootup>();
 80062d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062d4:	4618      	mov	r0, r3
 80062d6:	f002 fb77 	bl	80089c8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80062da:	4603      	mov	r3, r0
 80062dc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 80062e0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fcf7 	bl	8006cd8 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80062f0:	f000 fcd6 	bl	8006ca0 <_Z21OD_SendOdOnBootup_getv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 feb0 	bl	8008064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8006304:	e3ea      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_OdEntrySendInterval>();
 8006306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800630a:	4618      	mov	r0, r3
 800630c:	f002 fb6e 	bl	80089ec <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8006310:	4603      	mov	r3, r0
 8006312:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8006316:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fd14 	bl	8006d48 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8006320:	2300      	movs	r3, #0
 8006322:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8006326:	f000 fcf3 	bl	8006d10 <_Z26OD_OdEntrySendInterval_getv>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f001 feaa 	bl	800808e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 800633a:	e3cf      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800633c:	2303      	movs	r3, #3
 800633e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8006342:	f000 fd1d 	bl	8006d80 <_Z15OD_CpuUsage_getv>
 8006346:	eef0 7a40 	vmov.f32	s15, s0
 800634a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800634e:	eeb0 0a67 	vmov.f32	s0, s15
 8006352:	4618      	mov	r0, r3
 8006354:	f001 feb0 	bl	80080b8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8006358:	e3c0      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800635a:	2303      	movs	r3, #3
 800635c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8006360:	f000 fd48 	bl	8006df4 <_Z14OD_MemFree_getv>
 8006364:	4602      	mov	r2, r0
 8006366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f001 feba 	bl	80080e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8006372:	e3b3      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006374:	2303      	movs	r3, #3
 8006376:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 800637a:	f000 fd73 	bl	8006e64 <_Z16OD_BoardTemp_getv>
 800637e:	eef0 7a40 	vmov.f32	s15, s0
 8006382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006386:	eeb0 0a67 	vmov.f32	s0, s15
 800638a:	4618      	mov	r0, r3
 800638c:	f001 febf 	bl	800810e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8006390:	e3a4      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006392:	2303      	movs	r3, #3
 8006394:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8006398:	f000 fd9e 	bl	8006ed8 <_Z19OD_InputVoltage_getv>
 800639c:	eef0 7a40 	vmov.f32	s15, s0
 80063a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063a4:	eeb0 0a67 	vmov.f32	s0, s15
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fec7 	bl	800813c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80063ae:	e395      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 80063b6:	f000 fdc9 	bl	8006f4c <_Z14OD_runtime_getv>
 80063ba:	4602      	mov	r2, r0
 80063bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fed1 	bl	800816a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 80063c8:	e388      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 80063d0:	f000 fdd8 	bl	8006f84 <_Z12OD_SdcIn_getv>
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 fed7 	bl	8008192 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 80063e4:	e37a      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 80063ec:	f000 fde6 	bl	8006fbc <_Z13OD_SdcOut_getv>
 80063f0:	4603      	mov	r3, r0
 80063f2:	461a      	mov	r2, r3
 80063f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fede 	bl	80081bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8006400:	e36c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006402:	2303      	movs	r3, #3
 8006404:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8006408:	f000 fdf4 	bl	8006ff4 <_Z15OD_ChipUID1_getv>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006414:	4608      	mov	r0, r1
 8006416:	f001 fee6 	bl	80081e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 800641a:	e35f      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800641c:	2303      	movs	r3, #3
 800641e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8006422:	f000 fe07 	bl	8007034 <_Z15OD_ChipUID2_getv>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800642e:	4608      	mov	r0, r1
 8006430:	f001 fef2 	bl	8008218 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8006434:	e352      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006436:	2303      	movs	r3, #3
 8006438:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 800643c:	f000 fe1a 	bl	8007074 <_Z16OD_BuildDate_getv>
 8006440:	4602      	mov	r2, r0
 8006442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f001 fefe 	bl	800824a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 800644e:	e345      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006450:	2303      	movs	r3, #3
 8006452:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8006456:	f000 fe29 	bl	80070ac <_Z16OD_BuildTime_getv>
 800645a:	4602      	mov	r2, r0
 800645c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006460:	4611      	mov	r1, r2
 8006462:	4618      	mov	r0, r3
 8006464:	f001 ff05 	bl	8008272 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8006468:	e338      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800646a:	2303      	movs	r3, #3
 800646c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8006470:	f000 fe38 	bl	80070e4 <_Z20OD_CAN1_TxErrCnt_getv>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800647c:	4611      	mov	r1, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f001 ff0b 	bl	800829a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8006484:	e32a      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006486:	2303      	movs	r3, #3
 8006488:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800648c:	f000 fe46 	bl	800711c <_Z20OD_CAN1_RxErrCnt_getv>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 ff12 	bl	80082c4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80064a0:	e31c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80064a8:	f000 fe54 	bl	8007154 <_Z25OD_CAN1_lastErrorCode_getv>
 80064ac:	4602      	mov	r2, r0
 80064ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064b2:	4611      	mov	r1, r2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 ff1a 	bl	80082ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80064ba:	e30f      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_autoErrorReset>();
 80064bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064c0:	4618      	mov	r0, r3
 80064c2:	f002 faa5 	bl	8008a10 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 80064cc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fe77 	bl	80071c4 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80064dc:	f000 fe56 	bl	800718c <_Z26OD_CAN1_autoErrorReset_getv>
 80064e0:	4603      	mov	r3, r0
 80064e2:	461a      	mov	r2, r3
 80064e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 ff13 	bl	8008316 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80064f0:	e2f4      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_Baudrate>();
 80064f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80064f6:	4618      	mov	r0, r3
 80064f8:	f002 fa9c 	bl	8008a34 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8006502:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006506:	2b7c      	cmp	r3, #124	; 0x7c
 8006508:	d904      	bls.n	8006514 <_Z22handleSDORequestUploadRK9RxMessage+0x6b8>
 800650a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800650e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006512:	d903      	bls.n	800651c <_Z22handleSDORequestUploadRK9RxMessage+0x6c0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8006514:	2305      	movs	r3, #5
 8006516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800651a:	e007      	b.n	800652c <_Z22handleSDORequestUploadRK9RxMessage+0x6d0>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 800651c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fe87 	bl	8007234 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800652c:	f000 fe66 	bl	80071fc <_Z20OD_CAN1_Baudrate_getv>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f001 ff00 	bl	8008340 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8006540:	e2cc      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006542:	2303      	movs	r3, #3
 8006544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8006548:	f000 fe90 	bl	800726c <_Z18OD_CAN1_Status_getv>
 800654c:	4603      	mov	r3, r0
 800654e:	461a      	mov	r2, r3
 8006550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f001 ff07 	bl	800836a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 800655c:	e2be      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800655e:	2303      	movs	r3, #3
 8006560:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8006564:	f000 fe9e 	bl	80072a4 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8006568:	4602      	mov	r2, r0
 800656a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f001 ff0f 	bl	8008394 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8006576:	e2b1      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006578:	2303      	movs	r3, #3
 800657a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800657e:	f000 fead 	bl	80072dc <_Z23OD_CAN1_ErrorStatus_getv>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 ff15 	bl	80083bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8006592:	e2a3      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006594:	2303      	movs	r3, #3
 8006596:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800659a:	f000 febb 	bl	8007314 <_Z29OD_CAN1_DelayedTxMessages_getv>
 800659e:	4602      	mov	r2, r0
 80065a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 ff1d 	bl	80083e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80065ac:	e296      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80065b4:	f000 feca 	bl	800734c <_Z20OD_CAN2_TxErrCnt_getv>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 ff23 	bl	800840e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 80065c8:	e288      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80065d0:	f000 fed8 	bl	8007384 <_Z20OD_CAN2_RxErrCnt_getv>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 ff2a 	bl	8008438 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 80065e4:	e27a      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80065ec:	f000 fee6 	bl	80073bc <_Z25OD_CAN2_lastErrorCode_getv>
 80065f0:	4602      	mov	r2, r0
 80065f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 ff32 	bl	8008462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80065fe:	e26d      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_autoErrorReset>();
 8006600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006604:	4618      	mov	r0, r3
 8006606:	f002 fa27 	bl	8008a58 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8006610:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ff09 	bl	800742c <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800661a:	2300      	movs	r3, #0
 800661c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8006620:	f000 fee8 	bl	80073f4 <_Z26OD_CAN2_autoErrorReset_getv>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f001 ff2b 	bl	800848a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8006634:	e252      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_Baudrate>();
 8006636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800663a:	4618      	mov	r0, r3
 800663c:	f002 fa1e 	bl	8008a7c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8006640:	4603      	mov	r3, r0
 8006642:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8006646:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800664a:	2b7c      	cmp	r3, #124	; 0x7c
 800664c:	d904      	bls.n	8006658 <_Z22handleSDORequestUploadRK9RxMessage+0x7fc>
 800664e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006656:	d903      	bls.n	8006660 <_Z22handleSDORequestUploadRK9RxMessage+0x804>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8006658:	2305      	movs	r3, #5
 800665a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800665e:	e007      	b.n	8006670 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8006660:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006664:	4618      	mov	r0, r3
 8006666:	f000 ff19 	bl	800749c <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800666a:	2300      	movs	r3, #0
 800666c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8006670:	f000 fef8 	bl	8007464 <_Z20OD_CAN2_Baudrate_getv>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 ff18 	bl	80084b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8006684:	e22a      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006686:	2303      	movs	r3, #3
 8006688:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 800668c:	f000 ff22 	bl	80074d4 <_Z18OD_CAN2_Status_getv>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f001 ff1f 	bl	80084de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 80066a0:	e21c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80066a8:	f000 ff30 	bl	800750c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80066ac:	4602      	mov	r2, r0
 80066ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f001 ff27 	bl	8008508 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80066ba:	e20f      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80066bc:	2303      	movs	r3, #3
 80066be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 80066c2:	f000 ff3f 	bl	8007544 <_Z23OD_CAN2_ErrorStatus_getv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 ff2d 	bl	8008530 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80066d6:	e201      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80066d8:	2303      	movs	r3, #3
 80066da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 80066de:	f000 ff4d 	bl	800757c <_Z29OD_CAN2_DelayedTxMessages_getv>
 80066e2:	4602      	mov	r2, r0
 80066e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 ff35 	bl	800855a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80066f0:	e1f4      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x800: {   // OD_samplingInterval
            float value = msgSdoReq.get<can::signals::SensorF_OD_samplingInterval>();
 80066f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066f6:	4618      	mov	r0, r3
 80066f8:	f002 f9d2 	bl	8008aa0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>
 80066fc:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.01f || value > 100.0f) {
 8006700:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006704:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8006aa0 <_Z22handleSDORequestUploadRK9RxMessage+0xc44>
 8006708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006710:	d408      	bmi.n	8006724 <_Z22handleSDORequestUploadRK9RxMessage+0x8c8>
 8006712:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006716:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 8006aa4 <_Z22handleSDORequestUploadRK9RxMessage+0xc48>
 800671a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800671e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006722:	dd03      	ble.n	800672c <_Z22handleSDORequestUploadRK9RxMessage+0x8d0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8006724:	2305      	movs	r3, #5
 8006726:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800672a:	e006      	b.n	800673a <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
            }
            else {
                OD_samplingInterval_set(value);
 800672c:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8006730:	f000 ff5e 	bl	80075f0 <_Z23OD_samplingInterval_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 800673a:	f000 ff3b 	bl	80075b4 <_Z23OD_samplingInterval_getv>
 800673e:	eef0 7a40 	vmov.f32	s15, s0
 8006742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006746:	eeb0 0a67 	vmov.f32	s0, s15
 800674a:	4618      	mov	r0, r3
 800674c:	f001 ff19 	bl	8008582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            break;
 8006750:	e1c4      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x900: {   // OD_TelemetryCommands
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_TelemetryCommands>();
 8006752:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006756:	4618      	mov	r0, r3
 8006758:	f002 f9b6 	bl	8008ac8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                OD_TelemetryCommands_set(value);
 8006762:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8006766:	4618      	mov	r0, r3
 8006768:	f000 ff7a 	bl	8007660 <_Z24OD_TelemetryCommands_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800676c:	2300      	movs	r3, #0
 800676e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8006772:	f000 ff59 	bl	8007628 <_Z24OD_TelemetryCommands_getv>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f001 ff15 	bl	80085b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            break;
 8006786:	e1a9      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x901: {   // OD_StateMachineInterval
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineInterval>();
 8006788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800678c:	4618      	mov	r0, r3
 800678e:	f002 f9ad 	bl	8008aec <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
if (value < 5 || value > 100) {
 8006798:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800679c:	2b04      	cmp	r3, #4
 800679e:	d903      	bls.n	80067a8 <_Z22handleSDORequestUploadRK9RxMessage+0x94c>
 80067a0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80067a4:	2b64      	cmp	r3, #100	; 0x64
 80067a6:	d903      	bls.n	80067b0 <_Z22handleSDORequestUploadRK9RxMessage+0x954>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 80067a8:	2305      	movs	r3, #5
 80067aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80067ae:	e007      	b.n	80067c0 <_Z22handleSDORequestUploadRK9RxMessage+0x964>
            }
            else {
                OD_StateMachineInterval_set(value);
 80067b0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ff8b 	bl	80076d0 <_Z27OD_StateMachineInterval_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 80067c0:	f000 ff6a 	bl	8007698 <_Z27OD_StateMachineInterval_getv>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 ff03 	bl	80085da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            break;
 80067d4:	e182      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x902: {   // OD_StateMachineActivate
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineActivate>();
 80067d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80067da:	4618      	mov	r0, r3
 80067dc:	f002 f998 	bl	8008b10 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                OD_StateMachineActivate_set(value);
 80067e6:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 ffa8 	bl	8007740 <_Z27OD_StateMachineActivate_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 80067f6:	f000 ff87 	bl	8007708 <_Z27OD_StateMachineActivate_getv>
 80067fa:	4603      	mov	r3, r0
 80067fc:	461a      	mov	r2, r3
 80067fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006802:	4611      	mov	r1, r2
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fefd 	bl	8008604 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            break;
 800680a:	e167      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x903: {   // OD_HVBatteryMode
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_HVBatteryMode>();
 800680c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006810:	4618      	mov	r0, r3
 8006812:	f002 f98f 	bl	8008b34 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                OD_HVBatteryMode_set(value);
 800681c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006820:	4618      	mov	r0, r3
 8006822:	f000 ffc5 	bl	80077b0 <_Z20OD_HVBatteryMode_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8006826:	2300      	movs	r3, #0
 8006828:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 800682c:	f000 ffa4 	bl	8007778 <_Z20OD_HVBatteryMode_getv>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fef7 	bl	800862e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            break;
 8006840:	e14c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x904: {   // OD_EncoderWheelDiameter
            float value = msgSdoReq.get<can::signals::SensorF_OD_EncoderWheelDiameter>();
 8006842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006846:	4618      	mov	r0, r3
 8006848:	f002 f986 	bl	8008b58 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>
 800684c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 1.0f || value > 300.0f) {
 8006850:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800685c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006860:	d408      	bmi.n	8006874 <_Z22handleSDORequestUploadRK9RxMessage+0xa18>
 8006862:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006866:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8006aa8 <_Z22handleSDORequestUploadRK9RxMessage+0xc4c>
 800686a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800686e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006872:	dd03      	ble.n	800687c <_Z22handleSDORequestUploadRK9RxMessage+0xa20>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8006874:	2305      	movs	r3, #5
 8006876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800687a:	e006      	b.n	800688a <_Z22handleSDORequestUploadRK9RxMessage+0xa2e>
            }
            else {
                OD_EncoderWheelDiameter_set(value);
 800687c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8006880:	f000 ffd0 	bl	8007824 <_Z27OD_EncoderWheelDiameter_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8006884:	2300      	movs	r3, #0
 8006886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 800688a:	f000 ffad 	bl	80077e8 <_Z27OD_EncoderWheelDiameter_getv>
 800688e:	eef0 7a40 	vmov.f32	s15, s0
 8006892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006896:	eeb0 0a67 	vmov.f32	s0, s15
 800689a:	4618      	mov	r0, r3
 800689c:	f001 fedc 	bl	8008658 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            break;
 80068a0:	e11c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x905: {   // OD_EncoderResetPosition
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_EncoderResetPosition>();
 80068a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068a6:	4618      	mov	r0, r3
 80068a8:	f002 f96a 	bl	8008b80 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
                OD_EncoderResetPosition_set(value);
 80068b2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 ffd0 	bl	800785c <_Z27OD_EncoderResetPosition_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 80068c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c6:	f640 1105 	movw	r1, #2309	; 0x905
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fedb 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80068d0:	e104      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x910: {   // OD_SetReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SetReset>();
 80068d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 f964 	bl	8008ba4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                OD_SetReset_set(value);
 80068e2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 ffd4 	bl	8007894 <_Z15OD_SetReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 80068f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068f6:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fec3 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8006900:	e0ec      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8006908:	f000 ffe0 	bl	80078cc <_Z17OD_IMU_number_getv>
 800690c:	4603      	mov	r3, r0
 800690e:	461a      	mov	r2, r3
 8006910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f001 feca 	bl	80086b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 800691c:	e0de      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800691e:	2303      	movs	r3, #3
 8006920:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8006924:	f000 ffee 	bl	8007904 <_Z23OD_IMU1_Temperature_getv>
 8006928:	eef0 7a40 	vmov.f32	s15, s0
 800692c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006930:	eeb0 0a67 	vmov.f32	s0, s15
 8006934:	4618      	mov	r0, r3
 8006936:	f001 fed0 	bl	80086da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 800693a:	e0cf      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800693c:	2303      	movs	r3, #3
 800693e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8006942:	f000 fffd 	bl	8007940 <_Z23OD_IMU2_Temperature_getv>
 8006946:	eef0 7a40 	vmov.f32	s15, s0
 800694a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800694e:	eeb0 0a67 	vmov.f32	s0, s15
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fed8 	bl	8008708 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 8006958:	e0c0      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800695a:	2303      	movs	r3, #3
 800695c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8006960:	f001 f80c 	bl	800797c <_Z23OD_IMU3_Temperature_getv>
 8006964:	eef0 7a40 	vmov.f32	s15, s0
 8006968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800696c:	eeb0 0a67 	vmov.f32	s0, s15
 8006970:	4618      	mov	r0, r3
 8006972:	f001 fee0 	bl	8008736 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 8006976:	e0b1      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA28: {   // OD_IMU_AccelX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006978:	2303      	movs	r3, #3
 800697a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 800697e:	f001 f81b 	bl	80079b8 <_Z17OD_IMU_AccelX_getv>
 8006982:	eef0 7a40 	vmov.f32	s15, s0
 8006986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800698a:	eeb0 0a67 	vmov.f32	s0, s15
 800698e:	4618      	mov	r0, r3
 8006990:	f001 fee8 	bl	8008764 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            break;
 8006994:	e0a2      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA29: {   // OD_IMU_AccelY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006996:	2303      	movs	r3, #3
 8006998:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 800699c:	f001 f846 	bl	8007a2c <_Z17OD_IMU_AccelY_getv>
 80069a0:	eef0 7a40 	vmov.f32	s15, s0
 80069a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069a8:	eeb0 0a67 	vmov.f32	s0, s15
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fef0 	bl	8008792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            break;
 80069b2:	e093      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA30: {   // OD_IMU_AccelZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80069ba:	f001 f871 	bl	8007aa0 <_Z17OD_IMU_AccelZ_getv>
 80069be:	eef0 7a40 	vmov.f32	s15, s0
 80069c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069c6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fef8 	bl	80087c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            break;
 80069d0:	e084      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA31: {   // OD_IMU_GyroX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 80069d8:	f001 f89c 	bl	8007b14 <_Z16OD_IMU_GyroX_getv>
 80069dc:	eef0 7a40 	vmov.f32	s15, s0
 80069e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069e4:	eeb0 0a67 	vmov.f32	s0, s15
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 ff00 	bl	80087ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            break;
 80069ee:	e075      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA32: {   // OD_IMU_GyroY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 80069f6:	f001 f8c7 	bl	8007b88 <_Z16OD_IMU_GyroY_getv>
 80069fa:	eef0 7a40 	vmov.f32	s15, s0
 80069fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a02:	eeb0 0a67 	vmov.f32	s0, s15
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 ff08 	bl	800881c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            break;
 8006a0c:	e066      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA33: {   // OD_IMU_GyroZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8006a14:	f001 f8f2 	bl	8007bfc <_Z16OD_IMU_GyroZ_getv>
 8006a18:	eef0 7a40 	vmov.f32	s15, s0
 8006a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a20:	eeb0 0a67 	vmov.f32	s0, s15
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 ff10 	bl	800884a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            break;
 8006a2a:	e057      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xB00: {   // OD_CoolingPressure
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8006a32:	f001 f91d 	bl	8007c70 <_Z22OD_CoolingPressure_getv>
 8006a36:	eef0 7a40 	vmov.f32	s15, s0
 8006a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 ff18 	bl	8008878 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            break;
 8006a48:	e048      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC00: {   // OD_FiducialRightCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8006a50:	f001 f948 	bl	8007ce4 <_Z27OD_FiducialRightCounter_getv>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f001 ff21 	bl	80088a6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            break;
 8006a64:	e03a      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC01: {   // OD_FiducialLeftCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 8006a6c:	f001 f972 	bl	8007d54 <_Z26OD_FiducialLeftCounter_getv>
 8006a70:	4603      	mov	r3, r0
 8006a72:	461a      	mov	r2, r3
 8006a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a78:	4611      	mov	r1, r2
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 ff28 	bl	80088d0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            break;
 8006a80:	e02c      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xD00: {   // OD_Position
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 8006a88:	f001 f99c 	bl	8007dc4 <_Z15OD_Position_getv>
 8006a8c:	eef0 7a40 	vmov.f32	s15, s0
 8006a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a94:	eeb0 0a67 	vmov.f32	s0, s15
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 ff2e 	bl	80088fa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            break;
 8006a9e:	e01d      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
 8006aa0:	3c23d70a 	.word	0x3c23d70a
 8006aa4:	42c80000 	.word	0x42c80000
 8006aa8:	43960000 	.word	0x43960000
        }
        case 0xD01: {   // OD_Velocity
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 8006ab2:	f001 f9c1 	bl	8007e38 <_Z15OD_Velocity_getv>
 8006ab6:	eef0 7a40 	vmov.f32	s15, s0
 8006aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 ff30 	bl	8008928 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            break;
 8006ac8:	e008      	b.n	8006adc <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 8006aca:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8006ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fdd6 	bl	8008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8006ada:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 8006adc:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 ff35 	bl	8008956 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006af4:	2200      	movs	r2, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fa fb7c 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <_Z22handleSDORequestUploadRK9RxMessage+0xcb8>)
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	2300      	movs	r3, #0
 8006b06:	2200      	movs	r2, #0
 8006b08:	f011 fb72 	bl	80181f0 <osMessageQueuePut>
}
 8006b0c:	bf00      	nop
 8006b0e:	3780      	adds	r7, #128	; 0x80
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	200007b4 	.word	0x200007b4

08006b18 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <_Z13OD_NodeID_getv+0x30>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f04f 31ff 	mov.w	r1, #4294967295
 8006b26:	4618      	mov	r0, r3
 8006b28:	f011 f927 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8006b2c:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <_Z13OD_NodeID_getv+0x34>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <_Z13OD_NodeID_getv+0x30>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f011 f96a 	bl	8017e10 <osMutexRelease>
    return value;
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000968 	.word	0x20000968
 8006b4c:	200008c8 	.word	0x200008c8

08006b50 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <_Z17OD_NodeStatus_getv+0x30>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f011 f90b 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8006b64:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <_Z17OD_NodeStatus_getv+0x34>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <_Z17OD_NodeStatus_getv+0x30>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f011 f94e 	bl	8017e10 <osMutexRelease>
    return value;
 8006b74:	79fb      	ldrb	r3, [r7, #7]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	2000096c 	.word	0x2000096c
 8006b84:	200008c9 	.word	0x200008c9

08006b88 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <_Z22OD_ProtocolVersion_getv+0x30>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f04f 31ff 	mov.w	r1, #4294967295
 8006b96:	4618      	mov	r0, r3
 8006b98:	f011 f8ef 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8006b9c:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <_Z22OD_ProtocolVersion_getv+0x34>)
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <_Z22OD_ProtocolVersion_getv+0x30>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f011 f932 	bl	8017e10 <osMutexRelease>
    return value;
 8006bac:	88fb      	ldrh	r3, [r7, #6]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000970 	.word	0x20000970
 8006bbc:	20000000 	.word	0x20000000

08006bc0 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <_Z19OD_StackVersion_getv+0x30>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f04f 31ff 	mov.w	r1, #4294967295
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f011 f8d3 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <_Z19OD_StackVersion_getv+0x34>)
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8006bda:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <_Z19OD_StackVersion_getv+0x30>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f011 f916 	bl	8017e10 <osMutexRelease>
    return value;
 8006be4:	88fb      	ldrh	r3, [r7, #6]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000974 	.word	0x20000974
 8006bf4:	200008ca 	.word	0x200008ca

08006bf8 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <_Z17OD_DbcVersion_getv+0x30>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f04f 31ff 	mov.w	r1, #4294967295
 8006c06:	4618      	mov	r0, r3
 8006c08:	f011 f8b7 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8006c0c:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <_Z17OD_DbcVersion_getv+0x34>)
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <_Z17OD_DbcVersion_getv+0x30>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f011 f8fa 	bl	8017e10 <osMutexRelease>
    return value;
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000978 	.word	0x20000978
 8006c2c:	200008cc 	.word	0x200008cc

08006c30 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8006c36:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f011 f89b 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f011 f8de 	bl	8017e10 <osMutexRelease>
    return value;
 8006c54:	88fb      	ldrh	r3, [r7, #6]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	2000097c 	.word	0x2000097c
 8006c64:	20000002 	.word	0x20000002

08006c68 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8006c72:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f04f 31ff 	mov.w	r1, #4294967295
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f011 f87d 	bl	8017d7a <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8006c80:	4a06      	ldr	r2, [pc, #24]	; (8006c9c <_Z24OD_HeartbeatInterval_sett+0x34>)
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f011 f8c0 	bl	8017e10 <osMutexRelease>
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	2000097c 	.word	0x2000097c
 8006c9c:	20000002 	.word	0x20000002

08006ca0 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f04f 31ff 	mov.w	r1, #4294967295
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f011 f863 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8006cb4:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f011 f8a6 	bl	8017e10 <osMutexRelease>
    return value;
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000980 	.word	0x20000980
 8006cd4:	200008ce 	.word	0x200008ce

08006cd8 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cea:	4618      	mov	r0, r3
 8006cec:	f011 f845 	bl	8017d7a <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8006cf0:	4a06      	ldr	r2, [pc, #24]	; (8006d0c <_Z21OD_SendOdOnBootup_seth+0x34>)
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8006cf6:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f011 f888 	bl	8017e10 <osMutexRelease>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000980 	.word	0x20000980
 8006d0c:	200008ce 	.word	0x200008ce

08006d10 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f011 f82b 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8006d24:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f011 f86e 	bl	8017e10 <osMutexRelease>
    return value;
 8006d34:	88fb      	ldrh	r3, [r7, #6]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000984 	.word	0x20000984
 8006d44:	20000004 	.word	0x20000004

08006d48 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f04f 31ff 	mov.w	r1, #4294967295
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f011 f80d 	bl	8017d7a <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8006d60:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f011 f850 	bl	8017e10 <osMutexRelease>
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000984 	.word	0x20000984
 8006d7c:	20000004 	.word	0x20000004

08006d80 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <_Z15OD_CpuUsage_getv+0x34>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f010 fff3 	bl	8017d7a <osMutexAcquire>
    float value = OD_CpuUsage;
 8006d94:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <_Z15OD_CpuUsage_getv+0x38>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8006d9a:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <_Z15OD_CpuUsage_getv+0x34>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f011 f836 	bl	8017e10 <osMutexRelease>
    return value;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	ee07 3a90 	vmov	s15, r3
}
 8006daa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000988 	.word	0x20000988
 8006db8:	200008d0 	.word	0x200008d0

08006dbc <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <_Z15OD_CpuUsage_setf+0x30>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f04f 31ff 	mov.w	r1, #4294967295
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f010 ffd3 	bl	8017d7a <osMutexAcquire>
    OD_CpuUsage = value;
 8006dd4:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <_Z15OD_CpuUsage_setf+0x34>)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <_Z15OD_CpuUsage_setf+0x30>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f011 f816 	bl	8017e10 <osMutexRelease>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000988 	.word	0x20000988
 8006df0:	200008d0 	.word	0x200008d0

08006df4 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <_Z14OD_MemFree_getv+0x30>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8006e02:	4618      	mov	r0, r3
 8006e04:	f010 ffb9 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8006e08:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <_Z14OD_MemFree_getv+0x34>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <_Z14OD_MemFree_getv+0x30>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f010 fffc 	bl	8017e10 <osMutexRelease>
    return value;
 8006e18:	687b      	ldr	r3, [r7, #4]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000098c 	.word	0x2000098c
 8006e28:	200008d4 	.word	0x200008d4

08006e2c <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006e34:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <_Z14OD_MemFree_setm+0x30>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f010 ff9c 	bl	8017d7a <osMutexAcquire>
    OD_MemFree = value;
 8006e42:	4a07      	ldr	r2, [pc, #28]	; (8006e60 <_Z14OD_MemFree_setm+0x34>)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <_Z14OD_MemFree_setm+0x30>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f010 ffdf 	bl	8017e10 <osMutexRelease>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2000098c 	.word	0x2000098c
 8006e60:	200008d4 	.word	0x200008d4

08006e64 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <_Z16OD_BoardTemp_getv+0x34>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e72:	4618      	mov	r0, r3
 8006e74:	f010 ff81 	bl	8017d7a <osMutexAcquire>
    float value = OD_BoardTemp;
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <_Z16OD_BoardTemp_getv+0x38>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <_Z16OD_BoardTemp_getv+0x34>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f010 ffc4 	bl	8017e10 <osMutexRelease>
    return value;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	ee07 3a90 	vmov	s15, r3
}
 8006e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000990 	.word	0x20000990
 8006e9c:	200008d8 	.word	0x200008d8

08006ea0 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <_Z16OD_BoardTemp_setf+0x30>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f04f 31ff 	mov.w	r1, #4294967295
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f010 ff61 	bl	8017d7a <osMutexAcquire>
    OD_BoardTemp = value;
 8006eb8:	4a06      	ldr	r2, [pc, #24]	; (8006ed4 <_Z16OD_BoardTemp_setf+0x34>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <_Z16OD_BoardTemp_setf+0x30>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f010 ffa4 	bl	8017e10 <osMutexRelease>
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000990 	.word	0x20000990
 8006ed4:	200008d8 	.word	0x200008d8

08006ed8 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006ede:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <_Z19OD_InputVoltage_getv+0x34>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f010 ff47 	bl	8017d7a <osMutexAcquire>
    float value = OD_InputVoltage;
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <_Z19OD_InputVoltage_getv+0x38>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <_Z19OD_InputVoltage_getv+0x34>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f010 ff8a 	bl	8017e10 <osMutexRelease>
    return value;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	ee07 3a90 	vmov	s15, r3
}
 8006f02:	eeb0 0a67 	vmov.f32	s0, s15
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000994 	.word	0x20000994
 8006f10:	200008dc 	.word	0x200008dc

08006f14 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <_Z19OD_InputVoltage_setf+0x30>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f04f 31ff 	mov.w	r1, #4294967295
 8006f26:	4618      	mov	r0, r3
 8006f28:	f010 ff27 	bl	8017d7a <osMutexAcquire>
    OD_InputVoltage = value;
 8006f2c:	4a06      	ldr	r2, [pc, #24]	; (8006f48 <_Z19OD_InputVoltage_setf+0x34>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8006f32:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <_Z19OD_InputVoltage_setf+0x30>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f010 ff6a 	bl	8017e10 <osMutexRelease>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000994 	.word	0x20000994
 8006f48:	200008dc 	.word	0x200008dc

08006f4c <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8006f52:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <_Z14OD_runtime_getv+0x30>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f04f 31ff 	mov.w	r1, #4294967295
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f010 ff0d 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_runtime;
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <_Z14OD_runtime_getv+0x34>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <_Z14OD_runtime_getv+0x30>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f010 ff50 	bl	8017e10 <osMutexRelease>
    return value;
 8006f70:	687b      	ldr	r3, [r7, #4]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000998 	.word	0x20000998
 8006f80:	200008e0 	.word	0x200008e0

08006f84 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <_Z12OD_SdcIn_getv+0x30>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f92:	4618      	mov	r0, r3
 8006f94:	f010 fef1 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <_Z12OD_SdcIn_getv+0x34>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <_Z12OD_SdcIn_getv+0x30>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f010 ff34 	bl	8017e10 <osMutexRelease>
    return value;
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2000099c 	.word	0x2000099c
 8006fb8:	200008e4 	.word	0x200008e4

08006fbc <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <_Z13OD_SdcOut_getv+0x30>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f010 fed5 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <_Z13OD_SdcOut_getv+0x34>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <_Z13OD_SdcOut_getv+0x30>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f010 ff18 	bl	8017e10 <osMutexRelease>
    return value;
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	200009a0 	.word	0x200009a0
 8006ff0:	200008e5 	.word	0x200008e5

08006ff4 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <_Z15OD_ChipUID1_getv+0x38>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8007002:	4618      	mov	r0, r3
 8007004:	f010 feb9 	bl	8017d7a <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <_Z15OD_ChipUID1_getv+0x3c>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8007012:	4b06      	ldr	r3, [pc, #24]	; (800702c <_Z15OD_ChipUID1_getv+0x38>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f010 fefa 	bl	8017e10 <osMutexRelease>
    return value;
 800701c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	200009a4 	.word	0x200009a4
 8007030:	200008e8 	.word	0x200008e8

08007034 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800703a:	4b0c      	ldr	r3, [pc, #48]	; (800706c <_Z15OD_ChipUID2_getv+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f04f 31ff 	mov.w	r1, #4294967295
 8007042:	4618      	mov	r0, r3
 8007044:	f010 fe99 	bl	8017d7a <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8007048:	4b09      	ldr	r3, [pc, #36]	; (8007070 <_Z15OD_ChipUID2_getv+0x3c>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <_Z15OD_ChipUID2_getv+0x38>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f010 feda 	bl	8017e10 <osMutexRelease>
    return value;
 800705c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007060:	4610      	mov	r0, r2
 8007062:	4619      	mov	r1, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	200009a8 	.word	0x200009a8
 8007070:	200008f0 	.word	0x200008f0

08007074 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 800707a:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <_Z16OD_BuildDate_getv+0x30>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f04f 31ff 	mov.w	r1, #4294967295
 8007082:	4618      	mov	r0, r3
 8007084:	f010 fe79 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <_Z16OD_BuildDate_getv+0x34>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <_Z16OD_BuildDate_getv+0x30>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f010 febc 	bl	8017e10 <osMutexRelease>
    return value;
 8007098:	687b      	ldr	r3, [r7, #4]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	200009ac 	.word	0x200009ac
 80070a8:	200008f8 	.word	0x200008f8

080070ac <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80070b2:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <_Z16OD_BuildTime_getv+0x30>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f04f 31ff 	mov.w	r1, #4294967295
 80070ba:	4618      	mov	r0, r3
 80070bc:	f010 fe5d 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <_Z16OD_BuildTime_getv+0x34>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <_Z16OD_BuildTime_getv+0x30>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f010 fea0 	bl	8017e10 <osMutexRelease>
    return value;
 80070d0:	687b      	ldr	r3, [r7, #4]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200009b0 	.word	0x200009b0
 80070e0:	200008fc 	.word	0x200008fc

080070e4 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f04f 31ff 	mov.w	r1, #4294967295
 80070f2:	4618      	mov	r0, r3
 80070f4:	f010 fe41 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f010 fe84 	bl	8017e10 <osMutexRelease>
    return value;
 8007108:	79fb      	ldrb	r3, [r7, #7]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200009b4 	.word	0x200009b4
 8007118:	20000900 	.word	0x20000900

0800711c <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f04f 31ff 	mov.w	r1, #4294967295
 800712a:	4618      	mov	r0, r3
 800712c:	f010 fe25 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f010 fe68 	bl	8017e10 <osMutexRelease>
    return value;
 8007140:	79fb      	ldrb	r3, [r7, #7]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200009b8 	.word	0x200009b8
 8007150:	20000901 	.word	0x20000901

08007154 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800715a:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f04f 31ff 	mov.w	r1, #4294967295
 8007162:	4618      	mov	r0, r3
 8007164:	f010 fe09 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8007168:	4b07      	ldr	r3, [pc, #28]	; (8007188 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f010 fe4c 	bl	8017e10 <osMutexRelease>
    return value;
 8007178:	687b      	ldr	r3, [r7, #4]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200009bc 	.word	0x200009bc
 8007188:	20000904 	.word	0x20000904

0800718c <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f04f 31ff 	mov.w	r1, #4294967295
 800719a:	4618      	mov	r0, r3
 800719c:	f010 fded 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80071a0:	4b07      	ldr	r3, [pc, #28]	; (80071c0 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80071a6:	4b05      	ldr	r3, [pc, #20]	; (80071bc <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f010 fe30 	bl	8017e10 <osMutexRelease>
    return value;
 80071b0:	79fb      	ldrb	r3, [r7, #7]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200009c0 	.word	0x200009c0
 80071c0:	20000006 	.word	0x20000006

080071c4 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f04f 31ff 	mov.w	r1, #4294967295
 80071d6:	4618      	mov	r0, r3
 80071d8:	f010 fdcf 	bl	8017d7a <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 80071dc:	4a06      	ldr	r2, [pc, #24]	; (80071f8 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80071e2:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f010 fe12 	bl	8017e10 <osMutexRelease>
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	200009c0 	.word	0x200009c0
 80071f8:	20000006 	.word	0x20000006

080071fc <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f04f 31ff 	mov.w	r1, #4294967295
 800720a:	4618      	mov	r0, r3
 800720c:	f010 fdb5 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f010 fdf8 	bl	8017e10 <osMutexRelease>
    return value;
 8007220:	88fb      	ldrh	r3, [r7, #6]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	200009c4 	.word	0x200009c4
 8007230:	20000008 	.word	0x20000008

08007234 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f04f 31ff 	mov.w	r1, #4294967295
 8007246:	4618      	mov	r0, r3
 8007248:	f010 fd97 	bl	8017d7a <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 800724c:	4a06      	ldr	r2, [pc, #24]	; (8007268 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f010 fdda 	bl	8017e10 <osMutexRelease>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200009c4 	.word	0x200009c4
 8007268:	20000008 	.word	0x20000008

0800726c <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8007272:	4b0a      	ldr	r3, [pc, #40]	; (800729c <_Z18OD_CAN1_Status_getv+0x30>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f04f 31ff 	mov.w	r1, #4294967295
 800727a:	4618      	mov	r0, r3
 800727c:	f010 fd7d 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <_Z18OD_CAN1_Status_getv+0x34>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <_Z18OD_CAN1_Status_getv+0x30>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f010 fdc0 	bl	8017e10 <osMutexRelease>
    return value;
 8007290:	79fb      	ldrb	r3, [r7, #7]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200009c8 	.word	0x200009c8
 80072a0:	20000908 	.word	0x20000908

080072a4 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f04f 31ff 	mov.w	r1, #4294967295
 80072b2:	4618      	mov	r0, r3
 80072b4:	f010 fd61 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80072b8:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f010 fda4 	bl	8017e10 <osMutexRelease>
    return value;
 80072c8:	687b      	ldr	r3, [r7, #4]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	200009cc 	.word	0x200009cc
 80072d8:	2000090c 	.word	0x2000090c

080072dc <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 80072e2:	4b0a      	ldr	r3, [pc, #40]	; (800730c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f04f 31ff 	mov.w	r1, #4294967295
 80072ea:	4618      	mov	r0, r3
 80072ec:	f010 fd45 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f010 fd88 	bl	8017e10 <osMutexRelease>
    return value;
 8007300:	79fb      	ldrb	r3, [r7, #7]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200009d0 	.word	0x200009d0
 8007310:	20000910 	.word	0x20000910

08007314 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800731a:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f04f 31ff 	mov.w	r1, #4294967295
 8007322:	4618      	mov	r0, r3
 8007324:	f010 fd29 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 800732e:	4b05      	ldr	r3, [pc, #20]	; (8007344 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f010 fd6c 	bl	8017e10 <osMutexRelease>
    return value;
 8007338:	687b      	ldr	r3, [r7, #4]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200009d4 	.word	0x200009d4
 8007348:	20000914 	.word	0x20000914

0800734c <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f04f 31ff 	mov.w	r1, #4294967295
 800735a:	4618      	mov	r0, r3
 800735c:	f010 fd0d 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f010 fd50 	bl	8017e10 <osMutexRelease>
    return value;
 8007370:	79fb      	ldrb	r3, [r7, #7]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200009d8 	.word	0x200009d8
 8007380:	20000918 	.word	0x20000918

08007384 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f04f 31ff 	mov.w	r1, #4294967295
 8007392:	4618      	mov	r0, r3
 8007394:	f010 fcf1 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f010 fd34 	bl	8017e10 <osMutexRelease>
    return value;
 80073a8:	79fb      	ldrb	r3, [r7, #7]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200009dc 	.word	0x200009dc
 80073b8:	20000919 	.word	0x20000919

080073bc <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f04f 31ff 	mov.w	r1, #4294967295
 80073ca:	4618      	mov	r0, r3
 80073cc:	f010 fcd5 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f010 fd18 	bl	8017e10 <osMutexRelease>
    return value;
 80073e0:	687b      	ldr	r3, [r7, #4]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200009e0 	.word	0x200009e0
 80073f0:	2000091c 	.word	0x2000091c

080073f4 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80073fa:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007402:	4618      	mov	r0, r3
 8007404:	f010 fcb9 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	f010 fcfc 	bl	8017e10 <osMutexRelease>
    return value;
 8007418:	79fb      	ldrb	r3, [r7, #7]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200009e4 	.word	0x200009e4
 8007428:	2000000a 	.word	0x2000000a

0800742c <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f04f 31ff 	mov.w	r1, #4294967295
 800743e:	4618      	mov	r0, r3
 8007440:	f010 fc9b 	bl	8017d7a <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8007444:	4a06      	ldr	r2, [pc, #24]	; (8007460 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800744a:	4b04      	ldr	r3, [pc, #16]	; (800745c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f010 fcde 	bl	8017e10 <osMutexRelease>
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	200009e4 	.word	0x200009e4
 8007460:	2000000a 	.word	0x2000000a

08007464 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f04f 31ff 	mov.w	r1, #4294967295
 8007472:	4618      	mov	r0, r3
 8007474:	f010 fc81 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f010 fcc4 	bl	8017e10 <osMutexRelease>
    return value;
 8007488:	88fb      	ldrh	r3, [r7, #6]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200009e8 	.word	0x200009e8
 8007498:	2000000c 	.word	0x2000000c

0800749c <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f04f 31ff 	mov.w	r1, #4294967295
 80074ae:	4618      	mov	r0, r3
 80074b0:	f010 fc63 	bl	8017d7a <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 80074b4:	4a06      	ldr	r2, [pc, #24]	; (80074d0 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 80074b6:	88fb      	ldrh	r3, [r7, #6]
 80074b8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f010 fca6 	bl	8017e10 <osMutexRelease>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	200009e8 	.word	0x200009e8
 80074d0:	2000000c 	.word	0x2000000c

080074d4 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <_Z18OD_CAN2_Status_getv+0x30>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f04f 31ff 	mov.w	r1, #4294967295
 80074e2:	4618      	mov	r0, r3
 80074e4:	f010 fc49 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <_Z18OD_CAN2_Status_getv+0x34>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 80074ee:	4b05      	ldr	r3, [pc, #20]	; (8007504 <_Z18OD_CAN2_Status_getv+0x30>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f010 fc8c 	bl	8017e10 <osMutexRelease>
    return value;
 80074f8:	79fb      	ldrb	r3, [r7, #7]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200009ec 	.word	0x200009ec
 8007508:	20000920 	.word	0x20000920

0800750c <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f04f 31ff 	mov.w	r1, #4294967295
 800751a:	4618      	mov	r0, r3
 800751c:	f010 fc2d 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f010 fc70 	bl	8017e10 <osMutexRelease>
    return value;
 8007530:	687b      	ldr	r3, [r7, #4]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200009f0 	.word	0x200009f0
 8007540:	20000924 	.word	0x20000924

08007544 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f04f 31ff 	mov.w	r1, #4294967295
 8007552:	4618      	mov	r0, r3
 8007554:	f010 fc11 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8007558:	4b07      	ldr	r3, [pc, #28]	; (8007578 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f010 fc54 	bl	8017e10 <osMutexRelease>
    return value;
 8007568:	79fb      	ldrb	r3, [r7, #7]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	200009f4 	.word	0x200009f4
 8007578:	20000928 	.word	0x20000928

0800757c <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f04f 31ff 	mov.w	r1, #4294967295
 800758a:	4618      	mov	r0, r3
 800758c:	f010 fbf5 	bl	8017d7a <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8007596:	4b05      	ldr	r3, [pc, #20]	; (80075ac <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f010 fc38 	bl	8017e10 <osMutexRelease>
    return value;
 80075a0:	687b      	ldr	r3, [r7, #4]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200009f8 	.word	0x200009f8
 80075b0:	2000092c 	.word	0x2000092c

080075b4 <_Z23OD_samplingInterval_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_samplingInterval_GET_OVERWRITE
float WEAK_SYMBOL OD_samplingInterval_get() {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <_Z23OD_samplingInterval_getv+0x34>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f04f 31ff 	mov.w	r1, #4294967295
 80075c2:	4618      	mov	r0, r3
 80075c4:	f010 fbd9 	bl	8017d7a <osMutexAcquire>
    float value = OD_samplingInterval;
 80075c8:	4b08      	ldr	r3, [pc, #32]	; (80075ec <_Z23OD_samplingInterval_getv+0x38>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_samplingInterval);
 80075ce:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <_Z23OD_samplingInterval_getv+0x34>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f010 fc1c 	bl	8017e10 <osMutexRelease>
    return value;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	ee07 3a90 	vmov	s15, r3
}
 80075de:	eeb0 0a67 	vmov.f32	s0, s15
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200009fc 	.word	0x200009fc
 80075ec:	20000010 	.word	0x20000010

080075f0 <_Z23OD_samplingInterval_setf>:
#endif
#ifndef OD_samplingInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_samplingInterval_set(const float value) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <_Z23OD_samplingInterval_setf+0x30>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007602:	4618      	mov	r0, r3
 8007604:	f010 fbb9 	bl	8017d7a <osMutexAcquire>
    OD_samplingInterval = value;
 8007608:	4a06      	ldr	r2, [pc, #24]	; (8007624 <_Z23OD_samplingInterval_setf+0x34>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_samplingInterval);
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <_Z23OD_samplingInterval_setf+0x30>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f010 fbfc 	bl	8017e10 <osMutexRelease>
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200009fc 	.word	0x200009fc
 8007624:	20000010 	.word	0x20000010

08007628 <_Z24OD_TelemetryCommands_getv>:
#endif

#ifndef OD_TelemetryCommands_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_TelemetryCommands_get() {
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 800762e:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <_Z24OD_TelemetryCommands_getv+0x30>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f04f 31ff 	mov.w	r1, #4294967295
 8007636:	4618      	mov	r0, r3
 8007638:	f010 fb9f 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_TelemetryCommands;
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <_Z24OD_TelemetryCommands_getv+0x34>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8007642:	4b05      	ldr	r3, [pc, #20]	; (8007658 <_Z24OD_TelemetryCommands_getv+0x30>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f010 fbe2 	bl	8017e10 <osMutexRelease>
    return value;
 800764c:	79fb      	ldrb	r3, [r7, #7]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000a00 	.word	0x20000a00
 800765c:	20000930 	.word	0x20000930

08007660 <_Z24OD_TelemetryCommands_seth>:
#endif
#ifndef OD_TelemetryCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_TelemetryCommands_set(const uint8_t value) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <_Z24OD_TelemetryCommands_seth+0x30>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f04f 31ff 	mov.w	r1, #4294967295
 8007672:	4618      	mov	r0, r3
 8007674:	f010 fb81 	bl	8017d7a <osMutexAcquire>
    OD_TelemetryCommands = value;
 8007678:	4a06      	ldr	r2, [pc, #24]	; (8007694 <_Z24OD_TelemetryCommands_seth+0x34>)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_TelemetryCommands);
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <_Z24OD_TelemetryCommands_seth+0x30>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f010 fbc4 	bl	8017e10 <osMutexRelease>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000a00 	.word	0x20000a00
 8007694:	20000930 	.word	0x20000930

08007698 <_Z27OD_StateMachineInterval_getv>:
#endif

#ifndef OD_StateMachineInterval_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineInterval_get() {
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 800769e:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <_Z27OD_StateMachineInterval_getv+0x30>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f04f 31ff 	mov.w	r1, #4294967295
 80076a6:	4618      	mov	r0, r3
 80076a8:	f010 fb67 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_StateMachineInterval;
 80076ac:	4b07      	ldr	r3, [pc, #28]	; (80076cc <_Z27OD_StateMachineInterval_getv+0x34>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineInterval);
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <_Z27OD_StateMachineInterval_getv+0x30>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f010 fbaa 	bl	8017e10 <osMutexRelease>
    return value;
 80076bc:	79fb      	ldrb	r3, [r7, #7]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000a04 	.word	0x20000a04
 80076cc:	20000014 	.word	0x20000014

080076d0 <_Z27OD_StateMachineInterval_seth>:
#endif
#ifndef OD_StateMachineInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineInterval_set(const uint8_t value) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <_Z27OD_StateMachineInterval_seth+0x30>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f04f 31ff 	mov.w	r1, #4294967295
 80076e2:	4618      	mov	r0, r3
 80076e4:	f010 fb49 	bl	8017d7a <osMutexAcquire>
    OD_StateMachineInterval = value;
 80076e8:	4a06      	ldr	r2, [pc, #24]	; (8007704 <_Z27OD_StateMachineInterval_seth+0x34>)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineInterval);
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <_Z27OD_StateMachineInterval_seth+0x30>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f010 fb8c 	bl	8017e10 <osMutexRelease>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000a04 	.word	0x20000a04
 8007704:	20000014 	.word	0x20000014

08007708 <_Z27OD_StateMachineActivate_getv>:
#endif

#ifndef OD_StateMachineActivate_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineActivate_get() {
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <_Z27OD_StateMachineActivate_getv+0x30>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f04f 31ff 	mov.w	r1, #4294967295
 8007716:	4618      	mov	r0, r3
 8007718:	f010 fb2f 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_StateMachineActivate;
 800771c:	4b07      	ldr	r3, [pc, #28]	; (800773c <_Z27OD_StateMachineActivate_getv+0x34>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <_Z27OD_StateMachineActivate_getv+0x30>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f010 fb72 	bl	8017e10 <osMutexRelease>
    return value;
 800772c:	79fb      	ldrb	r3, [r7, #7]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000a08 	.word	0x20000a08
 800773c:	20000931 	.word	0x20000931

08007740 <_Z27OD_StateMachineActivate_seth>:
#endif
#ifndef OD_StateMachineActivate_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineActivate_set(const uint8_t value) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <_Z27OD_StateMachineActivate_seth+0x30>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f04f 31ff 	mov.w	r1, #4294967295
 8007752:	4618      	mov	r0, r3
 8007754:	f010 fb11 	bl	8017d7a <osMutexAcquire>
    OD_StateMachineActivate = value;
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <_Z27OD_StateMachineActivate_seth+0x34>)
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineActivate);
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <_Z27OD_StateMachineActivate_seth+0x30>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f010 fb54 	bl	8017e10 <osMutexRelease>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000a08 	.word	0x20000a08
 8007774:	20000931 	.word	0x20000931

08007778 <_Z20OD_HVBatteryMode_getv>:
#endif

#ifndef OD_HVBatteryMode_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_HVBatteryMode_get() {
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 800777e:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <_Z20OD_HVBatteryMode_getv+0x30>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f04f 31ff 	mov.w	r1, #4294967295
 8007786:	4618      	mov	r0, r3
 8007788:	f010 faf7 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_HVBatteryMode;
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <_Z20OD_HVBatteryMode_getv+0x34>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <_Z20OD_HVBatteryMode_getv+0x30>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f010 fb3a 	bl	8017e10 <osMutexRelease>
    return value;
 800779c:	79fb      	ldrb	r3, [r7, #7]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000a0c 	.word	0x20000a0c
 80077ac:	20000932 	.word	0x20000932

080077b0 <_Z20OD_HVBatteryMode_seth>:
#endif
#ifndef OD_HVBatteryMode_SET_OVERWRITE
void WEAK_SYMBOL OD_HVBatteryMode_set(const uint8_t value) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <_Z20OD_HVBatteryMode_seth+0x30>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f04f 31ff 	mov.w	r1, #4294967295
 80077c2:	4618      	mov	r0, r3
 80077c4:	f010 fad9 	bl	8017d7a <osMutexAcquire>
    OD_HVBatteryMode = value;
 80077c8:	4a06      	ldr	r2, [pc, #24]	; (80077e4 <_Z20OD_HVBatteryMode_seth+0x34>)
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_HVBatteryMode);
 80077ce:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <_Z20OD_HVBatteryMode_seth+0x30>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f010 fb1c 	bl	8017e10 <osMutexRelease>
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000a0c 	.word	0x20000a0c
 80077e4:	20000932 	.word	0x20000932

080077e8 <_Z27OD_EncoderWheelDiameter_getv>:
#endif

#ifndef OD_EncoderWheelDiameter_GET_OVERWRITE
float WEAK_SYMBOL OD_EncoderWheelDiameter_get() {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f04f 31ff 	mov.w	r1, #4294967295
 80077f6:	4618      	mov	r0, r3
 80077f8:	f010 fabf 	bl	8017d7a <osMutexAcquire>
    float value = OD_EncoderWheelDiameter;
 80077fc:	4b08      	ldr	r3, [pc, #32]	; (8007820 <_Z27OD_EncoderWheelDiameter_getv+0x38>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8007802:	4b06      	ldr	r3, [pc, #24]	; (800781c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f010 fb02 	bl	8017e10 <osMutexRelease>
    return value;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	ee07 3a90 	vmov	s15, r3
}
 8007812:	eeb0 0a67 	vmov.f32	s0, s15
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000a10 	.word	0x20000a10
 8007820:	20000018 	.word	0x20000018

08007824 <_Z27OD_EncoderWheelDiameter_setf>:
#endif
#ifndef OD_EncoderWheelDiameter_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderWheelDiameter_set(const float value) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f04f 31ff 	mov.w	r1, #4294967295
 8007836:	4618      	mov	r0, r3
 8007838:	f010 fa9f 	bl	8017d7a <osMutexAcquire>
    OD_EncoderWheelDiameter = value;
 800783c:	4a06      	ldr	r2, [pc, #24]	; (8007858 <_Z27OD_EncoderWheelDiameter_setf+0x34>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8007842:	4b04      	ldr	r3, [pc, #16]	; (8007854 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f010 fae2 	bl	8017e10 <osMutexRelease>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000a10 	.word	0x20000a10
 8007858:	20000018 	.word	0x20000018

0800785c <_Z27OD_EncoderResetPosition_seth>:
    osMutexRelease(mutex_OD_EncoderResetPosition);
    return value;
}
#endif
#ifndef OD_EncoderResetPosition_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderResetPosition_set(const uint8_t value) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_EncoderResetPosition, portMAX_DELAY);
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <_Z27OD_EncoderResetPosition_seth+0x30>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f04f 31ff 	mov.w	r1, #4294967295
 800786e:	4618      	mov	r0, r3
 8007870:	f010 fa83 	bl	8017d7a <osMutexAcquire>
    OD_EncoderResetPosition = value;
 8007874:	4a06      	ldr	r2, [pc, #24]	; (8007890 <_Z27OD_EncoderResetPosition_seth+0x34>)
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderResetPosition);
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <_Z27OD_EncoderResetPosition_seth+0x30>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f010 fac6 	bl	8017e10 <osMutexRelease>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000a14 	.word	0x20000a14
 8007890:	20000933 	.word	0x20000933

08007894 <_Z15OD_SetReset_seth>:
    osMutexRelease(mutex_OD_SetReset);
    return value;
}
#endif
#ifndef OD_SetReset_SET_OVERWRITE
void WEAK_SYMBOL OD_SetReset_set(const uint8_t value) {
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SetReset, portMAX_DELAY);
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <_Z15OD_SetReset_seth+0x30>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f04f 31ff 	mov.w	r1, #4294967295
 80078a6:	4618      	mov	r0, r3
 80078a8:	f010 fa67 	bl	8017d7a <osMutexAcquire>
    OD_SetReset = value;
 80078ac:	4a06      	ldr	r2, [pc, #24]	; (80078c8 <_Z15OD_SetReset_seth+0x34>)
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SetReset);
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <_Z15OD_SetReset_seth+0x30>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f010 faaa 	bl	8017e10 <osMutexRelease>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000a18 	.word	0x20000a18
 80078c8:	20000934 	.word	0x20000934

080078cc <_Z17OD_IMU_number_getv>:
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <_Z17OD_IMU_number_getv+0x30>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f04f 31ff 	mov.w	r1, #4294967295
 80078da:	4618      	mov	r0, r3
 80078dc:	f010 fa4d 	bl	8017d7a <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <_Z17OD_IMU_number_getv+0x34>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 80078e6:	4b05      	ldr	r3, [pc, #20]	; (80078fc <_Z17OD_IMU_number_getv+0x30>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f010 fa90 	bl	8017e10 <osMutexRelease>
    return value;
 80078f0:	79fb      	ldrb	r3, [r7, #7]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000a1c 	.word	0x20000a1c
 8007900:	20000935 	.word	0x20000935

08007904 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <_Z23OD_IMU1_Temperature_getv+0x34>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f04f 31ff 	mov.w	r1, #4294967295
 8007912:	4618      	mov	r0, r3
 8007914:	f010 fa31 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <_Z23OD_IMU1_Temperature_getv+0x38>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <_Z23OD_IMU1_Temperature_getv+0x34>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f010 fa74 	bl	8017e10 <osMutexRelease>
    return value;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	ee07 3a90 	vmov	s15, r3
}
 800792e:	eeb0 0a67 	vmov.f32	s0, s15
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	20000a20 	.word	0x20000a20
 800793c:	20000938 	.word	0x20000938

08007940 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f04f 31ff 	mov.w	r1, #4294967295
 800794e:	4618      	mov	r0, r3
 8007950:	f010 fa13 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8007954:	4b08      	ldr	r3, [pc, #32]	; (8007978 <_Z23OD_IMU2_Temperature_getv+0x38>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <_Z23OD_IMU2_Temperature_getv+0x34>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f010 fa56 	bl	8017e10 <osMutexRelease>
    return value;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	ee07 3a90 	vmov	s15, r3
}
 800796a:	eeb0 0a67 	vmov.f32	s0, s15
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	20000a24 	.word	0x20000a24
 8007978:	2000093c 	.word	0x2000093c

0800797c <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 8007982:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f04f 31ff 	mov.w	r1, #4294967295
 800798a:	4618      	mov	r0, r3
 800798c:	f010 f9f5 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8007990:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <_Z23OD_IMU3_Temperature_getv+0x38>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f010 fa38 	bl	8017e10 <osMutexRelease>
    return value;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	ee07 3a90 	vmov	s15, r3
}
 80079a6:	eeb0 0a67 	vmov.f32	s0, s15
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20000a28 	.word	0x20000a28
 80079b4:	20000940 	.word	0x20000940

080079b8 <_Z17OD_IMU_AccelX_getv>:
    osMutexRelease(mutex_OD_IMU3_Temperature);
}
#endif

#ifndef OD_IMU_AccelX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelX_get() {
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 80079be:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <_Z17OD_IMU_AccelX_getv+0x34>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f04f 31ff 	mov.w	r1, #4294967295
 80079c6:	4618      	mov	r0, r3
 80079c8:	f010 f9d7 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_AccelX;
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <_Z17OD_IMU_AccelX_getv+0x38>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelX);
 80079d2:	4b06      	ldr	r3, [pc, #24]	; (80079ec <_Z17OD_IMU_AccelX_getv+0x34>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f010 fa1a 	bl	8017e10 <osMutexRelease>
    return value;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	ee07 3a90 	vmov	s15, r3
}
 80079e2:	eeb0 0a67 	vmov.f32	s0, s15
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000a2c 	.word	0x20000a2c
 80079f0:	20000944 	.word	0x20000944

080079f4 <_Z17OD_IMU_AccelX_setf>:
#endif
#ifndef OD_IMU_AccelX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelX_set(const float value) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f04f 31ff 	mov.w	r1, #4294967295
 8007a06:	4618      	mov	r0, r3
 8007a08:	f010 f9b7 	bl	8017d7a <osMutexAcquire>
    OD_IMU_AccelX = value;
 8007a0c:	4a06      	ldr	r2, [pc, #24]	; (8007a28 <_Z17OD_IMU_AccelX_setf+0x34>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelX);
 8007a12:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f010 f9fa 	bl	8017e10 <osMutexRelease>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000a2c 	.word	0x20000a2c
 8007a28:	20000944 	.word	0x20000944

08007a2c <_Z17OD_IMU_AccelY_getv>:
#endif

#ifndef OD_IMU_AccelY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelY_get() {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8007a32:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <_Z17OD_IMU_AccelY_getv+0x34>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f04f 31ff 	mov.w	r1, #4294967295
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f010 f99d 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_AccelY;
 8007a40:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <_Z17OD_IMU_AccelY_getv+0x38>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelY);
 8007a46:	4b06      	ldr	r3, [pc, #24]	; (8007a60 <_Z17OD_IMU_AccelY_getv+0x34>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f010 f9e0 	bl	8017e10 <osMutexRelease>
    return value;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	ee07 3a90 	vmov	s15, r3
}
 8007a56:	eeb0 0a67 	vmov.f32	s0, s15
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000a30 	.word	0x20000a30
 8007a64:	20000948 	.word	0x20000948

08007a68 <_Z17OD_IMU_AccelY_setf>:
#endif
#ifndef OD_IMU_AccelY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelY_set(const float value) {
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <_Z17OD_IMU_AccelY_setf+0x30>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f04f 31ff 	mov.w	r1, #4294967295
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f010 f97d 	bl	8017d7a <osMutexAcquire>
    OD_IMU_AccelY = value;
 8007a80:	4a06      	ldr	r2, [pc, #24]	; (8007a9c <_Z17OD_IMU_AccelY_setf+0x34>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelY);
 8007a86:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <_Z17OD_IMU_AccelY_setf+0x30>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f010 f9c0 	bl	8017e10 <osMutexRelease>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20000a30 	.word	0x20000a30
 8007a9c:	20000948 	.word	0x20000948

08007aa0 <_Z17OD_IMU_AccelZ_getv>:
#endif

#ifndef OD_IMU_AccelZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelZ_get() {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <_Z17OD_IMU_AccelZ_getv+0x34>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f010 f963 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_AccelZ;
 8007ab4:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <_Z17OD_IMU_AccelZ_getv+0x38>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <_Z17OD_IMU_AccelZ_getv+0x34>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f010 f9a6 	bl	8017e10 <osMutexRelease>
    return value;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	ee07 3a90 	vmov	s15, r3
}
 8007aca:	eeb0 0a67 	vmov.f32	s0, s15
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000a34 	.word	0x20000a34
 8007ad8:	2000094c 	.word	0x2000094c

08007adc <_Z17OD_IMU_AccelZ_setf>:
#endif
#ifndef OD_IMU_AccelZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelZ_set(const float value) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <_Z17OD_IMU_AccelZ_setf+0x30>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f04f 31ff 	mov.w	r1, #4294967295
 8007aee:	4618      	mov	r0, r3
 8007af0:	f010 f943 	bl	8017d7a <osMutexAcquire>
    OD_IMU_AccelZ = value;
 8007af4:	4a06      	ldr	r2, [pc, #24]	; (8007b10 <_Z17OD_IMU_AccelZ_setf+0x34>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 8007afa:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <_Z17OD_IMU_AccelZ_setf+0x30>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f010 f986 	bl	8017e10 <osMutexRelease>
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000a34 	.word	0x20000a34
 8007b10:	2000094c 	.word	0x2000094c

08007b14 <_Z16OD_IMU_GyroX_getv>:
#endif

#ifndef OD_IMU_GyroX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroX_get() {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <_Z16OD_IMU_GyroX_getv+0x34>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8007b22:	4618      	mov	r0, r3
 8007b24:	f010 f929 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_GyroX;
 8007b28:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <_Z16OD_IMU_GyroX_getv+0x38>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroX);
 8007b2e:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <_Z16OD_IMU_GyroX_getv+0x34>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f010 f96c 	bl	8017e10 <osMutexRelease>
    return value;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	ee07 3a90 	vmov	s15, r3
}
 8007b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000a38 	.word	0x20000a38
 8007b4c:	20000950 	.word	0x20000950

08007b50 <_Z16OD_IMU_GyroX_setf>:
#endif
#ifndef OD_IMU_GyroX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroX_set(const float value) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <_Z16OD_IMU_GyroX_setf+0x30>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007b62:	4618      	mov	r0, r3
 8007b64:	f010 f909 	bl	8017d7a <osMutexAcquire>
    OD_IMU_GyroX = value;
 8007b68:	4a06      	ldr	r2, [pc, #24]	; (8007b84 <_Z16OD_IMU_GyroX_setf+0x34>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroX);
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <_Z16OD_IMU_GyroX_setf+0x30>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f010 f94c 	bl	8017e10 <osMutexRelease>
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000a38 	.word	0x20000a38
 8007b84:	20000950 	.word	0x20000950

08007b88 <_Z16OD_IMU_GyroY_getv>:
#endif

#ifndef OD_IMU_GyroY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroY_get() {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <_Z16OD_IMU_GyroY_getv+0x34>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f04f 31ff 	mov.w	r1, #4294967295
 8007b96:	4618      	mov	r0, r3
 8007b98:	f010 f8ef 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_GyroY;
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <_Z16OD_IMU_GyroY_getv+0x38>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroY);
 8007ba2:	4b06      	ldr	r3, [pc, #24]	; (8007bbc <_Z16OD_IMU_GyroY_getv+0x34>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f010 f932 	bl	8017e10 <osMutexRelease>
    return value;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	ee07 3a90 	vmov	s15, r3
}
 8007bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000a3c 	.word	0x20000a3c
 8007bc0:	20000954 	.word	0x20000954

08007bc4 <_Z16OD_IMU_GyroY_setf>:
#endif
#ifndef OD_IMU_GyroY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroY_set(const float value) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_Z16OD_IMU_GyroY_setf+0x30>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f010 f8cf 	bl	8017d7a <osMutexAcquire>
    OD_IMU_GyroY = value;
 8007bdc:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <_Z16OD_IMU_GyroY_setf+0x34>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroY);
 8007be2:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <_Z16OD_IMU_GyroY_setf+0x30>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f010 f912 	bl	8017e10 <osMutexRelease>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20000a3c 	.word	0x20000a3c
 8007bf8:	20000954 	.word	0x20000954

08007bfc <_Z16OD_IMU_GyroZ_getv>:
#endif

#ifndef OD_IMU_GyroZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroZ_get() {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f04f 31ff 	mov.w	r1, #4294967295
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f010 f8b5 	bl	8017d7a <osMutexAcquire>
    float value = OD_IMU_GyroZ;
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <_Z16OD_IMU_GyroZ_getv+0x38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 8007c16:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f010 f8f8 	bl	8017e10 <osMutexRelease>
    return value;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	ee07 3a90 	vmov	s15, r3
}
 8007c26:	eeb0 0a67 	vmov.f32	s0, s15
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20000a40 	.word	0x20000a40
 8007c34:	20000958 	.word	0x20000958

08007c38 <_Z16OD_IMU_GyroZ_setf>:
#endif
#ifndef OD_IMU_GyroZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroZ_set(const float value) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <_Z16OD_IMU_GyroZ_setf+0x30>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f04f 31ff 	mov.w	r1, #4294967295
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f010 f895 	bl	8017d7a <osMutexAcquire>
    OD_IMU_GyroZ = value;
 8007c50:	4a06      	ldr	r2, [pc, #24]	; (8007c6c <_Z16OD_IMU_GyroZ_setf+0x34>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 8007c56:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <_Z16OD_IMU_GyroZ_setf+0x30>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f010 f8d8 	bl	8017e10 <osMutexRelease>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000a40 	.word	0x20000a40
 8007c6c:	20000958 	.word	0x20000958

08007c70 <_Z22OD_CoolingPressure_getv>:
#endif

#ifndef OD_CoolingPressure_GET_OVERWRITE
float WEAK_SYMBOL OD_CoolingPressure_get() {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <_Z22OD_CoolingPressure_getv+0x34>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f010 f87b 	bl	8017d7a <osMutexAcquire>
    float value = OD_CoolingPressure;
 8007c84:	4b08      	ldr	r3, [pc, #32]	; (8007ca8 <_Z22OD_CoolingPressure_getv+0x38>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CoolingPressure);
 8007c8a:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <_Z22OD_CoolingPressure_getv+0x34>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f010 f8be 	bl	8017e10 <osMutexRelease>
    return value;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	ee07 3a90 	vmov	s15, r3
}
 8007c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000a44 	.word	0x20000a44
 8007ca8:	2000001c 	.word	0x2000001c

08007cac <_Z22OD_CoolingPressure_setf>:
#endif
#ifndef OD_CoolingPressure_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPressure_set(const float value) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <_Z22OD_CoolingPressure_setf+0x30>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f04f 31ff 	mov.w	r1, #4294967295
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f010 f85b 	bl	8017d7a <osMutexAcquire>
    OD_CoolingPressure = value;
 8007cc4:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <_Z22OD_CoolingPressure_setf+0x34>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPressure);
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <_Z22OD_CoolingPressure_setf+0x30>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f010 f89e 	bl	8017e10 <osMutexRelease>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20000a44 	.word	0x20000a44
 8007ce0:	2000001c 	.word	0x2000001c

08007ce4 <_Z27OD_FiducialRightCounter_getv>:
#endif

#ifndef OD_FiducialRightCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialRightCounter_get() {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <_Z27OD_FiducialRightCounter_getv+0x30>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f04f 31ff 	mov.w	r1, #4294967295
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f010 f841 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_FiducialRightCounter;
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <_Z27OD_FiducialRightCounter_getv+0x34>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <_Z27OD_FiducialRightCounter_getv+0x30>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f010 f884 	bl	8017e10 <osMutexRelease>
    return value;
 8007d08:	88fb      	ldrh	r3, [r7, #6]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000a48 	.word	0x20000a48
 8007d18:	2000095c 	.word	0x2000095c

08007d1c <_Z27OD_FiducialRightCounter_sett>:
#endif
#ifndef OD_FiducialRightCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialRightCounter_set(const uint16_t value) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <_Z27OD_FiducialRightCounter_sett+0x30>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f010 f823 	bl	8017d7a <osMutexAcquire>
    OD_FiducialRightCounter = value;
 8007d34:	4a06      	ldr	r2, [pc, #24]	; (8007d50 <_Z27OD_FiducialRightCounter_sett+0x34>)
 8007d36:	88fb      	ldrh	r3, [r7, #6]
 8007d38:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 8007d3a:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <_Z27OD_FiducialRightCounter_sett+0x30>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f010 f866 	bl	8017e10 <osMutexRelease>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000a48 	.word	0x20000a48
 8007d50:	2000095c 	.word	0x2000095c

08007d54 <_Z26OD_FiducialLeftCounter_getv>:
#endif

#ifndef OD_FiducialLeftCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialLeftCounter_get() {
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007d62:	4618      	mov	r0, r3
 8007d64:	f010 f809 	bl	8017d7a <osMutexAcquire>
    uint16_t value = OD_FiducialLeftCounter;
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <_Z26OD_FiducialLeftCounter_getv+0x34>)
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 8007d6e:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f010 f84c 	bl	8017e10 <osMutexRelease>
    return value;
 8007d78:	88fb      	ldrh	r3, [r7, #6]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000a4c 	.word	0x20000a4c
 8007d88:	2000095e 	.word	0x2000095e

08007d8c <_Z26OD_FiducialLeftCounter_sett>:
#endif
#ifndef OD_FiducialLeftCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialLeftCounter_set(const uint16_t value) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <_Z26OD_FiducialLeftCounter_sett+0x30>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f00f ffeb 	bl	8017d7a <osMutexAcquire>
    OD_FiducialLeftCounter = value;
 8007da4:	4a06      	ldr	r2, [pc, #24]	; (8007dc0 <_Z26OD_FiducialLeftCounter_sett+0x34>)
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 8007daa:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <_Z26OD_FiducialLeftCounter_sett+0x30>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f010 f82e 	bl	8017e10 <osMutexRelease>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000a4c 	.word	0x20000a4c
 8007dc0:	2000095e 	.word	0x2000095e

08007dc4 <_Z15OD_Position_getv>:
#endif

#ifndef OD_Position_GET_OVERWRITE
float WEAK_SYMBOL OD_Position_get() {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <_Z15OD_Position_getv+0x34>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f04f 31ff 	mov.w	r1, #4294967295
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f00f ffd1 	bl	8017d7a <osMutexAcquire>
    float value = OD_Position;
 8007dd8:	4b08      	ldr	r3, [pc, #32]	; (8007dfc <_Z15OD_Position_getv+0x38>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Position);
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <_Z15OD_Position_getv+0x34>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f010 f814 	bl	8017e10 <osMutexRelease>
    return value;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	ee07 3a90 	vmov	s15, r3
}
 8007dee:	eeb0 0a67 	vmov.f32	s0, s15
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20000a50 	.word	0x20000a50
 8007dfc:	20000960 	.word	0x20000960

08007e00 <_Z15OD_Position_setf>:
#endif
#ifndef OD_Position_SET_OVERWRITE
void WEAK_SYMBOL OD_Position_set(const float value) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <_Z15OD_Position_setf+0x30>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e12:	4618      	mov	r0, r3
 8007e14:	f00f ffb1 	bl	8017d7a <osMutexAcquire>
    OD_Position = value;
 8007e18:	4a06      	ldr	r2, [pc, #24]	; (8007e34 <_Z15OD_Position_setf+0x34>)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Position);
 8007e1e:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <_Z15OD_Position_setf+0x30>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f00f fff4 	bl	8017e10 <osMutexRelease>
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000a50 	.word	0x20000a50
 8007e34:	20000960 	.word	0x20000960

08007e38 <_Z15OD_Velocity_getv>:
#endif

#ifndef OD_Velocity_GET_OVERWRITE
float WEAK_SYMBOL OD_Velocity_get() {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <_Z15OD_Velocity_getv+0x34>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f04f 31ff 	mov.w	r1, #4294967295
 8007e46:	4618      	mov	r0, r3
 8007e48:	f00f ff97 	bl	8017d7a <osMutexAcquire>
    float value = OD_Velocity;
 8007e4c:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <_Z15OD_Velocity_getv+0x38>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Velocity);
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <_Z15OD_Velocity_getv+0x34>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f00f ffda 	bl	8017e10 <osMutexRelease>
    return value;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	ee07 3a90 	vmov	s15, r3
}
 8007e62:	eeb0 0a67 	vmov.f32	s0, s15
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20000a54 	.word	0x20000a54
 8007e70:	20000964 	.word	0x20000964

08007e74 <_Z15OD_Velocity_setf>:
#endif
#ifndef OD_Velocity_SET_OVERWRITE
void WEAK_SYMBOL OD_Velocity_set(const float value) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 8007e7e:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <_Z15OD_Velocity_setf+0x30>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f04f 31ff 	mov.w	r1, #4294967295
 8007e86:	4618      	mov	r0, r3
 8007e88:	f00f ff77 	bl	8017d7a <osMutexAcquire>
    OD_Velocity = value;
 8007e8c:	4a06      	ldr	r2, [pc, #24]	; (8007ea8 <_Z15OD_Velocity_setf+0x34>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Velocity);
 8007e92:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <_Z15OD_Velocity_setf+0x30>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f00f ffba 	bl	8017e10 <osMutexRelease>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000a54 	.word	0x20000a54
 8007ea8:	20000964 	.word	0x20000964

08007eac <_Z17sendOdEntriesTaskPv>:
    0xD00,    0xD01 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 58;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 8007eb4:	f107 030c 	add.w	r3, r7, #12
 8007eb8:	4619      	mov	r1, r3
 8007eba:	481f      	ldr	r0, [pc, #124]	; (8007f38 <_Z17sendOdEntriesTaskPv+0x8c>)
 8007ebc:	f00b fede 	bl	8013c7c <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	4a1a      	ldr	r2, [pc, #104]	; (8007f3c <_Z17sendOdEntriesTaskPv+0x90>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f00f fead 	bl	8017c38 <osDelay>

    uint16_t currentSdoListPos = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 8007ee2:	f7fe ff15 	bl	8006d10 <_Z26OD_OdEntrySendInterval_getv>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 8007eea:	8abb      	ldrh	r3, [r7, #20]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d91d      	bls.n	8007f2c <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 8007ef0:	8afb      	ldrh	r3, [r7, #22]
 8007ef2:	4a13      	ldr	r2, [pc, #76]	; (8007f40 <_Z17sendOdEntriesTaskPv+0x94>)
 8007ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef8:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 8007efa:	8afb      	ldrh	r3, [r7, #22]
 8007efc:	3301      	adds	r3, #1
 8007efe:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	2b39      	cmp	r3, #57	; 0x39
 8007f04:	d901      	bls.n	8007f0a <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 8007f0a:	8a7b      	ldrh	r3, [r7, #18]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fd fa43 	bl	8005398 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 8007f12:	8abb      	ldrh	r3, [r7, #20]
 8007f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f18:	fb02 f303 	mul.w	r3, r2, r3
 8007f1c:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <_Z17sendOdEntriesTaskPv+0x90>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	099b      	lsrs	r3, r3, #6
 8007f24:	4618      	mov	r0, r3
 8007f26:	f00f fe87 	bl	8017c38 <osDelay>
 8007f2a:	e7da      	b.n	8007ee2 <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 8007f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f30:	f00f fe82 	bl	8017c38 <osDelay>
        }
    }
 8007f34:	e7d5      	b.n	8007ee2 <_Z17sendOdEntriesTaskPv+0x36>
 8007f36:	bf00      	nop
 8007f38:	20001318 	.word	0x20001318
 8007f3c:	10624dd3 	.word	0x10624dd3
 8007f40:	0801f97c 	.word	0x0801f97c

08007f44 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 0208 	add.w	r2, r3, #8
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3310      	adds	r3, #16
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fb f81c 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8007f5e:	4603      	mov	r3, r0
        }
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f103 0008 	add.w	r0, r3, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f103 0110 	add.w	r1, r3, #16
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	f7fd f97f 	bl	8005288 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>
        }
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f103 0008 	add.w	r0, r3, #8
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f103 0110 	add.w	r1, r3, #16
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	1d1a      	adds	r2, r3, #4
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	f7fd f937 	bl	8005222 <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>
        }
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f103 0008 	add.w	r0, r3, #8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f103 0110 	add.w	r1, r3, #16
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	887b      	ldrh	r3, [r7, #2]
 8007fda:	f7fd f8f4 	bl	80051c6 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>
        }
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f103 0008 	add.w	r0, r3, #8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 0110 	add.w	r1, r3, #16
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	f7fd f8b1 	bl	800516a <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>
        }
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 0008 	add.w	r0, r3, #8
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f103 0110 	add.w	r1, r3, #16
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	887b      	ldrh	r3, [r7, #2]
 800802e:	f7fd f86e 	bl	800510e <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>
        }
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	460b      	mov	r3, r1
 8008044:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0008 	add.w	r0, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f103 0110 	add.w	r1, r3, #16
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	887b      	ldrh	r3, [r7, #2]
 8008058:	f7fd f807 	bl	800506a <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f103 0008 	add.w	r0, r3, #8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f103 0110 	add.w	r1, r3, #16
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	1d1a      	adds	r2, r3, #4
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f7fc ff9b 	bl	8004fbc <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f103 0008 	add.w	r0, r3, #8
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 0110 	add.w	r1, r3, #16
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	1d1a      	adds	r2, r3, #4
 80080aa:	887b      	ldrh	r3, [r7, #2]
 80080ac:	f7fc ff34 	bl	8004f18 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f103 0008 	add.w	r0, r3, #8
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f103 0110 	add.w	r1, r3, #16
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	ed97 0a00 	vldr	s0, [r7]
 80080d8:	461a      	mov	r2, r3
 80080da:	f7fc febf 	bl	8004e5c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>
        }
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0008 	add.w	r0, r3, #8
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f103 0110 	add.w	r1, r3, #16
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	1d1a      	adds	r2, r3, #4
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f7fc fe73 	bl	8004dec <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>
        }
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0008 	add.w	r0, r3, #8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f103 0110 	add.w	r1, r3, #16
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	ed97 0a00 	vldr	s0, [r7]
 800812e:	461a      	mov	r2, r3
 8008130:	f7fc fdfa 	bl	8004d28 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>
        }
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f103 0008 	add.w	r0, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f103 0110 	add.w	r1, r3, #16
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	ed97 0a00 	vldr	s0, [r7]
 800815c:	461a      	mov	r2, r3
 800815e:	f7fc fd89 	bl	8004c74 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>
        }
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f103 0008 	add.w	r0, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f103 0110 	add.w	r1, r3, #16
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	f7fc fd3b 	bl	8004c00 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>
        }
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f103 0008 	add.w	r0, r3, #8
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 0110 	add.w	r1, r3, #16
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	1d1a      	adds	r2, r3, #4
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f7fc fcf2 	bl	8004b98 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>
        }
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f103 0008 	add.w	r0, r3, #8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f103 0110 	add.w	r1, r3, #16
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	f7fc fca9 	bl	8004b30 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>
        }
 80081de:	bf00      	nop
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80081e6:	b590      	push	{r4, r7, lr}
 80081e8:	b087      	sub	sp, #28
 80081ea:	af02      	add	r7, sp, #8
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f103 0008 	add.w	r0, r3, #8
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f103 0110 	add.w	r1, r3, #16
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1d1c      	adds	r4, r3, #4
 8008202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008206:	e9cd 2300 	strd	r2, r3, [sp]
 800820a:	4622      	mov	r2, r4
 800820c:	f7fc fc57 	bl	8004abe <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>
        }
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	bd90      	pop	{r4, r7, pc}

08008218 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b087      	sub	sp, #28
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f103 0008 	add.w	r0, r3, #8
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f103 0110 	add.w	r1, r3, #16
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	1d1c      	adds	r4, r3, #4
 8008234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008238:	e9cd 2300 	strd	r2, r3, [sp]
 800823c:	4622      	mov	r2, r4
 800823e:	f7fc fc05 	bl	8004a4c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>
        }
 8008242:	bf00      	nop
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bd90      	pop	{r4, r7, pc}

0800824a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f103 0008 	add.w	r0, r3, #8
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f103 0110 	add.w	r1, r3, #16
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f7fc fbb9 	bl	80049dc <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>
        }
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0008 	add.w	r0, r3, #8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f103 0110 	add.w	r1, r3, #16
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	1d1a      	adds	r2, r3, #4
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f7fc fb6b 	bl	8004968 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>
        }
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f103 0008 	add.w	r0, r3, #8
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0110 	add.w	r1, r3, #16
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	1d1a      	adds	r2, r3, #4
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	f7fc fb22 	bl	8004900 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f103 0008 	add.w	r0, r3, #8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f103 0110 	add.w	r1, r3, #16
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	f7fc fad9 	bl	8004898 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 0008 	add.w	r0, r3, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f103 0110 	add.w	r1, r3, #16
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f7fc fa8d 	bl	8004828 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f103 0008 	add.w	r0, r3, #8
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f103 0110 	add.w	r1, r3, #16
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	f7fc fa1c 	bl	8004770 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f103 0008 	add.w	r0, r3, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f103 0110 	add.w	r1, r3, #16
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1d1a      	adds	r2, r3, #4
 800835c:	887b      	ldrh	r3, [r7, #2]
 800835e:	f7fc f9a5 	bl	80046ac <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f103 0008 	add.w	r0, r3, #8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f103 0110 	add.w	r1, r3, #16
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	1d1a      	adds	r2, r3, #4
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	f7fc f95c 	bl	8004644 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>
        }
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f103 0008 	add.w	r0, r3, #8
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f103 0110 	add.w	r1, r3, #16
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	1d1a      	adds	r2, r3, #4
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	f7fc f90e 	bl	80045d0 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f103 0008 	add.w	r0, r3, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f103 0110 	add.w	r1, r3, #16
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1d1a      	adds	r2, r3, #4
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	f7fc f8c5 	bl	8004568 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f103 0008 	add.w	r0, r3, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f103 0110 	add.w	r1, r3, #16
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	1d1a      	adds	r2, r3, #4
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f7fc f877 	bl	80044f4 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f103 0008 	add.w	r0, r3, #8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f103 0110 	add.w	r1, r3, #16
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	1d1a      	adds	r2, r3, #4
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	f7fc f82e 	bl	800448c <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 0008 	add.w	r0, r3, #8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f103 0110 	add.w	r1, r3, #16
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	f7fb ffe5 	bl	8004424 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f103 0008 	add.w	r0, r3, #8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f103 0110 	add.w	r1, r3, #16
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	1d1a      	adds	r2, r3, #4
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f7fb ff99 	bl	80043b4 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f103 0008 	add.w	r0, r3, #8
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f103 0110 	add.w	r1, r3, #16
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	1d1a      	adds	r2, r3, #4
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	f7fb ff28 	bl	80042fc <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f103 0008 	add.w	r0, r3, #8
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f103 0110 	add.w	r1, r3, #16
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	887b      	ldrh	r3, [r7, #2]
 80084d2:	f7fb feb1 	bl	8004238 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f103 0008 	add.w	r0, r3, #8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f103 0110 	add.w	r1, r3, #16
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	1d1a      	adds	r2, r3, #4
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	f7fb fe68 	bl	80041d0 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>
        }
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f103 0008 	add.w	r0, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f103 0110 	add.w	r1, r3, #16
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	1d1a      	adds	r2, r3, #4
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	f7fb fe1a 	bl	800415c <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f103 0008 	add.w	r0, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f103 0110 	add.w	r1, r3, #16
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	1d1a      	adds	r2, r3, #4
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f7fb fdd1 	bl	80040f4 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f103 0008 	add.w	r0, r3, #8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f103 0110 	add.w	r1, r3, #16
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	1d1a      	adds	r2, r3, #4
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	f7fb fd83 	bl	8004080 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f103 0008 	add.w	r0, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f103 0110 	add.w	r1, r3, #16
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3304      	adds	r3, #4
 800859e:	ed97 0a00 	vldr	s0, [r7]
 80085a2:	461a      	mov	r2, r3
 80085a4:	f7fb fcde 	bl	8003f64 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>
        }
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0008 	add.w	r0, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f103 0110 	add.w	r1, r3, #16
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	f7fb fc70 	bl	8003eb2 <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>
        }
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f103 0008 	add.w	r0, r3, #8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f103 0110 	add.w	r1, r3, #16
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	1d1a      	adds	r2, r3, #4
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f7fb fbf6 	bl	8003de8 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>
        }
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f103 0008 	add.w	r0, r3, #8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f103 0110 	add.w	r1, r3, #16
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	f7fb fb86 	bl	8003d32 <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>
        }
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f103 0008 	add.w	r0, r3, #8
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0110 	add.w	r1, r3, #16
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	1d1a      	adds	r2, r3, #4
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	f7fb fb16 	bl	8003c7c <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>
        }
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f103 0008 	add.w	r0, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f103 0110 	add.w	r1, r3, #16
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	ed97 0a00 	vldr	s0, [r7]
 8008678:	461a      	mov	r2, r3
 800867a:	f7fb fa71 	bl	8003b60 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>
        }
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f103 0008 	add.w	r0, r3, #8
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f103 0110 	add.w	r1, r3, #16
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	887b      	ldrh	r3, [r7, #2]
 80086a4:	f7fa fc4f 	bl	8002f46 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
        }
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f103 0008 	add.w	r0, r3, #8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f103 0110 	add.w	r1, r3, #16
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1d1a      	adds	r2, r3, #4
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f7fb f9eb 	bl	8003aa8 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>
        }
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f103 0008 	add.w	r0, r3, #8
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f103 0110 	add.w	r1, r3, #16
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3304      	adds	r3, #4
 80086f6:	ed97 0a00 	vldr	s0, [r7]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f7fb f96e 	bl	80039dc <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f103 0008 	add.w	r0, r3, #8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f103 0110 	add.w	r1, r3, #16
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3304      	adds	r3, #4
 8008724:	ed97 0a00 	vldr	s0, [r7]
 8008728:	461a      	mov	r2, r3
 800872a:	f7fb f8f1 	bl	8003910 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f103 0008 	add.w	r0, r3, #8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f103 0110 	add.w	r1, r3, #16
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	3304      	adds	r3, #4
 8008752:	ed97 0a00 	vldr	s0, [r7]
 8008756:	461a      	mov	r2, r3
 8008758:	f7fb f874 	bl	8003844 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f103 0008 	add.w	r0, r3, #8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f103 0110 	add.w	r1, r3, #16
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3304      	adds	r3, #4
 8008780:	ed97 0a00 	vldr	s0, [r7]
 8008784:	461a      	mov	r2, r3
 8008786:	f7fa fff7 	bl	8003778 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>
        }
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f103 0008 	add.w	r0, r3, #8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f103 0110 	add.w	r1, r3, #16
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3304      	adds	r3, #4
 80087ae:	ed97 0a00 	vldr	s0, [r7]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7fa ff7a 	bl	80036ac <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>
        }
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f103 0008 	add.w	r0, r3, #8
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f103 0110 	add.w	r1, r3, #16
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	ed97 0a00 	vldr	s0, [r7]
 80087e0:	461a      	mov	r2, r3
 80087e2:	f7fa fefd 	bl	80035e0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>
        }
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f103 0008 	add.w	r0, r3, #8
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f103 0110 	add.w	r1, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	3304      	adds	r3, #4
 800880a:	ed97 0a00 	vldr	s0, [r7]
 800880e:	461a      	mov	r2, r3
 8008810:	f7fa fe80 	bl	8003514 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>
        }
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f103 0008 	add.w	r0, r3, #8
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f103 0110 	add.w	r1, r3, #16
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	ed97 0a00 	vldr	s0, [r7]
 800883c:	461a      	mov	r2, r3
 800883e:	f7fa fe03 	bl	8003448 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>
        }
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f103 0008 	add.w	r0, r3, #8
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f103 0110 	add.w	r1, r3, #16
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3304      	adds	r3, #4
 8008866:	ed97 0a00 	vldr	s0, [r7]
 800886a:	461a      	mov	r2, r3
 800886c:	f7fa fd86 	bl	800337c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>
        }
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f103 0008 	add.w	r0, r3, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f103 0110 	add.w	r1, r3, #16
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3304      	adds	r3, #4
 8008894:	ed97 0a00 	vldr	s0, [r7]
 8008898:	461a      	mov	r2, r3
 800889a:	f7fa fd09 	bl	80032b0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>
        }
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f103 0008 	add.w	r0, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f103 0110 	add.w	r1, r3, #16
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	1d1a      	adds	r2, r3, #4
 80088c2:	887b      	ldrh	r3, [r7, #2]
 80088c4:	f7fa fcc5 	bl	8003252 <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>
        }
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f103 0008 	add.w	r0, r3, #8
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 0110 	add.w	r1, r3, #16
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	1d1a      	adds	r2, r3, #4
 80088ec:	887b      	ldrh	r3, [r7, #2]
 80088ee:	f7fa fc81 	bl	80031f4 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>
        }
 80088f2:	bf00      	nop
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f103 0008 	add.w	r0, r3, #8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f103 0110 	add.w	r1, r3, #16
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	ed97 0a00 	vldr	s0, [r7]
 800891a:	461a      	mov	r2, r3
 800891c:	f7fa fc04 	bl	8003128 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>
        }
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f103 0008 	add.w	r0, r3, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f103 0110 	add.w	r1, r3, #16
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3304      	adds	r3, #4
 8008944:	ed97 0a00 	vldr	s0, [r7]
 8008948:	461a      	mov	r2, r3
 800894a:	f7fa fb87 	bl	800305c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>
        }
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f103 0008 	add.w	r0, r3, #8
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f103 0110 	add.w	r1, r3, #16
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	1d1a      	adds	r2, r3, #4
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	f7fa fb22 	bl	8002fbc <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>
        }
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f103 0208 	add.w	r2, r3, #8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3310      	adds	r3, #16
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7fa fafe 	bl	8002f96 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800899a:	4603      	mov	r3, r0
        }
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f103 0208 	add.w	r2, r3, #8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3310      	adds	r3, #16
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f7fc fb84 	bl	80050c6 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>
 80089be:	4603      	mov	r3, r0
        }
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 0208 	add.w	r2, r3, #8
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3310      	adds	r3, #16
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fc fb20 	bl	8005022 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>
 80089e2:	4603      	mov	r3, r0
        }
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f103 0208 	add.w	r2, r3, #8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3310      	adds	r3, #16
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fc fab7 	bl	8004f74 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>
 8008a06:	4603      	mov	r3, r0
        }
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f103 0208 	add.w	r2, r3, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3310      	adds	r3, #16
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fb fed7 	bl	80047d8 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>
 8008a2a:	4603      	mov	r3, r0
        }
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f103 0208 	add.w	r2, r3, #8
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3310      	adds	r3, #16
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fb fe6a 	bl	8004722 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>
 8008a4e:	4603      	mov	r3, r0
        }
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0208 	add.w	r2, r3, #8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3310      	adds	r3, #16
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	f7fb fc79 	bl	8004364 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>
 8008a72:	4603      	mov	r3, r0
        }
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f103 0208 	add.w	r2, r3, #8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7fb fc0c 	bl	80042ae <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>
 8008a96:	4603      	mov	r3, r0
        }
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f103 0208 	add.w	r2, r3, #8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f7fb fab3 	bl	8004020 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>
 8008aba:	eef0 7a40 	vmov.f32	s15, s0
        }
 8008abe:	eeb0 0a67 	vmov.f32	s0, s15
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f103 0208 	add.w	r2, r3, #8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3310      	adds	r3, #16
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f7fb fa1c 	bl	8003f1a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>
 8008ae2:	4603      	mov	r3, r0
        }
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f103 0208 	add.w	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3310      	adds	r3, #16
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f7fb f9af 	bl	8003e64 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>
 8008b06:	4603      	mov	r3, r0
        }
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f103 0208 	add.w	r2, r3, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	3310      	adds	r3, #16
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fb f938 	bl	8003d9a <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>
 8008b2a:	4603      	mov	r3, r0
        }
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f103 0208 	add.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3310      	adds	r3, #16
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f7fb f8cb 	bl	8003ce4 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>
 8008b4e:	4603      	mov	r3, r0
        }
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f103 0208 	add.w	r2, r3, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3310      	adds	r3, #16
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7fb f853 	bl	8003c18 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>
 8008b72:	eef0 7a40 	vmov.f32	s15, s0
        }
 8008b76:	eeb0 0a67 	vmov.f32	s0, s15
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 0208 	add.w	r2, r3, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3310      	adds	r3, #16
 8008b92:	4619      	mov	r1, r3
 8008b94:	4610      	mov	r0, r2
 8008b96:	f7fa ffbb 	bl	8003b10 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>
 8008b9a:	4603      	mov	r3, r0
        }
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f103 0208 	add.w	r2, r3, #8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3310      	adds	r3, #16
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f7fa fa29 	bl	8003010 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>
 8008bbe:	4603      	mov	r3, r0
        }
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	f040 816e 	bne.w	8008eb6 <_Z41__static_initialization_and_destruction_0ii+0x2ee>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008be0:	4293      	cmp	r3, r2
 8008be2:	f040 8168 	bne.w	8008eb6 <_Z41__static_initialization_and_destruction_0ii+0x2ee>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8008be6:	2000      	movs	r0, #0
 8008be8:	f00f f841 	bl	8017c6e <osMutexNew>
 8008bec:	4603      	mov	r3, r0
 8008bee:	4ab4      	ldr	r2, [pc, #720]	; (8008ec0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008bf0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	f00f f83b 	bl	8017c6e <osMutexNew>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	4ab2      	ldr	r2, [pc, #712]	; (8008ec4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8008bfc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f00f f835 	bl	8017c6e <osMutexNew>
 8008c04:	4603      	mov	r3, r0
 8008c06:	4ab0      	ldr	r2, [pc, #704]	; (8008ec8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008c08:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	f00f f82f 	bl	8017c6e <osMutexNew>
 8008c10:	4603      	mov	r3, r0
 8008c12:	4aae      	ldr	r2, [pc, #696]	; (8008ecc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008c14:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8008c16:	2000      	movs	r0, #0
 8008c18:	f00f f829 	bl	8017c6e <osMutexNew>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	4aac      	ldr	r2, [pc, #688]	; (8008ed0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008c20:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8008c22:	2000      	movs	r0, #0
 8008c24:	f00f f823 	bl	8017c6e <osMutexNew>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	4aaa      	ldr	r2, [pc, #680]	; (8008ed4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008c2c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f00f f81d 	bl	8017c6e <osMutexNew>
 8008c34:	4603      	mov	r3, r0
 8008c36:	4aa8      	ldr	r2, [pc, #672]	; (8008ed8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008c38:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	f00f f817 	bl	8017c6e <osMutexNew>
 8008c40:	4603      	mov	r3, r0
 8008c42:	4aa6      	ldr	r2, [pc, #664]	; (8008edc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008c44:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8008c46:	2000      	movs	r0, #0
 8008c48:	f00f f811 	bl	8017c6e <osMutexNew>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	4aa4      	ldr	r2, [pc, #656]	; (8008ee0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008c50:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8008c52:	2000      	movs	r0, #0
 8008c54:	f00f f80b 	bl	8017c6e <osMutexNew>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	4aa2      	ldr	r2, [pc, #648]	; (8008ee4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008c5c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f00f f805 	bl	8017c6e <osMutexNew>
 8008c64:	4603      	mov	r3, r0
 8008c66:	4aa0      	ldr	r2, [pc, #640]	; (8008ee8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8008c68:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f00e ffff 	bl	8017c6e <osMutexNew>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4a9e      	ldr	r2, [pc, #632]	; (8008eec <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008c74:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8008c76:	2000      	movs	r0, #0
 8008c78:	f00e fff9 	bl	8017c6e <osMutexNew>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	4a9c      	ldr	r2, [pc, #624]	; (8008ef0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008c80:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8008c82:	2000      	movs	r0, #0
 8008c84:	f00e fff3 	bl	8017c6e <osMutexNew>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4a9a      	ldr	r2, [pc, #616]	; (8008ef4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008c8c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f00e ffed 	bl	8017c6e <osMutexNew>
 8008c94:	4603      	mov	r3, r0
 8008c96:	4a98      	ldr	r2, [pc, #608]	; (8008ef8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008c98:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	f00e ffe7 	bl	8017c6e <osMutexNew>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	4a96      	ldr	r2, [pc, #600]	; (8008efc <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8008ca4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	f00e ffe1 	bl	8017c6e <osMutexNew>
 8008cac:	4603      	mov	r3, r0
 8008cae:	4a94      	ldr	r2, [pc, #592]	; (8008f00 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008cb0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	f00e ffdb 	bl	8017c6e <osMutexNew>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4a92      	ldr	r2, [pc, #584]	; (8008f04 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8008cbc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	f00e ffd5 	bl	8017c6e <osMutexNew>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	4a90      	ldr	r2, [pc, #576]	; (8008f08 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008cc8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f00e ffcf 	bl	8017c6e <osMutexNew>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4a8e      	ldr	r2, [pc, #568]	; (8008f0c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008cd4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f00e ffc9 	bl	8017c6e <osMutexNew>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	4a8c      	ldr	r2, [pc, #560]	; (8008f10 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008ce0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	f00e ffc3 	bl	8017c6e <osMutexNew>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4a8a      	ldr	r2, [pc, #552]	; (8008f14 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8008cec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f00e ffbd 	bl	8017c6e <osMutexNew>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	4a88      	ldr	r2, [pc, #544]	; (8008f18 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008cf8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f00e ffb7 	bl	8017c6e <osMutexNew>
 8008d00:	4603      	mov	r3, r0
 8008d02:	4a86      	ldr	r2, [pc, #536]	; (8008f1c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008d04:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8008d06:	2000      	movs	r0, #0
 8008d08:	f00e ffb1 	bl	8017c6e <osMutexNew>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	4a84      	ldr	r2, [pc, #528]	; (8008f20 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008d10:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8008d12:	2000      	movs	r0, #0
 8008d14:	f00e ffab 	bl	8017c6e <osMutexNew>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4a82      	ldr	r2, [pc, #520]	; (8008f24 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008d1c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8008d1e:	2000      	movs	r0, #0
 8008d20:	f00e ffa5 	bl	8017c6e <osMutexNew>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4a80      	ldr	r2, [pc, #512]	; (8008f28 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008d28:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f00e ff9f 	bl	8017c6e <osMutexNew>
 8008d30:	4603      	mov	r3, r0
 8008d32:	4a7e      	ldr	r2, [pc, #504]	; (8008f2c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008d34:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8008d36:	2000      	movs	r0, #0
 8008d38:	f00e ff99 	bl	8017c6e <osMutexNew>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	4a7c      	ldr	r2, [pc, #496]	; (8008f30 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008d40:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8008d42:	2000      	movs	r0, #0
 8008d44:	f00e ff93 	bl	8017c6e <osMutexNew>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	4a7a      	ldr	r2, [pc, #488]	; (8008f34 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8008d4c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8008d4e:	2000      	movs	r0, #0
 8008d50:	f00e ff8d 	bl	8017c6e <osMutexNew>
 8008d54:	4603      	mov	r3, r0
 8008d56:	4a78      	ldr	r2, [pc, #480]	; (8008f38 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008d58:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f00e ff87 	bl	8017c6e <osMutexNew>
 8008d60:	4603      	mov	r3, r0
 8008d62:	4a76      	ldr	r2, [pc, #472]	; (8008f3c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008d64:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8008d66:	2000      	movs	r0, #0
 8008d68:	f00e ff81 	bl	8017c6e <osMutexNew>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	4a74      	ldr	r2, [pc, #464]	; (8008f40 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8008d70:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8008d72:	2000      	movs	r0, #0
 8008d74:	f00e ff7b 	bl	8017c6e <osMutexNew>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	4a72      	ldr	r2, [pc, #456]	; (8008f44 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8008d7c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f00e ff75 	bl	8017c6e <osMutexNew>
 8008d84:	4603      	mov	r3, r0
 8008d86:	4a70      	ldr	r2, [pc, #448]	; (8008f48 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008d88:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f00e ff6f 	bl	8017c6e <osMutexNew>
 8008d90:	4603      	mov	r3, r0
 8008d92:	4a6e      	ldr	r2, [pc, #440]	; (8008f4c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008d94:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8008d96:	2000      	movs	r0, #0
 8008d98:	f00e ff69 	bl	8017c6e <osMutexNew>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	4a6c      	ldr	r2, [pc, #432]	; (8008f50 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8008da0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 8008da2:	2000      	movs	r0, #0
 8008da4:	f00e ff63 	bl	8017c6e <osMutexNew>
 8008da8:	4603      	mov	r3, r0
 8008daa:	4a6a      	ldr	r2, [pc, #424]	; (8008f54 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8008dac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 8008dae:	2000      	movs	r0, #0
 8008db0:	f00e ff5d 	bl	8017c6e <osMutexNew>
 8008db4:	4603      	mov	r3, r0
 8008db6:	4a68      	ldr	r2, [pc, #416]	; (8008f58 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8008db8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f00e ff57 	bl	8017c6e <osMutexNew>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4a66      	ldr	r2, [pc, #408]	; (8008f5c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8008dc4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f00e ff51 	bl	8017c6e <osMutexNew>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4a64      	ldr	r2, [pc, #400]	; (8008f60 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008dd0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f00e ff4b 	bl	8017c6e <osMutexNew>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	4a62      	ldr	r2, [pc, #392]	; (8008f64 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8008ddc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 8008dde:	2000      	movs	r0, #0
 8008de0:	f00e ff45 	bl	8017c6e <osMutexNew>
 8008de4:	4603      	mov	r3, r0
 8008de6:	4a60      	ldr	r2, [pc, #384]	; (8008f68 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008de8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 8008dea:	2000      	movs	r0, #0
 8008dec:	f00e ff3f 	bl	8017c6e <osMutexNew>
 8008df0:	4603      	mov	r3, r0
 8008df2:	4a5e      	ldr	r2, [pc, #376]	; (8008f6c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008df4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 8008df6:	2000      	movs	r0, #0
 8008df8:	f00e ff39 	bl	8017c6e <osMutexNew>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4a5c      	ldr	r2, [pc, #368]	; (8008f70 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008e00:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8008e02:	2000      	movs	r0, #0
 8008e04:	f00e ff33 	bl	8017c6e <osMutexNew>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	4a5a      	ldr	r2, [pc, #360]	; (8008f74 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008e0c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f00e ff2d 	bl	8017c6e <osMutexNew>
 8008e14:	4603      	mov	r3, r0
 8008e16:	4a58      	ldr	r2, [pc, #352]	; (8008f78 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008e18:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f00e ff27 	bl	8017c6e <osMutexNew>
 8008e20:	4603      	mov	r3, r0
 8008e22:	4a56      	ldr	r2, [pc, #344]	; (8008f7c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008e24:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 8008e26:	2000      	movs	r0, #0
 8008e28:	f00e ff21 	bl	8017c6e <osMutexNew>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	4a54      	ldr	r2, [pc, #336]	; (8008f80 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008e30:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelX               = osMutexNew(NULL);
 8008e32:	2000      	movs	r0, #0
 8008e34:	f00e ff1b 	bl	8017c6e <osMutexNew>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	4a52      	ldr	r2, [pc, #328]	; (8008f84 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008e3c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelY               = osMutexNew(NULL);
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f00e ff15 	bl	8017c6e <osMutexNew>
 8008e44:	4603      	mov	r3, r0
 8008e46:	4a50      	ldr	r2, [pc, #320]	; (8008f88 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008e48:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelZ               = osMutexNew(NULL);
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f00e ff0f 	bl	8017c6e <osMutexNew>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4a4e      	ldr	r2, [pc, #312]	; (8008f8c <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8008e54:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroX                = osMutexNew(NULL);
 8008e56:	2000      	movs	r0, #0
 8008e58:	f00e ff09 	bl	8017c6e <osMutexNew>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	4a4c      	ldr	r2, [pc, #304]	; (8008f90 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8008e60:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroY                = osMutexNew(NULL);
 8008e62:	2000      	movs	r0, #0
 8008e64:	f00e ff03 	bl	8017c6e <osMutexNew>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	4a4a      	ldr	r2, [pc, #296]	; (8008f94 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8008e6c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroZ                = osMutexNew(NULL);
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f00e fefd 	bl	8017c6e <osMutexNew>
 8008e74:	4603      	mov	r3, r0
 8008e76:	4a48      	ldr	r2, [pc, #288]	; (8008f98 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8008e78:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPressure          = osMutexNew(NULL);
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f00e fef7 	bl	8017c6e <osMutexNew>
 8008e80:	4603      	mov	r3, r0
 8008e82:	4a46      	ldr	r2, [pc, #280]	; (8008f9c <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8008e84:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialRightCounter     = osMutexNew(NULL);
 8008e86:	2000      	movs	r0, #0
 8008e88:	f00e fef1 	bl	8017c6e <osMutexNew>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4a44      	ldr	r2, [pc, #272]	; (8008fa0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8008e90:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialLeftCounter      = osMutexNew(NULL);
 8008e92:	2000      	movs	r0, #0
 8008e94:	f00e feeb 	bl	8017c6e <osMutexNew>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4a42      	ldr	r2, [pc, #264]	; (8008fa4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8008e9c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Position                 = osMutexNew(NULL);
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f00e fee5 	bl	8017c6e <osMutexNew>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4a40      	ldr	r2, [pc, #256]	; (8008fa8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8008ea8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Velocity                 = osMutexNew(NULL);
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f00e fedf 	bl	8017c6e <osMutexNew>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	4a3e      	ldr	r2, [pc, #248]	; (8008fac <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8008eb4:	6013      	str	r3, [r2, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000968 	.word	0x20000968
 8008ec4:	2000096c 	.word	0x2000096c
 8008ec8:	20000970 	.word	0x20000970
 8008ecc:	20000974 	.word	0x20000974
 8008ed0:	20000978 	.word	0x20000978
 8008ed4:	2000097c 	.word	0x2000097c
 8008ed8:	20000980 	.word	0x20000980
 8008edc:	20000984 	.word	0x20000984
 8008ee0:	20000988 	.word	0x20000988
 8008ee4:	2000098c 	.word	0x2000098c
 8008ee8:	20000990 	.word	0x20000990
 8008eec:	20000994 	.word	0x20000994
 8008ef0:	20000998 	.word	0x20000998
 8008ef4:	2000099c 	.word	0x2000099c
 8008ef8:	200009a0 	.word	0x200009a0
 8008efc:	200009a4 	.word	0x200009a4
 8008f00:	200009a8 	.word	0x200009a8
 8008f04:	200009ac 	.word	0x200009ac
 8008f08:	200009b0 	.word	0x200009b0
 8008f0c:	200009b4 	.word	0x200009b4
 8008f10:	200009b8 	.word	0x200009b8
 8008f14:	200009bc 	.word	0x200009bc
 8008f18:	200009c0 	.word	0x200009c0
 8008f1c:	200009c4 	.word	0x200009c4
 8008f20:	200009c8 	.word	0x200009c8
 8008f24:	200009cc 	.word	0x200009cc
 8008f28:	200009d0 	.word	0x200009d0
 8008f2c:	200009d4 	.word	0x200009d4
 8008f30:	200009d8 	.word	0x200009d8
 8008f34:	200009dc 	.word	0x200009dc
 8008f38:	200009e0 	.word	0x200009e0
 8008f3c:	200009e4 	.word	0x200009e4
 8008f40:	200009e8 	.word	0x200009e8
 8008f44:	200009ec 	.word	0x200009ec
 8008f48:	200009f0 	.word	0x200009f0
 8008f4c:	200009f4 	.word	0x200009f4
 8008f50:	200009f8 	.word	0x200009f8
 8008f54:	200009fc 	.word	0x200009fc
 8008f58:	20000a00 	.word	0x20000a00
 8008f5c:	20000a04 	.word	0x20000a04
 8008f60:	20000a08 	.word	0x20000a08
 8008f64:	20000a0c 	.word	0x20000a0c
 8008f68:	20000a10 	.word	0x20000a10
 8008f6c:	20000a14 	.word	0x20000a14
 8008f70:	20000a18 	.word	0x20000a18
 8008f74:	20000a1c 	.word	0x20000a1c
 8008f78:	20000a20 	.word	0x20000a20
 8008f7c:	20000a24 	.word	0x20000a24
 8008f80:	20000a28 	.word	0x20000a28
 8008f84:	20000a2c 	.word	0x20000a2c
 8008f88:	20000a30 	.word	0x20000a30
 8008f8c:	20000a34 	.word	0x20000a34
 8008f90:	20000a38 	.word	0x20000a38
 8008f94:	20000a3c 	.word	0x20000a3c
 8008f98:	20000a40 	.word	0x20000a40
 8008f9c:	20000a44 	.word	0x20000a44
 8008fa0:	20000a48 	.word	0x20000a48
 8008fa4:	20000a4c 	.word	0x20000a4c
 8008fa8:	20000a50 	.word	0x20000a50
 8008fac:	20000a54 	.word	0x20000a54

08008fb0 <_GLOBAL__sub_I_OD_NodeID>:
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7ff fe05 	bl	8008bc8 <_Z41__static_initialization_and_destruction_0ii>
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f8 fa3e 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8008fda:	b5b0      	push	{r4, r5, r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	240f      	movs	r4, #15
 8008fe6:	461d      	mov	r5, r3
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	db05      	blt.n	8008ff8 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 fa83 	bl	80094f8 <_ZNSt8functionIFvtEEC1Ev>
 8008ff2:	3510      	adds	r5, #16
 8008ff4:	3c01      	subs	r4, #1
 8008ff6:	e7f7      	b.n	8008fe8 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bdb0      	pop	{r4, r5, r7, pc}

0800900a <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 800900a:	b590      	push	{r4, r7, lr}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	429c      	cmp	r4, r3
 8009022:	d004      	beq.n	800902e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8009024:	3c10      	subs	r4, #16
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff ffca 	bl	8008fc0 <_ZNSt8functionIFvtEED1Ev>
 800902c:	e7f7      	b.n	800901e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4618      	mov	r0, r3
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bd90      	pop	{r4, r7, pc}

08009038 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
 800903c:	4801      	ldr	r0, [pc, #4]	; (8009044 <__tcf_0+0xc>)
 800903e:	f7ff ffe4 	bl	800900a <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000a58 	.word	0x20000a58

08009048 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 800904c:	4b12      	ldr	r3, [pc, #72]	; (8009098 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f3bf 8f5b 	dmb	ish
 8009054:	b2db      	uxtb	r3, r3
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d013      	beq.n	8009090 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8009068:	480b      	ldr	r0, [pc, #44]	; (8009098 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800906a:	f013 f85b 	bl	801c124 <__cxa_guard_acquire>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	bf14      	ite	ne
 8009074:	2301      	movne	r3, #1
 8009076:	2300      	moveq	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800907e:	4807      	ldr	r0, [pc, #28]	; (800909c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8009080:	f7ff ffab 	bl	8008fda <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8009084:	4806      	ldr	r0, [pc, #24]	; (80090a0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8009086:	f013 fac2 	bl	801c60e <atexit>
 800908a:	4803      	ldr	r0, [pc, #12]	; (8009098 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800908c:	f013 f856 	bl	801c13c <__cxa_guard_release>
		return instance;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8009092:	4618      	mov	r0, r3
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000b5c 	.word	0x20000b5c
 800909c:	20000a58 	.word	0x20000a58
 80090a0:	08009039 	.word	0x08009039

080090a4 <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>:
	unsigned int registerCallback(std::function<void(uint16_t)> isr) {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80090b4:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80090bc:	1c59      	adds	r1, r3, #1
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 80090c4:	011b      	lsls	r3, r3, #4
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fa20 	bl	8009512 <_ZNSt8functionIFvtEEaSERKS1_>
		return id;
 80090d2:	68fb      	ldr	r3, [r7, #12]
	}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <_ZNSt8functionIFvbEED1Ev>:
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f8 f9b0 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>:
class GPIOExtiController {
public:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
			m_port(port), m_pin(pin) {
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
				[&](uint16_t pin) {
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	807b      	strh	r3, [r7, #2]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fa2a 	bl	8009564 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	889b      	ldrh	r3, [r3, #4]
 800911c:	887a      	ldrh	r2, [r7, #2]
 800911e:	429a      	cmp	r2, r3
 8009120:	d101      	bne.n	8009126 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x32>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d019      	beq.n	8009160 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x6a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8009130:	681a      	ldr	r2, [r3, #0]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8009136:	889b      	ldrh	r3, [r3, #4]
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f009 ff1e 	bl	8012f7c <HAL_GPIO_ReadPin>
 8009140:	4603      	mov	r3, r0
 8009142:	73fb      	strb	r3, [r7, #15]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
						m_extiCallback(state == GPIO_PIN_SET);
 8009148:	f103 020c 	add.w	r2, r3, #12
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	2b01      	cmp	r3, #1
 8009150:	bf0c      	ite	eq
 8009152:	2301      	moveq	r3, #1
 8009154:	2300      	movne	r3, #0
 8009156:	b2db      	uxtb	r3, r3
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f000 fa0f 	bl	800957e <_ZNKSt8functionIFvbEEclEb>
					}
				});
 8009160:	bf00      	nop
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
 8009168:	b590      	push	{r4, r7, lr}
 800916a:	b089      	sub	sp, #36	; 0x24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	88fa      	ldrh	r2, [r7, #6]
 8009180:	809a      	strh	r2, [r3, #4]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	330c      	adds	r3, #12
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f9dd 	bl	8009548 <_ZNSt8functionIFvbEEC1EDn>
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
 800918e:	f7ff ff5b 	bl	8009048 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8009192:	4604      	mov	r4, r0
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	f107 0310 	add.w	r3, r7, #16
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fa0d 	bl	80095bc <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>
 80091a2:	f107 0310 	add.w	r3, r7, #16
 80091a6:	4619      	mov	r1, r3
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff ff7b 	bl	80090a4 <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff ff01 	bl	8008fc0 <_ZNSt8functionIFvtEED1Ev>
	}
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4618      	mov	r0, r3
 80091c2:	3724      	adds	r7, #36	; 0x24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}

080091c8 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>:
	~GPIOExtiController() {
		GPIOExtiCallbackHandler::getInstance().unregisterCallback(m_extiIsrId);
	}
	void setExtiCallback(std::function<void(bool)> extiCallback) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
		m_extiCallback = extiCallback;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	330c      	adds	r3, #12
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fa19 	bl	8009610 <_ZNSt8functionIFvbEEaSERKS1_>
	}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7f8 f92b 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8009200:	b5b0      	push	{r4, r5, r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	240f      	movs	r4, #15
 800920c:	461d      	mov	r5, r3
 800920e:	2c00      	cmp	r4, #0
 8009210:	db05      	blt.n	800921e <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8009212:	4628      	mov	r0, r5
 8009214:	f000 fa17 	bl	8009646 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8009218:	3510      	adds	r5, #16
 800921a:	3c01      	subs	r4, #1
 800921c:	e7f7      	b.n	800920e <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bdb0      	pop	{r4, r5, r7, pc}

08009230 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	429c      	cmp	r4, r3
 8009248:	d004      	beq.n	8009254 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 800924a:	3c10      	subs	r4, #16
 800924c:	4620      	mov	r0, r4
 800924e:	f7ff ffca 	bl	80091e6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 8009252:	e7f7      	b.n	8009244 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	bd90      	pop	{r4, r7, pc}
	...

08009260 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__tcf_1+0xc>)
 8009266:	f7ff ffe3 	bl	8009230 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000b60 	.word	0x20000b60

08009270 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 8009274:	4b12      	ldr	r3, [pc, #72]	; (80092c0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f3bf 8f5b 	dmb	ish
 800927c:	b2db      	uxtb	r3, r3
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	bf0c      	ite	eq
 8009286:	2301      	moveq	r3, #1
 8009288:	2300      	movne	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d013      	beq.n	80092b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8009290:	480b      	ldr	r0, [pc, #44]	; (80092c0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8009292:	f012 ff47 	bl	801c124 <__cxa_guard_acquire>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	bf14      	ite	ne
 800929c:	2301      	movne	r3, #1
 800929e:	2300      	moveq	r3, #0
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 80092a6:	4807      	ldr	r0, [pc, #28]	; (80092c4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 80092a8:	f7ff ffaa 	bl	8009200 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 80092ac:	4806      	ldr	r0, [pc, #24]	; (80092c8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 80092ae:	f013 f9ae 	bl	801c60e <atexit>
 80092b2:	4803      	ldr	r0, [pc, #12]	; (80092c0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80092b4:	f012 ff42 	bl	801c13c <__cxa_guard_release>
		return instance;
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 80092ba:	4618      	mov	r0, r3
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000c64 	.word	0x20000c64
 80092c4:	20000b60 	.word	0x20000b60
 80092c8:	08009261 	.word	0x08009261

080092cc <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(TIM_HandleTypeDef*)> isr) {
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80092dc:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80092e4:	1c59      	adds	r1, r3, #1
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	4413      	add	r3, r2
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f9b3 	bl	8009660 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>
		return id;
 80092fa:	68fb      	ldr	r3, [r7, #12]
	}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>:

class Timer {
public:
	explicit Timer(TIM_HandleTypeDef *htim) :
			m_htim(htim) {
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
			if(m_htim == htim){
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d104      	bne.n	8009324 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_+0x20>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
				m_overflow++;
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	3201      	adds	r2, #1
 8009322:	605a      	str	r2, [r3, #4]
			}
		});
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <_ZN5TimerC1EP17TIM_HandleTypeDef>:
	explicit Timer(TIM_HandleTypeDef *htim) :
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
			m_htim(htim) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	605a      	str	r2, [r3, #4]
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8009346:	f7ff ff93 	bl	8009270 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800934a:	4604      	mov	r4, r0
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	f107 0308 	add.w	r3, r7, #8
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f99f 	bl	8009698 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>
 800935a:	f107 0308 	add.w	r3, r7, #8
 800935e:	4619      	mov	r1, r3
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff ffb3 	bl	80092cc <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>
 8009366:	4602      	mov	r2, r0
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	f107 0308 	add.w	r3, r7, #8
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff ff38 	bl	80091e6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	}
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	bd90      	pop	{r4, r7, pc}

08009380 <_ZN5Timer5startEv>:

	void start() {
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
		reset();
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f809 	bl	80093a0 <_ZN5Timer5resetEv>
		HAL_TIM_Base_Start_IT(m_htim);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f00b fac0 	bl	8014918 <HAL_TIM_Base_Start_IT>
	}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <_ZN5Timer5resetEv>:

	void stop() {
		HAL_TIM_Base_Stop_IT(m_htim);
	}

	void reset() {
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
		m_overflow = 0;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_COUNTER(m_htim, 0);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2200      	movs	r2, #0
 80093b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <_ZN5Timer3getEv>:

	[[nodiscard]] inline uint16_t get() {
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
		return __HAL_TIM_GET_COUNTER(m_htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	b29b      	uxth	r3, r3
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <_ZN5Timer8overflowEv>:
	[[nodiscard]] inline unsigned int overflow(){
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
		return m_overflow;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
	}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>:

FiducialSensor::FiducialSensor(FiducialConfig config) :
		m_exti(config.m_gpio.m_port, config.m_gpio.m_pin), m_count(0), m_timer(config.m_htim), m_deltaTime(
				0), m_distanceBetweenInterrupts(
				config.m_distanceBetweenInterrupts) {
	m_exti.setExtiCallback([&](bool v) {
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
		this->extiCallback(v);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f844 	bl	800949c <_ZN14FiducialSensor12extiCallbackEb>
	});
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <_ZN14FiducialSensorC1E14FiducialConfig>:
FiducialSensor::FiducialSensor(FiducialConfig config) :
 800941c:	b084      	sub	sp, #16
 800941e:	b590      	push	{r4, r7, lr}
 8009420:	b087      	sub	sp, #28
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800942a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				config.m_distanceBetweenInterrupts) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009432:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff fe97 	bl	8009168 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	61da      	str	r2, [r3, #28]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3320      	adds	r3, #32
 8009444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff ff71 	bl	8009330 <_ZN5TimerC1EP17TIM_HandleTypeDef>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	62da      	str	r2, [r3, #44]	; 0x2c
 8009454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	631a      	str	r2, [r3, #48]	; 0x30
	m_exti.setExtiCallback([&](bool v) {
 800945a:	687c      	ldr	r4, [r7, #4]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	f107 0308 	add.w	r3, r7, #8
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f941 	bl	80096ec <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>
 800946a:	f107 0308 	add.w	r3, r7, #8
 800946e:	4619      	mov	r1, r3
 8009470:	4620      	mov	r0, r4
 8009472:	f7ff fea9 	bl	80091c8 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>
 8009476:	f107 0308 	add.w	r3, r7, #8
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fe2e 	bl	80090dc <_ZNSt8functionIFvbEED1Ev>
	m_timer.start();
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3320      	adds	r3, #32
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff ff7b 	bl	8009380 <_ZN5Timer5startEv>
}
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4618      	mov	r0, r3
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009496:	b004      	add	sp, #16
 8009498:	4770      	bx	lr
	...

0800949c <_ZN14FiducialSensor12extiCallbackEb>:

float FiducialSensor::estimateVelocityMPS() {
	return m_distanceBetweenInterrupts / (float) m_deltaTime;
}

void FiducialSensor::extiCallback(bool v) {
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
	m_deltaTime = (m_timer.get() + m_timer.overflow() * 0xFFFF) / 10;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3320      	adds	r3, #32
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ff89 	bl	80093c4 <_ZN5Timer3getEv>
 80094b2:	4603      	mov	r3, r0
 80094b4:	461c      	mov	r4, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3320      	adds	r3, #32
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff ff91 	bl	80093e2 <_ZN5Timer8overflowEv>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4613      	mov	r3, r2
 80094c4:	041b      	lsls	r3, r3, #16
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	4423      	add	r3, r4
 80094ca:	4a0a      	ldr	r2, [pc, #40]	; (80094f4 <_ZN14FiducialSensor12extiCallbackEb+0x58>)
 80094cc:	fba2 2303 	umull	r2, r3, r2, r3
 80094d0:	08da      	lsrs	r2, r3, #3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	62da      	str	r2, [r3, #44]	; 0x2c
	m_timer.reset();
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3320      	adds	r3, #32
 80094da:	4618      	mov	r0, r3
 80094dc:	f7ff ff60 	bl	80093a0 <_ZN5Timer5resetEv>
	m_count++;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	61da      	str	r2, [r3, #28]
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd90      	pop	{r4, r7, pc}
 80094f2:	bf00      	nop
 80094f4:	cccccccd 	.word	0xcccccccd

080094f8 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4618      	mov	r0, r3
 8009504:	f7f7 ff94 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4618      	mov	r0, r3
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNSt8functionIFvtEEaSERKS1_>:
      operator=(const function& __x)
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f90c 	bl	8009740 <_ZNSt8functionIFvtEEC1ERKS1_>
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f928 	bl	8009784 <_ZNSt8functionIFvtEE4swapERS1_>
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff fd41 	bl	8008fc0 <_ZNSt8functionIFvtEED1Ev>
	return *this;
 800953e:	687b      	ldr	r3, [r7, #4]
      }
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <_ZNSt8functionIFvbEEC1EDn>:
      function(nullptr_t) noexcept
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	f7f7 ff6b 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f955 	bl	800981e <_ZNKSt8functionIFvbEEcvbEv>
 8009574:	4603      	mov	r3, r0
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <_ZNKSt8functionIFvbEEclEb>:
    function<_Res(_ArgTypes...)>::
 800957e:	b5b0      	push	{r4, r5, r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
 8009586:	460b      	mov	r3, r1
 8009588:	70fb      	strb	r3, [r7, #3]
      if (_M_empty())
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4618      	mov	r0, r3
 800958e:	f7f7 ff70 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <_ZNKSt8functionIFvbEEclEb+0x1e>
	__throw_bad_function_call();
 8009598:	f012 fdd8 	bl	801c14c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68dc      	ldr	r4, [r3, #12]
 80095a0:	687d      	ldr	r5, [r7, #4]
 80095a2:	1cfb      	adds	r3, r7, #3
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 f94a 	bl	800983e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4619      	mov	r1, r3
 80095ae:	4628      	mov	r0, r5
 80095b0:	47a0      	blx	r4
 80095b2:	bf00      	nop
    }
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080095bc <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7f7 ff31 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80095ce:	463b      	mov	r3, r7
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f93f 	bl	8009854 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00f      	beq.n	80095fc <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80095dc:	687c      	ldr	r4, [r7, #4]
 80095de:	463b      	mov	r3, r7
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f942 	bl	800986a <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 80095e6:	4603      	mov	r3, r0
 80095e8:	4619      	mov	r1, r3
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f948 	bl	8009880 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a05      	ldr	r2, [pc, #20]	; (8009608 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x4c>)
 80095f4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a04      	ldr	r2, [pc, #16]	; (800960c <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x50>)
 80095fa:	609a      	str	r2, [r3, #8]
      }
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	bd90      	pop	{r4, r7, pc}
 8009606:	bf00      	nop
 8009608:	080098a5 	.word	0x080098a5
 800960c:	080098cf 	.word	0x080098cf

08009610 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800961a:	f107 0308 	add.w	r3, r7, #8
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f973 	bl	800990c <_ZNSt8functionIFvbEEC1ERKS1_>
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f8d5 	bl	80097dc <_ZNSt8functionIFvbEE4swapERS1_>
 8009632:	f107 0308 	add.w	r3, r7, #8
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fd50 	bl	80090dc <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800963c:	687b      	ldr	r3, [r7, #4]
      }
 800963e:	4618      	mov	r0, r3
 8009640:	3718      	adds	r7, #24
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4618      	mov	r0, r3
 8009652:	f7f7 feed 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 f96d 	bl	8009950 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>
 8009676:	f107 0308 	add.w	r3, r7, #8
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f989 	bl	8009994 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff fdad 	bl	80091e6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	return *this;
 800968c:	687b      	ldr	r3, [r7, #4]
      }
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7f7 fec3 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80096aa:	463b      	mov	r3, r7
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f99d 	bl	80099ec <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00f      	beq.n	80096d8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80096b8:	687c      	ldr	r4, [r7, #4]
 80096ba:	463b      	mov	r3, r7
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f9a0 	bl	8009a02 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 80096c2:	4603      	mov	r3, r0
 80096c4:	4619      	mov	r1, r3
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f9a6 	bl	8009a18 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a05      	ldr	r2, [pc, #20]	; (80096e4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x4c>)
 80096d0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x50>)
 80096d6:	609a      	str	r2, [r3, #8]
      }
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd90      	pop	{r4, r7, pc}
 80096e2:	bf00      	nop
 80096e4:	08009a3d 	.word	0x08009a3d
 80096e8:	08009a67 	.word	0x08009a67

080096ec <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f7 fe99 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80096fe:	463b      	mov	r3, r7
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f9cf 	bl	8009aa4 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00f      	beq.n	800972c <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800970c:	687c      	ldr	r4, [r7, #4]
 800970e:	463b      	mov	r3, r7
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f9d2 	bl	8009aba <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009716:	4603      	mov	r3, r0
 8009718:	4619      	mov	r1, r3
 800971a:	4620      	mov	r0, r4
 800971c:	f000 f9d8 	bl	8009ad0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a05      	ldr	r2, [pc, #20]	; (8009738 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x4c>)
 8009724:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a04      	ldr	r2, [pc, #16]	; (800973c <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x50>)
 800972a:	609a      	str	r2, [r3, #8]
      }
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bd90      	pop	{r4, r7, pc}
 8009736:	bf00      	nop
 8009738:	08009af5 	.word	0x08009af5
 800973c:	08009b1f 	.word	0x08009b1f

08009740 <_ZNSt8functionIFvtEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4618      	mov	r0, r3
 800974e:	f7f7 fe6f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8009752:	6838      	ldr	r0, [r7, #0]
 8009754:	f000 fa02 	bl	8009b5c <_ZNKSt8functionIFvtEEcvbEv>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00d      	beq.n	800977a <_ZNSt8functionIFvtEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	2202      	movs	r2, #2
 8009768:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	609a      	str	r2, [r3, #8]
    }
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <_ZNSt8functionIFvtEE4swapERS1_>:
      void swap(function& __x) noexcept
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f7f8 f866 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f103 0208 	add.w	r2, r3, #8
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	4610      	mov	r0, r2
 80097a8:	f7f8 f88f 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f103 020c 	add.w	r2, r3, #12
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	330c      	adds	r3, #12
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f000 f9ea 	bl	8009b92 <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4618      	mov	r0, r3
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	683a      	ldr	r2, [r7, #0]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7f8 f83a 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f103 0208 	add.w	r2, r3, #8
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	3308      	adds	r3, #8
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7f8 f863 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f103 020c 	add.w	r2, r3, #12
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	330c      	adds	r3, #12
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f000 f9e8 	bl	8009be6 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	f7f7 fe22 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800982e:	4603      	mov	r3, r0
 8009830:	f083 0301 	eor.w	r3, r3, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800985c:	2301      	movs	r3, #1
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800988a:	6838      	ldr	r0, [r7, #0]
 800988c:	f7ff ffed 	bl	800986a <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8009890:	4603      	mov	r3, r0
 8009892:	4622      	mov	r2, r4
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f9c4 	bl	8009c24 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd90      	pop	{r4, r7, pc}

080098a4 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E9_M_invokeERKSt9_Any_dataOt>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80098a4:	b590      	push	{r4, r7, lr}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f9d1 	bl	8009c56 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80098b4:	4604      	mov	r4, r0
 80098b6:	6838      	ldr	r0, [r7, #0]
 80098b8:	f7ff ff85 	bl	80097c6 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80098bc:	4603      	mov	r3, r0
 80098be:	4619      	mov	r1, r3
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 f9d9 	bl	8009c78 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80098c6:	bf00      	nop
      }
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd90      	pop	{r4, r7, pc}

080098ce <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80098ce:	b590      	push	{r4, r7, lr}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	4613      	mov	r3, r2
 80098da:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d109      	bne.n	80098f6 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 f9de 	bl	8009ca4 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 80098e8:	4604      	mov	r4, r0
 80098ea:	68b8      	ldr	r0, [r7, #8]
 80098ec:	f000 f9b3 	bl	8009c56 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80098f0:	4603      	mov	r3, r0
 80098f2:	6023      	str	r3, [r4, #0]
	    break;
 80098f4:	e005      	b.n	8009902 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	461a      	mov	r2, r3
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f9dd 	bl	8009cbc <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8009902:	2300      	movs	r3, #0
      }
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	bd90      	pop	{r4, r7, pc}

0800990c <_ZNSt8functionIFvbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4618      	mov	r0, r3
 800991a:	f7f7 fd89 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800991e:	6838      	ldr	r0, [r7, #0]
 8009920:	f7ff ff7d 	bl	800981e <_ZNKSt8functionIFvbEEcvbEv>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <_ZNSt8functionIFvbEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	2202      	movs	r2, #2
 8009934:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
    }
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	f7f7 fd67 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8009962:	6838      	ldr	r0, [r7, #0]
 8009964:	f000 f9d5 	bl	8009d12 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	2202      	movs	r2, #2
 8009978:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68da      	ldr	r2, [r3, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689a      	ldr	r2, [r3, #8]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	609a      	str	r2, [r3, #8]
    }
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7f7 ff5e 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f103 0208 	add.w	r2, r3, #8
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f7f7 ff87 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f103 020c 	add.w	r2, r3, #12
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f000 f9bd 	bl	8009d48 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	  { return true; }
 80099f4:	2301      	movs	r3, #1
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009a18:	b590      	push	{r4, r7, lr}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8009a22:	6838      	ldr	r0, [r7, #0]
 8009a24:	f7ff ffed 	bl	8009a02 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f9a9 	bl	8009d86 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f9b6 	bl	8009db8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	6838      	ldr	r0, [r7, #0]
 8009a50:	f7ff ffc1 	bl	80099d6 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009a54:	4603      	mov	r3, r0
 8009a56:	4619      	mov	r1, r3
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 f9be 	bl	8009dda <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 8009a5e:	bf00      	nop
      }
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd90      	pop	{r4, r7, pc}

08009a66 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009a66:	b590      	push	{r4, r7, lr}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	4613      	mov	r3, r2
 8009a72:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d109      	bne.n	8009a8e <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 f9c3 	bl	8009e06 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 8009a80:	4604      	mov	r4, r0
 8009a82:	68b8      	ldr	r0, [r7, #8]
 8009a84:	f000 f998 	bl	8009db8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	6023      	str	r3, [r4, #0]
	    break;
 8009a8c:	e005      	b.n	8009a9a <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	461a      	mov	r2, r3
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f9c2 	bl	8009e1e <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8009a9a:	2300      	movs	r3, #0
      }
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd90      	pop	{r4, r7, pc}

08009aa4 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	  { return true; }
 8009aac:	2301      	movs	r3, #1
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8009ada:	6838      	ldr	r0, [r7, #0]
 8009adc:	f7ff ffed 	bl	8009aba <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9c4 	bl	8009e74 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd90      	pop	{r4, r7, pc}

08009af4 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f9d1 	bl	8009ea6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009b04:	4604      	mov	r4, r0
 8009b06:	6838      	ldr	r0, [r7, #0]
 8009b08:	f7ff fe99 	bl	800983e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f9d9 	bl	8009ec8 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 8009b16:	bf00      	nop
      }
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd90      	pop	{r4, r7, pc}

08009b1e <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009b1e:	b590      	push	{r4, r7, lr}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d109      	bne.n	8009b46 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f000 f9de 	bl	8009ef4 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f000 f9b3 	bl	8009ea6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009b40:	4603      	mov	r3, r0
 8009b42:	6023      	str	r3, [r4, #0]
	    break;
 8009b44:	e005      	b.n	8009b52 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f9dd 	bl	8009f0c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8009b52:	2300      	movs	r3, #0
      }
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd90      	pop	{r4, r7, pc}

08009b5c <_ZNKSt8functionIFvtEEcvbEv>:
      explicit operator bool() const noexcept
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7f7 fc83 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f083 0301 	eor.w	r3, r3, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff ffed 	bl	8009b7c <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009ba8:	6838      	ldr	r0, [r7, #0]
 8009baa:	f7ff ffe7 	bl	8009b7c <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009bb6:	f107 030c 	add.w	r3, r7, #12
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff ffde 	bl	8009b7c <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	601a      	str	r2, [r3, #0]
    }
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff ffed 	bl	8009bd0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009bfc:	6838      	ldr	r0, [r7, #0]
 8009bfe:	f7ff ffe7 	bl	8009bd0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8009c02:	4603      	mov	r3, r0
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009c0a:	f107 030c 	add.w	r3, r7, #12
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff ffde 	bl	8009bd0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8009c14:	4603      	mov	r3, r0
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	601a      	str	r2, [r3, #0]
    }
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8009c24:	b590      	push	{r4, r7, lr}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009c30:	68b8      	ldr	r0, [r7, #8]
 8009c32:	f7ff fe1a 	bl	800986a <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8009c36:	4604      	mov	r4, r0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f7f8 fc0d 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4619      	mov	r1, r3
 8009c42:	2004      	movs	r0, #4
 8009c44:	f7f8 fbfc 	bl	8002440 <_ZnwjPv>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd90      	pop	{r4, r7, pc}

08009c56 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f97f 	bl	8009f62 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 8009c64:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f987 	bl	8009f7a <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	bf00      	nop
	}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8009c78:	b5b0      	push	{r4, r5, r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f984 	bl	8009f90 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	6838      	ldr	r0, [r7, #0]
 8009c8c:	f7ff fd9b 	bl	80097c6 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009c90:	4603      	mov	r3, r0
 8009c92:	461a      	mov	r2, r3
 8009c94:	4621      	mov	r1, r4
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 f985 	bl	8009fa6 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>
    }
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bdb0      	pop	{r4, r5, r7, pc}

08009ca4 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7f8 fbd3 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009cbc:	b5b0      	push	{r4, r5, r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d016      	beq.n	8009cfe <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8009cd0:	2b03      	cmp	r3, #3
 8009cd2:	dc19      	bgt.n	8009d08 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d002      	beq.n	8009cde <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d00a      	beq.n	8009cf2 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8009cdc:	e014      	b.n	8009d08 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff ffe0 	bl	8009ca4 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	68b8      	ldr	r0, [r7, #8]
 8009ce8:	f7ff ffb5 	bl	8009c56 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009cec:	4603      	mov	r3, r0
 8009cee:	6023      	str	r3, [r4, #0]
	      break;
 8009cf0:	e00a      	b.n	8009d08 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	68b9      	ldr	r1, [r7, #8]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 f96c 	bl	8009fd4 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8009cfc:	e004      	b.n	8009d08 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009cfe:	4621      	mov	r1, r4
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f980 	bl	800a006 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8009d06:	bf00      	nop
	  return false;
 8009d08:	2300      	movs	r3, #0
	}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bdb0      	pop	{r4, r5, r7, pc}

08009d12 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7f7 fba8 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f083 0301 	eor.w	r3, r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3708      	adds	r7, #8
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff ffed 	bl	8009d32 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009d5e:	6838      	ldr	r0, [r7, #0]
 8009d60:	f7ff ffe7 	bl	8009d32 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8009d64:	4603      	mov	r3, r0
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ffde 	bl	8009d32 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8009d76:	4603      	mov	r3, r0
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	601a      	str	r2, [r3, #0]
    }
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8009d86:	b590      	push	{r4, r7, lr}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009d92:	68b8      	ldr	r0, [r7, #8]
 8009d94:	f7ff fe35 	bl	8009a02 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8009d98:	4604      	mov	r4, r0
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f7f8 fb5c 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009da0:	4603      	mov	r3, r0
 8009da2:	4619      	mov	r1, r3
 8009da4:	2004      	movs	r0, #4
 8009da6:	f7f8 fb4b 	bl	8002440 <_ZnwjPv>
 8009daa:	4602      	mov	r2, r0
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd90      	pop	{r4, r7, pc}

08009db8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f92c 	bl	800a01e <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 8009dc6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f000 f934 	bl	800a036 <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	bf00      	nop
	}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8009dda:	b5b0      	push	{r4, r5, r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f931 	bl	800a04c <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8009dea:	4604      	mov	r4, r0
 8009dec:	6838      	ldr	r0, [r7, #0]
 8009dee:	f7ff fdf2 	bl	80099d6 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009df2:	4603      	mov	r3, r0
 8009df4:	461a      	mov	r2, r3
 8009df6:	4621      	mov	r1, r4
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f000 f932 	bl	800a062 <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bdb0      	pop	{r4, r5, r7, pc}

08009e06 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7f8 fb22 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009e14:	4603      	mov	r3, r0
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009e1e:	b5b0      	push	{r4, r5, r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d016      	beq.n	8009e60 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	dc19      	bgt.n	8009e6a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d002      	beq.n	8009e40 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d00a      	beq.n	8009e54 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8009e3e:	e014      	b.n	8009e6a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff ffe0 	bl	8009e06 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 8009e46:	4604      	mov	r4, r0
 8009e48:	68b8      	ldr	r0, [r7, #8]
 8009e4a:	f7ff ffb5 	bl	8009db8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	6023      	str	r3, [r4, #0]
	      break;
 8009e52:	e00a      	b.n	8009e6a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8009e54:	462a      	mov	r2, r5
 8009e56:	68b9      	ldr	r1, [r7, #8]
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f919 	bl	800a090 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8009e5e:	e004      	b.n	8009e6a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009e60:	4621      	mov	r1, r4
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f92d 	bl	800a0c2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8009e68:	bf00      	nop
	  return false;
 8009e6a:	2300      	movs	r3, #0
	}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bdb0      	pop	{r4, r5, r7, pc}

08009e74 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f7ff fe1a 	bl	8009aba <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009e86:	4604      	mov	r4, r0
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7f8 fae5 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4619      	mov	r1, r3
 8009e92:	2004      	movs	r0, #4
 8009e94:	f7f8 fad4 	bl	8002440 <_ZnwjPv>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	6013      	str	r3, [r2, #0]
 8009e9e:	bf00      	nop
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd90      	pop	{r4, r7, pc}

08009ea6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f913 	bl	800a0da <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 8009eb4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f91b 	bl	800a0f2 <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	bf00      	nop
	}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8009ec8:	b5b0      	push	{r4, r5, r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f918 	bl	800a108 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f7ff fcaf 	bl	800983e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 f919 	bl	800a11e <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
    }
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bdb0      	pop	{r4, r5, r7, pc}

08009ef4 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7f8 faab 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009f0c:	b5b0      	push	{r4, r5, r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009f1a:	79fb      	ldrb	r3, [r7, #7]
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d016      	beq.n	8009f4e <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	dc19      	bgt.n	8009f58 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d002      	beq.n	8009f2e <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d00a      	beq.n	8009f42 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8009f2c:	e014      	b.n	8009f58 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff ffe0 	bl	8009ef4 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 8009f34:	4604      	mov	r4, r0
 8009f36:	68b8      	ldr	r0, [r7, #8]
 8009f38:	f7ff ffb5 	bl	8009ea6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	6023      	str	r3, [r4, #0]
	      break;
 8009f40:	e00a      	b.n	8009f58 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8009f42:	462a      	mov	r2, r5
 8009f44:	68b9      	ldr	r1, [r7, #8]
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f900 	bl	800a14c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8009f4c:	e004      	b.n	8009f58 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009f4e:	4621      	mov	r1, r4
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f914 	bl	800a17e <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8009f56:	bf00      	nop
	  return false;
 8009f58:	2300      	movs	r3, #0
	}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bdb0      	pop	{r4, r5, r7, pc}

08009f62 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>:
      _M_access() const
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f8 fa7f 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 8009f70:	4603      	mov	r3, r0
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009fa6:	b590      	push	{r4, r7, lr}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	7338      	strb	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009fb2:	68b8      	ldr	r0, [r7, #8]
 8009fb4:	f7ff ffec 	bl	8009f90 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff fc03 	bl	80097c6 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7ff f895 	bl	80090f6 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd90      	pop	{r4, r7, pc}

08009fd4 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8009fe0:	68b8      	ldr	r0, [r7, #8]
 8009fe2:	f7ff ffbe 	bl	8009f62 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7f8 fa35 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	2004      	movs	r0, #4
 8009ff4:	f7f8 fa24 	bl	8002440 <_ZnwjPv>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	6013      	str	r3, [r2, #0]
	}
 8009ffe:	bf00      	nop
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	bd90      	pop	{r4, r7, pc}

0800a006 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f8c0 	bl	800a196 <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
	}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>:
      _M_access() const
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7f8 fa21 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800a02c:	4603      	mov	r3, r0
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800a062:	b590      	push	{r4, r7, lr}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	7338      	strb	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800a06e:	68b8      	ldr	r0, [r7, #8]
 800a070:	f7ff ffec 	bl	800a04c <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 800a074:	4604      	mov	r4, r0
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff fcad 	bl	80099d6 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800a07c:	4603      	mov	r3, r0
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4619      	mov	r1, r3
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff f93e 	bl	8009304 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>
 800a088:	bf00      	nop
 800a08a:	3714      	adds	r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd90      	pop	{r4, r7, pc}

0800a090 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800a090:	b590      	push	{r4, r7, lr}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800a09c:	68b8      	ldr	r0, [r7, #8]
 800a09e:	f7ff ffbe 	bl	800a01e <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f7f8 f9d7 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	2004      	movs	r0, #4
 800a0b0:	f7f8 f9c6 	bl	8002440 <_ZnwjPv>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	6013      	str	r3, [r2, #0]
	}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd90      	pop	{r4, r7, pc}

0800a0c2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f86e 	bl	800a1ae <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
	}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>:
      _M_access() const
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f8 f9c3 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800a11e:	b590      	push	{r4, r7, lr}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	7338      	strb	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800a12a:	68b8      	ldr	r0, [r7, #8]
 800a12c:	f7ff ffec 	bl	800a108 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800a130:	4604      	mov	r4, r0
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff fb83 	bl	800983e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800a138:	4603      	mov	r3, r0
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	4619      	mov	r1, r3
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff f95b 	bl	80093fa <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>
 800a144:	bf00      	nop
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd90      	pop	{r4, r7, pc}

0800a14c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800a158:	68b8      	ldr	r0, [r7, #8]
 800a15a:	f7ff ffbe 	bl	800a0da <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 800a15e:	4604      	mov	r4, r0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7f8 f979 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800a166:	4603      	mov	r3, r0
 800a168:	4619      	mov	r1, r3
 800a16a:	2004      	movs	r0, #4
 800a16c:	f7f8 f968 	bl	8002440 <_ZnwjPv>
 800a170:	4602      	mov	r2, r0
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	6013      	str	r3, [r2, #0]
	}
 800a176:	bf00      	nop
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd90      	pop	{r4, r7, pc}

0800a17e <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800a17e:	b580      	push	{r7, lr}
 800a180:	b082      	sub	sp, #8
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f81c 	bl	800a1c6 <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
	}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7f8 f95a 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f8 f94e 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b082      	sub	sp, #8
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f8 f942 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <_ZN5StateC1E8PodState>:

class State{
public:
	friend class StateMaschine;

	State(PodState podState) : m_podState(podState){}
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
 800a1ec:	4a09      	ldr	r2, [pc, #36]	; (800a214 <_ZN5StateC1E8PodState+0x34>)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	605a      	str	r2, [r3, #4]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	721a      	strb	r2, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	725a      	strb	r2, [r3, #9]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4618      	mov	r0, r3
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	0801f9f8 	.word	0x0801f9f8

0800a218 <_ZNK5State11getPodStateEv>:

	virtual void update() = 0;

	virtual void dispose() = 0;

	[[nodiscard]] PodState getPodState() const{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
		return m_podState;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	7a5b      	ldrb	r3, [r3, #9]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <_ZN5State9getNextIdEv>:
protected:
	StateMaschine* m_stateMaschine = nullptr;
	bool m_active = false;

private:
	static unsigned int getNextId(){
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
		static unsigned int stateIdAcc;
		return stateIdAcc++;
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <_ZN5State9getNextIdEv+0x18>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	4903      	ldr	r1, [pc, #12]	; (800a248 <_ZN5State9getNextIdEv+0x18>)
 800a23c:	600a      	str	r2, [r1, #0]
	}
 800a23e:	4618      	mov	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000c68 	.word	0x20000c68

0800a24c <_ZN5StateD1Ev>:
	virtual ~State() = default;
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <_ZN5StateD1Ev+0x1c>)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4618      	mov	r0, r3
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	0801f9f8 	.word	0x0801f9f8

0800a26c <_ZN5StateD0Ev>:
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff ffe9 	bl	800a24c <_ZN5StateD1Ev>
 800a27a:	210c      	movs	r1, #12
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f011 ff4d 	bl	801c11c <_ZdlPvj>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZN22PodStopLevitationStateC1Ev>:

#include <State.hpp>

class PodStopLevitationState: public State {
public:
	PodStopLevitationState() : State(POD_STOP_LEVITATION) {}
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2107      	movs	r1, #7
 800a298:	4618      	mov	r0, r3
 800a29a:	f7ff ffa1 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a29e:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <_ZN22PodStopLevitationStateC1Ev+0x24>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	0801fbc8 	.word	0x0801fbc8

0800a2b4 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800a2b4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a2b8:	b087      	sub	sp, #28
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x7ull;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	7df9      	ldrb	r1, [r7, #23]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	468a      	mov	sl, r1
 800a2d4:	4683      	mov	fp, r0
 800a2d6:	f00a 0407 	and.w	r4, sl, #7
 800a2da:	2500      	movs	r5, #0
 800a2dc:	ea42 0804 	orr.w	r8, r2, r4
 800a2e0:	ea43 0905 	orr.w	r9, r3, r5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a2f4:	4770      	bx	lr

0800a2f6 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800a2f6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 3) & 0x38ull;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2200      	movs	r2, #0
 800a314:	4698      	mov	r8, r3
 800a316:	4691      	mov	r9, r2
 800a318:	f04f 0200 	mov.w	r2, #0
 800a31c:	f04f 0300 	mov.w	r3, #0
 800a320:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a324:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a328:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a32c:	f002 0438 	and.w	r4, r2, #56	; 0x38
 800a330:	2500      	movs	r5, #0
 800a332:	ea40 0a04 	orr.w	sl, r0, r4
 800a336:	ea41 0b05 	orr.w	fp, r1, r5
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800a340:	bf00      	nop
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a34a:	4770      	bx	lr

0800a34c <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800a34c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a350:	b087      	sub	sp, #28
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0x700ull;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	2200      	movs	r2, #0
 800a36a:	4698      	mov	r8, r3
 800a36c:	4691      	mov	r9, r2
 800a36e:	f04f 0200 	mov.w	r2, #0
 800a372:	f04f 0300 	mov.w	r3, #0
 800a376:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800a37a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800a37e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800a382:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 800a386:	2500      	movs	r5, #0
 800a388:	ea40 0a04 	orr.w	sl, r0, r4
 800a38c:	ea41 0b05 	orr.w	fp, r1, r5
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a3a0:	4770      	bx	lr
	...

0800a3a4 <_ZN17PodEmergencyStateC1Ev>:

#include "estdio.hpp"

class PodEmergencyState : public State {
public:
	PodEmergencyState() : State(POD_EMERGENCY) {}
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	210b      	movs	r1, #11
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff ff15 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a3b6:	4a04      	ldr	r2, [pc, #16]	; (800a3c8 <_ZN17PodEmergencyStateC1Ev+0x24>)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	601a      	str	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0801fa50 	.word	0x0801fa50

0800a3cc <_ZN12PodIdleStateC1Ev>:

#include "estdio.hpp"

class PodIdleState : public State{
public:
	PodIdleState() : State(POD_IDLE) {}
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff ff01 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a3de:	4a04      	ldr	r2, [pc, #16]	; (800a3f0 <_ZN12PodIdleStateC1Ev+0x24>)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0801fa6c 	.word	0x0801fa6c

0800a3f4 <_ZN25PodLaunchPreparationStateC1Ev>:
#include "State.hpp"
#include "SDC.hpp"

class PodLaunchPreparationState : public State{
public:
	PodLaunchPreparationState() : State(POD_LAUNCH_PREPARATION){}
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2102      	movs	r1, #2
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff feed 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a406:	4a04      	ldr	r2, [pc, #16]	; (800a418 <_ZN25PodLaunchPreparationStateC1Ev+0x24>)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	0801fb20 	.word	0x0801fb20

0800a41c <_ZN17PodLaunchingStateC1Ev>:

#include "State.hpp"

class PodLaunchingState : public State{
public:
	PodLaunchingState() : State(POD_LAUNCHING) {}
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2106      	movs	r1, #6
 800a428:	4618      	mov	r0, r3
 800a42a:	f7ff fed9 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a42e:	4a04      	ldr	r2, [pc, #16]	; (800a440 <_ZN17PodLaunchingStateC1Ev+0x24>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	0801fb3c 	.word	0x0801fb3c

0800a444 <_ZN21PodReadyToLaunchStateC1Ev>:
#include "State.hpp"


class PodReadyToLaunchState : public State{
public:
	PodReadyToLaunchState() : State(POD_READY_TO_LAUNCH) {}
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2103      	movs	r1, #3
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff fec5 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <_ZN21PodReadyToLaunchStateC1Ev+0x24>)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	0801fb58 	.word	0x0801fb58

0800a46c <_ZN18PodStartLevitationC1Ev>:
#include "PodState.hpp"


class PodStartLevitation: public State {
public:
	PodStartLevitation() : State(POD_SAFE_TO_APPROACH) {}
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	210a      	movs	r1, #10
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff feb1 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <_ZN18PodStartLevitationC1Ev+0x24>)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	0801fb90 	.word	0x0801fb90

0800a494 <_ZN17PodSafeToApproachC1Ev>:

#include <State.hpp>

class PodSafeToApproach: public State {
public:
	PodSafeToApproach() : State(POD_SAFE_TO_APPROACH) {}
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	210a      	movs	r1, #10
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff fe9d 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a4a6:	4a04      	ldr	r2, [pc, #16]	; (800a4b8 <_ZN17PodSafeToApproachC1Ev+0x24>)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0801fb74 	.word	0x0801fb74

0800a4bc <_ZN15PodStartupStateC1Ev>:
#include <State.hpp>
#include "estdio.hpp"

class PodStartupState: public State {
public:
	PodStartupState() : State(POD_OFF) {}
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7ff fe89 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a4ce:	4a04      	ldr	r2, [pc, #16]	; (800a4e0 <_ZN15PodStartupStateC1Ev+0x24>)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	0801fbac 	.word	0x0801fbac

0800a4e4 <_ZN13PodBreakStateC1Ev>:

#include "State.hpp"

class PodBreakState : public State {
public:
	PodBreakState() : State(POD_BREAK) {}
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2108      	movs	r1, #8
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fe75 	bl	800a1e0 <_ZN5StateC1E8PodState>
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <_ZN13PodBreakStateC1Ev+0x24>)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4618      	mov	r0, r3
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	0801fa34 	.word	0x0801fa34

0800a50c <_ZN11GlobalStateD1Ev>:
	void start(){
		broadcastState(m_startupState.getPodState());
		m_stateMaschine.start<PodStartupState>();
	}

	~GlobalState() = default;
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	33c0      	adds	r3, #192	; 0xc0
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fdff 	bl	800b11c <_ZN17PodEmergencyStateD1Ev>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	33b4      	adds	r3, #180	; 0xb4
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fdd8 	bl	800b0d8 <_ZN17PodSafeToApproachD1Ev>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	33a8      	adds	r3, #168	; 0xa8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fdb1 	bl	800b094 <_ZN13PodBreakStateD1Ev>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	339c      	adds	r3, #156	; 0x9c
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fd8a 	bl	800b050 <_ZN22PodStopLevitationStateD1Ev>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3390      	adds	r3, #144	; 0x90
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fd63 	bl	800b00c <_ZN17PodLaunchingStateD1Ev>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3384      	adds	r3, #132	; 0x84
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fd3c 	bl	800afc8 <_ZN18PodStartLevitationD1Ev>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3378      	adds	r3, #120	; 0x78
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fd15 	bl	800af84 <_ZN25PodLaunchPreparationStateD1Ev>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	336c      	adds	r3, #108	; 0x6c
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fcee 	bl	800af40 <_ZN21PodReadyToLaunchStateD1Ev>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3360      	adds	r3, #96	; 0x60
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fcc7 	bl	800aefc <_ZN12PodIdleStateD1Ev>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3354      	adds	r3, #84	; 0x54
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fca0 	bl	800aeb8 <_ZN15PodStartupStateD1Ev>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <__tcf_1>:
		static GlobalState instance;
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
 800a588:	4801      	ldr	r0, [pc, #4]	; (800a590 <__tcf_1+0xc>)
 800a58a:	f7ff ffbf 	bl	800a50c <_ZN11GlobalStateD1Ev>
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000c6c 	.word	0x20000c6c

0800a594 <_ZN11GlobalState11getInstanceEv>:
	static GlobalState& getInstance() {
 800a594:	b580      	push	{r7, lr}
 800a596:	af00      	add	r7, sp, #0
		static GlobalState instance;
 800a598:	4b12      	ldr	r3, [pc, #72]	; (800a5e4 <_ZN11GlobalState11getInstanceEv+0x50>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f3bf 8f5b 	dmb	ish
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bf0c      	ite	eq
 800a5aa:	2301      	moveq	r3, #1
 800a5ac:	2300      	movne	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d013      	beq.n	800a5dc <_ZN11GlobalState11getInstanceEv+0x48>
 800a5b4:	480b      	ldr	r0, [pc, #44]	; (800a5e4 <_ZN11GlobalState11getInstanceEv+0x50>)
 800a5b6:	f011 fdb5 	bl	801c124 <__cxa_guard_acquire>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bf14      	ite	ne
 800a5c0:	2301      	movne	r3, #1
 800a5c2:	2300      	moveq	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d008      	beq.n	800a5dc <_ZN11GlobalState11getInstanceEv+0x48>
 800a5ca:	4807      	ldr	r0, [pc, #28]	; (800a5e8 <_ZN11GlobalState11getInstanceEv+0x54>)
 800a5cc:	f000 f84a 	bl	800a664 <_ZN11GlobalStateC1Ev>
 800a5d0:	4806      	ldr	r0, [pc, #24]	; (800a5ec <_ZN11GlobalState11getInstanceEv+0x58>)
 800a5d2:	f012 f81c 	bl	801c60e <atexit>
 800a5d6:	4803      	ldr	r0, [pc, #12]	; (800a5e4 <_ZN11GlobalState11getInstanceEv+0x50>)
 800a5d8:	f011 fdb0 	bl	801c13c <__cxa_guard_release>
		return instance;
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <_ZN11GlobalState11getInstanceEv+0x54>)
	}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000d38 	.word	0x20000d38
 800a5e8:	20000c6c 	.word	0x20000c6c
 800a5ec:	0800a585 	.word	0x0800a585

0800a5f0 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f240 1181 	movw	r1, #385	; 0x181
 800a602:	f7f6 fcc3 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <_ZN11GlobalState14broadcastStateE8PodState>:
	GlobalState& operator=(GlobalState&) = delete;
	GlobalState& operator=(GlobalState&&) = delete;

private:

	void broadcastState(PodState state) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
		can::Message<can::messages::SensorF_TX_StatePod> msg;
 800a61c:	f107 0308 	add.w	r3, r7, #8
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff ffe5 	bl	800a5f0 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>
		msg.set<can::signals::SensorF_TX_PodState>(static_cast<uint8_t>(state));
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	f107 0308 	add.w	r3, r7, #8
 800a62c:	4611      	mov	r1, r2
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f8da 	bl	800a7e8 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>
		msg.set<can::signals::SensorF_TX_PodState_Last>(static_cast<uint8_t>(state));
 800a634:	78fa      	ldrb	r2, [r7, #3]
 800a636:	f107 0308 	add.w	r3, r7, #8
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 f8e8 	bl	800a812 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>
		msg.set<can::signals::SensorF_TX_PodState_Target>(static_cast<uint8_t>(state));
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	f107 0308 	add.w	r3, r7, #8
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f8f6 	bl	800a83c <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>
		msg.send();
 800a650:	f107 0308 	add.w	r3, r7, #8
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f7f6 fde2 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800a65c:	bf00      	nop
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <_ZN11GlobalStateC1Ev>:

	explicit GlobalState() : m_stateMaschine(&m_stateMemory){
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f8f9 	bl	800a866 <_ZN19StateMaschineMemoryILj15EEC1Ev>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	333c      	adds	r3, #60	; 0x3c
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f8fd 	bl	800a87c <_ZN13StateMaschineC1I19StateMaschineMemoryILj15EEEEPT_>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3354      	adds	r3, #84	; 0x54
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff ff18 	bl	800a4bc <_ZN15PodStartupStateC1Ev>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3360      	adds	r3, #96	; 0x60
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fe9b 	bl	800a3cc <_ZN12PodIdleStateC1Ev>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	336c      	adds	r3, #108	; 0x6c
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fed2 	bl	800a444 <_ZN21PodReadyToLaunchStateC1Ev>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3378      	adds	r3, #120	; 0x78
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fea5 	bl	800a3f4 <_ZN25PodLaunchPreparationStateC1Ev>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3384      	adds	r3, #132	; 0x84
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fedc 	bl	800a46c <_ZN18PodStartLevitationC1Ev>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	3390      	adds	r3, #144	; 0x90
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff feaf 	bl	800a41c <_ZN17PodLaunchingStateC1Ev>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	339c      	adds	r3, #156	; 0x9c
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fde2 	bl	800a28c <_ZN22PodStopLevitationStateC1Ev>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	33a8      	adds	r3, #168	; 0xa8
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff ff09 	bl	800a4e4 <_ZN13PodBreakStateC1Ev>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	33b4      	adds	r3, #180	; 0xb4
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff fedc 	bl	800a494 <_ZN17PodSafeToApproachC1Ev>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	33c0      	adds	r3, #192	; 0xc0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff fe5f 	bl	800a3a4 <_ZN17PodEmergencyStateC1Ev>
		m_stateMaschine.registerState(m_startupState);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3354      	adds	r3, #84	; 0x54
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	f000 f8e7 	bl	800a8c6 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>
		m_stateMaschine.registerState(m_idleState);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	3360      	adds	r3, #96	; 0x60
 800a702:	4619      	mov	r1, r3
 800a704:	4610      	mov	r0, r2
 800a706:	f000 f8f4 	bl	800a8f2 <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>
		m_stateMaschine.registerState(m_readyToLaunch);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	336c      	adds	r3, #108	; 0x6c
 800a714:	4619      	mov	r1, r3
 800a716:	4610      	mov	r0, r2
 800a718:	f000 f901 	bl	800a91e <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>
		m_stateMaschine.registerState(m_launchPrep);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3378      	adds	r3, #120	; 0x78
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f000 f90e 	bl	800a94a <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>
		m_stateMaschine.registerState(m_podStartLevitation);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3384      	adds	r3, #132	; 0x84
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f000 f91b 	bl	800a976 <_ZN13StateMaschine13registerStateI18PodStartLevitationEEvRT_>
		m_stateMaschine.registerState(m_launchingState);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3390      	adds	r3, #144	; 0x90
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f000 f928 	bl	800a9a2 <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>
		m_stateMaschine.registerState(m_stopState);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	339c      	adds	r3, #156	; 0x9c
 800a75c:	4619      	mov	r1, r3
 800a75e:	4610      	mov	r0, r2
 800a760:	f000 f935 	bl	800a9ce <_ZN13StateMaschine13registerStateI22PodStopLevitationStateEEvRT_>
		m_stateMaschine.registerState(m_breakState);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	33a8      	adds	r3, #168	; 0xa8
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f000 f942 	bl	800a9fa <_ZN13StateMaschine13registerStateI13PodBreakStateEEvRT_>
		m_stateMaschine.registerState(m_safeState);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	33b4      	adds	r3, #180	; 0xb4
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f000 f94f 	bl	800aa26 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>
		m_stateMaschine.registerState(m_emcyState);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	33c0      	adds	r3, #192	; 0xc0
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f000 f95c 	bl	800aa52 <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>
	}
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZN7canzero24handle_emergency_warningEv>:


#include "GlobalState.hpp"
#include "canzero.hpp"

void canzero::handle_emergency_warning(){
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
	//TODO prevent overwriting of emergency states.
	GlobalState::getInstance().setState<PodEmergencyState>();
 800a7a8:	f7ff fef4 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f965 	bl	800aa7e <_ZN11GlobalState8setStateI17PodEmergencyStateEEvv>
}
 800a7b4:	bf00      	nop
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <_ZN7canzero21handle_heartbeat_missEv>:


void canzero::handle_heartbeat_miss(){
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
	//TODO remove me later
	//GlobalState::getInstance().setState<PodEmergencyState>();
}
 800a7bc:	bf00      	nop
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
	//ignore for now.
	//TODO missing default implementation.
}
 800a7ce:	bf00      	nop
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <_ZN7canzero32handle_trasmission_request_errorEv>:

void canzero::handle_trasmission_request_error(){
 800a7da:	b480      	push	{r7}
 800a7dc:	af00      	add	r7, sp, #0
	//ignore for now.
	//TODO missing default implementation.
}
 800a7de:	bf00      	nop
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f103 0008 	add.w	r0, r3, #8
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f103 0110 	add.w	r1, r3, #16
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	1d1a      	adds	r2, r3, #4
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	f7ff fd55 	bl	800a2b4 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>
        }
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800a812:	b580      	push	{r7, lr}
 800a814:	b082      	sub	sp, #8
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f103 0008 	add.w	r0, r3, #8
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f103 0110 	add.w	r1, r3, #16
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	1d1a      	adds	r2, r3, #4
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	f7ff fd61 	bl	800a2f6 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>
        }
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f103 0008 	add.w	r0, r3, #8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f103 0110 	add.w	r1, r3, #16
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	1d1a      	adds	r2, r3, #4
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	f7ff fd77 	bl	800a34c <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>
        }
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <_ZN19StateMaschineMemoryILj15EEC1Ev>:

template<size_t NUMBER_OF_STATES>
class StateMaschineMemory {
public:
	friend class StateMaschine;
	explicit StateMaschineMemory(){ }
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <_ZN13StateMaschineC1I19StateMaschineMemoryILj15EEEEPT_>:
#include "main.h"

class StateMaschine {
public:
	template<typename StateMaschineMemory_t>
	explicit StateMaschine(StateMaschineMemory_t* memory) {
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	609a      	str	r2, [r3, #8]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	60da      	str	r2, [r3, #12]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	611a      	str	r2, [r3, #16]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	751a      	strb	r2, [r3, #20]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	755a      	strb	r2, [r3, #21]
		m_states = memory->m_states;
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	601a      	str	r2, [r3, #0]
		m_statesSize = memory->size();
 800a8b0:	6838      	ldr	r0, [r7, #0]
 800a8b2:	f000 f92b 	bl	800ab0c <_ZNK19StateMaschineMemoryILj15EE4sizeEv>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	605a      	str	r2, [r3, #4]
	}
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>:
	template<typename StateImplementation>
	void registerState(StateImplementation &state) {
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	6039      	str	r1, [r7, #0]
		static_assert(std::is_base_of<State, StateImplementation>::value);
		unsigned int id = State::getId<StateImplementation>();
 800a8d0:	f000 f8f0 	bl	800aab4 <_ZN5State5getIdI15PodStartupStateEEjv>
 800a8d4:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	601a      	str	r2, [r3, #0]
	}
 800a8ea:	bf00      	nop
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a8fc:	f000 f912 	bl	800ab24 <_ZN5State5getIdI12PodIdleStateEEjv>
 800a900:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	601a      	str	r2, [r3, #0]
	}
 800a916:	bf00      	nop
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a91e:	b580      	push	{r7, lr}
 800a920:	b084      	sub	sp, #16
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a928:	f000 f928 	bl	800ab7c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 800a92c:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	601a      	str	r2, [r3, #0]
	}
 800a942:	bf00      	nop
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a954:	f000 f93e 	bl	800abd4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800a958:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	601a      	str	r2, [r3, #0]
	}
 800a96e:	bf00      	nop
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <_ZN13StateMaschine13registerStateI18PodStartLevitationEEvRT_>:
	void registerState(StateImplementation &state) {
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a980:	f000 f954 	bl	800ac2c <_ZN5State5getIdI18PodStartLevitationEEjv>
 800a984:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	601a      	str	r2, [r3, #0]
	}
 800a99a:	bf00      	nop
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a9ac:	f000 f96a 	bl	800ac84 <_ZN5State5getIdI17PodLaunchingStateEEjv>
 800a9b0:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	601a      	str	r2, [r3, #0]
	}
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <_ZN13StateMaschine13registerStateI22PodStopLevitationStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800a9d8:	f000 f980 	bl	800acdc <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 800a9dc:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	601a      	str	r2, [r3, #0]
	}
 800a9f2:	bf00      	nop
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <_ZN13StateMaschine13registerStateI13PodBreakStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800aa04:	f000 f996 	bl	800ad34 <_ZN5State5getIdI13PodBreakStateEEjv>
 800aa08:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4413      	add	r3, r2
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	601a      	str	r2, [r3, #0]
	}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>:
	void registerState(StateImplementation &state) {
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800aa30:	f000 f9ac 	bl	800ad8c <_ZN5State5getIdI17PodSafeToApproachEEjv>
 800aa34:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	601a      	str	r2, [r3, #0]
	}
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800aa5c:	f000 f9c2 	bl	800ade4 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 800aa60:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	4413      	add	r3, r2
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	601a      	str	r2, [r3, #0]
	}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <_ZN11GlobalState8setStateI17PodEmergencyStateEEvv>:
	void setState(){
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	333c      	adds	r3, #60	; 0x3c
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 f9d6 	bl	800ae3c <_ZN13StateMaschine8getStateI17PodEmergencyStateEERK5Statev>
 800aa90:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fbc0 	bl	800a218 <_ZNK5State11getPodStateEv>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff fdb7 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	333c      	adds	r3, #60	; 0x3c
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 f9d8 	bl	800ae5c <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv>
	}
 800aaac:	bf00      	nop
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_ZN5State5getIdI15PodStartupStateEEjv>:
	static unsigned int getId(){
 800aab4:	b580      	push	{r7, lr}
 800aab6:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800aab8:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	f3bf 8f5b 	dmb	ish
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bf0c      	ite	eq
 800aaca:	2301      	moveq	r3, #1
 800aacc:	2300      	movne	r3, #0
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d012      	beq.n	800aafa <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 800aad4:	480b      	ldr	r0, [pc, #44]	; (800ab04 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 800aad6:	f011 fb25 	bl	801c124 <__cxa_guard_acquire>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bf14      	ite	ne
 800aae0:	2301      	movne	r3, #1
 800aae2:	2300      	moveq	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d007      	beq.n	800aafa <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 800aaea:	f7ff fba1 	bl	800a230 <_ZN5State9getNextIdEv>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	4a05      	ldr	r2, [pc, #20]	; (800ab08 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	4803      	ldr	r0, [pc, #12]	; (800ab04 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 800aaf6:	f011 fb21 	bl	801c13c <__cxa_guard_release>
		return id;
 800aafa:	4b03      	ldr	r3, [pc, #12]	; (800ab08 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 800aafc:	681b      	ldr	r3, [r3, #0]
	}
 800aafe:	4618      	mov	r0, r3
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20000d40 	.word	0x20000d40
 800ab08:	20000d3c 	.word	0x20000d3c

0800ab0c <_ZNK19StateMaschineMemoryILj15EE4sizeEv>:
private:
	constexpr size_t size() const {return NUMBER_OF_STATES;}
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	230f      	movs	r3, #15
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <_ZN5State5getIdI12PodIdleStateEEjv>:
	static unsigned int getId(){
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ab28:	4b12      	ldr	r3, [pc, #72]	; (800ab74 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f3bf 8f5b 	dmb	ish
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bf0c      	ite	eq
 800ab3a:	2301      	moveq	r3, #1
 800ab3c:	2300      	movne	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d012      	beq.n	800ab6a <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 800ab44:	480b      	ldr	r0, [pc, #44]	; (800ab74 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 800ab46:	f011 faed 	bl	801c124 <__cxa_guard_acquire>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	bf14      	ite	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	2300      	moveq	r3, #0
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 800ab5a:	f7ff fb69 	bl	800a230 <_ZN5State9getNextIdEv>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4a05      	ldr	r2, [pc, #20]	; (800ab78 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	4803      	ldr	r0, [pc, #12]	; (800ab74 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 800ab66:	f011 fae9 	bl	801c13c <__cxa_guard_release>
		return id;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
	}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20000d48 	.word	0x20000d48
 800ab78:	20000d44 	.word	0x20000d44

0800ab7c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>:
	static unsigned int getId(){
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ab80:	4b12      	ldr	r3, [pc, #72]	; (800abcc <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	f3bf 8f5b 	dmb	ish
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bf0c      	ite	eq
 800ab92:	2301      	moveq	r3, #1
 800ab94:	2300      	movne	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d012      	beq.n	800abc2 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 800ab9c:	480b      	ldr	r0, [pc, #44]	; (800abcc <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 800ab9e:	f011 fac1 	bl	801c124 <__cxa_guard_acquire>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	bf14      	ite	ne
 800aba8:	2301      	movne	r3, #1
 800abaa:	2300      	moveq	r3, #0
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 800abb2:	f7ff fb3d 	bl	800a230 <_ZN5State9getNextIdEv>
 800abb6:	4603      	mov	r3, r0
 800abb8:	4a05      	ldr	r2, [pc, #20]	; (800abd0 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 800abba:	6013      	str	r3, [r2, #0]
 800abbc:	4803      	ldr	r0, [pc, #12]	; (800abcc <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 800abbe:	f011 fabd 	bl	801c13c <__cxa_guard_release>
		return id;
 800abc2:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 800abc4:	681b      	ldr	r3, [r3, #0]
	}
 800abc6:	4618      	mov	r0, r3
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	20000d50 	.word	0x20000d50
 800abd0:	20000d4c 	.word	0x20000d4c

0800abd4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>:
	static unsigned int getId(){
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800abd8:	4b12      	ldr	r3, [pc, #72]	; (800ac24 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f3bf 8f5b 	dmb	ish
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	bf0c      	ite	eq
 800abea:	2301      	moveq	r3, #1
 800abec:	2300      	movne	r3, #0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d012      	beq.n	800ac1a <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 800abf4:	480b      	ldr	r0, [pc, #44]	; (800ac24 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 800abf6:	f011 fa95 	bl	801c124 <__cxa_guard_acquire>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf14      	ite	ne
 800ac00:	2301      	movne	r3, #1
 800ac02:	2300      	moveq	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d007      	beq.n	800ac1a <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 800ac0a:	f7ff fb11 	bl	800a230 <_ZN5State9getNextIdEv>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	4803      	ldr	r0, [pc, #12]	; (800ac24 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 800ac16:	f011 fa91 	bl	801c13c <__cxa_guard_release>
		return id;
 800ac1a:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
	}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000d58 	.word	0x20000d58
 800ac28:	20000d54 	.word	0x20000d54

0800ac2c <_ZN5State5getIdI18PodStartLevitationEEjv>:
	static unsigned int getId(){
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ac30:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f3bf 8f5b 	dmb	ish
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bf0c      	ite	eq
 800ac42:	2301      	moveq	r3, #1
 800ac44:	2300      	movne	r3, #0
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d012      	beq.n	800ac72 <_ZN5State5getIdI18PodStartLevitationEEjv+0x46>
 800ac4c:	480b      	ldr	r0, [pc, #44]	; (800ac7c <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 800ac4e:	f011 fa69 	bl	801c124 <__cxa_guard_acquire>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <_ZN5State5getIdI18PodStartLevitationEEjv+0x46>
 800ac62:	f7ff fae5 	bl	800a230 <_ZN5State9getNextIdEv>
 800ac66:	4603      	mov	r3, r0
 800ac68:	4a05      	ldr	r2, [pc, #20]	; (800ac80 <_ZN5State5getIdI18PodStartLevitationEEjv+0x54>)
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	4803      	ldr	r0, [pc, #12]	; (800ac7c <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 800ac6e:	f011 fa65 	bl	801c13c <__cxa_guard_release>
		return id;
 800ac72:	4b03      	ldr	r3, [pc, #12]	; (800ac80 <_ZN5State5getIdI18PodStartLevitationEEjv+0x54>)
 800ac74:	681b      	ldr	r3, [r3, #0]
	}
 800ac76:	4618      	mov	r0, r3
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000d60 	.word	0x20000d60
 800ac80:	20000d5c 	.word	0x20000d5c

0800ac84 <_ZN5State5getIdI17PodLaunchingStateEEjv>:
	static unsigned int getId(){
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ac88:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f3bf 8f5b 	dmb	ish
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bf0c      	ite	eq
 800ac9a:	2301      	moveq	r3, #1
 800ac9c:	2300      	movne	r3, #0
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d012      	beq.n	800acca <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 800aca4:	480b      	ldr	r0, [pc, #44]	; (800acd4 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800aca6:	f011 fa3d 	bl	801c124 <__cxa_guard_acquire>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	bf14      	ite	ne
 800acb0:	2301      	movne	r3, #1
 800acb2:	2300      	moveq	r3, #0
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 800acba:	f7ff fab9 	bl	800a230 <_ZN5State9getNextIdEv>
 800acbe:	4603      	mov	r3, r0
 800acc0:	4a05      	ldr	r2, [pc, #20]	; (800acd8 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	4803      	ldr	r0, [pc, #12]	; (800acd4 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800acc6:	f011 fa39 	bl	801c13c <__cxa_guard_release>
		return id;
 800acca:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 800accc:	681b      	ldr	r3, [r3, #0]
	}
 800acce:	4618      	mov	r0, r3
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000d68 	.word	0x20000d68
 800acd8:	20000d64 	.word	0x20000d64

0800acdc <_ZN5State5getIdI22PodStopLevitationStateEEjv>:
	static unsigned int getId(){
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ace0:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f3bf 8f5b 	dmb	ish
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b00      	cmp	r3, #0
 800acf0:	bf0c      	ite	eq
 800acf2:	2301      	moveq	r3, #1
 800acf4:	2300      	movne	r3, #0
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d012      	beq.n	800ad22 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x46>
 800acfc:	480b      	ldr	r0, [pc, #44]	; (800ad2c <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800acfe:	f011 fa11 	bl	801c124 <__cxa_guard_acquire>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	bf14      	ite	ne
 800ad08:	2301      	movne	r3, #1
 800ad0a:	2300      	moveq	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x46>
 800ad12:	f7ff fa8d 	bl	800a230 <_ZN5State9getNextIdEv>
 800ad16:	4603      	mov	r3, r0
 800ad18:	4a05      	ldr	r2, [pc, #20]	; (800ad30 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x54>)
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	4803      	ldr	r0, [pc, #12]	; (800ad2c <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800ad1e:	f011 fa0d 	bl	801c13c <__cxa_guard_release>
		return id;
 800ad22:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x54>)
 800ad24:	681b      	ldr	r3, [r3, #0]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000d70 	.word	0x20000d70
 800ad30:	20000d6c 	.word	0x20000d6c

0800ad34 <_ZN5State5getIdI13PodBreakStateEEjv>:
	static unsigned int getId(){
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ad38:	4b12      	ldr	r3, [pc, #72]	; (800ad84 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	f3bf 8f5b 	dmb	ish
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bf0c      	ite	eq
 800ad4a:	2301      	moveq	r3, #1
 800ad4c:	2300      	movne	r3, #0
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d012      	beq.n	800ad7a <_ZN5State5getIdI13PodBreakStateEEjv+0x46>
 800ad54:	480b      	ldr	r0, [pc, #44]	; (800ad84 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 800ad56:	f011 f9e5 	bl	801c124 <__cxa_guard_acquire>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bf14      	ite	ne
 800ad60:	2301      	movne	r3, #1
 800ad62:	2300      	moveq	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d007      	beq.n	800ad7a <_ZN5State5getIdI13PodBreakStateEEjv+0x46>
 800ad6a:	f7ff fa61 	bl	800a230 <_ZN5State9getNextIdEv>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4a05      	ldr	r2, [pc, #20]	; (800ad88 <_ZN5State5getIdI13PodBreakStateEEjv+0x54>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	4803      	ldr	r0, [pc, #12]	; (800ad84 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 800ad76:	f011 f9e1 	bl	801c13c <__cxa_guard_release>
		return id;
 800ad7a:	4b03      	ldr	r3, [pc, #12]	; (800ad88 <_ZN5State5getIdI13PodBreakStateEEjv+0x54>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
	}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000d78 	.word	0x20000d78
 800ad88:	20000d74 	.word	0x20000d74

0800ad8c <_ZN5State5getIdI17PodSafeToApproachEEjv>:
	static unsigned int getId(){
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ad90:	4b12      	ldr	r3, [pc, #72]	; (800addc <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f3bf 8f5b 	dmb	ish
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bf0c      	ite	eq
 800ada2:	2301      	moveq	r3, #1
 800ada4:	2300      	movne	r3, #0
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d012      	beq.n	800add2 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 800adac:	480b      	ldr	r0, [pc, #44]	; (800addc <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 800adae:	f011 f9b9 	bl	801c124 <__cxa_guard_acquire>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bf14      	ite	ne
 800adb8:	2301      	movne	r3, #1
 800adba:	2300      	moveq	r3, #0
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d007      	beq.n	800add2 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 800adc2:	f7ff fa35 	bl	800a230 <_ZN5State9getNextIdEv>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	4803      	ldr	r0, [pc, #12]	; (800addc <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 800adce:	f011 f9b5 	bl	801c13c <__cxa_guard_release>
		return id;
 800add2:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 800add4:	681b      	ldr	r3, [r3, #0]
	}
 800add6:	4618      	mov	r0, r3
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	20000d80 	.word	0x20000d80
 800ade0:	20000d7c 	.word	0x20000d7c

0800ade4 <_ZN5State5getIdI17PodEmergencyStateEEjv>:
	static unsigned int getId(){
 800ade4:	b580      	push	{r7, lr}
 800ade6:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800ade8:	4b12      	ldr	r3, [pc, #72]	; (800ae34 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f3bf 8f5b 	dmb	ish
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f003 0301 	and.w	r3, r3, #1
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bf0c      	ite	eq
 800adfa:	2301      	moveq	r3, #1
 800adfc:	2300      	movne	r3, #0
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d012      	beq.n	800ae2a <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 800ae04:	480b      	ldr	r0, [pc, #44]	; (800ae34 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 800ae06:	f011 f98d 	bl	801c124 <__cxa_guard_acquire>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	bf14      	ite	ne
 800ae10:	2301      	movne	r3, #1
 800ae12:	2300      	moveq	r3, #0
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d007      	beq.n	800ae2a <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 800ae1a:	f7ff fa09 	bl	800a230 <_ZN5State9getNextIdEv>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4a05      	ldr	r2, [pc, #20]	; (800ae38 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	4803      	ldr	r0, [pc, #12]	; (800ae34 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 800ae26:	f011 f989 	bl	801c13c <__cxa_guard_release>
		return id;
 800ae2a:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
	}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20000d88 	.word	0x20000d88
 800ae38:	20000d84 	.word	0x20000d84

0800ae3c <_ZN13StateMaschine8getStateI17PodEmergencyStateEERK5Statev>:
		m_nextState = id;
		taskEXIT_CRITICAL();
	}

	template<typename STATE>
	const State& getState(){
 800ae3c:	b590      	push	{r4, r7, lr}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
		static_assert(std::is_base_of<State, STATE>::value);
		return *(m_states[State::getId<STATE>()]);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681c      	ldr	r4, [r3, #0]
 800ae48:	f7ff ffcc 	bl	800ade4 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4423      	add	r3, r4
 800ae52:	681b      	ldr	r3, [r3, #0]
	}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd90      	pop	{r4, r7, pc}

0800ae5c <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv>:
	void setState() {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800ae64:	f010 fe3e 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2200      	movs	r2, #0
 800ae78:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800ae82:	f7ff ffaf 	bl	800ade4 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 800ae86:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv+0x38>
			Error_Handler();
 800ae90:	f005 f872 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2201      	movs	r2, #1
 800aea2:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800aeaa:	f010 fe4b 	bl	801bb44 <vPortExitCritical>
	}
 800aeae:	bf00      	nop
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <_ZN15PodStartupStateD1Ev>:
class PodStartupState: public State {
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	4a05      	ldr	r2, [pc, #20]	; (800aed8 <_ZN15PodStartupStateD1Ev+0x20>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff f9bf 	bl	800a24c <_ZN5StateD1Ev>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	0801fbac 	.word	0x0801fbac

0800aedc <_ZN15PodStartupStateD0Ev>:
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff ffe7 	bl	800aeb8 <_ZN15PodStartupStateD1Ev>
 800aeea:	210c      	movs	r1, #12
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f011 f915 	bl	801c11c <_ZdlPvj>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <_ZN12PodIdleStateD1Ev>:
class PodIdleState : public State{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	4a05      	ldr	r2, [pc, #20]	; (800af1c <_ZN12PodIdleStateD1Ev+0x20>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff f99d 	bl	800a24c <_ZN5StateD1Ev>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	0801fa6c 	.word	0x0801fa6c

0800af20 <_ZN12PodIdleStateD0Ev>:
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff ffe7 	bl	800aefc <_ZN12PodIdleStateD1Ev>
 800af2e:	210c      	movs	r1, #12
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f011 f8f3 	bl	801c11c <_ZdlPvj>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <_ZN21PodReadyToLaunchStateD1Ev>:
class PodReadyToLaunchState : public State{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	4a05      	ldr	r2, [pc, #20]	; (800af60 <_ZN21PodReadyToLaunchStateD1Ev+0x20>)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff f97b 	bl	800a24c <_ZN5StateD1Ev>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	0801fb58 	.word	0x0801fb58

0800af64 <_ZN21PodReadyToLaunchStateD0Ev>:
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff ffe7 	bl	800af40 <_ZN21PodReadyToLaunchStateD1Ev>
 800af72:	210c      	movs	r1, #12
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f011 f8d1 	bl	801c11c <_ZdlPvj>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <_ZN25PodLaunchPreparationStateD1Ev>:
class PodLaunchPreparationState : public State{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	4a05      	ldr	r2, [pc, #20]	; (800afa4 <_ZN25PodLaunchPreparationStateD1Ev+0x20>)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff f959 	bl	800a24c <_ZN5StateD1Ev>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	0801fb20 	.word	0x0801fb20

0800afa8 <_ZN25PodLaunchPreparationStateD0Ev>:
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff ffe7 	bl	800af84 <_ZN25PodLaunchPreparationStateD1Ev>
 800afb6:	210c      	movs	r1, #12
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f011 f8af 	bl	801c11c <_ZdlPvj>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <_ZN18PodStartLevitationD1Ev>:
class PodStartLevitation: public State {
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	4a05      	ldr	r2, [pc, #20]	; (800afe8 <_ZN18PodStartLevitationD1Ev+0x20>)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff f937 	bl	800a24c <_ZN5StateD1Ev>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	0801fb90 	.word	0x0801fb90

0800afec <_ZN18PodStartLevitationD0Ev>:
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ffe7 	bl	800afc8 <_ZN18PodStartLevitationD1Ev>
 800affa:	210c      	movs	r1, #12
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f011 f88d 	bl	801c11c <_ZdlPvj>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <_ZN17PodLaunchingStateD1Ev>:
class PodLaunchingState : public State{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	4a05      	ldr	r2, [pc, #20]	; (800b02c <_ZN17PodLaunchingStateD1Ev+0x20>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7ff f915 	bl	800a24c <_ZN5StateD1Ev>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	0801fb3c 	.word	0x0801fb3c

0800b030 <_ZN17PodLaunchingStateD0Ev>:
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ffe7 	bl	800b00c <_ZN17PodLaunchingStateD1Ev>
 800b03e:	210c      	movs	r1, #12
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f011 f86b 	bl	801c11c <_ZdlPvj>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <_ZN22PodStopLevitationStateD1Ev>:
class PodStopLevitationState: public State {
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	4a05      	ldr	r2, [pc, #20]	; (800b070 <_ZN22PodStopLevitationStateD1Ev+0x20>)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff f8f3 	bl	800a24c <_ZN5StateD1Ev>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	0801fbc8 	.word	0x0801fbc8

0800b074 <_ZN22PodStopLevitationStateD0Ev>:
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff ffe7 	bl	800b050 <_ZN22PodStopLevitationStateD1Ev>
 800b082:	210c      	movs	r1, #12
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f011 f849 	bl	801c11c <_ZdlPvj>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4618      	mov	r0, r3
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <_ZN13PodBreakStateD1Ev>:
class PodBreakState : public State {
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	4a05      	ldr	r2, [pc, #20]	; (800b0b4 <_ZN13PodBreakStateD1Ev+0x20>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff f8d1 	bl	800a24c <_ZN5StateD1Ev>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	0801fa34 	.word	0x0801fa34

0800b0b8 <_ZN13PodBreakStateD0Ev>:
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ffe7 	bl	800b094 <_ZN13PodBreakStateD1Ev>
 800b0c6:	210c      	movs	r1, #12
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f011 f827 	bl	801c11c <_ZdlPvj>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <_ZN17PodSafeToApproachD1Ev>:
class PodSafeToApproach: public State {
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	4a05      	ldr	r2, [pc, #20]	; (800b0f8 <_ZN17PodSafeToApproachD1Ev+0x20>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7ff f8af 	bl	800a24c <_ZN5StateD1Ev>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	0801fb74 	.word	0x0801fb74

0800b0fc <_ZN17PodSafeToApproachD0Ev>:
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff ffe7 	bl	800b0d8 <_ZN17PodSafeToApproachD1Ev>
 800b10a:	210c      	movs	r1, #12
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f011 f805 	bl	801c11c <_ZdlPvj>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <_ZN17PodEmergencyStateD1Ev>:
class PodEmergencyState : public State {
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	4a05      	ldr	r2, [pc, #20]	; (800b13c <_ZN17PodEmergencyStateD1Ev+0x20>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff f88d 	bl	800a24c <_ZN5StateD1Ev>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	0801fa50 	.word	0x0801fa50

0800b140 <_ZN17PodEmergencyStateD0Ev>:
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ffe7 	bl	800b11c <_ZN17PodEmergencyStateD1Ev>
 800b14e:	210c      	movs	r1, #12
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f010 ffe3 	bl	801c11c <_ZdlPvj>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4618      	mov	r0, r3
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include <ICM20602.hpp>
#include "FreeRTOS.h"
#include "cmsis_os2.h"

ICM20602::ICM20602(const config_t& cfg, SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin) : m_cfg{cfg}, m_hspi{hspi}, m_csPort{csPort}, m_csPin{csPin} {
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	603b      	str	r3, [r7, #0]
 800b16e:	4a2c      	ldr	r2, [pc, #176]	; (800b220 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0xc0>)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	3304      	adds	r3, #4
 800b17a:	6810      	ldr	r0, [r2, #0]
 800b17c:	6018      	str	r0, [r3, #0]
 800b17e:	7912      	ldrb	r2, [r2, #4]
 800b180:	711a      	strb	r2, [r3, #4]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	60da      	str	r2, [r3, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	611a      	str	r2, [r3, #16]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	8b3a      	ldrh	r2, [r7, #24]
 800b192:	829a      	strh	r2, [r3, #20]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	759a      	strb	r2, [r3, #22]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f04f 0200 	mov.w	r2, #0
 800b1a0:	629a      	str	r2, [r3, #40]	; 0x28
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f04f 0200 	mov.w	r2, #0
 800b1a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	631a      	str	r2, [r3, #48]	; 0x30
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f04f 0200 	mov.w	r2, #0
 800b1b8:	635a      	str	r2, [r3, #52]	; 0x34
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	639a      	str	r2, [r3, #56]	; 0x38
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	63da      	str	r2, [r3, #60]	; 0x3c
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f04f 0200 	mov.w	r2, #0
 800b1d0:	641a      	str	r2, [r3, #64]	; 0x40
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f04f 0200 	mov.w	r2, #0
 800b1d8:	645a      	str	r2, [r3, #68]	; 0x44
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f04f 0200 	mov.w	r2, #0
 800b1e0:	649a      	str	r2, [r3, #72]	; 0x48
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	64da      	str	r2, [r3, #76]	; 0x4c
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f04f 0200 	mov.w	r2, #0
 800b1f0:	651a      	str	r2, [r3, #80]	; 0x50
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f04f 0200 	mov.w	r2, #0
 800b1f8:	655a      	str	r2, [r3, #84]	; 0x54
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	659a      	str	r2, [r3, #88]	; 0x58
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	65da      	str	r2, [r3, #92]	; 0x5c
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f04f 0200 	mov.w	r2, #0
 800b210:	661a      	str	r2, [r3, #96]	; 0x60

}
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	0801fa14 	.word	0x0801fa14

0800b224 <_ZN8ICM20602D1Ev>:

ICM20602::~ICM20602() {
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	4a04      	ldr	r2, [pc, #16]	; (800b240 <_ZN8ICM20602D1Ev+0x1c>)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]

}
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	0801fa14 	.word	0x0801fa14

0800b244 <_ZN8ICM20602D0Ev>:
ICM20602::~ICM20602() {
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
}
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ffe9 	bl	800b224 <_ZN8ICM20602D1Ev>
 800b252:	2164      	movs	r1, #100	; 0x64
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f010 ff61 	bl	801c11c <_ZdlPvj>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <_ZN8ICM206028csEnableEv>:

inline void ICM20602::csEnable() {
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_RESET);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6918      	ldr	r0, [r3, #16]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8a9b      	ldrh	r3, [r3, #20]
 800b274:	2200      	movs	r2, #0
 800b276:	4619      	mov	r1, r3
 800b278:	f007 fe98 	bl	8012fac <HAL_GPIO_WritePin>
}
 800b27c:	bf00      	nop
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <_ZN8ICM206029csDisableEv>:
inline void ICM20602::csDisable() {
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_SET);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6918      	ldr	r0, [r3, #16]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8a9b      	ldrh	r3, [r3, #20]
 800b294:	2201      	movs	r2, #1
 800b296:	4619      	mov	r1, r3
 800b298:	f007 fe88 	bl	8012fac <HAL_GPIO_WritePin>
}
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <_ZN8ICM206028writeRegEhh>:

void ICM20602::writeReg(uint8_t reg, uint8_t val) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	70bb      	strb	r3, [r7, #2]
	csEnable();
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f7ff ffd5 	bl	800b264 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68d8      	ldr	r0, [r3, #12]
 800b2be:	1cf9      	adds	r1, r7, #3
 800b2c0:	230a      	movs	r3, #10
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f008 fdb9 	bl	8013e3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(m_hspi, &val, 1, 10);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68d8      	ldr	r0, [r3, #12]
 800b2cc:	1cb9      	adds	r1, r7, #2
 800b2ce:	230a      	movs	r3, #10
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f008 fdb2 	bl	8013e3a <HAL_SPI_Transmit>
	csDisable();
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7ff ffd4 	bl	800b284 <_ZN8ICM206029csDisableEv>
}
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <_ZN8ICM206027readRegEh>:

uint8_t ICM20602::readReg(uint8_t reg) {
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
	reg |= 128;		// Set read bit
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	70fb      	strb	r3, [r7, #3]
	uint8_t val = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	73fb      	strb	r3, [r7, #15]
	csEnable();
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ffb0 	bl	800b264 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	68d8      	ldr	r0, [r3, #12]
 800b308:	1cf9      	adds	r1, r7, #3
 800b30a:	230a      	movs	r3, #10
 800b30c:	2201      	movs	r2, #1
 800b30e:	f008 fd94 	bl	8013e3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, &val, 1, 10);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68d8      	ldr	r0, [r3, #12]
 800b316:	f107 010f 	add.w	r1, r7, #15
 800b31a:	230a      	movs	r3, #10
 800b31c:	2201      	movs	r2, #1
 800b31e:	f008 fec8 	bl	80140b2 <HAL_SPI_Receive>
	csDisable();
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff ffae 	bl	800b284 <_ZN8ICM206029csDisableEv>
	return val;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <_ZN8ICM206025startEv>:

bool ICM20602::start() {
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]

	writeReg(REG_I2C_IF, 0x40);
 800b33c:	2240      	movs	r2, #64	; 0x40
 800b33e:	2170      	movs	r1, #112	; 0x70
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff ffaf 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Reset device and wait
	writeReg(REG_PWR_MGMT_1, 0x80);
 800b346:	2280      	movs	r2, #128	; 0x80
 800b348:	216b      	movs	r1, #107	; 0x6b
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff ffaa 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
	osDelay(pdMS_TO_TICKS(10));
 800b350:	200a      	movs	r0, #10
 800b352:	f00c fc71 	bl	8017c38 <osDelay>

	// Check if connection is working by reading the WHO_AM_I register
	uint8_t whoAmI = readReg(REG_WHO_AM_I);
 800b356:	2175      	movs	r1, #117	; 0x75
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ffc3 	bl	800b2e4 <_ZN8ICM206027readRegEh>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	2b12      	cmp	r3, #18
 800b366:	d001      	beq.n	800b36c <_ZN8ICM206025startEv+0x38>
		return false;
 800b368:	2300      	movs	r3, #0
 800b36a:	e0ce      	b.n	800b50a <_ZN8ICM206025startEv+0x1d6>
	}

	// Set internal clock to PLL
	writeReg(REG_PWR_MGMT_1, 0x01);
 800b36c:	2201      	movs	r2, #1
 800b36e:	216b      	movs	r1, #107	; 0x6b
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7ff ff97 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Accel and gyro standby
	writeReg(REG_PWR_MGMT_2, 0x3F);
 800b376:	223f      	movs	r2, #63	; 0x3f
 800b378:	216c      	movs	r1, #108	; 0x6c
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff92 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Disable FIFO
	writeReg(REG_USER_CTRL, 0x00);
 800b380:	2200      	movs	r2, #0
 800b382:	216a      	movs	r1, #106	; 0x6a
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff8d 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Disable I2C interface
	writeReg(REG_I2C_IF, 0x40);
 800b38a:	2240      	movs	r2, #64	; 0x40
 800b38c:	2170      	movs	r1, #112	; 0x70
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff ff88 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Enable and config acceleration
	if(m_cfg.accelDlpf == ACCEL_DLPF_BYPASS_1046_HZ) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	791b      	ldrb	r3, [r3, #4]
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d105      	bne.n	800b3a8 <_ZN8ICM206025startEv+0x74>
		writeReg(REG_ACCEL_CONFIG_2, (1 << 3));
 800b39c:	2208      	movs	r2, #8
 800b39e:	211d      	movs	r1, #29
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff ff7f 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
 800b3a6:	e006      	b.n	800b3b6 <_ZN8ICM206025startEv+0x82>
	} else {
		writeReg(REG_ACCEL_CONFIG_2, m_cfg.accelDlpf);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	791b      	ldrb	r3, [r3, #4]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	211d      	movs	r1, #29
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ff77 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
	}
	writeReg(REG_ACCEL_CONFIG, m_cfg.accelFs << 3);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	795b      	ldrb	r3, [r3, #5]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	211c      	movs	r1, #28
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff ff6e 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
	if(m_cfg.accelFs == ACCEL_FS_2G) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	795b      	ldrb	r3, [r3, #5]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d104      	bne.n	800b3da <_ZN8ICM206025startEv+0xa6>
		m_accelSensitivity = 16384.0f;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800b3d6:	629a      	str	r2, [r3, #40]	; 0x28
 800b3d8:	e01c      	b.n	800b414 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_4G) {
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	795b      	ldrb	r3, [r3, #5]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d104      	bne.n	800b3ec <_ZN8ICM206025startEv+0xb8>
		m_accelSensitivity = 8192.0f;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800b3e8:	629a      	str	r2, [r3, #40]	; 0x28
 800b3ea:	e013      	b.n	800b414 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_8G) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	795b      	ldrb	r3, [r3, #5]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d104      	bne.n	800b3fe <_ZN8ICM206025startEv+0xca>
		m_accelSensitivity = 4096.0f;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800b3fa:	629a      	str	r2, [r3, #40]	; 0x28
 800b3fc:	e00a      	b.n	800b414 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_16G) {
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	795b      	ldrb	r3, [r3, #5]
 800b402:	2b03      	cmp	r3, #3
 800b404:	d104      	bne.n	800b410 <_ZN8ICM206025startEv+0xdc>
		m_accelSensitivity = 2048.0f;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800b40c:	629a      	str	r2, [r3, #40]	; 0x28
 800b40e:	e001      	b.n	800b414 <_ZN8ICM206025startEv+0xe0>
	} else {
		return false;
 800b410:	2300      	movs	r3, #0
 800b412:	e07a      	b.n	800b50a <_ZN8ICM206025startEv+0x1d6>
	}

	// Enable and config gyro
	if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_3281_HZ) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	799b      	ldrb	r3, [r3, #6]
 800b418:	2b08      	cmp	r3, #8
 800b41a:	d112      	bne.n	800b442 <_ZN8ICM206025startEv+0x10e>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 800b41c:	2200      	movs	r2, #0
 800b41e:	211a      	movs	r1, #26
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff ff3f 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x02);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	79db      	ldrb	r3, [r3, #7]
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	b25b      	sxtb	r3, r3
 800b42e:	f043 0302 	orr.w	r3, r3, #2
 800b432:	b25b      	sxtb	r3, r3
 800b434:	b2db      	uxtb	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	211b      	movs	r1, #27
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff ff32 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
 800b440:	e026      	b.n	800b490 <_ZN8ICM206025startEv+0x15c>
	} else if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_8173_HZ) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	799b      	ldrb	r3, [r3, #6]
 800b446:	2b09      	cmp	r3, #9
 800b448:	d112      	bne.n	800b470 <_ZN8ICM206025startEv+0x13c>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 800b44a:	2200      	movs	r2, #0
 800b44c:	211a      	movs	r1, #26
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff ff28 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x01);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	79db      	ldrb	r3, [r3, #7]
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	b25b      	sxtb	r3, r3
 800b45c:	f043 0301 	orr.w	r3, r3, #1
 800b460:	b25b      	sxtb	r3, r3
 800b462:	b2db      	uxtb	r3, r3
 800b464:	461a      	mov	r2, r3
 800b466:	211b      	movs	r1, #27
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff ff1b 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
 800b46e:	e00f      	b.n	800b490 <_ZN8ICM206025startEv+0x15c>
	} else {
		// Configure dpf and dps
		writeReg(REG_CONFIG, m_cfg.gyroDlpf);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	799b      	ldrb	r3, [r3, #6]
 800b474:	461a      	mov	r2, r3
 800b476:	211a      	movs	r1, #26
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff ff13 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

		writeReg(REG_GYRO_CONFIG, m_cfg.gyroDps << 3);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	79db      	ldrb	r3, [r3, #7]
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
 800b488:	211b      	movs	r1, #27
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff ff0a 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>
	}
	if(m_cfg.gyroDps == GYRO_RANGE_250_DPS) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	79db      	ldrb	r3, [r3, #7]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d103      	bne.n	800b4a0 <_ZN8ICM206025startEv+0x16c>
		m_gyroSensitivity = 131.0f;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a1e      	ldr	r2, [pc, #120]	; (800b514 <_ZN8ICM206025startEv+0x1e0>)
 800b49c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b49e:	e019      	b.n	800b4d4 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_500_DPS) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	79db      	ldrb	r3, [r3, #7]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d103      	bne.n	800b4b0 <_ZN8ICM206025startEv+0x17c>
		m_gyroSensitivity = 65.5f;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a1b      	ldr	r2, [pc, #108]	; (800b518 <_ZN8ICM206025startEv+0x1e4>)
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4ae:	e011      	b.n	800b4d4 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_1000_DPS) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	79db      	ldrb	r3, [r3, #7]
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d103      	bne.n	800b4c0 <_ZN8ICM206025startEv+0x18c>
		m_gyroSensitivity = 32.8f;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a18      	ldr	r2, [pc, #96]	; (800b51c <_ZN8ICM206025startEv+0x1e8>)
 800b4bc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4be:	e009      	b.n	800b4d4 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_2000_DPS) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	79db      	ldrb	r3, [r3, #7]
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	d103      	bne.n	800b4d0 <_ZN8ICM206025startEv+0x19c>
		m_gyroSensitivity = 16.4f;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a15      	ldr	r2, [pc, #84]	; (800b520 <_ZN8ICM206025startEv+0x1ec>)
 800b4cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4ce:	e001      	b.n	800b4d4 <_ZN8ICM206025startEv+0x1a0>
	} else {
		return false;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e01a      	b.n	800b50a <_ZN8ICM206025startEv+0x1d6>
	}

	// We will not enable the FIFO

	// Configure sample rate divider
	writeReg(REG_SMPLRT_DIV, m_cfg.sampleRateDiv);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	7a1b      	ldrb	r3, [r3, #8]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	2119      	movs	r1, #25
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff fee1 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Enable both Accel and Gyro
	writeReg(REG_PWR_MGMT_2, 0x00);
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	216c      	movs	r1, #108	; 0x6c
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fedc 	bl	800b2a4 <_ZN8ICM206028writeRegEhh>

	// Verify that connection is still working
	whoAmI = readReg(REG_WHO_AM_I);
 800b4ec:	2175      	movs	r1, #117	; 0x75
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fef8 	bl	800b2e4 <_ZN8ICM206027readRegEh>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
 800b4fa:	2b12      	cmp	r3, #18
 800b4fc:	d001      	beq.n	800b502 <_ZN8ICM206025startEv+0x1ce>
		return false;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e003      	b.n	800b50a <_ZN8ICM206025startEv+0x1d6>
	}

	m_initDone = true;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	759a      	strb	r2, [r3, #22]
	return true;
 800b508:	2301      	movs	r3, #1
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	43030000 	.word	0x43030000
 800b518:	42830000 	.word	0x42830000
 800b51c:	42033333 	.word	0x42033333
 800b520:	41833333 	.word	0x41833333

0800b524 <_ZN8ICM206024readEv>:


bool ICM20602::read() {
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	if(!m_initDone) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	7d9b      	ldrb	r3, [r3, #22]
 800b530:	f083 0301 	eor.w	r3, r3, #1
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <_ZN8ICM206024readEv+0x1a>
		return false;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e0dc      	b.n	800b6f8 <_ZN8ICM206024readEv+0x1d4>
	}

	// Read seven 16-bit data values, so 14 bytes: ACCEL_X ACCEL_Y ACCEL_Z TEMP GYRO_X GYRO_Y GYRO_Z
	csEnable();
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fe90 	bl	800b264 <_ZN8ICM206028csEnableEv>
	uint8_t reg = REG_ACCEL_XOUT_H | 128;
 800b544:	23bb      	movs	r3, #187	; 0xbb
 800b546:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68d8      	ldr	r0, [r3, #12]
 800b54c:	f107 0109 	add.w	r1, r7, #9
 800b550:	230a      	movs	r3, #10
 800b552:	2201      	movs	r2, #1
 800b554:	f008 fc71 	bl	8013e3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, m_data, 14, 10);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68d8      	ldr	r0, [r3, #12]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f103 0117 	add.w	r1, r3, #23
 800b562:	230a      	movs	r3, #10
 800b564:	220e      	movs	r2, #14
 800b566:	f008 fda4 	bl	80140b2 <HAL_SPI_Receive>
	csDisable();
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fe8a 	bl	800b284 <_ZN8ICM206029csDisableEv>

	// Get acceleration
	int16_t accelXRaw = (m_data[0] << 8) + m_data[1];
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7ddb      	ldrb	r3, [r3, #23]
 800b574:	b29b      	uxth	r3, r3
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	b29a      	uxth	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	7e1b      	ldrb	r3, [r3, #24]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	4413      	add	r3, r2
 800b582:	b29b      	uxth	r3, r3
 800b584:	82fb      	strh	r3, [r7, #22]
	int16_t accelYRaw = (m_data[2] << 8) + m_data[3];
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7e5b      	ldrb	r3, [r3, #25]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	b29a      	uxth	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	7e9b      	ldrb	r3, [r3, #26]
 800b594:	b29b      	uxth	r3, r3
 800b596:	4413      	add	r3, r2
 800b598:	b29b      	uxth	r3, r3
 800b59a:	82bb      	strh	r3, [r7, #20]
	int16_t accelZRaw = (m_data[4] << 8) + m_data[5];
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	7edb      	ldrb	r3, [r3, #27]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	021b      	lsls	r3, r3, #8
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	7f1b      	ldrb	r3, [r3, #28]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	827b      	strh	r3, [r7, #18]
	m_accelX = accelXRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800b5b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b5c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b700 <_ZN8ICM206024readEv+0x1dc>
 800b5cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	m_accelY = accelYRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800b5d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b5e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b700 <_ZN8ICM206024readEv+0x1dc>
 800b5f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	m_accelZ = accelZRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800b5fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800b60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b610:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b700 <_ZN8ICM206024readEv+0x1dc>
 800b614:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Internal temperature sensor
	int16_t temperatureRaw = (m_data[6] << 8) + m_data[7];
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	7f5b      	ldrb	r3, [r3, #29]
 800b622:	b29b      	uxth	r3, r3
 800b624:	021b      	lsls	r3, r3, #8
 800b626:	b29a      	uxth	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7f9b      	ldrb	r3, [r3, #30]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	4413      	add	r3, r2
 800b630:	b29b      	uxth	r3, r3
 800b632:	823b      	strh	r3, [r7, #16]
	m_temperature = temperatureRaw / 326.8f + 25.0f;
 800b634:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b640:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b704 <_ZN8ICM206024readEv+0x1e0>
 800b644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b648:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800b64c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	// Get gyroscope
	int16_t gyroXRaw = (m_data[8] << 8) + m_data[9];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	7fdb      	ldrb	r3, [r3, #31]
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	b29a      	uxth	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b666:	b29b      	uxth	r3, r3
 800b668:	4413      	add	r3, r2
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	81fb      	strh	r3, [r7, #14]
	int16_t gyroYRaw = (m_data[10] << 8) + m_data[11];
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b674:	b29b      	uxth	r3, r3
 800b676:	021b      	lsls	r3, r3, #8
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b680:	b29b      	uxth	r3, r3
 800b682:	4413      	add	r3, r2
 800b684:	b29b      	uxth	r3, r3
 800b686:	81bb      	strh	r3, [r7, #12]
	int16_t gyroZRaw = (m_data[12] << 8) + m_data[13];
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b68e:	b29b      	uxth	r3, r3
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	b29a      	uxth	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	4413      	add	r3, r2
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	817b      	strh	r3, [r7, #10]
	m_gyroX = gyroXRaw / m_gyroSensitivity;
 800b6a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	m_gyroY = gyroYRaw / m_gyroSensitivity;
 800b6be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b6d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m_gyroZ = gyroZRaw / m_gyroSensitivity;
 800b6da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800b6ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	return true;
 800b6f6:	2301      	movs	r3, #1
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	411cf5c3 	.word	0x411cf5c3
 800b704:	43a36666 	.word	0x43a36666

0800b708 <_ZN8ICM206029getAccelXEv>:

	/**
	 * Get acceleration in X direction of the IMU in m/s^2.
	 * @return Acceleration in X direction of the IMU in m/s^2.
	 */
	inline float getAccelX() { return m_accelX - m_accelXOffset; }
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b720:	eeb0 0a67 	vmov.f32	s0, s15
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <_ZN8ICM206029getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the IMU in m/s^2.
	 * @return Acceleration in Y direction of the IMU in m/s^2.
	 */
	inline float getAccelY() { return m_accelY - m_accelYOffset; }
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b742:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b746:	eeb0 0a67 	vmov.f32	s0, s15
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <_ZN8ICM206029getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the IMU in m/s^2.
	 * @return Acceleration in Z direction of the IMU in m/s^2.
	 */
	inline float getAccelZ() { return m_accelZ - m_accelZOffset; }
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800b768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b76c:	eeb0 0a67 	vmov.f32	s0, s15
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <_ZN8ICM2060214getTemperatureEv>:

	/**
	 * Get the internal temperature of the IMU in °C.
	 * @return Internal temperature in °C.
	 */
	inline float getTemperature() { return m_temperature; }
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eeb0 0a67 	vmov.f32	s0, s15
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <_ZN8ICM206028getGyroXEv>:

	/**
	 * Get rotation around X axis of the IMU in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX - m_gyroXOffset; }
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800b7ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7b0:	eeb0 0a67 	vmov.f32	s0, s15
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <_ZN8ICM206028getGyroYEv>:

	/**
	 * Get rotation around Y axis of the IMU in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroY - m_gyroYOffset; }
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800b7d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <_ZN8ICM206028getGyroZEv>:

	/**
	 * Get rotation around Z axis of the IMU in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return m_gyroZ - m_gyroZOffset; }
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800b7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
	...

0800b80c <_ZN9ImuMasterC1Ev>:
#include "cmsis_os2.h"
#include "canzero.hpp"
#include "estdio.hpp"


ImuMaster::ImuMaster() {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af02      	add	r7, sp, #8
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	4a33      	ldr	r2, [pc, #204]	; (800b8e4 <_ZN9ImuMasterC1Ev+0xd8>)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a32      	ldr	r2, [pc, #200]	; (800b8e8 <_ZN9ImuMasterC1Ev+0xdc>)
 800b81e:	3304      	adds	r3, #4
 800b820:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b824:	6018      	str	r0, [r3, #0]
 800b826:	3304      	adds	r3, #4
 800b828:	7019      	strb	r1, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f103 000c 	add.w	r0, r3, #12
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1d19      	adds	r1, r3, #4
 800b834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	4b2c      	ldr	r3, [pc, #176]	; (800b8ec <_ZN9ImuMasterC1Ev+0xe0>)
 800b83c:	4a2c      	ldr	r2, [pc, #176]	; (800b8f0 <_ZN9ImuMasterC1Ev+0xe4>)
 800b83e:	f7ff fc8f 	bl	800b160 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	1d19      	adds	r1, r3, #4
 800b84c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	4b26      	ldr	r3, [pc, #152]	; (800b8ec <_ZN9ImuMasterC1Ev+0xe0>)
 800b854:	4a26      	ldr	r2, [pc, #152]	; (800b8f0 <_ZN9ImuMasterC1Ev+0xe4>)
 800b856:	f7ff fc83 	bl	800b160 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	1d19      	adds	r1, r3, #4
 800b864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	4b20      	ldr	r3, [pc, #128]	; (800b8ec <_ZN9ImuMasterC1Ev+0xe0>)
 800b86c:	4a20      	ldr	r2, [pc, #128]	; (800b8f0 <_ZN9ImuMasterC1Ev+0xe4>)
 800b86e:	f7ff fc77 	bl	800b160 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f04f 0200 	mov.w	r2, #0
 800b878:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f04f 0200 	mov.w	r2, #0
 800b882:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f04f 0200 	mov.w	r2, #0
 800b88c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f04f 0200 	mov.w	r2, #0
 800b896:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f04f 0200 	mov.w	r2, #0
 800b8a0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f04f 0200 	mov.w	r2, #0
 800b8aa:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f04f 0200 	mov.w	r2, #0
 800b8b4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	// TODO Auto-generated constructor stub

}
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	0801fa24 	.word	0x0801fa24
 800b8e8:	0801f4b8 	.word	0x0801f4b8
 800b8ec:	40020400 	.word	0x40020400
 800b8f0:	20001328 	.word	0x20001328

0800b8f4 <_ZN9ImuMasterD1Ev>:

ImuMaster::~ImuMaster() {
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	4a0b      	ldr	r2, [pc, #44]	; (800b92c <_ZN9ImuMasterD1Ev+0x38>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	33d4      	adds	r3, #212	; 0xd4
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff fc8c 	bl	800b224 <_ZN8ICM20602D1Ev>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3370      	adds	r3, #112	; 0x70
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff fc87 	bl	800b224 <_ZN8ICM20602D1Ev>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	330c      	adds	r3, #12
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff fc82 	bl	800b224 <_ZN8ICM20602D1Ev>
	// TODO Auto-generated destructor stub
}
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	0801fa24 	.word	0x0801fa24

0800b930 <_ZN9ImuMasterD0Ev>:
ImuMaster::~ImuMaster() {
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
}
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f7ff ffdb 	bl	800b8f4 <_ZN9ImuMasterD1Ev>
 800b93e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f010 fbea 	bl	801c11c <_ZdlPvj>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <_ZN9ImuMaster5startEv>:

bool ImuMaster::start() {
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	// Init all CS
	HAL_GPIO_WritePin(CS_IMU1_GPIO_Port, CS_IMU1_Pin, GPIO_PIN_SET);
 800b95c:	2201      	movs	r2, #1
 800b95e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b962:	4839      	ldr	r0, [pc, #228]	; (800ba48 <_ZN9ImuMaster5startEv+0xf4>)
 800b964:	f007 fb22 	bl	8012fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU2_GPIO_Port, CS_IMU2_Pin, GPIO_PIN_SET);
 800b968:	2201      	movs	r2, #1
 800b96a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b96e:	4836      	ldr	r0, [pc, #216]	; (800ba48 <_ZN9ImuMaster5startEv+0xf4>)
 800b970:	f007 fb1c 	bl	8012fac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU3_GPIO_Port, CS_IMU3_Pin, GPIO_PIN_SET);
 800b974:	2201      	movs	r2, #1
 800b976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b97a:	4833      	ldr	r0, [pc, #204]	; (800ba48 <_ZN9ImuMaster5startEv+0xf4>)
 800b97c:	f007 fb16 	bl	8012fac <HAL_GPIO_WritePin>

	// Wait until IMUs should be ready after powerup
	osDelay(pdMS_TO_TICKS(10));
 800b980:	200a      	movs	r0, #10
 800b982:	f00c f959 	bl	8017c38 <osDelay>

	// Now init all three IMUs
	m_imu1Ok = m_imu1.start();
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	330c      	adds	r3, #12
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff fcd2 	bl	800b334 <_ZN8ICM206025startEv>
 800b990:	4603      	mov	r3, r0
 800b992:	461a      	mov	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	m_imu2Ok = m_imu2.start();
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3370      	adds	r3, #112	; 0x70
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fcc8 	bl	800b334 <_ZN8ICM206025startEv>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	m_imu3Ok = m_imu3.start();
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	33d4      	adds	r3, #212	; 0xd4
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff fcbe 	bl	800b334 <_ZN8ICM206025startEv>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	// Get the number of IMUs
	if(m_imu1Ok) {
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d006      	beq.n	800b9da <_ZN9ImuMaster5startEv+0x86>
		m_numOfImusOnline++;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu2Ok) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d006      	beq.n	800b9f2 <_ZN9ImuMaster5startEv+0x9e>
		m_numOfImusOnline++;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu3Ok) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d006      	beq.n	800ba0a <_ZN9ImuMaster5startEv+0xb6>
		m_numOfImusOnline++;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ba02:	1c5a      	adds	r2, r3, #1
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	OD_IMU_number = m_numOfImusOnline;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	4b0e      	ldr	r3, [pc, #56]	; (800ba4c <_ZN9ImuMaster5startEv+0xf8>)
 800ba14:	701a      	strb	r2, [r3, #0]

	// The internal filters of the IMU need some time to swing in
	osDelay(pdMS_TO_TICKS(100));
 800ba16:	2064      	movs	r0, #100	; 0x64
 800ba18:	f00c f90e 	bl	8017c38 <osDelay>

	return m_imu1Ok & m_imu2Ok & m_imu3Ok;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	f892 2156 	ldrb.w	r2, [r2, #342]	; 0x156
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bf14      	ite	ne
 800ba38:	2301      	movne	r3, #1
 800ba3a:	2300      	moveq	r3, #0
 800ba3c:	b2db      	uxtb	r3, r3
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	40020400 	.word	0x40020400
 800ba4c:	20000935 	.word	0x20000935

0800ba50 <_ZN9ImuMaster8syncReadEv>:
	m_imu1.resetValues();
	m_imu2.resetValues();
	m_imu3.resetValues();
}

bool ImuMaster::syncRead() {
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	if(m_numOfImusOnline == 0) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <_ZN9ImuMaster8syncReadEv+0x16>
		return false;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e20a      	b.n	800be7c <_ZN9ImuMaster8syncReadEv+0x42c>
	}

	// Reset internal variables
	m_accelX = 0;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f04f 0200 	mov.w	r2, #0
 800ba6c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	m_accelY = 0;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f04f 0200 	mov.w	r2, #0
 800ba76:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	m_accelZ = 0;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	m_temperature = 0;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f04f 0200 	mov.w	r2, #0
 800ba8a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	m_gyroX = 0;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f04f 0200 	mov.w	r2, #0
 800ba94:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	m_gyroY = 0;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f04f 0200 	mov.w	r2, #0
 800ba9e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	m_gyroZ = 0;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f04f 0200 	mov.w	r2, #0
 800baa8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Read data from all IMUs that are online
	if(m_imu1Ok) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d077      	beq.n	800bba6 <_ZN9ImuMaster8syncReadEv+0x156>
		m_imu1.read();
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	330c      	adds	r3, #12
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fd32 	bl	800b524 <_ZN8ICM206024readEv>

		OD_IMU1_Temperature = m_imu1.getTemperature();
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	330c      	adds	r3, #12
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff fe58 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800baca:	eef0 7a40 	vmov.f32	s15, s0
 800bace:	4bb3      	ldr	r3, [pc, #716]	; (800bd9c <_ZN9ImuMaster8syncReadEv+0x34c>)
 800bad0:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu1.getAccelX();
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	330c      	adds	r3, #12
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fe15 	bl	800b708 <_ZN8ICM206029getAccelXEv>
 800bade:	eeb0 7a40 	vmov.f32	s14, s0
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800bae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu1.getAccelY();
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	330c      	adds	r3, #12
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fe19 	bl	800b72e <_ZN8ICM206029getAccelYEv>
 800bafc:	eeb0 7a40 	vmov.f32	s14, s0
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800bb06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu1.getAccelZ();
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	330c      	adds	r3, #12
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff fe1d 	bl	800b754 <_ZN8ICM206029getAccelZEv>
 800bb1a:	eeb0 7a40 	vmov.f32	s14, s0
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800bb24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu1.getTemperature();
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	330c      	adds	r3, #12
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff fe21 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800bb38:	eeb0 7a40 	vmov.f32	s14, s0
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800bb42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu1.getGyroX();
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	330c      	adds	r3, #12
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff fe21 	bl	800b798 <_ZN8ICM206028getGyroXEv>
 800bb56:	eeb0 7a40 	vmov.f32	s14, s0
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800bb60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu1.getGyroY();
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	330c      	adds	r3, #12
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff fe25 	bl	800b7be <_ZN8ICM206028getGyroYEv>
 800bb74:	eeb0 7a40 	vmov.f32	s14, s0
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800bb7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu1.getGyroZ();
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff fe29 	bl	800b7e4 <_ZN8ICM206028getGyroZEv>
 800bb92:	eeb0 7a40 	vmov.f32	s14, s0
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800bb9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu2Ok) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d077      	beq.n	800bca0 <_ZN9ImuMaster8syncReadEv+0x250>
		m_imu2.read();
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	3370      	adds	r3, #112	; 0x70
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fcb5 	bl	800b524 <_ZN8ICM206024readEv>

		OD_IMU2_Temperature = m_imu2.getTemperature();
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3370      	adds	r3, #112	; 0x70
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fddb 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800bbc4:	eef0 7a40 	vmov.f32	s15, s0
 800bbc8:	4b75      	ldr	r3, [pc, #468]	; (800bda0 <_ZN9ImuMaster8syncReadEv+0x350>)
 800bbca:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu2.getAccelX();
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3370      	adds	r3, #112	; 0x70
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff fd98 	bl	800b708 <_ZN8ICM206029getAccelXEv>
 800bbd8:	eeb0 7a40 	vmov.f32	s14, s0
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800bbe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu2.getAccelY();
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3370      	adds	r3, #112	; 0x70
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff fd9c 	bl	800b72e <_ZN8ICM206029getAccelYEv>
 800bbf6:	eeb0 7a40 	vmov.f32	s14, s0
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800bc00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu2.getAccelZ();
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	3370      	adds	r3, #112	; 0x70
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff fda0 	bl	800b754 <_ZN8ICM206029getAccelZEv>
 800bc14:	eeb0 7a40 	vmov.f32	s14, s0
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800bc1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu2.getTemperature();
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	3370      	adds	r3, #112	; 0x70
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fda4 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800bc32:	eeb0 7a40 	vmov.f32	s14, s0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800bc3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu2.getGyroX();
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	3370      	adds	r3, #112	; 0x70
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fda4 	bl	800b798 <_ZN8ICM206028getGyroXEv>
 800bc50:	eeb0 7a40 	vmov.f32	s14, s0
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800bc5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu2.getGyroY();
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3370      	adds	r3, #112	; 0x70
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff fda8 	bl	800b7be <_ZN8ICM206028getGyroYEv>
 800bc6e:	eeb0 7a40 	vmov.f32	s14, s0
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800bc78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu2.getGyroZ();
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	3370      	adds	r3, #112	; 0x70
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fdac 	bl	800b7e4 <_ZN8ICM206028getGyroZEv>
 800bc8c:	eeb0 7a40 	vmov.f32	s14, s0
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800bc96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu3Ok) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d07e      	beq.n	800bda8 <_ZN9ImuMaster8syncReadEv+0x358>
		m_imu3.read();
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	33d4      	adds	r3, #212	; 0xd4
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fc38 	bl	800b524 <_ZN8ICM206024readEv>

		OD_IMU3_Temperature = m_imu3.getTemperature();
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	33d4      	adds	r3, #212	; 0xd4
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff fd5e 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800bcbe:	eef0 7a40 	vmov.f32	s15, s0
 800bcc2:	4b38      	ldr	r3, [pc, #224]	; (800bda4 <_ZN9ImuMaster8syncReadEv+0x354>)
 800bcc4:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu3.getAccelX();
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	33d4      	adds	r3, #212	; 0xd4
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fd1b 	bl	800b708 <_ZN8ICM206029getAccelXEv>
 800bcd2:	eeb0 7a40 	vmov.f32	s14, s0
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800bcdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu3.getAccelY();
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	33d4      	adds	r3, #212	; 0xd4
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7ff fd1f 	bl	800b72e <_ZN8ICM206029getAccelYEv>
 800bcf0:	eeb0 7a40 	vmov.f32	s14, s0
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800bcfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu3.getAccelZ();
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	33d4      	adds	r3, #212	; 0xd4
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff fd23 	bl	800b754 <_ZN8ICM206029getAccelZEv>
 800bd0e:	eeb0 7a40 	vmov.f32	s14, s0
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800bd18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu3.getTemperature();
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	33d4      	adds	r3, #212	; 0xd4
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff fd27 	bl	800b77a <_ZN8ICM2060214getTemperatureEv>
 800bd2c:	eeb0 7a40 	vmov.f32	s14, s0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800bd36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu3.getGyroX();
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	33d4      	adds	r3, #212	; 0xd4
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fd27 	bl	800b798 <_ZN8ICM206028getGyroXEv>
 800bd4a:	eeb0 7a40 	vmov.f32	s14, s0
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800bd54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu3.getGyroY();
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	33d4      	adds	r3, #212	; 0xd4
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fd2b 	bl	800b7be <_ZN8ICM206028getGyroYEv>
 800bd68:	eeb0 7a40 	vmov.f32	s14, s0
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800bd72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu3.getGyroZ();
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	33d4      	adds	r3, #212	; 0xd4
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fd2f 	bl	800b7e4 <_ZN8ICM206028getGyroZEv>
 800bd86:	eeb0 7a40 	vmov.f32	s14, s0
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800bd90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
 800bd9a:	e005      	b.n	800bda8 <_ZN9ImuMaster8syncReadEv+0x358>
 800bd9c:	20000938 	.word	0x20000938
 800bda0:	2000093c 	.word	0x2000093c
 800bda4:	20000940 	.word	0x20000940
	}

	// Divide data by number of IMUs that are online
	m_accelX /= m_numOfImusOnline;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
	m_accelY /= m_numOfImusOnline;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bdd2:	ee07 3a90 	vmov	s15, r3
 800bdd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	m_accelZ /= m_numOfImusOnline;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bdf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
	m_temperature /= m_numOfImusOnline;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
	m_gyroX /= m_numOfImusOnline;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
	m_gyroY /= m_numOfImusOnline;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800be4a:	ee07 3a90 	vmov	s15, r3
 800be4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	m_gyroZ /= m_numOfImusOnline;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800be68:	ee07 3a90 	vmov	s15, r3
 800be6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

	return true;
 800be7a:	2301      	movs	r3, #1
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <_ZN10AdcChannel3getEv>:
	uint16_t get() {
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
		return m_value;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	881b      	ldrh	r3, [r3, #0]
	}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <_ZN19AdcModuleController16getChannelByRankEj>:
	AdcChannel* getChannelByRank(size_t rank) {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d301      	bcc.n	800beb4 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 800beb0:	f004 f862 	bl	800ff78 <Error_Handler>
		return m_channels + rank;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689a      	ldr	r2, [r3, #8]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	4413      	add	r3, r2
	}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <_ZN19AdcModuleController10weakUpdateEv>:
	void weakUpdate() {
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7c1b      	ldrb	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d103      	bne.n	800bede <_ZN19AdcModuleController10weakUpdateEv+0x18>
			update();
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7f6 fc7e 	bl	80027d8 <_ZN19AdcModuleController6updateEv>
 800bedc:	e000      	b.n	800bee0 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800bede:	bf00      	nop
	}
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
	switch(module){
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d004      	beq.n	800bf04 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800befa:	e007      	b.n	800bf0c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800befc:	f000 f844 	bl	800bf88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800bf00:	4603      	mov	r3, r0
 800bf02:	e008      	b.n	800bf16 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 800bf04:	f000 f876 	bl	800bff4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	e004      	b.n	800bf16 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 800bf0c:	f004 f834 	bl	800ff78 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800bf10:	f000 f83a 	bl	800bf88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800bf14:	4603      	mov	r3, r0
	}
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	60f8      	str	r0, [r7, #12]
 800bf26:	60b9      	str	r1, [r7, #8]
 800bf28:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	f7ff ffdb 	bl	800bee6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 800bf30:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff ffad 	bl	800be9c <_ZN19AdcModuleController16getChannelByRankEj>
 800bf42:	4602      	mov	r2, r0
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	605a      	str	r2, [r3, #4]
	}
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7ff ffb1 	bl	800bec6 <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff ff8b 	bl	800be84 <_ZN10AdcChannel3getEv>
 800bf6e:	4603      	mov	r3, r0
	}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__tcf_1+0xc>)
 800bf7e:	f7f6 fbf3 	bl	8002768 <_ZN19AdcModuleControllerD1Ev>
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	20000d8c 	.word	0x20000d8c

0800bf88 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800bf8c:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	f3bf 8f5b 	dmb	ish
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bf0c      	ite	eq
 800bf9e:	2301      	moveq	r3, #1
 800bfa0:	2300      	movne	r3, #0
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d014      	beq.n	800bfd2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800bfa8:	480b      	ldr	r0, [pc, #44]	; (800bfd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800bfaa:	f010 f8bb 	bl	801c124 <__cxa_guard_acquire>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	bf14      	ite	ne
 800bfb4:	2301      	movne	r3, #1
 800bfb6:	2300      	moveq	r3, #0
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d009      	beq.n	800bfd2 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4806      	ldr	r0, [pc, #24]	; (800bfdc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800bfc2:	f7f6 fb5d 	bl	8002680 <_ZN19AdcModuleControllerC1E9AdcModule>
 800bfc6:	4806      	ldr	r0, [pc, #24]	; (800bfe0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 800bfc8:	f010 fb21 	bl	801c60e <atexit>
 800bfcc:	4802      	ldr	r0, [pc, #8]	; (800bfd8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800bfce:	f010 f8b5 	bl	801c13c <__cxa_guard_release>
	return instance;
 800bfd2:	4b02      	ldr	r3, [pc, #8]	; (800bfdc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20000da8 	.word	0x20000da8
 800bfdc:	20000d8c 	.word	0x20000d8c
 800bfe0:	0800bf79 	.word	0x0800bf79

0800bfe4 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	4801      	ldr	r0, [pc, #4]	; (800bff0 <__tcf_2+0xc>)
 800bfea:	f7f6 fbbd 	bl	8002768 <_ZN19AdcModuleControllerD1Ev>
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20000dac 	.word	0x20000dac

0800bff4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800bff4:	b580      	push	{r7, lr}
 800bff6:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800bff8:	4b12      	ldr	r3, [pc, #72]	; (800c044 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	f3bf 8f5b 	dmb	ish
 800c000:	b2db      	uxtb	r3, r3
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	bf0c      	ite	eq
 800c00a:	2301      	moveq	r3, #1
 800c00c:	2300      	movne	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b00      	cmp	r3, #0
 800c012:	d014      	beq.n	800c03e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800c014:	480b      	ldr	r0, [pc, #44]	; (800c044 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800c016:	f010 f885 	bl	801c124 <__cxa_guard_acquire>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bf14      	ite	ne
 800c020:	2301      	movne	r3, #1
 800c022:	2300      	moveq	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d009      	beq.n	800c03e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800c02a:	2101      	movs	r1, #1
 800c02c:	4806      	ldr	r0, [pc, #24]	; (800c048 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800c02e:	f7f6 fb27 	bl	8002680 <_ZN19AdcModuleControllerC1E9AdcModule>
 800c032:	4806      	ldr	r0, [pc, #24]	; (800c04c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 800c034:	f010 faeb 	bl	801c60e <atexit>
 800c038:	4802      	ldr	r0, [pc, #8]	; (800c044 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800c03a:	f010 f87f 	bl	801c13c <__cxa_guard_release>
	return instance;
 800c03e:	4b02      	ldr	r3, [pc, #8]	; (800c048 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 800c040:	4618      	mov	r0, r3
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20000dc8 	.word	0x20000dc8
 800c048:	20000dac 	.word	0x20000dac
 800c04c:	0800bfe5 	.word	0x0800bfe5

0800c050 <_ZN3can7signals16BrakeF_TX_Status3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue)) & 0x3ull;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0x3ull));
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	b2d3      	uxtb	r3, r2
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	73fb      	strb	r3, [r7, #15]
                return value;
 800c068:	7bfb      	ldrb	r3, [r7, #15]
            }
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <_ZN3can7signals17BrakeF_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c086:	f000 0204 	and.w	r2, r0, #4
 800c08a:	2300      	movs	r3, #0
 800c08c:	4313      	orrs	r3, r2
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bf14      	ite	ne
 800c092:	2301      	movne	r3, #1
 800c094:	2300      	moveq	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
                return value;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
            }
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <_ZN3can7signals19BrakeF_TX_ErrorFlag3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 3) & 0x8ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c0a6:	b480      	push	{r7}
 800c0a8:	b085      	sub	sp, #20
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8ull) >> 3);
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0b6:	f000 0208 	and.w	r2, r0, #8
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bf14      	ite	ne
 800c0c2:	2301      	movne	r3, #1
 800c0c4:	2300      	moveq	r3, #0
 800c0c6:	73fb      	strb	r3, [r7, #15]
                return value;
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
            }
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <_ZN3can7signals20BrakeF_RX_ErrorReset3setERyS2_Rhb>:
        class BrakeF_RX_ErrorReset {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800c0d6:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800c0da:	b087      	sub	sp, #28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800c0e6:	78fb      	ldrb	r3, [r7, #3]
 800c0e8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	7df9      	ldrb	r1, [r7, #23]
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	bf14      	ite	ne
 800c0f6:	2101      	movne	r1, #1
 800c0f8:	2100      	moveq	r1, #0
 800c0fa:	b2c9      	uxtb	r1, r1
 800c0fc:	b2c9      	uxtb	r1, r1
 800c0fe:	2000      	movs	r0, #0
 800c100:	460c      	mov	r4, r1
 800c102:	4605      	mov	r5, r0
 800c104:	ea42 0804 	orr.w	r8, r2, r4
 800c108:	ea43 0905 	orr.w	r9, r3, r5
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800c112:	bf00      	nop
 800c114:	371c      	adds	r7, #28
 800c116:	46bd      	mov	sp, r7
 800c118:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800c11c:	4770      	bx	lr

0800c11e <_ZN3can7signals16BrakeF_RX_Enable3setERyS2_Rhb>:
        class BrakeF_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800c11e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c122:	b089      	sub	sp, #36	; 0x24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6178      	str	r0, [r7, #20]
 800c128:	6139      	str	r1, [r7, #16]
 800c12a:	60fa      	str	r2, [r7, #12]
 800c12c:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 800c12e:	7afb      	ldrb	r3, [r7, #11]
 800c130:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	7ff9      	ldrb	r1, [r7, #31]
 800c13a:	2000      	movs	r0, #0
 800c13c:	460c      	mov	r4, r1
 800c13e:	4605      	mov	r5, r0
 800c140:	1921      	adds	r1, r4, r4
 800c142:	6039      	str	r1, [r7, #0]
 800c144:	eb45 0105 	adc.w	r1, r5, r5
 800c148:	6079      	str	r1, [r7, #4]
 800c14a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c14e:	f000 0802 	and.w	r8, r0, #2
 800c152:	f04f 0900 	mov.w	r9, #0
 800c156:	ea42 0a08 	orr.w	sl, r2, r8
 800c15a:	ea43 0b09 	orr.w	fp, r3, r9
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c164:	bf00      	nop
 800c166:	3724      	adds	r7, #36	; 0x24
 800c168:	46bd      	mov	sp, r7
 800c16a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c16e:	4770      	bx	lr

0800c170 <_ZN3can7signals16BrakeF_RX_Engage3setERyS2_Rhh>:
        class BrakeF_RX_Engage {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800c170:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c174:	b087      	sub	sp, #28
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
 800c17e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0xCull;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c18a:	7dfb      	ldrb	r3, [r7, #23]
 800c18c:	2200      	movs	r2, #0
 800c18e:	4698      	mov	r8, r3
 800c190:	4691      	mov	r9, r2
 800c192:	f04f 0200 	mov.w	r2, #0
 800c196:	f04f 0300 	mov.w	r3, #0
 800c19a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800c19e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800c1a2:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800c1a6:	f002 040c 	and.w	r4, r2, #12
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	ea40 0a04 	orr.w	sl, r0, r4
 800c1b0:	ea41 0b05 	orr.w	fp, r1, r5
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c1ba:	bf00      	nop
 800c1bc:	371c      	adds	r7, #28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <__tcf_0>:
};

class BrakeECUController {
public:
	static BrakeECUController& getInstance() {
		static BrakeECUController instance;
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	4801      	ldr	r0, [pc, #4]	; (800c1d4 <__tcf_0+0xc>)
 800c1ce:	f000 f831 	bl	800c234 <_ZN18BrakeECUControllerD1Ev>
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	20000dcc 	.word	0x20000dcc

0800c1d8 <_ZN18BrakeECUController11getInstanceEv>:
	static BrakeECUController& getInstance() {
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	af00      	add	r7, sp, #0
		static BrakeECUController instance;
 800c1dc:	4b12      	ldr	r3, [pc, #72]	; (800c228 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f3bf 8f5b 	dmb	ish
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	bf0c      	ite	eq
 800c1ee:	2301      	moveq	r3, #1
 800c1f0:	2300      	movne	r3, #0
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d013      	beq.n	800c220 <_ZN18BrakeECUController11getInstanceEv+0x48>
 800c1f8:	480b      	ldr	r0, [pc, #44]	; (800c228 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800c1fa:	f00f ff93 	bl	801c124 <__cxa_guard_acquire>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	bf14      	ite	ne
 800c204:	2301      	movne	r3, #1
 800c206:	2300      	moveq	r3, #0
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d008      	beq.n	800c220 <_ZN18BrakeECUController11getInstanceEv+0x48>
 800c20e:	4807      	ldr	r0, [pc, #28]	; (800c22c <_ZN18BrakeECUController11getInstanceEv+0x54>)
 800c210:	f000 f8e4 	bl	800c3dc <_ZN18BrakeECUControllerC1Ev>
 800c214:	4806      	ldr	r0, [pc, #24]	; (800c230 <_ZN18BrakeECUController11getInstanceEv+0x58>)
 800c216:	f010 f9fa 	bl	801c60e <atexit>
 800c21a:	4803      	ldr	r0, [pc, #12]	; (800c228 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800c21c:	f00f ff8e 	bl	801c13c <__cxa_guard_release>
		return instance;
 800c220:	4b02      	ldr	r3, [pc, #8]	; (800c22c <_ZN18BrakeECUController11getInstanceEv+0x54>)
	}
 800c222:	4618      	mov	r0, r3
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20000dd8 	.word	0x20000dd8
 800c22c:	20000dcc 	.word	0x20000dcc
 800c230:	0800c1c9 	.word	0x0800c1c9

0800c234 <_ZN18BrakeECUControllerD1Ev>:

	~BrakeECUController() {
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4618      	mov	r0, r3
 800c242:	f7f5 fa25 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <_ZN18BrakeECUController12engageBrakesEv>:
	void disable() {
		m_enableTarget = false;
		controlHelper();
	}

	void engageBrakes() {
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
		m_engageTarget = true;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	725a      	strb	r2, [r3, #9]
		controlHelper();
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f814 	bl	800c28c <_ZN18BrakeECUController13controlHelperEv>
	}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	2300      	movs	r3, #0
 800c278:	2201      	movs	r2, #1
 800c27a:	f240 11d1 	movw	r1, #465	; 0x1d1
 800c27e:	f7f4 fe85 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <_ZN18BrakeECUController13controlHelperEv>:
		return m_error;
	}

private:

	void controlHelper() {
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08a      	sub	sp, #40	; 0x28
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
		can::Message<can::messages::BrakeF_RX_Control> msg;
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff ffe7 	bl	800c26c <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEEC1Ev>
		msg.set<can::signals::BrakeF_RX_Enable>(m_enableTarget);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	7a1a      	ldrb	r2, [r3, #8]
 800c2a2:	f107 0308 	add.w	r3, r7, #8
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f8e5 	bl	800c478 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EnableEEEvNT_8dataTypeE>
		uint8_t engageEnum =
				m_engageTarget ?
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	7a5b      	ldrb	r3, [r3, #9]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d001      	beq.n	800c2ba <_ZN18BrakeECUController13controlHelperEv+0x2e>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e000      	b.n	800c2bc <_ZN18BrakeECUController13controlHelperEv+0x30>
 800c2ba:	2301      	movs	r3, #1
		uint8_t engageEnum =
 800c2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						can::signals::BrakeF_RX_Engage::DISENGAGE :
						can::signals::BrakeF_RX_Engage::ENGAGEEMERGENCY;
		msg.set<can::signals::BrakeF_RX_Engage>(engageEnum);
 800c2c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c2c4:	f107 0308 	add.w	r3, r7, #8
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 f8e9 	bl	800c4a2 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EngageEEEvNT_8dataTypeE>
		msg.set<can::signals::BrakeF_RX_ErrorReset>(m_error); //FIXME BAD BAD BAD.
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	79da      	ldrb	r2, [r3, #7]
 800c2d4:	f107 0308 	add.w	r3, r7, #8
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f8f6 	bl	800c4cc <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals20BrakeF_RX_ErrorResetEEEvNT_8dataTypeE>
		msg.send();
 800c2e0:	f107 0308 	add.w	r3, r7, #8
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f4 ff9a 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800c2ec:	bf00      	nop
 800c2ee:	3728      	adds	r7, #40	; 0x28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	2300      	movs	r3, #0
 800c308:	2203      	movs	r2, #3
 800c30a:	f240 1191 	movw	r1, #401	; 0x191
 800c30e:	f7f6 fce8 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c316:	f240 1291 	movw	r2, #401	; 0x191
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d000      	beq.n	800c320 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800c31e:	e7fe      	b.n	800c31e <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b082      	sub	sp, #8
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	331c      	adds	r3, #28
 800c33a:	461a      	mov	r2, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff ffd9 	bl	800c2f4 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <_ZN18BrakeECUController8callbackER9RxMessage>:

	void callback(RxMessage &raw) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b088      	sub	sp, #32
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::BrakeF_TX_Status> msg { raw };
 800c356:	f107 0308 	add.w	r3, r7, #8
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff ffe4 	bl	800c32a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK9RxMessage>
		m_enable = msg.get<can::signals::BrakeF_TX_Enabled>();
 800c362:	f107 0308 	add.w	r3, r7, #8
 800c366:	4618      	mov	r0, r3
 800c368:	f000 f8c5 	bl	800c4f6 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals17BrakeF_TX_EnabledEEENT_8dataTypeEv>
 800c36c:	4603      	mov	r3, r0
 800c36e:	461a      	mov	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	715a      	strb	r2, [r3, #5]
		m_engage = msg.get<can::signals::BrakeF_TX_Status>() > 0;
 800c374:	f107 0308 	add.w	r3, r7, #8
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 f8ce 	bl	800c51a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals16BrakeF_TX_StatusEEENT_8dataTypeEv>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	bf14      	ite	ne
 800c384:	2301      	movne	r3, #1
 800c386:	2300      	moveq	r3, #0
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	719a      	strb	r2, [r3, #6]
		if(m_engage){
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	799b      	ldrb	r3, [r3, #6]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <_ZN18BrakeECUController8callbackER9RxMessage+0x52>
			m_brakeState = BRAKE_ENGAGED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	711a      	strb	r2, [r3, #4]
 800c39c:	e002      	b.n	800c3a4 <_ZN18BrakeECUController8callbackER9RxMessage+0x58>
		}else{
			m_brakeState = BRAKE_DISENGAGED;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2202      	movs	r2, #2
 800c3a2:	711a      	strb	r2, [r3, #4]
		}
		m_error = msg.get<can::signals::BrakeF_TX_ErrorFlag>();
 800c3a4:	f107 0308 	add.w	r3, r7, #8
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 f8c8 	bl	800c53e <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals19BrakeF_TX_ErrorFlagEEENT_8dataTypeEv>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	71da      	strb	r2, [r3, #7]
	}
 800c3b6:	bf00      	nop
 800c3b8:	3720      	adds	r7, #32
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <_ZZN18BrakeECUControllerC4EvENKUlR9RxMessageE_clES1_>:

	explicit BrakeECUController() {
		m_receiverId = can::registerMessageReceiver<can::messages::BrakeF_TX_Status>([this](RxMessage& raw){
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
			this->callback(raw);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff ffbc 	bl	800c34c <_ZN18BrakeECUController8callbackER9RxMessage>
		});
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <_ZN18BrakeECUControllerC1Ev>:
	explicit BrakeECUController() {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	711a      	strb	r2, [r3, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::BrakeF_TX_Status>([this](RxMessage& raw){
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 f8b6 	bl	800c564 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_>
 800c3f8:	f107 0308 	add.w	r3, r7, #8
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 f8db 	bl	800c5b8 <_ZN3can23registerMessageReceiverINS_8messages16BrakeF_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800c402:	4602      	mov	r2, r0
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	f107 0308 	add.w	r3, r7, #8
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7f5 f841 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	3718      	adds	r7, #24
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <_ZN13PodBreakState5setupEv>:
#include "BrakeECUController.hpp"
#include "EstimatedStateRegistry.hpp"

#include "estdio.hpp"

void PodBreakState::setup() {
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
	printf("enter break state\n");
 800c424:	4806      	ldr	r0, [pc, #24]	; (800c440 <_ZN13PodBreakState5setupEv+0x24>)
 800c426:	f00b fa8d 	bl	8017944 <printf_>
	BrakeECUController::getInstance().engageBrakes();
 800c42a:	f7ff fed5 	bl	800c1d8 <_ZN18BrakeECUController11getInstanceEv>
 800c42e:	4603      	mov	r3, r0
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff ff0d 	bl	800c250 <_ZN18BrakeECUController12engageBrakesEv>
}
 800c436:	bf00      	nop
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	0801f4f4 	.word	0x0801f4f4

0800c444 <_ZN13PodBreakState6updateEv>:

void PodBreakState::update() {
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
	osDelay(pdMS_TO_TICKS(50));
 800c44c:	2032      	movs	r0, #50	; 0x32
 800c44e:	f00b fbf3 	bl	8017c38 <osDelay>

}
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <_ZN13PodBreakState7disposeEv>:

void PodBreakState::dispose() {
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	printf("exit break state\n");
 800c464:	4803      	ldr	r0, [pc, #12]	; (800c474 <_ZN13PodBreakState7disposeEv+0x18>)
 800c466:	f00b fa6d 	bl	8017944 <printf_>
}
 800c46a:	bf00      	nop
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	0801f508 	.word	0x0801f508

0800c478 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f103 0008 	add.w	r0, r3, #8
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f103 0110 	add.w	r1, r3, #16
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	1d1a      	adds	r2, r3, #4
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	f7ff fe42 	bl	800c11e <_ZN3can7signals16BrakeF_RX_Enable3setERyS2_Rhb>
        }
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EngageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f103 0008 	add.w	r0, r3, #8
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f103 0110 	add.w	r1, r3, #16
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	1d1a      	adds	r2, r3, #4
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	f7ff fe56 	bl	800c170 <_ZN3can7signals16BrakeF_RX_Engage3setERyS2_Rhh>
        }
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals20BrakeF_RX_ErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f103 0008 	add.w	r0, r3, #8
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f103 0110 	add.w	r1, r3, #16
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	1d1a      	adds	r2, r3, #4
 800c4e8:	78fb      	ldrb	r3, [r7, #3]
 800c4ea:	f7ff fdf4 	bl	800c0d6 <_ZN3can7signals20BrakeF_RX_ErrorReset3setERyS2_Rhb>
        }
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals17BrakeF_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f103 0208 	add.w	r2, r3, #8
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	3310      	adds	r3, #16
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7ff fdb3 	bl	800c076 <_ZN3can7signals17BrakeF_TX_Enabled3getERKyS3_>
 800c510:	4603      	mov	r3, r0
        }
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals16BrakeF_TX_StatusEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f103 0208 	add.w	r2, r3, #8
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3310      	adds	r3, #16
 800c52c:	4619      	mov	r1, r3
 800c52e:	4610      	mov	r0, r2
 800c530:	f7ff fd8e 	bl	800c050 <_ZN3can7signals16BrakeF_TX_Status3getERKyS3_>
 800c534:	4603      	mov	r3, r0
        }
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals19BrakeF_TX_ErrorFlagEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f103 0208 	add.w	r2, r3, #8
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	3310      	adds	r3, #16
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7ff fda7 	bl	800c0a6 <_ZN3can7signals19BrakeF_TX_ErrorFlag3getERKyS3_>
 800c558:	4603      	mov	r3, r0
        }
 800c55a:	4618      	mov	r0, r3
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4618      	mov	r0, r3
 800c572:	f7f4 ff5d 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800c576:	463b      	mov	r3, r7
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 f83b 	bl	800c5f4 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00f      	beq.n	800c5a4 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800c584:	687c      	ldr	r4, [r7, #4]
 800c586:	463b      	mov	r3, r7
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f83e 	bl	800c60a <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c58e:	4603      	mov	r3, r0
 800c590:	4619      	mov	r1, r3
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f844 	bl	800c620 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a05      	ldr	r2, [pc, #20]	; (800c5b0 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800c59c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a04      	ldr	r2, [pc, #16]	; (800c5b4 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x50>)
 800c5a2:	609a      	str	r2, [r3, #8]
      }
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd90      	pop	{r4, r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	0800c645 	.word	0x0800c645
 800c5b4:	0800c66f 	.word	0x0800c66f

0800c5b8 <_ZN3can23registerMessageReceiverINS_8messages16BrakeF_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c5c0:	f107 0308 	add.w	r3, r7, #8
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7f5 f8ad 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800c5cc:	f107 0308 	add.w	r3, r7, #8
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f240 1191 	movw	r1, #401	; 0x191
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7f4 ffa0 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800c5dc:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800c5de:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c5e0:	f107 0308 	add.w	r3, r7, #8
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7f4 ff55 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800c5ea:	4623      	mov	r3, r4
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	371c      	adds	r7, #28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd90      	pop	{r4, r7, pc}

0800c5f4 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	  { return true; }
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4618      	mov	r0, r3
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800c620:	b590      	push	{r4, r7, lr}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800c62a:	6838      	ldr	r0, [r7, #0]
 800c62c:	f7ff ffed 	bl	800c60a <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c630:	4603      	mov	r3, r0
 800c632:	4622      	mov	r2, r4
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f838 	bl	800c6ac <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	bd90      	pop	{r4, r7, pc}

0800c644 <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f845 	bl	800c6de <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c654:	4604      	mov	r4, r0
 800c656:	6838      	ldr	r0, [r7, #0]
 800c658:	f7f5 f8ef 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c65c:	4603      	mov	r3, r0
 800c65e:	4619      	mov	r1, r3
 800c660:	4620      	mov	r0, r4
 800c662:	f000 f84d 	bl	800c700 <_ZSt10__invoke_rIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800c666:	bf00      	nop
      }
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd90      	pop	{r4, r7, pc}

0800c66e <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c66e:	b590      	push	{r4, r7, lr}
 800c670:	b085      	sub	sp, #20
 800c672:	af00      	add	r7, sp, #0
 800c674:	60f8      	str	r0, [r7, #12]
 800c676:	60b9      	str	r1, [r7, #8]
 800c678:	4613      	mov	r3, r2
 800c67a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d109      	bne.n	800c696 <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 f852 	bl	800c72c <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
 800c688:	4604      	mov	r4, r0
 800c68a:	68b8      	ldr	r0, [r7, #8]
 800c68c:	f000 f827 	bl	800c6de <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c690:	4603      	mov	r3, r0
 800c692:	6023      	str	r3, [r4, #0]
	    break;
 800c694:	e005      	b.n	800c6a2 <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	461a      	mov	r2, r3
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 f851 	bl	800c744 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800c6a2:	2300      	movs	r3, #0
      }
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd90      	pop	{r4, r7, pc}

0800c6ac <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800c6ac:	b590      	push	{r4, r7, lr}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c6b8:	68b8      	ldr	r0, [r7, #8]
 800c6ba:	f7ff ffa6 	bl	800c60a <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c6be:	4604      	mov	r4, r0
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7f5 fec9 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	2004      	movs	r0, #4
 800c6cc:	f7f5 feb8 	bl	8002440 <_ZnwjPv>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	6013      	str	r3, [r2, #0]
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}

0800c6de <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b084      	sub	sp, #16
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f857 	bl	800c79a <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800c6ec:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f85f 	bl	800c7b2 <_ZSt11__addressofIKZN18BrakeECUControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	bf00      	nop
	}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <_ZSt10__invoke_rIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800c700:	b5b0      	push	{r4, r5, r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f85c 	bl	800c7c8 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800c710:	4604      	mov	r4, r0
 800c712:	6838      	ldr	r0, [r7, #0]
 800c714:	f7f5 f891 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c718:	4603      	mov	r3, r0
 800c71a:	461a      	mov	r2, r3
 800c71c:	4621      	mov	r1, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	f000 f85d 	bl	800c7de <_ZSt13__invoke_implIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bdb0      	pop	{r4, r5, r7, pc}

0800c72c <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7f5 fe8f 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800c73a:	4603      	mov	r3, r0
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800c744:	b5b0      	push	{r4, r5, r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	4613      	mov	r3, r2
 800c750:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800c752:	79fb      	ldrb	r3, [r7, #7]
 800c754:	2b03      	cmp	r3, #3
 800c756:	d016      	beq.n	800c786 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800c758:	2b03      	cmp	r3, #3
 800c75a:	dc19      	bgt.n	800c790 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d002      	beq.n	800c766 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800c760:	2b02      	cmp	r3, #2
 800c762:	d00a      	beq.n	800c77a <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800c764:	e014      	b.n	800c790 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff ffe0 	bl	800c72c <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
 800c76c:	4604      	mov	r4, r0
 800c76e:	68b8      	ldr	r0, [r7, #8]
 800c770:	f7ff ffb5 	bl	800c6de <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c774:	4603      	mov	r3, r0
 800c776:	6023      	str	r3, [r4, #0]
	      break;
 800c778:	e00a      	b.n	800c790 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800c77a:	462a      	mov	r2, r5
 800c77c:	68b9      	ldr	r1, [r7, #8]
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f000 f843 	bl	800c80a <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800c784:	e004      	b.n	800c790 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800c786:	4621      	mov	r1, r4
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f857 	bl	800c83c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800c78e:	bf00      	nop
	  return false;
 800c790:	2300      	movs	r3, #0
	}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bdb0      	pop	{r4, r5, r7, pc}

0800c79a <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b082      	sub	sp, #8
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7f5 fe63 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <_ZSt11__addressofIKZN18BrakeECUControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c7b2:	b480      	push	{r7}
 800c7b4:	b083      	sub	sp, #12
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <_ZSt13__invoke_implIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c7de:	b590      	push	{r4, r7, lr}
 800c7e0:	b085      	sub	sp, #20
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	7338      	strb	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c7ea:	68b8      	ldr	r0, [r7, #8]
 800c7ec:	f7ff ffec 	bl	800c7c8 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7f5 f821 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f7ff fdde 	bl	800c3be <_ZZN18BrakeECUControllerC4EvENKUlR9RxMessageE_clES1_>
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	bd90      	pop	{r4, r7, pc}

0800c80a <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800c80a:	b590      	push	{r4, r7, lr}
 800c80c:	b085      	sub	sp, #20
 800c80e:	af00      	add	r7, sp, #0
 800c810:	60f8      	str	r0, [r7, #12]
 800c812:	60b9      	str	r1, [r7, #8]
 800c814:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800c816:	68b8      	ldr	r0, [r7, #8]
 800c818:	f7ff ffbf 	bl	800c79a <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800c81c:	4604      	mov	r4, r0
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7f5 fe1a 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800c824:	4603      	mov	r3, r0
 800c826:	4619      	mov	r1, r3
 800c828:	2004      	movs	r0, #4
 800c82a:	f7f5 fe09 	bl	8002440 <_ZnwjPv>
 800c82e:	4602      	mov	r2, r0
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	6013      	str	r3, [r2, #0]
	}
 800c834:	bf00      	nop
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd90      	pop	{r4, r7, pc}

0800c83c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f804 	bl	800c854 <_ZNSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <_ZNSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7f5 fdfb 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800c862:	4603      	mov	r3, r0
 800c864:	4618      	mov	r0, r3
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <_ZN17PodEmergencyState5setupEv>:
#include "PodLaunchPreparationState.hpp"
#include "PodLaunchingState.hpp"



void PodEmergencyState::setup() {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
	printf("enter emcy state\n");
 800c874:	4803      	ldr	r0, [pc, #12]	; (800c884 <_ZN17PodEmergencyState5setupEv+0x18>)
 800c876:	f00b f865 	bl	8017944 <printf_>
}
 800c87a:	bf00      	nop
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	0801f51c 	.word	0x0801f51c

0800c888 <_ZN17PodEmergencyState6updateEv>:

void PodEmergencyState::update() {
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
	if(m_stateMaschine->wasPreviousState<PodIdleState>()){
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f847 	bl	800c928 <_ZN13StateMaschine16wasPreviousStateI12PodIdleStateEEbv>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d004      	beq.n	800c8aa <_ZN17PodEmergencyState6updateEv+0x22>
		osDelay(osWaitForever);
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a4:	f00b f9c8 	bl	8017c38 <osDelay>
 800c8a8:	e029      	b.n	800c8fe <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodStartupState>()){
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 f84d 	bl	800c94e <_ZN13StateMaschine16wasPreviousStateI15PodStartupStateEEbv>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d004      	beq.n	800c8c4 <_ZN17PodEmergencyState6updateEv+0x3c>
		osDelay(osWaitForever);
 800c8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c8be:	f00b f9bb 	bl	8017c38 <osDelay>
 800c8c2:	e01c      	b.n	800c8fe <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodLaunchPreparationState>()){
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f853 	bl	800c974 <_ZN13StateMaschine16wasPreviousStateI25PodLaunchPreparationStateEEbv>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <_ZN17PodEmergencyState6updateEv+0x5a>
		//TODO implement handling
		Error_Handler();
 800c8d4:	f003 fb50 	bl	800ff78 <Error_Handler>
		osDelay(osWaitForever);
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	f00b f9ac 	bl	8017c38 <osDelay>
 800c8e0:	e00d      	b.n	800c8fe <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodLaunchingState>()){
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f857 	bl	800c99a <_ZN13StateMaschine16wasPreviousStateI17PodLaunchingStateEEbv>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d005      	beq.n	800c8fe <_ZN17PodEmergencyState6updateEv+0x76>
		//TODO implement handing.
		Error_Handler();
 800c8f2:	f003 fb41 	bl	800ff78 <Error_Handler>
		osDelay(osWaitForever);
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fa:	f00b f99d 	bl	8017c38 <osDelay>
	}
	osDelay(50);
 800c8fe:	2032      	movs	r0, #50	; 0x32
 800c900:	f00b f99a 	bl	8017c38 <osDelay>
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <_ZN17PodEmergencyState7disposeEv>:

void PodEmergencyState::dispose() {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
	printf("exit emcy state\n");
 800c914:	4803      	ldr	r0, [pc, #12]	; (800c924 <_ZN17PodEmergencyState7disposeEv+0x18>)
 800c916:	f00b f815 	bl	8017944 <printf_>
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	0801f530 	.word	0x0801f530

0800c928 <_ZN13StateMaschine16wasPreviousStateI12PodIdleStateEEbv>:
	bool wasPreviousState(){
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800c930:	f7fe f8f8 	bl	800ab24 <_ZN5State5getIdI12PodIdleStateEEjv>
 800c934:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	bf0c      	ite	eq
 800c940:	2301      	moveq	r3, #1
 800c942:	2300      	movne	r3, #0
 800c944:	b2db      	uxtb	r3, r3
	}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <_ZN13StateMaschine16wasPreviousStateI15PodStartupStateEEbv>:
	bool wasPreviousState(){
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800c956:	f7fe f8ad 	bl	800aab4 <_ZN5State5getIdI15PodStartupStateEEjv>
 800c95a:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	429a      	cmp	r2, r3
 800c964:	bf0c      	ite	eq
 800c966:	2301      	moveq	r3, #1
 800c968:	2300      	movne	r3, #0
 800c96a:	b2db      	uxtb	r3, r3
	}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <_ZN13StateMaschine16wasPreviousStateI25PodLaunchPreparationStateEEbv>:
	bool wasPreviousState(){
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800c97c:	f7fe f92a 	bl	800abd4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800c980:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	68fa      	ldr	r2, [r7, #12]
 800c988:	429a      	cmp	r2, r3
 800c98a:	bf0c      	ite	eq
 800c98c:	2301      	moveq	r3, #1
 800c98e:	2300      	movne	r3, #0
 800c990:	b2db      	uxtb	r3, r3
	}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <_ZN13StateMaschine16wasPreviousStateI17PodLaunchingStateEEbv>:
	bool wasPreviousState(){
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800c9a2:	f7fe f96f 	bl	800ac84 <_ZN5State5getIdI17PodLaunchingStateEEjv>
 800c9a6:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	bf0c      	ite	eq
 800c9b2:	2301      	moveq	r3, #1
 800c9b4:	2300      	movne	r3, #0
 800c9b6:	b2db      	uxtb	r3, r3
	}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <_ZN3can7signals27TEST_GROUND_STATION_COMMAND3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	73fb      	strb	r3, [r7, #15]
                return value;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
            }
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <__tcf_2>:

class GroundStationReceiver {
public:

	static GroundStationReceiver& getInstance(){
		static GroundStationReceiver instance;
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__tcf_2+0xc>)
 800c9ea:	f000 f831 	bl	800ca50 <_ZN21GroundStationReceiverD1Ev>
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20000ddc 	.word	0x20000ddc

0800c9f4 <_ZN21GroundStationReceiver11getInstanceEv>:
	static GroundStationReceiver& getInstance(){
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
		static GroundStationReceiver instance;
 800c9f8:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	f3bf 8f5b 	dmb	ish
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	bf0c      	ite	eq
 800ca0a:	2301      	moveq	r3, #1
 800ca0c:	2300      	movne	r3, #0
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d013      	beq.n	800ca3c <_ZN21GroundStationReceiver11getInstanceEv+0x48>
 800ca14:	480b      	ldr	r0, [pc, #44]	; (800ca44 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800ca16:	f00f fb85 	bl	801c124 <__cxa_guard_acquire>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bf14      	ite	ne
 800ca20:	2301      	movne	r3, #1
 800ca22:	2300      	moveq	r3, #0
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d008      	beq.n	800ca3c <_ZN21GroundStationReceiver11getInstanceEv+0x48>
 800ca2a:	4807      	ldr	r0, [pc, #28]	; (800ca48 <_ZN21GroundStationReceiver11getInstanceEv+0x54>)
 800ca2c:	f000 f839 	bl	800caa2 <_ZN21GroundStationReceiverC1Ev>
 800ca30:	4806      	ldr	r0, [pc, #24]	; (800ca4c <_ZN21GroundStationReceiver11getInstanceEv+0x58>)
 800ca32:	f00f fdec 	bl	801c60e <atexit>
 800ca36:	4803      	ldr	r0, [pc, #12]	; (800ca44 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800ca38:	f00f fb80 	bl	801c13c <__cxa_guard_release>
		return instance;
 800ca3c:	4b02      	ldr	r3, [pc, #8]	; (800ca48 <_ZN21GroundStationReceiver11getInstanceEv+0x54>)
	}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000de4 	.word	0x20000de4
 800ca48:	20000ddc 	.word	0x20000ddc
 800ca4c:	0800c9e5 	.word	0x0800c9e5

0800ca50 <_ZN21GroundStationReceiverD1Ev>:

	~GroundStationReceiver(){
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7f4 fe17 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <_ZN21GroundStationReceiver14getLastCommandEv>:
	GroundStationReceiver(GroundStationReceiver&) = delete;
	GroundStationReceiver(GroundStationReceiver&&) = delete;
	GroundStationReceiver& operator=(GroundStationReceiver&) = delete;
	GroundStationReceiver& operator=(GroundStationReceiver&&) = delete;

	[[nodiscard]] inline GroundStationCommand getLastCommand(){
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
		return m_lastCommand;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	791b      	ldrb	r3, [r3, #4]
	}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <_ZZN21GroundStationReceiverC4EvENKUlR9RxMessageE_clES1_>:
private:
	explicit GroundStationReceiver(){
		m_receiverId = can::registerMessageReceiver<can::messages::TEST_GROUND_STATION_CONTROLL>([this](RxMessage& msg){
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800ca92:	6839      	ldr	r1, [r7, #0]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f84f 	bl	800cb38 <_ZN21GroundStationReceiver8callbackER9RxMessage>
		});
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <_ZN21GroundStationReceiverC1Ev>:
	explicit GroundStationReceiver(){
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b086      	sub	sp, #24
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	711a      	strb	r2, [r3, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::TEST_GROUND_STATION_CONTROLL>([this](RxMessage& msg){
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	f107 0308 	add.w	r3, r7, #8
 800cab6:	4611      	mov	r1, r2
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f891 	bl	800cbe0 <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_>
 800cabe:	f107 0308 	add.w	r3, r7, #8
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f8b6 	bl	800cc34 <_ZN3can23registerMessageReceiverINS_8messages28TEST_GROUND_STATION_CONTROLLEEEjSt8functionIFvR9RxMessageEE>
 800cac8:	4602      	mov	r2, r0
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f107 0308 	add.w	r3, r7, #8
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f4 fcde 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	af02      	add	r7, sp, #8
 800cae8:	60f8      	str	r0, [r7, #12]
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	2201      	movs	r2, #1
 800caf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cafc:	f7f6 f8f1 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800cb04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb08:	d000      	beq.n	800cb0c <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800cb0a:	e7fe      	b.n	800cb0a <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	6039      	str	r1, [r7, #0]
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	331c      	adds	r3, #28
 800cb26:	461a      	mov	r2, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff ffda 	bl	800cae2 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <_ZN21GroundStationReceiver8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::TEST_GROUND_STATION_CONTROLL> msg {raw};
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff ffe4 	bl	800cb16 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK9RxMessage>
		m_lastCommand = static_cast<GroundStationCommand>(msg.get<can::signals::TEST_GROUND_STATION_COMMAND>());
 800cb4e:	f107 0308 	add.w	r3, r7, #8
 800cb52:	4618      	mov	r0, r3
 800cb54:	f000 f88c 	bl	800cc70 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEE3getINS_7signals27TEST_GROUND_STATION_COMMANDEEENT_8dataTypeEv>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	711a      	strb	r2, [r3, #4]
	}
 800cb60:	bf00      	nop
 800cb62:	3720      	adds	r7, #32
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <_ZN12PodIdleState5setupEv>:
#include "GlobalState.hpp"
#include "GroundStationReceiver.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"

void PodIdleState::setup(){
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	printf("enter idle state\n");
 800cb70:	4803      	ldr	r0, [pc, #12]	; (800cb80 <_ZN12PodIdleState5setupEv+0x18>)
 800cb72:	f00a fee7 	bl	8017944 <printf_>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	0801f578 	.word	0x0801f578

0800cb84 <_ZN12PodIdleState6updateEv>:

void PodIdleState::update(){
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
	//TODO check that all ecus are connected using either a improved heartbeat or a custom method.
	if(GroundStationReceiver::getInstance().getLastCommand() == COMMAND_ENTER_LAUNCH_PREP){
 800cb8c:	f7ff ff32 	bl	800c9f4 <_ZN21GroundStationReceiver11getInstanceEv>
 800cb90:	4603      	mov	r3, r0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff ff6a 	bl	800ca6c <_ZN21GroundStationReceiver14getLastCommandEv>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2301      	moveq	r3, #1
 800cba0:	2300      	movne	r3, #0
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <_ZN12PodIdleState6updateEv+0x30>
		GlobalState::getInstance().setState<PodLaunchPreparationState>();
 800cba8:	f7fd fcf4 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800cbac:	4603      	mov	r3, r0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f870 	bl	800cc94 <_ZN11GlobalState8setStateI25PodLaunchPreparationStateEEvv>
	}
	osDelay(50);
 800cbb4:	2032      	movs	r0, #50	; 0x32
 800cbb6:	f00b f83f 	bl	8017c38 <osDelay>
}
 800cbba:	bf00      	nop
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
	...

0800cbc4 <_ZN12PodIdleState7disposeEv>:

void PodIdleState::dispose(){
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
	printf("exit idle state\n");
 800cbcc:	4803      	ldr	r0, [pc, #12]	; (800cbdc <_ZN12PodIdleState7disposeEv+0x18>)
 800cbce:	f00a feb9 	bl	8017944 <printf_>
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0801f58c 	.word	0x0801f58c

0800cbe0 <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800cbe0:	b590      	push	{r4, r7, lr}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f4 fc1f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800cbf2:	463b      	mov	r3, r7
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 f868 	bl	800ccca <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00f      	beq.n	800cc20 <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800cc00:	687c      	ldr	r4, [r7, #4]
 800cc02:	463b      	mov	r3, r7
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 f86b 	bl	800cce0 <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f000 f871 	bl	800ccf6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a05      	ldr	r2, [pc, #20]	; (800cc2c <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x4c>)
 800cc18:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a04      	ldr	r2, [pc, #16]	; (800cc30 <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x50>)
 800cc1e:	609a      	str	r2, [r3, #8]
      }
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4618      	mov	r0, r3
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd90      	pop	{r4, r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0800cd1b 	.word	0x0800cd1b
 800cc30:	0800cd45 	.word	0x0800cd45

0800cc34 <_ZN3can23registerMessageReceiverINS_8messages28TEST_GROUND_STATION_CONTROLLEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800cc34:	b590      	push	{r4, r7, lr}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7f4 fd6f 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f4 fc62 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800cc58:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800cc5a:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800cc5c:	f107 0308 	add.w	r3, r7, #8
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7f4 fc17 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800cc66:	4623      	mov	r3, r4
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	371c      	adds	r7, #28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd90      	pop	{r4, r7, pc}

0800cc70 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEE3getINS_7signals27TEST_GROUND_STATION_COMMANDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f103 0208 	add.w	r2, r3, #8
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3310      	adds	r3, #16
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7ff fe9b 	bl	800c9c0 <_ZN3can7signals27TEST_GROUND_STATION_COMMAND3getERKyS3_>
 800cc8a:	4603      	mov	r3, r0
        }
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <_ZN11GlobalState8setStateI25PodLaunchPreparationStateEEvv>:
	void setState(){
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	333c      	adds	r3, #60	; 0x3c
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 f86e 	bl	800cd82 <_ZN13StateMaschine8getStateI25PodLaunchPreparationStateEERK5Statev>
 800cca6:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7fd fab5 	bl	800a218 <_ZNK5State11getPodStateEv>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7fd fcac 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	333c      	adds	r3, #60	; 0x3c
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f870 	bl	800cda2 <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>
	}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800ccca:	b480      	push	{r7}
 800cccc:	b083      	sub	sp, #12
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
	  { return true; }
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4618      	mov	r0, r3
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800ccf6:	b590      	push	{r4, r7, lr}
 800ccf8:	b083      	sub	sp, #12
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800cd00:	6838      	ldr	r0, [r7, #0]
 800cd02:	f7ff ffed 	bl	800cce0 <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4622      	mov	r2, r4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f875 	bl	800cdfc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd90      	pop	{r4, r7, pc}

0800cd1a <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800cd1a:	b590      	push	{r4, r7, lr}
 800cd1c:	b083      	sub	sp, #12
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f882 	bl	800ce2e <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	6838      	ldr	r0, [r7, #0]
 800cd2e:	f7f4 fd84 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800cd32:	4603      	mov	r3, r0
 800cd34:	4619      	mov	r1, r3
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 f88a 	bl	800ce50 <_ZSt10__invoke_rIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800cd3c:	bf00      	nop
      }
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd90      	pop	{r4, r7, pc}

0800cd44 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800cd44:	b590      	push	{r4, r7, lr}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	60f8      	str	r0, [r7, #12]
 800cd4c:	60b9      	str	r1, [r7, #8]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800cd52:	79fb      	ldrb	r3, [r7, #7]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d109      	bne.n	800cd6c <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 f88f 	bl	800ce7c <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
 800cd5e:	4604      	mov	r4, r0
 800cd60:	68b8      	ldr	r0, [r7, #8]
 800cd62:	f000 f864 	bl	800ce2e <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800cd66:	4603      	mov	r3, r0
 800cd68:	6023      	str	r3, [r4, #0]
	    break;
 800cd6a:	e005      	b.n	800cd78 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800cd6c:	79fb      	ldrb	r3, [r7, #7]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	68b9      	ldr	r1, [r7, #8]
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f000 f88e 	bl	800ce94 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800cd78:	2300      	movs	r3, #0
      }
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd90      	pop	{r4, r7, pc}

0800cd82 <_ZN13StateMaschine8getStateI25PodLaunchPreparationStateEERK5Statev>:
	const State& getState(){
 800cd82:	b590      	push	{r4, r7, lr}
 800cd84:	b083      	sub	sp, #12
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681c      	ldr	r4, [r3, #0]
 800cd8e:	f7fd ff21 	bl	800abd4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800cd92:	4603      	mov	r3, r0
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4423      	add	r3, r4
 800cd98:	681b      	ldr	r3, [r3, #0]
	}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	370c      	adds	r7, #12
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd90      	pop	{r4, r7, pc}

0800cda2 <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>:
	void setState() {
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b084      	sub	sp, #16
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800cdaa:	f00e fe9b 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800cdc8:	f7fd ff04 	bl	800abd4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800cdcc:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	7d1b      	ldrb	r3, [r3, #20]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv+0x38>
			Error_Handler();
 800cdd6:	f003 f8cf 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2201      	movs	r2, #1
 800cde8:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800cdf0:	f00e fea8 	bl	801bb44 <vPortExitCritical>
	}
 800cdf4:	bf00      	nop
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800cdfc:	b590      	push	{r4, r7, lr}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800ce08:	68b8      	ldr	r0, [r7, #8]
 800ce0a:	f7ff ff69 	bl	800cce0 <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7f5 fb21 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4619      	mov	r1, r3
 800ce1a:	2004      	movs	r0, #4
 800ce1c:	f7f5 fb10 	bl	8002440 <_ZnwjPv>
 800ce20:	4602      	mov	r2, r0
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	bf00      	nop
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd90      	pop	{r4, r7, pc}

0800ce2e <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f857 	bl	800ceea <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>
 800ce3c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f000 f85f 	bl	800cf02 <_ZSt11__addressofIKZN21GroundStationReceiverC4EvEUlR9RxMessageE_EPT_RS5_>
 800ce44:	4603      	mov	r3, r0
 800ce46:	bf00      	nop
	}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <_ZSt10__invoke_rIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800ce50:	b5b0      	push	{r4, r5, r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f85c 	bl	800cf18 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ce60:	4604      	mov	r4, r0
 800ce62:	6838      	ldr	r0, [r7, #0]
 800ce64:	f7f4 fce9 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f000 f85d 	bl	800cf2e <_ZSt13__invoke_implIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800ce74:	bf00      	nop
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ce7c <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7f5 fae7 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800ce94:	b5b0      	push	{r4, r5, r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d016      	beq.n	800ced6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	dc19      	bgt.n	800cee0 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d002      	beq.n	800ceb6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d00a      	beq.n	800ceca <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800ceb4:	e014      	b.n	800cee0 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7ff ffe0 	bl	800ce7c <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
 800cebc:	4604      	mov	r4, r0
 800cebe:	68b8      	ldr	r0, [r7, #8]
 800cec0:	f7ff ffb5 	bl	800ce2e <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800cec4:	4603      	mov	r3, r0
 800cec6:	6023      	str	r3, [r4, #0]
	      break;
 800cec8:	e00a      	b.n	800cee0 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800ceca:	462a      	mov	r2, r5
 800cecc:	68b9      	ldr	r1, [r7, #8]
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 f843 	bl	800cf5a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800ced4:	e004      	b.n	800cee0 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800ced6:	4621      	mov	r1, r4
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f857 	bl	800cf8c <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800cede:	bf00      	nop
	  return false;
 800cee0:	2300      	movs	r3, #0
	}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bdb0      	pop	{r4, r5, r7, pc}

0800ceea <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7f5 fabb 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800cef8:	4603      	mov	r3, r0
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <_ZSt11__addressofIKZN21GroundStationReceiverC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	4618      	mov	r0, r3
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <_ZSt13__invoke_implIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800cf2e:	b590      	push	{r4, r7, lr}
 800cf30:	b085      	sub	sp, #20
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	7338      	strb	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800cf3a:	68b8      	ldr	r0, [r7, #8]
 800cf3c:	f7ff ffec 	bl	800cf18 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800cf40:	4604      	mov	r4, r0
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7f4 fc79 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f7ff fd99 	bl	800ca84 <_ZZN21GroundStationReceiverC4EvENKUlR9RxMessageE_clES1_>
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd90      	pop	{r4, r7, pc}

0800cf5a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800cf5a:	b590      	push	{r4, r7, lr}
 800cf5c:	b085      	sub	sp, #20
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800cf66:	68b8      	ldr	r0, [r7, #8]
 800cf68:	f7ff ffbf 	bl	800ceea <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7f5 fa72 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800cf74:	4603      	mov	r3, r0
 800cf76:	4619      	mov	r1, r3
 800cf78:	2004      	movs	r0, #4
 800cf7a:	f7f5 fa61 	bl	8002440 <_ZnwjPv>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	6823      	ldr	r3, [r4, #0]
 800cf82:	6013      	str	r3, [r2, #0]
	}
 800cf84:	bf00      	nop
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd90      	pop	{r4, r7, pc}

0800cf8c <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 f804 	bl	800cfa4 <_ZNSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
	}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_ZNSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f7f5 fa53 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <_ZN3can7signals6MDB_Id3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	73fb      	strb	r3, [r7, #15]
                return value;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
            }
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <_ZN3can7signals9MDB_State3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800cfde:	b480      	push	{r7}
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfee:	f04f 0200 	mov.w	r2, #0
 800cff2:	f04f 0300 	mov.w	r3, #0
 800cff6:	0a02      	lsrs	r2, r0, #8
 800cff8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cffc:	0a0b      	lsrs	r3, r1, #8
 800cffe:	4613      	mov	r3, r2
 800d000:	73fb      	strb	r3, [r7, #15]
                return value;
 800d002:	7bfb      	ldrb	r3, [r7, #15]
            }
 800d004:	4618      	mov	r0, r3
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800d010:	b480      	push	{r7}
 800d012:	b085      	sub	sp, #20
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d020:	f000 0201 	and.w	r2, r0, #1
 800d024:	2300      	movs	r3, #0
 800d026:	4313      	orrs	r3, r2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bf14      	ite	ne
 800d02c:	2301      	movne	r3, #1
 800d02e:	2300      	moveq	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]
                return value;
 800d032:	7bfb      	ldrb	r3, [r7, #15]
            }
 800d034:	4618      	mov	r0, r3
 800d036:	3714      	adds	r7, #20
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <_ZN3can7signals16PDU_TX_ErrorFlag3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 800d04a:	6879      	ldr	r1, [r7, #4]
 800d04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d050:	f000 0202 	and.w	r2, r0, #2
 800d054:	2300      	movs	r3, #0
 800d056:	4313      	orrs	r3, r2
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bf14      	ite	ne
 800d05c:	2301      	movne	r3, #1
 800d05e:	2300      	moveq	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]
                return value;
 800d062:	7bfb      	ldrb	r3, [r7, #15]
            }
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d080:	f000 0204 	and.w	r2, r0, #4
 800d084:	2300      	movs	r3, #0
 800d086:	4313      	orrs	r3, r2
 800d088:	2b00      	cmp	r3, #0
 800d08a:	bf14      	ite	ne
 800d08c:	2301      	movne	r3, #1
 800d08e:	2300      	moveq	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
                return value;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
            }
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>:
        class PDU_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800d0a0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800d0a4:	b087      	sub	sp, #28
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	607a      	str	r2, [r7, #4]
 800d0ae:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	7df9      	ldrb	r1, [r7, #23]
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	bf14      	ite	ne
 800d0c0:	2101      	movne	r1, #1
 800d0c2:	2100      	moveq	r1, #0
 800d0c4:	b2c9      	uxtb	r1, r1
 800d0c6:	b2c9      	uxtb	r1, r1
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	ea42 0804 	orr.w	r8, r2, r4
 800d0d2:	ea43 0905 	orr.w	r9, r3, r5
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800d0dc:	bf00      	nop
 800d0de:	371c      	adds	r7, #28
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800d0e6:	4770      	bx	lr

0800d0e8 <_ZN3can7signals17PDU_RX_ErrorReset3setERyS2_Rhb>:
        class PDU_RX_ErrorReset {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800d0e8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d0ec:	b089      	sub	sp, #36	; 0x24
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6178      	str	r0, [r7, #20]
 800d0f2:	6139      	str	r1, [r7, #16]
 800d0f4:	60fa      	str	r2, [r7, #12]
 800d0f6:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 800d0f8:	7afb      	ldrb	r3, [r7, #11]
 800d0fa:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	7ff9      	ldrb	r1, [r7, #31]
 800d104:	2000      	movs	r0, #0
 800d106:	460c      	mov	r4, r1
 800d108:	4605      	mov	r5, r0
 800d10a:	1921      	adds	r1, r4, r4
 800d10c:	6039      	str	r1, [r7, #0]
 800d10e:	eb45 0105 	adc.w	r1, r5, r5
 800d112:	6079      	str	r1, [r7, #4]
 800d114:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d118:	f000 0802 	and.w	r8, r0, #2
 800d11c:	f04f 0900 	mov.w	r9, #0
 800d120:	ea42 0a08 	orr.w	sl, r2, r8
 800d124:	ea43 0b09 	orr.w	fp, r3, r9
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800d12e:	bf00      	nop
 800d130:	3724      	adds	r7, #36	; 0x24
 800d132:	46bd      	mov	sp, r7
 800d134:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d138:	4770      	bx	lr

0800d13a <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>:
        class PDU_RX_PEHWEnable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800d13a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d13e:	b087      	sub	sp, #28
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	2200      	movs	r2, #0
 800d158:	4698      	mov	r8, r3
 800d15a:	4691      	mov	r9, r2
 800d15c:	f04f 0200 	mov.w	r2, #0
 800d160:	f04f 0300 	mov.w	r3, #0
 800d164:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d168:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d16c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d170:	f002 0404 	and.w	r4, r2, #4
 800d174:	2500      	movs	r5, #0
 800d176:	ea40 0a04 	orr.w	sl, r0, r4
 800d17a:	ea41 0b05 	orr.w	fp, r1, r5
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800d184:	bf00      	nop
 800d186:	371c      	adds	r7, #28
 800d188:	46bd      	mov	sp, r7
 800d18a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d18e:	4770      	bx	lr

0800d190 <_ZN18BrakeECUController13getBrakeStateEv>:
	BrakeState getBrakeState() {
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
		return m_brakeState;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	791b      	ldrb	r3, [r3, #4]
	}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <_ZN18BrakeECUController15disengageBrakesEv>:
	void disengageBrakes() {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
		m_engageTarget = false;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	725a      	strb	r2, [r3, #9]
		controlHelper();
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7ff f868 	bl	800c28c <_ZN18BrakeECUController13controlHelperEv>
	}
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <_ZN3SDC11getInstanceEv>:
#include "peripheral_config.hpp"
#include "GPIOWriteController.hpp"

class SDC {
public:
	static SDC& getInstance() {
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	af00      	add	r7, sp, #0
		static SDC instance {g_peripherals.m_sdcConfig, SDC_OPEN};
 800d1c8:	4b11      	ldr	r3, [pc, #68]	; (800d210 <_ZN3SDC11getInstanceEv+0x4c>)
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	f3bf 8f5b 	dmb	ish
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	bf0c      	ite	eq
 800d1da:	2301      	moveq	r3, #1
 800d1dc:	2300      	movne	r3, #0
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d012      	beq.n	800d20a <_ZN3SDC11getInstanceEv+0x46>
 800d1e4:	480a      	ldr	r0, [pc, #40]	; (800d210 <_ZN3SDC11getInstanceEv+0x4c>)
 800d1e6:	f00e ff9d 	bl	801c124 <__cxa_guard_acquire>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bf14      	ite	ne
 800d1f0:	2301      	movne	r3, #1
 800d1f2:	2300      	moveq	r3, #0
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d007      	beq.n	800d20a <_ZN3SDC11getInstanceEv+0x46>
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4905      	ldr	r1, [pc, #20]	; (800d214 <_ZN3SDC11getInstanceEv+0x50>)
 800d1fe:	4806      	ldr	r0, [pc, #24]	; (800d218 <_ZN3SDC11getInstanceEv+0x54>)
 800d200:	f001 fa5a 	bl	800e6b8 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>
 800d204:	4802      	ldr	r0, [pc, #8]	; (800d210 <_ZN3SDC11getInstanceEv+0x4c>)
 800d206:	f00e ff99 	bl	801c13c <__cxa_guard_release>
		return instance;
 800d20a:	4b03      	ldr	r3, [pc, #12]	; (800d218 <_ZN3SDC11getInstanceEv+0x54>)
	}
 800d20c:	4618      	mov	r0, r3
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	20000df4 	.word	0x20000df4
 800d214:	0801faa0 	.word	0x0801faa0
 800d218:	20000de8 	.word	0x20000de8

0800d21c <__tcf_3>:
};

class MergedMdbState {
public:
	static const MergedMdbState& getInstance(){
		static MergedMdbState instance;
 800d21c:	b580      	push	{r7, lr}
 800d21e:	af00      	add	r7, sp, #0
 800d220:	4801      	ldr	r0, [pc, #4]	; (800d228 <__tcf_3+0xc>)
 800d222:	f000 f86c 	bl	800d2fe <_ZN14MergedMdbStateD1Ev>
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20000df8 	.word	0x20000df8

0800d22c <_ZN14MergedMdbState11getInstanceEv>:
	static const MergedMdbState& getInstance(){
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
		static MergedMdbState instance;
 800d230:	4b12      	ldr	r3, [pc, #72]	; (800d27c <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	f3bf 8f5b 	dmb	ish
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bf0c      	ite	eq
 800d242:	2301      	moveq	r3, #1
 800d244:	2300      	movne	r3, #0
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d013      	beq.n	800d274 <_ZN14MergedMdbState11getInstanceEv+0x48>
 800d24c:	480b      	ldr	r0, [pc, #44]	; (800d27c <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800d24e:	f00e ff69 	bl	801c124 <__cxa_guard_acquire>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	bf14      	ite	ne
 800d258:	2301      	movne	r3, #1
 800d25a:	2300      	moveq	r3, #0
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <_ZN14MergedMdbState11getInstanceEv+0x48>
 800d262:	4807      	ldr	r0, [pc, #28]	; (800d280 <_ZN14MergedMdbState11getInstanceEv+0x54>)
 800d264:	f000 f82b 	bl	800d2be <_ZN14MergedMdbStateC1Ev>
 800d268:	4806      	ldr	r0, [pc, #24]	; (800d284 <_ZN14MergedMdbState11getInstanceEv+0x58>)
 800d26a:	f00f f9d0 	bl	801c60e <atexit>
 800d26e:	4803      	ldr	r0, [pc, #12]	; (800d27c <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800d270:	f00e ff64 	bl	801c13c <__cxa_guard_release>
		return instance;
 800d274:	4b02      	ldr	r3, [pc, #8]	; (800d280 <_ZN14MergedMdbState11getInstanceEv+0x54>)
	}
 800d276:	4618      	mov	r0, r3
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20000e04 	.word	0x20000e04
 800d280:	20000df8 	.word	0x20000df8
 800d284:	0800d21d 	.word	0x0800d21d

0800d288 <_ZNK14MergedMdbState8getStateEv>:
	MergedMdbState(MergedMdbState&) = delete;
	MergedMdbState(MergedMdbState&&) = delete;
	MergedMdbState& operator=(MergedMdbState&&) = delete;
	MergedMdbState& operator=(MergedMdbState&) = delete;

	MdbState getState() const{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
		return m_state;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	7a9b      	ldrb	r3, [r3, #10]
	}
 800d294:	4618      	mov	r0, r3
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <_ZZN14MergedMdbStateC4EvENKUlR9RxMessageE_clES1_>:

private:
	MergedMdbState() {
		m_receiverId = can::registerMessageReceiver<can::messages::MDB_TX_State>([this](RxMessage& msg){
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800d2ae:	6839      	ldr	r1, [r7, #0]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f884 	bl	800d3be <_ZN14MergedMdbState8callbackER9RxMessage>
		});
 800d2b6:	bf00      	nop
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <_ZN14MergedMdbStateC1Ev>:
	MergedMdbState() {
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b086      	sub	sp, #24
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	729a      	strb	r2, [r3, #10]
		m_receiverId = can::registerMessageReceiver<can::messages::MDB_TX_State>([this](RxMessage& msg){
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f107 0308 	add.w	r3, r7, #8
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 fa63 	bl	800d7a0 <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_>
 800d2da:	f107 0308 	add.w	r3, r7, #8
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fa88 	bl	800d7f4 <_ZN3can23registerMessageReceiverINS_8messages12MDB_TX_StateEEEjSt8functionIFvR9RxMessageEE>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	f107 0308 	add.w	r3, r7, #8
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7f4 f8d0 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <_ZN14MergedMdbStateD1Ev>:
	~MergedMdbState(){
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b082      	sub	sp, #8
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f4 f9c0 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <_ZN14MergedMdbState11updateStateEv>:


private:

	void updateState(){
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b084      	sub	sp, #16
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800d322:	f00e fbdf 	bl	801bae4 <vPortEnterCritical>
		for(unsigned int i=1;i<6;i++){
 800d326:	2301      	movs	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b05      	cmp	r3, #5
 800d32e:	d812      	bhi.n	800d356 <_ZN14MergedMdbState11updateStateEv+0x3c>
			if(m_states[0] != m_states[i]){
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	791a      	ldrb	r2, [r3, #4]
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	440b      	add	r3, r1
 800d33a:	3304      	adds	r3, #4
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d005      	beq.n	800d34e <_ZN14MergedMdbState11updateStateEv+0x34>
				m_state = MDB_STATE_INCONSISTANT;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	729a      	strb	r2, [r3, #10]
				taskEXIT_CRITICAL();
 800d348:	f00e fbfc 	bl	801bb44 <vPortExitCritical>
				return;
 800d34c:	e009      	b.n	800d362 <_ZN14MergedMdbState11updateStateEv+0x48>
		for(unsigned int i=1;i<6;i++){
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	e7e9      	b.n	800d32a <_ZN14MergedMdbState11updateStateEv+0x10>
			}
		}
		m_state = m_states[0];
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	791a      	ldrb	r2, [r3, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	729a      	strb	r2, [r3, #10]
		taskEXIT_CRITICAL();
 800d35e:	f00e fbf1 	bl	801bb44 <vPortExitCritical>
	}
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800d368:	b580      	push	{r7, lr}
 800d36a:	b086      	sub	sp, #24
 800d36c:	af02      	add	r7, sp, #8
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	2300      	movs	r3, #0
 800d37c:	2202      	movs	r2, #2
 800d37e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d382:	f7f5 fcae 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800d38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38e:	d000      	beq.n	800d392 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800d390:	e7fe      	b.n	800d390 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	331c      	adds	r3, #28
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7ff ffda 	bl	800d368 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <_ZN14MergedMdbState8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800d3be:	b580      	push	{r7, lr}
 800d3c0:	b08a      	sub	sp, #40	; 0x28
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::MDB_TX_State> msg {raw};
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff ffe4 	bl	800d39c <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK9RxMessage>
		uint8_t mdbId = msg.get<can::signals::MDB_Id>();
 800d3d4:	f107 0308 	add.w	r3, r7, #8
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fa29 	bl	800d830 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals6MDB_IdEEENT_8dataTypeEv>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t mdbStateId = msg.get<can::signals::MDB_State>();
 800d3e4:	f107 0308 	add.w	r3, r7, #8
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fa33 	bl	800d854 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals9MDB_StateEEENT_8dataTypeEv>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MdbState mdbState = static_cast<MdbState>(mdbStateId);
 800d3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		m_states[mdbId] = mdbState;
 800d3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	4413      	add	r3, r2
 800d404:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d408:	711a      	strb	r2, [r3, #4]
		updateState();
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7ff ff85 	bl	800d31a <_ZN14MergedMdbState11updateStateEv>
	}
 800d410:	bf00      	nop
 800d412:	3728      	adds	r7, #40	; 0x28
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <__tcf_4>:

class PDUController {
public:

	static PDUController& getInstance(){
		static PDUController instance;
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	4801      	ldr	r0, [pc, #4]	; (800d424 <__tcf_4+0xc>)
 800d41e:	f000 f8a1 	bl	800d564 <_ZN13PDUControllerD1Ev>
 800d422:	bd80      	pop	{r7, pc}
 800d424:	20000e08 	.word	0x20000e08

0800d428 <_ZN13PDUController11getInstanceEv>:
	static PDUController& getInstance(){
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
		static PDUController instance;
 800d42c:	4b12      	ldr	r3, [pc, #72]	; (800d478 <_ZN13PDUController11getInstanceEv+0x50>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	f3bf 8f5b 	dmb	ish
 800d434:	b2db      	uxtb	r3, r3
 800d436:	f003 0301 	and.w	r3, r3, #1
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	bf0c      	ite	eq
 800d43e:	2301      	moveq	r3, #1
 800d440:	2300      	movne	r3, #0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d013      	beq.n	800d470 <_ZN13PDUController11getInstanceEv+0x48>
 800d448:	480b      	ldr	r0, [pc, #44]	; (800d478 <_ZN13PDUController11getInstanceEv+0x50>)
 800d44a:	f00e fe6b 	bl	801c124 <__cxa_guard_acquire>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	bf14      	ite	ne
 800d454:	2301      	movne	r3, #1
 800d456:	2300      	moveq	r3, #0
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d008      	beq.n	800d470 <_ZN13PDUController11getInstanceEv+0x48>
 800d45e:	4807      	ldr	r0, [pc, #28]	; (800d47c <_ZN13PDUController11getInstanceEv+0x54>)
 800d460:	f000 f863 	bl	800d52a <_ZN13PDUControllerC1Ev>
 800d464:	4806      	ldr	r0, [pc, #24]	; (800d480 <_ZN13PDUController11getInstanceEv+0x58>)
 800d466:	f00f f8d2 	bl	801c60e <atexit>
 800d46a:	4803      	ldr	r0, [pc, #12]	; (800d478 <_ZN13PDUController11getInstanceEv+0x50>)
 800d46c:	f00e fe66 	bl	801c13c <__cxa_guard_release>
		return instance;
 800d470:	4b02      	ldr	r3, [pc, #8]	; (800d47c <_ZN13PDUController11getInstanceEv+0x54>)
	}
 800d472:	4618      	mov	r0, r3
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000e28 	.word	0x20000e28
 800d47c:	20000e08 	.word	0x20000e08
 800d480:	0800d419 	.word	0x0800d419

0800d484 <_ZN13PDUController9isEnabledEv>:
	PDUController(PDUController&) = delete;
	PDUController(PDUController&&) = delete;
	PDUController& operator=(PDUController&) = delete;
	PDUController& operator=(PDUController&&) = delete;

	bool isEnabled() {
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
		return m_enabled;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	791b      	ldrb	r3, [r3, #4]
	}
 800d490:	4618      	mov	r0, r3
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <_ZN13PDUController8hasErrorEv>:

	bool hasError() {
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
		return m_error;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	795b      	ldrb	r3, [r3, #5]
	}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN13PDUController11isHVEnabledEv>:

	bool isHVEnabled(){
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
		return m_hvEnabled;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	799b      	ldrb	r3, [r3, #6]
	}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <_ZN13PDUController6enableEv>:

	void enable(){
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
		//TODO this is super sketchy. reseting all errors.
		controllHelper(true, m_error, m_hvEnabled);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	795a      	ldrb	r2, [r3, #5]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	799b      	ldrb	r3, [r3, #6]
 800d4dc:	2101      	movs	r1, #1
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 f8b3 	bl	800d64a <_ZN13PDUController14controllHelperEbbb>
	}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <_ZN13PDUController8enableHVEv>:

	void resetErrors(){
		controllHelper(m_enabled, true, m_hvEnabled);
	}

	void enableHV(){
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
		//TODO this is super sketchy. reseting all errors.
		controllHelper(m_enabled, m_error, true);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	7919      	ldrb	r1, [r3, #4]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	795a      	ldrb	r2, [r3, #5]
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f8a3 	bl	800d64a <_ZN13PDUController14controllHelperEbbb>
	}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <_ZZN13PDUControllerC4EvENKUlR9RxMessageE_clES1_>:
		controllHelper(m_enabled, m_error, false);
	}

private:
	explicit PDUController() {
		m_receiverId = can::registerMessageReceiver<can::messages::PDU_TX_Status>([this](RxMessage& msg){
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 f85a 	bl	800d5d6 <_ZN13PDUController8callbackER9RxMessage>
		});
 800d522:	bf00      	nop
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <_ZN13PDUControllerC1Ev>:
	explicit PDUController() {
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b086      	sub	sp, #24
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::PDU_TX_Status>([this](RxMessage& msg){
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	f107 0308 	add.w	r3, r7, #8
 800d538:	4611      	mov	r1, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 f99c 	bl	800d878 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_>
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f9c1 	bl	800d8cc <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800d54a:	4602      	mov	r2, r0
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f107 0308 	add.w	r3, r7, #8
 800d554:	4618      	mov	r0, r3
 800d556:	f7f3 ff9d 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <_ZN13PDUControllerD1Ev>:
	~PDUController(){
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	f7f4 f88d 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af02      	add	r7, sp, #8
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	2300      	movs	r3, #0
 800d594:	2201      	movs	r2, #1
 800d596:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d59a:	f7f5 fba2 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800d5a2:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800d5a6:	d000      	beq.n	800d5aa <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800d5a8:	e7fe      	b.n	800d5a8 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	331c      	adds	r3, #28
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff ffda 	bl	800d580 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <_ZN13PDUController8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b088      	sub	sp, #32
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::PDU_TX_Status> msg {raw};
 800d5e0:	f107 0308 	add.w	r3, r7, #8
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff ffe4 	bl	800d5b4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>
		m_enabled = msg.get<can::signals::PDU_TX_Enabled>();
 800d5ec:	f107 0308 	add.w	r3, r7, #8
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 f989 	bl	800d908 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	711a      	strb	r2, [r3, #4]
		m_error = msg.get<can::signals::PDU_TX_ErrorFlag>();
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f992 	bl	800d92c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals16PDU_TX_ErrorFlagEEENT_8dataTypeEv>
 800d608:	4603      	mov	r3, r0
 800d60a:	461a      	mov	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	715a      	strb	r2, [r3, #5]
		m_hvEnabled = msg.get<can::signals::PDU_TX_PEHWEnabled>();
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	4618      	mov	r0, r3
 800d616:	f000 f99b 	bl	800d950 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>
 800d61a:	4603      	mov	r3, r0
 800d61c:	461a      	mov	r2, r3
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	719a      	strb	r2, [r3, #6]
	}
 800d622:	bf00      	nop
 800d624:	3720      	adds	r7, #32
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	2300      	movs	r3, #0
 800d636:	2201      	movs	r2, #1
 800d638:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800d63c:	f7f3 fca6 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <_ZN13PDUController14controllHelperEbbb>:

	void controllHelper(bool enable, bool resetErrors, bool hvEnable){
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b088      	sub	sp, #32
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	4608      	mov	r0, r1
 800d654:	4611      	mov	r1, r2
 800d656:	461a      	mov	r2, r3
 800d658:	4603      	mov	r3, r0
 800d65a:	70fb      	strb	r3, [r7, #3]
 800d65c:	460b      	mov	r3, r1
 800d65e:	70bb      	strb	r3, [r7, #2]
 800d660:	4613      	mov	r3, r2
 800d662:	707b      	strb	r3, [r7, #1]
		can::Message<can::messages::PDU_RX_Control> msg;
 800d664:	f107 0308 	add.w	r3, r7, #8
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff ffde 	bl	800d62a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>
		msg.set<can::signals::PDU_RX_Enable>(enable);
 800d66e:	78fa      	ldrb	r2, [r7, #3]
 800d670:	f107 0308 	add.w	r3, r7, #8
 800d674:	4611      	mov	r1, r2
 800d676:	4618      	mov	r0, r3
 800d678:	f000 f97c 	bl	800d974 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>
		msg.set<can::signals::PDU_RX_ErrorReset>(resetErrors);
 800d67c:	78ba      	ldrb	r2, [r7, #2]
 800d67e:	f107 0308 	add.w	r3, r7, #8
 800d682:	4611      	mov	r1, r2
 800d684:	4618      	mov	r0, r3
 800d686:	f000 f98a 	bl	800d99e <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_ErrorResetEEEvNT_8dataTypeE>
		msg.set<can::signals::PDU_RX_PEHWEnable>(hvEnable);
 800d68a:	787a      	ldrb	r2, [r7, #1]
 800d68c:	f107 0308 	add.w	r3, r7, #8
 800d690:	4611      	mov	r1, r2
 800d692:	4618      	mov	r0, r3
 800d694:	f000 f998 	bl	800d9c8 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>
		msg.send();
 800d698:	f107 0308 	add.w	r3, r7, #8
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7f3 fdbe 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800d6a4:	bf00      	nop
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_ZN25PodLaunchPreparationState5setupEv>:
#include "cmsis_os.h"
#include "estdio.hpp"
#include "MergedMdbState.hpp"
#include "PDUController.hpp"

void PodLaunchPreparationState::setup() {
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	printf("enter launch prep\n");
 800d6b4:	480f      	ldr	r0, [pc, #60]	; (800d6f4 <_ZN25PodLaunchPreparationState5setupEv+0x48>)
 800d6b6:	f00a f945 	bl	8017944 <printf_>
	PDUController::getInstance().enable();
 800d6ba:	f7ff feb5 	bl	800d428 <_ZN13PDUController11getInstanceEv>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff ff03 	bl	800d4cc <_ZN13PDUController6enableEv>
	PDUController::getInstance().enableHV();
 800d6c6:	f7ff feaf 	bl	800d428 <_ZN13PDUController11getInstanceEv>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff ff0d 	bl	800d4ec <_ZN13PDUController8enableHVEv>
	BrakeECUController::getInstance().disengageBrakes();
 800d6d2:	f7fe fd81 	bl	800c1d8 <_ZN18BrakeECUController11getInstanceEv>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fd65 	bl	800d1a8 <_ZN18BrakeECUController15disengageBrakesEv>
	SDC::getInstance().close();
 800d6de:	f7ff fd71 	bl	800d1c4 <_ZN3SDC11getInstanceEv>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 f810 	bl	800e70a <_ZN3SDC5closeEv>
}
 800d6ea:	bf00      	nop
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	0801f5d4 	.word	0x0801f5d4

0800d6f8 <_ZN25PodLaunchPreparationState6updateEv>:

void PodLaunchPreparationState::update() {
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	if (MergedMdbState::getInstance().getState() == MDB_STATE_PRECHARGE_DONE
 800d700:	f7ff fd94 	bl	800d22c <_ZN14MergedMdbState11getInstanceEv>
 800d704:	4603      	mov	r3, r0
 800d706:	4618      	mov	r0, r3
 800d708:	f7ff fdbe 	bl	800d288 <_ZNK14MergedMdbState8getStateEv>
 800d70c:	4603      	mov	r3, r0
			&& PDUController::getInstance().isEnabled()
			&& PDUController::getInstance().isHVEnabled()
			&& not PDUController::getInstance().hasError()
			&& BrakeECUController::getInstance().getBrakeState() == BRAKE_DISENGAGED) {
 800d70e:	2b05      	cmp	r3, #5
 800d710:	d128      	bne.n	800d764 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& PDUController::getInstance().isEnabled()
 800d712:	f7ff fe89 	bl	800d428 <_ZN13PDUController11getInstanceEv>
 800d716:	4603      	mov	r3, r0
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff feb3 	bl	800d484 <_ZN13PDUController9isEnabledEv>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d01f      	beq.n	800d764 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& PDUController::getInstance().isHVEnabled()
 800d724:	f7ff fe80 	bl	800d428 <_ZN13PDUController11getInstanceEv>
 800d728:	4603      	mov	r3, r0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7ff fec2 	bl	800d4b4 <_ZN13PDUController11isHVEnabledEv>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d016      	beq.n	800d764 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& not PDUController::getInstance().hasError()
 800d736:	f7ff fe77 	bl	800d428 <_ZN13PDUController11getInstanceEv>
 800d73a:	4603      	mov	r3, r0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff fead 	bl	800d49c <_ZN13PDUController8hasErrorEv>
 800d742:	4603      	mov	r3, r0
 800d744:	f083 0301 	eor.w	r3, r3, #1
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00a      	beq.n	800d764 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& BrakeECUController::getInstance().getBrakeState() == BRAKE_DISENGAGED) {
 800d74e:	f7fe fd43 	bl	800c1d8 <_ZN18BrakeECUController11getInstanceEv>
 800d752:	4603      	mov	r3, r0
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff fd1b 	bl	800d190 <_ZN18BrakeECUController13getBrakeStateEv>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	d101      	bne.n	800d764 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
 800d760:	2301      	movs	r3, #1
 800d762:	e000      	b.n	800d766 <_ZN25PodLaunchPreparationState6updateEv+0x6e>
 800d764:	2300      	movs	r3, #0
	if (MergedMdbState::getInstance().getState() == MDB_STATE_PRECHARGE_DONE
 800d766:	2b00      	cmp	r3, #0
 800d768:	d005      	beq.n	800d776 <_ZN25PodLaunchPreparationState6updateEv+0x7e>
		GlobalState::getInstance().setState<PodReadyToLaunchState>();
 800d76a:	f7fc ff13 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800d76e:	4603      	mov	r3, r0
 800d770:	4618      	mov	r0, r3
 800d772:	f000 f93e 	bl	800d9f2 <_ZN11GlobalState8setStateI21PodReadyToLaunchStateEEvv>
	}
	osDelay(50);
 800d776:	2032      	movs	r0, #50	; 0x32
 800d778:	f00a fa5e 	bl	8017c38 <osDelay>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <_ZN25PodLaunchPreparationState7disposeEv>:

void PodLaunchPreparationState::dispose() {
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	printf("exit launch prep\n");
 800d78c:	4803      	ldr	r0, [pc, #12]	; (800d79c <_ZN25PodLaunchPreparationState7disposeEv+0x18>)
 800d78e:	f00a f8d9 	bl	8017944 <printf_>
}
 800d792:	bf00      	nop
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0801f5e8 	.word	0x0801f5e8

0800d7a0 <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800d7a0:	b590      	push	{r4, r7, lr}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7f3 fe3f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800d7b2:	463b      	mov	r3, r7
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f000 f937 	bl	800da28 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d00f      	beq.n	800d7e0 <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800d7c0:	687c      	ldr	r4, [r7, #4]
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f93a 	bl	800da3e <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 f940 	bl	800da54 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	4a05      	ldr	r2, [pc, #20]	; (800d7ec <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x4c>)
 800d7d8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a04      	ldr	r2, [pc, #16]	; (800d7f0 <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x50>)
 800d7de:	609a      	str	r2, [r3, #8]
      }
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd90      	pop	{r4, r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800da79 	.word	0x0800da79
 800d7f0:	0800daa3 	.word	0x0800daa3

0800d7f4 <_ZN3can23registerMessageReceiverINS_8messages12MDB_TX_StateEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d7f4:	b590      	push	{r4, r7, lr}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d7fc:	f107 0308 	add.w	r3, r7, #8
 800d800:	6879      	ldr	r1, [r7, #4]
 800d802:	4618      	mov	r0, r3
 800d804:	f7f3 ff8f 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d808:	f107 0308 	add.w	r3, r7, #8
 800d80c:	2200      	movs	r2, #0
 800d80e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d812:	4618      	mov	r0, r3
 800d814:	f7f3 fe82 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d818:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d81a:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	4618      	mov	r0, r3
 800d822:	f7f3 fe37 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d826:	4623      	mov	r3, r4
}
 800d828:	4618      	mov	r0, r3
 800d82a:	371c      	adds	r7, #28
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}

0800d830 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals6MDB_IdEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f103 0208 	add.w	r2, r3, #8
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	3310      	adds	r3, #16
 800d842:	4619      	mov	r1, r3
 800d844:	4610      	mov	r0, r2
 800d846:	f7ff fbb9 	bl	800cfbc <_ZN3can7signals6MDB_Id3getERKyS3_>
 800d84a:	4603      	mov	r3, r0
        }
 800d84c:	4618      	mov	r0, r3
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals9MDB_StateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f103 0208 	add.w	r2, r3, #8
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3310      	adds	r3, #16
 800d866:	4619      	mov	r1, r3
 800d868:	4610      	mov	r0, r2
 800d86a:	f7ff fbb8 	bl	800cfde <_ZN3can7signals9MDB_State3getERKyS3_>
 800d86e:	4603      	mov	r3, r0
        }
 800d870:	4618      	mov	r0, r3
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800d878:	b590      	push	{r4, r7, lr}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	f7f3 fdd3 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800d88a:	463b      	mov	r3, r7
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 f927 	bl	800dae0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00f      	beq.n	800d8b8 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800d898:	687c      	ldr	r4, [r7, #4]
 800d89a:	463b      	mov	r3, r7
 800d89c:	4618      	mov	r0, r3
 800d89e:	f000 f92a 	bl	800daf6 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f000 f930 	bl	800db0c <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a05      	ldr	r2, [pc, #20]	; (800d8c4 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800d8b0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a04      	ldr	r2, [pc, #16]	; (800d8c8 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x50>)
 800d8b6:	609a      	str	r2, [r3, #8]
      }
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd90      	pop	{r4, r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	0800db31 	.word	0x0800db31
 800d8c8:	0800db5b 	.word	0x0800db5b

0800d8cc <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d8cc:	b590      	push	{r4, r7, lr}
 800d8ce:	b087      	sub	sp, #28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d8d4:	f107 0308 	add.w	r3, r7, #8
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7f3 ff23 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f3 fe16 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d8f0:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d8f2:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d8f4:	f107 0308 	add.w	r3, r7, #8
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7f3 fdcb 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d8fe:	4623      	mov	r3, r4
}
 800d900:	4618      	mov	r0, r3
 800d902:	371c      	adds	r7, #28
 800d904:	46bd      	mov	sp, r7
 800d906:	bd90      	pop	{r4, r7, pc}

0800d908 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f103 0208 	add.w	r2, r3, #8
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3310      	adds	r3, #16
 800d91a:	4619      	mov	r1, r3
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7ff fb77 	bl	800d010 <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>
 800d922:	4603      	mov	r3, r0
        }
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals16PDU_TX_ErrorFlagEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f103 0208 	add.w	r2, r3, #8
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3310      	adds	r3, #16
 800d93e:	4619      	mov	r1, r3
 800d940:	4610      	mov	r0, r2
 800d942:	f7ff fb7d 	bl	800d040 <_ZN3can7signals16PDU_TX_ErrorFlag3getERKyS3_>
 800d946:	4603      	mov	r3, r0
        }
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f103 0208 	add.w	r2, r3, #8
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	3310      	adds	r3, #16
 800d962:	4619      	mov	r1, r3
 800d964:	4610      	mov	r0, r2
 800d966:	f7ff fb83 	bl	800d070 <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>
 800d96a:	4603      	mov	r3, r0
        }
 800d96c:	4618      	mov	r0, r3
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f103 0008 	add.w	r0, r3, #8
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f103 0110 	add.w	r1, r3, #16
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	1d1a      	adds	r2, r3, #4
 800d990:	78fb      	ldrb	r3, [r7, #3]
 800d992:	f7ff fb85 	bl	800d0a0 <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>
        }
 800d996:	bf00      	nop
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_ErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f103 0008 	add.w	r0, r3, #8
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f103 0110 	add.w	r1, r3, #16
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	1d1a      	adds	r2, r3, #4
 800d9ba:	78fb      	ldrb	r3, [r7, #3]
 800d9bc:	f7ff fb94 	bl	800d0e8 <_ZN3can7signals17PDU_RX_ErrorReset3setERyS2_Rhb>
        }
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f103 0008 	add.w	r0, r3, #8
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f103 0110 	add.w	r1, r3, #16
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	1d1a      	adds	r2, r3, #4
 800d9e4:	78fb      	ldrb	r3, [r7, #3]
 800d9e6:	f7ff fba8 	bl	800d13a <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>
        }
 800d9ea:	bf00      	nop
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <_ZN11GlobalState8setStateI21PodReadyToLaunchStateEEvv>:
	void setState(){
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	333c      	adds	r3, #60	; 0x3c
 800d9fe:	4618      	mov	r0, r3
 800da00:	f000 f8ca 	bl	800db98 <_ZN13StateMaschine8getStateI21PodReadyToLaunchStateEERK5Statev>
 800da04:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7fc fc06 	bl	800a218 <_ZNK5State11getPodStateEv>
 800da0c:	4603      	mov	r3, r0
 800da0e:	4619      	mov	r1, r3
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7fc fdfd 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	333c      	adds	r3, #60	; 0x3c
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 f8cc 	bl	800dbb8 <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv>
	}
 800da20:	bf00      	nop
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800da30:	2301      	movs	r3, #1
 800da32:	4618      	mov	r0, r3
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800da3e:	b480      	push	{r7}
 800da40:	b083      	sub	sp, #12
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4618      	mov	r0, r3
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800da54:	b590      	push	{r4, r7, lr}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800da5e:	6838      	ldr	r0, [r7, #0]
 800da60:	f7ff ffed 	bl	800da3e <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800da64:	4603      	mov	r3, r0
 800da66:	4622      	mov	r2, r4
 800da68:	4619      	mov	r1, r3
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f8d1 	bl	800dc12 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	bd90      	pop	{r4, r7, pc}

0800da78 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f8de 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800da88:	4604      	mov	r4, r0
 800da8a:	6838      	ldr	r0, [r7, #0]
 800da8c:	f7f3 fed5 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800da90:	4603      	mov	r3, r0
 800da92:	4619      	mov	r1, r3
 800da94:	4620      	mov	r0, r4
 800da96:	f000 f8e6 	bl	800dc66 <_ZSt10__invoke_rIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800da9a:	bf00      	nop
      }
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd90      	pop	{r4, r7, pc}

0800daa2 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800daa2:	b590      	push	{r4, r7, lr}
 800daa4:	b085      	sub	sp, #20
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	60f8      	str	r0, [r7, #12]
 800daaa:	60b9      	str	r1, [r7, #8]
 800daac:	4613      	mov	r3, r2
 800daae:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800dab0:	79fb      	ldrb	r3, [r7, #7]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d109      	bne.n	800daca <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 f8eb 	bl	800dc92 <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
 800dabc:	4604      	mov	r4, r0
 800dabe:	68b8      	ldr	r0, [r7, #8]
 800dac0:	f000 f8c0 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800dac4:	4603      	mov	r3, r0
 800dac6:	6023      	str	r3, [r4, #0]
	    break;
 800dac8:	e005      	b.n	800dad6 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	461a      	mov	r2, r3
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	68f8      	ldr	r0, [r7, #12]
 800dad2:	f000 f8ea 	bl	800dcaa <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800dad6:	2300      	movs	r3, #0
      }
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd90      	pop	{r4, r7, pc}

0800dae0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
	  { return true; }
 800dae8:	2301      	movs	r3, #1
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800daf6:	b480      	push	{r7}
 800daf8:	b083      	sub	sp, #12
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	f7ff ffed 	bl	800daf6 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800db1c:	4603      	mov	r3, r0
 800db1e:	4622      	mov	r2, r4
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 f8ec 	bl	800dd00 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd90      	pop	{r4, r7, pc}

0800db30 <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800db30:	b590      	push	{r4, r7, lr}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f8f9 	bl	800dd32 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800db40:	4604      	mov	r4, r0
 800db42:	6838      	ldr	r0, [r7, #0]
 800db44:	f7f3 fe79 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800db48:	4603      	mov	r3, r0
 800db4a:	4619      	mov	r1, r3
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 f901 	bl	800dd54 <_ZSt10__invoke_rIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800db52:	bf00      	nop
      }
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	bd90      	pop	{r4, r7, pc}

0800db5a <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800db5a:	b590      	push	{r4, r7, lr}
 800db5c:	b085      	sub	sp, #20
 800db5e:	af00      	add	r7, sp, #0
 800db60:	60f8      	str	r0, [r7, #12]
 800db62:	60b9      	str	r1, [r7, #8]
 800db64:	4613      	mov	r3, r2
 800db66:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d109      	bne.n	800db82 <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 f906 	bl	800dd80 <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
 800db74:	4604      	mov	r4, r0
 800db76:	68b8      	ldr	r0, [r7, #8]
 800db78:	f000 f8db 	bl	800dd32 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800db7c:	4603      	mov	r3, r0
 800db7e:	6023      	str	r3, [r4, #0]
	    break;
 800db80:	e005      	b.n	800db8e <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	461a      	mov	r2, r3
 800db86:	68b9      	ldr	r1, [r7, #8]
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 f905 	bl	800dd98 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800db8e:	2300      	movs	r3, #0
      }
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}

0800db98 <_ZN13StateMaschine8getStateI21PodReadyToLaunchStateEERK5Statev>:
	const State& getState(){
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681c      	ldr	r4, [r3, #0]
 800dba4:	f7fc ffea 	bl	800ab7c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	4423      	add	r3, r4
 800dbae:	681b      	ldr	r3, [r3, #0]
	}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd90      	pop	{r4, r7, pc}

0800dbb8 <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv>:
	void setState() {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800dbc0:	f00d ff90 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800dbde:	f7fc ffcd 	bl	800ab7c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 800dbe2:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	7d1b      	ldrb	r3, [r3, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv+0x38>
			Error_Handler();
 800dbec:	f002 f9c4 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800dc06:	f00d ff9d 	bl	801bb44 <vPortExitCritical>
	}
 800dc0a:	bf00      	nop
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800dc12:	b590      	push	{r4, r7, lr}
 800dc14:	b085      	sub	sp, #20
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800dc1e:	68b8      	ldr	r0, [r7, #8]
 800dc20:	f7ff ff0d 	bl	800da3e <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800dc24:	4604      	mov	r4, r0
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f7f4 fc16 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	2004      	movs	r0, #4
 800dc32:	f7f4 fc05 	bl	8002440 <_ZnwjPv>
 800dc36:	4602      	mov	r2, r0
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	bf00      	nop
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd90      	pop	{r4, r7, pc}

0800dc44 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f8ce 	bl	800ddee <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>
 800dc52:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 f8d6 	bl	800de06 <_ZSt11__addressofIKZN14MergedMdbStateC4EvEUlR9RxMessageE_EPT_RS5_>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	bf00      	nop
	}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <_ZSt10__invoke_rIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800dc66:	b5b0      	push	{r4, r5, r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f8d3 	bl	800de1c <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800dc76:	4604      	mov	r4, r0
 800dc78:	6838      	ldr	r0, [r7, #0]
 800dc7a:	f7f3 fdde 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	461a      	mov	r2, r3
 800dc82:	4621      	mov	r1, r4
 800dc84:	4628      	mov	r0, r5
 800dc86:	f000 f8d4 	bl	800de32 <_ZSt13__invoke_implIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bdb0      	pop	{r4, r5, r7, pc}

0800dc92 <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7f4 fbdc 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800dca0:	4603      	mov	r3, r0
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dcaa:	b5b0      	push	{r4, r5, r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d016      	beq.n	800dcec <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	dc19      	bgt.n	800dcf6 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d002      	beq.n	800dccc <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d00a      	beq.n	800dce0 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800dcca:	e014      	b.n	800dcf6 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f7ff ffe0 	bl	800dc92 <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	68b8      	ldr	r0, [r7, #8]
 800dcd6:	f7ff ffb5 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	6023      	str	r3, [r4, #0]
	      break;
 800dcde:	e00a      	b.n	800dcf6 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800dce0:	462a      	mov	r2, r5
 800dce2:	68b9      	ldr	r1, [r7, #8]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 f8ba 	bl	800de5e <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800dcea:	e004      	b.n	800dcf6 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800dcec:	4621      	mov	r1, r4
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 f8ce 	bl	800de90 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800dcf4:	bf00      	nop
	  return false;
 800dcf6:	2300      	movs	r3, #0
	}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bdb0      	pop	{r4, r5, r7, pc}

0800dd00 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800dd00:	b590      	push	{r4, r7, lr}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800dd0c:	68b8      	ldr	r0, [r7, #8]
 800dd0e:	f7ff fef2 	bl	800daf6 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800dd12:	4604      	mov	r4, r0
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7f4 fb9f 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	2004      	movs	r0, #4
 800dd20:	f7f4 fb8e 	bl	8002440 <_ZnwjPv>
 800dd24:	4602      	mov	r2, r0
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	6013      	str	r3, [r2, #0]
 800dd2a:	bf00      	nop
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd90      	pop	{r4, r7, pc}

0800dd32 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f8b4 	bl	800dea8 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800dd40:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f000 f8bc 	bl	800dec0 <_ZSt11__addressofIKZN13PDUControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	bf00      	nop
	}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <_ZSt10__invoke_rIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800dd54:	b5b0      	push	{r4, r5, r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f8b9 	bl	800ded6 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800dd64:	4604      	mov	r4, r0
 800dd66:	6838      	ldr	r0, [r7, #0]
 800dd68:	f7f3 fd67 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	461a      	mov	r2, r3
 800dd70:	4621      	mov	r1, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	f000 f8ba 	bl	800deec <_ZSt13__invoke_implIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bdb0      	pop	{r4, r5, r7, pc}

0800dd80 <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7f4 fb65 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	4618      	mov	r0, r3
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dd98:	b5b0      	push	{r4, r5, r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	4613      	mov	r3, r2
 800dda4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800dda6:	79fb      	ldrb	r3, [r7, #7]
 800dda8:	2b03      	cmp	r3, #3
 800ddaa:	d016      	beq.n	800ddda <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	dc19      	bgt.n	800dde4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d002      	beq.n	800ddba <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d00a      	beq.n	800ddce <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800ddb8:	e014      	b.n	800dde4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff ffe0 	bl	800dd80 <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	68b8      	ldr	r0, [r7, #8]
 800ddc4:	f7ff ffb5 	bl	800dd32 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	6023      	str	r3, [r4, #0]
	      break;
 800ddcc:	e00a      	b.n	800dde4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800ddce:	462a      	mov	r2, r5
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f000 f8a0 	bl	800df18 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800ddd8:	e004      	b.n	800dde4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800ddda:	4621      	mov	r1, r4
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f000 f8b4 	bl	800df4a <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800dde2:	bf00      	nop
	  return false;
 800dde4:	2300      	movs	r3, #0
	}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bdb0      	pop	{r4, r5, r7, pc}

0800ddee <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7f4 fb39 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	4618      	mov	r0, r3
 800de00:	3708      	adds	r7, #8
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <_ZSt11__addressofIKZN14MergedMdbStateC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4618      	mov	r0, r3
 800de12:	370c      	adds	r7, #12
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4618      	mov	r0, r3
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <_ZSt13__invoke_implIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800de32:	b590      	push	{r4, r7, lr}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	7338      	strb	r0, [r7, #12]
 800de3a:	60b9      	str	r1, [r7, #8]
 800de3c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800de3e:	68b8      	ldr	r0, [r7, #8]
 800de40:	f7ff ffec 	bl	800de1c <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800de44:	4604      	mov	r4, r0
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7f3 fcf7 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800de4c:	4603      	mov	r3, r0
 800de4e:	4619      	mov	r1, r3
 800de50:	4620      	mov	r0, r4
 800de52:	f7ff fa25 	bl	800d2a0 <_ZZN14MergedMdbStateC4EvENKUlR9RxMessageE_clES1_>
 800de56:	bf00      	nop
 800de58:	3714      	adds	r7, #20
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd90      	pop	{r4, r7, pc}

0800de5e <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800de5e:	b590      	push	{r4, r7, lr}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800de6a:	68b8      	ldr	r0, [r7, #8]
 800de6c:	f7ff ffbf 	bl	800ddee <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>
 800de70:	4604      	mov	r4, r0
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f7f4 faf0 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800de78:	4603      	mov	r3, r0
 800de7a:	4619      	mov	r1, r3
 800de7c:	2004      	movs	r0, #4
 800de7e:	f7f4 fadf 	bl	8002440 <_ZnwjPv>
 800de82:	4602      	mov	r2, r0
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	6013      	str	r3, [r2, #0]
	}
 800de88:	bf00      	nop
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd90      	pop	{r4, r7, pc}

0800de90 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f861 	bl	800df62 <_ZNSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
	}
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7f4 fadc 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800deb6:	4603      	mov	r3, r0
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <_ZSt11__addressofIKZN13PDUControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4618      	mov	r0, r3
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr

0800ded6 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <_ZSt13__invoke_implIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800deec:	b590      	push	{r4, r7, lr}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	7338      	strb	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7ff ffec 	bl	800ded6 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800defe:	4604      	mov	r4, r0
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7f3 fc9a 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800df06:	4603      	mov	r3, r0
 800df08:	4619      	mov	r1, r3
 800df0a:	4620      	mov	r0, r4
 800df0c:	f7ff fafe 	bl	800d50c <_ZZN13PDUControllerC4EvENKUlR9RxMessageE_clES1_>
 800df10:	bf00      	nop
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	bd90      	pop	{r4, r7, pc}

0800df18 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800df18:	b590      	push	{r4, r7, lr}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800df24:	68b8      	ldr	r0, [r7, #8]
 800df26:	f7ff ffbf 	bl	800dea8 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800df2a:	4604      	mov	r4, r0
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7f4 fa93 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800df32:	4603      	mov	r3, r0
 800df34:	4619      	mov	r1, r3
 800df36:	2004      	movs	r0, #4
 800df38:	f7f4 fa82 	bl	8002440 <_ZnwjPv>
 800df3c:	4602      	mov	r2, r0
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	6013      	str	r3, [r2, #0]
	}
 800df42:	bf00      	nop
 800df44:	3714      	adds	r7, #20
 800df46:	46bd      	mov	sp, r7
 800df48:	bd90      	pop	{r4, r7, pc}

0800df4a <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b082      	sub	sp, #8
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 f810 	bl	800df7a <_ZNSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800df5a:	bf00      	nop
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <_ZNSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800df62:	b580      	push	{r7, lr}
 800df64:	b082      	sub	sp, #8
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7f4 fa74 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800df70:	4603      	mov	r3, r0
 800df72:	4618      	mov	r0, r3
 800df74:	3708      	adds	r7, #8
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <_ZNSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b082      	sub	sp, #8
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f4 fa68 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800df88:	4603      	mov	r3, r0
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <_ZN22EstimatedStateRegistry11getInstanceEv>:

#pragma once

class EstimatedStateRegistry{
public:
	static EstimatedStateRegistry& getInstance() {
 800df94:	b580      	push	{r7, lr}
 800df96:	af00      	add	r7, sp, #0
		static EstimatedStateRegistry instance;
 800df98:	4b10      	ldr	r3, [pc, #64]	; (800dfdc <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f3bf 8f5b 	dmb	ish
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	bf0c      	ite	eq
 800dfaa:	2301      	moveq	r3, #1
 800dfac:	2300      	movne	r3, #0
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d010      	beq.n	800dfd6 <_ZN22EstimatedStateRegistry11getInstanceEv+0x42>
 800dfb4:	4809      	ldr	r0, [pc, #36]	; (800dfdc <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800dfb6:	f00e f8b5 	bl	801c124 <__cxa_guard_acquire>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	bf14      	ite	ne
 800dfc0:	2301      	movne	r3, #1
 800dfc2:	2300      	moveq	r3, #0
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <_ZN22EstimatedStateRegistry11getInstanceEv+0x42>
 800dfca:	4805      	ldr	r0, [pc, #20]	; (800dfe0 <_ZN22EstimatedStateRegistry11getInstanceEv+0x4c>)
 800dfcc:	f000 f819 	bl	800e002 <_ZN22EstimatedStateRegistryC1Ev>
 800dfd0:	4802      	ldr	r0, [pc, #8]	; (800dfdc <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800dfd2:	f00e f8b3 	bl	801c13c <__cxa_guard_release>
		return instance;
 800dfd6:	4b02      	ldr	r3, [pc, #8]	; (800dfe0 <_ZN22EstimatedStateRegistry11getInstanceEv+0x4c>)
	}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20000e30 	.word	0x20000e30
 800dfe0:	20000e2c 	.word	0x20000e2c

0800dfe4 <_ZN22EstimatedStateRegistry11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
		return m_position;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	ee07 3a90 	vmov	s15, r3
	}
 800dff4:	eeb0 0a67 	vmov.f32	s0, s15
 800dff8:	370c      	adds	r7, #12
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <_ZN22EstimatedStateRegistryC1Ev>:
	void setPosition(float position){
		m_position = position;
	}

private:
	explicit EstimatedStateRegistry(){
 800e002:	b480      	push	{r7}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]

	}
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	370c      	adds	r7, #12
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <_ZN17PodLaunchingState5setupEv>:
#include "EstimatedStateRegistry.hpp"
#include "GlobalState.hpp"
#include "PodStopLevitationState.hpp"


void PodLaunchingState::setup() {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
	printf("enter launching state\n");
 800e020:	4803      	ldr	r0, [pc, #12]	; (800e030 <_ZN17PodLaunchingState5setupEv+0x18>)
 800e022:	f009 fc8f 	bl	8017944 <printf_>
}
 800e026:	bf00      	nop
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	0801f630 	.word	0x0801f630

0800e034 <_ZN17PodLaunchingState6updateEv>:

void PodLaunchingState::update() {
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
	if(EstimatedStateRegistry::getInstance().getPosition() > 2){
 800e03c:	f7ff ffaa 	bl	800df94 <_ZN22EstimatedStateRegistry11getInstanceEv>
 800e040:	4603      	mov	r3, r0
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff ffce 	bl	800dfe4 <_ZN22EstimatedStateRegistry11getPositionEv>
 800e048:	eef0 7a40 	vmov.f32	s15, s0
 800e04c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e050:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	bfcc      	ite	gt
 800e05a:	2301      	movgt	r3, #1
 800e05c:	2300      	movle	r3, #0
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	2b00      	cmp	r3, #0
 800e062:	d005      	beq.n	800e070 <_ZN17PodLaunchingState6updateEv+0x3c>
		GlobalState::getInstance().setState<PodStopLevitationState>();
 800e064:	f7fc fa96 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800e068:	4603      	mov	r3, r0
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f816 	bl	800e09c <_ZN11GlobalState8setStateI22PodStopLevitationStateEEvv>
	}
	osDelay(pdMS_TO_TICKS(5));
 800e070:	2005      	movs	r0, #5
 800e072:	f009 fde1 	bl	8017c38 <osDelay>
}
 800e076:	bf00      	nop
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
	...

0800e080 <_ZN17PodLaunchingState7disposeEv>:

void PodLaunchingState::dispose() {
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	printf("exit launching state\n");
 800e088:	4803      	ldr	r0, [pc, #12]	; (800e098 <_ZN17PodLaunchingState7disposeEv+0x18>)
 800e08a:	f009 fc5b 	bl	8017944 <printf_>

}
 800e08e:	bf00      	nop
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	0801f648 	.word	0x0801f648

0800e09c <_ZN11GlobalState8setStateI22PodStopLevitationStateEEvv>:
	void setState(){
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	333c      	adds	r3, #60	; 0x3c
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f812 	bl	800e0d2 <_ZN13StateMaschine8getStateI22PodStopLevitationStateEERK5Statev>
 800e0ae:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7fc f8b1 	bl	800a218 <_ZNK5State11getPodStateEv>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7fc faa8 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	333c      	adds	r3, #60	; 0x3c
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 f814 	bl	800e0f2 <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv>
	}
 800e0ca:	bf00      	nop
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <_ZN13StateMaschine8getStateI22PodStopLevitationStateEERK5Statev>:
	const State& getState(){
 800e0d2:	b590      	push	{r4, r7, lr}
 800e0d4:	b083      	sub	sp, #12
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681c      	ldr	r4, [r3, #0]
 800e0de:	f7fc fdfd 	bl	800acdc <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4423      	add	r3, r4
 800e0e8:	681b      	ldr	r3, [r3, #0]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd90      	pop	{r4, r7, pc}

0800e0f2 <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv>:
	void setState() {
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800e0fa:	f00d fcf3 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2200      	movs	r2, #0
 800e10e:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68da      	ldr	r2, [r3, #12]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800e118:	f7fc fde0 	bl	800acdc <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 800e11c:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	7d1b      	ldrb	r3, [r3, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d101      	bne.n	800e12a <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv+0x38>
			Error_Handler();
 800e126:	f001 ff27 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2201      	movs	r2, #1
 800e138:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800e140:	f00d fd00 	bl	801bb44 <vPortExitCritical>
	}
 800e144:	bf00      	nop
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <_ZN21PodReadyToLaunchState5setupEv>:
#include "GlobalState.hpp"
#include "estdio.hpp"
#include "GroundStationReceiver.hpp"


void PodReadyToLaunchState::setup() {
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	printf("enter pod ready to launch\n");
 800e154:	4803      	ldr	r0, [pc, #12]	; (800e164 <_ZN21PodReadyToLaunchState5setupEv+0x18>)
 800e156:	f009 fbf5 	bl	8017944 <printf_>
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	0801f694 	.word	0x0801f694

0800e168 <_ZN21PodReadyToLaunchState6updateEv>:

void PodReadyToLaunchState::update() {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
	if(GroundStationReceiver::getInstance().getLastCommand() == COMMAND_LAUNCH){
 800e170:	f7fe fc40 	bl	800c9f4 <_ZN21GroundStationReceiver11getInstanceEv>
 800e174:	4603      	mov	r3, r0
 800e176:	4618      	mov	r0, r3
 800e178:	f7fe fc78 	bl	800ca6c <_ZN21GroundStationReceiver14getLastCommandEv>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b02      	cmp	r3, #2
 800e180:	bf0c      	ite	eq
 800e182:	2301      	moveq	r3, #1
 800e184:	2300      	movne	r3, #0
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <_ZN21PodReadyToLaunchState6updateEv+0x30>
		GlobalState::getInstance().setState<PodStartLevitation>();
 800e18c:	f7fc fa02 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800e190:	4603      	mov	r3, r0
 800e192:	4618      	mov	r0, r3
 800e194:	f000 f812 	bl	800e1bc <_ZN11GlobalState8setStateI18PodStartLevitationEEvv>
	}
}
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <_ZN21PodReadyToLaunchState7disposeEv>:

void PodReadyToLaunchState::dispose() {
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	printf("exit pod ready to launch\n");
 800e1a8:	4803      	ldr	r0, [pc, #12]	; (800e1b8 <_ZN21PodReadyToLaunchState7disposeEv+0x18>)
 800e1aa:	f009 fbcb 	bl	8017944 <printf_>
}
 800e1ae:	bf00      	nop
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	0801f6b0 	.word	0x0801f6b0

0800e1bc <_ZN11GlobalState8setStateI18PodStartLevitationEEvv>:
	void setState(){
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b084      	sub	sp, #16
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	333c      	adds	r3, #60	; 0x3c
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 f812 	bl	800e1f2 <_ZN13StateMaschine8getStateI18PodStartLevitationEERK5Statev>
 800e1ce:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7fc f821 	bl	800a218 <_ZNK5State11getPodStateEv>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f7fc fa18 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	333c      	adds	r3, #60	; 0x3c
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f000 f814 	bl	800e212 <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv>
	}
 800e1ea:	bf00      	nop
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <_ZN13StateMaschine8getStateI18PodStartLevitationEERK5Statev>:
	const State& getState(){
 800e1f2:	b590      	push	{r4, r7, lr}
 800e1f4:	b083      	sub	sp, #12
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681c      	ldr	r4, [r3, #0]
 800e1fe:	f7fc fd15 	bl	800ac2c <_ZN5State5getIdI18PodStartLevitationEEjv>
 800e202:	4603      	mov	r3, r0
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4423      	add	r3, r4
 800e208:	681b      	ldr	r3, [r3, #0]
	}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd90      	pop	{r4, r7, pc}

0800e212 <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv>:
	void setState() {
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800e21a:	f00d fc63 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2200      	movs	r2, #0
 800e22e:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	68da      	ldr	r2, [r3, #12]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800e238:	f7fc fcf8 	bl	800ac2c <_ZN5State5getIdI18PodStartLevitationEEjv>
 800e23c:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7d1b      	ldrb	r3, [r3, #20]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv+0x38>
			Error_Handler();
 800e246:	f001 fe97 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2201      	movs	r2, #1
 800e258:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800e260:	f00d fc70 	bl	801bb44 <vPortExitCritical>
	}
 800e264:	bf00      	nop
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <_ZN17PodSafeToApproach5setupEv>:
 *      Author: OfficeLaptop
 */

#include <PodSafeToApproach.hpp>

void PodSafeToApproach::setup() {
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]

}
 800e274:	bf00      	nop
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <_ZN17PodSafeToApproach6updateEv>:

void PodSafeToApproach::update() {
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]

}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <_ZN17PodSafeToApproach7disposeEv>:

void PodSafeToApproach::dispose() {
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]

}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_ZN18PodStartLevitation5setupEv>:
#include "MergedMdbState.hpp"
#include "GlobalState.hpp"
#include "PodLevitationState.hpp"


void PodStartLevitation::setup(){
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
	printf("enter start levitation\n");
 800e2b0:	4803      	ldr	r0, [pc, #12]	; (800e2c0 <_ZN18PodStartLevitation5setupEv+0x18>)
 800e2b2:	f009 fb47 	bl	8017944 <printf_>
}
 800e2b6:	bf00      	nop
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	0801f700 	.word	0x0801f700

0800e2c4 <_ZN18PodStartLevitation6updateEv>:

void PodStartLevitation::update(){
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
	if(MergedMdbState::getInstance().getState() == MDB_STATE_LEVITATION){
 800e2cc:	f7fe ffae 	bl	800d22c <_ZN14MergedMdbState11getInstanceEv>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7fe ffd8 	bl	800d288 <_ZNK14MergedMdbState8getStateEv>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	bf0c      	ite	eq
 800e2de:	2301      	moveq	r3, #1
 800e2e0:	2300      	movne	r3, #0
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <_ZN18PodStartLevitation6updateEv+0x30>
		GlobalState::getInstance().setState<PodLevitationState>();
 800e2e8:	f7fc f954 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f000 f812 	bl	800e318 <_ZN11GlobalState8setStateI18PodLevitationStateEEvv>
	}
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <_ZN18PodStartLevitation7disposeEv>:

void PodStartLevitation::dispose(){
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
	printf("exit start levitation\n");
 800e304:	4803      	ldr	r0, [pc, #12]	; (800e314 <_ZN18PodStartLevitation7disposeEv+0x18>)
 800e306:	f009 fb1d 	bl	8017944 <printf_>

}
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0801f718 	.word	0x0801f718

0800e318 <_ZN11GlobalState8setStateI18PodLevitationStateEEvv>:
	void setState(){
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	333c      	adds	r3, #60	; 0x3c
 800e324:	4618      	mov	r0, r3
 800e326:	f000 f812 	bl	800e34e <_ZN13StateMaschine8getStateI18PodLevitationStateEERK5Statev>
 800e32a:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f7fb ff73 	bl	800a218 <_ZNK5State11getPodStateEv>
 800e332:	4603      	mov	r3, r0
 800e334:	4619      	mov	r1, r3
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7fc f96a 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	333c      	adds	r3, #60	; 0x3c
 800e340:	4618      	mov	r0, r3
 800e342:	f000 f814 	bl	800e36e <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv>
	}
 800e346:	bf00      	nop
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <_ZN13StateMaschine8getStateI18PodLevitationStateEERK5Statev>:
	const State& getState(){
 800e34e:	b590      	push	{r4, r7, lr}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681c      	ldr	r4, [r3, #0]
 800e35a:	f000 f835 	bl	800e3c8 <_ZN5State5getIdI18PodLevitationStateEEjv>
 800e35e:	4603      	mov	r3, r0
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	4423      	add	r3, r4
 800e364:	681b      	ldr	r3, [r3, #0]
	}
 800e366:	4618      	mov	r0, r3
 800e368:	370c      	adds	r7, #12
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd90      	pop	{r4, r7, pc}

0800e36e <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv>:
	void setState() {
 800e36e:	b580      	push	{r7, lr}
 800e370:	b084      	sub	sp, #16
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800e376:	f00d fbb5 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2200      	movs	r2, #0
 800e38a:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	68da      	ldr	r2, [r3, #12]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800e394:	f000 f818 	bl	800e3c8 <_ZN5State5getIdI18PodLevitationStateEEjv>
 800e398:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7d1b      	ldrb	r3, [r3, #20]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv+0x38>
			Error_Handler();
 800e3a2:	f001 fde9 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800e3bc:	f00d fbc2 	bl	801bb44 <vPortExitCritical>
	}
 800e3c0:	bf00      	nop
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <_ZN5State5getIdI18PodLevitationStateEEjv>:
	static unsigned int getId(){
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800e3cc:	4b12      	ldr	r3, [pc, #72]	; (800e418 <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f3bf 8f5b 	dmb	ish
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	bf0c      	ite	eq
 800e3de:	2301      	moveq	r3, #1
 800e3e0:	2300      	movne	r3, #0
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d012      	beq.n	800e40e <_ZN5State5getIdI18PodLevitationStateEEjv+0x46>
 800e3e8:	480b      	ldr	r0, [pc, #44]	; (800e418 <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800e3ea:	f00d fe9b 	bl	801c124 <__cxa_guard_acquire>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bf14      	ite	ne
 800e3f4:	2301      	movne	r3, #1
 800e3f6:	2300      	moveq	r3, #0
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d007      	beq.n	800e40e <_ZN5State5getIdI18PodLevitationStateEEjv+0x46>
 800e3fe:	f7fb ff17 	bl	800a230 <_ZN5State9getNextIdEv>
 800e402:	4603      	mov	r3, r0
 800e404:	4a05      	ldr	r2, [pc, #20]	; (800e41c <_ZN5State5getIdI18PodLevitationStateEEjv+0x54>)
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	4803      	ldr	r0, [pc, #12]	; (800e418 <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800e40a:	f00d fe97 	bl	801c13c <__cxa_guard_release>
		return id;
 800e40e:	4b03      	ldr	r3, [pc, #12]	; (800e41c <_ZN5State5getIdI18PodLevitationStateEEjv+0x54>)
 800e410:	681b      	ldr	r3, [r3, #0]
	}
 800e412:	4618      	mov	r0, r3
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20000e38 	.word	0x20000e38
 800e41c:	20000e34 	.word	0x20000e34

0800e420 <_ZN15PodStartupState5setupEv>:

#include <PodStartupState.hpp>
#include "GlobalState.hpp"
#include "PodIdleState.hpp"

void PodStartupState::setup() {
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
	printf("enter startup state\n");
 800e428:	4803      	ldr	r0, [pc, #12]	; (800e438 <_ZN15PodStartupState5setupEv+0x18>)
 800e42a:	f009 fa8b 	bl	8017944 <printf_>
}
 800e42e:	bf00      	nop
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	0801f764 	.word	0x0801f764

0800e43c <_ZN15PodStartupState6updateEv>:

void PodStartupState::update() {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
	GlobalState::getInstance().setState<PodIdleState>();
 800e444:	f7fc f8a6 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800e448:	4603      	mov	r3, r0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f000 f812 	bl	800e474 <_ZN11GlobalState8setStateI12PodIdleStateEEvv>
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <_ZN15PodStartupState7disposeEv>:

void PodStartupState::dispose() {
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]

	printf("exit startup state\n");
 800e460:	4803      	ldr	r0, [pc, #12]	; (800e470 <_ZN15PodStartupState7disposeEv+0x18>)
 800e462:	f009 fa6f 	bl	8017944 <printf_>
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	0801f77c 	.word	0x0801f77c

0800e474 <_ZN11GlobalState8setStateI12PodIdleStateEEvv>:
	void setState(){
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	333c      	adds	r3, #60	; 0x3c
 800e480:	4618      	mov	r0, r3
 800e482:	f000 f812 	bl	800e4aa <_ZN13StateMaschine8getStateI12PodIdleStateEERK5Statev>
 800e486:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f7fb fec5 	bl	800a218 <_ZNK5State11getPodStateEv>
 800e48e:	4603      	mov	r3, r0
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fc f8bc 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	333c      	adds	r3, #60	; 0x3c
 800e49c:	4618      	mov	r0, r3
 800e49e:	f000 f814 	bl	800e4ca <_ZN13StateMaschine8setStateI12PodIdleStateEEvv>
	}
 800e4a2:	bf00      	nop
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <_ZN13StateMaschine8getStateI12PodIdleStateEERK5Statev>:
	const State& getState(){
 800e4aa:	b590      	push	{r4, r7, lr}
 800e4ac:	b083      	sub	sp, #12
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681c      	ldr	r4, [r3, #0]
 800e4b6:	f7fc fb35 	bl	800ab24 <_ZN5State5getIdI12PodIdleStateEEjv>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4423      	add	r3, r4
 800e4c0:	681b      	ldr	r3, [r3, #0]
	}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd90      	pop	{r4, r7, pc}

0800e4ca <_ZN13StateMaschine8setStateI12PodIdleStateEEvv>:
	void setState() {
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800e4d2:	f00d fb07 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68da      	ldr	r2, [r3, #12]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800e4f0:	f7fc fb18 	bl	800ab24 <_ZN5State5getIdI12PodIdleStateEEjv>
 800e4f4:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d101      	bne.n	800e502 <_ZN13StateMaschine8setStateI12PodIdleStateEEvv+0x38>
			Error_Handler();
 800e4fe:	f001 fd3b 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681a      	ldr	r2, [r3, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	4413      	add	r3, r2
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2201      	movs	r2, #1
 800e510:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800e518:	f00d fb14 	bl	801bb44 <vPortExitCritical>
	}
 800e51c:	bf00      	nop
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <_ZN22PodStopLevitationState5setupEv>:
#include "SDC.hpp"
#include "MergedMdbState.hpp"
#include "GlobalState.hpp"
#include "PodBreakState.hpp"

void PodStopLevitationState::setup() {
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	printf("enter stop levitation\n");
 800e52c:	4806      	ldr	r0, [pc, #24]	; (800e548 <_ZN22PodStopLevitationState5setupEv+0x24>)
 800e52e:	f009 fa09 	bl	8017944 <printf_>
	SDC::getInstance().open();
 800e532:	f7fe fe47 	bl	800d1c4 <_ZN3SDC11getInstanceEv>
 800e536:	4603      	mov	r3, r0
 800e538:	4618      	mov	r0, r3
 800e53a:	f000 f8d7 	bl	800e6ec <_ZN3SDC4openEv>
}
 800e53e:	bf00      	nop
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	0801f7c4 	.word	0x0801f7c4

0800e54c <_ZN22PodStopLevitationState6updateEv>:

void PodStopLevitationState::update() {
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
	if(MergedMdbState::getInstance().getState() == MDB_STATE_GROUNDED){
 800e554:	f7fe fe6a 	bl	800d22c <_ZN14MergedMdbState11getInstanceEv>
 800e558:	4603      	mov	r3, r0
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fe94 	bl	800d288 <_ZNK14MergedMdbState8getStateEv>
 800e560:	4603      	mov	r3, r0
 800e562:	2b03      	cmp	r3, #3
 800e564:	bf0c      	ite	eq
 800e566:	2301      	moveq	r3, #1
 800e568:	2300      	movne	r3, #0
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d005      	beq.n	800e57c <_ZN22PodStopLevitationState6updateEv+0x30>
		GlobalState::getInstance().setState<PodBreakState>();
 800e570:	f7fc f810 	bl	800a594 <_ZN11GlobalState11getInstanceEv>
 800e574:	4603      	mov	r3, r0
 800e576:	4618      	mov	r0, r3
 800e578:	f000 f812 	bl	800e5a0 <_ZN11GlobalState8setStateI13PodBreakStateEEvv>
	}
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <_ZN22PodStopLevitationState7disposeEv>:

void PodStopLevitationState::dispose() {
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
	printf("exit stop levitation\n");
 800e58c:	4803      	ldr	r0, [pc, #12]	; (800e59c <_ZN22PodStopLevitationState7disposeEv+0x18>)
 800e58e:	f009 f9d9 	bl	8017944 <printf_>
}
 800e592:	bf00      	nop
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	0801f7dc 	.word	0x0801f7dc

0800e5a0 <_ZN11GlobalState8setStateI13PodBreakStateEEvv>:
	void setState(){
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	333c      	adds	r3, #60	; 0x3c
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 f812 	bl	800e5d6 <_ZN13StateMaschine8getStateI13PodBreakStateEERK5Statev>
 800e5b2:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7fb fe2f 	bl	800a218 <_ZNK5State11getPodStateEv>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7fc f826 	bl	800a610 <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	333c      	adds	r3, #60	; 0x3c
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 f814 	bl	800e5f6 <_ZN13StateMaschine8setStateI13PodBreakStateEEvv>
	}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <_ZN13StateMaschine8getStateI13PodBreakStateEERK5Statev>:
	const State& getState(){
 800e5d6:	b590      	push	{r4, r7, lr}
 800e5d8:	b083      	sub	sp, #12
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681c      	ldr	r4, [r3, #0]
 800e5e2:	f7fc fba7 	bl	800ad34 <_ZN5State5getIdI13PodBreakStateEEjv>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	009b      	lsls	r3, r3, #2
 800e5ea:	4423      	add	r3, r4
 800e5ec:	681b      	ldr	r3, [r3, #0]
	}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd90      	pop	{r4, r7, pc}

0800e5f6 <_ZN13StateMaschine8setStateI13PodBreakStateEEvv>:
	void setState() {
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800e5fe:	f00d fa71 	bl	801bae4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2200      	movs	r2, #0
 800e612:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	68da      	ldr	r2, [r3, #12]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800e61c:	f7fc fb8a 	bl	800ad34 <_ZN5State5getIdI13PodBreakStateEEjv>
 800e620:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d101      	bne.n	800e62e <_ZN13StateMaschine8setStateI13PodBreakStateEEvv+0x38>
			Error_Handler();
 800e62a:	f001 fca5 	bl	800ff78 <Error_Handler>
		m_states[id]->m_active = true;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2201      	movs	r2, #1
 800e63c:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800e644:	f00d fa7e 	bl	801bb44 <vPortExitCritical>
	}
 800e648:	bf00      	nop
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4613      	mov	r3, r2
 800e65c:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	88fa      	ldrh	r2, [r7, #6]
 800e668:	809a      	strh	r2, [r3, #4]
	}
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <_ZN19GPIOWriteController3setEv>:
	void set() {
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_SET);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6818      	ldr	r0, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	889b      	ldrh	r3, [r3, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	4619      	mov	r1, r3
 800e68c:	f004 fc8e 	bl	8012fac <HAL_GPIO_WritePin>
	}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <_ZN19GPIOWriteController5resetEv>:
		if (value)
			set();
		else
			reset();
	}
	void reset() {
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6818      	ldr	r0, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	889b      	ldrh	r3, [r3, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	f004 fc7e 	bl	8012fac <HAL_GPIO_WritePin>
	}
 800e6b0:	bf00      	nop
 800e6b2:	3708      	adds	r7, #8
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>:
 *  Created on: Apr 26, 2023
 *      Author: OfficeLaptop
 */
#include "SDC.hpp"

SDC::SDC(const SDCConfig& config, SDCStatus initalStatus) : m_gpio(config.m_gpio.m_port, config.m_gpio.m_pin), m_status(initalStatus) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	71fb      	strb	r3, [r7, #7]
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	6819      	ldr	r1, [r3, #0]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	889b      	ldrh	r3, [r3, #4]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	f7ff ffbd 	bl	800e650 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	79fa      	ldrb	r2, [r7, #7]
 800e6da:	721a      	strb	r2, [r3, #8]
	open();
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 f805 	bl	800e6ec <_ZN3SDC4openEv>
}
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <_ZN3SDC4openEv>:

void SDC::open(){
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
	m_gpio.reset();
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7ff ffce 	bl	800e698 <_ZN19GPIOWriteController5resetEv>
	m_status = SDC_OPEN;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	721a      	strb	r2, [r3, #8]
}
 800e702:	bf00      	nop
 800e704:	3708      	adds	r7, #8
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <_ZN3SDC5closeEv>:

void SDC::close(){
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
	m_gpio.set();
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff ffaf 	bl	800e678 <_ZN19GPIOWriteController3setEv>
	m_status = SDC_CLOSED;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	721a      	strb	r2, [r3, #8]
}
 800e720:	bf00      	nop
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e738:	f04f 0200 	mov.w	r2, #0
 800e73c:	f04f 0300 	mov.w	r3, #0
 800e740:	0c02      	lsrs	r2, r0, #16
 800e742:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e746:	0c0b      	lsrs	r3, r1, #16
 800e748:	4613      	mov	r3, r2
 800e74a:	81fb      	strh	r3, [r7, #14]
                return value * (0.036f);
 800e74c:	89fb      	ldrh	r3, [r7, #14]
 800e74e:	ee07 3a90 	vmov	s15, r3
 800e752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e756:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800e76c <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_+0x44>
 800e75a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800e75e:	eeb0 0a67 	vmov.f32	s0, s15
 800e762:	3714      	adds	r7, #20
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr
 800e76c:	3d1374bc 	.word	0x3d1374bc

0800e770 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>:
            constexpr static inline double get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
                uint32_t value = static_cast<uint32_t>((intel & 0xFFFFFFFF00000000ull) >> 32);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e780:	f04f 0200 	mov.w	r2, #0
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	000a      	movs	r2, r1
 800e78a:	2300      	movs	r3, #0
 800e78c:	4613      	mov	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
                return value * (0.001);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7f1 feb7 	bl	8000504 <__aeabi_ui2d>
 800e796:	a308      	add	r3, pc, #32	; (adr r3, 800e7b8 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_+0x48>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f1 ff2c 	bl	80005f8 <__aeabi_dmul>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	ec43 2b17 	vmov	d7, r2, r3
            }
 800e7a8:	eeb0 0a47 	vmov.f32	s0, s14
 800e7ac:	eef0 0a67 	vmov.f32	s1, s15
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	d2f1a9fc 	.word	0xd2f1a9fc
 800e7bc:	3f50624d 	.word	0x3f50624d

0800e7c0 <_ZN14PressureSensorC1E9AdcModulet>:
#include "AdcChannelController.hpp"

class PressureSensor {
public:

	explicit PressureSensor(AdcModule module, uint16_t rank) : m_adcChannel(module, rank){
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	80fb      	strh	r3, [r7, #6]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	88fa      	ldrh	r2, [r7, #6]
 800e7d2:	68b9      	ldr	r1, [r7, #8]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd fba2 	bl	800bf1e <_ZN20AdcChannelControllerC1E9AdcModulej>

	}
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <_ZN14PressureSensor3getEv>:

	float get(){
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_adcChannel.get();
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fd fbaf 	bl	800bf52 <_ZN20AdcChannelController3getEv>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	817b      	strh	r3, [r7, #10]
		float pressure = c1 * avalue + c2;
 800e7f8:	897b      	ldrh	r3, [r7, #10]
 800e7fa:	ee07 3a90 	vmov	s15, r3
 800e7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e802:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800e854 <_ZN14PressureSensor3getEv+0x70>
 800e806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e80a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800e80e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e812:	edc7 7a03 	vstr	s15, [r7, #12]
		if(pressure < messageLowerLimit){
 800e816:	edd7 7a03 	vldr	s15, [r7, #12]
 800e81a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800e858 <_ZN14PressureSensor3getEv+0x74>
 800e81e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e826:	d501      	bpl.n	800e82c <_ZN14PressureSensor3getEv+0x48>
			pressure = messageLowerLimit;
 800e828:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <_ZN14PressureSensor3getEv+0x78>)
 800e82a:	60fb      	str	r3, [r7, #12]
		}
		if(pressure > messageUpperLimit){
 800e82c:	edd7 7a03 	vldr	s15, [r7, #12]
 800e830:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e860 <_ZN14PressureSensor3getEv+0x7c>
 800e834:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83c:	dd01      	ble.n	800e842 <_ZN14PressureSensor3getEv+0x5e>
			pressure = messageUpperLimit;
 800e83e:	4b09      	ldr	r3, [pc, #36]	; (800e864 <_ZN14PressureSensor3getEv+0x80>)
 800e840:	60fb      	str	r3, [r7, #12]
		}
		return pressure;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	ee07 3a90 	vmov	s15, r3
	}
 800e848:	eeb0 0a67 	vmov.f32	s0, s15
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	3bb00b01 	.word	0x3bb00b01
 800e858:	bff33333 	.word	0xbff33333
 800e85c:	bff33333 	.word	0xbff33333
 800e860:	418f3333 	.word	0x418f3333
 800e864:	418f3333 	.word	0x418f3333

0800e868 <_ZN9ImuMaster9getAccelXEv>:

	/**
	 * Get acceleration in X direction of the pod in m/s^2.
	 * @return Acceleration in X direction of the pod in m/s^2.
	 */
	inline float getAccelX() { return m_accelZ; }
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e876:	ee07 3a90 	vmov	s15, r3
 800e87a:	eeb0 0a67 	vmov.f32	s0, s15
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN9ImuMaster9getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the pod in m/s^2.
	 * @return Acceleration in Y direction of the pod in m/s^2.
	 */
	inline float getAccelY() { return -m_accelY; }
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800e896:	eef1 7a67 	vneg.f32	s15, s15
 800e89a:	eeb0 0a67 	vmov.f32	s0, s15
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <_ZN9ImuMaster9getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the pod in m/s^2.
	 * @return Acceleration in Z direction of the pod in m/s^2.
	 */
	inline float getAccelZ() { return -m_accelX; }
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800e8b6:	eef1 7a67 	vneg.f32	s15, s15
 800e8ba:	eeb0 0a67 	vmov.f32	s0, s15
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <_ZN9ImuMaster8getGyroXEv>:

	/**
	 * Get rotation around X axis of the pod in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX; }
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800e8d6:	ee07 3a90 	vmov	s15, r3
 800e8da:	eeb0 0a67 	vmov.f32	s0, s15
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <_ZN9ImuMaster8getGyroYEv>:

	/**
	 * Get rotation around Y axis of the pod in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroZ; }
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e8f6:	ee07 3a90 	vmov	s15, r3
 800e8fa:	eeb0 0a67 	vmov.f32	s0, s15
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <_ZN9ImuMaster8getGyroZEv>:

	/**
	 * Get rotation around Z axis of the pod in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return -m_gyroY; }
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800e916:	eef1 7a67 	vneg.f32	s15, s15
 800e91a:	eeb0 0a67 	vmov.f32	s0, s15
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <_ZN14FiducialSensor8getCountEv>:

	[[nodiscard]] float estimatedPosition(){
		return (m_count * m_distanceBetweenInterrupts) / 1000.0;
	}

	[[nodiscard]] inline unsigned int getCount() {
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
		return m_count;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	69db      	ldr	r3, [r3, #28]
	}
 800e934:	4618      	mov	r0, r3
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>:
#include "canzero.hpp"

class KistlerController {
public:
	explicit KistlerController(){
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800e94e:	6839      	ldr	r1, [r7, #0]
 800e950:	4618      	mov	r0, r3
 800e952:	f000 f876 	bl	800ea42 <_ZN17KistlerController8callbackER9RxMessage>
		});
 800e956:	bf00      	nop
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
	...

0800e960 <_ZN17KistlerControllerC1Ev>:
	explicit KistlerController(){
 800e960:	b580      	push	{r7, lr}
 800e962:	b086      	sub	sp, #24
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	4a0f      	ldr	r2, [pc, #60]	; (800e9a8 <_ZN17KistlerControllerC1Ev+0x48>)
 800e96c:	605a      	str	r2, [r3, #4]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a0d      	ldr	r2, [pc, #52]	; (800e9a8 <_ZN17KistlerControllerC1Ev+0x48>)
 800e972:	609a      	str	r2, [r3, #8]
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	f107 0308 	add.w	r3, r7, #8
 800e97a:	4611      	mov	r1, r2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f93f 	bl	800ec00 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>
 800e982:	f107 0308 	add.w	r3, r7, #8
 800e986:	4618      	mov	r0, r3
 800e988:	f000 f964 	bl	800ec54 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>
 800e98c:	4602      	mov	r2, r0
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	601a      	str	r2, [r3, #0]
 800e992:	f107 0308 	add.w	r3, r7, #8
 800e996:	4618      	mov	r0, r3
 800e998:	f7f2 fd7c 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	c2c80000 	.word	0xc2c80000

0800e9ac <_ZN17KistlerController11getVelocityEv>:
	KistlerController(KistlerController&) = delete;
	KistlerController(KistlerController&&) = delete;
	KistlerController& operator=(KistlerController&) = delete;
	KistlerController& operator=(KistlerController&&) = delete;

	[[nodiscard]] inline float getVelocity(){
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
		return m_velocity;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	ee07 3a90 	vmov	s15, r3
	}
 800e9bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c0:	370c      	adds	r7, #12
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <_ZN17KistlerController11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
		return m_position;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	ee07 3a90 	vmov	s15, r3
	}
 800e9da:	eeb0 0a67 	vmov.f32	s0, s15
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af02      	add	r7, sp, #8
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	2208      	movs	r2, #8
 800e9fe:	4907      	ldr	r1, [pc, #28]	; (800ea1c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800ea00:	f7f4 f96f 	bl	8002ce2 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.ExtId != MESSAGE_T::id) {
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	685b      	ldr	r3, [r3, #4]
            if(MESSAGE_T::isExtendedId) {
 800ea08:	4a04      	ldr	r2, [pc, #16]	; (800ea1c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d000      	beq.n	800ea10 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
                    while(1);
 800ea0e:	e7fe      	b.n	800ea0e <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x26>
        };
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4618      	mov	r0, r3
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	1ffffffa 	.word	0x1ffffffa

0800ea20 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	331c      	adds	r3, #28
 800ea30:	461a      	mov	r2, r3
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff ffd8 	bl	800e9e8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <_ZN17KistlerController8callbackER9RxMessage>:

private:

	void callback(RxMessage& raw){
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b088      	sub	sp, #32
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::OpticalSensor_TX_MainData> msg {raw};
 800ea4c:	f107 0308 	add.w	r3, r7, #8
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7ff ffe4 	bl	800ea20 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>
		m_velocity = msg.get<can::signals::OpticalSensor_TX_Vel>();
 800ea58:	f107 0308 	add.w	r3, r7, #8
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f000 f919 	bl	800ec94 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>
 800ea62:	eef0 7a40 	vmov.f32	s15, s0
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	edc3 7a01 	vstr	s15, [r3, #4]
		m_position = msg.get<can::signals::OpticalSensor_TX_Distance>();
 800ea6c:	f107 0308 	add.w	r3, r7, #8
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 f923 	bl	800ecbc <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>
 800ea76:	ec53 2b10 	vmov	r2, r3, d0
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7f2 f8b3 	bl	8000be8 <__aeabi_d2f>
 800ea82:	4602      	mov	r2, r0
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	609a      	str	r2, [r3, #8]
	}
 800ea88:	bf00      	nop
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b0fe      	sub	sp, #504	; 0x1f8
 800ea94:	af02      	add	r7, sp, #8
 800ea96:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800ea9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ea9e:	6018      	str	r0, [r3, #0]
	//TODO initalize peripherals.
	ImuMaster imuMaster;
 800eaa0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fc feb1 	bl	800b80c <_ZN9ImuMasterC1Ev>

	PressureSensor pressureSensor(ADC_MODULE2, 3);
 800eaaa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eaae:	2203      	movs	r2, #3
 800eab0:	2101      	movs	r1, #1
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7ff fe84 	bl	800e7c0 <_ZN14PressureSensorC1E9AdcModulet>

	FiducialSensor fiducialRight = FiducialSensor(
			g_peripherals.m_fiducialRightConfig);
 800eab8:	4b50      	ldr	r3, [pc, #320]	; (800ebfc <main_entry+0x16c>)
 800eaba:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800eabe:	68da      	ldr	r2, [r3, #12]
 800eac0:	9200      	str	r2, [sp, #0]
 800eac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eac4:	f7fa fcaa 	bl	800941c <_ZN14FiducialSensorC1E14FiducialConfig>
	FiducialSensor fiducialLeft = FiducialSensor(
			g_peripherals.m_fiducialLeftConfig);
 800eac8:	4b4c      	ldr	r3, [pc, #304]	; (800ebfc <main_entry+0x16c>)
 800eaca:	f107 0014 	add.w	r0, r7, #20
 800eace:	69da      	ldr	r2, [r3, #28]
 800ead0:	9200      	str	r2, [sp, #0]
 800ead2:	3310      	adds	r3, #16
 800ead4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ead6:	f7fa fca1 	bl	800941c <_ZN14FiducialSensorC1E14FiducialConfig>
	KistlerController kistlerController;
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff ff3e 	bl	800e960 <_ZN17KistlerControllerC1Ev>

	imuMaster.start();
 800eae4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fc ff33 	bl	800b954 <_ZN9ImuMaster5startEv>

	while (true) {
		//TODO read sensor data.
		imuMaster.syncRead();
 800eaee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fc ffac 	bl	800ba50 <_ZN9ImuMaster8syncReadEv>
		OD_IMU_AccelX_set(imuMaster.getAccelX());
 800eaf8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eafc:	4618      	mov	r0, r3
 800eafe:	f7ff feb3 	bl	800e868 <_ZN9ImuMaster9getAccelXEv>
 800eb02:	eef0 7a40 	vmov.f32	s15, s0
 800eb06:	eeb0 0a67 	vmov.f32	s0, s15
 800eb0a:	f7f8 ff73 	bl	80079f4 <_Z17OD_IMU_AccelX_setf>
		OD_IMU_AccelY_set(imuMaster.getAccelY());
 800eb0e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff feb8 	bl	800e888 <_ZN9ImuMaster9getAccelYEv>
 800eb18:	eef0 7a40 	vmov.f32	s15, s0
 800eb1c:	eeb0 0a67 	vmov.f32	s0, s15
 800eb20:	f7f8 ffa2 	bl	8007a68 <_Z17OD_IMU_AccelY_setf>
		OD_IMU_AccelZ_set(imuMaster.getAccelZ());
 800eb24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff febd 	bl	800e8a8 <_ZN9ImuMaster9getAccelZEv>
 800eb2e:	eef0 7a40 	vmov.f32	s15, s0
 800eb32:	eeb0 0a67 	vmov.f32	s0, s15
 800eb36:	f7f8 ffd1 	bl	8007adc <_Z17OD_IMU_AccelZ_setf>

		OD_IMU_GyroX_set(imuMaster.getGyroX());
 800eb3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7ff fec2 	bl	800e8c8 <_ZN9ImuMaster8getGyroXEv>
 800eb44:	eef0 7a40 	vmov.f32	s15, s0
 800eb48:	eeb0 0a67 	vmov.f32	s0, s15
 800eb4c:	f7f9 f800 	bl	8007b50 <_Z16OD_IMU_GyroX_setf>
		OD_IMU_GyroY_set(imuMaster.getGyroY());
 800eb50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff fec7 	bl	800e8e8 <_ZN9ImuMaster8getGyroYEv>
 800eb5a:	eef0 7a40 	vmov.f32	s15, s0
 800eb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800eb62:	f7f9 f82f 	bl	8007bc4 <_Z16OD_IMU_GyroY_setf>
		OD_IMU_GyroZ_set(imuMaster.getGyroZ());
 800eb66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7ff fecc 	bl	800e908 <_ZN9ImuMaster8getGyroZEv>
 800eb70:	eef0 7a40 	vmov.f32	s15, s0
 800eb74:	eeb0 0a67 	vmov.f32	s0, s15
 800eb78:	f7f9 f85e 	bl	8007c38 <_Z16OD_IMU_GyroZ_setf>

		OD_CoolingPressure_set(pressureSensor.get());
 800eb7c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fe2f 	bl	800e7e4 <_ZN14PressureSensor3getEv>
 800eb86:	eef0 7a40 	vmov.f32	s15, s0
 800eb8a:	eeb0 0a67 	vmov.f32	s0, s15
 800eb8e:	f7f9 f88d 	bl	8007cac <_Z22OD_CoolingPressure_setf>

		unsigned int fiducialLeftCounter = fiducialLeft.getCount();
 800eb92:	f107 0314 	add.w	r3, r7, #20
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fec6 	bl	800e928 <_ZN14FiducialSensor8getCountEv>
 800eb9c:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
		OD_FiducialLeftCounter_set((uint16_t)fiducialLeftCounter);
 800eba0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7f9 f8f0 	bl	8007d8c <_Z26OD_FiducialLeftCounter_sett>

		unsigned int fiducialRightCounter = fiducialRight.getCount();
 800ebac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff feb9 	bl	800e928 <_ZN14FiducialSensor8getCountEv>
 800ebb6:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		OD_FiducialRightCounter_set((uint16_t)fiducialRightCounter);
 800ebba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7f9 f8ab 	bl	8007d1c <_Z27OD_FiducialRightCounter_sett>

		float kistlerVel = kistlerController.getVelocity();
 800ebc6:	f107 0308 	add.w	r3, r7, #8
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff feee 	bl	800e9ac <_ZN17KistlerController11getVelocityEv>
 800ebd0:	ed87 0a79 	vstr	s0, [r7, #484]	; 0x1e4
		float kistlerPos = kistlerController.getPosition();
 800ebd4:	f107 0308 	add.w	r3, r7, #8
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7ff fef6 	bl	800e9ca <_ZN17KistlerController11getPositionEv>
 800ebde:	ed87 0a78 	vstr	s0, [r7, #480]	; 0x1e0

		OD_Position_set(kistlerPos);
 800ebe2:	ed97 0a78 	vldr	s0, [r7, #480]	; 0x1e0
 800ebe6:	f7f9 f90b 	bl	8007e00 <_Z15OD_Position_setf>
		OD_Velocity_set(kistlerVel);
 800ebea:	ed97 0a79 	vldr	s0, [r7, #484]	; 0x1e4
 800ebee:	f7f9 f941 	bl	8007e74 <_Z15OD_Velocity_setf>

		// ======= POSITION-ESTIMATION ======
		osDelay(pdMS_TO_TICKS(50));
 800ebf2:	2032      	movs	r0, #50	; 0x32
 800ebf4:	f009 f820 	bl	8017c38 <osDelay>

	}
 800ebf8:	e779      	b.n	800eaee <main_entry+0x5e>
 800ebfa:	bf00      	nop
 800ebfc:	0801fbdc 	.word	0x0801fbdc

0800ec00 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7f2 fc0f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800ec12:	463b      	mov	r3, r7
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 f869 	bl	800ecec <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00f      	beq.n	800ec40 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800ec20:	687c      	ldr	r4, [r7, #4]
 800ec22:	463b      	mov	r3, r7
 800ec24:	4618      	mov	r0, r3
 800ec26:	f000 f86c 	bl	800ed02 <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 f872 	bl	800ed18 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4a05      	ldr	r2, [pc, #20]	; (800ec4c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800ec38:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4a04      	ldr	r2, [pc, #16]	; (800ec50 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x50>)
 800ec3e:	609a      	str	r2, [r3, #8]
      }
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4618      	mov	r0, r3
 800ec44:	370c      	adds	r7, #12
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd90      	pop	{r4, r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	0800ed3d 	.word	0x0800ed3d
 800ec50:	0800ed67 	.word	0x0800ed67

0800ec54 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800ec54:	b590      	push	{r4, r7, lr}
 800ec56:	b087      	sub	sp, #28
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800ec5c:	f107 0308 	add.w	r3, r7, #8
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f2 fd5f 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800ec68:	f107 0308 	add.w	r3, r7, #8
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	4908      	ldr	r1, [pc, #32]	; (800ec90 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE+0x3c>)
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f2 fc53 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800ec76:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800ec78:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800ec7a:	f107 0308 	add.w	r3, r7, #8
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7f2 fc08 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800ec84:	4623      	mov	r3, r4
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	371c      	adds	r7, #28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd90      	pop	{r4, r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	1ffffffa 	.word	0x1ffffffa

0800ec94 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f103 0208 	add.w	r2, r3, #8
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	3310      	adds	r3, #16
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f7ff fd3d 	bl	800e728 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>
 800ecae:	eef0 7a40 	vmov.f32	s15, s0
        }
 800ecb2:	eeb0 0a67 	vmov.f32	s0, s15
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f103 0208 	add.w	r2, r3, #8
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	3310      	adds	r3, #16
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7ff fd4d 	bl	800e770 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>
 800ecd6:	eeb0 7a40 	vmov.f32	s14, s0
 800ecda:	eef0 7a60 	vmov.f32	s15, s1
        }
 800ecde:	eeb0 0a47 	vmov.f32	s0, s14
 800ece2:	eef0 0a67 	vmov.f32	s1, s15
 800ece6:	3708      	adds	r7, #8
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
	  { return true; }
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800ed18:	b590      	push	{r4, r7, lr}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800ed22:	6838      	ldr	r0, [r7, #0]
 800ed24:	f7ff ffed 	bl	800ed02 <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	4622      	mov	r2, r4
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f838 	bl	800eda4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd90      	pop	{r4, r7, pc}

0800ed3c <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800ed3c:	b590      	push	{r4, r7, lr}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f845 	bl	800edd6 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	6838      	ldr	r0, [r7, #0]
 800ed50:	f7f2 fd73 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ed54:	4603      	mov	r3, r0
 800ed56:	4619      	mov	r1, r3
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 f84d 	bl	800edf8 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800ed5e:	bf00      	nop
      }
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd90      	pop	{r4, r7, pc}

0800ed66 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800ed66:	b590      	push	{r4, r7, lr}
 800ed68:	b085      	sub	sp, #20
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	60f8      	str	r0, [r7, #12]
 800ed6e:	60b9      	str	r1, [r7, #8]
 800ed70:	4613      	mov	r3, r2
 800ed72:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800ed74:	79fb      	ldrb	r3, [r7, #7]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d109      	bne.n	800ed8e <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f000 f852 	bl	800ee24 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800ed80:	4604      	mov	r4, r0
 800ed82:	68b8      	ldr	r0, [r7, #8]
 800ed84:	f000 f827 	bl	800edd6 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	6023      	str	r3, [r4, #0]
	    break;
 800ed8c:	e005      	b.n	800ed9a <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800ed8e:	79fb      	ldrb	r3, [r7, #7]
 800ed90:	461a      	mov	r2, r3
 800ed92:	68b9      	ldr	r1, [r7, #8]
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f000 f851 	bl	800ee3c <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800ed9a:	2300      	movs	r3, #0
      }
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3714      	adds	r7, #20
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd90      	pop	{r4, r7, pc}

0800eda4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800eda4:	b590      	push	{r4, r7, lr}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800edb0:	68b8      	ldr	r0, [r7, #8]
 800edb2:	f7ff ffa6 	bl	800ed02 <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800edb6:	4604      	mov	r4, r0
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f7f3 fb4d 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800edbe:	4603      	mov	r3, r0
 800edc0:	4619      	mov	r1, r3
 800edc2:	2004      	movs	r0, #4
 800edc4:	f7f3 fb3c 	bl	8002440 <_ZnwjPv>
 800edc8:	4602      	mov	r2, r0
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	6013      	str	r3, [r2, #0]
 800edce:	bf00      	nop
 800edd0:	3714      	adds	r7, #20
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd90      	pop	{r4, r7, pc}

0800edd6 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f857 	bl	800ee92 <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800ede4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f000 f85f 	bl	800eeaa <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800edec:	4603      	mov	r3, r0
 800edee:	bf00      	nop
	}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800edf8:	b5b0      	push	{r4, r5, r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f85c 	bl	800eec0 <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ee08:	4604      	mov	r4, r0
 800ee0a:	6838      	ldr	r0, [r7, #0]
 800ee0c:	f7f2 fd15 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ee10:	4603      	mov	r3, r0
 800ee12:	461a      	mov	r2, r3
 800ee14:	4621      	mov	r1, r4
 800ee16:	4628      	mov	r0, r5
 800ee18:	f000 f85d 	bl	800eed6 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800ee1c:	bf00      	nop
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bdb0      	pop	{r4, r5, r7, pc}

0800ee24 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7f3 fb13 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800ee32:	4603      	mov	r3, r0
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800ee3c:	b5b0      	push	{r4, r5, r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	60f8      	str	r0, [r7, #12]
 800ee44:	60b9      	str	r1, [r7, #8]
 800ee46:	4613      	mov	r3, r2
 800ee48:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	d016      	beq.n	800ee7e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	dc19      	bgt.n	800ee88 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d002      	beq.n	800ee5e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d00a      	beq.n	800ee72 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800ee5c:	e014      	b.n	800ee88 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff ffe0 	bl	800ee24 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800ee64:	4604      	mov	r4, r0
 800ee66:	68b8      	ldr	r0, [r7, #8]
 800ee68:	f7ff ffb5 	bl	800edd6 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	6023      	str	r3, [r4, #0]
	      break;
 800ee70:	e00a      	b.n	800ee88 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800ee72:	462a      	mov	r2, r5
 800ee74:	68b9      	ldr	r1, [r7, #8]
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f000 f843 	bl	800ef02 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800ee7c:	e004      	b.n	800ee88 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800ee7e:	4621      	mov	r1, r4
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 f857 	bl	800ef34 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800ee86:	bf00      	nop
	  return false;
 800ee88:	2300      	movs	r3, #0
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bdb0      	pop	{r4, r5, r7, pc}

0800ee92 <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b082      	sub	sp, #8
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7f3 fae7 	bl	800246e <_ZNKSt9_Any_data9_M_accessEv>
 800eea0:	4603      	mov	r3, r0
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	370c      	adds	r7, #12
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr

0800eed6 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800eed6:	b590      	push	{r4, r7, lr}
 800eed8:	b085      	sub	sp, #20
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	7338      	strb	r0, [r7, #12]
 800eede:	60b9      	str	r1, [r7, #8]
 800eee0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800eee2:	68b8      	ldr	r0, [r7, #8]
 800eee4:	f7ff ffec 	bl	800eec0 <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800eee8:	4604      	mov	r4, r0
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f2 fca5 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800eef0:	4603      	mov	r3, r0
 800eef2:	4619      	mov	r1, r3
 800eef4:	4620      	mov	r0, r4
 800eef6:	f7ff fd23 	bl	800e940 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>
 800eefa:	bf00      	nop
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd90      	pop	{r4, r7, pc}

0800ef02 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800ef02:	b590      	push	{r4, r7, lr}
 800ef04:	b085      	sub	sp, #20
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800ef0e:	68b8      	ldr	r0, [r7, #8]
 800ef10:	f7ff ffbf 	bl	800ee92 <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800ef14:	4604      	mov	r4, r0
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7f3 fa9e 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	4619      	mov	r1, r3
 800ef20:	2004      	movs	r0, #4
 800ef22:	f7f3 fa8d 	bl	8002440 <_ZnwjPv>
 800ef26:	4602      	mov	r2, r0
 800ef28:	6823      	ldr	r3, [r4, #0]
 800ef2a:	6013      	str	r3, [r2, #0]
	}
 800ef2c:	bf00      	nop
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd90      	pop	{r4, r7, pc}

0800ef34 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 f804 	bl	800ef4c <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7f3 fa7f 	bl	8002458 <_ZNSt9_Any_data9_M_accessEv>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 800ef64:	b084      	sub	sp, #16
 800ef66:	b5b0      	push	{r4, r5, r7, lr}
 800ef68:	b082      	sub	sp, #8
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
 800ef6e:	f107 001c 	add.w	r0, r7, #28
 800ef72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800ef7a:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fc ffce 	bl	800bf1e <_ZN20AdcChannelControllerC1E9AdcModulej>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3308      	adds	r3, #8
 800ef86:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800ef88:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fc ffc7 	bl	800bf1e <_ZN20AdcChannelControllerC1E9AdcModulej>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	3310      	adds	r3, #16
 800ef94:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 800ef96:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fc ffbf 	bl	800bf1e <_ZN20AdcChannelControllerC1E9AdcModulej>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f103 0418 	add.w	r4, r3, #24
 800efa6:	f107 051c 	add.w	r5, r7, #28
 800efaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800efba:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800efca:	b004      	add	sp, #16
 800efcc:	4770      	bx	lr
	...

0800efd0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fc ffb9 	bl	800bf52 <_ZN20AdcChannelController3getEv>
 800efe0:	4603      	mov	r3, r0
 800efe2:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 800efe4:	89fb      	ldrh	r3, [r7, #14]
 800efe6:	ee07 3a90 	vmov	s15, r3
 800efea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800f02c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800eff2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eff6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800f030 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 800effa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800effe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800f034 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800f002:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f006:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800f038 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800f00a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f00e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800f012:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f016:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	ee07 3a90 	vmov	s15, r3
	}
 800f020:	eeb0 0a67 	vmov.f32	s0, s15
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	40533333 	.word	0x40533333
 800f030:	457ff000 	.word	0x457ff000
 800f034:	3f428f5c 	.word	0x3f428f5c
 800f038:	3b23d70a 	.word	0x3b23d70a
 800f03c:	00000000 	.word	0x00000000

0800f040 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3308      	adds	r3, #8
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fc ff80 	bl	800bf52 <_ZN20AdcChannelController3getEv>
 800f052:	4603      	mov	r3, r0
 800f054:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 800f056:	89fb      	ldrh	r3, [r7, #14]
 800f058:	ee07 3a90 	vmov	s15, r3
 800f05c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f060:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f108 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800f064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f06c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f074:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f078:	ee16 0a90 	vmov	r0, s13
 800f07c:	f7f1 fa64 	bl	8000548 <__aeabi_f2d>
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	ec43 2b10 	vmov	d0, r2, r3
 800f088:	f00d f8b6 	bl	801c1f8 <log>
 800f08c:	ec51 0b10 	vmov	r0, r1, d0
 800f090:	a317      	add	r3, pc, #92	; (adr r3, 800f0f0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	f7f1 faaf 	bl	80005f8 <__aeabi_dmul>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4610      	mov	r0, r2
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	a315      	add	r3, pc, #84	; (adr r3, 800f0f8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 f8f0 	bl	800028c <__adddf3>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	f04f 0000 	mov.w	r0, #0
 800f0b4:	4915      	ldr	r1, [pc, #84]	; (800f10c <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 800f0b6:	f7f1 fbc9 	bl	800084c <__aeabi_ddiv>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	4610      	mov	r0, r2
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	a30f      	add	r3, pc, #60	; (adr r3, 800f100 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 f8de 	bl	8000288 <__aeabi_dsub>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	f7f1 fd88 	bl	8000be8 <__aeabi_d2f>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	ee07 3a90 	vmov	s15, r3
	}
 800f0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	f3af 8000 	nop.w
 800f0f0:	60000000 	.word	0x60000000
 800f0f4:	3f3363ac 	.word	0x3f3363ac
 800f0f8:	e0000000 	.word	0xe0000000
 800f0fc:	3f6b79e1 	.word	0x3f6b79e1
 800f100:	60000000 	.word	0x60000000
 800f104:	40711266 	.word	0x40711266
 800f108:	457ff000 	.word	0x457ff000
 800f10c:	3ff00000 	.word	0x3ff00000

0800f110 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 800f110:	b580      	push	{r7, lr}
 800f112:	ed2d 8b02 	vpush	{d8}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff ff8f 	bl	800f040 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800f122:	eeb0 8a40 	vmov.f32	s16, s0
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f7ff ff52 	bl	800efd0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800f12c:	eef0 7a40 	vmov.f32	s15, s0
 800f130:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f134:	ee17 0a90 	vmov	r0, s15
 800f138:	f7f1 fa06 	bl	8000548 <__aeabi_f2d>
 800f13c:	f04f 0200 	mov.w	r2, #0
 800f140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f144:	f7f1 fb82 	bl	800084c <__aeabi_ddiv>
 800f148:	4602      	mov	r2, r0
 800f14a:	460b      	mov	r3, r1
 800f14c:	4610      	mov	r0, r2
 800f14e:	4619      	mov	r1, r3
 800f150:	f7f1 fd4a 	bl	8000be8 <__aeabi_d2f>
 800f154:	4603      	mov	r3, r0
 800f156:	60fb      	str	r3, [r7, #12]
		return average;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	ee07 3a90 	vmov	s15, r3
	}
 800f15e:	eeb0 0a67 	vmov.f32	s0, s15
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	ecbd 8b02 	vpop	{d8}
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	3310      	adds	r3, #16
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fc feea 	bl	800bf52 <_ZN20AdcChannelController3getEv>
 800f17e:	4603      	mov	r3, r0
 800f180:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800f182:	89fb      	ldrh	r3, [r7, #14]
 800f184:	ee07 3a90 	vmov	s15, r3
 800f188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f18c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800f1c0 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 800f190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f194:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800f1c4 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 800f198:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f19c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800f1c8 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 800f1a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f1a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f1cc <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 800f1a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1ac:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	ee07 3a90 	vmov	s15, r3
	}
 800f1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	457ff000 	.word	0x457ff000
 800f1c4:	40533333 	.word	0x40533333
 800f1c8:	3dda09cc 	.word	0x3dda09cc
 800f1cc:	3f19999a 	.word	0x3f19999a

0800f1d0 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7ff ff99 	bl	800f110 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 800f1de:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff ffc2 	bl	800f16c <_ZN14OnBoardSensors15getInputVoltageEv>
 800f1e8:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 800f1ec:	ed97 0a03 	vldr	s0, [r7, #12]
 800f1f0:	f7f7 fe56 	bl	8006ea0 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 800f1f4:	ed97 0a02 	vldr	s0, [r7, #8]
 800f1f8:	f7f7 fe8c 	bl	8006f14 <_Z19OD_InputVoltage_setf>
	}
 800f1fc:	bf00      	nop
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 800f208:	f00c fec0 	bl	801bf8c <xPortGetFreeHeapSize>
 800f20c:	4603      	mov	r3, r0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	bd80      	pop	{r7, pc}
	...

0800f214 <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 800f214:	b480      	push	{r7}
 800f216:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 80.0;
 800f218:	4b04      	ldr	r3, [pc, #16]	; (800f22c <_ZL16estimateCPUusagev+0x18>)
 800f21a:	ee07 3a90 	vmov	s15, r3
}
 800f21e:	eeb0 0a67 	vmov.f32	s0, s15
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	42a00000 	.word	0x42a00000

0800f230 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 800f230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f232:	b0a7      	sub	sp, #156	; 0x9c
 800f234:	af0c      	add	r7, sp, #48	; 0x30
 800f236:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 800f238:	4e19      	ldr	r6, [pc, #100]	; (800f2a0 <microcontroller_info_entry+0x70>)
 800f23a:	f107 0c0c 	add.w	ip, r7, #12
 800f23e:	466d      	mov	r5, sp
 800f240:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800f244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f24a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f24c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800f250:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f254:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800f258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f25a:	4660      	mov	r0, ip
 800f25c:	f7ff fe82 	bl	800ef64 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800f260:	f107 030c 	add.w	r3, r7, #12
 800f264:	4618      	mov	r0, r3
 800f266:	f7ff ffb3 	bl	800f1d0 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 800f26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f26c:	2b14      	cmp	r3, #20
 800f26e:	d90f      	bls.n	800f290 <microcontroller_info_entry+0x60>
			float cpuUsage = estimateCPUusage();
 800f270:	f7ff ffd0 	bl	800f214 <_ZL16estimateCPUusagev>
 800f274:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 800f278:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800f27c:	f7f7 fd9e 	bl	8006dbc <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800f280:	f7ff ffc0 	bl	800f204 <_ZL18estimateFreeMemoryv>
 800f284:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 800f286:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f288:	f7f7 fdd0 	bl	8006e2c <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800f290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f292:	3301      	adds	r3, #1
 800f294:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 800f296:	2032      	movs	r0, #50	; 0x32
 800f298:	f008 fcce 	bl	8017c38 <osDelay>
	}
 800f29c:	e7e0      	b.n	800f260 <microcontroller_info_entry+0x30>
 800f29e:	bf00      	nop
 800f2a0:	0801fc74 	.word	0x0801fc74

0800f2a4 <_Z41__static_initialization_and_destruction_0ii>:
	while(true){
		update();
	}
}

}
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d10a      	bne.n	800f2ca <_Z41__static_initialization_and_destruction_0ii+0x26>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d105      	bne.n	800f2ca <_Z41__static_initialization_and_destruction_0ii+0x26>
osMutexId_t s_stateMutex = osMutexNew(NULL);
 800f2be:	2000      	movs	r0, #0
 800f2c0:	f008 fcd5 	bl	8017c6e <osMutexNew>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4a03      	ldr	r2, [pc, #12]	; (800f2d4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800f2c8:	6013      	str	r3, [r2, #0]
}
 800f2ca:	bf00      	nop
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20000e3c 	.word	0x20000e3c

0800f2d8 <_GLOBAL__sub_I__ZN3fms7s_stateE>:
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	f7ff ffdf 	bl	800f2a4 <_Z41__static_initialization_and_destruction_0ii>
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
	//GlobalState::getInstance().start();
	while(true){
		osDelay(osWaitForever);
 800f2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f4:	f008 fca0 	bl	8017c38 <osDelay>
 800f2f8:	e7fa      	b.n	800f2f0 <state_maschine_entry+0x8>
	...

0800f2fc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f302:	463b      	mov	r3, r7
 800f304:	2200      	movs	r2, #0
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	605a      	str	r2, [r3, #4]
 800f30a:	609a      	str	r2, [r3, #8]
 800f30c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800f30e:	4b36      	ldr	r3, [pc, #216]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f310:	4a36      	ldr	r2, [pc, #216]	; (800f3ec <MX_ADC1_Init+0xf0>)
 800f312:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800f314:	4b34      	ldr	r3, [pc, #208]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f316:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f31a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f31c:	4b32      	ldr	r3, [pc, #200]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f31e:	2200      	movs	r2, #0
 800f320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800f322:	4b31      	ldr	r3, [pc, #196]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f324:	2201      	movs	r2, #1
 800f326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f328:	4b2f      	ldr	r3, [pc, #188]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f32e:	4b2e      	ldr	r3, [pc, #184]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f330:	2200      	movs	r2, #0
 800f332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f336:	4b2c      	ldr	r3, [pc, #176]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f338:	2200      	movs	r2, #0
 800f33a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f33c:	4b2a      	ldr	r3, [pc, #168]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f33e:	4a2c      	ldr	r2, [pc, #176]	; (800f3f0 <MX_ADC1_Init+0xf4>)
 800f340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f342:	4b29      	ldr	r3, [pc, #164]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f344:	2200      	movs	r2, #0
 800f346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800f348:	4b27      	ldr	r3, [pc, #156]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f34a:	2204      	movs	r2, #4
 800f34c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800f34e:	4b26      	ldr	r3, [pc, #152]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800f356:	4b24      	ldr	r3, [pc, #144]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f358:	2200      	movs	r2, #0
 800f35a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f35c:	4822      	ldr	r0, [pc, #136]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f35e:	f001 fd69 	bl	8010e34 <HAL_ADC_Init>
 800f362:	4603      	mov	r3, r0
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800f368:	f000 fe06 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800f36c:	230a      	movs	r3, #10
 800f36e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f370:	2301      	movs	r3, #1
 800f372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800f374:	2305      	movs	r3, #5
 800f376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f378:	463b      	mov	r3, r7
 800f37a:	4619      	mov	r1, r3
 800f37c:	481a      	ldr	r0, [pc, #104]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f37e:	f001 feb7 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800f388:	f000 fdf6 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800f38c:	230c      	movs	r3, #12
 800f38e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f390:	2302      	movs	r3, #2
 800f392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f394:	463b      	mov	r3, r7
 800f396:	4619      	mov	r1, r3
 800f398:	4813      	ldr	r0, [pc, #76]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f39a:	f001 fea9 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f3a4:	f000 fde8 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800f3a8:	2310      	movs	r3, #16
 800f3aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f3b0:	463b      	mov	r3, r7
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	480c      	ldr	r0, [pc, #48]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f3b6:	f001 fe9b 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f3c0:	f000 fdda 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800f3c4:	2311      	movs	r3, #17
 800f3c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800f3c8:	2304      	movs	r3, #4
 800f3ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f3cc:	463b      	mov	r3, r7
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	4805      	ldr	r0, [pc, #20]	; (800f3e8 <MX_ADC1_Init+0xec>)
 800f3d2:	f001 fe8d 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800f3dc:	f000 fdcc 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f3e0:	bf00      	nop
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20000e40 	.word	0x20000e40
 800f3ec:	40012000 	.word	0x40012000
 800f3f0:	0f000001 	.word	0x0f000001

0800f3f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800f3fa:	463b      	mov	r3, r7
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	601a      	str	r2, [r3, #0]
 800f400:	605a      	str	r2, [r3, #4]
 800f402:	609a      	str	r2, [r3, #8]
 800f404:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800f406:	4b52      	ldr	r3, [pc, #328]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f408:	4a52      	ldr	r2, [pc, #328]	; (800f554 <MX_ADC2_Init+0x160>)
 800f40a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800f40c:	4b50      	ldr	r3, [pc, #320]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f40e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f412:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f414:	4b4e      	ldr	r3, [pc, #312]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f416:	2200      	movs	r2, #0
 800f418:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800f41a:	4b4d      	ldr	r3, [pc, #308]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f41c:	2201      	movs	r2, #1
 800f41e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800f420:	4b4b      	ldr	r3, [pc, #300]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f422:	2200      	movs	r2, #0
 800f424:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f426:	4b4a      	ldr	r3, [pc, #296]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f428:	2200      	movs	r2, #0
 800f42a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800f42e:	4b48      	ldr	r3, [pc, #288]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f430:	2200      	movs	r2, #0
 800f432:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800f434:	4b46      	ldr	r3, [pc, #280]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f436:	4a48      	ldr	r2, [pc, #288]	; (800f558 <MX_ADC2_Init+0x164>)
 800f438:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f43a:	4b45      	ldr	r3, [pc, #276]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f43c:	2200      	movs	r2, #0
 800f43e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 800f440:	4b43      	ldr	r3, [pc, #268]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f442:	2208      	movs	r2, #8
 800f444:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800f446:	4b42      	ldr	r3, [pc, #264]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800f44e:	4b40      	ldr	r3, [pc, #256]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f450:	2200      	movs	r2, #0
 800f452:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f454:	483e      	ldr	r0, [pc, #248]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f456:	f001 fced 	bl	8010e34 <HAL_ADC_Init>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800f460:	f000 fd8a 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800f464:	230f      	movs	r3, #15
 800f466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f468:	2301      	movs	r3, #1
 800f46a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800f46c:	2304      	movs	r3, #4
 800f46e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f470:	463b      	mov	r3, r7
 800f472:	4619      	mov	r1, r3
 800f474:	4836      	ldr	r0, [pc, #216]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f476:	f001 fe3b 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800f480:	f000 fd7a 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800f484:	230e      	movs	r3, #14
 800f486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800f488:	2302      	movs	r3, #2
 800f48a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f48c:	463b      	mov	r3, r7
 800f48e:	4619      	mov	r1, r3
 800f490:	482f      	ldr	r0, [pc, #188]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f492:	f001 fe2d 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800f49c:	f000 fd6c 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800f4a0:	2303      	movs	r3, #3
 800f4a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f4a4:	2303      	movs	r3, #3
 800f4a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f4a8:	463b      	mov	r3, r7
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	4828      	ldr	r0, [pc, #160]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f4ae:	f001 fe1f 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d001      	beq.n	800f4bc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800f4b8:	f000 fd5e 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800f4c0:	2304      	movs	r3, #4
 800f4c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	4821      	ldr	r0, [pc, #132]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f4ca:	f001 fe11 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800f4d4:	f000 fd50 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800f4d8:	2304      	movs	r3, #4
 800f4da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800f4dc:	2305      	movs	r3, #5
 800f4de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f4e0:	463b      	mov	r3, r7
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	481a      	ldr	r0, [pc, #104]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f4e6:	f001 fe03 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d001      	beq.n	800f4f4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800f4f0:	f000 fd42 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800f4f4:	2305      	movs	r3, #5
 800f4f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800f4f8:	2306      	movs	r3, #6
 800f4fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f4fc:	463b      	mov	r3, r7
 800f4fe:	4619      	mov	r1, r3
 800f500:	4813      	ldr	r0, [pc, #76]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f502:	f001 fdf5 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800f50c:	f000 fd34 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800f510:	2306      	movs	r3, #6
 800f512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800f514:	2307      	movs	r3, #7
 800f516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f518:	463b      	mov	r3, r7
 800f51a:	4619      	mov	r1, r3
 800f51c:	480c      	ldr	r0, [pc, #48]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f51e:	f001 fde7 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800f528:	f000 fd26 	bl	800ff78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800f52c:	2307      	movs	r3, #7
 800f52e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800f530:	2308      	movs	r3, #8
 800f532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f534:	463b      	mov	r3, r7
 800f536:	4619      	mov	r1, r3
 800f538:	4805      	ldr	r0, [pc, #20]	; (800f550 <MX_ADC2_Init+0x15c>)
 800f53a:	f001 fdd9 	bl	80110f0 <HAL_ADC_ConfigChannel>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800f544:	f000 fd18 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800f548:	bf00      	nop
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	20000e88 	.word	0x20000e88
 800f554:	40012100 	.word	0x40012100
 800f558:	0f000001 	.word	0x0f000001

0800f55c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08c      	sub	sp, #48	; 0x30
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f564:	f107 031c 	add.w	r3, r7, #28
 800f568:	2200      	movs	r2, #0
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	605a      	str	r2, [r3, #4]
 800f56e:	609a      	str	r2, [r3, #8]
 800f570:	60da      	str	r2, [r3, #12]
 800f572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a6b      	ldr	r2, [pc, #428]	; (800f728 <HAL_ADC_MspInit+0x1cc>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d157      	bne.n	800f62e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f57e:	2300      	movs	r3, #0
 800f580:	61bb      	str	r3, [r7, #24]
 800f582:	4b6a      	ldr	r3, [pc, #424]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f586:	4a69      	ldr	r2, [pc, #420]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f58c:	6453      	str	r3, [r2, #68]	; 0x44
 800f58e:	4b67      	ldr	r3, [pc, #412]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f596:	61bb      	str	r3, [r7, #24]
 800f598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f59a:	2300      	movs	r3, #0
 800f59c:	617b      	str	r3, [r7, #20]
 800f59e:	4b63      	ldr	r3, [pc, #396]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a2:	4a62      	ldr	r2, [pc, #392]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f5a4:	f043 0304 	orr.w	r3, r3, #4
 800f5a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f5aa:	4b60      	ldr	r3, [pc, #384]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ae:	f003 0304 	and.w	r3, r3, #4
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800f5b6:	2305      	movs	r3, #5
 800f5b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f5ba:	2303      	movs	r3, #3
 800f5bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5c2:	f107 031c 	add.w	r3, r7, #28
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	4859      	ldr	r0, [pc, #356]	; (800f730 <HAL_ADC_MspInit+0x1d4>)
 800f5ca:	f003 fb3b 	bl	8012c44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f5ce:	4b59      	ldr	r3, [pc, #356]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5d0:	4a59      	ldr	r2, [pc, #356]	; (800f738 <HAL_ADC_MspInit+0x1dc>)
 800f5d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f5d4:	4b57      	ldr	r3, [pc, #348]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f5da:	4b56      	ldr	r3, [pc, #344]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5dc:	2200      	movs	r2, #0
 800f5de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f5e0:	4b54      	ldr	r3, [pc, #336]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f5e6:	4b53      	ldr	r3, [pc, #332]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f5ee:	4b51      	ldr	r3, [pc, #324]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f5f6:	4b4f      	ldr	r3, [pc, #316]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f5f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f5fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f5fe:	4b4d      	ldr	r3, [pc, #308]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f600:	2200      	movs	r2, #0
 800f602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f604:	4b4b      	ldr	r3, [pc, #300]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f606:	2200      	movs	r2, #0
 800f608:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f60a:	4b4a      	ldr	r3, [pc, #296]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f610:	4848      	ldr	r0, [pc, #288]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f612:	f002 ffa7 	bl	8012564 <HAL_DMA_Init>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800f61c:	f000 fcac 	bl	800ff78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4a44      	ldr	r2, [pc, #272]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f624:	639a      	str	r2, [r3, #56]	; 0x38
 800f626:	4a43      	ldr	r2, [pc, #268]	; (800f734 <HAL_ADC_MspInit+0x1d8>)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800f62c:	e077      	b.n	800f71e <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	4a42      	ldr	r2, [pc, #264]	; (800f73c <HAL_ADC_MspInit+0x1e0>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d172      	bne.n	800f71e <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f638:	2300      	movs	r3, #0
 800f63a:	613b      	str	r3, [r7, #16]
 800f63c:	4b3b      	ldr	r3, [pc, #236]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f640:	4a3a      	ldr	r2, [pc, #232]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f646:	6453      	str	r3, [r2, #68]	; 0x44
 800f648:	4b38      	ldr	r3, [pc, #224]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f64c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f650:	613b      	str	r3, [r7, #16]
 800f652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f654:	2300      	movs	r3, #0
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	4b34      	ldr	r3, [pc, #208]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f65c:	4a33      	ldr	r2, [pc, #204]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f65e:	f043 0304 	orr.w	r3, r3, #4
 800f662:	6313      	str	r3, [r2, #48]	; 0x30
 800f664:	4b31      	ldr	r3, [pc, #196]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	60fb      	str	r3, [r7, #12]
 800f66e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f670:	2300      	movs	r3, #0
 800f672:	60bb      	str	r3, [r7, #8]
 800f674:	4b2d      	ldr	r3, [pc, #180]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f678:	4a2c      	ldr	r2, [pc, #176]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f67a:	f043 0301 	orr.w	r3, r3, #1
 800f67e:	6313      	str	r3, [r2, #48]	; 0x30
 800f680:	4b2a      	ldr	r3, [pc, #168]	; (800f72c <HAL_ADC_MspInit+0x1d0>)
 800f682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	60bb      	str	r3, [r7, #8]
 800f68a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 800f68c:	2335      	movs	r3, #53	; 0x35
 800f68e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f690:	2303      	movs	r3, #3
 800f692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f694:	2300      	movs	r3, #0
 800f696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f698:	f107 031c 	add.w	r3, r7, #28
 800f69c:	4619      	mov	r1, r3
 800f69e:	4824      	ldr	r0, [pc, #144]	; (800f730 <HAL_ADC_MspInit+0x1d4>)
 800f6a0:	f003 fad0 	bl	8012c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 800f6a4:	23fc      	movs	r3, #252	; 0xfc
 800f6a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f6a8:	2303      	movs	r3, #3
 800f6aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6b0:	f107 031c 	add.w	r3, r7, #28
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4822      	ldr	r0, [pc, #136]	; (800f740 <HAL_ADC_MspInit+0x1e4>)
 800f6b8:	f003 fac4 	bl	8012c44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f6bc:	4b21      	ldr	r3, [pc, #132]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6be:	4a22      	ldr	r2, [pc, #136]	; (800f748 <HAL_ADC_MspInit+0x1ec>)
 800f6c0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f6c2:	4b20      	ldr	r3, [pc, #128]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f6c8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f6ca:	4b1e      	ldr	r3, [pc, #120]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f6d0:	4b1c      	ldr	r3, [pc, #112]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f6d6:	4b1b      	ldr	r3, [pc, #108]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6dc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f6de:	4b19      	ldr	r3, [pc, #100]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6e4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f6e6:	4b17      	ldr	r3, [pc, #92]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f6ec:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800f6ee:	4b15      	ldr	r3, [pc, #84]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800f6f4:	4b13      	ldr	r3, [pc, #76]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f6fa:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f6fc:	4b11      	ldr	r3, [pc, #68]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f702:	4810      	ldr	r0, [pc, #64]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f704:	f002 ff2e 	bl	8012564 <HAL_DMA_Init>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 800f70e:	f000 fc33 	bl	800ff78 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4a0b      	ldr	r2, [pc, #44]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f716:	639a      	str	r2, [r3, #56]	; 0x38
 800f718:	4a0a      	ldr	r2, [pc, #40]	; (800f744 <HAL_ADC_MspInit+0x1e8>)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f71e:	bf00      	nop
 800f720:	3730      	adds	r7, #48	; 0x30
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	40012000 	.word	0x40012000
 800f72c:	40023800 	.word	0x40023800
 800f730:	40020800 	.word	0x40020800
 800f734:	20000ed0 	.word	0x20000ed0
 800f738:	40026410 	.word	0x40026410
 800f73c:	40012100 	.word	0x40012100
 800f740:	40020000 	.word	0x40020000
 800f744:	20000f30 	.word	0x20000f30
 800f748:	40026440 	.word	0x40026440

0800f74c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800f750:	4b17      	ldr	r3, [pc, #92]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f752:	4a18      	ldr	r2, [pc, #96]	; (800f7b4 <MX_CAN1_Init+0x68>)
 800f754:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800f756:	4b16      	ldr	r3, [pc, #88]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f758:	2203      	movs	r2, #3
 800f75a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f75c:	4b14      	ldr	r3, [pc, #80]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f75e:	2200      	movs	r2, #0
 800f760:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f762:	4b13      	ldr	r3, [pc, #76]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f764:	2200      	movs	r2, #0
 800f766:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800f768:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f76a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800f76e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f770:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f772:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f776:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f778:	4b0d      	ldr	r3, [pc, #52]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f77a:	2200      	movs	r2, #0
 800f77c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800f77e:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f780:	2201      	movs	r2, #1
 800f782:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f784:	4b0a      	ldr	r3, [pc, #40]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f786:	2200      	movs	r2, #0
 800f788:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f78c:	2201      	movs	r2, #1
 800f78e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f790:	4b07      	ldr	r3, [pc, #28]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f792:	2200      	movs	r2, #0
 800f794:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f796:	4b06      	ldr	r3, [pc, #24]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f798:	2200      	movs	r2, #0
 800f79a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f79c:	4804      	ldr	r0, [pc, #16]	; (800f7b0 <MX_CAN1_Init+0x64>)
 800f79e:	f001 ff47 	bl	8011630 <HAL_CAN_Init>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800f7a8:	f000 fbe6 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800f7ac:	bf00      	nop
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20000f90 	.word	0x20000f90
 800f7b4:	40006400 	.word	0x40006400

0800f7b8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800f7bc:	4b17      	ldr	r3, [pc, #92]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7be:	4a18      	ldr	r2, [pc, #96]	; (800f820 <MX_CAN2_Init+0x68>)
 800f7c0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800f7c2:	4b16      	ldr	r3, [pc, #88]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7c4:	2203      	movs	r2, #3
 800f7c6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f7c8:	4b14      	ldr	r3, [pc, #80]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f7ce:	4b13      	ldr	r3, [pc, #76]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800f7d4:	4b11      	ldr	r3, [pc, #68]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7d6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800f7da:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f7dc:	4b0f      	ldr	r3, [pc, #60]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f7e2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800f7e4:	4b0d      	ldr	r3, [pc, #52]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800f7ea:	4b0c      	ldr	r3, [pc, #48]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800f7f0:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800f7f6:	4b09      	ldr	r3, [pc, #36]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f7fc:	4b07      	ldr	r3, [pc, #28]	; (800f81c <MX_CAN2_Init+0x64>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800f802:	4b06      	ldr	r3, [pc, #24]	; (800f81c <MX_CAN2_Init+0x64>)
 800f804:	2200      	movs	r2, #0
 800f806:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f808:	4804      	ldr	r0, [pc, #16]	; (800f81c <MX_CAN2_Init+0x64>)
 800f80a:	f001 ff11 	bl	8011630 <HAL_CAN_Init>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800f814:	f000 fbb0 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800f818:	bf00      	nop
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	20000fb8 	.word	0x20000fb8
 800f820:	40006800 	.word	0x40006800

0800f824 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b08c      	sub	sp, #48	; 0x30
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f82c:	f107 031c 	add.w	r3, r7, #28
 800f830:	2200      	movs	r2, #0
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	605a      	str	r2, [r3, #4]
 800f836:	609a      	str	r2, [r3, #8]
 800f838:	60da      	str	r2, [r3, #12]
 800f83a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4a5a      	ldr	r2, [pc, #360]	; (800f9ac <HAL_CAN_MspInit+0x188>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d14d      	bne.n	800f8e2 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800f846:	4b5a      	ldr	r3, [pc, #360]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3301      	adds	r3, #1
 800f84c:	4a58      	ldr	r2, [pc, #352]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f84e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800f850:	4b57      	ldr	r3, [pc, #348]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b01      	cmp	r3, #1
 800f856:	d10d      	bne.n	800f874 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800f858:	2300      	movs	r3, #0
 800f85a:	61bb      	str	r3, [r7, #24]
 800f85c:	4b55      	ldr	r3, [pc, #340]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f860:	4a54      	ldr	r2, [pc, #336]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f866:	6413      	str	r3, [r2, #64]	; 0x40
 800f868:	4b52      	ldr	r3, [pc, #328]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f86c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f870:	61bb      	str	r3, [r7, #24]
 800f872:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f874:	2300      	movs	r3, #0
 800f876:	617b      	str	r3, [r7, #20]
 800f878:	4b4e      	ldr	r3, [pc, #312]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f87c:	4a4d      	ldr	r2, [pc, #308]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f87e:	f043 0308 	orr.w	r3, r3, #8
 800f882:	6313      	str	r3, [r2, #48]	; 0x30
 800f884:	4b4b      	ldr	r3, [pc, #300]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f888:	f003 0308 	and.w	r3, r3, #8
 800f88c:	617b      	str	r3, [r7, #20]
 800f88e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800f890:	2303      	movs	r3, #3
 800f892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f894:	2302      	movs	r3, #2
 800f896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f89c:	2303      	movs	r3, #3
 800f89e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f8a0:	2309      	movs	r3, #9
 800f8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f8a4:	f107 031c 	add.w	r3, r7, #28
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4843      	ldr	r0, [pc, #268]	; (800f9b8 <HAL_CAN_MspInit+0x194>)
 800f8ac:	f003 f9ca 	bl	8012c44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	2105      	movs	r1, #5
 800f8b4:	2013      	movs	r0, #19
 800f8b6:	f002 fe0f 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f8ba:	2013      	movs	r0, #19
 800f8bc:	f002 fe28 	bl	8012510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	2105      	movs	r1, #5
 800f8c4:	2014      	movs	r0, #20
 800f8c6:	f002 fe07 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f8ca:	2014      	movs	r0, #20
 800f8cc:	f002 fe20 	bl	8012510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	2105      	movs	r1, #5
 800f8d4:	2015      	movs	r0, #21
 800f8d6:	f002 fdff 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800f8da:	2015      	movs	r0, #21
 800f8dc:	f002 fe18 	bl	8012510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800f8e0:	e05f      	b.n	800f9a2 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a35      	ldr	r2, [pc, #212]	; (800f9bc <HAL_CAN_MspInit+0x198>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d15a      	bne.n	800f9a2 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	613b      	str	r3, [r7, #16]
 800f8f0:	4b30      	ldr	r3, [pc, #192]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f4:	4a2f      	ldr	r2, [pc, #188]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f8f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f8fa:	6413      	str	r3, [r2, #64]	; 0x40
 800f8fc:	4b2d      	ldr	r3, [pc, #180]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f904:	613b      	str	r3, [r7, #16]
 800f906:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800f908:	4b29      	ldr	r3, [pc, #164]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3301      	adds	r3, #1
 800f90e:	4a28      	ldr	r2, [pc, #160]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f910:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800f912:	4b27      	ldr	r3, [pc, #156]	; (800f9b0 <HAL_CAN_MspInit+0x18c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b01      	cmp	r3, #1
 800f918:	d10d      	bne.n	800f936 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800f91a:	2300      	movs	r3, #0
 800f91c:	60fb      	str	r3, [r7, #12]
 800f91e:	4b25      	ldr	r3, [pc, #148]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f922:	4a24      	ldr	r2, [pc, #144]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f928:	6413      	str	r3, [r2, #64]	; 0x40
 800f92a:	4b22      	ldr	r3, [pc, #136]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f936:	2300      	movs	r3, #0
 800f938:	60bb      	str	r3, [r7, #8]
 800f93a:	4b1e      	ldr	r3, [pc, #120]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93e:	4a1d      	ldr	r2, [pc, #116]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f940:	f043 0302 	orr.w	r3, r3, #2
 800f944:	6313      	str	r3, [r2, #48]	; 0x30
 800f946:	4b1b      	ldr	r3, [pc, #108]	; (800f9b4 <HAL_CAN_MspInit+0x190>)
 800f948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94a:	f003 0302 	and.w	r3, r3, #2
 800f94e:	60bb      	str	r3, [r7, #8]
 800f950:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800f952:	2360      	movs	r3, #96	; 0x60
 800f954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f956:	2302      	movs	r3, #2
 800f958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f95e:	2303      	movs	r3, #3
 800f960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f962:	2309      	movs	r3, #9
 800f964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f966:	f107 031c 	add.w	r3, r7, #28
 800f96a:	4619      	mov	r1, r3
 800f96c:	4814      	ldr	r0, [pc, #80]	; (800f9c0 <HAL_CAN_MspInit+0x19c>)
 800f96e:	f003 f969 	bl	8012c44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800f972:	2200      	movs	r2, #0
 800f974:	2105      	movs	r1, #5
 800f976:	203f      	movs	r0, #63	; 0x3f
 800f978:	f002 fdae 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800f97c:	203f      	movs	r0, #63	; 0x3f
 800f97e:	f002 fdc7 	bl	8012510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800f982:	2200      	movs	r2, #0
 800f984:	2105      	movs	r1, #5
 800f986:	2040      	movs	r0, #64	; 0x40
 800f988:	f002 fda6 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f98c:	2040      	movs	r0, #64	; 0x40
 800f98e:	f002 fdbf 	bl	8012510 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800f992:	2200      	movs	r2, #0
 800f994:	2105      	movs	r1, #5
 800f996:	2041      	movs	r0, #65	; 0x41
 800f998:	f002 fd9e 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f99c:	2041      	movs	r0, #65	; 0x41
 800f99e:	f002 fdb7 	bl	8012510 <HAL_NVIC_EnableIRQ>
}
 800f9a2:	bf00      	nop
 800f9a4:	3730      	adds	r7, #48	; 0x30
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	40006400 	.word	0x40006400
 800f9b0:	20000fe0 	.word	0x20000fe0
 800f9b4:	40023800 	.word	0x40023800
 800f9b8:	40020c00 	.word	0x40020c00
 800f9bc:	40006800 	.word	0x40006800
 800f9c0:	40020400 	.word	0x40020400

0800f9c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f9c8:	4b06      	ldr	r3, [pc, #24]	; (800f9e4 <MX_CRC_Init+0x20>)
 800f9ca:	4a07      	ldr	r2, [pc, #28]	; (800f9e8 <MX_CRC_Init+0x24>)
 800f9cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f9ce:	4805      	ldr	r0, [pc, #20]	; (800f9e4 <MX_CRC_Init+0x20>)
 800f9d0:	f002 fdac 	bl	801252c <HAL_CRC_Init>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d001      	beq.n	800f9de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800f9da:	f000 facd 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f9de:	bf00      	nop
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	20000fe4 	.word	0x20000fe4
 800f9e8:	40023000 	.word	0x40023000

0800f9ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a0b      	ldr	r2, [pc, #44]	; (800fa28 <HAL_CRC_MspInit+0x3c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d10d      	bne.n	800fa1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <HAL_CRC_MspInit+0x40>)
 800fa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa06:	4a09      	ldr	r2, [pc, #36]	; (800fa2c <HAL_CRC_MspInit+0x40>)
 800fa08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fa0c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa0e:	4b07      	ldr	r3, [pc, #28]	; (800fa2c <HAL_CRC_MspInit+0x40>)
 800fa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800fa1a:	bf00      	nop
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	40023000 	.word	0x40023000
 800fa2c:	40023800 	.word	0x40023800

0800fa30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fa36:	2300      	movs	r3, #0
 800fa38:	607b      	str	r3, [r7, #4]
 800fa3a:	4b18      	ldr	r3, [pc, #96]	; (800fa9c <MX_DMA_Init+0x6c>)
 800fa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa3e:	4a17      	ldr	r2, [pc, #92]	; (800fa9c <MX_DMA_Init+0x6c>)
 800fa40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa44:	6313      	str	r3, [r2, #48]	; 0x30
 800fa46:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <MX_DMA_Init+0x6c>)
 800fa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa4e:	607b      	str	r3, [r7, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800fa52:	2200      	movs	r2, #0
 800fa54:	2105      	movs	r1, #5
 800fa56:	2038      	movs	r0, #56	; 0x38
 800fa58:	f002 fd3e 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fa5c:	2038      	movs	r0, #56	; 0x38
 800fa5e:	f002 fd57 	bl	8012510 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800fa62:	2200      	movs	r2, #0
 800fa64:	2105      	movs	r1, #5
 800fa66:	203a      	movs	r0, #58	; 0x3a
 800fa68:	f002 fd36 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800fa6c:	203a      	movs	r0, #58	; 0x3a
 800fa6e:	f002 fd4f 	bl	8012510 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800fa72:	2200      	movs	r2, #0
 800fa74:	2105      	movs	r1, #5
 800fa76:	2044      	movs	r0, #68	; 0x44
 800fa78:	f002 fd2e 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800fa7c:	2044      	movs	r0, #68	; 0x44
 800fa7e:	f002 fd47 	bl	8012510 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800fa82:	2200      	movs	r2, #0
 800fa84:	2105      	movs	r1, #5
 800fa86:	2046      	movs	r0, #70	; 0x46
 800fa88:	f002 fd26 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800fa8c:	2046      	movs	r0, #70	; 0x46
 800fa8e:	f002 fd3f 	bl	8012510 <HAL_NVIC_EnableIRQ>

}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	40023800 	.word	0x40023800

0800faa0 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0

}
 800faa4:	bf00      	nop
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800faae:	b480      	push	{r7}
 800fab0:	af00      	add	r7, sp, #0
return 0;
 800fab2:	2300      	movs	r3, #0
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b083      	sub	sp, #12
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800fac8:	bf00      	nop
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800fad4:	b480      	push	{r7}
 800fad6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800fad8:	bf00      	nop
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
	...

0800fae4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800fae4:	b580      	push	{r7, lr}
 800fae6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 800fae8:	4a18      	ldr	r2, [pc, #96]	; (800fb4c <MX_FREERTOS_Init+0x68>)
 800faea:	2101      	movs	r1, #1
 800faec:	2010      	movs	r0, #16
 800faee:	f008 fb0b 	bl	8018108 <osMessageQueueNew>
 800faf2:	4603      	mov	r3, r0
 800faf4:	4a16      	ldr	r2, [pc, #88]	; (800fb50 <MX_FREERTOS_Init+0x6c>)
 800faf6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800faf8:	4a16      	ldr	r2, [pc, #88]	; (800fb54 <MX_FREERTOS_Init+0x70>)
 800fafa:	2100      	movs	r1, #0
 800fafc:	4816      	ldr	r0, [pc, #88]	; (800fb58 <MX_FREERTOS_Init+0x74>)
 800fafe:	f008 f809 	bl	8017b14 <osThreadNew>
 800fb02:	4603      	mov	r3, r0
 800fb04:	4a15      	ldr	r2, [pc, #84]	; (800fb5c <MX_FREERTOS_Init+0x78>)
 800fb06:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 800fb08:	4a15      	ldr	r2, [pc, #84]	; (800fb60 <MX_FREERTOS_Init+0x7c>)
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	4815      	ldr	r0, [pc, #84]	; (800fb64 <MX_FREERTOS_Init+0x80>)
 800fb0e:	f008 f801 	bl	8017b14 <osThreadNew>
 800fb12:	4603      	mov	r3, r0
 800fb14:	4a14      	ldr	r2, [pc, #80]	; (800fb68 <MX_FREERTOS_Init+0x84>)
 800fb16:	6013      	str	r3, [r2, #0]

  /* creation of fms */
  fmsHandle = osThreadNew(state_maschine_entry, NULL, &fms_attributes);
 800fb18:	4a14      	ldr	r2, [pc, #80]	; (800fb6c <MX_FREERTOS_Init+0x88>)
 800fb1a:	2100      	movs	r1, #0
 800fb1c:	4814      	ldr	r0, [pc, #80]	; (800fb70 <MX_FREERTOS_Init+0x8c>)
 800fb1e:	f007 fff9 	bl	8017b14 <osThreadNew>
 800fb22:	4603      	mov	r3, r0
 800fb24:	4a13      	ldr	r2, [pc, #76]	; (800fb74 <MX_FREERTOS_Init+0x90>)
 800fb26:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 800fb28:	4a13      	ldr	r2, [pc, #76]	; (800fb78 <MX_FREERTOS_Init+0x94>)
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	4813      	ldr	r0, [pc, #76]	; (800fb7c <MX_FREERTOS_Init+0x98>)
 800fb2e:	f007 fff1 	bl	8017b14 <osThreadNew>
 800fb32:	4603      	mov	r3, r0
 800fb34:	4a12      	ldr	r2, [pc, #72]	; (800fb80 <MX_FREERTOS_Init+0x9c>)
 800fb36:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800fb38:	4a12      	ldr	r2, [pc, #72]	; (800fb84 <MX_FREERTOS_Init+0xa0>)
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4812      	ldr	r0, [pc, #72]	; (800fb88 <MX_FREERTOS_Init+0xa4>)
 800fb3e:	f007 ffe9 	bl	8017b14 <osThreadNew>
 800fb42:	4603      	mov	r3, r0
 800fb44:	4a11      	ldr	r2, [pc, #68]	; (800fb8c <MX_FREERTOS_Init+0xa8>)
 800fb46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800fb48:	bf00      	nop
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	0801fdc0 	.word	0x0801fdc0
 800fb50:	200012c0 	.word	0x200012c0
 800fb54:	0801fd0c 	.word	0x0801fd0c
 800fb58:	0800fb91 	.word	0x0800fb91
 800fb5c:	20000fec 	.word	0x20000fec
 800fb60:	0801fd30 	.word	0x0801fd30
 800fb64:	080022d5 	.word	0x080022d5
 800fb68:	200012b0 	.word	0x200012b0
 800fb6c:	0801fd54 	.word	0x0801fd54
 800fb70:	0800f2e9 	.word	0x0800f2e9
 800fb74:	200012b4 	.word	0x200012b4
 800fb78:	0801fd78 	.word	0x0801fd78
 800fb7c:	0800ea91 	.word	0x0800ea91
 800fb80:	200012b8 	.word	0x200012b8
 800fb84:	0801fd9c 	.word	0x0801fd9c
 800fb88:	0800f231 	.word	0x0800f231
 800fb8c:	200012bc 	.word	0x200012bc

0800fb90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800fb98:	2001      	movs	r0, #1
 800fb9a:	f008 f84d 	bl	8017c38 <osDelay>
 800fb9e:	e7fb      	b.n	800fb98 <StartDefaultTask+0x8>

0800fba0 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fba6:	f107 0314 	add.w	r3, r7, #20
 800fbaa:	2200      	movs	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	605a      	str	r2, [r3, #4]
 800fbb0:	609a      	str	r2, [r3, #8]
 800fbb2:	60da      	str	r2, [r3, #12]
 800fbb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	613b      	str	r3, [r7, #16]
 800fbba:	4b58      	ldr	r3, [pc, #352]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbbe:	4a57      	ldr	r2, [pc, #348]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbc0:	f043 0304 	orr.w	r3, r3, #4
 800fbc4:	6313      	str	r3, [r2, #48]	; 0x30
 800fbc6:	4b55      	ldr	r3, [pc, #340]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbca:	f003 0304 	and.w	r3, r3, #4
 800fbce:	613b      	str	r3, [r7, #16]
 800fbd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60fb      	str	r3, [r7, #12]
 800fbd6:	4b51      	ldr	r3, [pc, #324]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbda:	4a50      	ldr	r2, [pc, #320]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe0:	6313      	str	r3, [r2, #48]	; 0x30
 800fbe2:	4b4e      	ldr	r3, [pc, #312]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbea:	60fb      	str	r3, [r7, #12]
 800fbec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbee:	2300      	movs	r3, #0
 800fbf0:	60bb      	str	r3, [r7, #8]
 800fbf2:	4b4a      	ldr	r3, [pc, #296]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf6:	4a49      	ldr	r2, [pc, #292]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fbf8:	f043 0301 	orr.w	r3, r3, #1
 800fbfc:	6313      	str	r3, [r2, #48]	; 0x30
 800fbfe:	4b47      	ldr	r3, [pc, #284]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc02:	f003 0301 	and.w	r3, r3, #1
 800fc06:	60bb      	str	r3, [r7, #8]
 800fc08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	607b      	str	r3, [r7, #4]
 800fc0e:	4b43      	ldr	r3, [pc, #268]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc12:	4a42      	ldr	r2, [pc, #264]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc14:	f043 0302 	orr.w	r3, r3, #2
 800fc18:	6313      	str	r3, [r2, #48]	; 0x30
 800fc1a:	4b40      	ldr	r3, [pc, #256]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc1e:	f003 0302 	and.w	r3, r3, #2
 800fc22:	607b      	str	r3, [r7, #4]
 800fc24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc26:	2300      	movs	r3, #0
 800fc28:	603b      	str	r3, [r7, #0]
 800fc2a:	4b3c      	ldr	r3, [pc, #240]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc2e:	4a3b      	ldr	r2, [pc, #236]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc30:	f043 0308 	orr.w	r3, r3, #8
 800fc34:	6313      	str	r3, [r2, #48]	; 0x30
 800fc36:	4b39      	ldr	r3, [pc, #228]	; (800fd1c <MX_GPIO_Init+0x17c>)
 800fc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc3a:	f003 0308 	and.w	r3, r3, #8
 800fc3e:	603b      	str	r3, [r7, #0]
 800fc40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800fc42:	2200      	movs	r2, #0
 800fc44:	f641 4102 	movw	r1, #7170	; 0x1c02
 800fc48:	4835      	ldr	r0, [pc, #212]	; (800fd20 <MX_GPIO_Init+0x180>)
 800fc4a:	f003 f9af 	bl	8012fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 800fc4e:	2201      	movs	r2, #1
 800fc50:	2180      	movs	r1, #128	; 0x80
 800fc52:	4833      	ldr	r0, [pc, #204]	; (800fd20 <MX_GPIO_Init+0x180>)
 800fc54:	f003 f9aa 	bl	8012fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800fc58:	2305      	movs	r3, #5
 800fc5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fc5c:	2303      	movs	r3, #3
 800fc5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc60:	2300      	movs	r3, #0
 800fc62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fc64:	f107 0314 	add.w	r3, r7, #20
 800fc68:	4619      	mov	r1, r3
 800fc6a:	482e      	ldr	r0, [pc, #184]	; (800fd24 <MX_GPIO_Init+0x184>)
 800fc6c:	f002 ffea 	bl	8012c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 800fc70:	230a      	movs	r3, #10
 800fc72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800fc74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800fc78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fc7e:	f107 0314 	add.w	r3, r7, #20
 800fc82:	4619      	mov	r1, r3
 800fc84:	4827      	ldr	r0, [pc, #156]	; (800fd24 <MX_GPIO_Init+0x184>)
 800fc86:	f002 ffdd 	bl	8012c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 800fc8a:	f641 4302 	movw	r3, #7170	; 0x1c02
 800fc8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fc90:	2301      	movs	r3, #1
 800fc92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc94:	2300      	movs	r3, #0
 800fc96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fc9c:	f107 0314 	add.w	r3, r7, #20
 800fca0:	4619      	mov	r1, r3
 800fca2:	481f      	ldr	r0, [pc, #124]	; (800fd20 <MX_GPIO_Init+0x180>)
 800fca4:	f002 ffce 	bl	8012c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800fca8:	2318      	movs	r3, #24
 800fcaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcac:	2300      	movs	r3, #0
 800fcae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fcb4:	f107 0314 	add.w	r3, r7, #20
 800fcb8:	4619      	mov	r1, r3
 800fcba:	481b      	ldr	r0, [pc, #108]	; (800fd28 <MX_GPIO_Init+0x188>)
 800fcbc:	f002 ffc2 	bl	8012c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 800fcc0:	2310      	movs	r3, #16
 800fcc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 800fccc:	f107 0314 	add.w	r3, r7, #20
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4813      	ldr	r0, [pc, #76]	; (800fd20 <MX_GPIO_Init+0x180>)
 800fcd4:	f002 ffb6 	bl	8012c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 800fcd8:	2380      	movs	r3, #128	; 0x80
 800fcda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fce0:	2302      	movs	r3, #2
 800fce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fce4:	2300      	movs	r3, #0
 800fce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 800fce8:	f107 0314 	add.w	r3, r7, #20
 800fcec:	4619      	mov	r1, r3
 800fcee:	480c      	ldr	r0, [pc, #48]	; (800fd20 <MX_GPIO_Init+0x180>)
 800fcf0:	f002 ffa8 	bl	8012c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2105      	movs	r1, #5
 800fcf8:	2007      	movs	r0, #7
 800fcfa:	f002 fbed 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800fcfe:	2007      	movs	r0, #7
 800fd00:	f002 fc06 	bl	8012510 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800fd04:	2200      	movs	r2, #0
 800fd06:	2105      	movs	r1, #5
 800fd08:	2009      	movs	r0, #9
 800fd0a:	f002 fbe5 	bl	80124d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800fd0e:	2009      	movs	r0, #9
 800fd10:	f002 fbfe 	bl	8012510 <HAL_NVIC_EnableIRQ>

}
 800fd14:	bf00      	nop
 800fd16:	3728      	adds	r7, #40	; 0x28
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	40023800 	.word	0x40023800
 800fd20:	40020400 	.word	0x40020400
 800fd24:	40020800 	.word	0x40020800
 800fd28:	40020c00 	.word	0x40020c00

0800fd2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800fd30:	4b12      	ldr	r3, [pc, #72]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd32:	4a13      	ldr	r2, [pc, #76]	; (800fd80 <MX_I2C1_Init+0x54>)
 800fd34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800fd36:	4b11      	ldr	r3, [pc, #68]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd38:	4a12      	ldr	r2, [pc, #72]	; (800fd84 <MX_I2C1_Init+0x58>)
 800fd3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800fd3c:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800fd42:	4b0e      	ldr	r3, [pc, #56]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800fd48:	4b0c      	ldr	r3, [pc, #48]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fd4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800fd50:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800fd56:	4b09      	ldr	r3, [pc, #36]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800fd5c:	4b07      	ldr	r3, [pc, #28]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd5e:	2200      	movs	r2, #0
 800fd60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800fd62:	4b06      	ldr	r3, [pc, #24]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800fd68:	4804      	ldr	r0, [pc, #16]	; (800fd7c <MX_I2C1_Init+0x50>)
 800fd6a:	f003 f951 	bl	8013010 <HAL_I2C_Init>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800fd74:	f000 f900 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800fd78:	bf00      	nop
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	200012c4 	.word	0x200012c4
 800fd80:	40005400 	.word	0x40005400
 800fd84:	000186a0 	.word	0x000186a0

0800fd88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08a      	sub	sp, #40	; 0x28
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fd90:	f107 0314 	add.w	r3, r7, #20
 800fd94:	2200      	movs	r2, #0
 800fd96:	601a      	str	r2, [r3, #0]
 800fd98:	605a      	str	r2, [r3, #4]
 800fd9a:	609a      	str	r2, [r3, #8]
 800fd9c:	60da      	str	r2, [r3, #12]
 800fd9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a19      	ldr	r2, [pc, #100]	; (800fe0c <HAL_I2C_MspInit+0x84>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d12c      	bne.n	800fe04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fdaa:	2300      	movs	r3, #0
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	4b18      	ldr	r3, [pc, #96]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb2:	4a17      	ldr	r2, [pc, #92]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdb4:	f043 0302 	orr.w	r3, r3, #2
 800fdb8:	6313      	str	r3, [r2, #48]	; 0x30
 800fdba:	4b15      	ldr	r3, [pc, #84]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	f003 0302 	and.w	r3, r3, #2
 800fdc2:	613b      	str	r3, [r7, #16]
 800fdc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 800fdc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fdca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fdcc:	2312      	movs	r3, #18
 800fdce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800fdd8:	2304      	movs	r3, #4
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fddc:	f107 0314 	add.w	r3, r7, #20
 800fde0:	4619      	mov	r1, r3
 800fde2:	480c      	ldr	r0, [pc, #48]	; (800fe14 <HAL_I2C_MspInit+0x8c>)
 800fde4:	f002 ff2e 	bl	8012c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800fde8:	2300      	movs	r3, #0
 800fdea:	60fb      	str	r3, [r7, #12]
 800fdec:	4b08      	ldr	r3, [pc, #32]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf0:	4a07      	ldr	r2, [pc, #28]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fdf6:	6413      	str	r3, [r2, #64]	; 0x40
 800fdf8:	4b05      	ldr	r3, [pc, #20]	; (800fe10 <HAL_I2C_MspInit+0x88>)
 800fdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fe00:	60fb      	str	r3, [r7, #12]
 800fe02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800fe04:	bf00      	nop
 800fe06:	3728      	adds	r7, #40	; 0x28
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	40005400 	.word	0x40005400
 800fe10:	40023800 	.word	0x40023800
 800fe14:	40020400 	.word	0x40020400

0800fe18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fe1c:	f000 ffc8 	bl	8010db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fe20:	f000 f82c 	bl	800fe7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fe24:	f7ff febc 	bl	800fba0 <MX_GPIO_Init>
  MX_DMA_Init();
 800fe28:	f7ff fe02 	bl	800fa30 <MX_DMA_Init>
  MX_ADC1_Init();
 800fe2c:	f7ff fa66 	bl	800f2fc <MX_ADC1_Init>
  MX_CAN1_Init();
 800fe30:	f7ff fc8c 	bl	800f74c <MX_CAN1_Init>
  MX_CAN2_Init();
 800fe34:	f7ff fcc0 	bl	800f7b8 <MX_CAN2_Init>
  MX_CRC_Init();
 800fe38:	f7ff fdc4 	bl	800f9c4 <MX_CRC_Init>
  MX_RNG_Init();
 800fe3c:	f000 f8a2 	bl	800ff84 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800fe40:	f000 fe7e 	bl	8010b40 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800fe44:	f000 fc0c 	bl	8010660 <MX_TIM4_Init>
  MX_ADC2_Init();
 800fe48:	f7ff fad4 	bl	800f3f4 <MX_ADC2_Init>
  MX_I2C1_Init();
 800fe4c:	f7ff ff6e 	bl	800fd2c <MX_I2C1_Init>
  MX_SPI2_Init();
 800fe50:	f000 f8ce 	bl	800fff0 <MX_SPI2_Init>
  MX_TIM5_Init();
 800fe54:	f000 fc90 	bl	8010778 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800fe58:	f000 fe48 	bl	8010aec <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800fe5c:	f000 fd1a 	bl	8010894 <MX_TIM14_Init>
  MX_TIM2_Init();
 800fe60:	f000 fb62 	bl	8010528 <MX_TIM2_Init>
  MX_TIM9_Init();
 800fe64:	f000 fcdc 	bl	8010820 <MX_TIM9_Init>
  MX_TIM3_Init();
 800fe68:	f000 fbac 	bl	80105c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800fe6c:	f007 fe08 	bl	8017a80 <osKernelInitialize>
  MX_FREERTOS_Init();
 800fe70:	f7ff fe38 	bl	800fae4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800fe74:	f007 fe28 	bl	8017ac8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800fe78:	e7fe      	b.n	800fe78 <main+0x60>
	...

0800fe7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b094      	sub	sp, #80	; 0x50
 800fe80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800fe82:	f107 0320 	add.w	r3, r7, #32
 800fe86:	2230      	movs	r2, #48	; 0x30
 800fe88:	2100      	movs	r1, #0
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f00c fd08 	bl	801c8a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800fe90:	f107 030c 	add.w	r3, r7, #12
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	605a      	str	r2, [r3, #4]
 800fe9a:	609a      	str	r2, [r3, #8]
 800fe9c:	60da      	str	r2, [r3, #12]
 800fe9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800fea0:	2300      	movs	r3, #0
 800fea2:	60bb      	str	r3, [r7, #8]
 800fea4:	4b28      	ldr	r3, [pc, #160]	; (800ff48 <SystemClock_Config+0xcc>)
 800fea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea8:	4a27      	ldr	r2, [pc, #156]	; (800ff48 <SystemClock_Config+0xcc>)
 800feaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800feae:	6413      	str	r3, [r2, #64]	; 0x40
 800feb0:	4b25      	ldr	r3, [pc, #148]	; (800ff48 <SystemClock_Config+0xcc>)
 800feb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800feb8:	60bb      	str	r3, [r7, #8]
 800feba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800febc:	2300      	movs	r3, #0
 800febe:	607b      	str	r3, [r7, #4]
 800fec0:	4b22      	ldr	r3, [pc, #136]	; (800ff4c <SystemClock_Config+0xd0>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a21      	ldr	r2, [pc, #132]	; (800ff4c <SystemClock_Config+0xd0>)
 800fec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	4b1f      	ldr	r3, [pc, #124]	; (800ff4c <SystemClock_Config+0xd0>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fed4:	607b      	str	r3, [r7, #4]
 800fed6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800fed8:	2301      	movs	r3, #1
 800feda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800fedc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800fee2:	2302      	movs	r3, #2
 800fee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800fee6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800feea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800feec:	2308      	movs	r3, #8
 800feee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800fef0:	23a8      	movs	r3, #168	; 0xa8
 800fef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800fef4:	2302      	movs	r3, #2
 800fef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800fef8:	2307      	movs	r3, #7
 800fefa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800fefc:	f107 0320 	add.w	r3, r7, #32
 800ff00:	4618      	mov	r0, r3
 800ff02:	f003 f9c9 	bl	8013298 <HAL_RCC_OscConfig>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800ff0c:	f000 f834 	bl	800ff78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ff10:	230f      	movs	r3, #15
 800ff12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ff14:	2302      	movs	r3, #2
 800ff16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ff1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ff20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ff22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ff28:	f107 030c 	add.w	r3, r7, #12
 800ff2c:	2105      	movs	r1, #5
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f003 fc2a 	bl	8013788 <HAL_RCC_ClockConfig>
 800ff34:	4603      	mov	r3, r0
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d001      	beq.n	800ff3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800ff3a:	f000 f81d 	bl	800ff78 <Error_Handler>
  }
}
 800ff3e:	bf00      	nop
 800ff40:	3750      	adds	r7, #80	; 0x50
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	40023800 	.word	0x40023800
 800ff4c:	40007000 	.word	0x40007000

0800ff50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a05      	ldr	r2, [pc, #20]	; (800ff74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d101      	bne.n	800ff66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ff62:	f000 ff47 	bl	8010df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f006 f881 	bl	801606e <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 800ff6c:	bf00      	nop
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	40010000 	.word	0x40010000

0800ff78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800ff7c:	b672      	cpsid	i
}
 800ff7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ff80:	e7fe      	b.n	800ff80 <Error_Handler+0x8>
	...

0800ff84 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800ff88:	4b06      	ldr	r3, [pc, #24]	; (800ffa4 <MX_RNG_Init+0x20>)
 800ff8a:	4a07      	ldr	r2, [pc, #28]	; (800ffa8 <MX_RNG_Init+0x24>)
 800ff8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800ff8e:	4805      	ldr	r0, [pc, #20]	; (800ffa4 <MX_RNG_Init+0x20>)
 800ff90:	f003 fe4a 	bl	8013c28 <HAL_RNG_Init>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800ff9a:	f7ff ffed 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800ff9e:	bf00      	nop
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20001318 	.word	0x20001318
 800ffa8:	50060800 	.word	0x50060800

0800ffac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a0b      	ldr	r2, [pc, #44]	; (800ffe8 <HAL_RNG_MspInit+0x3c>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d10d      	bne.n	800ffda <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	60fb      	str	r3, [r7, #12]
 800ffc2:	4b0a      	ldr	r3, [pc, #40]	; (800ffec <HAL_RNG_MspInit+0x40>)
 800ffc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffc6:	4a09      	ldr	r2, [pc, #36]	; (800ffec <HAL_RNG_MspInit+0x40>)
 800ffc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffcc:	6353      	str	r3, [r2, #52]	; 0x34
 800ffce:	4b07      	ldr	r3, [pc, #28]	; (800ffec <HAL_RNG_MspInit+0x40>)
 800ffd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffd6:	60fb      	str	r3, [r7, #12]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800ffda:	bf00      	nop
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	50060800 	.word	0x50060800
 800ffec:	40023800 	.word	0x40023800

0800fff0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800fff4:	4b17      	ldr	r3, [pc, #92]	; (8010054 <MX_SPI2_Init+0x64>)
 800fff6:	4a18      	ldr	r2, [pc, #96]	; (8010058 <MX_SPI2_Init+0x68>)
 800fff8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800fffa:	4b16      	ldr	r3, [pc, #88]	; (8010054 <MX_SPI2_Init+0x64>)
 800fffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010000:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010002:	4b14      	ldr	r3, [pc, #80]	; (8010054 <MX_SPI2_Init+0x64>)
 8010004:	2200      	movs	r2, #0
 8010006:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010008:	4b12      	ldr	r3, [pc, #72]	; (8010054 <MX_SPI2_Init+0x64>)
 801000a:	2200      	movs	r2, #0
 801000c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 801000e:	4b11      	ldr	r3, [pc, #68]	; (8010054 <MX_SPI2_Init+0x64>)
 8010010:	2200      	movs	r2, #0
 8010012:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010014:	4b0f      	ldr	r3, [pc, #60]	; (8010054 <MX_SPI2_Init+0x64>)
 8010016:	2200      	movs	r2, #0
 8010018:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801001a:	4b0e      	ldr	r3, [pc, #56]	; (8010054 <MX_SPI2_Init+0x64>)
 801001c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010020:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010022:	4b0c      	ldr	r3, [pc, #48]	; (8010054 <MX_SPI2_Init+0x64>)
 8010024:	2200      	movs	r2, #0
 8010026:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010028:	4b0a      	ldr	r3, [pc, #40]	; (8010054 <MX_SPI2_Init+0x64>)
 801002a:	2200      	movs	r2, #0
 801002c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801002e:	4b09      	ldr	r3, [pc, #36]	; (8010054 <MX_SPI2_Init+0x64>)
 8010030:	2200      	movs	r2, #0
 8010032:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010034:	4b07      	ldr	r3, [pc, #28]	; (8010054 <MX_SPI2_Init+0x64>)
 8010036:	2200      	movs	r2, #0
 8010038:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 801003a:	4b06      	ldr	r3, [pc, #24]	; (8010054 <MX_SPI2_Init+0x64>)
 801003c:	220a      	movs	r2, #10
 801003e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010040:	4804      	ldr	r0, [pc, #16]	; (8010054 <MX_SPI2_Init+0x64>)
 8010042:	f003 fe71 	bl	8013d28 <HAL_SPI_Init>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 801004c:	f7ff ff94 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8010050:	bf00      	nop
 8010052:	bd80      	pop	{r7, pc}
 8010054:	20001328 	.word	0x20001328
 8010058:	40003800 	.word	0x40003800

0801005c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b08a      	sub	sp, #40	; 0x28
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010064:	f107 0314 	add.w	r3, r7, #20
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]
 801006c:	605a      	str	r2, [r3, #4]
 801006e:	609a      	str	r2, [r3, #8]
 8010070:	60da      	str	r2, [r3, #12]
 8010072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a19      	ldr	r2, [pc, #100]	; (80100e0 <HAL_SPI_MspInit+0x84>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d12c      	bne.n	80100d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 801007e:	2300      	movs	r3, #0
 8010080:	613b      	str	r3, [r7, #16]
 8010082:	4b18      	ldr	r3, [pc, #96]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 8010084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010086:	4a17      	ldr	r2, [pc, #92]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 8010088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801008c:	6413      	str	r3, [r2, #64]	; 0x40
 801008e:	4b15      	ldr	r3, [pc, #84]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 8010090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010096:	613b      	str	r3, [r7, #16]
 8010098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801009a:	2300      	movs	r3, #0
 801009c:	60fb      	str	r3, [r7, #12]
 801009e:	4b11      	ldr	r3, [pc, #68]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 80100a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100a2:	4a10      	ldr	r2, [pc, #64]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 80100a4:	f043 0302 	orr.w	r3, r3, #2
 80100a8:	6313      	str	r3, [r2, #48]	; 0x30
 80100aa:	4b0e      	ldr	r3, [pc, #56]	; (80100e4 <HAL_SPI_MspInit+0x88>)
 80100ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ae:	f003 0302 	and.w	r3, r3, #2
 80100b2:	60fb      	str	r3, [r7, #12]
 80100b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80100b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80100ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100bc:	2302      	movs	r3, #2
 80100be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100c0:	2300      	movs	r3, #0
 80100c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100c4:	2303      	movs	r3, #3
 80100c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80100c8:	2305      	movs	r3, #5
 80100ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80100cc:	f107 0314 	add.w	r3, r7, #20
 80100d0:	4619      	mov	r1, r3
 80100d2:	4805      	ldr	r0, [pc, #20]	; (80100e8 <HAL_SPI_MspInit+0x8c>)
 80100d4:	f002 fdb6 	bl	8012c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80100d8:	bf00      	nop
 80100da:	3728      	adds	r7, #40	; 0x28
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	40003800 	.word	0x40003800
 80100e4:	40023800 	.word	0x40023800
 80100e8:	40020400 	.word	0x40020400

080100ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80100f2:	2300      	movs	r3, #0
 80100f4:	607b      	str	r3, [r7, #4]
 80100f6:	4b12      	ldr	r3, [pc, #72]	; (8010140 <HAL_MspInit+0x54>)
 80100f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100fa:	4a11      	ldr	r2, [pc, #68]	; (8010140 <HAL_MspInit+0x54>)
 80100fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010100:	6453      	str	r3, [r2, #68]	; 0x44
 8010102:	4b0f      	ldr	r3, [pc, #60]	; (8010140 <HAL_MspInit+0x54>)
 8010104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801010a:	607b      	str	r3, [r7, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801010e:	2300      	movs	r3, #0
 8010110:	603b      	str	r3, [r7, #0]
 8010112:	4b0b      	ldr	r3, [pc, #44]	; (8010140 <HAL_MspInit+0x54>)
 8010114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010116:	4a0a      	ldr	r2, [pc, #40]	; (8010140 <HAL_MspInit+0x54>)
 8010118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801011c:	6413      	str	r3, [r2, #64]	; 0x40
 801011e:	4b08      	ldr	r3, [pc, #32]	; (8010140 <HAL_MspInit+0x54>)
 8010120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010126:	603b      	str	r3, [r7, #0]
 8010128:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801012a:	2200      	movs	r2, #0
 801012c:	210f      	movs	r1, #15
 801012e:	f06f 0001 	mvn.w	r0, #1
 8010132:	f002 f9d1 	bl	80124d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop
 8010140:	40023800 	.word	0x40023800

08010144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b08c      	sub	sp, #48	; 0x30
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 801014c:	2300      	movs	r3, #0
 801014e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8010150:	2300      	movs	r3, #0
 8010152:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8010154:	2300      	movs	r3, #0
 8010156:	60bb      	str	r3, [r7, #8]
 8010158:	4b2f      	ldr	r3, [pc, #188]	; (8010218 <HAL_InitTick+0xd4>)
 801015a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801015c:	4a2e      	ldr	r2, [pc, #184]	; (8010218 <HAL_InitTick+0xd4>)
 801015e:	f043 0301 	orr.w	r3, r3, #1
 8010162:	6453      	str	r3, [r2, #68]	; 0x44
 8010164:	4b2c      	ldr	r3, [pc, #176]	; (8010218 <HAL_InitTick+0xd4>)
 8010166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	60bb      	str	r3, [r7, #8]
 801016e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010170:	f107 020c 	add.w	r2, r7, #12
 8010174:	f107 0310 	add.w	r3, r7, #16
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f003 fd22 	bl	8013bc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8010180:	f003 fd0c 	bl	8013b9c <HAL_RCC_GetPCLK2Freq>
 8010184:	4603      	mov	r3, r0
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801018a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018c:	4a23      	ldr	r2, [pc, #140]	; (801021c <HAL_InitTick+0xd8>)
 801018e:	fba2 2303 	umull	r2, r3, r2, r3
 8010192:	0c9b      	lsrs	r3, r3, #18
 8010194:	3b01      	subs	r3, #1
 8010196:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8010198:	4b21      	ldr	r3, [pc, #132]	; (8010220 <HAL_InitTick+0xdc>)
 801019a:	4a22      	ldr	r2, [pc, #136]	; (8010224 <HAL_InitTick+0xe0>)
 801019c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 801019e:	4b20      	ldr	r3, [pc, #128]	; (8010220 <HAL_InitTick+0xdc>)
 80101a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80101a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80101a6:	4a1e      	ldr	r2, [pc, #120]	; (8010220 <HAL_InitTick+0xdc>)
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80101ac:	4b1c      	ldr	r3, [pc, #112]	; (8010220 <HAL_InitTick+0xdc>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80101b2:	4b1b      	ldr	r3, [pc, #108]	; (8010220 <HAL_InitTick+0xdc>)
 80101b4:	2200      	movs	r2, #0
 80101b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80101b8:	4b19      	ldr	r3, [pc, #100]	; (8010220 <HAL_InitTick+0xdc>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80101be:	4818      	ldr	r0, [pc, #96]	; (8010220 <HAL_InitTick+0xdc>)
 80101c0:	f004 fb5a 	bl	8014878 <HAL_TIM_Base_Init>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80101ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d11b      	bne.n	801020a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80101d2:	4813      	ldr	r0, [pc, #76]	; (8010220 <HAL_InitTick+0xdc>)
 80101d4:	f004 fba0 	bl	8014918 <HAL_TIM_Base_Start_IT>
 80101d8:	4603      	mov	r3, r0
 80101da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80101de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d111      	bne.n	801020a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80101e6:	2019      	movs	r0, #25
 80101e8:	f002 f992 	bl	8012510 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b0f      	cmp	r3, #15
 80101f0:	d808      	bhi.n	8010204 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80101f2:	2200      	movs	r2, #0
 80101f4:	6879      	ldr	r1, [r7, #4]
 80101f6:	2019      	movs	r0, #25
 80101f8:	f002 f96e 	bl	80124d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80101fc:	4a0a      	ldr	r2, [pc, #40]	; (8010228 <HAL_InitTick+0xe4>)
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6013      	str	r3, [r2, #0]
 8010202:	e002      	b.n	801020a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8010204:	2301      	movs	r3, #1
 8010206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 801020a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801020e:	4618      	mov	r0, r3
 8010210:	3730      	adds	r7, #48	; 0x30
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	40023800 	.word	0x40023800
 801021c:	431bde83 	.word	0x431bde83
 8010220:	20001380 	.word	0x20001380
 8010224:	40010000 	.word	0x40010000
 8010228:	20000024 	.word	0x20000024

0801022c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801022c:	b480      	push	{r7}
 801022e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010230:	e7fe      	b.n	8010230 <NMI_Handler+0x4>

08010232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010232:	b480      	push	{r7}
 8010234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010236:	e7fe      	b.n	8010236 <HardFault_Handler+0x4>

08010238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010238:	b480      	push	{r7}
 801023a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801023c:	e7fe      	b.n	801023c <MemManage_Handler+0x4>

0801023e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801023e:	b480      	push	{r7}
 8010240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010242:	e7fe      	b.n	8010242 <BusFault_Handler+0x4>

08010244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010244:	b480      	push	{r7}
 8010246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010248:	e7fe      	b.n	8010248 <UsageFault_Handler+0x4>

0801024a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801024a:	b480      	push	{r7}
 801024c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801024e:	bf00      	nop
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 801025c:	2002      	movs	r0, #2
 801025e:	f002 febf 	bl	8012fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8010262:	bf00      	nop
 8010264:	bd80      	pop	{r7, pc}

08010266 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 801026a:	2008      	movs	r0, #8
 801026c:	f002 feb8 	bl	8012fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8010270:	bf00      	nop
 8010272:	bd80      	pop	{r7, pc}

08010274 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8010278:	4802      	ldr	r0, [pc, #8]	; (8010284 <CAN1_TX_IRQHandler+0x10>)
 801027a:	f001 fe41 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 801027e:	bf00      	nop
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20000f90 	.word	0x20000f90

08010288 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801028c:	4802      	ldr	r0, [pc, #8]	; (8010298 <CAN1_RX0_IRQHandler+0x10>)
 801028e:	f001 fe37 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8010292:	bf00      	nop
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	20000f90 	.word	0x20000f90

0801029c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80102a0:	4802      	ldr	r0, [pc, #8]	; (80102ac <CAN1_RX1_IRQHandler+0x10>)
 80102a2:	f001 fe2d 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80102a6:	bf00      	nop
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20000f90 	.word	0x20000f90

080102b0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80102b4:	4802      	ldr	r0, [pc, #8]	; (80102c0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80102b6:	f004 fc9e 	bl	8014bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80102ba:	bf00      	nop
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	200014ec 	.word	0x200014ec

080102c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80102c8:	4802      	ldr	r0, [pc, #8]	; (80102d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80102ca:	f004 fc94 	bl	8014bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80102ce:	bf00      	nop
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	20001380 	.word	0x20001380

080102d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80102dc:	4802      	ldr	r0, [pc, #8]	; (80102e8 <TIM3_IRQHandler+0x10>)
 80102de:	f004 fc8a 	bl	8014bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80102e2:	bf00      	nop
 80102e4:	bd80      	pop	{r7, pc}
 80102e6:	bf00      	nop
 80102e8:	20001414 	.word	0x20001414

080102ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80102f0:	4802      	ldr	r0, [pc, #8]	; (80102fc <DMA2_Stream0_IRQHandler+0x10>)
 80102f2:	f002 fa3d 	bl	8012770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80102f6:	bf00      	nop
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	20000ed0 	.word	0x20000ed0

08010300 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8010304:	4802      	ldr	r0, [pc, #8]	; (8010310 <DMA2_Stream2_IRQHandler+0x10>)
 8010306:	f002 fa33 	bl	8012770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 801030a:	bf00      	nop
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	20000f30 	.word	0x20000f30

08010314 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8010318:	4802      	ldr	r0, [pc, #8]	; (8010324 <CAN2_TX_IRQHandler+0x10>)
 801031a:	f001 fdf1 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 801031e:	bf00      	nop
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	20000fb8 	.word	0x20000fb8

08010328 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801032c:	4802      	ldr	r0, [pc, #8]	; (8010338 <CAN2_RX0_IRQHandler+0x10>)
 801032e:	f001 fde7 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8010332:	bf00      	nop
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	20000fb8 	.word	0x20000fb8

0801033c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8010340:	4802      	ldr	r0, [pc, #8]	; (801034c <CAN2_RX1_IRQHandler+0x10>)
 8010342:	f001 fddd 	bl	8011f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8010346:	bf00      	nop
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	20000fb8 	.word	0x20000fb8

08010350 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8010354:	4802      	ldr	r0, [pc, #8]	; (8010360 <DMA2_Stream5_IRQHandler+0x10>)
 8010356:	f002 fa0b 	bl	8012770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 801035a:	bf00      	nop
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	20001664 	.word	0x20001664

08010364 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8010368:	4802      	ldr	r0, [pc, #8]	; (8010374 <DMA2_Stream7_IRQHandler+0x10>)
 801036a:	f002 fa01 	bl	8012770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 801036e:	bf00      	nop
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	20001604 	.word	0x20001604

08010378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010378:	b480      	push	{r7}
 801037a:	af00      	add	r7, sp, #0
  return 1;
 801037c:	2301      	movs	r3, #1
}
 801037e:	4618      	mov	r0, r3
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <_kill>:

int _kill(int pid, int sig)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010392:	f00c f943 	bl	801c61c <__errno>
 8010396:	4603      	mov	r3, r0
 8010398:	2216      	movs	r2, #22
 801039a:	601a      	str	r2, [r3, #0]
  return -1;
 801039c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <_exit>:

void _exit (int status)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80103b0:	f04f 31ff 	mov.w	r1, #4294967295
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff ffe7 	bl	8010388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80103ba:	e7fe      	b.n	80103ba <_exit+0x12>

080103bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80103c8:	2300      	movs	r3, #0
 80103ca:	617b      	str	r3, [r7, #20]
 80103cc:	e00a      	b.n	80103e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80103ce:	f3af 8000 	nop.w
 80103d2:	4601      	mov	r1, r0
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	1c5a      	adds	r2, r3, #1
 80103d8:	60ba      	str	r2, [r7, #8]
 80103da:	b2ca      	uxtb	r2, r1
 80103dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	3301      	adds	r3, #1
 80103e2:	617b      	str	r3, [r7, #20]
 80103e4:	697a      	ldr	r2, [r7, #20]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	dbf0      	blt.n	80103ce <_read+0x12>
  }

  return len;
 80103ec:	687b      	ldr	r3, [r7, #4]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b086      	sub	sp, #24
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	60f8      	str	r0, [r7, #12]
 80103fe:	60b9      	str	r1, [r7, #8]
 8010400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010402:	2300      	movs	r3, #0
 8010404:	617b      	str	r3, [r7, #20]
 8010406:	e009      	b.n	801041c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	1c5a      	adds	r2, r3, #1
 801040c:	60ba      	str	r2, [r7, #8]
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	3301      	adds	r3, #1
 801041a:	617b      	str	r3, [r7, #20]
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	429a      	cmp	r2, r3
 8010422:	dbf1      	blt.n	8010408 <_write+0x12>
  }
  return len;
 8010424:	687b      	ldr	r3, [r7, #4]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3718      	adds	r7, #24
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <_close>:

int _close(int file)
{
 801042e:	b480      	push	{r7}
 8010430:	b083      	sub	sp, #12
 8010432:	af00      	add	r7, sp, #0
 8010434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010436:	f04f 33ff 	mov.w	r3, #4294967295
}
 801043a:	4618      	mov	r0, r3
 801043c:	370c      	adds	r7, #12
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr

08010446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010446:	b480      	push	{r7}
 8010448:	b083      	sub	sp, #12
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010456:	605a      	str	r2, [r3, #4]
  return 0;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <_isatty>:

int _isatty(int file)
{
 8010466:	b480      	push	{r7}
 8010468:	b083      	sub	sp, #12
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801046e:	2301      	movs	r3, #1
}
 8010470:	4618      	mov	r0, r3
 8010472:	370c      	adds	r7, #12
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3714      	adds	r7, #20
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr
	...

08010498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b086      	sub	sp, #24
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80104a0:	4a14      	ldr	r2, [pc, #80]	; (80104f4 <_sbrk+0x5c>)
 80104a2:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <_sbrk+0x60>)
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80104ac:	4b13      	ldr	r3, [pc, #76]	; (80104fc <_sbrk+0x64>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d102      	bne.n	80104ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80104b4:	4b11      	ldr	r3, [pc, #68]	; (80104fc <_sbrk+0x64>)
 80104b6:	4a12      	ldr	r2, [pc, #72]	; (8010500 <_sbrk+0x68>)
 80104b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <_sbrk+0x64>)
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4413      	add	r3, r2
 80104c2:	693a      	ldr	r2, [r7, #16]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d207      	bcs.n	80104d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80104c8:	f00c f8a8 	bl	801c61c <__errno>
 80104cc:	4603      	mov	r3, r0
 80104ce:	220c      	movs	r2, #12
 80104d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80104d2:	f04f 33ff 	mov.w	r3, #4294967295
 80104d6:	e009      	b.n	80104ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80104d8:	4b08      	ldr	r3, [pc, #32]	; (80104fc <_sbrk+0x64>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80104de:	4b07      	ldr	r3, [pc, #28]	; (80104fc <_sbrk+0x64>)
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4413      	add	r3, r2
 80104e6:	4a05      	ldr	r2, [pc, #20]	; (80104fc <_sbrk+0x64>)
 80104e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80104ea:	68fb      	ldr	r3, [r7, #12]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3718      	adds	r7, #24
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	20020000 	.word	0x20020000
 80104f8:	00000800 	.word	0x00000800
 80104fc:	200013c8 	.word	0x200013c8
 8010500:	2000a698 	.word	0x2000a698

08010504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010504:	b480      	push	{r7}
 8010506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010508:	4b06      	ldr	r3, [pc, #24]	; (8010524 <SystemInit+0x20>)
 801050a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801050e:	4a05      	ldr	r2, [pc, #20]	; (8010524 <SystemInit+0x20>)
 8010510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010518:	bf00      	nop
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr
 8010522:	bf00      	nop
 8010524:	e000ed00 	.word	0xe000ed00

08010528 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b086      	sub	sp, #24
 801052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801052e:	f107 0308 	add.w	r3, r7, #8
 8010532:	2200      	movs	r2, #0
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	605a      	str	r2, [r3, #4]
 8010538:	609a      	str	r2, [r3, #8]
 801053a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801053c:	463b      	mov	r3, r7
 801053e:	2200      	movs	r2, #0
 8010540:	601a      	str	r2, [r3, #0]
 8010542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8010544:	4b1e      	ldr	r3, [pc, #120]	; (80105c0 <MX_TIM2_Init+0x98>)
 8010546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801054a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 801054c:	4b1c      	ldr	r3, [pc, #112]	; (80105c0 <MX_TIM2_Init+0x98>)
 801054e:	f240 3247 	movw	r2, #839	; 0x347
 8010552:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010554:	4b1a      	ldr	r3, [pc, #104]	; (80105c0 <MX_TIM2_Init+0x98>)
 8010556:	2200      	movs	r2, #0
 8010558:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 801055a:	4b19      	ldr	r3, [pc, #100]	; (80105c0 <MX_TIM2_Init+0x98>)
 801055c:	f04f 32ff 	mov.w	r2, #4294967295
 8010560:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010562:	4b17      	ldr	r3, [pc, #92]	; (80105c0 <MX_TIM2_Init+0x98>)
 8010564:	2200      	movs	r2, #0
 8010566:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010568:	4b15      	ldr	r3, [pc, #84]	; (80105c0 <MX_TIM2_Init+0x98>)
 801056a:	2200      	movs	r2, #0
 801056c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801056e:	4814      	ldr	r0, [pc, #80]	; (80105c0 <MX_TIM2_Init+0x98>)
 8010570:	f004 f982 	bl	8014878 <HAL_TIM_Base_Init>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 801057a:	f7ff fcfd 	bl	800ff78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801057e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010582:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8010584:	f107 0308 	add.w	r3, r7, #8
 8010588:	4619      	mov	r1, r3
 801058a:	480d      	ldr	r0, [pc, #52]	; (80105c0 <MX_TIM2_Init+0x98>)
 801058c:	f004 fcfe 	bl	8014f8c <HAL_TIM_ConfigClockSource>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d001      	beq.n	801059a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8010596:	f7ff fcef 	bl	800ff78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801059a:	2300      	movs	r3, #0
 801059c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801059e:	2300      	movs	r3, #0
 80105a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80105a2:	463b      	mov	r3, r7
 80105a4:	4619      	mov	r1, r3
 80105a6:	4806      	ldr	r0, [pc, #24]	; (80105c0 <MX_TIM2_Init+0x98>)
 80105a8:	f005 f8ca 	bl	8015740 <HAL_TIMEx_MasterConfigSynchronization>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d001      	beq.n	80105b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80105b2:	f7ff fce1 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80105b6:	bf00      	nop
 80105b8:	3718      	adds	r7, #24
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	200013cc 	.word	0x200013cc

080105c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b086      	sub	sp, #24
 80105c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80105ca:	f107 0308 	add.w	r3, r7, #8
 80105ce:	2200      	movs	r2, #0
 80105d0:	601a      	str	r2, [r3, #0]
 80105d2:	605a      	str	r2, [r3, #4]
 80105d4:	609a      	str	r2, [r3, #8]
 80105d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80105d8:	463b      	mov	r3, r7
 80105da:	2200      	movs	r2, #0
 80105dc:	601a      	str	r2, [r3, #0]
 80105de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80105e0:	4b1d      	ldr	r3, [pc, #116]	; (8010658 <MX_TIM3_Init+0x94>)
 80105e2:	4a1e      	ldr	r2, [pc, #120]	; (801065c <MX_TIM3_Init+0x98>)
 80105e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 80105e6:	4b1c      	ldr	r3, [pc, #112]	; (8010658 <MX_TIM3_Init+0x94>)
 80105e8:	f244 129f 	movw	r2, #16799	; 0x419f
 80105ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80105ee:	4b1a      	ldr	r3, [pc, #104]	; (8010658 <MX_TIM3_Init+0x94>)
 80105f0:	2200      	movs	r2, #0
 80105f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80105f4:	4b18      	ldr	r3, [pc, #96]	; (8010658 <MX_TIM3_Init+0x94>)
 80105f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80105fc:	4b16      	ldr	r3, [pc, #88]	; (8010658 <MX_TIM3_Init+0x94>)
 80105fe:	2200      	movs	r2, #0
 8010600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010602:	4b15      	ldr	r3, [pc, #84]	; (8010658 <MX_TIM3_Init+0x94>)
 8010604:	2200      	movs	r2, #0
 8010606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8010608:	4813      	ldr	r0, [pc, #76]	; (8010658 <MX_TIM3_Init+0x94>)
 801060a:	f004 f935 	bl	8014878 <HAL_TIM_Base_Init>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d001      	beq.n	8010618 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8010614:	f7ff fcb0 	bl	800ff78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801061c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801061e:	f107 0308 	add.w	r3, r7, #8
 8010622:	4619      	mov	r1, r3
 8010624:	480c      	ldr	r0, [pc, #48]	; (8010658 <MX_TIM3_Init+0x94>)
 8010626:	f004 fcb1 	bl	8014f8c <HAL_TIM_ConfigClockSource>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8010630:	f7ff fca2 	bl	800ff78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010634:	2300      	movs	r3, #0
 8010636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010638:	2300      	movs	r3, #0
 801063a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801063c:	463b      	mov	r3, r7
 801063e:	4619      	mov	r1, r3
 8010640:	4805      	ldr	r0, [pc, #20]	; (8010658 <MX_TIM3_Init+0x94>)
 8010642:	f005 f87d 	bl	8015740 <HAL_TIMEx_MasterConfigSynchronization>
 8010646:	4603      	mov	r3, r0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d001      	beq.n	8010650 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 801064c:	f7ff fc94 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8010650:	bf00      	nop
 8010652:	3718      	adds	r7, #24
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	20001414 	.word	0x20001414
 801065c:	40000400 	.word	0x40000400

08010660 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b08e      	sub	sp, #56	; 0x38
 8010664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801066a:	2200      	movs	r2, #0
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	605a      	str	r2, [r3, #4]
 8010670:	609a      	str	r2, [r3, #8]
 8010672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010674:	f107 0320 	add.w	r3, r7, #32
 8010678:	2200      	movs	r2, #0
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801067e:	1d3b      	adds	r3, r7, #4
 8010680:	2200      	movs	r2, #0
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	605a      	str	r2, [r3, #4]
 8010686:	609a      	str	r2, [r3, #8]
 8010688:	60da      	str	r2, [r3, #12]
 801068a:	611a      	str	r2, [r3, #16]
 801068c:	615a      	str	r2, [r3, #20]
 801068e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8010690:	4b37      	ldr	r3, [pc, #220]	; (8010770 <MX_TIM4_Init+0x110>)
 8010692:	4a38      	ldr	r2, [pc, #224]	; (8010774 <MX_TIM4_Init+0x114>)
 8010694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8010696:	4b36      	ldr	r3, [pc, #216]	; (8010770 <MX_TIM4_Init+0x110>)
 8010698:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801069c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 801069e:	4b34      	ldr	r3, [pc, #208]	; (8010770 <MX_TIM4_Init+0x110>)
 80106a0:	2200      	movs	r2, #0
 80106a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 80106a4:	4b32      	ldr	r3, [pc, #200]	; (8010770 <MX_TIM4_Init+0x110>)
 80106a6:	22fe      	movs	r2, #254	; 0xfe
 80106a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80106aa:	4b31      	ldr	r3, [pc, #196]	; (8010770 <MX_TIM4_Init+0x110>)
 80106ac:	2200      	movs	r2, #0
 80106ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80106b0:	4b2f      	ldr	r3, [pc, #188]	; (8010770 <MX_TIM4_Init+0x110>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80106b6:	482e      	ldr	r0, [pc, #184]	; (8010770 <MX_TIM4_Init+0x110>)
 80106b8:	f004 f8de 	bl	8014878 <HAL_TIM_Base_Init>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d001      	beq.n	80106c6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80106c2:	f7ff fc59 	bl	800ff78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80106c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80106cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106d0:	4619      	mov	r1, r3
 80106d2:	4827      	ldr	r0, [pc, #156]	; (8010770 <MX_TIM4_Init+0x110>)
 80106d4:	f004 fc5a 	bl	8014f8c <HAL_TIM_ConfigClockSource>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80106de:	f7ff fc4b 	bl	800ff78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80106e2:	4823      	ldr	r0, [pc, #140]	; (8010770 <MX_TIM4_Init+0x110>)
 80106e4:	f004 f988 	bl	80149f8 <HAL_TIM_PWM_Init>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d001      	beq.n	80106f2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80106ee:	f7ff fc43 	bl	800ff78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80106f2:	2300      	movs	r3, #0
 80106f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80106f6:	2300      	movs	r3, #0
 80106f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80106fa:	f107 0320 	add.w	r3, r7, #32
 80106fe:	4619      	mov	r1, r3
 8010700:	481b      	ldr	r0, [pc, #108]	; (8010770 <MX_TIM4_Init+0x110>)
 8010702:	f005 f81d 	bl	8015740 <HAL_TIMEx_MasterConfigSynchronization>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d001      	beq.n	8010710 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 801070c:	f7ff fc34 	bl	800ff78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010710:	2360      	movs	r3, #96	; 0x60
 8010712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010718:	2300      	movs	r3, #0
 801071a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801071c:	2300      	movs	r3, #0
 801071e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010720:	1d3b      	adds	r3, r7, #4
 8010722:	2200      	movs	r2, #0
 8010724:	4619      	mov	r1, r3
 8010726:	4812      	ldr	r0, [pc, #72]	; (8010770 <MX_TIM4_Init+0x110>)
 8010728:	f004 fb6e 	bl	8014e08 <HAL_TIM_PWM_ConfigChannel>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d001      	beq.n	8010736 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8010732:	f7ff fc21 	bl	800ff78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8010736:	1d3b      	adds	r3, r7, #4
 8010738:	2204      	movs	r2, #4
 801073a:	4619      	mov	r1, r3
 801073c:	480c      	ldr	r0, [pc, #48]	; (8010770 <MX_TIM4_Init+0x110>)
 801073e:	f004 fb63 	bl	8014e08 <HAL_TIM_PWM_ConfigChannel>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8010748:	f7ff fc16 	bl	800ff78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801074c:	1d3b      	adds	r3, r7, #4
 801074e:	2208      	movs	r2, #8
 8010750:	4619      	mov	r1, r3
 8010752:	4807      	ldr	r0, [pc, #28]	; (8010770 <MX_TIM4_Init+0x110>)
 8010754:	f004 fb58 	bl	8014e08 <HAL_TIM_PWM_ConfigChannel>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 801075e:	f7ff fc0b 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8010762:	4803      	ldr	r0, [pc, #12]	; (8010770 <MX_TIM4_Init+0x110>)
 8010764:	f000 f988 	bl	8010a78 <HAL_TIM_MspPostInit>

}
 8010768:	bf00      	nop
 801076a:	3738      	adds	r7, #56	; 0x38
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	2000145c 	.word	0x2000145c
 8010774:	40000800 	.word	0x40000800

08010778 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b08c      	sub	sp, #48	; 0x30
 801077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 801077e:	f107 030c 	add.w	r3, r7, #12
 8010782:	2224      	movs	r2, #36	; 0x24
 8010784:	2100      	movs	r1, #0
 8010786:	4618      	mov	r0, r3
 8010788:	f00c f88a 	bl	801c8a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801078c:	1d3b      	adds	r3, r7, #4
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]
 8010792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8010794:	4b20      	ldr	r3, [pc, #128]	; (8010818 <MX_TIM5_Init+0xa0>)
 8010796:	4a21      	ldr	r2, [pc, #132]	; (801081c <MX_TIM5_Init+0xa4>)
 8010798:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801079a:	4b1f      	ldr	r3, [pc, #124]	; (8010818 <MX_TIM5_Init+0xa0>)
 801079c:	2200      	movs	r2, #0
 801079e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80107a0:	4b1d      	ldr	r3, [pc, #116]	; (8010818 <MX_TIM5_Init+0xa0>)
 80107a2:	2200      	movs	r2, #0
 80107a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80107a6:	4b1c      	ldr	r3, [pc, #112]	; (8010818 <MX_TIM5_Init+0xa0>)
 80107a8:	f04f 32ff 	mov.w	r2, #4294967295
 80107ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80107ae:	4b1a      	ldr	r3, [pc, #104]	; (8010818 <MX_TIM5_Init+0xa0>)
 80107b0:	2200      	movs	r2, #0
 80107b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80107b4:	4b18      	ldr	r3, [pc, #96]	; (8010818 <MX_TIM5_Init+0xa0>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80107ba:	2301      	movs	r3, #1
 80107bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80107be:	2300      	movs	r3, #0
 80107c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80107c2:	2301      	movs	r3, #1
 80107c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80107c6:	2300      	movs	r3, #0
 80107c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80107ce:	2300      	movs	r3, #0
 80107d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80107d2:	2301      	movs	r3, #1
 80107d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80107d6:	2300      	movs	r3, #0
 80107d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80107da:	2300      	movs	r3, #0
 80107dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80107de:	f107 030c 	add.w	r3, r7, #12
 80107e2:	4619      	mov	r1, r3
 80107e4:	480c      	ldr	r0, [pc, #48]	; (8010818 <MX_TIM5_Init+0xa0>)
 80107e6:	f004 f960 	bl	8014aaa <HAL_TIM_Encoder_Init>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80107f0:	f7ff fbc2 	bl	800ff78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80107f4:	2300      	movs	r3, #0
 80107f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80107fc:	1d3b      	adds	r3, r7, #4
 80107fe:	4619      	mov	r1, r3
 8010800:	4805      	ldr	r0, [pc, #20]	; (8010818 <MX_TIM5_Init+0xa0>)
 8010802:	f004 ff9d 	bl	8015740 <HAL_TIMEx_MasterConfigSynchronization>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d001      	beq.n	8010810 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 801080c:	f7ff fbb4 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8010810:	bf00      	nop
 8010812:	3730      	adds	r7, #48	; 0x30
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	200014a4 	.word	0x200014a4
 801081c:	40000c00 	.word	0x40000c00

08010820 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010826:	463b      	mov	r3, r7
 8010828:	2200      	movs	r2, #0
 801082a:	601a      	str	r2, [r3, #0]
 801082c:	605a      	str	r2, [r3, #4]
 801082e:	609a      	str	r2, [r3, #8]
 8010830:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8010832:	4b16      	ldr	r3, [pc, #88]	; (801088c <MX_TIM9_Init+0x6c>)
 8010834:	4a16      	ldr	r2, [pc, #88]	; (8010890 <MX_TIM9_Init+0x70>)
 8010836:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8010838:	4b14      	ldr	r3, [pc, #80]	; (801088c <MX_TIM9_Init+0x6c>)
 801083a:	f244 129f 	movw	r2, #16799	; 0x419f
 801083e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010840:	4b12      	ldr	r3, [pc, #72]	; (801088c <MX_TIM9_Init+0x6c>)
 8010842:	2200      	movs	r2, #0
 8010844:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8010846:	4b11      	ldr	r3, [pc, #68]	; (801088c <MX_TIM9_Init+0x6c>)
 8010848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801084c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801084e:	4b0f      	ldr	r3, [pc, #60]	; (801088c <MX_TIM9_Init+0x6c>)
 8010850:	2200      	movs	r2, #0
 8010852:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010854:	4b0d      	ldr	r3, [pc, #52]	; (801088c <MX_TIM9_Init+0x6c>)
 8010856:	2200      	movs	r2, #0
 8010858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 801085a:	480c      	ldr	r0, [pc, #48]	; (801088c <MX_TIM9_Init+0x6c>)
 801085c:	f004 f80c 	bl	8014878 <HAL_TIM_Base_Init>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8010866:	f7ff fb87 	bl	800ff78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801086e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8010870:	463b      	mov	r3, r7
 8010872:	4619      	mov	r1, r3
 8010874:	4805      	ldr	r0, [pc, #20]	; (801088c <MX_TIM9_Init+0x6c>)
 8010876:	f004 fb89 	bl	8014f8c <HAL_TIM_ConfigClockSource>
 801087a:	4603      	mov	r3, r0
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8010880:	f7ff fb7a 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8010884:	bf00      	nop
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	200014ec 	.word	0x200014ec
 8010890:	40014000 	.word	0x40014000

08010894 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8010898:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <MX_TIM14_Init+0x40>)
 801089a:	4a0f      	ldr	r2, [pc, #60]	; (80108d8 <MX_TIM14_Init+0x44>)
 801089c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 801089e:	4b0d      	ldr	r3, [pc, #52]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108a0:	f240 3247 	movw	r2, #839	; 0x347
 80108a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80108a6:	4b0b      	ldr	r3, [pc, #44]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80108ac:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80108b4:	4b07      	ldr	r3, [pc, #28]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80108ba:	4b06      	ldr	r3, [pc, #24]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108bc:	2200      	movs	r2, #0
 80108be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80108c0:	4804      	ldr	r0, [pc, #16]	; (80108d4 <MX_TIM14_Init+0x40>)
 80108c2:	f003 ffd9 	bl	8014878 <HAL_TIM_Base_Init>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d001      	beq.n	80108d0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80108cc:	f7ff fb54 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80108d0:	bf00      	nop
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	20001534 	.word	0x20001534
 80108d8:	40002000 	.word	0x40002000

080108dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108ec:	d10e      	bne.n	801090c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80108ee:	2300      	movs	r3, #0
 80108f0:	61fb      	str	r3, [r7, #28]
 80108f2:	4b38      	ldr	r3, [pc, #224]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 80108f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f6:	4a37      	ldr	r2, [pc, #220]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 80108f8:	f043 0301 	orr.w	r3, r3, #1
 80108fc:	6413      	str	r3, [r2, #64]	; 0x40
 80108fe:	4b35      	ldr	r3, [pc, #212]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010902:	f003 0301 	and.w	r3, r3, #1
 8010906:	61fb      	str	r3, [r7, #28]
 8010908:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 801090a:	e05e      	b.n	80109ca <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a31      	ldr	r2, [pc, #196]	; (80109d8 <HAL_TIM_Base_MspInit+0xfc>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d116      	bne.n	8010944 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010916:	2300      	movs	r3, #0
 8010918:	61bb      	str	r3, [r7, #24]
 801091a:	4b2e      	ldr	r3, [pc, #184]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 801091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091e:	4a2d      	ldr	r2, [pc, #180]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010920:	f043 0302 	orr.w	r3, r3, #2
 8010924:	6413      	str	r3, [r2, #64]	; 0x40
 8010926:	4b2b      	ldr	r3, [pc, #172]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801092a:	f003 0302 	and.w	r3, r3, #2
 801092e:	61bb      	str	r3, [r7, #24]
 8010930:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8010932:	2200      	movs	r2, #0
 8010934:	2105      	movs	r1, #5
 8010936:	201d      	movs	r0, #29
 8010938:	f001 fdce 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801093c:	201d      	movs	r0, #29
 801093e:	f001 fde7 	bl	8012510 <HAL_NVIC_EnableIRQ>
}
 8010942:	e042      	b.n	80109ca <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a24      	ldr	r2, [pc, #144]	; (80109dc <HAL_TIM_Base_MspInit+0x100>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d10e      	bne.n	801096c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
 8010952:	4b20      	ldr	r3, [pc, #128]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010956:	4a1f      	ldr	r2, [pc, #124]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010958:	f043 0304 	orr.w	r3, r3, #4
 801095c:	6413      	str	r3, [r2, #64]	; 0x40
 801095e:	4b1d      	ldr	r3, [pc, #116]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010962:	f003 0304 	and.w	r3, r3, #4
 8010966:	617b      	str	r3, [r7, #20]
 8010968:	697b      	ldr	r3, [r7, #20]
}
 801096a:	e02e      	b.n	80109ca <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4a1b      	ldr	r2, [pc, #108]	; (80109e0 <HAL_TIM_Base_MspInit+0x104>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d116      	bne.n	80109a4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8010976:	2300      	movs	r3, #0
 8010978:	613b      	str	r3, [r7, #16]
 801097a:	4b16      	ldr	r3, [pc, #88]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 801097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801097e:	4a15      	ldr	r2, [pc, #84]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010984:	6453      	str	r3, [r2, #68]	; 0x44
 8010986:	4b13      	ldr	r3, [pc, #76]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 8010988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801098a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801098e:	613b      	str	r3, [r7, #16]
 8010990:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8010992:	2200      	movs	r2, #0
 8010994:	2105      	movs	r1, #5
 8010996:	2018      	movs	r0, #24
 8010998:	f001 fd9e 	bl	80124d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 801099c:	2018      	movs	r0, #24
 801099e:	f001 fdb7 	bl	8012510 <HAL_NVIC_EnableIRQ>
}
 80109a2:	e012      	b.n	80109ca <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a0e      	ldr	r2, [pc, #56]	; (80109e4 <HAL_TIM_Base_MspInit+0x108>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d10d      	bne.n	80109ca <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80109ae:	2300      	movs	r3, #0
 80109b0:	60fb      	str	r3, [r7, #12]
 80109b2:	4b08      	ldr	r3, [pc, #32]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 80109b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b6:	4a07      	ldr	r2, [pc, #28]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 80109b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109bc:	6413      	str	r3, [r2, #64]	; 0x40
 80109be:	4b05      	ldr	r3, [pc, #20]	; (80109d4 <HAL_TIM_Base_MspInit+0xf8>)
 80109c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]
}
 80109ca:	bf00      	nop
 80109cc:	3720      	adds	r7, #32
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	40023800 	.word	0x40023800
 80109d8:	40000400 	.word	0x40000400
 80109dc:	40000800 	.word	0x40000800
 80109e0:	40014000 	.word	0x40014000
 80109e4:	40002000 	.word	0x40002000

080109e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b08a      	sub	sp, #40	; 0x28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109f0:	f107 0314 	add.w	r3, r7, #20
 80109f4:	2200      	movs	r2, #0
 80109f6:	601a      	str	r2, [r3, #0]
 80109f8:	605a      	str	r2, [r3, #4]
 80109fa:	609a      	str	r2, [r3, #8]
 80109fc:	60da      	str	r2, [r3, #12]
 80109fe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a19      	ldr	r2, [pc, #100]	; (8010a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d12b      	bne.n	8010a62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	613b      	str	r3, [r7, #16]
 8010a0e:	4b18      	ldr	r3, [pc, #96]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a12:	4a17      	ldr	r2, [pc, #92]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a14:	f043 0308 	orr.w	r3, r3, #8
 8010a18:	6413      	str	r3, [r2, #64]	; 0x40
 8010a1a:	4b15      	ldr	r3, [pc, #84]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1e:	f003 0308 	and.w	r3, r3, #8
 8010a22:	613b      	str	r3, [r7, #16]
 8010a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010a26:	2300      	movs	r3, #0
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	4b11      	ldr	r3, [pc, #68]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2e:	4a10      	ldr	r2, [pc, #64]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a30:	f043 0301 	orr.w	r3, r3, #1
 8010a34:	6313      	str	r3, [r2, #48]	; 0x30
 8010a36:	4b0e      	ldr	r3, [pc, #56]	; (8010a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8010a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a3a:	f003 0301 	and.w	r3, r3, #1
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 8010a42:	2303      	movs	r3, #3
 8010a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a46:	2302      	movs	r3, #2
 8010a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8010a52:	2302      	movs	r3, #2
 8010a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a56:	f107 0314 	add.w	r3, r7, #20
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	4805      	ldr	r0, [pc, #20]	; (8010a74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8010a5e:	f002 f8f1 	bl	8012c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8010a62:	bf00      	nop
 8010a64:	3728      	adds	r7, #40	; 0x28
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}
 8010a6a:	bf00      	nop
 8010a6c:	40000c00 	.word	0x40000c00
 8010a70:	40023800 	.word	0x40023800
 8010a74:	40020000 	.word	0x40020000

08010a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010a80:	f107 030c 	add.w	r3, r7, #12
 8010a84:	2200      	movs	r2, #0
 8010a86:	601a      	str	r2, [r3, #0]
 8010a88:	605a      	str	r2, [r3, #4]
 8010a8a:	609a      	str	r2, [r3, #8]
 8010a8c:	60da      	str	r2, [r3, #12]
 8010a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a12      	ldr	r2, [pc, #72]	; (8010ae0 <HAL_TIM_MspPostInit+0x68>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d11e      	bne.n	8010ad8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	60bb      	str	r3, [r7, #8]
 8010a9e:	4b11      	ldr	r3, [pc, #68]	; (8010ae4 <HAL_TIM_MspPostInit+0x6c>)
 8010aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aa2:	4a10      	ldr	r2, [pc, #64]	; (8010ae4 <HAL_TIM_MspPostInit+0x6c>)
 8010aa4:	f043 0308 	orr.w	r3, r3, #8
 8010aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8010aaa:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <HAL_TIM_MspPostInit+0x6c>)
 8010aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010aae:	f003 0308 	and.w	r3, r3, #8
 8010ab2:	60bb      	str	r3, [r7, #8]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8010ab6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8010aba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010abc:	2302      	movs	r3, #2
 8010abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010ac8:	2302      	movs	r3, #2
 8010aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010acc:	f107 030c 	add.w	r3, r7, #12
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	4805      	ldr	r0, [pc, #20]	; (8010ae8 <HAL_TIM_MspPostInit+0x70>)
 8010ad4:	f002 f8b6 	bl	8012c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8010ad8:	bf00      	nop
 8010ada:	3720      	adds	r7, #32
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	40000800 	.word	0x40000800
 8010ae4:	40023800 	.word	0x40023800
 8010ae8:	40020c00 	.word	0x40020c00

08010aec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8010af0:	4b11      	ldr	r3, [pc, #68]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010af2:	4a12      	ldr	r2, [pc, #72]	; (8010b3c <MX_USART1_UART_Init+0x50>)
 8010af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8010af6:	4b10      	ldr	r3, [pc, #64]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8010afe:	4b0e      	ldr	r3, [pc, #56]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8010b04:	4b0c      	ldr	r3, [pc, #48]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b06:	2200      	movs	r2, #0
 8010b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8010b10:	4b09      	ldr	r3, [pc, #36]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b12:	220c      	movs	r2, #12
 8010b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8010b16:	4b08      	ldr	r3, [pc, #32]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8010b1c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8010b1e:	4b06      	ldr	r3, [pc, #24]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8010b24:	4804      	ldr	r0, [pc, #16]	; (8010b38 <MX_USART1_UART_Init+0x4c>)
 8010b26:	f004 fe9b 	bl	8015860 <HAL_UART_Init>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8010b30:	f7ff fa22 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8010b34:	bf00      	nop
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	2000157c 	.word	0x2000157c
 8010b3c:	40011000 	.word	0x40011000

08010b40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010b44:	4b11      	ldr	r3, [pc, #68]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b46:	4a12      	ldr	r2, [pc, #72]	; (8010b90 <MX_USART2_UART_Init+0x50>)
 8010b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8010b4a:	4b10      	ldr	r3, [pc, #64]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b4c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8010b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010b52:	4b0e      	ldr	r3, [pc, #56]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010b58:	4b0c      	ldr	r3, [pc, #48]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010b5e:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010b64:	4b09      	ldr	r3, [pc, #36]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b66:	220c      	movs	r2, #12
 8010b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010b6a:	4b08      	ldr	r3, [pc, #32]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010b70:	4b06      	ldr	r3, [pc, #24]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010b76:	4805      	ldr	r0, [pc, #20]	; (8010b8c <MX_USART2_UART_Init+0x4c>)
 8010b78:	f004 fe72 	bl	8015860 <HAL_UART_Init>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010b82:	f7ff f9f9 	bl	800ff78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8010b86:	bf00      	nop
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	200015c0 	.word	0x200015c0
 8010b90:	40004400 	.word	0x40004400

08010b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b08c      	sub	sp, #48	; 0x30
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b9c:	f107 031c 	add.w	r3, r7, #28
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	605a      	str	r2, [r3, #4]
 8010ba6:	609a      	str	r2, [r3, #8]
 8010ba8:	60da      	str	r2, [r3, #12]
 8010baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	4a61      	ldr	r2, [pc, #388]	; (8010d38 <HAL_UART_MspInit+0x1a4>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	f040 808a 	bne.w	8010ccc <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010bb8:	2300      	movs	r3, #0
 8010bba:	61bb      	str	r3, [r7, #24]
 8010bbc:	4b5f      	ldr	r3, [pc, #380]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bc0:	4a5e      	ldr	r2, [pc, #376]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010bc2:	f043 0310 	orr.w	r3, r3, #16
 8010bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8010bc8:	4b5c      	ldr	r3, [pc, #368]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bcc:	f003 0310 	and.w	r3, r3, #16
 8010bd0:	61bb      	str	r3, [r7, #24]
 8010bd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	617b      	str	r3, [r7, #20]
 8010bd8:	4b58      	ldr	r3, [pc, #352]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bdc:	4a57      	ldr	r2, [pc, #348]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010bde:	f043 0301 	orr.w	r3, r3, #1
 8010be2:	6313      	str	r3, [r2, #48]	; 0x30
 8010be4:	4b55      	ldr	r3, [pc, #340]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010be8:	f003 0301 	and.w	r3, r3, #1
 8010bec:	617b      	str	r3, [r7, #20]
 8010bee:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8010bf0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8010bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bf6:	2302      	movs	r3, #2
 8010bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bfe:	2303      	movs	r3, #3
 8010c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010c02:	2307      	movs	r3, #7
 8010c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c06:	f107 031c 	add.w	r3, r7, #28
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	484c      	ldr	r0, [pc, #304]	; (8010d40 <HAL_UART_MspInit+0x1ac>)
 8010c0e:	f002 f819 	bl	8012c44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8010c12:	4b4c      	ldr	r3, [pc, #304]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c14:	4a4c      	ldr	r2, [pc, #304]	; (8010d48 <HAL_UART_MspInit+0x1b4>)
 8010c16:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8010c18:	4b4a      	ldr	r3, [pc, #296]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010c20:	4b48      	ldr	r3, [pc, #288]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c22:	2240      	movs	r2, #64	; 0x40
 8010c24:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010c26:	4b47      	ldr	r3, [pc, #284]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c28:	2200      	movs	r2, #0
 8010c2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010c2c:	4b45      	ldr	r3, [pc, #276]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010c32:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010c34:	4b43      	ldr	r3, [pc, #268]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010c3a:	4b42      	ldr	r3, [pc, #264]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8010c40:	4b40      	ldr	r3, [pc, #256]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010c46:	4b3f      	ldr	r3, [pc, #252]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010c4c:	4b3d      	ldr	r3, [pc, #244]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8010c52:	483c      	ldr	r0, [pc, #240]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c54:	f001 fc86 	bl	8012564 <HAL_DMA_Init>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d001      	beq.n	8010c62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8010c5e:	f7ff f98b 	bl	800ff78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4a37      	ldr	r2, [pc, #220]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c66:	635a      	str	r2, [r3, #52]	; 0x34
 8010c68:	4a36      	ldr	r2, [pc, #216]	; (8010d44 <HAL_UART_MspInit+0x1b0>)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8010c6e:	4b37      	ldr	r3, [pc, #220]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c70:	4a37      	ldr	r2, [pc, #220]	; (8010d50 <HAL_UART_MspInit+0x1bc>)
 8010c72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8010c74:	4b35      	ldr	r3, [pc, #212]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010c7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010c7c:	4b33      	ldr	r3, [pc, #204]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010c82:	4b32      	ldr	r3, [pc, #200]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010c88:	4b30      	ldr	r3, [pc, #192]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010c8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010c90:	4b2e      	ldr	r3, [pc, #184]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8010c96:	4b2d      	ldr	r3, [pc, #180]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8010c9c:	4b2b      	ldr	r3, [pc, #172]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010ca2:	4b2a      	ldr	r3, [pc, #168]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010ca8:	4b28      	ldr	r3, [pc, #160]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8010cae:	4827      	ldr	r0, [pc, #156]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010cb0:	f001 fc58 	bl	8012564 <HAL_DMA_Init>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8010cba:	f7ff f95d 	bl	800ff78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a22      	ldr	r2, [pc, #136]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8010cc4:	4a21      	ldr	r2, [pc, #132]	; (8010d4c <HAL_UART_MspInit+0x1b8>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010cca:	e030      	b.n	8010d2e <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4a20      	ldr	r2, [pc, #128]	; (8010d54 <HAL_UART_MspInit+0x1c0>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d12b      	bne.n	8010d2e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	613b      	str	r3, [r7, #16]
 8010cda:	4b18      	ldr	r3, [pc, #96]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cde:	4a17      	ldr	r2, [pc, #92]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8010ce6:	4b15      	ldr	r3, [pc, #84]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cee:	613b      	str	r3, [r7, #16]
 8010cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60fb      	str	r3, [r7, #12]
 8010cf6:	4b11      	ldr	r3, [pc, #68]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfa:	4a10      	ldr	r2, [pc, #64]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010cfc:	f043 0308 	orr.w	r3, r3, #8
 8010d00:	6313      	str	r3, [r2, #48]	; 0x30
 8010d02:	4b0e      	ldr	r3, [pc, #56]	; (8010d3c <HAL_UART_MspInit+0x1a8>)
 8010d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d06:	f003 0308 	and.w	r3, r3, #8
 8010d0a:	60fb      	str	r3, [r7, #12]
 8010d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8010d0e:	2360      	movs	r3, #96	; 0x60
 8010d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d12:	2302      	movs	r3, #2
 8010d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d1a:	2303      	movs	r3, #3
 8010d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010d1e:	2307      	movs	r3, #7
 8010d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010d22:	f107 031c 	add.w	r3, r7, #28
 8010d26:	4619      	mov	r1, r3
 8010d28:	480b      	ldr	r0, [pc, #44]	; (8010d58 <HAL_UART_MspInit+0x1c4>)
 8010d2a:	f001 ff8b 	bl	8012c44 <HAL_GPIO_Init>
}
 8010d2e:	bf00      	nop
 8010d30:	3730      	adds	r7, #48	; 0x30
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	40011000 	.word	0x40011000
 8010d3c:	40023800 	.word	0x40023800
 8010d40:	40020000 	.word	0x40020000
 8010d44:	20001604 	.word	0x20001604
 8010d48:	400264b8 	.word	0x400264b8
 8010d4c:	20001664 	.word	0x20001664
 8010d50:	40026488 	.word	0x40026488
 8010d54:	40004400 	.word	0x40004400
 8010d58:	40020c00 	.word	0x40020c00

08010d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010d60:	480d      	ldr	r0, [pc, #52]	; (8010d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010d62:	490e      	ldr	r1, [pc, #56]	; (8010d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010d64:	4a0e      	ldr	r2, [pc, #56]	; (8010da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010d68:	e002      	b.n	8010d70 <LoopCopyDataInit>

08010d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010d6e:	3304      	adds	r3, #4

08010d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8010d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010d74:	d3f9      	bcc.n	8010d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010d76:	4a0b      	ldr	r2, [pc, #44]	; (8010da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010d78:	4c0b      	ldr	r4, [pc, #44]	; (8010da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010d7c:	e001      	b.n	8010d82 <LoopFillZerobss>

08010d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010d80:	3204      	adds	r2, #4

08010d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8010d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010d84:	d3fb      	bcc.n	8010d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8010d86:	f7ff fbbd 	bl	8010504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010d8a:	f00b fd43 	bl	801c814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010d8e:	f7ff f843 	bl	800fe18 <main>
  bx  lr    
 8010d92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010d9c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8010da0:	08020258 	.word	0x08020258
  ldr r2, =_sbss
 8010da4:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8010da8:	2000a694 	.word	0x2000a694

08010dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010dac:	e7fe      	b.n	8010dac <ADC_IRQHandler>
	...

08010db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010db4:	4b0e      	ldr	r3, [pc, #56]	; (8010df0 <HAL_Init+0x40>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a0d      	ldr	r2, [pc, #52]	; (8010df0 <HAL_Init+0x40>)
 8010dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <HAL_Init+0x40>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a0a      	ldr	r2, [pc, #40]	; (8010df0 <HAL_Init+0x40>)
 8010dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010dcc:	4b08      	ldr	r3, [pc, #32]	; (8010df0 <HAL_Init+0x40>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a07      	ldr	r2, [pc, #28]	; (8010df0 <HAL_Init+0x40>)
 8010dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010dd8:	2003      	movs	r0, #3
 8010dda:	f001 fb72 	bl	80124c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010dde:	2005      	movs	r0, #5
 8010de0:	f7ff f9b0 	bl	8010144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010de4:	f7ff f982 	bl	80100ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	40023c00 	.word	0x40023c00

08010df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010df4:	b480      	push	{r7}
 8010df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010df8:	4b06      	ldr	r3, [pc, #24]	; (8010e14 <HAL_IncTick+0x20>)
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	4b06      	ldr	r3, [pc, #24]	; (8010e18 <HAL_IncTick+0x24>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4413      	add	r3, r2
 8010e04:	4a04      	ldr	r2, [pc, #16]	; (8010e18 <HAL_IncTick+0x24>)
 8010e06:	6013      	str	r3, [r2, #0]
}
 8010e08:	bf00      	nop
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	20000028 	.word	0x20000028
 8010e18:	200016c4 	.word	0x200016c4

08010e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8010e20:	4b03      	ldr	r3, [pc, #12]	; (8010e30 <HAL_GetTick+0x14>)
 8010e22:	681b      	ldr	r3, [r3, #0]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	200016c4 	.word	0x200016c4

08010e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8010e46:	2301      	movs	r3, #1
 8010e48:	e033      	b.n	8010eb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d109      	bne.n	8010e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7fe fb82 	bl	800f55c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e6a:	f003 0310 	and.w	r3, r3, #16
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d118      	bne.n	8010ea4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010e7a:	f023 0302 	bic.w	r3, r3, #2
 8010e7e:	f043 0202 	orr.w	r2, r3, #2
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fa54 	bl	8011334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e96:	f023 0303 	bic.w	r3, r3, #3
 8010e9a:	f043 0201 	orr.w	r2, r3, #1
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8010ea2:	e001      	b.n	8010ea8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010ea4:	2301      	movs	r3, #1
 8010ea6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
	...

08010ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d101      	bne.n	8010eda <HAL_ADC_Start_DMA+0x1e>
 8010ed6:	2302      	movs	r3, #2
 8010ed8:	e0e9      	b.n	80110ae <HAL_ADC_Start_DMA+0x1f2>
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2201      	movs	r2, #1
 8010ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d018      	beq.n	8010f22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	689a      	ldr	r2, [r3, #8]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f042 0201 	orr.w	r2, r2, #1
 8010efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8010f00:	4b6d      	ldr	r3, [pc, #436]	; (80110b8 <HAL_ADC_Start_DMA+0x1fc>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a6d      	ldr	r2, [pc, #436]	; (80110bc <HAL_ADC_Start_DMA+0x200>)
 8010f06:	fba2 2303 	umull	r2, r3, r2, r3
 8010f0a:	0c9a      	lsrs	r2, r3, #18
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010f14:	e002      	b.n	8010f1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d1f9      	bne.n	8010f16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	689b      	ldr	r3, [r3, #8]
 8010f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f30:	d107      	bne.n	8010f42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	689a      	ldr	r2, [r3, #8]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010f40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	f003 0301 	and.w	r3, r3, #1
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	f040 80a1 	bne.w	8011094 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010f5a:	f023 0301 	bic.w	r3, r3, #1
 8010f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d007      	beq.n	8010f84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f90:	d106      	bne.n	8010fa0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f96:	f023 0206 	bic.w	r2, r3, #6
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8010f9e:	e002      	b.n	8010fa6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010fae:	4b44      	ldr	r3, [pc, #272]	; (80110c0 <HAL_ADC_Start_DMA+0x204>)
 8010fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fb6:	4a43      	ldr	r2, [pc, #268]	; (80110c4 <HAL_ADC_Start_DMA+0x208>)
 8010fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fbe:	4a42      	ldr	r2, [pc, #264]	; (80110c8 <HAL_ADC_Start_DMA+0x20c>)
 8010fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fc6:	4a41      	ldr	r2, [pc, #260]	; (80110cc <HAL_ADC_Start_DMA+0x210>)
 8010fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8010fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	685a      	ldr	r2, [r3, #4]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	689a      	ldr	r2, [r3, #8]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	334c      	adds	r3, #76	; 0x4c
 8010ffe:	4619      	mov	r1, r3
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f001 fb5c 	bl	80126c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	f003 031f 	and.w	r3, r3, #31
 8011010:	2b00      	cmp	r3, #0
 8011012:	d12a      	bne.n	801106a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4a2d      	ldr	r2, [pc, #180]	; (80110d0 <HAL_ADC_Start_DMA+0x214>)
 801101a:	4293      	cmp	r3, r2
 801101c:	d015      	beq.n	801104a <HAL_ADC_Start_DMA+0x18e>
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a2c      	ldr	r2, [pc, #176]	; (80110d4 <HAL_ADC_Start_DMA+0x218>)
 8011024:	4293      	cmp	r3, r2
 8011026:	d105      	bne.n	8011034 <HAL_ADC_Start_DMA+0x178>
 8011028:	4b25      	ldr	r3, [pc, #148]	; (80110c0 <HAL_ADC_Start_DMA+0x204>)
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	f003 031f 	and.w	r3, r3, #31
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00a      	beq.n	801104a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a27      	ldr	r2, [pc, #156]	; (80110d8 <HAL_ADC_Start_DMA+0x21c>)
 801103a:	4293      	cmp	r3, r2
 801103c:	d136      	bne.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
 801103e:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <HAL_ADC_Start_DMA+0x204>)
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	f003 0310 	and.w	r3, r3, #16
 8011046:	2b00      	cmp	r3, #0
 8011048:	d130      	bne.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011054:	2b00      	cmp	r3, #0
 8011056:	d129      	bne.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	689a      	ldr	r2, [r3, #8]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011066:	609a      	str	r2, [r3, #8]
 8011068:	e020      	b.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a18      	ldr	r2, [pc, #96]	; (80110d0 <HAL_ADC_Start_DMA+0x214>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d11b      	bne.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	689b      	ldr	r3, [r3, #8]
 801107a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801107e:	2b00      	cmp	r3, #0
 8011080:	d114      	bne.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	689a      	ldr	r2, [r3, #8]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011090:	609a      	str	r2, [r3, #8]
 8011092:	e00b      	b.n	80110ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011098:	f043 0210 	orr.w	r2, r3, #16
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110a4:	f043 0201 	orr.w	r2, r3, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80110ac:	2300      	movs	r3, #0
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20000020 	.word	0x20000020
 80110bc:	431bde83 	.word	0x431bde83
 80110c0:	40012300 	.word	0x40012300
 80110c4:	0801152d 	.word	0x0801152d
 80110c8:	080115e7 	.word	0x080115e7
 80110cc:	08011603 	.word	0x08011603
 80110d0:	40012000 	.word	0x40012000
 80110d4:	40012100 	.word	0x40012100
 80110d8:	40012200 	.word	0x40012200

080110dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80110e4:	bf00      	nop
 80110e6:	370c      	adds	r7, #12
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011104:	2b01      	cmp	r3, #1
 8011106:	d101      	bne.n	801110c <HAL_ADC_ConfigChannel+0x1c>
 8011108:	2302      	movs	r3, #2
 801110a:	e105      	b.n	8011318 <HAL_ADC_ConfigChannel+0x228>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2201      	movs	r2, #1
 8011110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b09      	cmp	r3, #9
 801111a:	d925      	bls.n	8011168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	68d9      	ldr	r1, [r3, #12]
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	b29b      	uxth	r3, r3
 8011128:	461a      	mov	r2, r3
 801112a:	4613      	mov	r3, r2
 801112c:	005b      	lsls	r3, r3, #1
 801112e:	4413      	add	r3, r2
 8011130:	3b1e      	subs	r3, #30
 8011132:	2207      	movs	r2, #7
 8011134:	fa02 f303 	lsl.w	r3, r2, r3
 8011138:	43da      	mvns	r2, r3
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	400a      	ands	r2, r1
 8011140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68d9      	ldr	r1, [r3, #12]
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	689a      	ldr	r2, [r3, #8]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	b29b      	uxth	r3, r3
 8011152:	4618      	mov	r0, r3
 8011154:	4603      	mov	r3, r0
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	4403      	add	r3, r0
 801115a:	3b1e      	subs	r3, #30
 801115c:	409a      	lsls	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	430a      	orrs	r2, r1
 8011164:	60da      	str	r2, [r3, #12]
 8011166:	e022      	b.n	80111ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	6919      	ldr	r1, [r3, #16]
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	b29b      	uxth	r3, r3
 8011174:	461a      	mov	r2, r3
 8011176:	4613      	mov	r3, r2
 8011178:	005b      	lsls	r3, r3, #1
 801117a:	4413      	add	r3, r2
 801117c:	2207      	movs	r2, #7
 801117e:	fa02 f303 	lsl.w	r3, r2, r3
 8011182:	43da      	mvns	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	400a      	ands	r2, r1
 801118a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6919      	ldr	r1, [r3, #16]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	689a      	ldr	r2, [r3, #8]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	b29b      	uxth	r3, r3
 801119c:	4618      	mov	r0, r3
 801119e:	4603      	mov	r3, r0
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4403      	add	r3, r0
 80111a4:	409a      	lsls	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	430a      	orrs	r2, r1
 80111ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	2b06      	cmp	r3, #6
 80111b4:	d824      	bhi.n	8011200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	4613      	mov	r3, r2
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	4413      	add	r3, r2
 80111c6:	3b05      	subs	r3, #5
 80111c8:	221f      	movs	r2, #31
 80111ca:	fa02 f303 	lsl.w	r3, r2, r3
 80111ce:	43da      	mvns	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	400a      	ands	r2, r1
 80111d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	4618      	mov	r0, r3
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	685a      	ldr	r2, [r3, #4]
 80111ea:	4613      	mov	r3, r2
 80111ec:	009b      	lsls	r3, r3, #2
 80111ee:	4413      	add	r3, r2
 80111f0:	3b05      	subs	r3, #5
 80111f2:	fa00 f203 	lsl.w	r2, r0, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	430a      	orrs	r2, r1
 80111fc:	635a      	str	r2, [r3, #52]	; 0x34
 80111fe:	e04c      	b.n	801129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	2b0c      	cmp	r3, #12
 8011206:	d824      	bhi.n	8011252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	685a      	ldr	r2, [r3, #4]
 8011212:	4613      	mov	r3, r2
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	3b23      	subs	r3, #35	; 0x23
 801121a:	221f      	movs	r2, #31
 801121c:	fa02 f303 	lsl.w	r3, r2, r3
 8011220:	43da      	mvns	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	400a      	ands	r2, r1
 8011228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	b29b      	uxth	r3, r3
 8011236:	4618      	mov	r0, r3
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	685a      	ldr	r2, [r3, #4]
 801123c:	4613      	mov	r3, r2
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	4413      	add	r3, r2
 8011242:	3b23      	subs	r3, #35	; 0x23
 8011244:	fa00 f203 	lsl.w	r2, r0, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	430a      	orrs	r2, r1
 801124e:	631a      	str	r2, [r3, #48]	; 0x30
 8011250:	e023      	b.n	801129a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	685a      	ldr	r2, [r3, #4]
 801125c:	4613      	mov	r3, r2
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	4413      	add	r3, r2
 8011262:	3b41      	subs	r3, #65	; 0x41
 8011264:	221f      	movs	r2, #31
 8011266:	fa02 f303 	lsl.w	r3, r2, r3
 801126a:	43da      	mvns	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	400a      	ands	r2, r1
 8011272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	b29b      	uxth	r3, r3
 8011280:	4618      	mov	r0, r3
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	4613      	mov	r3, r2
 8011288:	009b      	lsls	r3, r3, #2
 801128a:	4413      	add	r3, r2
 801128c:	3b41      	subs	r3, #65	; 0x41
 801128e:	fa00 f203 	lsl.w	r2, r0, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	430a      	orrs	r2, r1
 8011298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801129a:	4b22      	ldr	r3, [pc, #136]	; (8011324 <HAL_ADC_ConfigChannel+0x234>)
 801129c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4a21      	ldr	r2, [pc, #132]	; (8011328 <HAL_ADC_ConfigChannel+0x238>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d109      	bne.n	80112bc <HAL_ADC_ConfigChannel+0x1cc>
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	2b12      	cmp	r3, #18
 80112ae:	d105      	bne.n	80112bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a19      	ldr	r2, [pc, #100]	; (8011328 <HAL_ADC_ConfigChannel+0x238>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d123      	bne.n	801130e <HAL_ADC_ConfigChannel+0x21e>
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b10      	cmp	r3, #16
 80112cc:	d003      	beq.n	80112d6 <HAL_ADC_ConfigChannel+0x1e6>
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b11      	cmp	r3, #17
 80112d4:	d11b      	bne.n	801130e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b10      	cmp	r3, #16
 80112e8:	d111      	bne.n	801130e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80112ea:	4b10      	ldr	r3, [pc, #64]	; (801132c <HAL_ADC_ConfigChannel+0x23c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a10      	ldr	r2, [pc, #64]	; (8011330 <HAL_ADC_ConfigChannel+0x240>)
 80112f0:	fba2 2303 	umull	r2, r3, r2, r3
 80112f4:	0c9a      	lsrs	r2, r3, #18
 80112f6:	4613      	mov	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	4413      	add	r3, r2
 80112fc:	005b      	lsls	r3, r3, #1
 80112fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011300:	e002      	b.n	8011308 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	3b01      	subs	r3, #1
 8011306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d1f9      	bne.n	8011302 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011316:	2300      	movs	r3, #0
}
 8011318:	4618      	mov	r0, r3
 801131a:	3714      	adds	r7, #20
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr
 8011324:	40012300 	.word	0x40012300
 8011328:	40012000 	.word	0x40012000
 801132c:	20000020 	.word	0x20000020
 8011330:	431bde83 	.word	0x431bde83

08011334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801133c:	4b79      	ldr	r3, [pc, #484]	; (8011524 <ADC_Init+0x1f0>)
 801133e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	685a      	ldr	r2, [r3, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	431a      	orrs	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	685a      	ldr	r2, [r3, #4]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	6859      	ldr	r1, [r3, #4]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	691b      	ldr	r3, [r3, #16]
 8011374:	021a      	lsls	r2, r3, #8
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	430a      	orrs	r2, r1
 801137c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801138c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6859      	ldr	r1, [r3, #4]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	689a      	ldr	r2, [r3, #8]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	430a      	orrs	r2, r1
 801139e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	689a      	ldr	r2, [r3, #8]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80113ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6899      	ldr	r1, [r3, #8]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	68da      	ldr	r2, [r3, #12]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	430a      	orrs	r2, r1
 80113c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c6:	4a58      	ldr	r2, [pc, #352]	; (8011528 <ADC_Init+0x1f4>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d022      	beq.n	8011412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	689a      	ldr	r2, [r3, #8]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80113da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6899      	ldr	r1, [r3, #8]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	689a      	ldr	r2, [r3, #8]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80113fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	6899      	ldr	r1, [r3, #8]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	430a      	orrs	r2, r1
 801140e:	609a      	str	r2, [r3, #8]
 8011410:	e00f      	b.n	8011432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	689a      	ldr	r2, [r3, #8]
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	689a      	ldr	r2, [r3, #8]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	689a      	ldr	r2, [r3, #8]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f022 0202 	bic.w	r2, r2, #2
 8011440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6899      	ldr	r1, [r3, #8]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7e1b      	ldrb	r3, [r3, #24]
 801144c:	005a      	lsls	r2, r3, #1
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	430a      	orrs	r2, r1
 8011454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f893 3020 	ldrb.w	r3, [r3, #32]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d01b      	beq.n	8011498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801146e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	685a      	ldr	r2, [r3, #4]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801147e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6859      	ldr	r1, [r3, #4]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801148a:	3b01      	subs	r3, #1
 801148c:	035a      	lsls	r2, r3, #13
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	605a      	str	r2, [r3, #4]
 8011496:	e007      	b.n	80114a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	685a      	ldr	r2, [r3, #4]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80114a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80114b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	69db      	ldr	r3, [r3, #28]
 80114c2:	3b01      	subs	r3, #1
 80114c4:	051a      	lsls	r2, r3, #20
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	430a      	orrs	r2, r1
 80114cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80114dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	6899      	ldr	r1, [r3, #8]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114ea:	025a      	lsls	r2, r3, #9
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	430a      	orrs	r2, r1
 80114f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	689a      	ldr	r2, [r3, #8]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6899      	ldr	r1, [r3, #8]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	695b      	ldr	r3, [r3, #20]
 801150e:	029a      	lsls	r2, r3, #10
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	430a      	orrs	r2, r1
 8011516:	609a      	str	r2, [r3, #8]
}
 8011518:	bf00      	nop
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	40012300 	.word	0x40012300
 8011528:	0f000001 	.word	0x0f000001

0801152c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b084      	sub	sp, #16
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011538:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801153e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011542:	2b00      	cmp	r3, #0
 8011544:	d13c      	bne.n	80115c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801154a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801155c:	2b00      	cmp	r3, #0
 801155e:	d12b      	bne.n	80115b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8011564:	2b00      	cmp	r3, #0
 8011566:	d127      	bne.n	80115b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8011572:	2b00      	cmp	r3, #0
 8011574:	d006      	beq.n	8011584 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	689b      	ldr	r3, [r3, #8]
 801157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8011580:	2b00      	cmp	r3, #0
 8011582:	d119      	bne.n	80115b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f022 0220 	bic.w	r2, r2, #32
 8011592:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d105      	bne.n	80115b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115b0:	f043 0201 	orr.w	r2, r3, #1
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f004 fc30 	bl	8015e1e <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80115be:	e00e      	b.n	80115de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115c4:	f003 0310 	and.w	r3, r3, #16
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d003      	beq.n	80115d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	f7ff fd85 	bl	80110dc <HAL_ADC_ErrorCallback>
}
 80115d2:	e004      	b.n	80115de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	4798      	blx	r3
}
 80115de:	bf00      	nop
 80115e0:	3710      	adds	r7, #16
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}

080115e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b084      	sub	sp, #16
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f004 fcc0 	bl	8015f7a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80115fa:	bf00      	nop
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}

08011602 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b084      	sub	sp, #16
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801160e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2240      	movs	r2, #64	; 0x40
 8011614:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801161a:	f043 0204 	orr.w	r2, r3, #4
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f7ff fd5a 	bl	80110dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8011628:	bf00      	nop
 801162a:	3710      	adds	r7, #16
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d101      	bne.n	8011642 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801163e:	2301      	movs	r3, #1
 8011640:	e0ed      	b.n	801181e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d102      	bne.n	8011654 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7fe f8e8 	bl	800f824 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f042 0201 	orr.w	r2, r2, #1
 8011662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011664:	f7ff fbda 	bl	8010e1c <HAL_GetTick>
 8011668:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801166a:	e012      	b.n	8011692 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801166c:	f7ff fbd6 	bl	8010e1c <HAL_GetTick>
 8011670:	4602      	mov	r2, r0
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	2b0a      	cmp	r3, #10
 8011678:	d90b      	bls.n	8011692 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801167e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2205      	movs	r2, #5
 801168a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801168e:	2301      	movs	r3, #1
 8011690:	e0c5      	b.n	801181e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	f003 0301 	and.w	r3, r3, #1
 801169c:	2b00      	cmp	r3, #0
 801169e:	d0e5      	beq.n	801166c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	f022 0202 	bic.w	r2, r2, #2
 80116ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80116b0:	f7ff fbb4 	bl	8010e1c <HAL_GetTick>
 80116b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80116b6:	e012      	b.n	80116de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80116b8:	f7ff fbb0 	bl	8010e1c <HAL_GetTick>
 80116bc:	4602      	mov	r2, r0
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	2b0a      	cmp	r3, #10
 80116c4:	d90b      	bls.n	80116de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2205      	movs	r2, #5
 80116d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80116da:	2301      	movs	r3, #1
 80116dc:	e09f      	b.n	801181e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	f003 0302 	and.w	r3, r3, #2
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d1e5      	bne.n	80116b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	7e1b      	ldrb	r3, [r3, #24]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d108      	bne.n	8011706 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	e007      	b.n	8011716 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011714:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	7e5b      	ldrb	r3, [r3, #25]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d108      	bne.n	8011730 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	e007      	b.n	8011740 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7e9b      	ldrb	r3, [r3, #26]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d108      	bne.n	801175a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f042 0220 	orr.w	r2, r2, #32
 8011756:	601a      	str	r2, [r3, #0]
 8011758:	e007      	b.n	801176a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f022 0220 	bic.w	r2, r2, #32
 8011768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	7edb      	ldrb	r3, [r3, #27]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d108      	bne.n	8011784 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f022 0210 	bic.w	r2, r2, #16
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	e007      	b.n	8011794 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f042 0210 	orr.w	r2, r2, #16
 8011792:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	7f1b      	ldrb	r3, [r3, #28]
 8011798:	2b01      	cmp	r3, #1
 801179a:	d108      	bne.n	80117ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	f042 0208 	orr.w	r2, r2, #8
 80117aa:	601a      	str	r2, [r3, #0]
 80117ac:	e007      	b.n	80117be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f022 0208 	bic.w	r2, r2, #8
 80117bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7f5b      	ldrb	r3, [r3, #29]
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	d108      	bne.n	80117d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f042 0204 	orr.w	r2, r2, #4
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	e007      	b.n	80117e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	681a      	ldr	r2, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f022 0204 	bic.w	r2, r2, #4
 80117e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	689a      	ldr	r2, [r3, #8]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	431a      	orrs	r2, r3
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	431a      	orrs	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	695b      	ldr	r3, [r3, #20]
 80117fc:	ea42 0103 	orr.w	r1, r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	1e5a      	subs	r2, r3, #1
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	430a      	orrs	r2, r1
 801180c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2201      	movs	r2, #1
 8011818:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 801181c:	2300      	movs	r3, #0
}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
	...

08011828 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8011828:	b480      	push	{r7}
 801182a:	b087      	sub	sp, #28
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801183e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8011840:	7cfb      	ldrb	r3, [r7, #19]
 8011842:	2b01      	cmp	r3, #1
 8011844:	d003      	beq.n	801184e <HAL_CAN_ConfigFilter+0x26>
 8011846:	7cfb      	ldrb	r3, [r7, #19]
 8011848:	2b02      	cmp	r3, #2
 801184a:	f040 80be 	bne.w	80119ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 801184e:	4b65      	ldr	r3, [pc, #404]	; (80119e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8011850:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011858:	f043 0201 	orr.w	r2, r3, #1
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011868:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187c:	021b      	lsls	r3, r3, #8
 801187e:	431a      	orrs	r2, r3
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	f003 031f 	and.w	r3, r3, #31
 801188e:	2201      	movs	r2, #1
 8011890:	fa02 f303 	lsl.w	r3, r2, r3
 8011894:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	43db      	mvns	r3, r3
 80118a0:	401a      	ands	r2, r3
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	69db      	ldr	r3, [r3, #28]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d123      	bne.n	80118f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	43db      	mvns	r3, r3
 80118ba:	401a      	ands	r2, r3
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	68db      	ldr	r3, [r3, #12]
 80118c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118ce:	683a      	ldr	r2, [r7, #0]
 80118d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80118d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	3248      	adds	r2, #72	; 0x48
 80118d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80118ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80118ee:	6979      	ldr	r1, [r7, #20]
 80118f0:	3348      	adds	r3, #72	; 0x48
 80118f2:	00db      	lsls	r3, r3, #3
 80118f4:	440b      	add	r3, r1
 80118f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	69db      	ldr	r3, [r3, #28]
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d122      	bne.n	8011946 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	431a      	orrs	r2, r3
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8011920:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	3248      	adds	r2, #72	; 0x48
 8011926:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801193a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801193c:	6979      	ldr	r1, [r7, #20]
 801193e:	3348      	adds	r3, #72	; 0x48
 8011940:	00db      	lsls	r3, r3, #3
 8011942:	440b      	add	r3, r1
 8011944:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	699b      	ldr	r3, [r3, #24]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d109      	bne.n	8011962 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	43db      	mvns	r3, r3
 8011958:	401a      	ands	r2, r3
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011960:	e007      	b.n	8011972 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	431a      	orrs	r2, r3
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	691b      	ldr	r3, [r3, #16]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d109      	bne.n	801198e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	43db      	mvns	r3, r3
 8011984:	401a      	ands	r2, r3
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801198c:	e007      	b.n	801199e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	431a      	orrs	r2, r3
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d107      	bne.n	80119b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	431a      	orrs	r2, r3
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80119bc:	f023 0201 	bic.w	r2, r3, #1
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	e006      	b.n	80119d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80119d6:	2301      	movs	r3, #1
  }
}
 80119d8:	4618      	mov	r0, r3
 80119da:	371c      	adds	r7, #28
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	40006400 	.word	0x40006400

080119e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b084      	sub	sp, #16
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d12e      	bne.n	8011a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2202      	movs	r2, #2
 8011a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	f022 0201 	bic.w	r2, r2, #1
 8011a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011a14:	f7ff fa02 	bl	8010e1c <HAL_GetTick>
 8011a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011a1a:	e012      	b.n	8011a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8011a1c:	f7ff f9fe 	bl	8010e1c <HAL_GetTick>
 8011a20:	4602      	mov	r2, r0
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	2b0a      	cmp	r3, #10
 8011a28:	d90b      	bls.n	8011a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2205      	movs	r2, #5
 8011a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e012      	b.n	8011a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1e5      	bne.n	8011a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8011a56:	2300      	movs	r3, #0
 8011a58:	e006      	b.n	8011a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011a66:	2301      	movs	r3, #1
  }
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b089      	sub	sp, #36	; 0x24
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8011a8e:	7ffb      	ldrb	r3, [r7, #31]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d003      	beq.n	8011a9c <HAL_CAN_AddTxMessage+0x2c>
 8011a94:	7ffb      	ldrb	r3, [r7, #31]
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	f040 80b8 	bne.w	8011c0c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d10a      	bne.n	8011abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8011aa6:	69bb      	ldr	r3, [r7, #24]
 8011aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d105      	bne.n	8011abc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	f000 80a0 	beq.w	8011bfc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	0e1b      	lsrs	r3, r3, #24
 8011ac0:	f003 0303 	and.w	r3, r3, #3
 8011ac4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b02      	cmp	r3, #2
 8011aca:	d907      	bls.n	8011adc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011ad8:	2301      	movs	r3, #1
 8011ada:	e09e      	b.n	8011c1a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8011adc:	2201      	movs	r2, #1
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	409a      	lsls	r2, r3
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10d      	bne.n	8011b0a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8011af8:	68f9      	ldr	r1, [r7, #12]
 8011afa:	6809      	ldr	r1, [r1, #0]
 8011afc:	431a      	orrs	r2, r3
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	3318      	adds	r3, #24
 8011b02:	011b      	lsls	r3, r3, #4
 8011b04:	440b      	add	r3, r1
 8011b06:	601a      	str	r2, [r3, #0]
 8011b08:	e00f      	b.n	8011b2a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011b14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011b1a:	68f9      	ldr	r1, [r7, #12]
 8011b1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8011b1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	3318      	adds	r3, #24
 8011b24:	011b      	lsls	r3, r3, #4
 8011b26:	440b      	add	r3, r1
 8011b28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6819      	ldr	r1, [r3, #0]
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	691a      	ldr	r2, [r3, #16]
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	3318      	adds	r3, #24
 8011b36:	011b      	lsls	r3, r3, #4
 8011b38:	440b      	add	r3, r1
 8011b3a:	3304      	adds	r3, #4
 8011b3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	7d1b      	ldrb	r3, [r3, #20]
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d111      	bne.n	8011b6a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	3318      	adds	r3, #24
 8011b4e:	011b      	lsls	r3, r3, #4
 8011b50:	4413      	add	r3, r2
 8011b52:	3304      	adds	r3, #4
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	6811      	ldr	r1, [r2, #0]
 8011b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	3318      	adds	r3, #24
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	440b      	add	r3, r1
 8011b66:	3304      	adds	r3, #4
 8011b68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	3307      	adds	r3, #7
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	061a      	lsls	r2, r3, #24
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	3306      	adds	r3, #6
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	041b      	lsls	r3, r3, #16
 8011b7a:	431a      	orrs	r2, r3
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	3305      	adds	r3, #5
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	021b      	lsls	r3, r3, #8
 8011b84:	4313      	orrs	r3, r2
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	3204      	adds	r2, #4
 8011b8a:	7812      	ldrb	r2, [r2, #0]
 8011b8c:	4610      	mov	r0, r2
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	6811      	ldr	r1, [r2, #0]
 8011b92:	ea43 0200 	orr.w	r2, r3, r0
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	011b      	lsls	r3, r3, #4
 8011b9a:	440b      	add	r3, r1
 8011b9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8011ba0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	3303      	adds	r3, #3
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	061a      	lsls	r2, r3, #24
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	3302      	adds	r3, #2
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	041b      	lsls	r3, r3, #16
 8011bb2:	431a      	orrs	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	021b      	lsls	r3, r3, #8
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	7812      	ldrb	r2, [r2, #0]
 8011bc2:	4610      	mov	r0, r2
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	6811      	ldr	r1, [r2, #0]
 8011bc8:	ea43 0200 	orr.w	r2, r3, r0
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	011b      	lsls	r3, r3, #4
 8011bd0:	440b      	add	r3, r1
 8011bd2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8011bd6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	3318      	adds	r3, #24
 8011be0:	011b      	lsls	r3, r3, #4
 8011be2:	4413      	add	r3, r2
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	68fa      	ldr	r2, [r7, #12]
 8011be8:	6811      	ldr	r1, [r2, #0]
 8011bea:	f043 0201 	orr.w	r2, r3, #1
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	3318      	adds	r3, #24
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	440b      	add	r3, r1
 8011bf6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e00e      	b.n	8011c1a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8011c08:	2301      	movs	r3, #1
 8011c0a:	e006      	b.n	8011c1a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011c18:	2301      	movs	r3, #1
  }
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3724      	adds	r7, #36	; 0x24
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr

08011c26 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8011c26:	b480      	push	{r7}
 8011c28:	b085      	sub	sp, #20
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c38:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8011c3a:	7afb      	ldrb	r3, [r7, #11]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d002      	beq.n	8011c46 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8011c40:	7afb      	ldrb	r3, [r7, #11]
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	d11d      	bne.n	8011c82 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	689b      	ldr	r3, [r3, #8]
 8011c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d002      	beq.n	8011c5a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	3301      	adds	r3, #1
 8011c58:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	3301      	adds	r3, #1
 8011c80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8011c82:	68fb      	ldr	r3, [r7, #12]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr

08011c90 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8011c90:	b480      	push	{r7}
 8011c92:	b087      	sub	sp, #28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
 8011c9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ca4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8011ca6:	7dfb      	ldrb	r3, [r7, #23]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d003      	beq.n	8011cb4 <HAL_CAN_GetRxMessage+0x24>
 8011cac:	7dfb      	ldrb	r3, [r7, #23]
 8011cae:	2b02      	cmp	r3, #2
 8011cb0:	f040 80f3 	bne.w	8011e9a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d10e      	bne.n	8011cd8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	f003 0303 	and.w	r3, r3, #3
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d116      	bne.n	8011cf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ccc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	e0e7      	b.n	8011ea8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	691b      	ldr	r3, [r3, #16]
 8011cde:	f003 0303 	and.w	r3, r3, #3
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d107      	bne.n	8011cf6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	e0d8      	b.n	8011ea8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	331b      	adds	r3, #27
 8011cfe:	011b      	lsls	r3, r3, #4
 8011d00:	4413      	add	r3, r2
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f003 0204 	and.w	r2, r3, #4
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d10c      	bne.n	8011d2e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	331b      	adds	r3, #27
 8011d1c:	011b      	lsls	r3, r3, #4
 8011d1e:	4413      	add	r3, r2
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	0d5b      	lsrs	r3, r3, #21
 8011d24:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	601a      	str	r2, [r3, #0]
 8011d2c:	e00b      	b.n	8011d46 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	331b      	adds	r3, #27
 8011d36:	011b      	lsls	r3, r3, #4
 8011d38:	4413      	add	r3, r2
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	08db      	lsrs	r3, r3, #3
 8011d3e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681a      	ldr	r2, [r3, #0]
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	331b      	adds	r3, #27
 8011d4e:	011b      	lsls	r3, r3, #4
 8011d50:	4413      	add	r3, r2
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f003 0202 	and.w	r2, r3, #2
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	331b      	adds	r3, #27
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	4413      	add	r3, r2
 8011d68:	3304      	adds	r3, #4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f003 020f 	and.w	r2, r3, #15
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	331b      	adds	r3, #27
 8011d7c:	011b      	lsls	r3, r3, #4
 8011d7e:	4413      	add	r3, r2
 8011d80:	3304      	adds	r3, #4
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	0a1b      	lsrs	r3, r3, #8
 8011d86:	b2da      	uxtb	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	331b      	adds	r3, #27
 8011d94:	011b      	lsls	r3, r3, #4
 8011d96:	4413      	add	r3, r2
 8011d98:	3304      	adds	r3, #4
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	0c1b      	lsrs	r3, r3, #16
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	4413      	add	r3, r2
 8011dae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	b2da      	uxtb	r2, r3
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	011b      	lsls	r3, r3, #4
 8011dc2:	4413      	add	r3, r2
 8011dc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	0a1a      	lsrs	r2, r3, #8
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	b2d2      	uxtb	r2, r2
 8011dd2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	011b      	lsls	r3, r3, #4
 8011ddc:	4413      	add	r3, r2
 8011dde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	0c1a      	lsrs	r2, r3, #16
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	3302      	adds	r3, #2
 8011dea:	b2d2      	uxtb	r2, r2
 8011dec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	011b      	lsls	r3, r3, #4
 8011df6:	4413      	add	r3, r2
 8011df8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	0e1a      	lsrs	r2, r3, #24
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	3303      	adds	r3, #3
 8011e04:	b2d2      	uxtb	r2, r2
 8011e06:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	011b      	lsls	r3, r3, #4
 8011e10:	4413      	add	r3, r2
 8011e12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	b2d2      	uxtb	r2, r2
 8011e1e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	011b      	lsls	r3, r3, #4
 8011e28:	4413      	add	r3, r2
 8011e2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	0a1a      	lsrs	r2, r3, #8
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	3305      	adds	r3, #5
 8011e36:	b2d2      	uxtb	r2, r2
 8011e38:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	011b      	lsls	r3, r3, #4
 8011e42:	4413      	add	r3, r2
 8011e44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	0c1a      	lsrs	r2, r3, #16
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	3306      	adds	r3, #6
 8011e50:	b2d2      	uxtb	r2, r2
 8011e52:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	011b      	lsls	r3, r3, #4
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	0e1a      	lsrs	r2, r3, #24
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	3307      	adds	r3, #7
 8011e6a:	b2d2      	uxtb	r2, r2
 8011e6c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d108      	bne.n	8011e86 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68da      	ldr	r2, [r3, #12]
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	f042 0220 	orr.w	r2, r2, #32
 8011e82:	60da      	str	r2, [r3, #12]
 8011e84:	e007      	b.n	8011e96 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	691a      	ldr	r2, [r3, #16]
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f042 0220 	orr.w	r2, r2, #32
 8011e94:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	e006      	b.n	8011ea8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011ea6:	2301      	movs	r3, #1
  }
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	371c      	adds	r7, #28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011ec4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d002      	beq.n	8011ed2 <HAL_CAN_ActivateNotification+0x1e>
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d109      	bne.n	8011ee6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	6959      	ldr	r1, [r3, #20]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	683a      	ldr	r2, [r7, #0]
 8011ede:	430a      	orrs	r2, r1
 8011ee0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e006      	b.n	8011ef4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
  }
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3714      	adds	r7, #20
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08a      	sub	sp, #40	; 0x28
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	695b      	ldr	r3, [r3, #20]
 8011f12:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	689b      	ldr	r3, [r3, #8]
 8011f22:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	68db      	ldr	r3, [r3, #12]
 8011f2a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	f003 0301 	and.w	r3, r3, #1
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d07c      	beq.n	8012040 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8011f46:	69bb      	ldr	r3, [r7, #24]
 8011f48:	f003 0301 	and.w	r3, r3, #1
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d023      	beq.n	8011f98 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2201      	movs	r2, #1
 8011f56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8011f58:	69bb      	ldr	r3, [r7, #24]
 8011f5a:	f003 0302 	and.w	r3, r3, #2
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d003      	beq.n	8011f6a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ef fee4 	bl	8001d30 <HAL_CAN_TxMailbox0CompleteCallback>
 8011f68:	e016      	b.n	8011f98 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8011f6a:	69bb      	ldr	r3, [r7, #24]
 8011f6c:	f003 0304 	and.w	r3, r3, #4
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d004      	beq.n	8011f7e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8011f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f7c:	e00c      	b.n	8011f98 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	f003 0308 	and.w	r3, r3, #8
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d004      	beq.n	8011f92 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f90:	e002      	b.n	8011f98 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f97f 	bl	8012296 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011f98:	69bb      	ldr	r3, [r7, #24]
 8011f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d024      	beq.n	8011fec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011faa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d003      	beq.n	8011fbe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 f959 	bl	801226e <HAL_CAN_TxMailbox1CompleteCallback>
 8011fbc:	e016      	b.n	8011fec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d004      	beq.n	8011fd2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011fce:	627b      	str	r3, [r7, #36]	; 0x24
 8011fd0:	e00c      	b.n	8011fec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8011fe4:	e002      	b.n	8011fec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 f95f 	bl	80122aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d024      	beq.n	8012040 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011ffe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8012000:	69bb      	ldr	r3, [r7, #24]
 8012002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012006:	2b00      	cmp	r3, #0
 8012008:	d003      	beq.n	8012012 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 f939 	bl	8012282 <HAL_CAN_TxMailbox2CompleteCallback>
 8012010:	e016      	b.n	8012040 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012018:	2b00      	cmp	r3, #0
 801201a:	d004      	beq.n	8012026 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012022:	627b      	str	r3, [r7, #36]	; 0x24
 8012024:	e00c      	b.n	8012040 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801202c:	2b00      	cmp	r3, #0
 801202e:	d004      	beq.n	801203a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012036:	627b      	str	r3, [r7, #36]	; 0x24
 8012038:	e002      	b.n	8012040 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f000 f93f 	bl	80122be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	f003 0308 	and.w	r3, r3, #8
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00c      	beq.n	8012064 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	f003 0310 	and.w	r3, r3, #16
 8012050:	2b00      	cmp	r3, #0
 8012052:	d007      	beq.n	8012064 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8012054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801205a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2210      	movs	r2, #16
 8012062:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8012064:	6a3b      	ldr	r3, [r7, #32]
 8012066:	f003 0304 	and.w	r3, r3, #4
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00b      	beq.n	8012086 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	f003 0308 	and.w	r3, r3, #8
 8012074:	2b00      	cmp	r3, #0
 8012076:	d006      	beq.n	8012086 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2208      	movs	r2, #8
 801207e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 f926 	bl	80122d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8012086:	6a3b      	ldr	r3, [r7, #32]
 8012088:	f003 0302 	and.w	r3, r3, #2
 801208c:	2b00      	cmp	r3, #0
 801208e:	d009      	beq.n	80120a4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	f003 0303 	and.w	r3, r3, #3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7ef fdae 	bl	8001c00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d00c      	beq.n	80120c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	f003 0310 	and.w	r3, r3, #16
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d007      	beq.n	80120c8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80120be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2210      	movs	r2, #16
 80120c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	f003 0320 	and.w	r3, r3, #32
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00b      	beq.n	80120ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	f003 0308 	and.w	r3, r3, #8
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d006      	beq.n	80120ea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2208      	movs	r2, #8
 80120e2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 f8fe 	bl	80122e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	f003 0310 	and.w	r3, r3, #16
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d009      	beq.n	8012108 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	f003 0303 	and.w	r3, r3, #3
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d002      	beq.n	8012108 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ef fdb6 	bl	8001c74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8012108:	6a3b      	ldr	r3, [r7, #32]
 801210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00b      	beq.n	801212a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	f003 0310 	and.w	r3, r3, #16
 8012118:	2b00      	cmp	r3, #0
 801211a:	d006      	beq.n	801212a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2210      	movs	r2, #16
 8012122:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 f8e8 	bl	80122fa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00b      	beq.n	801214c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8012134:	69fb      	ldr	r3, [r7, #28]
 8012136:	f003 0308 	and.w	r3, r3, #8
 801213a:	2b00      	cmp	r3, #0
 801213c:	d006      	beq.n	801214c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2208      	movs	r2, #8
 8012144:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f000 f8e1 	bl	801230e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012152:	2b00      	cmp	r3, #0
 8012154:	d07b      	beq.n	801224e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	f003 0304 	and.w	r3, r3, #4
 801215c:	2b00      	cmp	r3, #0
 801215e:	d072      	beq.n	8012246 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012166:	2b00      	cmp	r3, #0
 8012168:	d008      	beq.n	801217c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012170:	2b00      	cmp	r3, #0
 8012172:	d003      	beq.n	801217c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8012174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801217c:	6a3b      	ldr	r3, [r7, #32]
 801217e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012182:	2b00      	cmp	r3, #0
 8012184:	d008      	beq.n	8012198 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801218c:	2b00      	cmp	r3, #0
 801218e:	d003      	beq.n	8012198 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	f043 0302 	orr.w	r3, r3, #2
 8012196:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012198:	6a3b      	ldr	r3, [r7, #32]
 801219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d008      	beq.n	80121b4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d003      	beq.n	80121b4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	f043 0304 	orr.w	r3, r3, #4
 80121b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80121b4:	6a3b      	ldr	r3, [r7, #32]
 80121b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d043      	beq.n	8012246 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d03e      	beq.n	8012246 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80121ce:	2b60      	cmp	r3, #96	; 0x60
 80121d0:	d02b      	beq.n	801222a <HAL_CAN_IRQHandler+0x32a>
 80121d2:	2b60      	cmp	r3, #96	; 0x60
 80121d4:	d82e      	bhi.n	8012234 <HAL_CAN_IRQHandler+0x334>
 80121d6:	2b50      	cmp	r3, #80	; 0x50
 80121d8:	d022      	beq.n	8012220 <HAL_CAN_IRQHandler+0x320>
 80121da:	2b50      	cmp	r3, #80	; 0x50
 80121dc:	d82a      	bhi.n	8012234 <HAL_CAN_IRQHandler+0x334>
 80121de:	2b40      	cmp	r3, #64	; 0x40
 80121e0:	d019      	beq.n	8012216 <HAL_CAN_IRQHandler+0x316>
 80121e2:	2b40      	cmp	r3, #64	; 0x40
 80121e4:	d826      	bhi.n	8012234 <HAL_CAN_IRQHandler+0x334>
 80121e6:	2b30      	cmp	r3, #48	; 0x30
 80121e8:	d010      	beq.n	801220c <HAL_CAN_IRQHandler+0x30c>
 80121ea:	2b30      	cmp	r3, #48	; 0x30
 80121ec:	d822      	bhi.n	8012234 <HAL_CAN_IRQHandler+0x334>
 80121ee:	2b10      	cmp	r3, #16
 80121f0:	d002      	beq.n	80121f8 <HAL_CAN_IRQHandler+0x2f8>
 80121f2:	2b20      	cmp	r3, #32
 80121f4:	d005      	beq.n	8012202 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80121f6:	e01d      	b.n	8012234 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80121f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fa:	f043 0308 	orr.w	r3, r3, #8
 80121fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012200:	e019      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8012202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012204:	f043 0310 	orr.w	r3, r3, #16
 8012208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801220a:	e014      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	f043 0320 	orr.w	r3, r3, #32
 8012212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012214:	e00f      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8012216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801221c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801221e:	e00a      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8012220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012226:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012228:	e005      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012230:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012232:	e000      	b.n	8012236 <HAL_CAN_IRQHandler+0x336>
            break;
 8012234:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	699a      	ldr	r2, [r3, #24]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012244:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2204      	movs	r2, #4
 801224c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2b00      	cmp	r3, #0
 8012252:	d008      	beq.n	8012266 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225a:	431a      	orrs	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f7ef fd41 	bl	8001ce8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8012266:	bf00      	nop
 8012268:	3728      	adds	r7, #40	; 0x28
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8012276:	bf00      	nop
 8012278:	370c      	adds	r7, #12
 801227a:	46bd      	mov	sp, r7
 801227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012280:	4770      	bx	lr

08012282 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012282:	b480      	push	{r7}
 8012284:	b083      	sub	sp, #12
 8012286:	af00      	add	r7, sp, #0
 8012288:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801228a:	bf00      	nop
 801228c:	370c      	adds	r7, #12
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr

08012296 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012296:	b480      	push	{r7}
 8012298:	b083      	sub	sp, #12
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801229e:	bf00      	nop
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr

080122aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80122aa:	b480      	push	{r7}
 80122ac:	b083      	sub	sp, #12
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80122b2:	bf00      	nop
 80122b4:	370c      	adds	r7, #12
 80122b6:	46bd      	mov	sp, r7
 80122b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122bc:	4770      	bx	lr

080122be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80122be:	b480      	push	{r7}
 80122c0:	b083      	sub	sp, #12
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80122c6:	bf00      	nop
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80122d2:	b480      	push	{r7}
 80122d4:	b083      	sub	sp, #12
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80122da:	bf00      	nop
 80122dc:	370c      	adds	r7, #12
 80122de:	46bd      	mov	sp, r7
 80122e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e4:	4770      	bx	lr

080122e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80122e6:	b480      	push	{r7}
 80122e8:	b083      	sub	sp, #12
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80122ee:	bf00      	nop
 80122f0:	370c      	adds	r7, #12
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr

080122fa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80122fa:	b480      	push	{r7}
 80122fc:	b083      	sub	sp, #12
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8012302:	bf00      	nop
 8012304:	370c      	adds	r7, #12
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr

0801230e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801230e:	b480      	push	{r7}
 8012310:	b083      	sub	sp, #12
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8012316:	bf00      	nop
 8012318:	370c      	adds	r7, #12
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8012322:	b480      	push	{r7}
 8012324:	b085      	sub	sp, #20
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801232a:	2300      	movs	r3, #0
 801232c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012334:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8012336:	7bbb      	ldrb	r3, [r7, #14]
 8012338:	2b01      	cmp	r3, #1
 801233a:	d002      	beq.n	8012342 <HAL_CAN_ResetError+0x20>
 801233c:	7bbb      	ldrb	r3, [r7, #14]
 801233e:	2b02      	cmp	r3, #2
 8012340:	d103      	bne.n	801234a <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	625a      	str	r2, [r3, #36]	; 0x24
 8012348:	e007      	b.n	801235a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8012356:	2301      	movs	r3, #1
 8012358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 801235a:	7bfb      	ldrb	r3, [r7, #15]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3714      	adds	r7, #20
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <__NVIC_SetPriorityGrouping>:
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f003 0307 	and.w	r3, r3, #7
 8012376:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012378:	4b0c      	ldr	r3, [pc, #48]	; (80123ac <__NVIC_SetPriorityGrouping+0x44>)
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801237e:	68ba      	ldr	r2, [r7, #8]
 8012380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012384:	4013      	ands	r3, r2
 8012386:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801239a:	4a04      	ldr	r2, [pc, #16]	; (80123ac <__NVIC_SetPriorityGrouping+0x44>)
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	60d3      	str	r3, [r2, #12]
}
 80123a0:	bf00      	nop
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	e000ed00 	.word	0xe000ed00

080123b0 <__NVIC_GetPriorityGrouping>:
{
 80123b0:	b480      	push	{r7}
 80123b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80123b4:	4b04      	ldr	r3, [pc, #16]	; (80123c8 <__NVIC_GetPriorityGrouping+0x18>)
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	0a1b      	lsrs	r3, r3, #8
 80123ba:	f003 0307 	and.w	r3, r3, #7
}
 80123be:	4618      	mov	r0, r3
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr
 80123c8:	e000ed00 	.word	0xe000ed00

080123cc <__NVIC_EnableIRQ>:
{
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	4603      	mov	r3, r0
 80123d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80123d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	db0b      	blt.n	80123f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	f003 021f 	and.w	r2, r3, #31
 80123e4:	4907      	ldr	r1, [pc, #28]	; (8012404 <__NVIC_EnableIRQ+0x38>)
 80123e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80123ea:	095b      	lsrs	r3, r3, #5
 80123ec:	2001      	movs	r0, #1
 80123ee:	fa00 f202 	lsl.w	r2, r0, r2
 80123f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80123f6:	bf00      	nop
 80123f8:	370c      	adds	r7, #12
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	e000e100 	.word	0xe000e100

08012408 <__NVIC_SetPriority>:
{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
 801240e:	4603      	mov	r3, r0
 8012410:	6039      	str	r1, [r7, #0]
 8012412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012418:	2b00      	cmp	r3, #0
 801241a:	db0a      	blt.n	8012432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	b2da      	uxtb	r2, r3
 8012420:	490c      	ldr	r1, [pc, #48]	; (8012454 <__NVIC_SetPriority+0x4c>)
 8012422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012426:	0112      	lsls	r2, r2, #4
 8012428:	b2d2      	uxtb	r2, r2
 801242a:	440b      	add	r3, r1
 801242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012430:	e00a      	b.n	8012448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	b2da      	uxtb	r2, r3
 8012436:	4908      	ldr	r1, [pc, #32]	; (8012458 <__NVIC_SetPriority+0x50>)
 8012438:	79fb      	ldrb	r3, [r7, #7]
 801243a:	f003 030f 	and.w	r3, r3, #15
 801243e:	3b04      	subs	r3, #4
 8012440:	0112      	lsls	r2, r2, #4
 8012442:	b2d2      	uxtb	r2, r2
 8012444:	440b      	add	r3, r1
 8012446:	761a      	strb	r2, [r3, #24]
}
 8012448:	bf00      	nop
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr
 8012454:	e000e100 	.word	0xe000e100
 8012458:	e000ed00 	.word	0xe000ed00

0801245c <NVIC_EncodePriority>:
{
 801245c:	b480      	push	{r7}
 801245e:	b089      	sub	sp, #36	; 0x24
 8012460:	af00      	add	r7, sp, #0
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f003 0307 	and.w	r3, r3, #7
 801246e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	f1c3 0307 	rsb	r3, r3, #7
 8012476:	2b04      	cmp	r3, #4
 8012478:	bf28      	it	cs
 801247a:	2304      	movcs	r3, #4
 801247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801247e:	69fb      	ldr	r3, [r7, #28]
 8012480:	3304      	adds	r3, #4
 8012482:	2b06      	cmp	r3, #6
 8012484:	d902      	bls.n	801248c <NVIC_EncodePriority+0x30>
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	3b03      	subs	r3, #3
 801248a:	e000      	b.n	801248e <NVIC_EncodePriority+0x32>
 801248c:	2300      	movs	r3, #0
 801248e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012490:	f04f 32ff 	mov.w	r2, #4294967295
 8012494:	69bb      	ldr	r3, [r7, #24]
 8012496:	fa02 f303 	lsl.w	r3, r2, r3
 801249a:	43da      	mvns	r2, r3
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	401a      	ands	r2, r3
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80124a4:	f04f 31ff 	mov.w	r1, #4294967295
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	fa01 f303 	lsl.w	r3, r1, r3
 80124ae:	43d9      	mvns	r1, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80124b4:	4313      	orrs	r3, r2
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3724      	adds	r7, #36	; 0x24
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80124ca:	6878      	ldr	r0, [r7, #4]
 80124cc:	f7ff ff4c 	bl	8012368 <__NVIC_SetPriorityGrouping>
}
 80124d0:	bf00      	nop
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	4603      	mov	r3, r0
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80124e6:	2300      	movs	r3, #0
 80124e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80124ea:	f7ff ff61 	bl	80123b0 <__NVIC_GetPriorityGrouping>
 80124ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	68b9      	ldr	r1, [r7, #8]
 80124f4:	6978      	ldr	r0, [r7, #20]
 80124f6:	f7ff ffb1 	bl	801245c <NVIC_EncodePriority>
 80124fa:	4602      	mov	r2, r0
 80124fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f7ff ff80 	bl	8012408 <__NVIC_SetPriority>
}
 8012508:	bf00      	nop
 801250a:	3718      	adds	r7, #24
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801251e:	4618      	mov	r0, r3
 8012520:	f7ff ff54 	bl	80123cc <__NVIC_EnableIRQ>
}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d101      	bne.n	801253e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801253a:	2301      	movs	r3, #1
 801253c:	e00e      	b.n	801255c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	795b      	ldrb	r3, [r3, #5]
 8012542:	b2db      	uxtb	r3, r3
 8012544:	2b00      	cmp	r3, #0
 8012546:	d105      	bne.n	8012554 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2200      	movs	r2, #0
 801254c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7fd fa4c 	bl	800f9ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2201      	movs	r2, #1
 8012558:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3708      	adds	r7, #8
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b086      	sub	sp, #24
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801256c:	2300      	movs	r3, #0
 801256e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8012570:	f7fe fc54 	bl	8010e1c <HAL_GetTick>
 8012574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d101      	bne.n	8012580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801257c:	2301      	movs	r3, #1
 801257e:	e099      	b.n	80126b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2202      	movs	r2, #2
 8012584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2200      	movs	r2, #0
 801258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	f022 0201 	bic.w	r2, r2, #1
 801259e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80125a0:	e00f      	b.n	80125c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80125a2:	f7fe fc3b 	bl	8010e1c <HAL_GetTick>
 80125a6:	4602      	mov	r2, r0
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	1ad3      	subs	r3, r2, r3
 80125ac:	2b05      	cmp	r3, #5
 80125ae:	d908      	bls.n	80125c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2220      	movs	r2, #32
 80125b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2203      	movs	r2, #3
 80125ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80125be:	2303      	movs	r3, #3
 80125c0:	e078      	b.n	80126b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f003 0301 	and.w	r3, r3, #1
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d1e8      	bne.n	80125a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	4b38      	ldr	r3, [pc, #224]	; (80126bc <HAL_DMA_Init+0x158>)
 80125dc:	4013      	ands	r3, r2
 80125de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	685a      	ldr	r2, [r3, #4]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80125ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	691b      	ldr	r3, [r3, #16]
 80125f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80125fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	699b      	ldr	r3, [r3, #24]
 8012600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6a1b      	ldr	r3, [r3, #32]
 801260c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	4313      	orrs	r3, r2
 8012612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012618:	2b04      	cmp	r3, #4
 801261a:	d107      	bne.n	801262c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012624:	4313      	orrs	r3, r2
 8012626:	697a      	ldr	r2, [r7, #20]
 8012628:	4313      	orrs	r3, r2
 801262a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	695b      	ldr	r3, [r3, #20]
 801263a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	f023 0307 	bic.w	r3, r3, #7
 8012642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	4313      	orrs	r3, r2
 801264c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012652:	2b04      	cmp	r3, #4
 8012654:	d117      	bne.n	8012686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801265a:	697a      	ldr	r2, [r7, #20]
 801265c:	4313      	orrs	r3, r2
 801265e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012664:	2b00      	cmp	r3, #0
 8012666:	d00e      	beq.n	8012686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 fa6f 	bl	8012b4c <DMA_CheckFifoParam>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d008      	beq.n	8012686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2240      	movs	r2, #64	; 0x40
 8012678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2201      	movs	r2, #1
 801267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8012682:	2301      	movs	r3, #1
 8012684:	e016      	b.n	80126b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 fa26 	bl	8012ae0 <DMA_CalcBaseAndBitshift>
 8012694:	4603      	mov	r3, r0
 8012696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801269c:	223f      	movs	r2, #63	; 0x3f
 801269e:	409a      	lsls	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2201      	movs	r2, #1
 80126ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80126b2:	2300      	movs	r3, #0
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3718      	adds	r7, #24
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	f010803f 	.word	0xf010803f

080126c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
 80126cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80126ce:	2300      	movs	r3, #0
 80126d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d101      	bne.n	80126e6 <HAL_DMA_Start_IT+0x26>
 80126e2:	2302      	movs	r3, #2
 80126e4:	e040      	b.n	8012768 <HAL_DMA_Start_IT+0xa8>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	2201      	movs	r2, #1
 80126ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b01      	cmp	r3, #1
 80126f8:	d12f      	bne.n	801275a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2202      	movs	r2, #2
 80126fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2200      	movs	r2, #0
 8012706:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	68b9      	ldr	r1, [r7, #8]
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f000 f9b8 	bl	8012a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012718:	223f      	movs	r2, #63	; 0x3f
 801271a:	409a      	lsls	r2, r3
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f042 0216 	orr.w	r2, r2, #22
 801272e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012734:	2b00      	cmp	r3, #0
 8012736:	d007      	beq.n	8012748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f042 0208 	orr.w	r2, r2, #8
 8012746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	f042 0201 	orr.w	r2, r2, #1
 8012756:	601a      	str	r2, [r3, #0]
 8012758:	e005      	b.n	8012766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2200      	movs	r2, #0
 801275e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8012762:	2302      	movs	r3, #2
 8012764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8012766:	7dfb      	ldrb	r3, [r7, #23]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3718      	adds	r7, #24
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b086      	sub	sp, #24
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8012778:	2300      	movs	r3, #0
 801277a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801277c:	4b8e      	ldr	r3, [pc, #568]	; (80129b8 <HAL_DMA_IRQHandler+0x248>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	4a8e      	ldr	r2, [pc, #568]	; (80129bc <HAL_DMA_IRQHandler+0x24c>)
 8012782:	fba2 2303 	umull	r2, r3, r2, r3
 8012786:	0a9b      	lsrs	r3, r3, #10
 8012788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801278e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801279a:	2208      	movs	r2, #8
 801279c:	409a      	lsls	r2, r3
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	4013      	ands	r3, r2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d01a      	beq.n	80127dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f003 0304 	and.w	r3, r3, #4
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d013      	beq.n	80127dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	681a      	ldr	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	f022 0204 	bic.w	r2, r2, #4
 80127c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127c8:	2208      	movs	r2, #8
 80127ca:	409a      	lsls	r2, r3
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127d4:	f043 0201 	orr.w	r2, r3, #1
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127e0:	2201      	movs	r2, #1
 80127e2:	409a      	lsls	r2, r3
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	4013      	ands	r3, r2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d012      	beq.n	8012812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	695b      	ldr	r3, [r3, #20]
 80127f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00b      	beq.n	8012812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80127fe:	2201      	movs	r2, #1
 8012800:	409a      	lsls	r2, r3
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801280a:	f043 0202 	orr.w	r2, r3, #2
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012816:	2204      	movs	r2, #4
 8012818:	409a      	lsls	r2, r3
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	4013      	ands	r3, r2
 801281e:	2b00      	cmp	r3, #0
 8012820:	d012      	beq.n	8012848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f003 0302 	and.w	r3, r3, #2
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00b      	beq.n	8012848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012834:	2204      	movs	r2, #4
 8012836:	409a      	lsls	r2, r3
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012840:	f043 0204 	orr.w	r2, r3, #4
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801284c:	2210      	movs	r2, #16
 801284e:	409a      	lsls	r2, r3
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	4013      	ands	r3, r2
 8012854:	2b00      	cmp	r3, #0
 8012856:	d043      	beq.n	80128e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	f003 0308 	and.w	r3, r3, #8
 8012862:	2b00      	cmp	r3, #0
 8012864:	d03c      	beq.n	80128e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801286a:	2210      	movs	r2, #16
 801286c:	409a      	lsls	r2, r3
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801287c:	2b00      	cmp	r3, #0
 801287e:	d018      	beq.n	80128b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801288a:	2b00      	cmp	r3, #0
 801288c:	d108      	bne.n	80128a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012892:	2b00      	cmp	r3, #0
 8012894:	d024      	beq.n	80128e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	4798      	blx	r3
 801289e:	e01f      	b.n	80128e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d01b      	beq.n	80128e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	4798      	blx	r3
 80128b0:	e016      	b.n	80128e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d107      	bne.n	80128d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	f022 0208 	bic.w	r2, r2, #8
 80128ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d003      	beq.n	80128e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80128e4:	2220      	movs	r2, #32
 80128e6:	409a      	lsls	r2, r3
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	4013      	ands	r3, r2
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f000 808f 	beq.w	8012a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f003 0310 	and.w	r3, r3, #16
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	f000 8087 	beq.w	8012a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012906:	2220      	movs	r2, #32
 8012908:	409a      	lsls	r2, r3
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012914:	b2db      	uxtb	r3, r3
 8012916:	2b05      	cmp	r3, #5
 8012918:	d136      	bne.n	8012988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	681a      	ldr	r2, [r3, #0]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	f022 0216 	bic.w	r2, r2, #22
 8012928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	695a      	ldr	r2, [r3, #20]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801293e:	2b00      	cmp	r3, #0
 8012940:	d103      	bne.n	801294a <HAL_DMA_IRQHandler+0x1da>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012946:	2b00      	cmp	r3, #0
 8012948:	d007      	beq.n	801295a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	f022 0208 	bic.w	r2, r2, #8
 8012958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801295e:	223f      	movs	r2, #63	; 0x3f
 8012960:	409a      	lsls	r2, r3
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2201      	movs	r2, #1
 801296a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801297a:	2b00      	cmp	r3, #0
 801297c:	d07e      	beq.n	8012a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	4798      	blx	r3
        }
        return;
 8012986:	e079      	b.n	8012a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012992:	2b00      	cmp	r3, #0
 8012994:	d01d      	beq.n	80129d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10d      	bne.n	80129c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d031      	beq.n	8012a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	4798      	blx	r3
 80129b4:	e02c      	b.n	8012a10 <HAL_DMA_IRQHandler+0x2a0>
 80129b6:	bf00      	nop
 80129b8:	20000020 	.word	0x20000020
 80129bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d023      	beq.n	8012a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	4798      	blx	r3
 80129d0:	e01e      	b.n	8012a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10f      	bne.n	8012a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f022 0210 	bic.w	r2, r2, #16
 80129ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	2201      	movs	r2, #1
 80129f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d003      	beq.n	8012a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d032      	beq.n	8012a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a1c:	f003 0301 	and.w	r3, r3, #1
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d022      	beq.n	8012a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2205      	movs	r2, #5
 8012a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f022 0201 	bic.w	r2, r2, #1
 8012a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	60bb      	str	r3, [r7, #8]
 8012a42:	697a      	ldr	r2, [r7, #20]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d307      	bcc.n	8012a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1f2      	bne.n	8012a3c <HAL_DMA_IRQHandler+0x2cc>
 8012a56:	e000      	b.n	8012a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8012a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2200      	movs	r2, #0
 8012a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d005      	beq.n	8012a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	4798      	blx	r3
 8012a7a:	e000      	b.n	8012a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8012a7c:	bf00      	nop
    }
  }
}
 8012a7e:	3718      	adds	r7, #24
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012a84:	b480      	push	{r7}
 8012a86:	b085      	sub	sp, #20
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
 8012a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	683a      	ldr	r2, [r7, #0]
 8012aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	689b      	ldr	r3, [r3, #8]
 8012aae:	2b40      	cmp	r3, #64	; 0x40
 8012ab0:	d108      	bne.n	8012ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	68ba      	ldr	r2, [r7, #8]
 8012ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8012ac2:	e007      	b.n	8012ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	68ba      	ldr	r2, [r7, #8]
 8012aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	60da      	str	r2, [r3, #12]
}
 8012ad4:	bf00      	nop
 8012ad6:	3714      	adds	r7, #20
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b085      	sub	sp, #20
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	3b10      	subs	r3, #16
 8012af0:	4a14      	ldr	r2, [pc, #80]	; (8012b44 <DMA_CalcBaseAndBitshift+0x64>)
 8012af2:	fba2 2303 	umull	r2, r3, r2, r3
 8012af6:	091b      	lsrs	r3, r3, #4
 8012af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012afa:	4a13      	ldr	r2, [pc, #76]	; (8012b48 <DMA_CalcBaseAndBitshift+0x68>)
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	4413      	add	r3, r2
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	461a      	mov	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2b03      	cmp	r3, #3
 8012b0c:	d909      	bls.n	8012b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012b16:	f023 0303 	bic.w	r3, r3, #3
 8012b1a:	1d1a      	adds	r2, r3, #4
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8012b20:	e007      	b.n	8012b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8012b2a:	f023 0303 	bic.w	r3, r3, #3
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3714      	adds	r7, #20
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	aaaaaaab 	.word	0xaaaaaaab
 8012b48:	0801fdf0 	.word	0x0801fdf0

08012b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b085      	sub	sp, #20
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	699b      	ldr	r3, [r3, #24]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d11f      	bne.n	8012ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	2b03      	cmp	r3, #3
 8012b6a:	d856      	bhi.n	8012c1a <DMA_CheckFifoParam+0xce>
 8012b6c:	a201      	add	r2, pc, #4	; (adr r2, 8012b74 <DMA_CheckFifoParam+0x28>)
 8012b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b72:	bf00      	nop
 8012b74:	08012b85 	.word	0x08012b85
 8012b78:	08012b97 	.word	0x08012b97
 8012b7c:	08012b85 	.word	0x08012b85
 8012b80:	08012c1b 	.word	0x08012c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d046      	beq.n	8012c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012b90:	2301      	movs	r3, #1
 8012b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012b94:	e043      	b.n	8012c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012b9e:	d140      	bne.n	8012c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012ba4:	e03d      	b.n	8012c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	699b      	ldr	r3, [r3, #24]
 8012baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012bae:	d121      	bne.n	8012bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	2b03      	cmp	r3, #3
 8012bb4:	d837      	bhi.n	8012c26 <DMA_CheckFifoParam+0xda>
 8012bb6:	a201      	add	r2, pc, #4	; (adr r2, 8012bbc <DMA_CheckFifoParam+0x70>)
 8012bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bbc:	08012bcd 	.word	0x08012bcd
 8012bc0:	08012bd3 	.word	0x08012bd3
 8012bc4:	08012bcd 	.word	0x08012bcd
 8012bc8:	08012be5 	.word	0x08012be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	73fb      	strb	r3, [r7, #15]
      break;
 8012bd0:	e030      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d025      	beq.n	8012c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8012bde:	2301      	movs	r3, #1
 8012be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012be2:	e022      	b.n	8012c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012bec:	d11f      	bne.n	8012c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8012bf2:	e01c      	b.n	8012c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	2b02      	cmp	r3, #2
 8012bf8:	d903      	bls.n	8012c02 <DMA_CheckFifoParam+0xb6>
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2b03      	cmp	r3, #3
 8012bfe:	d003      	beq.n	8012c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8012c00:	e018      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8012c02:	2301      	movs	r3, #1
 8012c04:	73fb      	strb	r3, [r7, #15]
      break;
 8012c06:	e015      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00e      	beq.n	8012c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8012c14:	2301      	movs	r3, #1
 8012c16:	73fb      	strb	r3, [r7, #15]
      break;
 8012c18:	e00b      	b.n	8012c32 <DMA_CheckFifoParam+0xe6>
      break;
 8012c1a:	bf00      	nop
 8012c1c:	e00a      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;
 8012c1e:	bf00      	nop
 8012c20:	e008      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;
 8012c22:	bf00      	nop
 8012c24:	e006      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;
 8012c26:	bf00      	nop
 8012c28:	e004      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;
 8012c2a:	bf00      	nop
 8012c2c:	e002      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8012c2e:	bf00      	nop
 8012c30:	e000      	b.n	8012c34 <DMA_CheckFifoParam+0xe8>
      break;
 8012c32:	bf00      	nop
    }
  } 
  
  return status; 
 8012c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3714      	adds	r7, #20
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop

08012c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b089      	sub	sp, #36	; 0x24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012c52:	2300      	movs	r3, #0
 8012c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012c56:	2300      	movs	r3, #0
 8012c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	61fb      	str	r3, [r7, #28]
 8012c5e:	e16b      	b.n	8012f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012c60:	2201      	movs	r2, #1
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	fa02 f303 	lsl.w	r3, r2, r3
 8012c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	697a      	ldr	r2, [r7, #20]
 8012c70:	4013      	ands	r3, r2
 8012c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012c74:	693a      	ldr	r2, [r7, #16]
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	f040 815a 	bne.w	8012f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	f003 0303 	and.w	r3, r3, #3
 8012c86:	2b01      	cmp	r3, #1
 8012c88:	d005      	beq.n	8012c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	d130      	bne.n	8012cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	2203      	movs	r2, #3
 8012ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8012ca6:	43db      	mvns	r3, r3
 8012ca8:	69ba      	ldr	r2, [r7, #24]
 8012caa:	4013      	ands	r3, r2
 8012cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	68da      	ldr	r2, [r3, #12]
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	005b      	lsls	r3, r3, #1
 8012cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8012cba:	69ba      	ldr	r2, [r7, #24]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	69ba      	ldr	r2, [r7, #24]
 8012cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012ccc:	2201      	movs	r2, #1
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8012cd4:	43db      	mvns	r3, r3
 8012cd6:	69ba      	ldr	r2, [r7, #24]
 8012cd8:	4013      	ands	r3, r2
 8012cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	091b      	lsrs	r3, r3, #4
 8012ce2:	f003 0201 	and.w	r2, r3, #1
 8012ce6:	69fb      	ldr	r3, [r7, #28]
 8012ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8012cec:	69ba      	ldr	r2, [r7, #24]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	69ba      	ldr	r2, [r7, #24]
 8012cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	f003 0303 	and.w	r3, r3, #3
 8012d00:	2b03      	cmp	r3, #3
 8012d02:	d017      	beq.n	8012d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	005b      	lsls	r3, r3, #1
 8012d0e:	2203      	movs	r2, #3
 8012d10:	fa02 f303 	lsl.w	r3, r2, r3
 8012d14:	43db      	mvns	r3, r3
 8012d16:	69ba      	ldr	r2, [r7, #24]
 8012d18:	4013      	ands	r3, r2
 8012d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	689a      	ldr	r2, [r3, #8]
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	005b      	lsls	r3, r3, #1
 8012d24:	fa02 f303 	lsl.w	r3, r2, r3
 8012d28:	69ba      	ldr	r2, [r7, #24]
 8012d2a:	4313      	orrs	r3, r2
 8012d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	69ba      	ldr	r2, [r7, #24]
 8012d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	f003 0303 	and.w	r3, r3, #3
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d123      	bne.n	8012d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	08da      	lsrs	r2, r3, #3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	3208      	adds	r2, #8
 8012d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	f003 0307 	and.w	r3, r3, #7
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	220f      	movs	r2, #15
 8012d58:	fa02 f303 	lsl.w	r3, r2, r3
 8012d5c:	43db      	mvns	r3, r3
 8012d5e:	69ba      	ldr	r2, [r7, #24]
 8012d60:	4013      	ands	r3, r2
 8012d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	691a      	ldr	r2, [r3, #16]
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	f003 0307 	and.w	r3, r3, #7
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	fa02 f303 	lsl.w	r3, r2, r3
 8012d74:	69ba      	ldr	r2, [r7, #24]
 8012d76:	4313      	orrs	r3, r2
 8012d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	08da      	lsrs	r2, r3, #3
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3208      	adds	r2, #8
 8012d82:	69b9      	ldr	r1, [r7, #24]
 8012d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012d8e:	69fb      	ldr	r3, [r7, #28]
 8012d90:	005b      	lsls	r3, r3, #1
 8012d92:	2203      	movs	r2, #3
 8012d94:	fa02 f303 	lsl.w	r3, r2, r3
 8012d98:	43db      	mvns	r3, r3
 8012d9a:	69ba      	ldr	r2, [r7, #24]
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012da0:	683b      	ldr	r3, [r7, #0]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	f003 0203 	and.w	r2, r3, #3
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	fa02 f303 	lsl.w	r3, r2, r3
 8012db0:	69ba      	ldr	r2, [r7, #24]
 8012db2:	4313      	orrs	r3, r2
 8012db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	69ba      	ldr	r2, [r7, #24]
 8012dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f000 80b4 	beq.w	8012f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012dca:	2300      	movs	r3, #0
 8012dcc:	60fb      	str	r3, [r7, #12]
 8012dce:	4b60      	ldr	r3, [pc, #384]	; (8012f50 <HAL_GPIO_Init+0x30c>)
 8012dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dd2:	4a5f      	ldr	r2, [pc, #380]	; (8012f50 <HAL_GPIO_Init+0x30c>)
 8012dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8012dda:	4b5d      	ldr	r3, [pc, #372]	; (8012f50 <HAL_GPIO_Init+0x30c>)
 8012ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012de2:	60fb      	str	r3, [r7, #12]
 8012de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012de6:	4a5b      	ldr	r2, [pc, #364]	; (8012f54 <HAL_GPIO_Init+0x310>)
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	089b      	lsrs	r3, r3, #2
 8012dec:	3302      	adds	r3, #2
 8012dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	f003 0303 	and.w	r3, r3, #3
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	220f      	movs	r2, #15
 8012dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8012e02:	43db      	mvns	r3, r3
 8012e04:	69ba      	ldr	r2, [r7, #24]
 8012e06:	4013      	ands	r3, r2
 8012e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	4a52      	ldr	r2, [pc, #328]	; (8012f58 <HAL_GPIO_Init+0x314>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d02b      	beq.n	8012e6a <HAL_GPIO_Init+0x226>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	4a51      	ldr	r2, [pc, #324]	; (8012f5c <HAL_GPIO_Init+0x318>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d025      	beq.n	8012e66 <HAL_GPIO_Init+0x222>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	4a50      	ldr	r2, [pc, #320]	; (8012f60 <HAL_GPIO_Init+0x31c>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d01f      	beq.n	8012e62 <HAL_GPIO_Init+0x21e>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	4a4f      	ldr	r2, [pc, #316]	; (8012f64 <HAL_GPIO_Init+0x320>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d019      	beq.n	8012e5e <HAL_GPIO_Init+0x21a>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4a4e      	ldr	r2, [pc, #312]	; (8012f68 <HAL_GPIO_Init+0x324>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d013      	beq.n	8012e5a <HAL_GPIO_Init+0x216>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	4a4d      	ldr	r2, [pc, #308]	; (8012f6c <HAL_GPIO_Init+0x328>)
 8012e36:	4293      	cmp	r3, r2
 8012e38:	d00d      	beq.n	8012e56 <HAL_GPIO_Init+0x212>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4a4c      	ldr	r2, [pc, #304]	; (8012f70 <HAL_GPIO_Init+0x32c>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d007      	beq.n	8012e52 <HAL_GPIO_Init+0x20e>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4a4b      	ldr	r2, [pc, #300]	; (8012f74 <HAL_GPIO_Init+0x330>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d101      	bne.n	8012e4e <HAL_GPIO_Init+0x20a>
 8012e4a:	2307      	movs	r3, #7
 8012e4c:	e00e      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e4e:	2308      	movs	r3, #8
 8012e50:	e00c      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e52:	2306      	movs	r3, #6
 8012e54:	e00a      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e56:	2305      	movs	r3, #5
 8012e58:	e008      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e5a:	2304      	movs	r3, #4
 8012e5c:	e006      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e5e:	2303      	movs	r3, #3
 8012e60:	e004      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e62:	2302      	movs	r3, #2
 8012e64:	e002      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e66:	2301      	movs	r3, #1
 8012e68:	e000      	b.n	8012e6c <HAL_GPIO_Init+0x228>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	69fa      	ldr	r2, [r7, #28]
 8012e6e:	f002 0203 	and.w	r2, r2, #3
 8012e72:	0092      	lsls	r2, r2, #2
 8012e74:	4093      	lsls	r3, r2
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	4313      	orrs	r3, r2
 8012e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012e7c:	4935      	ldr	r1, [pc, #212]	; (8012f54 <HAL_GPIO_Init+0x310>)
 8012e7e:	69fb      	ldr	r3, [r7, #28]
 8012e80:	089b      	lsrs	r3, r3, #2
 8012e82:	3302      	adds	r3, #2
 8012e84:	69ba      	ldr	r2, [r7, #24]
 8012e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012e8a:	4b3b      	ldr	r3, [pc, #236]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012e8c:	689b      	ldr	r3, [r3, #8]
 8012e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	43db      	mvns	r3, r3
 8012e94:	69ba      	ldr	r2, [r7, #24]
 8012e96:	4013      	ands	r3, r2
 8012e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d003      	beq.n	8012eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012ea6:	69ba      	ldr	r2, [r7, #24]
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012eae:	4a32      	ldr	r2, [pc, #200]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012eb4:	4b30      	ldr	r3, [pc, #192]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012eb6:	68db      	ldr	r3, [r3, #12]
 8012eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	43db      	mvns	r3, r3
 8012ebe:	69ba      	ldr	r2, [r7, #24]
 8012ec0:	4013      	ands	r3, r2
 8012ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d003      	beq.n	8012ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012ed0:	69ba      	ldr	r2, [r7, #24]
 8012ed2:	693b      	ldr	r3, [r7, #16]
 8012ed4:	4313      	orrs	r3, r2
 8012ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012ed8:	4a27      	ldr	r2, [pc, #156]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8012ede:	4b26      	ldr	r3, [pc, #152]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	43db      	mvns	r3, r3
 8012ee8:	69ba      	ldr	r2, [r7, #24]
 8012eea:	4013      	ands	r3, r2
 8012eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d003      	beq.n	8012f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8012efa:	69ba      	ldr	r2, [r7, #24]
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	4313      	orrs	r3, r2
 8012f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012f02:	4a1d      	ldr	r2, [pc, #116]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012f08:	4b1b      	ldr	r3, [pc, #108]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	43db      	mvns	r3, r3
 8012f12:	69ba      	ldr	r2, [r7, #24]
 8012f14:	4013      	ands	r3, r2
 8012f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8012f24:	69ba      	ldr	r2, [r7, #24]
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012f2c:	4a12      	ldr	r2, [pc, #72]	; (8012f78 <HAL_GPIO_Init+0x334>)
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	3301      	adds	r3, #1
 8012f36:	61fb      	str	r3, [r7, #28]
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	2b0f      	cmp	r3, #15
 8012f3c:	f67f ae90 	bls.w	8012c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012f40:	bf00      	nop
 8012f42:	bf00      	nop
 8012f44:	3724      	adds	r7, #36	; 0x24
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop
 8012f50:	40023800 	.word	0x40023800
 8012f54:	40013800 	.word	0x40013800
 8012f58:	40020000 	.word	0x40020000
 8012f5c:	40020400 	.word	0x40020400
 8012f60:	40020800 	.word	0x40020800
 8012f64:	40020c00 	.word	0x40020c00
 8012f68:	40021000 	.word	0x40021000
 8012f6c:	40021400 	.word	0x40021400
 8012f70:	40021800 	.word	0x40021800
 8012f74:	40021c00 	.word	0x40021c00
 8012f78:	40013c00 	.word	0x40013c00

08012f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	460b      	mov	r3, r1
 8012f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	691a      	ldr	r2, [r3, #16]
 8012f8c:	887b      	ldrh	r3, [r7, #2]
 8012f8e:	4013      	ands	r3, r2
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d002      	beq.n	8012f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012f94:	2301      	movs	r3, #1
 8012f96:	73fb      	strb	r3, [r7, #15]
 8012f98:	e001      	b.n	8012f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3714      	adds	r7, #20
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr

08012fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	807b      	strh	r3, [r7, #2]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012fbc:	787b      	ldrb	r3, [r7, #1]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d003      	beq.n	8012fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012fc2:	887a      	ldrh	r2, [r7, #2]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012fc8:	e003      	b.n	8012fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012fca:	887b      	ldrh	r3, [r7, #2]
 8012fcc:	041a      	lsls	r2, r3, #16
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	619a      	str	r2, [r3, #24]
}
 8012fd2:	bf00      	nop
 8012fd4:	370c      	adds	r7, #12
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr
	...

08012fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8012fea:	4b08      	ldr	r3, [pc, #32]	; (801300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012fec:	695a      	ldr	r2, [r3, #20]
 8012fee:	88fb      	ldrh	r3, [r7, #6]
 8012ff0:	4013      	ands	r3, r2
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d006      	beq.n	8013004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012ff6:	4a05      	ldr	r2, [pc, #20]	; (801300c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8012ff8:	88fb      	ldrh	r3, [r7, #6]
 8012ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012ffc:	88fb      	ldrh	r3, [r7, #6]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f002 ffe9 	bl	8015fd6 <HAL_GPIO_EXTI_Callback>
  }
}
 8013004:	bf00      	nop
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	40013c00 	.word	0x40013c00

08013010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b084      	sub	sp, #16
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d101      	bne.n	8013022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801301e:	2301      	movs	r3, #1
 8013020:	e12b      	b.n	801327a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013028:	b2db      	uxtb	r3, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2200      	movs	r2, #0
 8013032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7fc fea6 	bl	800fd88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2224      	movs	r2, #36	; 0x24
 8013040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f022 0201 	bic.w	r2, r2, #1
 8013052:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013062:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	681a      	ldr	r2, [r3, #0]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013072:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8013074:	f000 fd7e 	bl	8013b74 <HAL_RCC_GetPCLK1Freq>
 8013078:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	4a81      	ldr	r2, [pc, #516]	; (8013284 <HAL_I2C_Init+0x274>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d807      	bhi.n	8013094 <HAL_I2C_Init+0x84>
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	4a80      	ldr	r2, [pc, #512]	; (8013288 <HAL_I2C_Init+0x278>)
 8013088:	4293      	cmp	r3, r2
 801308a:	bf94      	ite	ls
 801308c:	2301      	movls	r3, #1
 801308e:	2300      	movhi	r3, #0
 8013090:	b2db      	uxtb	r3, r3
 8013092:	e006      	b.n	80130a2 <HAL_I2C_Init+0x92>
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	4a7d      	ldr	r2, [pc, #500]	; (801328c <HAL_I2C_Init+0x27c>)
 8013098:	4293      	cmp	r3, r2
 801309a:	bf94      	ite	ls
 801309c:	2301      	movls	r3, #1
 801309e:	2300      	movhi	r3, #0
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e0e7      	b.n	801327a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	4a78      	ldr	r2, [pc, #480]	; (8013290 <HAL_I2C_Init+0x280>)
 80130ae:	fba2 2303 	umull	r2, r3, r2, r3
 80130b2:	0c9b      	lsrs	r3, r3, #18
 80130b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	68ba      	ldr	r2, [r7, #8]
 80130c6:	430a      	orrs	r2, r1
 80130c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6a1b      	ldr	r3, [r3, #32]
 80130d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	4a6a      	ldr	r2, [pc, #424]	; (8013284 <HAL_I2C_Init+0x274>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d802      	bhi.n	80130e4 <HAL_I2C_Init+0xd4>
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	3301      	adds	r3, #1
 80130e2:	e009      	b.n	80130f8 <HAL_I2C_Init+0xe8>
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80130ea:	fb02 f303 	mul.w	r3, r2, r3
 80130ee:	4a69      	ldr	r2, [pc, #420]	; (8013294 <HAL_I2C_Init+0x284>)
 80130f0:	fba2 2303 	umull	r2, r3, r2, r3
 80130f4:	099b      	lsrs	r3, r3, #6
 80130f6:	3301      	adds	r3, #1
 80130f8:	687a      	ldr	r2, [r7, #4]
 80130fa:	6812      	ldr	r2, [r2, #0]
 80130fc:	430b      	orrs	r3, r1
 80130fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	69db      	ldr	r3, [r3, #28]
 8013106:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801310a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	495c      	ldr	r1, [pc, #368]	; (8013284 <HAL_I2C_Init+0x274>)
 8013114:	428b      	cmp	r3, r1
 8013116:	d819      	bhi.n	801314c <HAL_I2C_Init+0x13c>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	1e59      	subs	r1, r3, #1
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	fbb1 f3f3 	udiv	r3, r1, r3
 8013126:	1c59      	adds	r1, r3, #1
 8013128:	f640 73fc 	movw	r3, #4092	; 0xffc
 801312c:	400b      	ands	r3, r1
 801312e:	2b00      	cmp	r3, #0
 8013130:	d00a      	beq.n	8013148 <HAL_I2C_Init+0x138>
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	1e59      	subs	r1, r3, #1
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	685b      	ldr	r3, [r3, #4]
 801313a:	005b      	lsls	r3, r3, #1
 801313c:	fbb1 f3f3 	udiv	r3, r1, r3
 8013140:	3301      	adds	r3, #1
 8013142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013146:	e051      	b.n	80131ec <HAL_I2C_Init+0x1dc>
 8013148:	2304      	movs	r3, #4
 801314a:	e04f      	b.n	80131ec <HAL_I2C_Init+0x1dc>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d111      	bne.n	8013178 <HAL_I2C_Init+0x168>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	1e58      	subs	r0, r3, #1
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6859      	ldr	r1, [r3, #4]
 801315c:	460b      	mov	r3, r1
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	440b      	add	r3, r1
 8013162:	fbb0 f3f3 	udiv	r3, r0, r3
 8013166:	3301      	adds	r3, #1
 8013168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801316c:	2b00      	cmp	r3, #0
 801316e:	bf0c      	ite	eq
 8013170:	2301      	moveq	r3, #1
 8013172:	2300      	movne	r3, #0
 8013174:	b2db      	uxtb	r3, r3
 8013176:	e012      	b.n	801319e <HAL_I2C_Init+0x18e>
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	1e58      	subs	r0, r3, #1
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6859      	ldr	r1, [r3, #4]
 8013180:	460b      	mov	r3, r1
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	440b      	add	r3, r1
 8013186:	0099      	lsls	r1, r3, #2
 8013188:	440b      	add	r3, r1
 801318a:	fbb0 f3f3 	udiv	r3, r0, r3
 801318e:	3301      	adds	r3, #1
 8013190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013194:	2b00      	cmp	r3, #0
 8013196:	bf0c      	ite	eq
 8013198:	2301      	moveq	r3, #1
 801319a:	2300      	movne	r3, #0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <HAL_I2C_Init+0x196>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e022      	b.n	80131ec <HAL_I2C_Init+0x1dc>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	689b      	ldr	r3, [r3, #8]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10e      	bne.n	80131cc <HAL_I2C_Init+0x1bc>
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	1e58      	subs	r0, r3, #1
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6859      	ldr	r1, [r3, #4]
 80131b6:	460b      	mov	r3, r1
 80131b8:	005b      	lsls	r3, r3, #1
 80131ba:	440b      	add	r3, r1
 80131bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80131c0:	3301      	adds	r3, #1
 80131c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80131c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131ca:	e00f      	b.n	80131ec <HAL_I2C_Init+0x1dc>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	1e58      	subs	r0, r3, #1
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6859      	ldr	r1, [r3, #4]
 80131d4:	460b      	mov	r3, r1
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	440b      	add	r3, r1
 80131da:	0099      	lsls	r1, r3, #2
 80131dc:	440b      	add	r3, r1
 80131de:	fbb0 f3f3 	udiv	r3, r0, r3
 80131e2:	3301      	adds	r3, #1
 80131e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80131e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80131ec:	6879      	ldr	r1, [r7, #4]
 80131ee:	6809      	ldr	r1, [r1, #0]
 80131f0:	4313      	orrs	r3, r2
 80131f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	69da      	ldr	r2, [r3, #28]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6a1b      	ldr	r3, [r3, #32]
 8013206:	431a      	orrs	r2, r3
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	430a      	orrs	r2, r1
 801320e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	689b      	ldr	r3, [r3, #8]
 8013216:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801321a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	6911      	ldr	r1, [r2, #16]
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	68d2      	ldr	r2, [r2, #12]
 8013226:	4311      	orrs	r1, r2
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	6812      	ldr	r2, [r2, #0]
 801322c:	430b      	orrs	r3, r1
 801322e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	695a      	ldr	r2, [r3, #20]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	699b      	ldr	r3, [r3, #24]
 8013242:	431a      	orrs	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	430a      	orrs	r2, r1
 801324a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f042 0201 	orr.w	r2, r2, #1
 801325a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2220      	movs	r2, #32
 8013266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2200      	movs	r2, #0
 801326e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013278:	2300      	movs	r3, #0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3710      	adds	r7, #16
 801327e:	46bd      	mov	sp, r7
 8013280:	bd80      	pop	{r7, pc}
 8013282:	bf00      	nop
 8013284:	000186a0 	.word	0x000186a0
 8013288:	001e847f 	.word	0x001e847f
 801328c:	003d08ff 	.word	0x003d08ff
 8013290:	431bde83 	.word	0x431bde83
 8013294:	10624dd3 	.word	0x10624dd3

08013298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b086      	sub	sp, #24
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d101      	bne.n	80132aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80132a6:	2301      	movs	r3, #1
 80132a8:	e267      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f003 0301 	and.w	r3, r3, #1
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d075      	beq.n	80133a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80132b6:	4b88      	ldr	r3, [pc, #544]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	f003 030c 	and.w	r3, r3, #12
 80132be:	2b04      	cmp	r3, #4
 80132c0:	d00c      	beq.n	80132dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80132c2:	4b85      	ldr	r3, [pc, #532]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80132c4:	689b      	ldr	r3, [r3, #8]
 80132c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80132ca:	2b08      	cmp	r3, #8
 80132cc:	d112      	bne.n	80132f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80132ce:	4b82      	ldr	r3, [pc, #520]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80132d0:	685b      	ldr	r3, [r3, #4]
 80132d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80132da:	d10b      	bne.n	80132f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80132dc:	4b7e      	ldr	r3, [pc, #504]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d05b      	beq.n	80133a0 <HAL_RCC_OscConfig+0x108>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d157      	bne.n	80133a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80132f0:	2301      	movs	r3, #1
 80132f2:	e242      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132fc:	d106      	bne.n	801330c <HAL_RCC_OscConfig+0x74>
 80132fe:	4b76      	ldr	r3, [pc, #472]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a75      	ldr	r2, [pc, #468]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	e01d      	b.n	8013348 <HAL_RCC_OscConfig+0xb0>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013314:	d10c      	bne.n	8013330 <HAL_RCC_OscConfig+0x98>
 8013316:	4b70      	ldr	r3, [pc, #448]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4a6f      	ldr	r2, [pc, #444]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 801331c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	4b6d      	ldr	r3, [pc, #436]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	4a6c      	ldr	r2, [pc, #432]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801332c:	6013      	str	r3, [r2, #0]
 801332e:	e00b      	b.n	8013348 <HAL_RCC_OscConfig+0xb0>
 8013330:	4b69      	ldr	r3, [pc, #420]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a68      	ldr	r2, [pc, #416]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801333a:	6013      	str	r3, [r2, #0]
 801333c:	4b66      	ldr	r3, [pc, #408]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a65      	ldr	r2, [pc, #404]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d013      	beq.n	8013378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013350:	f7fd fd64 	bl	8010e1c <HAL_GetTick>
 8013354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013356:	e008      	b.n	801336a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013358:	f7fd fd60 	bl	8010e1c <HAL_GetTick>
 801335c:	4602      	mov	r2, r0
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	2b64      	cmp	r3, #100	; 0x64
 8013364:	d901      	bls.n	801336a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013366:	2303      	movs	r3, #3
 8013368:	e207      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801336a:	4b5b      	ldr	r3, [pc, #364]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013372:	2b00      	cmp	r3, #0
 8013374:	d0f0      	beq.n	8013358 <HAL_RCC_OscConfig+0xc0>
 8013376:	e014      	b.n	80133a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013378:	f7fd fd50 	bl	8010e1c <HAL_GetTick>
 801337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801337e:	e008      	b.n	8013392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013380:	f7fd fd4c 	bl	8010e1c <HAL_GetTick>
 8013384:	4602      	mov	r2, r0
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	2b64      	cmp	r3, #100	; 0x64
 801338c:	d901      	bls.n	8013392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801338e:	2303      	movs	r3, #3
 8013390:	e1f3      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013392:	4b51      	ldr	r3, [pc, #324]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1f0      	bne.n	8013380 <HAL_RCC_OscConfig+0xe8>
 801339e:	e000      	b.n	80133a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80133a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f003 0302 	and.w	r3, r3, #2
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d063      	beq.n	8013476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80133ae:	4b4a      	ldr	r3, [pc, #296]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	f003 030c 	and.w	r3, r3, #12
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00b      	beq.n	80133d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80133ba:	4b47      	ldr	r3, [pc, #284]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80133c2:	2b08      	cmp	r3, #8
 80133c4:	d11c      	bne.n	8013400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80133c6:	4b44      	ldr	r3, [pc, #272]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d116      	bne.n	8013400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80133d2:	4b41      	ldr	r3, [pc, #260]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	f003 0302 	and.w	r3, r3, #2
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d005      	beq.n	80133ea <HAL_RCC_OscConfig+0x152>
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	68db      	ldr	r3, [r3, #12]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d001      	beq.n	80133ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80133e6:	2301      	movs	r3, #1
 80133e8:	e1c7      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80133ea:	4b3b      	ldr	r3, [pc, #236]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	691b      	ldr	r3, [r3, #16]
 80133f6:	00db      	lsls	r3, r3, #3
 80133f8:	4937      	ldr	r1, [pc, #220]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80133fa:	4313      	orrs	r3, r2
 80133fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80133fe:	e03a      	b.n	8013476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d020      	beq.n	801344a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013408:	4b34      	ldr	r3, [pc, #208]	; (80134dc <HAL_RCC_OscConfig+0x244>)
 801340a:	2201      	movs	r2, #1
 801340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801340e:	f7fd fd05 	bl	8010e1c <HAL_GetTick>
 8013412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013414:	e008      	b.n	8013428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013416:	f7fd fd01 	bl	8010e1c <HAL_GetTick>
 801341a:	4602      	mov	r2, r0
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	2b02      	cmp	r3, #2
 8013422:	d901      	bls.n	8013428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013424:	2303      	movs	r3, #3
 8013426:	e1a8      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013428:	4b2b      	ldr	r3, [pc, #172]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f003 0302 	and.w	r3, r3, #2
 8013430:	2b00      	cmp	r3, #0
 8013432:	d0f0      	beq.n	8013416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013434:	4b28      	ldr	r3, [pc, #160]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	691b      	ldr	r3, [r3, #16]
 8013440:	00db      	lsls	r3, r3, #3
 8013442:	4925      	ldr	r1, [pc, #148]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 8013444:	4313      	orrs	r3, r2
 8013446:	600b      	str	r3, [r1, #0]
 8013448:	e015      	b.n	8013476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801344a:	4b24      	ldr	r3, [pc, #144]	; (80134dc <HAL_RCC_OscConfig+0x244>)
 801344c:	2200      	movs	r2, #0
 801344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013450:	f7fd fce4 	bl	8010e1c <HAL_GetTick>
 8013454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013456:	e008      	b.n	801346a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013458:	f7fd fce0 	bl	8010e1c <HAL_GetTick>
 801345c:	4602      	mov	r2, r0
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	2b02      	cmp	r3, #2
 8013464:	d901      	bls.n	801346a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013466:	2303      	movs	r3, #3
 8013468:	e187      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801346a:	4b1b      	ldr	r3, [pc, #108]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f003 0302 	and.w	r3, r3, #2
 8013472:	2b00      	cmp	r3, #0
 8013474:	d1f0      	bne.n	8013458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f003 0308 	and.w	r3, r3, #8
 801347e:	2b00      	cmp	r3, #0
 8013480:	d036      	beq.n	80134f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	695b      	ldr	r3, [r3, #20]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d016      	beq.n	80134b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801348a:	4b15      	ldr	r3, [pc, #84]	; (80134e0 <HAL_RCC_OscConfig+0x248>)
 801348c:	2201      	movs	r2, #1
 801348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013490:	f7fd fcc4 	bl	8010e1c <HAL_GetTick>
 8013494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013496:	e008      	b.n	80134aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013498:	f7fd fcc0 	bl	8010e1c <HAL_GetTick>
 801349c:	4602      	mov	r2, r0
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	2b02      	cmp	r3, #2
 80134a4:	d901      	bls.n	80134aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80134a6:	2303      	movs	r3, #3
 80134a8:	e167      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80134aa:	4b0b      	ldr	r3, [pc, #44]	; (80134d8 <HAL_RCC_OscConfig+0x240>)
 80134ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ae:	f003 0302 	and.w	r3, r3, #2
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0f0      	beq.n	8013498 <HAL_RCC_OscConfig+0x200>
 80134b6:	e01b      	b.n	80134f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80134b8:	4b09      	ldr	r3, [pc, #36]	; (80134e0 <HAL_RCC_OscConfig+0x248>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80134be:	f7fd fcad 	bl	8010e1c <HAL_GetTick>
 80134c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80134c4:	e00e      	b.n	80134e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80134c6:	f7fd fca9 	bl	8010e1c <HAL_GetTick>
 80134ca:	4602      	mov	r2, r0
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	1ad3      	subs	r3, r2, r3
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d907      	bls.n	80134e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80134d4:	2303      	movs	r3, #3
 80134d6:	e150      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
 80134d8:	40023800 	.word	0x40023800
 80134dc:	42470000 	.word	0x42470000
 80134e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80134e4:	4b88      	ldr	r3, [pc, #544]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80134e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134e8:	f003 0302 	and.w	r3, r3, #2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d1ea      	bne.n	80134c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f003 0304 	and.w	r3, r3, #4
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 8097 	beq.w	801362c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80134fe:	2300      	movs	r3, #0
 8013500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013502:	4b81      	ldr	r3, [pc, #516]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801350a:	2b00      	cmp	r3, #0
 801350c:	d10f      	bne.n	801352e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801350e:	2300      	movs	r3, #0
 8013510:	60bb      	str	r3, [r7, #8]
 8013512:	4b7d      	ldr	r3, [pc, #500]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013516:	4a7c      	ldr	r2, [pc, #496]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801351c:	6413      	str	r3, [r2, #64]	; 0x40
 801351e:	4b7a      	ldr	r3, [pc, #488]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013526:	60bb      	str	r3, [r7, #8]
 8013528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801352a:	2301      	movs	r3, #1
 801352c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801352e:	4b77      	ldr	r3, [pc, #476]	; (801370c <HAL_RCC_OscConfig+0x474>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013536:	2b00      	cmp	r3, #0
 8013538:	d118      	bne.n	801356c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801353a:	4b74      	ldr	r3, [pc, #464]	; (801370c <HAL_RCC_OscConfig+0x474>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	4a73      	ldr	r2, [pc, #460]	; (801370c <HAL_RCC_OscConfig+0x474>)
 8013540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013546:	f7fd fc69 	bl	8010e1c <HAL_GetTick>
 801354a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801354c:	e008      	b.n	8013560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801354e:	f7fd fc65 	bl	8010e1c <HAL_GetTick>
 8013552:	4602      	mov	r2, r0
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	2b02      	cmp	r3, #2
 801355a:	d901      	bls.n	8013560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801355c:	2303      	movs	r3, #3
 801355e:	e10c      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013560:	4b6a      	ldr	r3, [pc, #424]	; (801370c <HAL_RCC_OscConfig+0x474>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013568:	2b00      	cmp	r3, #0
 801356a:	d0f0      	beq.n	801354e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d106      	bne.n	8013582 <HAL_RCC_OscConfig+0x2ea>
 8013574:	4b64      	ldr	r3, [pc, #400]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013578:	4a63      	ldr	r2, [pc, #396]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 801357a:	f043 0301 	orr.w	r3, r3, #1
 801357e:	6713      	str	r3, [r2, #112]	; 0x70
 8013580:	e01c      	b.n	80135bc <HAL_RCC_OscConfig+0x324>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	689b      	ldr	r3, [r3, #8]
 8013586:	2b05      	cmp	r3, #5
 8013588:	d10c      	bne.n	80135a4 <HAL_RCC_OscConfig+0x30c>
 801358a:	4b5f      	ldr	r3, [pc, #380]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 801358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801358e:	4a5e      	ldr	r2, [pc, #376]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013590:	f043 0304 	orr.w	r3, r3, #4
 8013594:	6713      	str	r3, [r2, #112]	; 0x70
 8013596:	4b5c      	ldr	r3, [pc, #368]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801359a:	4a5b      	ldr	r2, [pc, #364]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 801359c:	f043 0301 	orr.w	r3, r3, #1
 80135a0:	6713      	str	r3, [r2, #112]	; 0x70
 80135a2:	e00b      	b.n	80135bc <HAL_RCC_OscConfig+0x324>
 80135a4:	4b58      	ldr	r3, [pc, #352]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80135a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135a8:	4a57      	ldr	r2, [pc, #348]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80135aa:	f023 0301 	bic.w	r3, r3, #1
 80135ae:	6713      	str	r3, [r2, #112]	; 0x70
 80135b0:	4b55      	ldr	r3, [pc, #340]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80135b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135b4:	4a54      	ldr	r2, [pc, #336]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80135b6:	f023 0304 	bic.w	r3, r3, #4
 80135ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d015      	beq.n	80135f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135c4:	f7fd fc2a 	bl	8010e1c <HAL_GetTick>
 80135c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135ca:	e00a      	b.n	80135e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80135cc:	f7fd fc26 	bl	8010e1c <HAL_GetTick>
 80135d0:	4602      	mov	r2, r0
 80135d2:	693b      	ldr	r3, [r7, #16]
 80135d4:	1ad3      	subs	r3, r2, r3
 80135d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80135da:	4293      	cmp	r3, r2
 80135dc:	d901      	bls.n	80135e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80135de:	2303      	movs	r3, #3
 80135e0:	e0cb      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80135e2:	4b49      	ldr	r3, [pc, #292]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80135e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135e6:	f003 0302 	and.w	r3, r3, #2
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0ee      	beq.n	80135cc <HAL_RCC_OscConfig+0x334>
 80135ee:	e014      	b.n	801361a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80135f0:	f7fd fc14 	bl	8010e1c <HAL_GetTick>
 80135f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80135f6:	e00a      	b.n	801360e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80135f8:	f7fd fc10 	bl	8010e1c <HAL_GetTick>
 80135fc:	4602      	mov	r2, r0
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	f241 3288 	movw	r2, #5000	; 0x1388
 8013606:	4293      	cmp	r3, r2
 8013608:	d901      	bls.n	801360e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801360a:	2303      	movs	r3, #3
 801360c:	e0b5      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801360e:	4b3e      	ldr	r3, [pc, #248]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013612:	f003 0302 	and.w	r3, r3, #2
 8013616:	2b00      	cmp	r3, #0
 8013618:	d1ee      	bne.n	80135f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801361a:	7dfb      	ldrb	r3, [r7, #23]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d105      	bne.n	801362c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013620:	4b39      	ldr	r3, [pc, #228]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013624:	4a38      	ldr	r2, [pc, #224]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801362a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	699b      	ldr	r3, [r3, #24]
 8013630:	2b00      	cmp	r3, #0
 8013632:	f000 80a1 	beq.w	8013778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013636:	4b34      	ldr	r3, [pc, #208]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 8013638:	689b      	ldr	r3, [r3, #8]
 801363a:	f003 030c 	and.w	r3, r3, #12
 801363e:	2b08      	cmp	r3, #8
 8013640:	d05c      	beq.n	80136fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	699b      	ldr	r3, [r3, #24]
 8013646:	2b02      	cmp	r3, #2
 8013648:	d141      	bne.n	80136ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801364a:	4b31      	ldr	r3, [pc, #196]	; (8013710 <HAL_RCC_OscConfig+0x478>)
 801364c:	2200      	movs	r2, #0
 801364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013650:	f7fd fbe4 	bl	8010e1c <HAL_GetTick>
 8013654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013656:	e008      	b.n	801366a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013658:	f7fd fbe0 	bl	8010e1c <HAL_GetTick>
 801365c:	4602      	mov	r2, r0
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	2b02      	cmp	r3, #2
 8013664:	d901      	bls.n	801366a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8013666:	2303      	movs	r3, #3
 8013668:	e087      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801366a:	4b27      	ldr	r3, [pc, #156]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013672:	2b00      	cmp	r3, #0
 8013674:	d1f0      	bne.n	8013658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	69da      	ldr	r2, [r3, #28]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6a1b      	ldr	r3, [r3, #32]
 801367e:	431a      	orrs	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013684:	019b      	lsls	r3, r3, #6
 8013686:	431a      	orrs	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801368c:	085b      	lsrs	r3, r3, #1
 801368e:	3b01      	subs	r3, #1
 8013690:	041b      	lsls	r3, r3, #16
 8013692:	431a      	orrs	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013698:	061b      	lsls	r3, r3, #24
 801369a:	491b      	ldr	r1, [pc, #108]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 801369c:	4313      	orrs	r3, r2
 801369e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80136a0:	4b1b      	ldr	r3, [pc, #108]	; (8013710 <HAL_RCC_OscConfig+0x478>)
 80136a2:	2201      	movs	r2, #1
 80136a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136a6:	f7fd fbb9 	bl	8010e1c <HAL_GetTick>
 80136aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80136ac:	e008      	b.n	80136c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136ae:	f7fd fbb5 	bl	8010e1c <HAL_GetTick>
 80136b2:	4602      	mov	r2, r0
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	1ad3      	subs	r3, r2, r3
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d901      	bls.n	80136c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80136bc:	2303      	movs	r3, #3
 80136be:	e05c      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80136c0:	4b11      	ldr	r3, [pc, #68]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d0f0      	beq.n	80136ae <HAL_RCC_OscConfig+0x416>
 80136cc:	e054      	b.n	8013778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80136ce:	4b10      	ldr	r3, [pc, #64]	; (8013710 <HAL_RCC_OscConfig+0x478>)
 80136d0:	2200      	movs	r2, #0
 80136d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136d4:	f7fd fba2 	bl	8010e1c <HAL_GetTick>
 80136d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136da:	e008      	b.n	80136ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80136dc:	f7fd fb9e 	bl	8010e1c <HAL_GetTick>
 80136e0:	4602      	mov	r2, r0
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	1ad3      	subs	r3, r2, r3
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	d901      	bls.n	80136ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80136ea:	2303      	movs	r3, #3
 80136ec:	e045      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80136ee:	4b06      	ldr	r3, [pc, #24]	; (8013708 <HAL_RCC_OscConfig+0x470>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1f0      	bne.n	80136dc <HAL_RCC_OscConfig+0x444>
 80136fa:	e03d      	b.n	8013778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	2b01      	cmp	r3, #1
 8013702:	d107      	bne.n	8013714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8013704:	2301      	movs	r3, #1
 8013706:	e038      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
 8013708:	40023800 	.word	0x40023800
 801370c:	40007000 	.word	0x40007000
 8013710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013714:	4b1b      	ldr	r3, [pc, #108]	; (8013784 <HAL_RCC_OscConfig+0x4ec>)
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	699b      	ldr	r3, [r3, #24]
 801371e:	2b01      	cmp	r3, #1
 8013720:	d028      	beq.n	8013774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801372c:	429a      	cmp	r2, r3
 801372e:	d121      	bne.n	8013774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801373a:	429a      	cmp	r2, r3
 801373c:	d11a      	bne.n	8013774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013744:	4013      	ands	r3, r2
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801374a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801374c:	4293      	cmp	r3, r2
 801374e:	d111      	bne.n	8013774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801375a:	085b      	lsrs	r3, r3, #1
 801375c:	3b01      	subs	r3, #1
 801375e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013760:	429a      	cmp	r2, r3
 8013762:	d107      	bne.n	8013774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801376e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013770:	429a      	cmp	r2, r3
 8013772:	d001      	beq.n	8013778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8013774:	2301      	movs	r3, #1
 8013776:	e000      	b.n	801377a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8013778:	2300      	movs	r3, #0
}
 801377a:	4618      	mov	r0, r3
 801377c:	3718      	adds	r7, #24
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	40023800 	.word	0x40023800

08013788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d101      	bne.n	801379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013798:	2301      	movs	r3, #1
 801379a:	e0cc      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801379c:	4b68      	ldr	r3, [pc, #416]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	f003 0307 	and.w	r3, r3, #7
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	429a      	cmp	r2, r3
 80137a8:	d90c      	bls.n	80137c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80137aa:	4b65      	ldr	r3, [pc, #404]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 80137ac:	683a      	ldr	r2, [r7, #0]
 80137ae:	b2d2      	uxtb	r2, r2
 80137b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80137b2:	4b63      	ldr	r3, [pc, #396]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f003 0307 	and.w	r3, r3, #7
 80137ba:	683a      	ldr	r2, [r7, #0]
 80137bc:	429a      	cmp	r2, r3
 80137be:	d001      	beq.n	80137c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80137c0:	2301      	movs	r3, #1
 80137c2:	e0b8      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f003 0302 	and.w	r3, r3, #2
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d020      	beq.n	8013812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	f003 0304 	and.w	r3, r3, #4
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d005      	beq.n	80137e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80137dc:	4b59      	ldr	r3, [pc, #356]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80137de:	689b      	ldr	r3, [r3, #8]
 80137e0:	4a58      	ldr	r2, [pc, #352]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80137e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80137e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	f003 0308 	and.w	r3, r3, #8
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d005      	beq.n	8013800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80137f4:	4b53      	ldr	r3, [pc, #332]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80137f6:	689b      	ldr	r3, [r3, #8]
 80137f8:	4a52      	ldr	r2, [pc, #328]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80137fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80137fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013800:	4b50      	ldr	r3, [pc, #320]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	689b      	ldr	r3, [r3, #8]
 801380c:	494d      	ldr	r1, [pc, #308]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 801380e:	4313      	orrs	r3, r2
 8013810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	f003 0301 	and.w	r3, r3, #1
 801381a:	2b00      	cmp	r3, #0
 801381c:	d044      	beq.n	80138a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	2b01      	cmp	r3, #1
 8013824:	d107      	bne.n	8013836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013826:	4b47      	ldr	r3, [pc, #284]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801382e:	2b00      	cmp	r3, #0
 8013830:	d119      	bne.n	8013866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013832:	2301      	movs	r3, #1
 8013834:	e07f      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	2b02      	cmp	r3, #2
 801383c:	d003      	beq.n	8013846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013842:	2b03      	cmp	r3, #3
 8013844:	d107      	bne.n	8013856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013846:	4b3f      	ldr	r3, [pc, #252]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801384e:	2b00      	cmp	r3, #0
 8013850:	d109      	bne.n	8013866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013852:	2301      	movs	r3, #1
 8013854:	e06f      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013856:	4b3b      	ldr	r3, [pc, #236]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f003 0302 	and.w	r3, r3, #2
 801385e:	2b00      	cmp	r3, #0
 8013860:	d101      	bne.n	8013866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013862:	2301      	movs	r3, #1
 8013864:	e067      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013866:	4b37      	ldr	r3, [pc, #220]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013868:	689b      	ldr	r3, [r3, #8]
 801386a:	f023 0203 	bic.w	r2, r3, #3
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	4934      	ldr	r1, [pc, #208]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013874:	4313      	orrs	r3, r2
 8013876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013878:	f7fd fad0 	bl	8010e1c <HAL_GetTick>
 801387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801387e:	e00a      	b.n	8013896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013880:	f7fd facc 	bl	8010e1c <HAL_GetTick>
 8013884:	4602      	mov	r2, r0
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	1ad3      	subs	r3, r2, r3
 801388a:	f241 3288 	movw	r2, #5000	; 0x1388
 801388e:	4293      	cmp	r3, r2
 8013890:	d901      	bls.n	8013896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013892:	2303      	movs	r3, #3
 8013894:	e04f      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013896:	4b2b      	ldr	r3, [pc, #172]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	f003 020c 	and.w	r2, r3, #12
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d1eb      	bne.n	8013880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80138a8:	4b25      	ldr	r3, [pc, #148]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f003 0307 	and.w	r3, r3, #7
 80138b0:	683a      	ldr	r2, [r7, #0]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d20c      	bcs.n	80138d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80138b6:	4b22      	ldr	r3, [pc, #136]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 80138b8:	683a      	ldr	r2, [r7, #0]
 80138ba:	b2d2      	uxtb	r2, r2
 80138bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80138be:	4b20      	ldr	r3, [pc, #128]	; (8013940 <HAL_RCC_ClockConfig+0x1b8>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	f003 0307 	and.w	r3, r3, #7
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d001      	beq.n	80138d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80138cc:	2301      	movs	r3, #1
 80138ce:	e032      	b.n	8013936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f003 0304 	and.w	r3, r3, #4
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d008      	beq.n	80138ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80138dc:	4b19      	ldr	r3, [pc, #100]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80138de:	689b      	ldr	r3, [r3, #8]
 80138e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	68db      	ldr	r3, [r3, #12]
 80138e8:	4916      	ldr	r1, [pc, #88]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80138ea:	4313      	orrs	r3, r2
 80138ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	f003 0308 	and.w	r3, r3, #8
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d009      	beq.n	801390e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80138fa:	4b12      	ldr	r3, [pc, #72]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	691b      	ldr	r3, [r3, #16]
 8013906:	00db      	lsls	r3, r3, #3
 8013908:	490e      	ldr	r1, [pc, #56]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 801390a:	4313      	orrs	r3, r2
 801390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801390e:	f000 f821 	bl	8013954 <HAL_RCC_GetSysClockFreq>
 8013912:	4602      	mov	r2, r0
 8013914:	4b0b      	ldr	r3, [pc, #44]	; (8013944 <HAL_RCC_ClockConfig+0x1bc>)
 8013916:	689b      	ldr	r3, [r3, #8]
 8013918:	091b      	lsrs	r3, r3, #4
 801391a:	f003 030f 	and.w	r3, r3, #15
 801391e:	490a      	ldr	r1, [pc, #40]	; (8013948 <HAL_RCC_ClockConfig+0x1c0>)
 8013920:	5ccb      	ldrb	r3, [r1, r3]
 8013922:	fa22 f303 	lsr.w	r3, r2, r3
 8013926:	4a09      	ldr	r2, [pc, #36]	; (801394c <HAL_RCC_ClockConfig+0x1c4>)
 8013928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801392a:	4b09      	ldr	r3, [pc, #36]	; (8013950 <HAL_RCC_ClockConfig+0x1c8>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4618      	mov	r0, r3
 8013930:	f7fc fc08 	bl	8010144 <HAL_InitTick>

  return HAL_OK;
 8013934:	2300      	movs	r3, #0
}
 8013936:	4618      	mov	r0, r3
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	40023c00 	.word	0x40023c00
 8013944:	40023800 	.word	0x40023800
 8013948:	0801fdd8 	.word	0x0801fdd8
 801394c:	20000020 	.word	0x20000020
 8013950:	20000024 	.word	0x20000024

08013954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013958:	b094      	sub	sp, #80	; 0x50
 801395a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801395c:	2300      	movs	r3, #0
 801395e:	647b      	str	r3, [r7, #68]	; 0x44
 8013960:	2300      	movs	r3, #0
 8013962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013964:	2300      	movs	r3, #0
 8013966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8013968:	2300      	movs	r3, #0
 801396a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801396c:	4b79      	ldr	r3, [pc, #484]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 801396e:	689b      	ldr	r3, [r3, #8]
 8013970:	f003 030c 	and.w	r3, r3, #12
 8013974:	2b08      	cmp	r3, #8
 8013976:	d00d      	beq.n	8013994 <HAL_RCC_GetSysClockFreq+0x40>
 8013978:	2b08      	cmp	r3, #8
 801397a:	f200 80e1 	bhi.w	8013b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 801397e:	2b00      	cmp	r3, #0
 8013980:	d002      	beq.n	8013988 <HAL_RCC_GetSysClockFreq+0x34>
 8013982:	2b04      	cmp	r3, #4
 8013984:	d003      	beq.n	801398e <HAL_RCC_GetSysClockFreq+0x3a>
 8013986:	e0db      	b.n	8013b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013988:	4b73      	ldr	r3, [pc, #460]	; (8013b58 <HAL_RCC_GetSysClockFreq+0x204>)
 801398a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801398c:	e0db      	b.n	8013b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801398e:	4b72      	ldr	r3, [pc, #456]	; (8013b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8013990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8013992:	e0d8      	b.n	8013b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013994:	4b6f      	ldr	r3, [pc, #444]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801399c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801399e:	4b6d      	ldr	r3, [pc, #436]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d063      	beq.n	8013a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80139aa:	4b6a      	ldr	r3, [pc, #424]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80139ac:	685b      	ldr	r3, [r3, #4]
 80139ae:	099b      	lsrs	r3, r3, #6
 80139b0:	2200      	movs	r2, #0
 80139b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80139b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139bc:	633b      	str	r3, [r7, #48]	; 0x30
 80139be:	2300      	movs	r3, #0
 80139c0:	637b      	str	r3, [r7, #52]	; 0x34
 80139c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80139c6:	4622      	mov	r2, r4
 80139c8:	462b      	mov	r3, r5
 80139ca:	f04f 0000 	mov.w	r0, #0
 80139ce:	f04f 0100 	mov.w	r1, #0
 80139d2:	0159      	lsls	r1, r3, #5
 80139d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80139d8:	0150      	lsls	r0, r2, #5
 80139da:	4602      	mov	r2, r0
 80139dc:	460b      	mov	r3, r1
 80139de:	4621      	mov	r1, r4
 80139e0:	1a51      	subs	r1, r2, r1
 80139e2:	6139      	str	r1, [r7, #16]
 80139e4:	4629      	mov	r1, r5
 80139e6:	eb63 0301 	sbc.w	r3, r3, r1
 80139ea:	617b      	str	r3, [r7, #20]
 80139ec:	f04f 0200 	mov.w	r2, #0
 80139f0:	f04f 0300 	mov.w	r3, #0
 80139f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80139f8:	4659      	mov	r1, fp
 80139fa:	018b      	lsls	r3, r1, #6
 80139fc:	4651      	mov	r1, sl
 80139fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8013a02:	4651      	mov	r1, sl
 8013a04:	018a      	lsls	r2, r1, #6
 8013a06:	4651      	mov	r1, sl
 8013a08:	ebb2 0801 	subs.w	r8, r2, r1
 8013a0c:	4659      	mov	r1, fp
 8013a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8013a12:	f04f 0200 	mov.w	r2, #0
 8013a16:	f04f 0300 	mov.w	r3, #0
 8013a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013a26:	4690      	mov	r8, r2
 8013a28:	4699      	mov	r9, r3
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	eb18 0303 	adds.w	r3, r8, r3
 8013a30:	60bb      	str	r3, [r7, #8]
 8013a32:	462b      	mov	r3, r5
 8013a34:	eb49 0303 	adc.w	r3, r9, r3
 8013a38:	60fb      	str	r3, [r7, #12]
 8013a3a:	f04f 0200 	mov.w	r2, #0
 8013a3e:	f04f 0300 	mov.w	r3, #0
 8013a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013a46:	4629      	mov	r1, r5
 8013a48:	028b      	lsls	r3, r1, #10
 8013a4a:	4621      	mov	r1, r4
 8013a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013a50:	4621      	mov	r1, r4
 8013a52:	028a      	lsls	r2, r1, #10
 8013a54:	4610      	mov	r0, r2
 8013a56:	4619      	mov	r1, r3
 8013a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013a64:	f7ed f910 	bl	8000c88 <__aeabi_uldivmod>
 8013a68:	4602      	mov	r2, r0
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013a70:	e058      	b.n	8013b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013a72:	4b38      	ldr	r3, [pc, #224]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	099b      	lsrs	r3, r3, #6
 8013a78:	2200      	movs	r2, #0
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	4611      	mov	r1, r2
 8013a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8013a82:	623b      	str	r3, [r7, #32]
 8013a84:	2300      	movs	r3, #0
 8013a86:	627b      	str	r3, [r7, #36]	; 0x24
 8013a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013a8c:	4642      	mov	r2, r8
 8013a8e:	464b      	mov	r3, r9
 8013a90:	f04f 0000 	mov.w	r0, #0
 8013a94:	f04f 0100 	mov.w	r1, #0
 8013a98:	0159      	lsls	r1, r3, #5
 8013a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013a9e:	0150      	lsls	r0, r2, #5
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	460b      	mov	r3, r1
 8013aa4:	4641      	mov	r1, r8
 8013aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8013aaa:	4649      	mov	r1, r9
 8013aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8013ab0:	f04f 0200 	mov.w	r2, #0
 8013ab4:	f04f 0300 	mov.w	r3, #0
 8013ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8013ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8013ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8013ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8013acc:	f04f 0200 	mov.w	r2, #0
 8013ad0:	f04f 0300 	mov.w	r3, #0
 8013ad4:	00eb      	lsls	r3, r5, #3
 8013ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013ada:	00e2      	lsls	r2, r4, #3
 8013adc:	4614      	mov	r4, r2
 8013ade:	461d      	mov	r5, r3
 8013ae0:	4643      	mov	r3, r8
 8013ae2:	18e3      	adds	r3, r4, r3
 8013ae4:	603b      	str	r3, [r7, #0]
 8013ae6:	464b      	mov	r3, r9
 8013ae8:	eb45 0303 	adc.w	r3, r5, r3
 8013aec:	607b      	str	r3, [r7, #4]
 8013aee:	f04f 0200 	mov.w	r2, #0
 8013af2:	f04f 0300 	mov.w	r3, #0
 8013af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013afa:	4629      	mov	r1, r5
 8013afc:	028b      	lsls	r3, r1, #10
 8013afe:	4621      	mov	r1, r4
 8013b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013b04:	4621      	mov	r1, r4
 8013b06:	028a      	lsls	r2, r1, #10
 8013b08:	4610      	mov	r0, r2
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b0e:	2200      	movs	r2, #0
 8013b10:	61bb      	str	r3, [r7, #24]
 8013b12:	61fa      	str	r2, [r7, #28]
 8013b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013b18:	f7ed f8b6 	bl	8000c88 <__aeabi_uldivmod>
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	460b      	mov	r3, r1
 8013b20:	4613      	mov	r3, r2
 8013b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013b24:	4b0b      	ldr	r3, [pc, #44]	; (8013b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	0c1b      	lsrs	r3, r3, #16
 8013b2a:	f003 0303 	and.w	r3, r3, #3
 8013b2e:	3301      	adds	r3, #1
 8013b30:	005b      	lsls	r3, r3, #1
 8013b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8013b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8013b3e:	e002      	b.n	8013b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013b40:	4b05      	ldr	r3, [pc, #20]	; (8013b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8013b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8013b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3750      	adds	r7, #80	; 0x50
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013b52:	bf00      	nop
 8013b54:	40023800 	.word	0x40023800
 8013b58:	00f42400 	.word	0x00f42400

08013b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013b60:	4b03      	ldr	r3, [pc, #12]	; (8013b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8013b62:	681b      	ldr	r3, [r3, #0]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	46bd      	mov	sp, r7
 8013b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6c:	4770      	bx	lr
 8013b6e:	bf00      	nop
 8013b70:	20000020 	.word	0x20000020

08013b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013b78:	f7ff fff0 	bl	8013b5c <HAL_RCC_GetHCLKFreq>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	4b05      	ldr	r3, [pc, #20]	; (8013b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013b80:	689b      	ldr	r3, [r3, #8]
 8013b82:	0a9b      	lsrs	r3, r3, #10
 8013b84:	f003 0307 	and.w	r3, r3, #7
 8013b88:	4903      	ldr	r1, [pc, #12]	; (8013b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013b8a:	5ccb      	ldrb	r3, [r1, r3]
 8013b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	40023800 	.word	0x40023800
 8013b98:	0801fde8 	.word	0x0801fde8

08013b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013ba0:	f7ff ffdc 	bl	8013b5c <HAL_RCC_GetHCLKFreq>
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	4b05      	ldr	r3, [pc, #20]	; (8013bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	0b5b      	lsrs	r3, r3, #13
 8013bac:	f003 0307 	and.w	r3, r3, #7
 8013bb0:	4903      	ldr	r1, [pc, #12]	; (8013bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013bb2:	5ccb      	ldrb	r3, [r1, r3]
 8013bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	40023800 	.word	0x40023800
 8013bc0:	0801fde8 	.word	0x0801fde8

08013bc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	220f      	movs	r2, #15
 8013bd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013bd4:	4b12      	ldr	r3, [pc, #72]	; (8013c20 <HAL_RCC_GetClockConfig+0x5c>)
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	f003 0203 	and.w	r2, r3, #3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013be0:	4b0f      	ldr	r3, [pc, #60]	; (8013c20 <HAL_RCC_GetClockConfig+0x5c>)
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8013bec:	4b0c      	ldr	r3, [pc, #48]	; (8013c20 <HAL_RCC_GetClockConfig+0x5c>)
 8013bee:	689b      	ldr	r3, [r3, #8]
 8013bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8013bf8:	4b09      	ldr	r3, [pc, #36]	; (8013c20 <HAL_RCC_GetClockConfig+0x5c>)
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	08db      	lsrs	r3, r3, #3
 8013bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8013c06:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <HAL_RCC_GetClockConfig+0x60>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	f003 0207 	and.w	r2, r3, #7
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	601a      	str	r2, [r3, #0]
}
 8013c12:	bf00      	nop
 8013c14:	370c      	adds	r7, #12
 8013c16:	46bd      	mov	sp, r7
 8013c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1c:	4770      	bx	lr
 8013c1e:	bf00      	nop
 8013c20:	40023800 	.word	0x40023800
 8013c24:	40023c00 	.word	0x40023c00

08013c28 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d101      	bne.n	8013c3a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8013c36:	2301      	movs	r3, #1
 8013c38:	e01c      	b.n	8013c74 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	795b      	ldrb	r3, [r3, #5]
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d105      	bne.n	8013c50 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2200      	movs	r2, #0
 8013c48:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7fc f9ae 	bl	800ffac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2202      	movs	r2, #2
 8013c54:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	f042 0204 	orr.w	r2, r2, #4
 8013c64:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2201      	movs	r2, #1
 8013c6a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013c86:	2300      	movs	r3, #0
 8013c88:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	791b      	ldrb	r3, [r3, #4]
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d101      	bne.n	8013c96 <HAL_RNG_GenerateRandomNumber+0x1a>
 8013c92:	2302      	movs	r3, #2
 8013c94:	e044      	b.n	8013d20 <HAL_RNG_GenerateRandomNumber+0xa4>
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2201      	movs	r2, #1
 8013c9a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	795b      	ldrb	r3, [r3, #5]
 8013ca0:	b2db      	uxtb	r3, r3
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	d133      	bne.n	8013d0e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2202      	movs	r2, #2
 8013caa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8013cac:	f7fd f8b6 	bl	8010e1c <HAL_GetTick>
 8013cb0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8013cb2:	e018      	b.n	8013ce6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8013cb4:	f7fd f8b2 	bl	8010e1c <HAL_GetTick>
 8013cb8:	4602      	mov	r2, r0
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d911      	bls.n	8013ce6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	f003 0301 	and.w	r3, r3, #1
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d00a      	beq.n	8013ce6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2202      	movs	r2, #2
 8013cda:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2200      	movs	r2, #0
 8013ce0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e01c      	b.n	8013d20 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	f003 0301 	and.w	r3, r3, #1
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d1df      	bne.n	8013cb4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	689a      	ldr	r2, [r3, #8]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	68da      	ldr	r2, [r3, #12]
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	715a      	strb	r2, [r3, #5]
 8013d0c:	e004      	b.n	8013d18 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2204      	movs	r2, #4
 8013d12:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8013d14:	2301      	movs	r3, #1
 8013d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	711a      	strb	r2, [r3, #4]

  return status;
 8013d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d101      	bne.n	8013d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013d36:	2301      	movs	r3, #1
 8013d38:	e07b      	b.n	8013e32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d108      	bne.n	8013d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d4a:	d009      	beq.n	8013d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	61da      	str	r2, [r3, #28]
 8013d52:	e005      	b.n	8013d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2200      	movs	r2, #0
 8013d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d106      	bne.n	8013d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2200      	movs	r2, #0
 8013d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7fc f96e 	bl	801005c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2202      	movs	r2, #2
 8013d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	681a      	ldr	r2, [r3, #0]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	689b      	ldr	r3, [r3, #8]
 8013da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013da8:	431a      	orrs	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013db2:	431a      	orrs	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	691b      	ldr	r3, [r3, #16]
 8013db8:	f003 0302 	and.w	r3, r3, #2
 8013dbc:	431a      	orrs	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	695b      	ldr	r3, [r3, #20]
 8013dc2:	f003 0301 	and.w	r3, r3, #1
 8013dc6:	431a      	orrs	r2, r3
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	699b      	ldr	r3, [r3, #24]
 8013dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013dd0:	431a      	orrs	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	69db      	ldr	r3, [r3, #28]
 8013dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013dda:	431a      	orrs	r2, r3
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6a1b      	ldr	r3, [r3, #32]
 8013de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013de4:	ea42 0103 	orr.w	r1, r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	430a      	orrs	r2, r1
 8013df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	699b      	ldr	r3, [r3, #24]
 8013dfc:	0c1b      	lsrs	r3, r3, #16
 8013dfe:	f003 0104 	and.w	r1, r3, #4
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e06:	f003 0210 	and.w	r2, r3, #16
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	430a      	orrs	r2, r1
 8013e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	69da      	ldr	r2, [r3, #28]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3708      	adds	r7, #8
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}

08013e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013e3a:	b580      	push	{r7, lr}
 8013e3c:	b088      	sub	sp, #32
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	60f8      	str	r0, [r7, #12]
 8013e42:	60b9      	str	r1, [r7, #8]
 8013e44:	603b      	str	r3, [r7, #0]
 8013e46:	4613      	mov	r3, r2
 8013e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d101      	bne.n	8013e5c <HAL_SPI_Transmit+0x22>
 8013e58:	2302      	movs	r3, #2
 8013e5a:	e126      	b.n	80140aa <HAL_SPI_Transmit+0x270>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2201      	movs	r2, #1
 8013e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013e64:	f7fc ffda 	bl	8010e1c <HAL_GetTick>
 8013e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013e6a:	88fb      	ldrh	r3, [r7, #6]
 8013e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e74:	b2db      	uxtb	r3, r3
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	d002      	beq.n	8013e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013e7a:	2302      	movs	r3, #2
 8013e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013e7e:	e10b      	b.n	8014098 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <HAL_SPI_Transmit+0x52>
 8013e86:	88fb      	ldrh	r3, [r7, #6]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d102      	bne.n	8013e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013e90:	e102      	b.n	8014098 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2203      	movs	r2, #3
 8013e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	68ba      	ldr	r2, [r7, #8]
 8013ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	88fa      	ldrh	r2, [r7, #6]
 8013eaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	88fa      	ldrh	r2, [r7, #6]
 8013eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ed8:	d10f      	bne.n	8013efa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f04:	2b40      	cmp	r3, #64	; 0x40
 8013f06:	d007      	beq.n	8013f18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013f20:	d14b      	bne.n	8013fba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d002      	beq.n	8013f30 <HAL_SPI_Transmit+0xf6>
 8013f2a:	8afb      	ldrh	r3, [r7, #22]
 8013f2c:	2b01      	cmp	r3, #1
 8013f2e:	d13e      	bne.n	8013fae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f34:	881a      	ldrh	r2, [r3, #0]
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f40:	1c9a      	adds	r2, r3, #2
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	3b01      	subs	r3, #1
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013f54:	e02b      	b.n	8013fae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	f003 0302 	and.w	r3, r3, #2
 8013f60:	2b02      	cmp	r3, #2
 8013f62:	d112      	bne.n	8013f8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f68:	881a      	ldrh	r2, [r3, #0]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f74:	1c9a      	adds	r2, r3, #2
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	3b01      	subs	r3, #1
 8013f82:	b29a      	uxth	r2, r3
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8013f88:	e011      	b.n	8013fae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013f8a:	f7fc ff47 	bl	8010e1c <HAL_GetTick>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	1ad3      	subs	r3, r2, r3
 8013f94:	683a      	ldr	r2, [r7, #0]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d803      	bhi.n	8013fa2 <HAL_SPI_Transmit+0x168>
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa0:	d102      	bne.n	8013fa8 <HAL_SPI_Transmit+0x16e>
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d102      	bne.n	8013fae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8013fa8:	2303      	movs	r3, #3
 8013faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013fac:	e074      	b.n	8014098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d1ce      	bne.n	8013f56 <HAL_SPI_Transmit+0x11c>
 8013fb8:	e04c      	b.n	8014054 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d002      	beq.n	8013fc8 <HAL_SPI_Transmit+0x18e>
 8013fc2:	8afb      	ldrh	r3, [r7, #22]
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d140      	bne.n	801404a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	330c      	adds	r3, #12
 8013fd2:	7812      	ldrb	r2, [r2, #0]
 8013fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fda:	1c5a      	adds	r2, r3, #1
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	3b01      	subs	r3, #1
 8013fe8:	b29a      	uxth	r2, r3
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013fee:	e02c      	b.n	801404a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	689b      	ldr	r3, [r3, #8]
 8013ff6:	f003 0302 	and.w	r3, r3, #2
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	d113      	bne.n	8014026 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	330c      	adds	r3, #12
 8014008:	7812      	ldrb	r2, [r2, #0]
 801400a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801401a:	b29b      	uxth	r3, r3
 801401c:	3b01      	subs	r3, #1
 801401e:	b29a      	uxth	r2, r3
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	86da      	strh	r2, [r3, #54]	; 0x36
 8014024:	e011      	b.n	801404a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014026:	f7fc fef9 	bl	8010e1c <HAL_GetTick>
 801402a:	4602      	mov	r2, r0
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	1ad3      	subs	r3, r2, r3
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	429a      	cmp	r2, r3
 8014034:	d803      	bhi.n	801403e <HAL_SPI_Transmit+0x204>
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	f1b3 3fff 	cmp.w	r3, #4294967295
 801403c:	d102      	bne.n	8014044 <HAL_SPI_Transmit+0x20a>
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d102      	bne.n	801404a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8014044:	2303      	movs	r3, #3
 8014046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8014048:	e026      	b.n	8014098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801404e:	b29b      	uxth	r3, r3
 8014050:	2b00      	cmp	r3, #0
 8014052:	d1cd      	bne.n	8013ff0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014054:	69ba      	ldr	r2, [r7, #24]
 8014056:	6839      	ldr	r1, [r7, #0]
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	f000 fbcb 	bl	80147f4 <SPI_EndRxTxTransaction>
 801405e:	4603      	mov	r3, r0
 8014060:	2b00      	cmp	r3, #0
 8014062:	d002      	beq.n	801406a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2220      	movs	r2, #32
 8014068:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	689b      	ldr	r3, [r3, #8]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d10a      	bne.n	8014088 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014072:	2300      	movs	r3, #0
 8014074:	613b      	str	r3, [r7, #16]
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	613b      	str	r3, [r7, #16]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	613b      	str	r3, [r7, #16]
 8014086:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801408c:	2b00      	cmp	r3, #0
 801408e:	d002      	beq.n	8014096 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8014090:	2301      	movs	r3, #1
 8014092:	77fb      	strb	r3, [r7, #31]
 8014094:	e000      	b.n	8014098 <HAL_SPI_Transmit+0x25e>
  }

error:
 8014096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2201      	movs	r2, #1
 801409c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2200      	movs	r2, #0
 80140a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80140a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3720      	adds	r7, #32
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b088      	sub	sp, #32
 80140b6:	af02      	add	r7, sp, #8
 80140b8:	60f8      	str	r0, [r7, #12]
 80140ba:	60b9      	str	r1, [r7, #8]
 80140bc:	603b      	str	r3, [r7, #0]
 80140be:	4613      	mov	r3, r2
 80140c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80140c2:	2300      	movs	r3, #0
 80140c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80140ce:	d112      	bne.n	80140f6 <HAL_SPI_Receive+0x44>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d10e      	bne.n	80140f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	2204      	movs	r2, #4
 80140dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80140e0:	88fa      	ldrh	r2, [r7, #6]
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	9300      	str	r3, [sp, #0]
 80140e6:	4613      	mov	r3, r2
 80140e8:	68ba      	ldr	r2, [r7, #8]
 80140ea:	68b9      	ldr	r1, [r7, #8]
 80140ec:	68f8      	ldr	r0, [r7, #12]
 80140ee:	f000 f8f1 	bl	80142d4 <HAL_SPI_TransmitReceive>
 80140f2:	4603      	mov	r3, r0
 80140f4:	e0ea      	b.n	80142cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d101      	bne.n	8014104 <HAL_SPI_Receive+0x52>
 8014100:	2302      	movs	r3, #2
 8014102:	e0e3      	b.n	80142cc <HAL_SPI_Receive+0x21a>
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2201      	movs	r2, #1
 8014108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801410c:	f7fc fe86 	bl	8010e1c <HAL_GetTick>
 8014110:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014118:	b2db      	uxtb	r3, r3
 801411a:	2b01      	cmp	r3, #1
 801411c:	d002      	beq.n	8014124 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801411e:	2302      	movs	r3, #2
 8014120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014122:	e0ca      	b.n	80142ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d002      	beq.n	8014130 <HAL_SPI_Receive+0x7e>
 801412a:	88fb      	ldrh	r3, [r7, #6]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d102      	bne.n	8014136 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8014130:	2301      	movs	r3, #1
 8014132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8014134:	e0c1      	b.n	80142ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	2204      	movs	r2, #4
 801413a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2200      	movs	r2, #0
 8014142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	88fa      	ldrh	r2, [r7, #6]
 801414e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	88fa      	ldrh	r2, [r7, #6]
 8014154:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2200      	movs	r2, #0
 801415a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2200      	movs	r2, #0
 8014160:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2200      	movs	r2, #0
 801416c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2200      	movs	r2, #0
 8014172:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	689b      	ldr	r3, [r3, #8]
 8014178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801417c:	d10f      	bne.n	801419e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801418c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801419c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141a8:	2b40      	cmp	r3, #64	; 0x40
 80141aa:	d007      	beq.n	80141bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80141ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d162      	bne.n	801428a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80141c4:	e02e      	b.n	8014224 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	689b      	ldr	r3, [r3, #8]
 80141cc:	f003 0301 	and.w	r3, r3, #1
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d115      	bne.n	8014200 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f103 020c 	add.w	r2, r3, #12
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141e0:	7812      	ldrb	r2, [r2, #0]
 80141e2:	b2d2      	uxtb	r2, r2
 80141e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141ea:	1c5a      	adds	r2, r3, #1
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	3b01      	subs	r3, #1
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80141fe:	e011      	b.n	8014224 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014200:	f7fc fe0c 	bl	8010e1c <HAL_GetTick>
 8014204:	4602      	mov	r2, r0
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	1ad3      	subs	r3, r2, r3
 801420a:	683a      	ldr	r2, [r7, #0]
 801420c:	429a      	cmp	r2, r3
 801420e:	d803      	bhi.n	8014218 <HAL_SPI_Receive+0x166>
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014216:	d102      	bne.n	801421e <HAL_SPI_Receive+0x16c>
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d102      	bne.n	8014224 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801421e:	2303      	movs	r3, #3
 8014220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014222:	e04a      	b.n	80142ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014228:	b29b      	uxth	r3, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1cb      	bne.n	80141c6 <HAL_SPI_Receive+0x114>
 801422e:	e031      	b.n	8014294 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	689b      	ldr	r3, [r3, #8]
 8014236:	f003 0301 	and.w	r3, r3, #1
 801423a:	2b01      	cmp	r3, #1
 801423c:	d113      	bne.n	8014266 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	68da      	ldr	r2, [r3, #12]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014248:	b292      	uxth	r2, r2
 801424a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014250:	1c9a      	adds	r2, r3, #2
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801425a:	b29b      	uxth	r3, r3
 801425c:	3b01      	subs	r3, #1
 801425e:	b29a      	uxth	r2, r3
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014264:	e011      	b.n	801428a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014266:	f7fc fdd9 	bl	8010e1c <HAL_GetTick>
 801426a:	4602      	mov	r2, r0
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d803      	bhi.n	801427e <HAL_SPI_Receive+0x1cc>
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801427c:	d102      	bne.n	8014284 <HAL_SPI_Receive+0x1d2>
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d102      	bne.n	801428a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8014284:	2303      	movs	r3, #3
 8014286:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014288:	e017      	b.n	80142ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801428e:	b29b      	uxth	r3, r3
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1cd      	bne.n	8014230 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014294:	693a      	ldr	r2, [r7, #16]
 8014296:	6839      	ldr	r1, [r7, #0]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f000 fa45 	bl	8014728 <SPI_EndRxTransaction>
 801429e:	4603      	mov	r3, r0
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d002      	beq.n	80142aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2220      	movs	r2, #32
 80142a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80142b2:	2301      	movs	r3, #1
 80142b4:	75fb      	strb	r3, [r7, #23]
 80142b6:	e000      	b.n	80142ba <HAL_SPI_Receive+0x208>
  }

error :
 80142b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2201      	movs	r2, #1
 80142be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	2200      	movs	r2, #0
 80142c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80142ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3718      	adds	r7, #24
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b08c      	sub	sp, #48	; 0x30
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
 80142e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80142e2:	2301      	movs	r3, #1
 80142e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80142e6:	2300      	movs	r3, #0
 80142e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d101      	bne.n	80142fa <HAL_SPI_TransmitReceive+0x26>
 80142f6:	2302      	movs	r3, #2
 80142f8:	e18a      	b.n	8014610 <HAL_SPI_TransmitReceive+0x33c>
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	2201      	movs	r2, #1
 80142fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014302:	f7fc fd8b 	bl	8010e1c <HAL_GetTick>
 8014306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8014318:	887b      	ldrh	r3, [r7, #2]
 801431a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801431c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014320:	2b01      	cmp	r3, #1
 8014322:	d00f      	beq.n	8014344 <HAL_SPI_TransmitReceive+0x70>
 8014324:	69fb      	ldr	r3, [r7, #28]
 8014326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801432a:	d107      	bne.n	801433c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d103      	bne.n	801433c <HAL_SPI_TransmitReceive+0x68>
 8014334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014338:	2b04      	cmp	r3, #4
 801433a:	d003      	beq.n	8014344 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801433c:	2302      	movs	r3, #2
 801433e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8014342:	e15b      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d005      	beq.n	8014356 <HAL_SPI_TransmitReceive+0x82>
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d002      	beq.n	8014356 <HAL_SPI_TransmitReceive+0x82>
 8014350:	887b      	ldrh	r3, [r7, #2]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d103      	bne.n	801435e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8014356:	2301      	movs	r3, #1
 8014358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801435c:	e14e      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014364:	b2db      	uxtb	r3, r3
 8014366:	2b04      	cmp	r3, #4
 8014368:	d003      	beq.n	8014372 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	2205      	movs	r2, #5
 801436e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2200      	movs	r2, #0
 8014376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	687a      	ldr	r2, [r7, #4]
 801437c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	887a      	ldrh	r2, [r7, #2]
 8014382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	887a      	ldrh	r2, [r7, #2]
 8014388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	887a      	ldrh	r2, [r7, #2]
 8014394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	887a      	ldrh	r2, [r7, #2]
 801439a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2200      	movs	r2, #0
 80143a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143b2:	2b40      	cmp	r3, #64	; 0x40
 80143b4:	d007      	beq.n	80143c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80143c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80143ce:	d178      	bne.n	80144c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d002      	beq.n	80143de <HAL_SPI_TransmitReceive+0x10a>
 80143d8:	8b7b      	ldrh	r3, [r7, #26]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d166      	bne.n	80144ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143e2:	881a      	ldrh	r2, [r3, #0]
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ee:	1c9a      	adds	r2, r3, #2
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	3b01      	subs	r3, #1
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014402:	e053      	b.n	80144ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	689b      	ldr	r3, [r3, #8]
 801440a:	f003 0302 	and.w	r3, r3, #2
 801440e:	2b02      	cmp	r3, #2
 8014410:	d11b      	bne.n	801444a <HAL_SPI_TransmitReceive+0x176>
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014416:	b29b      	uxth	r3, r3
 8014418:	2b00      	cmp	r3, #0
 801441a:	d016      	beq.n	801444a <HAL_SPI_TransmitReceive+0x176>
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	2b01      	cmp	r3, #1
 8014420:	d113      	bne.n	801444a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014426:	881a      	ldrh	r2, [r3, #0]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014432:	1c9a      	adds	r2, r3, #2
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801443c:	b29b      	uxth	r3, r3
 801443e:	3b01      	subs	r3, #1
 8014440:	b29a      	uxth	r2, r3
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014446:	2300      	movs	r3, #0
 8014448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	689b      	ldr	r3, [r3, #8]
 8014450:	f003 0301 	and.w	r3, r3, #1
 8014454:	2b01      	cmp	r3, #1
 8014456:	d119      	bne.n	801448c <HAL_SPI_TransmitReceive+0x1b8>
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801445c:	b29b      	uxth	r3, r3
 801445e:	2b00      	cmp	r3, #0
 8014460:	d014      	beq.n	801448c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	68da      	ldr	r2, [r3, #12]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801446c:	b292      	uxth	r2, r2
 801446e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014474:	1c9a      	adds	r2, r3, #2
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801447e:	b29b      	uxth	r3, r3
 8014480:	3b01      	subs	r3, #1
 8014482:	b29a      	uxth	r2, r3
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014488:	2301      	movs	r3, #1
 801448a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801448c:	f7fc fcc6 	bl	8010e1c <HAL_GetTick>
 8014490:	4602      	mov	r2, r0
 8014492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014494:	1ad3      	subs	r3, r2, r3
 8014496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014498:	429a      	cmp	r2, r3
 801449a:	d807      	bhi.n	80144ac <HAL_SPI_TransmitReceive+0x1d8>
 801449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144a2:	d003      	beq.n	80144ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80144a4:	2303      	movs	r3, #3
 80144a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80144aa:	e0a7      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d1a6      	bne.n	8014404 <HAL_SPI_TransmitReceive+0x130>
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d1a1      	bne.n	8014404 <HAL_SPI_TransmitReceive+0x130>
 80144c0:	e07c      	b.n	80145bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	685b      	ldr	r3, [r3, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d002      	beq.n	80144d0 <HAL_SPI_TransmitReceive+0x1fc>
 80144ca:	8b7b      	ldrh	r3, [r7, #26]
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d16b      	bne.n	80145a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	330c      	adds	r3, #12
 80144da:	7812      	ldrb	r2, [r2, #0]
 80144dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144e2:	1c5a      	adds	r2, r3, #1
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	3b01      	subs	r3, #1
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80144f6:	e057      	b.n	80145a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	f003 0302 	and.w	r3, r3, #2
 8014502:	2b02      	cmp	r3, #2
 8014504:	d11c      	bne.n	8014540 <HAL_SPI_TransmitReceive+0x26c>
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801450a:	b29b      	uxth	r3, r3
 801450c:	2b00      	cmp	r3, #0
 801450e:	d017      	beq.n	8014540 <HAL_SPI_TransmitReceive+0x26c>
 8014510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014512:	2b01      	cmp	r3, #1
 8014514:	d114      	bne.n	8014540 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	330c      	adds	r3, #12
 8014520:	7812      	ldrb	r2, [r2, #0]
 8014522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014532:	b29b      	uxth	r3, r3
 8014534:	3b01      	subs	r3, #1
 8014536:	b29a      	uxth	r2, r3
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801453c:	2300      	movs	r3, #0
 801453e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	689b      	ldr	r3, [r3, #8]
 8014546:	f003 0301 	and.w	r3, r3, #1
 801454a:	2b01      	cmp	r3, #1
 801454c:	d119      	bne.n	8014582 <HAL_SPI_TransmitReceive+0x2ae>
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014552:	b29b      	uxth	r3, r3
 8014554:	2b00      	cmp	r3, #0
 8014556:	d014      	beq.n	8014582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	68da      	ldr	r2, [r3, #12]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014562:	b2d2      	uxtb	r2, r2
 8014564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801456a:	1c5a      	adds	r2, r3, #1
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014574:	b29b      	uxth	r3, r3
 8014576:	3b01      	subs	r3, #1
 8014578:	b29a      	uxth	r2, r3
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801457e:	2301      	movs	r3, #1
 8014580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014582:	f7fc fc4b 	bl	8010e1c <HAL_GetTick>
 8014586:	4602      	mov	r2, r0
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458a:	1ad3      	subs	r3, r2, r3
 801458c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801458e:	429a      	cmp	r2, r3
 8014590:	d803      	bhi.n	801459a <HAL_SPI_TransmitReceive+0x2c6>
 8014592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014598:	d102      	bne.n	80145a0 <HAL_SPI_TransmitReceive+0x2cc>
 801459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459c:	2b00      	cmp	r3, #0
 801459e:	d103      	bne.n	80145a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80145a0:	2303      	movs	r3, #3
 80145a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80145a6:	e029      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1a2      	bne.n	80144f8 <HAL_SPI_TransmitReceive+0x224>
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145b6:	b29b      	uxth	r3, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d19d      	bne.n	80144f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80145bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80145c0:	68f8      	ldr	r0, [r7, #12]
 80145c2:	f000 f917 	bl	80147f4 <SPI_EndRxTxTransaction>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d006      	beq.n	80145da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80145cc:	2301      	movs	r3, #1
 80145ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2220      	movs	r2, #32
 80145d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80145d8:	e010      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d10b      	bne.n	80145fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80145e2:	2300      	movs	r3, #0
 80145e4:	617b      	str	r3, [r7, #20]
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	617b      	str	r3, [r7, #20]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	617b      	str	r3, [r7, #20]
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	e000      	b.n	80145fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80145fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2201      	movs	r2, #1
 8014600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2200      	movs	r2, #0
 8014608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801460c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014610:	4618      	mov	r0, r3
 8014612:	3730      	adds	r7, #48	; 0x30
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	603b      	str	r3, [r7, #0]
 8014624:	4613      	mov	r3, r2
 8014626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014628:	f7fc fbf8 	bl	8010e1c <HAL_GetTick>
 801462c:	4602      	mov	r2, r0
 801462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014630:	1a9b      	subs	r3, r3, r2
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	4413      	add	r3, r2
 8014636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014638:	f7fc fbf0 	bl	8010e1c <HAL_GetTick>
 801463c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801463e:	4b39      	ldr	r3, [pc, #228]	; (8014724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	015b      	lsls	r3, r3, #5
 8014644:	0d1b      	lsrs	r3, r3, #20
 8014646:	69fa      	ldr	r2, [r7, #28]
 8014648:	fb02 f303 	mul.w	r3, r2, r3
 801464c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801464e:	e054      	b.n	80146fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014656:	d050      	beq.n	80146fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014658:	f7fc fbe0 	bl	8010e1c <HAL_GetTick>
 801465c:	4602      	mov	r2, r0
 801465e:	69bb      	ldr	r3, [r7, #24]
 8014660:	1ad3      	subs	r3, r2, r3
 8014662:	69fa      	ldr	r2, [r7, #28]
 8014664:	429a      	cmp	r2, r3
 8014666:	d902      	bls.n	801466e <SPI_WaitFlagStateUntilTimeout+0x56>
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d13d      	bne.n	80146ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801467c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014686:	d111      	bne.n	80146ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014690:	d004      	beq.n	801469c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	689b      	ldr	r3, [r3, #8]
 8014696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801469a:	d107      	bne.n	80146ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	681a      	ldr	r2, [r3, #0]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80146aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80146b4:	d10f      	bne.n	80146d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80146c4:	601a      	str	r2, [r3, #0]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	681a      	ldr	r2, [r3, #0]
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80146d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2201      	movs	r2, #1
 80146da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	2200      	movs	r2, #0
 80146e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80146e6:	2303      	movs	r3, #3
 80146e8:	e017      	b.n	801471a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d101      	bne.n	80146f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80146f0:	2300      	movs	r3, #0
 80146f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80146f4:	697b      	ldr	r3, [r7, #20]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	689a      	ldr	r2, [r3, #8]
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	4013      	ands	r3, r2
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	429a      	cmp	r2, r3
 8014708:	bf0c      	ite	eq
 801470a:	2301      	moveq	r3, #1
 801470c:	2300      	movne	r3, #0
 801470e:	b2db      	uxtb	r3, r3
 8014710:	461a      	mov	r2, r3
 8014712:	79fb      	ldrb	r3, [r7, #7]
 8014714:	429a      	cmp	r2, r3
 8014716:	d19b      	bne.n	8014650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3720      	adds	r7, #32
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20000020 	.word	0x20000020

08014728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b086      	sub	sp, #24
 801472c:	af02      	add	r7, sp, #8
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801473c:	d111      	bne.n	8014762 <SPI_EndRxTransaction+0x3a>
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014746:	d004      	beq.n	8014752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	689b      	ldr	r3, [r3, #8]
 801474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014750:	d107      	bne.n	8014762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014760:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801476a:	d12a      	bne.n	80147c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014774:	d012      	beq.n	801479c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	9300      	str	r3, [sp, #0]
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2200      	movs	r2, #0
 801477e:	2180      	movs	r1, #128	; 0x80
 8014780:	68f8      	ldr	r0, [r7, #12]
 8014782:	f7ff ff49 	bl	8014618 <SPI_WaitFlagStateUntilTimeout>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d02d      	beq.n	80147e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014790:	f043 0220 	orr.w	r2, r3, #32
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014798:	2303      	movs	r3, #3
 801479a:	e026      	b.n	80147ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	9300      	str	r3, [sp, #0]
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	2200      	movs	r2, #0
 80147a4:	2101      	movs	r1, #1
 80147a6:	68f8      	ldr	r0, [r7, #12]
 80147a8:	f7ff ff36 	bl	8014618 <SPI_WaitFlagStateUntilTimeout>
 80147ac:	4603      	mov	r3, r0
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d01a      	beq.n	80147e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147b6:	f043 0220 	orr.w	r2, r3, #32
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80147be:	2303      	movs	r3, #3
 80147c0:	e013      	b.n	80147ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	2200      	movs	r2, #0
 80147ca:	2101      	movs	r1, #1
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f7ff ff23 	bl	8014618 <SPI_WaitFlagStateUntilTimeout>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d007      	beq.n	80147e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147dc:	f043 0220 	orr.w	r2, r3, #32
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80147e4:	2303      	movs	r3, #3
 80147e6:	e000      	b.n	80147ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80147e8:	2300      	movs	r3, #0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3710      	adds	r7, #16
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
	...

080147f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b088      	sub	sp, #32
 80147f8:	af02      	add	r7, sp, #8
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014800:	4b1b      	ldr	r3, [pc, #108]	; (8014870 <SPI_EndRxTxTransaction+0x7c>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a1b      	ldr	r2, [pc, #108]	; (8014874 <SPI_EndRxTxTransaction+0x80>)
 8014806:	fba2 2303 	umull	r2, r3, r2, r3
 801480a:	0d5b      	lsrs	r3, r3, #21
 801480c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014810:	fb02 f303 	mul.w	r3, r2, r3
 8014814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801481e:	d112      	bne.n	8014846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	9300      	str	r3, [sp, #0]
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	2200      	movs	r2, #0
 8014828:	2180      	movs	r1, #128	; 0x80
 801482a:	68f8      	ldr	r0, [r7, #12]
 801482c:	f7ff fef4 	bl	8014618 <SPI_WaitFlagStateUntilTimeout>
 8014830:	4603      	mov	r3, r0
 8014832:	2b00      	cmp	r3, #0
 8014834:	d016      	beq.n	8014864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801483a:	f043 0220 	orr.w	r2, r3, #32
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014842:	2303      	movs	r3, #3
 8014844:	e00f      	b.n	8014866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d00a      	beq.n	8014862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	3b01      	subs	r3, #1
 8014850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	689b      	ldr	r3, [r3, #8]
 8014858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801485c:	2b80      	cmp	r3, #128	; 0x80
 801485e:	d0f2      	beq.n	8014846 <SPI_EndRxTxTransaction+0x52>
 8014860:	e000      	b.n	8014864 <SPI_EndRxTxTransaction+0x70>
        break;
 8014862:	bf00      	nop
  }

  return HAL_OK;
 8014864:	2300      	movs	r3, #0
}
 8014866:	4618      	mov	r0, r3
 8014868:	3718      	adds	r7, #24
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}
 801486e:	bf00      	nop
 8014870:	20000020 	.word	0x20000020
 8014874:	165e9f81 	.word	0x165e9f81

08014878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d101      	bne.n	801488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014886:	2301      	movs	r3, #1
 8014888:	e041      	b.n	801490e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014890:	b2db      	uxtb	r3, r3
 8014892:	2b00      	cmp	r3, #0
 8014894:	d106      	bne.n	80148a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2200      	movs	r2, #0
 801489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f7fc f81c 	bl	80108dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2202      	movs	r2, #2
 80148a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	3304      	adds	r3, #4
 80148b4:	4619      	mov	r1, r3
 80148b6:	4610      	mov	r0, r2
 80148b8:	f000 fc58 	bl	801516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2201      	movs	r2, #1
 80148c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2201      	movs	r2, #1
 80148c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2201      	movs	r2, #1
 80148d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2201      	movs	r2, #1
 80148d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2201      	movs	r2, #1
 80148e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2201      	movs	r2, #1
 80148e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2201      	movs	r2, #1
 80148f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2201      	movs	r2, #1
 80148f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2201      	movs	r2, #1
 8014900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2201      	movs	r2, #1
 8014908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801490c:	2300      	movs	r3, #0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
	...

08014918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8014918:	b480      	push	{r7}
 801491a:	b085      	sub	sp, #20
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014926:	b2db      	uxtb	r3, r3
 8014928:	2b01      	cmp	r3, #1
 801492a:	d001      	beq.n	8014930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801492c:	2301      	movs	r3, #1
 801492e:	e04e      	b.n	80149ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2202      	movs	r2, #2
 8014934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	68da      	ldr	r2, [r3, #12]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	f042 0201 	orr.w	r2, r2, #1
 8014946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	4a23      	ldr	r2, [pc, #140]	; (80149dc <HAL_TIM_Base_Start_IT+0xc4>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d022      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801495a:	d01d      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4a1f      	ldr	r2, [pc, #124]	; (80149e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d018      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	4a1e      	ldr	r2, [pc, #120]	; (80149e4 <HAL_TIM_Base_Start_IT+0xcc>)
 801496c:	4293      	cmp	r3, r2
 801496e:	d013      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	4a1c      	ldr	r2, [pc, #112]	; (80149e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8014976:	4293      	cmp	r3, r2
 8014978:	d00e      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	4a1b      	ldr	r2, [pc, #108]	; (80149ec <HAL_TIM_Base_Start_IT+0xd4>)
 8014980:	4293      	cmp	r3, r2
 8014982:	d009      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a19      	ldr	r2, [pc, #100]	; (80149f0 <HAL_TIM_Base_Start_IT+0xd8>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d004      	beq.n	8014998 <HAL_TIM_Base_Start_IT+0x80>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a18      	ldr	r2, [pc, #96]	; (80149f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8014994:	4293      	cmp	r3, r2
 8014996:	d111      	bne.n	80149bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	689b      	ldr	r3, [r3, #8]
 801499e:	f003 0307 	and.w	r3, r3, #7
 80149a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	2b06      	cmp	r3, #6
 80149a8:	d010      	beq.n	80149cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	f042 0201 	orr.w	r2, r2, #1
 80149b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80149ba:	e007      	b.n	80149cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f042 0201 	orr.w	r2, r2, #1
 80149ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80149cc:	2300      	movs	r3, #0
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3714      	adds	r7, #20
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	40010000 	.word	0x40010000
 80149e0:	40000400 	.word	0x40000400
 80149e4:	40000800 	.word	0x40000800
 80149e8:	40000c00 	.word	0x40000c00
 80149ec:	40010400 	.word	0x40010400
 80149f0:	40014000 	.word	0x40014000
 80149f4:	40001800 	.word	0x40001800

080149f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d101      	bne.n	8014a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014a06:	2301      	movs	r3, #1
 8014a08:	e041      	b.n	8014a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d106      	bne.n	8014a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f000 f839 	bl	8014a96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2202      	movs	r2, #2
 8014a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3304      	adds	r3, #4
 8014a34:	4619      	mov	r1, r3
 8014a36:	4610      	mov	r0, r2
 8014a38:	f000 fb98 	bl	801516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2201      	movs	r2, #1
 8014a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2201      	movs	r2, #1
 8014a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2201      	movs	r2, #1
 8014a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2201      	movs	r2, #1
 8014a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2201      	movs	r2, #1
 8014a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2201      	movs	r2, #1
 8014a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2201      	movs	r2, #1
 8014a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2201      	movs	r2, #1
 8014a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2201      	movs	r2, #1
 8014a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2201      	movs	r2, #1
 8014a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014a96:	b480      	push	{r7}
 8014a98:	b083      	sub	sp, #12
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014a9e:	bf00      	nop
 8014aa0:	370c      	adds	r7, #12
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr

08014aaa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b086      	sub	sp, #24
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6078      	str	r0, [r7, #4]
 8014ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d101      	bne.n	8014abe <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8014aba:	2301      	movs	r3, #1
 8014abc:	e097      	b.n	8014bee <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d106      	bne.n	8014ad8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2200      	movs	r2, #0
 8014ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7fb ff88 	bl	80109e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2202      	movs	r2, #2
 8014adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	6812      	ldr	r2, [r2, #0]
 8014aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014aee:	f023 0307 	bic.w	r3, r3, #7
 8014af2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	3304      	adds	r3, #4
 8014afc:	4619      	mov	r1, r3
 8014afe:	4610      	mov	r0, r2
 8014b00:	f000 fb34 	bl	801516c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	699b      	ldr	r3, [r3, #24]
 8014b12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	6a1b      	ldr	r3, [r3, #32]
 8014b1a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	697a      	ldr	r2, [r7, #20]
 8014b22:	4313      	orrs	r3, r2
 8014b24:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014b2c:	f023 0303 	bic.w	r3, r3, #3
 8014b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	689a      	ldr	r2, [r3, #8]
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	699b      	ldr	r3, [r3, #24]
 8014b3a:	021b      	lsls	r3, r3, #8
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	693a      	ldr	r2, [r7, #16]
 8014b40:	4313      	orrs	r3, r2
 8014b42:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8014b44:	693b      	ldr	r3, [r7, #16]
 8014b46:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014b4a:	f023 030c 	bic.w	r3, r3, #12
 8014b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	68da      	ldr	r2, [r3, #12]
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	69db      	ldr	r3, [r3, #28]
 8014b64:	021b      	lsls	r3, r3, #8
 8014b66:	4313      	orrs	r3, r2
 8014b68:	693a      	ldr	r2, [r7, #16]
 8014b6a:	4313      	orrs	r3, r2
 8014b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	691b      	ldr	r3, [r3, #16]
 8014b72:	011a      	lsls	r2, r3, #4
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	6a1b      	ldr	r3, [r3, #32]
 8014b78:	031b      	lsls	r3, r3, #12
 8014b7a:	4313      	orrs	r3, r2
 8014b7c:	693a      	ldr	r2, [r7, #16]
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8014b88:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8014b90:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	685a      	ldr	r2, [r3, #4]
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	695b      	ldr	r3, [r3, #20]
 8014b9a:	011b      	lsls	r3, r3, #4
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	68fa      	ldr	r2, [r7, #12]
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	697a      	ldr	r2, [r7, #20]
 8014baa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	693a      	ldr	r2, [r7, #16]
 8014bb2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68fa      	ldr	r2, [r7, #12]
 8014bba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2201      	movs	r2, #1
 8014bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2201      	movs	r2, #1
 8014be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2201      	movs	r2, #1
 8014be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014bec:	2300      	movs	r3, #0
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3718      	adds	r7, #24
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b082      	sub	sp, #8
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	691b      	ldr	r3, [r3, #16]
 8014c04:	f003 0302 	and.w	r3, r3, #2
 8014c08:	2b02      	cmp	r3, #2
 8014c0a:	d122      	bne.n	8014c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	f003 0302 	and.w	r3, r3, #2
 8014c16:	2b02      	cmp	r3, #2
 8014c18:	d11b      	bne.n	8014c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f06f 0202 	mvn.w	r2, #2
 8014c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2201      	movs	r2, #1
 8014c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	699b      	ldr	r3, [r3, #24]
 8014c30:	f003 0303 	and.w	r3, r3, #3
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d003      	beq.n	8014c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f000 fa78 	bl	801512e <HAL_TIM_IC_CaptureCallback>
 8014c3e:	e005      	b.n	8014c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f000 fa6a 	bl	801511a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 fa7b 	bl	8015142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	691b      	ldr	r3, [r3, #16]
 8014c58:	f003 0304 	and.w	r3, r3, #4
 8014c5c:	2b04      	cmp	r3, #4
 8014c5e:	d122      	bne.n	8014ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	f003 0304 	and.w	r3, r3, #4
 8014c6a:	2b04      	cmp	r3, #4
 8014c6c:	d11b      	bne.n	8014ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f06f 0204 	mvn.w	r2, #4
 8014c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2202      	movs	r2, #2
 8014c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	699b      	ldr	r3, [r3, #24]
 8014c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d003      	beq.n	8014c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f000 fa4e 	bl	801512e <HAL_TIM_IC_CaptureCallback>
 8014c92:	e005      	b.n	8014ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 fa40 	bl	801511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 fa51 	bl	8015142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	f003 0308 	and.w	r3, r3, #8
 8014cb0:	2b08      	cmp	r3, #8
 8014cb2:	d122      	bne.n	8014cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	f003 0308 	and.w	r3, r3, #8
 8014cbe:	2b08      	cmp	r3, #8
 8014cc0:	d11b      	bne.n	8014cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f06f 0208 	mvn.w	r2, #8
 8014cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2204      	movs	r2, #4
 8014cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	69db      	ldr	r3, [r3, #28]
 8014cd8:	f003 0303 	and.w	r3, r3, #3
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d003      	beq.n	8014ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fa24 	bl	801512e <HAL_TIM_IC_CaptureCallback>
 8014ce6:	e005      	b.n	8014cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 fa16 	bl	801511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 fa27 	bl	8015142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	691b      	ldr	r3, [r3, #16]
 8014d00:	f003 0310 	and.w	r3, r3, #16
 8014d04:	2b10      	cmp	r3, #16
 8014d06:	d122      	bne.n	8014d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	f003 0310 	and.w	r3, r3, #16
 8014d12:	2b10      	cmp	r3, #16
 8014d14:	d11b      	bne.n	8014d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f06f 0210 	mvn.w	r2, #16
 8014d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	2208      	movs	r2, #8
 8014d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	69db      	ldr	r3, [r3, #28]
 8014d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d003      	beq.n	8014d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 f9fa 	bl	801512e <HAL_TIM_IC_CaptureCallback>
 8014d3a:	e005      	b.n	8014d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f000 f9ec 	bl	801511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 f9fd 	bl	8015142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	691b      	ldr	r3, [r3, #16]
 8014d54:	f003 0301 	and.w	r3, r3, #1
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d10e      	bne.n	8014d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	f003 0301 	and.w	r3, r3, #1
 8014d66:	2b01      	cmp	r3, #1
 8014d68:	d107      	bne.n	8014d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	f06f 0201 	mvn.w	r2, #1
 8014d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f7fb f8eb 	bl	800ff50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d84:	2b80      	cmp	r3, #128	; 0x80
 8014d86:	d10e      	bne.n	8014da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d92:	2b80      	cmp	r3, #128	; 0x80
 8014d94:	d107      	bne.n	8014da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f000 fd53 	bl	801584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	691b      	ldr	r3, [r3, #16]
 8014dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014db0:	2b40      	cmp	r3, #64	; 0x40
 8014db2:	d10e      	bne.n	8014dd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dbe:	2b40      	cmp	r3, #64	; 0x40
 8014dc0:	d107      	bne.n	8014dd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f000 f9c2 	bl	8015156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	691b      	ldr	r3, [r3, #16]
 8014dd8:	f003 0320 	and.w	r3, r3, #32
 8014ddc:	2b20      	cmp	r3, #32
 8014dde:	d10e      	bne.n	8014dfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	f003 0320 	and.w	r3, r3, #32
 8014dea:	2b20      	cmp	r3, #32
 8014dec:	d107      	bne.n	8014dfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	f06f 0220 	mvn.w	r2, #32
 8014df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f000 fd1d 	bl	8015838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014dfe:	bf00      	nop
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
	...

08014e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	d101      	bne.n	8014e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014e22:	2302      	movs	r3, #2
 8014e24:	e0ae      	b.n	8014f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	2201      	movs	r2, #1
 8014e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b0c      	cmp	r3, #12
 8014e32:	f200 809f 	bhi.w	8014f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014e36:	a201      	add	r2, pc, #4	; (adr r2, 8014e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e3c:	08014e71 	.word	0x08014e71
 8014e40:	08014f75 	.word	0x08014f75
 8014e44:	08014f75 	.word	0x08014f75
 8014e48:	08014f75 	.word	0x08014f75
 8014e4c:	08014eb1 	.word	0x08014eb1
 8014e50:	08014f75 	.word	0x08014f75
 8014e54:	08014f75 	.word	0x08014f75
 8014e58:	08014f75 	.word	0x08014f75
 8014e5c:	08014ef3 	.word	0x08014ef3
 8014e60:	08014f75 	.word	0x08014f75
 8014e64:	08014f75 	.word	0x08014f75
 8014e68:	08014f75 	.word	0x08014f75
 8014e6c:	08014f33 	.word	0x08014f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	68b9      	ldr	r1, [r7, #8]
 8014e76:	4618      	mov	r0, r3
 8014e78:	f000 fa18 	bl	80152ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	699a      	ldr	r2, [r3, #24]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	f042 0208 	orr.w	r2, r2, #8
 8014e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	699a      	ldr	r2, [r3, #24]
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f022 0204 	bic.w	r2, r2, #4
 8014e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	6999      	ldr	r1, [r3, #24]
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	691a      	ldr	r2, [r3, #16]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	430a      	orrs	r2, r1
 8014eac:	619a      	str	r2, [r3, #24]
      break;
 8014eae:	e064      	b.n	8014f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	68b9      	ldr	r1, [r7, #8]
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	f000 fa68 	bl	801538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	699a      	ldr	r2, [r3, #24]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	699a      	ldr	r2, [r3, #24]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	6999      	ldr	r1, [r3, #24]
 8014ee2:	68bb      	ldr	r3, [r7, #8]
 8014ee4:	691b      	ldr	r3, [r3, #16]
 8014ee6:	021a      	lsls	r2, r3, #8
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	430a      	orrs	r2, r1
 8014eee:	619a      	str	r2, [r3, #24]
      break;
 8014ef0:	e043      	b.n	8014f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	68b9      	ldr	r1, [r7, #8]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f000 fabd 	bl	8015478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	69da      	ldr	r2, [r3, #28]
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	f042 0208 	orr.w	r2, r2, #8
 8014f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	69da      	ldr	r2, [r3, #28]
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f022 0204 	bic.w	r2, r2, #4
 8014f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	69d9      	ldr	r1, [r3, #28]
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	691a      	ldr	r2, [r3, #16]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	430a      	orrs	r2, r1
 8014f2e:	61da      	str	r2, [r3, #28]
      break;
 8014f30:	e023      	b.n	8014f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	68b9      	ldr	r1, [r7, #8]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f000 fb11 	bl	8015560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	69da      	ldr	r2, [r3, #28]
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	69da      	ldr	r2, [r3, #28]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	69d9      	ldr	r1, [r3, #28]
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	691b      	ldr	r3, [r3, #16]
 8014f68:	021a      	lsls	r2, r3, #8
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	430a      	orrs	r2, r1
 8014f70:	61da      	str	r2, [r3, #28]
      break;
 8014f72:	e002      	b.n	8014f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014f74:	2301      	movs	r3, #1
 8014f76:	75fb      	strb	r3, [r7, #23]
      break;
 8014f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3718      	adds	r7, #24
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014f96:	2300      	movs	r3, #0
 8014f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d101      	bne.n	8014fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	e0b4      	b.n	8015112 <HAL_TIM_ConfigClockSource+0x186>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2201      	movs	r2, #1
 8014fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	689b      	ldr	r3, [r3, #8]
 8014fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8014fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	68ba      	ldr	r2, [r7, #8]
 8014fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014fe0:	d03e      	beq.n	8015060 <HAL_TIM_ConfigClockSource+0xd4>
 8014fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014fe6:	f200 8087 	bhi.w	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8014fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014fee:	f000 8086 	beq.w	80150fe <HAL_TIM_ConfigClockSource+0x172>
 8014ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ff6:	d87f      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8014ff8:	2b70      	cmp	r3, #112	; 0x70
 8014ffa:	d01a      	beq.n	8015032 <HAL_TIM_ConfigClockSource+0xa6>
 8014ffc:	2b70      	cmp	r3, #112	; 0x70
 8014ffe:	d87b      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015000:	2b60      	cmp	r3, #96	; 0x60
 8015002:	d050      	beq.n	80150a6 <HAL_TIM_ConfigClockSource+0x11a>
 8015004:	2b60      	cmp	r3, #96	; 0x60
 8015006:	d877      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015008:	2b50      	cmp	r3, #80	; 0x50
 801500a:	d03c      	beq.n	8015086 <HAL_TIM_ConfigClockSource+0xfa>
 801500c:	2b50      	cmp	r3, #80	; 0x50
 801500e:	d873      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015010:	2b40      	cmp	r3, #64	; 0x40
 8015012:	d058      	beq.n	80150c6 <HAL_TIM_ConfigClockSource+0x13a>
 8015014:	2b40      	cmp	r3, #64	; 0x40
 8015016:	d86f      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015018:	2b30      	cmp	r3, #48	; 0x30
 801501a:	d064      	beq.n	80150e6 <HAL_TIM_ConfigClockSource+0x15a>
 801501c:	2b30      	cmp	r3, #48	; 0x30
 801501e:	d86b      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015020:	2b20      	cmp	r3, #32
 8015022:	d060      	beq.n	80150e6 <HAL_TIM_ConfigClockSource+0x15a>
 8015024:	2b20      	cmp	r3, #32
 8015026:	d867      	bhi.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
 8015028:	2b00      	cmp	r3, #0
 801502a:	d05c      	beq.n	80150e6 <HAL_TIM_ConfigClockSource+0x15a>
 801502c:	2b10      	cmp	r3, #16
 801502e:	d05a      	beq.n	80150e6 <HAL_TIM_ConfigClockSource+0x15a>
 8015030:	e062      	b.n	80150f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6818      	ldr	r0, [r3, #0]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	6899      	ldr	r1, [r3, #8]
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	685a      	ldr	r2, [r3, #4]
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	68db      	ldr	r3, [r3, #12]
 8015042:	f000 fb5d 	bl	8015700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	689b      	ldr	r3, [r3, #8]
 801504c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8015054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	68ba      	ldr	r2, [r7, #8]
 801505c:	609a      	str	r2, [r3, #8]
      break;
 801505e:	e04f      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6818      	ldr	r0, [r3, #0]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	6899      	ldr	r1, [r3, #8]
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	685a      	ldr	r2, [r3, #4]
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	f000 fb46 	bl	8015700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	689a      	ldr	r2, [r3, #8]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015082:	609a      	str	r2, [r3, #8]
      break;
 8015084:	e03c      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6818      	ldr	r0, [r3, #0]
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	6859      	ldr	r1, [r3, #4]
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	461a      	mov	r2, r3
 8015094:	f000 faba 	bl	801560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	2150      	movs	r1, #80	; 0x50
 801509e:	4618      	mov	r0, r3
 80150a0:	f000 fb13 	bl	80156ca <TIM_ITRx_SetConfig>
      break;
 80150a4:	e02c      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6818      	ldr	r0, [r3, #0]
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	6859      	ldr	r1, [r3, #4]
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	68db      	ldr	r3, [r3, #12]
 80150b2:	461a      	mov	r2, r3
 80150b4:	f000 fad9 	bl	801566a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2160      	movs	r1, #96	; 0x60
 80150be:	4618      	mov	r0, r3
 80150c0:	f000 fb03 	bl	80156ca <TIM_ITRx_SetConfig>
      break;
 80150c4:	e01c      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6818      	ldr	r0, [r3, #0]
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	6859      	ldr	r1, [r3, #4]
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	461a      	mov	r2, r3
 80150d4:	f000 fa9a 	bl	801560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2140      	movs	r1, #64	; 0x40
 80150de:	4618      	mov	r0, r3
 80150e0:	f000 faf3 	bl	80156ca <TIM_ITRx_SetConfig>
      break;
 80150e4:	e00c      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4619      	mov	r1, r3
 80150f0:	4610      	mov	r0, r2
 80150f2:	f000 faea 	bl	80156ca <TIM_ITRx_SetConfig>
      break;
 80150f6:	e003      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80150f8:	2301      	movs	r3, #1
 80150fa:	73fb      	strb	r3, [r7, #15]
      break;
 80150fc:	e000      	b.n	8015100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80150fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2201      	movs	r2, #1
 8015104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2200      	movs	r2, #0
 801510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8015110:	7bfb      	ldrb	r3, [r7, #15]
}
 8015112:	4618      	mov	r0, r3
 8015114:	3710      	adds	r7, #16
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801511a:	b480      	push	{r7}
 801511c:	b083      	sub	sp, #12
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015122:	bf00      	nop
 8015124:	370c      	adds	r7, #12
 8015126:	46bd      	mov	sp, r7
 8015128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512c:	4770      	bx	lr

0801512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801512e:	b480      	push	{r7}
 8015130:	b083      	sub	sp, #12
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015136:	bf00      	nop
 8015138:	370c      	adds	r7, #12
 801513a:	46bd      	mov	sp, r7
 801513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015140:	4770      	bx	lr

08015142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8015142:	b480      	push	{r7}
 8015144:	b083      	sub	sp, #12
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801514a:	bf00      	nop
 801514c:	370c      	adds	r7, #12
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8015156:	b480      	push	{r7}
 8015158:	b083      	sub	sp, #12
 801515a:	af00      	add	r7, sp, #0
 801515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801515e:	bf00      	nop
 8015160:	370c      	adds	r7, #12
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr
	...

0801516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801516c:	b480      	push	{r7}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	4a40      	ldr	r2, [pc, #256]	; (8015280 <TIM_Base_SetConfig+0x114>)
 8015180:	4293      	cmp	r3, r2
 8015182:	d013      	beq.n	80151ac <TIM_Base_SetConfig+0x40>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801518a:	d00f      	beq.n	80151ac <TIM_Base_SetConfig+0x40>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	4a3d      	ldr	r2, [pc, #244]	; (8015284 <TIM_Base_SetConfig+0x118>)
 8015190:	4293      	cmp	r3, r2
 8015192:	d00b      	beq.n	80151ac <TIM_Base_SetConfig+0x40>
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	4a3c      	ldr	r2, [pc, #240]	; (8015288 <TIM_Base_SetConfig+0x11c>)
 8015198:	4293      	cmp	r3, r2
 801519a:	d007      	beq.n	80151ac <TIM_Base_SetConfig+0x40>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4a3b      	ldr	r2, [pc, #236]	; (801528c <TIM_Base_SetConfig+0x120>)
 80151a0:	4293      	cmp	r3, r2
 80151a2:	d003      	beq.n	80151ac <TIM_Base_SetConfig+0x40>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	4a3a      	ldr	r2, [pc, #232]	; (8015290 <TIM_Base_SetConfig+0x124>)
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d108      	bne.n	80151be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	4313      	orrs	r3, r2
 80151bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	4a2f      	ldr	r2, [pc, #188]	; (8015280 <TIM_Base_SetConfig+0x114>)
 80151c2:	4293      	cmp	r3, r2
 80151c4:	d02b      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151cc:	d027      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4a2c      	ldr	r2, [pc, #176]	; (8015284 <TIM_Base_SetConfig+0x118>)
 80151d2:	4293      	cmp	r3, r2
 80151d4:	d023      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4a2b      	ldr	r2, [pc, #172]	; (8015288 <TIM_Base_SetConfig+0x11c>)
 80151da:	4293      	cmp	r3, r2
 80151dc:	d01f      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	4a2a      	ldr	r2, [pc, #168]	; (801528c <TIM_Base_SetConfig+0x120>)
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d01b      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	4a29      	ldr	r2, [pc, #164]	; (8015290 <TIM_Base_SetConfig+0x124>)
 80151ea:	4293      	cmp	r3, r2
 80151ec:	d017      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	4a28      	ldr	r2, [pc, #160]	; (8015294 <TIM_Base_SetConfig+0x128>)
 80151f2:	4293      	cmp	r3, r2
 80151f4:	d013      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	4a27      	ldr	r2, [pc, #156]	; (8015298 <TIM_Base_SetConfig+0x12c>)
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d00f      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4a26      	ldr	r2, [pc, #152]	; (801529c <TIM_Base_SetConfig+0x130>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d00b      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	4a25      	ldr	r2, [pc, #148]	; (80152a0 <TIM_Base_SetConfig+0x134>)
 801520a:	4293      	cmp	r3, r2
 801520c:	d007      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4a24      	ldr	r2, [pc, #144]	; (80152a4 <TIM_Base_SetConfig+0x138>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d003      	beq.n	801521e <TIM_Base_SetConfig+0xb2>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4a23      	ldr	r2, [pc, #140]	; (80152a8 <TIM_Base_SetConfig+0x13c>)
 801521a:	4293      	cmp	r3, r2
 801521c:	d108      	bne.n	8015230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	4313      	orrs	r3, r2
 801522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	695b      	ldr	r3, [r3, #20]
 801523a:	4313      	orrs	r3, r2
 801523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	689a      	ldr	r2, [r3, #8]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	681a      	ldr	r2, [r3, #0]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4a0a      	ldr	r2, [pc, #40]	; (8015280 <TIM_Base_SetConfig+0x114>)
 8015258:	4293      	cmp	r3, r2
 801525a:	d003      	beq.n	8015264 <TIM_Base_SetConfig+0xf8>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	4a0c      	ldr	r2, [pc, #48]	; (8015290 <TIM_Base_SetConfig+0x124>)
 8015260:	4293      	cmp	r3, r2
 8015262:	d103      	bne.n	801526c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	691a      	ldr	r2, [r3, #16]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2201      	movs	r2, #1
 8015270:	615a      	str	r2, [r3, #20]
}
 8015272:	bf00      	nop
 8015274:	3714      	adds	r7, #20
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop
 8015280:	40010000 	.word	0x40010000
 8015284:	40000400 	.word	0x40000400
 8015288:	40000800 	.word	0x40000800
 801528c:	40000c00 	.word	0x40000c00
 8015290:	40010400 	.word	0x40010400
 8015294:	40014000 	.word	0x40014000
 8015298:	40014400 	.word	0x40014400
 801529c:	40014800 	.word	0x40014800
 80152a0:	40001800 	.word	0x40001800
 80152a4:	40001c00 	.word	0x40001c00
 80152a8:	40002000 	.word	0x40002000

080152ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b087      	sub	sp, #28
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6a1b      	ldr	r3, [r3, #32]
 80152ba:	f023 0201 	bic.w	r2, r3, #1
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6a1b      	ldr	r3, [r3, #32]
 80152c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	699b      	ldr	r3, [r3, #24]
 80152d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f023 0303 	bic.w	r3, r3, #3
 80152e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	4313      	orrs	r3, r2
 80152ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	f023 0302 	bic.w	r3, r3, #2
 80152f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	689b      	ldr	r3, [r3, #8]
 80152fa:	697a      	ldr	r2, [r7, #20]
 80152fc:	4313      	orrs	r3, r2
 80152fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4a20      	ldr	r2, [pc, #128]	; (8015384 <TIM_OC1_SetConfig+0xd8>)
 8015304:	4293      	cmp	r3, r2
 8015306:	d003      	beq.n	8015310 <TIM_OC1_SetConfig+0x64>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	4a1f      	ldr	r2, [pc, #124]	; (8015388 <TIM_OC1_SetConfig+0xdc>)
 801530c:	4293      	cmp	r3, r2
 801530e:	d10c      	bne.n	801532a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	f023 0308 	bic.w	r3, r3, #8
 8015316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	68db      	ldr	r3, [r3, #12]
 801531c:	697a      	ldr	r2, [r7, #20]
 801531e:	4313      	orrs	r3, r2
 8015320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	f023 0304 	bic.w	r3, r3, #4
 8015328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4a15      	ldr	r2, [pc, #84]	; (8015384 <TIM_OC1_SetConfig+0xd8>)
 801532e:	4293      	cmp	r3, r2
 8015330:	d003      	beq.n	801533a <TIM_OC1_SetConfig+0x8e>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	4a14      	ldr	r2, [pc, #80]	; (8015388 <TIM_OC1_SetConfig+0xdc>)
 8015336:	4293      	cmp	r3, r2
 8015338:	d111      	bne.n	801535e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	695b      	ldr	r3, [r3, #20]
 801534e:	693a      	ldr	r2, [r7, #16]
 8015350:	4313      	orrs	r3, r2
 8015352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	699b      	ldr	r3, [r3, #24]
 8015358:	693a      	ldr	r2, [r7, #16]
 801535a:	4313      	orrs	r3, r2
 801535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	693a      	ldr	r2, [r7, #16]
 8015362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	68fa      	ldr	r2, [r7, #12]
 8015368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	685a      	ldr	r2, [r3, #4]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	697a      	ldr	r2, [r7, #20]
 8015376:	621a      	str	r2, [r3, #32]
}
 8015378:	bf00      	nop
 801537a:	371c      	adds	r7, #28
 801537c:	46bd      	mov	sp, r7
 801537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015382:	4770      	bx	lr
 8015384:	40010000 	.word	0x40010000
 8015388:	40010400 	.word	0x40010400

0801538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801538c:	b480      	push	{r7}
 801538e:	b087      	sub	sp, #28
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6a1b      	ldr	r3, [r3, #32]
 801539a:	f023 0210 	bic.w	r2, r3, #16
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6a1b      	ldr	r3, [r3, #32]
 80153a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	685b      	ldr	r3, [r3, #4]
 80153ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	699b      	ldr	r3, [r3, #24]
 80153b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80153ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80153c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80153c4:	683b      	ldr	r3, [r7, #0]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	021b      	lsls	r3, r3, #8
 80153ca:	68fa      	ldr	r2, [r7, #12]
 80153cc:	4313      	orrs	r3, r2
 80153ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	f023 0320 	bic.w	r3, r3, #32
 80153d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	689b      	ldr	r3, [r3, #8]
 80153dc:	011b      	lsls	r3, r3, #4
 80153de:	697a      	ldr	r2, [r7, #20]
 80153e0:	4313      	orrs	r3, r2
 80153e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	4a22      	ldr	r2, [pc, #136]	; (8015470 <TIM_OC2_SetConfig+0xe4>)
 80153e8:	4293      	cmp	r3, r2
 80153ea:	d003      	beq.n	80153f4 <TIM_OC2_SetConfig+0x68>
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	4a21      	ldr	r2, [pc, #132]	; (8015474 <TIM_OC2_SetConfig+0xe8>)
 80153f0:	4293      	cmp	r3, r2
 80153f2:	d10d      	bne.n	8015410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80153fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	011b      	lsls	r3, r3, #4
 8015402:	697a      	ldr	r2, [r7, #20]
 8015404:	4313      	orrs	r3, r2
 8015406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801540e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	4a17      	ldr	r2, [pc, #92]	; (8015470 <TIM_OC2_SetConfig+0xe4>)
 8015414:	4293      	cmp	r3, r2
 8015416:	d003      	beq.n	8015420 <TIM_OC2_SetConfig+0x94>
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	4a16      	ldr	r2, [pc, #88]	; (8015474 <TIM_OC2_SetConfig+0xe8>)
 801541c:	4293      	cmp	r3, r2
 801541e:	d113      	bne.n	8015448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8015420:	693b      	ldr	r3, [r7, #16]
 8015422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801542e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	695b      	ldr	r3, [r3, #20]
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	693a      	ldr	r2, [r7, #16]
 8015438:	4313      	orrs	r3, r2
 801543a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	699b      	ldr	r3, [r3, #24]
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	693a      	ldr	r2, [r7, #16]
 8015444:	4313      	orrs	r3, r2
 8015446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	693a      	ldr	r2, [r7, #16]
 801544c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	685a      	ldr	r2, [r3, #4]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	697a      	ldr	r2, [r7, #20]
 8015460:	621a      	str	r2, [r3, #32]
}
 8015462:	bf00      	nop
 8015464:	371c      	adds	r7, #28
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
 801546e:	bf00      	nop
 8015470:	40010000 	.word	0x40010000
 8015474:	40010400 	.word	0x40010400

08015478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015478:	b480      	push	{r7}
 801547a:	b087      	sub	sp, #28
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	6a1b      	ldr	r3, [r3, #32]
 8015486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6a1b      	ldr	r3, [r3, #32]
 8015492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	69db      	ldr	r3, [r3, #28]
 801549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80154a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f023 0303 	bic.w	r3, r3, #3
 80154ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	68fa      	ldr	r2, [r7, #12]
 80154b6:	4313      	orrs	r3, r2
 80154b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80154c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	689b      	ldr	r3, [r3, #8]
 80154c6:	021b      	lsls	r3, r3, #8
 80154c8:	697a      	ldr	r2, [r7, #20]
 80154ca:	4313      	orrs	r3, r2
 80154cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	4a21      	ldr	r2, [pc, #132]	; (8015558 <TIM_OC3_SetConfig+0xe0>)
 80154d2:	4293      	cmp	r3, r2
 80154d4:	d003      	beq.n	80154de <TIM_OC3_SetConfig+0x66>
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	4a20      	ldr	r2, [pc, #128]	; (801555c <TIM_OC3_SetConfig+0xe4>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	d10d      	bne.n	80154fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80154e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	021b      	lsls	r3, r3, #8
 80154ec:	697a      	ldr	r2, [r7, #20]
 80154ee:	4313      	orrs	r3, r2
 80154f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80154f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	4a16      	ldr	r2, [pc, #88]	; (8015558 <TIM_OC3_SetConfig+0xe0>)
 80154fe:	4293      	cmp	r3, r2
 8015500:	d003      	beq.n	801550a <TIM_OC3_SetConfig+0x92>
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	4a15      	ldr	r2, [pc, #84]	; (801555c <TIM_OC3_SetConfig+0xe4>)
 8015506:	4293      	cmp	r3, r2
 8015508:	d113      	bne.n	8015532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	695b      	ldr	r3, [r3, #20]
 801551e:	011b      	lsls	r3, r3, #4
 8015520:	693a      	ldr	r2, [r7, #16]
 8015522:	4313      	orrs	r3, r2
 8015524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	699b      	ldr	r3, [r3, #24]
 801552a:	011b      	lsls	r3, r3, #4
 801552c:	693a      	ldr	r2, [r7, #16]
 801552e:	4313      	orrs	r3, r2
 8015530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	693a      	ldr	r2, [r7, #16]
 8015536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	68fa      	ldr	r2, [r7, #12]
 801553c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	685a      	ldr	r2, [r3, #4]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	697a      	ldr	r2, [r7, #20]
 801554a:	621a      	str	r2, [r3, #32]
}
 801554c:	bf00      	nop
 801554e:	371c      	adds	r7, #28
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr
 8015558:	40010000 	.word	0x40010000
 801555c:	40010400 	.word	0x40010400

08015560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015560:	b480      	push	{r7}
 8015562:	b087      	sub	sp, #28
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6a1b      	ldr	r3, [r3, #32]
 801556e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	6a1b      	ldr	r3, [r3, #32]
 801557a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	69db      	ldr	r3, [r3, #28]
 8015586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	021b      	lsls	r3, r3, #8
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	4313      	orrs	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80155a4:	693b      	ldr	r3, [r7, #16]
 80155a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80155aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	689b      	ldr	r3, [r3, #8]
 80155b0:	031b      	lsls	r3, r3, #12
 80155b2:	693a      	ldr	r2, [r7, #16]
 80155b4:	4313      	orrs	r3, r2
 80155b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	4a12      	ldr	r2, [pc, #72]	; (8015604 <TIM_OC4_SetConfig+0xa4>)
 80155bc:	4293      	cmp	r3, r2
 80155be:	d003      	beq.n	80155c8 <TIM_OC4_SetConfig+0x68>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	4a11      	ldr	r2, [pc, #68]	; (8015608 <TIM_OC4_SetConfig+0xa8>)
 80155c4:	4293      	cmp	r3, r2
 80155c6:	d109      	bne.n	80155dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80155ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	695b      	ldr	r3, [r3, #20]
 80155d4:	019b      	lsls	r3, r3, #6
 80155d6:	697a      	ldr	r2, [r7, #20]
 80155d8:	4313      	orrs	r3, r2
 80155da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	697a      	ldr	r2, [r7, #20]
 80155e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	693a      	ldr	r2, [r7, #16]
 80155f4:	621a      	str	r2, [r3, #32]
}
 80155f6:	bf00      	nop
 80155f8:	371c      	adds	r7, #28
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
 8015602:	bf00      	nop
 8015604:	40010000 	.word	0x40010000
 8015608:	40010400 	.word	0x40010400

0801560c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801560c:	b480      	push	{r7}
 801560e:	b087      	sub	sp, #28
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	6a1b      	ldr	r3, [r3, #32]
 801561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	6a1b      	ldr	r3, [r3, #32]
 8015622:	f023 0201 	bic.w	r2, r3, #1
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	699b      	ldr	r3, [r3, #24]
 801562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	011b      	lsls	r3, r3, #4
 801563c:	693a      	ldr	r2, [r7, #16]
 801563e:	4313      	orrs	r3, r2
 8015640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	f023 030a 	bic.w	r3, r3, #10
 8015648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801564a:	697a      	ldr	r2, [r7, #20]
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	4313      	orrs	r3, r2
 8015650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	693a      	ldr	r2, [r7, #16]
 8015656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	697a      	ldr	r2, [r7, #20]
 801565c:	621a      	str	r2, [r3, #32]
}
 801565e:	bf00      	nop
 8015660:	371c      	adds	r7, #28
 8015662:	46bd      	mov	sp, r7
 8015664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015668:	4770      	bx	lr

0801566a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801566a:	b480      	push	{r7}
 801566c:	b087      	sub	sp, #28
 801566e:	af00      	add	r7, sp, #0
 8015670:	60f8      	str	r0, [r7, #12]
 8015672:	60b9      	str	r1, [r7, #8]
 8015674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	6a1b      	ldr	r3, [r3, #32]
 801567a:	f023 0210 	bic.w	r2, r3, #16
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	699b      	ldr	r3, [r3, #24]
 8015686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	6a1b      	ldr	r3, [r3, #32]
 801568c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	031b      	lsls	r3, r3, #12
 801569a:	697a      	ldr	r2, [r7, #20]
 801569c:	4313      	orrs	r3, r2
 801569e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80156a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	011b      	lsls	r3, r3, #4
 80156ac:	693a      	ldr	r2, [r7, #16]
 80156ae:	4313      	orrs	r3, r2
 80156b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	697a      	ldr	r2, [r7, #20]
 80156b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	693a      	ldr	r2, [r7, #16]
 80156bc:	621a      	str	r2, [r3, #32]
}
 80156be:	bf00      	nop
 80156c0:	371c      	adds	r7, #28
 80156c2:	46bd      	mov	sp, r7
 80156c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c8:	4770      	bx	lr

080156ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80156ca:	b480      	push	{r7}
 80156cc:	b085      	sub	sp, #20
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	689b      	ldr	r3, [r3, #8]
 80156d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80156e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80156e2:	683a      	ldr	r2, [r7, #0]
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	4313      	orrs	r3, r2
 80156e8:	f043 0307 	orr.w	r3, r3, #7
 80156ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	68fa      	ldr	r2, [r7, #12]
 80156f2:	609a      	str	r2, [r3, #8]
}
 80156f4:	bf00      	nop
 80156f6:	3714      	adds	r7, #20
 80156f8:	46bd      	mov	sp, r7
 80156fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fe:	4770      	bx	lr

08015700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8015700:	b480      	push	{r7}
 8015702:	b087      	sub	sp, #28
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	60b9      	str	r1, [r7, #8]
 801570a:	607a      	str	r2, [r7, #4]
 801570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	689b      	ldr	r3, [r3, #8]
 8015712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801571a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	021a      	lsls	r2, r3, #8
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	431a      	orrs	r2, r3
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	4313      	orrs	r3, r2
 8015728:	697a      	ldr	r2, [r7, #20]
 801572a:	4313      	orrs	r3, r2
 801572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	697a      	ldr	r2, [r7, #20]
 8015732:	609a      	str	r2, [r3, #8]
}
 8015734:	bf00      	nop
 8015736:	371c      	adds	r7, #28
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015740:	b480      	push	{r7}
 8015742:	b085      	sub	sp, #20
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015750:	2b01      	cmp	r3, #1
 8015752:	d101      	bne.n	8015758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015754:	2302      	movs	r3, #2
 8015756:	e05a      	b.n	801580e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2201      	movs	r2, #1
 801575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	2202      	movs	r2, #2
 8015764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	685b      	ldr	r3, [r3, #4]
 801576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	689b      	ldr	r3, [r3, #8]
 8015776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	68fa      	ldr	r2, [r7, #12]
 8015786:	4313      	orrs	r3, r2
 8015788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	68fa      	ldr	r2, [r7, #12]
 8015790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	4a21      	ldr	r2, [pc, #132]	; (801581c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8015798:	4293      	cmp	r3, r2
 801579a:	d022      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80157a4:	d01d      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	4a1d      	ldr	r2, [pc, #116]	; (8015820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80157ac:	4293      	cmp	r3, r2
 80157ae:	d018      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	4a1b      	ldr	r2, [pc, #108]	; (8015824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80157b6:	4293      	cmp	r3, r2
 80157b8:	d013      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	4a1a      	ldr	r2, [pc, #104]	; (8015828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80157c0:	4293      	cmp	r3, r2
 80157c2:	d00e      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	4a18      	ldr	r2, [pc, #96]	; (801582c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80157ca:	4293      	cmp	r3, r2
 80157cc:	d009      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	4a17      	ldr	r2, [pc, #92]	; (8015830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80157d4:	4293      	cmp	r3, r2
 80157d6:	d004      	beq.n	80157e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4a15      	ldr	r2, [pc, #84]	; (8015834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80157de:	4293      	cmp	r3, r2
 80157e0:	d10c      	bne.n	80157fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80157e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	68ba      	ldr	r2, [r7, #8]
 80157f0:	4313      	orrs	r3, r2
 80157f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	68ba      	ldr	r2, [r7, #8]
 80157fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	2201      	movs	r2, #1
 8015800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	2200      	movs	r2, #0
 8015808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801580c:	2300      	movs	r3, #0
}
 801580e:	4618      	mov	r0, r3
 8015810:	3714      	adds	r7, #20
 8015812:	46bd      	mov	sp, r7
 8015814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015818:	4770      	bx	lr
 801581a:	bf00      	nop
 801581c:	40010000 	.word	0x40010000
 8015820:	40000400 	.word	0x40000400
 8015824:	40000800 	.word	0x40000800
 8015828:	40000c00 	.word	0x40000c00
 801582c:	40010400 	.word	0x40010400
 8015830:	40014000 	.word	0x40014000
 8015834:	40001800 	.word	0x40001800

08015838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015838:	b480      	push	{r7}
 801583a:	b083      	sub	sp, #12
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015840:	bf00      	nop
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d101      	bne.n	8015872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801586e:	2301      	movs	r3, #1
 8015870:	e03f      	b.n	80158f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015878:	b2db      	uxtb	r3, r3
 801587a:	2b00      	cmp	r3, #0
 801587c:	d106      	bne.n	801588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	2200      	movs	r2, #0
 8015882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7fb f984 	bl	8010b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2224      	movs	r2, #36	; 0x24
 8015890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	68da      	ldr	r2, [r3, #12]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80158a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f000 f829 	bl	80158fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	691a      	ldr	r2, [r3, #16]
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80158b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	695a      	ldr	r2, [r3, #20]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80158c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	68da      	ldr	r2, [r3, #12]
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80158d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2200      	movs	r2, #0
 80158de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2220      	movs	r2, #32
 80158e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2220      	movs	r2, #32
 80158ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80158f0:	2300      	movs	r3, #0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3708      	adds	r7, #8
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
	...

080158fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80158fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015900:	b0c0      	sub	sp, #256	; 0x100
 8015902:	af00      	add	r7, sp, #0
 8015904:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	691b      	ldr	r3, [r3, #16]
 8015910:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015918:	68d9      	ldr	r1, [r3, #12]
 801591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	ea40 0301 	orr.w	r3, r0, r1
 8015924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801592a:	689a      	ldr	r2, [r3, #8]
 801592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015930:	691b      	ldr	r3, [r3, #16]
 8015932:	431a      	orrs	r2, r3
 8015934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015938:	695b      	ldr	r3, [r3, #20]
 801593a:	431a      	orrs	r2, r3
 801593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015940:	69db      	ldr	r3, [r3, #28]
 8015942:	4313      	orrs	r3, r2
 8015944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8015948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015954:	f021 010c 	bic.w	r1, r1, #12
 8015958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801595c:	681a      	ldr	r2, [r3, #0]
 801595e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015962:	430b      	orrs	r3, r1
 8015964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	695b      	ldr	r3, [r3, #20]
 801596e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8015972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015976:	6999      	ldr	r1, [r3, #24]
 8015978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	ea40 0301 	orr.w	r3, r0, r1
 8015982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8015984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015988:	681a      	ldr	r2, [r3, #0]
 801598a:	4b8f      	ldr	r3, [pc, #572]	; (8015bc8 <UART_SetConfig+0x2cc>)
 801598c:	429a      	cmp	r2, r3
 801598e:	d005      	beq.n	801599c <UART_SetConfig+0xa0>
 8015990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	4b8d      	ldr	r3, [pc, #564]	; (8015bcc <UART_SetConfig+0x2d0>)
 8015998:	429a      	cmp	r2, r3
 801599a:	d104      	bne.n	80159a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801599c:	f7fe f8fe 	bl	8013b9c <HAL_RCC_GetPCLK2Freq>
 80159a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80159a4:	e003      	b.n	80159ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80159a6:	f7fe f8e5 	bl	8013b74 <HAL_RCC_GetPCLK1Freq>
 80159aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80159ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80159b2:	69db      	ldr	r3, [r3, #28]
 80159b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80159b8:	f040 810c 	bne.w	8015bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80159bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80159c0:	2200      	movs	r2, #0
 80159c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80159c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80159ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80159ce:	4622      	mov	r2, r4
 80159d0:	462b      	mov	r3, r5
 80159d2:	1891      	adds	r1, r2, r2
 80159d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80159d6:	415b      	adcs	r3, r3
 80159d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80159da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80159de:	4621      	mov	r1, r4
 80159e0:	eb12 0801 	adds.w	r8, r2, r1
 80159e4:	4629      	mov	r1, r5
 80159e6:	eb43 0901 	adc.w	r9, r3, r1
 80159ea:	f04f 0200 	mov.w	r2, #0
 80159ee:	f04f 0300 	mov.w	r3, #0
 80159f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80159f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80159fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80159fe:	4690      	mov	r8, r2
 8015a00:	4699      	mov	r9, r3
 8015a02:	4623      	mov	r3, r4
 8015a04:	eb18 0303 	adds.w	r3, r8, r3
 8015a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015a0c:	462b      	mov	r3, r5
 8015a0e:	eb49 0303 	adc.w	r3, r9, r3
 8015a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8015a22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015a2a:	460b      	mov	r3, r1
 8015a2c:	18db      	adds	r3, r3, r3
 8015a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8015a30:	4613      	mov	r3, r2
 8015a32:	eb42 0303 	adc.w	r3, r2, r3
 8015a36:	657b      	str	r3, [r7, #84]	; 0x54
 8015a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8015a40:	f7eb f922 	bl	8000c88 <__aeabi_uldivmod>
 8015a44:	4602      	mov	r2, r0
 8015a46:	460b      	mov	r3, r1
 8015a48:	4b61      	ldr	r3, [pc, #388]	; (8015bd0 <UART_SetConfig+0x2d4>)
 8015a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8015a4e:	095b      	lsrs	r3, r3, #5
 8015a50:	011c      	lsls	r4, r3, #4
 8015a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015a56:	2200      	movs	r2, #0
 8015a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8015a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015a64:	4642      	mov	r2, r8
 8015a66:	464b      	mov	r3, r9
 8015a68:	1891      	adds	r1, r2, r2
 8015a6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8015a6c:	415b      	adcs	r3, r3
 8015a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015a74:	4641      	mov	r1, r8
 8015a76:	eb12 0a01 	adds.w	sl, r2, r1
 8015a7a:	4649      	mov	r1, r9
 8015a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8015a80:	f04f 0200 	mov.w	r2, #0
 8015a84:	f04f 0300 	mov.w	r3, #0
 8015a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8015a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015a94:	4692      	mov	sl, r2
 8015a96:	469b      	mov	fp, r3
 8015a98:	4643      	mov	r3, r8
 8015a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8015a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015aa2:	464b      	mov	r3, r9
 8015aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8015aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8015abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	18db      	adds	r3, r3, r3
 8015ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8015ac6:	4613      	mov	r3, r2
 8015ac8:	eb42 0303 	adc.w	r3, r2, r3
 8015acc:	647b      	str	r3, [r7, #68]	; 0x44
 8015ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8015ad6:	f7eb f8d7 	bl	8000c88 <__aeabi_uldivmod>
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	4611      	mov	r1, r2
 8015ae0:	4b3b      	ldr	r3, [pc, #236]	; (8015bd0 <UART_SetConfig+0x2d4>)
 8015ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8015ae6:	095b      	lsrs	r3, r3, #5
 8015ae8:	2264      	movs	r2, #100	; 0x64
 8015aea:	fb02 f303 	mul.w	r3, r2, r3
 8015aee:	1acb      	subs	r3, r1, r3
 8015af0:	00db      	lsls	r3, r3, #3
 8015af2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8015af6:	4b36      	ldr	r3, [pc, #216]	; (8015bd0 <UART_SetConfig+0x2d4>)
 8015af8:	fba3 2302 	umull	r2, r3, r3, r2
 8015afc:	095b      	lsrs	r3, r3, #5
 8015afe:	005b      	lsls	r3, r3, #1
 8015b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015b04:	441c      	add	r4, r3
 8015b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015b10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015b18:	4642      	mov	r2, r8
 8015b1a:	464b      	mov	r3, r9
 8015b1c:	1891      	adds	r1, r2, r2
 8015b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8015b20:	415b      	adcs	r3, r3
 8015b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015b28:	4641      	mov	r1, r8
 8015b2a:	1851      	adds	r1, r2, r1
 8015b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8015b2e:	4649      	mov	r1, r9
 8015b30:	414b      	adcs	r3, r1
 8015b32:	637b      	str	r3, [r7, #52]	; 0x34
 8015b34:	f04f 0200 	mov.w	r2, #0
 8015b38:	f04f 0300 	mov.w	r3, #0
 8015b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8015b40:	4659      	mov	r1, fp
 8015b42:	00cb      	lsls	r3, r1, #3
 8015b44:	4651      	mov	r1, sl
 8015b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015b4a:	4651      	mov	r1, sl
 8015b4c:	00ca      	lsls	r2, r1, #3
 8015b4e:	4610      	mov	r0, r2
 8015b50:	4619      	mov	r1, r3
 8015b52:	4603      	mov	r3, r0
 8015b54:	4642      	mov	r2, r8
 8015b56:	189b      	adds	r3, r3, r2
 8015b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015b5c:	464b      	mov	r3, r9
 8015b5e:	460a      	mov	r2, r1
 8015b60:	eb42 0303 	adc.w	r3, r2, r3
 8015b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	2200      	movs	r2, #0
 8015b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015b74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015b7c:	460b      	mov	r3, r1
 8015b7e:	18db      	adds	r3, r3, r3
 8015b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8015b82:	4613      	mov	r3, r2
 8015b84:	eb42 0303 	adc.w	r3, r2, r3
 8015b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8015b92:	f7eb f879 	bl	8000c88 <__aeabi_uldivmod>
 8015b96:	4602      	mov	r2, r0
 8015b98:	460b      	mov	r3, r1
 8015b9a:	4b0d      	ldr	r3, [pc, #52]	; (8015bd0 <UART_SetConfig+0x2d4>)
 8015b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8015ba0:	095b      	lsrs	r3, r3, #5
 8015ba2:	2164      	movs	r1, #100	; 0x64
 8015ba4:	fb01 f303 	mul.w	r3, r1, r3
 8015ba8:	1ad3      	subs	r3, r2, r3
 8015baa:	00db      	lsls	r3, r3, #3
 8015bac:	3332      	adds	r3, #50	; 0x32
 8015bae:	4a08      	ldr	r2, [pc, #32]	; (8015bd0 <UART_SetConfig+0x2d4>)
 8015bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8015bb4:	095b      	lsrs	r3, r3, #5
 8015bb6:	f003 0207 	and.w	r2, r3, #7
 8015bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4422      	add	r2, r4
 8015bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015bc4:	e105      	b.n	8015dd2 <UART_SetConfig+0x4d6>
 8015bc6:	bf00      	nop
 8015bc8:	40011000 	.word	0x40011000
 8015bcc:	40011400 	.word	0x40011400
 8015bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015bd8:	2200      	movs	r2, #0
 8015bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015bde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8015be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8015be6:	4642      	mov	r2, r8
 8015be8:	464b      	mov	r3, r9
 8015bea:	1891      	adds	r1, r2, r2
 8015bec:	6239      	str	r1, [r7, #32]
 8015bee:	415b      	adcs	r3, r3
 8015bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8015bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015bf6:	4641      	mov	r1, r8
 8015bf8:	1854      	adds	r4, r2, r1
 8015bfa:	4649      	mov	r1, r9
 8015bfc:	eb43 0501 	adc.w	r5, r3, r1
 8015c00:	f04f 0200 	mov.w	r2, #0
 8015c04:	f04f 0300 	mov.w	r3, #0
 8015c08:	00eb      	lsls	r3, r5, #3
 8015c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8015c0e:	00e2      	lsls	r2, r4, #3
 8015c10:	4614      	mov	r4, r2
 8015c12:	461d      	mov	r5, r3
 8015c14:	4643      	mov	r3, r8
 8015c16:	18e3      	adds	r3, r4, r3
 8015c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015c1c:	464b      	mov	r3, r9
 8015c1e:	eb45 0303 	adc.w	r3, r5, r3
 8015c22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015c2a:	685b      	ldr	r3, [r3, #4]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015c36:	f04f 0200 	mov.w	r2, #0
 8015c3a:	f04f 0300 	mov.w	r3, #0
 8015c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8015c42:	4629      	mov	r1, r5
 8015c44:	008b      	lsls	r3, r1, #2
 8015c46:	4621      	mov	r1, r4
 8015c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015c4c:	4621      	mov	r1, r4
 8015c4e:	008a      	lsls	r2, r1, #2
 8015c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015c54:	f7eb f818 	bl	8000c88 <__aeabi_uldivmod>
 8015c58:	4602      	mov	r2, r0
 8015c5a:	460b      	mov	r3, r1
 8015c5c:	4b60      	ldr	r3, [pc, #384]	; (8015de0 <UART_SetConfig+0x4e4>)
 8015c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8015c62:	095b      	lsrs	r3, r3, #5
 8015c64:	011c      	lsls	r4, r3, #4
 8015c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8015c70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015c78:	4642      	mov	r2, r8
 8015c7a:	464b      	mov	r3, r9
 8015c7c:	1891      	adds	r1, r2, r2
 8015c7e:	61b9      	str	r1, [r7, #24]
 8015c80:	415b      	adcs	r3, r3
 8015c82:	61fb      	str	r3, [r7, #28]
 8015c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015c88:	4641      	mov	r1, r8
 8015c8a:	1851      	adds	r1, r2, r1
 8015c8c:	6139      	str	r1, [r7, #16]
 8015c8e:	4649      	mov	r1, r9
 8015c90:	414b      	adcs	r3, r1
 8015c92:	617b      	str	r3, [r7, #20]
 8015c94:	f04f 0200 	mov.w	r2, #0
 8015c98:	f04f 0300 	mov.w	r3, #0
 8015c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8015ca0:	4659      	mov	r1, fp
 8015ca2:	00cb      	lsls	r3, r1, #3
 8015ca4:	4651      	mov	r1, sl
 8015ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015caa:	4651      	mov	r1, sl
 8015cac:	00ca      	lsls	r2, r1, #3
 8015cae:	4610      	mov	r0, r2
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	4642      	mov	r2, r8
 8015cb6:	189b      	adds	r3, r3, r2
 8015cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015cbc:	464b      	mov	r3, r9
 8015cbe:	460a      	mov	r2, r1
 8015cc0:	eb42 0303 	adc.w	r3, r2, r3
 8015cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8015cd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8015cd4:	f04f 0200 	mov.w	r2, #0
 8015cd8:	f04f 0300 	mov.w	r3, #0
 8015cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	008b      	lsls	r3, r1, #2
 8015ce4:	4641      	mov	r1, r8
 8015ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015cea:	4641      	mov	r1, r8
 8015cec:	008a      	lsls	r2, r1, #2
 8015cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8015cf2:	f7ea ffc9 	bl	8000c88 <__aeabi_uldivmod>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	460b      	mov	r3, r1
 8015cfa:	4b39      	ldr	r3, [pc, #228]	; (8015de0 <UART_SetConfig+0x4e4>)
 8015cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8015d00:	095b      	lsrs	r3, r3, #5
 8015d02:	2164      	movs	r1, #100	; 0x64
 8015d04:	fb01 f303 	mul.w	r3, r1, r3
 8015d08:	1ad3      	subs	r3, r2, r3
 8015d0a:	011b      	lsls	r3, r3, #4
 8015d0c:	3332      	adds	r3, #50	; 0x32
 8015d0e:	4a34      	ldr	r2, [pc, #208]	; (8015de0 <UART_SetConfig+0x4e4>)
 8015d10:	fba2 2303 	umull	r2, r3, r2, r3
 8015d14:	095b      	lsrs	r3, r3, #5
 8015d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d1a:	441c      	add	r4, r3
 8015d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015d20:	2200      	movs	r2, #0
 8015d22:	673b      	str	r3, [r7, #112]	; 0x70
 8015d24:	677a      	str	r2, [r7, #116]	; 0x74
 8015d26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015d2a:	4642      	mov	r2, r8
 8015d2c:	464b      	mov	r3, r9
 8015d2e:	1891      	adds	r1, r2, r2
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	415b      	adcs	r3, r3
 8015d34:	60fb      	str	r3, [r7, #12]
 8015d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015d3a:	4641      	mov	r1, r8
 8015d3c:	1851      	adds	r1, r2, r1
 8015d3e:	6039      	str	r1, [r7, #0]
 8015d40:	4649      	mov	r1, r9
 8015d42:	414b      	adcs	r3, r1
 8015d44:	607b      	str	r3, [r7, #4]
 8015d46:	f04f 0200 	mov.w	r2, #0
 8015d4a:	f04f 0300 	mov.w	r3, #0
 8015d4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8015d52:	4659      	mov	r1, fp
 8015d54:	00cb      	lsls	r3, r1, #3
 8015d56:	4651      	mov	r1, sl
 8015d58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015d5c:	4651      	mov	r1, sl
 8015d5e:	00ca      	lsls	r2, r1, #3
 8015d60:	4610      	mov	r0, r2
 8015d62:	4619      	mov	r1, r3
 8015d64:	4603      	mov	r3, r0
 8015d66:	4642      	mov	r2, r8
 8015d68:	189b      	adds	r3, r3, r2
 8015d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8015d6c:	464b      	mov	r3, r9
 8015d6e:	460a      	mov	r2, r1
 8015d70:	eb42 0303 	adc.w	r3, r2, r3
 8015d74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8015d80:	667a      	str	r2, [r7, #100]	; 0x64
 8015d82:	f04f 0200 	mov.w	r2, #0
 8015d86:	f04f 0300 	mov.w	r3, #0
 8015d8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8015d8e:	4649      	mov	r1, r9
 8015d90:	008b      	lsls	r3, r1, #2
 8015d92:	4641      	mov	r1, r8
 8015d94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015d98:	4641      	mov	r1, r8
 8015d9a:	008a      	lsls	r2, r1, #2
 8015d9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015da0:	f7ea ff72 	bl	8000c88 <__aeabi_uldivmod>
 8015da4:	4602      	mov	r2, r0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4b0d      	ldr	r3, [pc, #52]	; (8015de0 <UART_SetConfig+0x4e4>)
 8015daa:	fba3 1302 	umull	r1, r3, r3, r2
 8015dae:	095b      	lsrs	r3, r3, #5
 8015db0:	2164      	movs	r1, #100	; 0x64
 8015db2:	fb01 f303 	mul.w	r3, r1, r3
 8015db6:	1ad3      	subs	r3, r2, r3
 8015db8:	011b      	lsls	r3, r3, #4
 8015dba:	3332      	adds	r3, #50	; 0x32
 8015dbc:	4a08      	ldr	r2, [pc, #32]	; (8015de0 <UART_SetConfig+0x4e4>)
 8015dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8015dc2:	095b      	lsrs	r3, r3, #5
 8015dc4:	f003 020f 	and.w	r2, r3, #15
 8015dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	4422      	add	r2, r4
 8015dd0:	609a      	str	r2, [r3, #8]
}
 8015dd2:	bf00      	nop
 8015dd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015dde:	bf00      	nop
 8015de0:	51eb851f 	.word	0x51eb851f

08015de4 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b084      	sub	sp, #16
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8015dee:	2300      	movs	r3, #0
 8015df0:	60fb      	str	r3, [r7, #12]
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015df8:	68fa      	ldr	r2, [r7, #12]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d20b      	bcs.n	8015e16 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	011b      	lsls	r3, r3, #4
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	4413      	add	r3, r2
 8015e06:	6839      	ldr	r1, [r7, #0]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f000 f817 	bl	8015e3c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	3301      	adds	r3, #1
 8015e12:	60fb      	str	r3, [r7, #12]
 8015e14:	e7ed      	b.n	8015df2 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8015e16:	bf00      	nop
 8015e18:	3710      	adds	r7, #16
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b082      	sub	sp, #8
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 8015e26:	f7ec fb8b 	bl	8002540 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	6879      	ldr	r1, [r7, #4]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7ff ffd8 	bl	8015de4 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8015e34:	bf00      	nop
 8015e36:	3708      	adds	r7, #8
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8015e3c:	b5b0      	push	{r4, r5, r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7eb fb12 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8015e4e:	4603      	mov	r3, r0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d001      	beq.n	8015e58 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8015e54:	f006 f97a 	bl	801c14c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	68dc      	ldr	r4, [r3, #12]
 8015e5c:	687d      	ldr	r5, [r7, #4]
 8015e5e:	463b      	mov	r3, r7
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7ec fdac 	bl	80029be <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8015e66:	4603      	mov	r3, r0
 8015e68:	4619      	mov	r1, r3
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	47a0      	blx	r4
 8015e6e:	bf00      	nop
    }
 8015e70:	3708      	adds	r7, #8
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bdb0      	pop	{r4, r5, r7, pc}

08015e76 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 8015e76:	b5b0      	push	{r4, r5, r7, lr}
 8015e78:	b082      	sub	sp, #8
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	240f      	movs	r4, #15
 8015e82:	461d      	mov	r5, r3
 8015e84:	2c00      	cmp	r4, #0
 8015e86:	db05      	blt.n	8015e94 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 8015e88:	4628      	mov	r0, r5
 8015e8a:	f7ec fce9 	bl	8002860 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8015e8e:	3510      	adds	r5, #16
 8015e90:	3c01      	subs	r4, #1
 8015e92:	e7f7      	b.n	8015e84 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2200      	movs	r2, #0
 8015e98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3708      	adds	r7, #8
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bdb0      	pop	{r4, r5, r7, pc}

08015ea6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 8015ea6:	b590      	push	{r4, r7, lr}
 8015ea8:	b083      	sub	sp, #12
 8015eaa:	af00      	add	r7, sp, #0
 8015eac:	6078      	str	r0, [r7, #4]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00a      	beq.n	8015eca <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	429c      	cmp	r4, r3
 8015ebe:	d004      	beq.n	8015eca <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8015ec0:	3c10      	subs	r4, #16
 8015ec2:	4620      	mov	r0, r4
 8015ec4:	f7ec faf8 	bl	80024b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8015ec8:	e7f7      	b.n	8015eba <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd90      	pop	{r4, r7, pc}

08015ed4 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	4801      	ldr	r0, [pc, #4]	; (8015ee0 <__tcf_0+0xc>)
 8015eda:	f7ff ffe4 	bl	8015ea6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 8015ede:	bd80      	pop	{r7, pc}
 8015ee0:	200016c8 	.word	0x200016c8

08015ee4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 8015ee8:	4b12      	ldr	r3, [pc, #72]	; (8015f34 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	f3bf 8f5b 	dmb	ish
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	f003 0301 	and.w	r3, r3, #1
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	bf0c      	ite	eq
 8015efa:	2301      	moveq	r3, #1
 8015efc:	2300      	movne	r3, #0
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d013      	beq.n	8015f2c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015f04:	480b      	ldr	r0, [pc, #44]	; (8015f34 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015f06:	f006 f90d 	bl	801c124 <__cxa_guard_acquire>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	bf14      	ite	ne
 8015f10:	2301      	movne	r3, #1
 8015f12:	2300      	moveq	r3, #0
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d008      	beq.n	8015f2c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015f1a:	4807      	ldr	r0, [pc, #28]	; (8015f38 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8015f1c:	f7ff ffab 	bl	8015e76 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 8015f20:	4806      	ldr	r0, [pc, #24]	; (8015f3c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 8015f22:	f006 fb74 	bl	801c60e <atexit>
 8015f26:	4803      	ldr	r0, [pc, #12]	; (8015f34 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015f28:	f006 f908 	bl	801c13c <__cxa_guard_release>
		return instance;
 8015f2c:	4b02      	ldr	r3, [pc, #8]	; (8015f38 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	200017cc 	.word	0x200017cc
 8015f38:	200016c8 	.word	0x200016c8
 8015f3c:	08015ed5 	.word	0x08015ed5

08015f40 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
 8015f48:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	60fb      	str	r3, [r7, #12]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015f54:	68fa      	ldr	r2, [r7, #12]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d20b      	bcs.n	8015f72 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	011b      	lsls	r3, r3, #4
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	4413      	add	r3, r2
 8015f62:	6839      	ldr	r1, [r7, #0]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f7ff ff69 	bl	8015e3c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	60fb      	str	r3, [r7, #12]
 8015f70:	e7ed      	b.n	8015f4e <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8015f72:	bf00      	nop
 8015f74:	3710      	adds	r7, #16
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}

08015f7a <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015f7a:	b580      	push	{r7, lr}
 8015f7c:	b082      	sub	sp, #8
 8015f7e:	af00      	add	r7, sp, #0
 8015f80:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 8015f82:	f7ff ffaf 	bl	8015ee4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 8015f86:	4603      	mov	r3, r0
 8015f88:	6879      	ldr	r1, [r7, #4]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7ff ffd8 	bl	8015f40 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8015f90:	bf00      	nop
 8015f92:	3708      	adds	r7, #8
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	60fb      	str	r3, [r7, #12]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015fae:	68fa      	ldr	r2, [r7, #12]
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d20c      	bcs.n	8015fce <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	011b      	lsls	r3, r3, #4
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	4413      	add	r3, r2
 8015fbc:	887a      	ldrh	r2, [r7, #2]
 8015fbe:	4611      	mov	r1, r2
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f000 f819 	bl	8015ff8 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	60fb      	str	r3, [r7, #12]
 8015fcc:	e7ec      	b.n	8015fa8 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 8015fce:	bf00      	nop
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}

08015fd6 <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b082      	sub	sp, #8
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	4603      	mov	r3, r0
 8015fde:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 8015fe0:	f7f3 f832 	bl	8009048 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	88fb      	ldrh	r3, [r7, #6]
 8015fe8:	4619      	mov	r1, r3
 8015fea:	4610      	mov	r0, r2
 8015fec:	f7ff ffd4 	bl	8015f98 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8015ff0:	bf00      	nop
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 8015ff8:	b5b0      	push	{r4, r5, r7, lr}
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	460b      	mov	r3, r1
 8016002:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	4618      	mov	r0, r3
 8016008:	f7eb fa33 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 801600c:	4603      	mov	r3, r0
 801600e:	2b00      	cmp	r3, #0
 8016010:	d001      	beq.n	8016016 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8016012:	f006 f89b 	bl	801c14c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	68dc      	ldr	r4, [r3, #12]
 801601a:	687d      	ldr	r5, [r7, #4]
 801601c:	1cbb      	adds	r3, r7, #2
 801601e:	4618      	mov	r0, r3
 8016020:	f7f3 fbd1 	bl	80097c6 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8016024:	4603      	mov	r3, r0
 8016026:	4619      	mov	r1, r3
 8016028:	4628      	mov	r0, r5
 801602a:	47a0      	blx	r4
 801602c:	bf00      	nop
    }
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bdb0      	pop	{r4, r5, r7, pc}

08016034 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 801603e:	2300      	movs	r3, #0
 8016040:	60fb      	str	r3, [r7, #12]
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	429a      	cmp	r2, r3
 801604c:	d20b      	bcs.n	8016066 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	011b      	lsls	r3, r3, #4
 8016052:	687a      	ldr	r2, [r7, #4]
 8016054:	4413      	add	r3, r2
 8016056:	6839      	ldr	r1, [r7, #0]
 8016058:	4618      	mov	r0, r3
 801605a:	f000 f817 	bl	801608c <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	3301      	adds	r3, #1
 8016062:	60fb      	str	r3, [r7, #12]
 8016064:	e7ed      	b.n	8016042 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 8016066:	bf00      	nop
 8016068:	3710      	adds	r7, #16
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}

0801606e <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801606e:	b580      	push	{r7, lr}
 8016070:	b082      	sub	sp, #8
 8016072:	af00      	add	r7, sp, #0
 8016074:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 8016076:	f7f3 f8fb 	bl	8009270 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 801607a:	4603      	mov	r3, r0
 801607c:	6879      	ldr	r1, [r7, #4]
 801607e:	4618      	mov	r0, r3
 8016080:	f7ff ffd8 	bl	8016034 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 8016084:	bf00      	nop
 8016086:	3708      	adds	r7, #8
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}

0801608c <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 801608c:	b5b0      	push	{r4, r5, r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	4618      	mov	r0, r3
 801609a:	f7eb f9ea 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 801609e:	4603      	mov	r3, r0
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d001      	beq.n	80160a8 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 80160a4:	f006 f852 	bl	801c14c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	68dc      	ldr	r4, [r3, #12]
 80160ac:	687d      	ldr	r5, [r7, #4]
 80160ae:	463b      	mov	r3, r7
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7f3 fc90 	bl	80099d6 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80160b6:	4603      	mov	r3, r0
 80160b8:	4619      	mov	r1, r3
 80160ba:	4628      	mov	r0, r5
 80160bc:	47a0      	blx	r4
 80160be:	bf00      	nop
    }
 80160c0:	3708      	adds	r7, #8
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bdb0      	pop	{r4, r5, r7, pc}

080160c6 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80160c6:	b480      	push	{r7}
 80160c8:	b085      	sub	sp, #20
 80160ca:	af00      	add	r7, sp, #0
 80160cc:	60b9      	str	r1, [r7, #8]
 80160ce:	607a      	str	r2, [r7, #4]
 80160d0:	603b      	str	r3, [r7, #0]
 80160d2:	4603      	mov	r3, r0
 80160d4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80160d6:	bf00      	nop
 80160d8:	3714      	adds	r7, #20
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b084      	sub	sp, #16
 80160e6:	af00      	add	r7, sp, #0
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	607a      	str	r2, [r7, #4]
 80160ec:	603b      	str	r3, [r7, #0]
 80160ee:	4603      	mov	r3, r0
 80160f0:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80160f2:	7bfb      	ldrb	r3, [r7, #15]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d003      	beq.n	8016100 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 80160f8:	7bfb      	ldrb	r3, [r7, #15]
 80160fa:	4618      	mov	r0, r3
 80160fc:	f001 fc6f 	bl	80179de <_putchar>
  }
}
 8016100:	bf00      	nop
 8016102:	3710      	adds	r7, #16
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}

08016108 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8016108:	b480      	push	{r7}
 801610a:	b085      	sub	sp, #20
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	60fb      	str	r3, [r7, #12]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d006      	beq.n	801612c <_ZL10_strnlen_sPKcj+0x24>
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	1e5a      	subs	r2, r3, #1
 8016122:	603a      	str	r2, [r7, #0]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d001      	beq.n	801612c <_ZL10_strnlen_sPKcj+0x24>
 8016128:	2301      	movs	r3, #1
 801612a:	e000      	b.n	801612e <_ZL10_strnlen_sPKcj+0x26>
 801612c:	2300      	movs	r3, #0
 801612e:	2b00      	cmp	r3, #0
 8016130:	d003      	beq.n	801613a <_ZL10_strnlen_sPKcj+0x32>
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	3301      	adds	r3, #1
 8016136:	60fb      	str	r3, [r7, #12]
 8016138:	e7ed      	b.n	8016116 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 801613a:	68fa      	ldr	r2, [r7, #12]
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	1ad3      	subs	r3, r2, r3
}
 8016140:	4618      	mov	r0, r3
 8016142:	3714      	adds	r7, #20
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr

0801614c <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 801614c:	b480      	push	{r7}
 801614e:	b083      	sub	sp, #12
 8016150:	af00      	add	r7, sp, #0
 8016152:	4603      	mov	r3, r0
 8016154:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8016156:	79fb      	ldrb	r3, [r7, #7]
 8016158:	2b2f      	cmp	r3, #47	; 0x2f
 801615a:	d904      	bls.n	8016166 <_ZL9_is_digitc+0x1a>
 801615c:	79fb      	ldrb	r3, [r7, #7]
 801615e:	2b39      	cmp	r3, #57	; 0x39
 8016160:	d801      	bhi.n	8016166 <_ZL9_is_digitc+0x1a>
 8016162:	2301      	movs	r3, #1
 8016164:	e000      	b.n	8016168 <_ZL9_is_digitc+0x1c>
 8016166:	2300      	movs	r3, #0
}
 8016168:	4618      	mov	r0, r3
 801616a:	370c      	adds	r7, #12
 801616c:	46bd      	mov	sp, r7
 801616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016172:	4770      	bx	lr

08016174 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b084      	sub	sp, #16
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 801617c:	2300      	movs	r3, #0
 801617e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	4618      	mov	r0, r3
 8016188:	f7ff ffe0 	bl	801614c <_ZL9_is_digitc>
 801618c:	4603      	mov	r3, r0
 801618e:	2b00      	cmp	r3, #0
 8016190:	d00f      	beq.n	80161b2 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8016192:	68fa      	ldr	r2, [r7, #12]
 8016194:	4613      	mov	r3, r2
 8016196:	009b      	lsls	r3, r3, #2
 8016198:	4413      	add	r3, r2
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	4618      	mov	r0, r3
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	1c59      	adds	r1, r3, #1
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	6011      	str	r1, [r2, #0]
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	4403      	add	r3, r0
 80161ac:	3b30      	subs	r3, #48	; 0x30
 80161ae:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80161b0:	e7e6      	b.n	8016180 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 80161b2:	68fb      	ldr	r3, [r7, #12]
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3710      	adds	r7, #16
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80161bc:	b590      	push	{r4, r7, lr}
 80161be:	b087      	sub	sp, #28
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	607a      	str	r2, [r7, #4]
 80161c8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80161ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d0:	f003 0302 	and.w	r3, r3, #2
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d116      	bne.n	8016206 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 80161d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161da:	f003 0301 	and.w	r3, r3, #1
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d111      	bne.n	8016206 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 80161e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e4:	617b      	str	r3, [r7, #20]
 80161e6:	697a      	ldr	r2, [r7, #20]
 80161e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d20b      	bcs.n	8016206 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 80161ee:	687a      	ldr	r2, [r7, #4]
 80161f0:	1c53      	adds	r3, r2, #1
 80161f2:	607b      	str	r3, [r7, #4]
 80161f4:	68fc      	ldr	r4, [r7, #12]
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	68b9      	ldr	r1, [r7, #8]
 80161fa:	2020      	movs	r0, #32
 80161fc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80161fe:	697b      	ldr	r3, [r7, #20]
 8016200:	3301      	adds	r3, #1
 8016202:	617b      	str	r3, [r7, #20]
 8016204:	e7ef      	b.n	80161e6 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00e      	beq.n	801622a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	3b01      	subs	r3, #1
 8016210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016216:	4413      	add	r3, r2
 8016218:	7818      	ldrb	r0, [r3, #0]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	1c53      	adds	r3, r2, #1
 801621e:	607b      	str	r3, [r7, #4]
 8016220:	68fc      	ldr	r4, [r7, #12]
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	68b9      	ldr	r1, [r7, #8]
 8016226:	47a0      	blx	r4
  while (len) {
 8016228:	e7ed      	b.n	8016206 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 801622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622c:	f003 0302 	and.w	r3, r3, #2
 8016230:	2b00      	cmp	r3, #0
 8016232:	d00e      	beq.n	8016252 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 8016234:	687a      	ldr	r2, [r7, #4]
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	1ad3      	subs	r3, r2, r3
 801623a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801623c:	429a      	cmp	r2, r3
 801623e:	d908      	bls.n	8016252 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	1c53      	adds	r3, r2, #1
 8016244:	607b      	str	r3, [r7, #4]
 8016246:	68fc      	ldr	r4, [r7, #12]
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	68b9      	ldr	r1, [r7, #8]
 801624c:	2020      	movs	r0, #32
 801624e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8016250:	e7f0      	b.n	8016234 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 8016252:	687b      	ldr	r3, [r7, #4]
}
 8016254:	4618      	mov	r0, r3
 8016256:	371c      	adds	r7, #28
 8016258:	46bd      	mov	sp, r7
 801625a:	bd90      	pop	{r4, r7, pc}

0801625c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af04      	add	r7, sp, #16
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
 8016268:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 801626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626c:	f003 0302 	and.w	r3, r3, #2
 8016270:	2b00      	cmp	r3, #0
 8016272:	d136      	bne.n	80162e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8016274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016276:	2b00      	cmp	r3, #0
 8016278:	d010      	beq.n	801629c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	f003 0301 	and.w	r3, r3, #1
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00b      	beq.n	801629c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8016284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d104      	bne.n	8016296 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 801628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628e:	f003 030c 	and.w	r3, r3, #12
 8016292:	2b00      	cmp	r3, #0
 8016294:	d002      	beq.n	801629c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 8016296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016298:	3b01      	subs	r3, #1
 801629a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801629c:	69fa      	ldr	r2, [r7, #28]
 801629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d20a      	bcs.n	80162ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	2b1f      	cmp	r3, #31
 80162a8:	d807      	bhi.n	80162ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	1c5a      	adds	r2, r3, #1
 80162ae:	61fa      	str	r2, [r7, #28]
 80162b0:	69ba      	ldr	r2, [r7, #24]
 80162b2:	4413      	add	r3, r2
 80162b4:	2230      	movs	r2, #48	; 0x30
 80162b6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80162b8:	e7f0      	b.n	801629c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162bc:	f003 0301 	and.w	r3, r3, #1
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00e      	beq.n	80162e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80162c4:	69fa      	ldr	r2, [r7, #28]
 80162c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c8:	429a      	cmp	r2, r3
 80162ca:	d20a      	bcs.n	80162e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	2b1f      	cmp	r3, #31
 80162d0:	d807      	bhi.n	80162e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 80162d2:	69fb      	ldr	r3, [r7, #28]
 80162d4:	1c5a      	adds	r2, r3, #1
 80162d6:	61fa      	str	r2, [r7, #28]
 80162d8:	69ba      	ldr	r2, [r7, #24]
 80162da:	4413      	add	r3, r2
 80162dc:	2230      	movs	r2, #48	; 0x30
 80162de:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80162e0:	e7eb      	b.n	80162ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80162e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e4:	f003 0310 	and.w	r3, r3, #16
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d058      	beq.n	801639e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80162ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d116      	bne.n	8016324 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d013      	beq.n	8016324 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80162fc:	69fa      	ldr	r2, [r7, #28]
 80162fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016300:	429a      	cmp	r2, r3
 8016302:	d003      	beq.n	801630c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8016304:	69fa      	ldr	r2, [r7, #28]
 8016306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016308:	429a      	cmp	r2, r3
 801630a:	d10b      	bne.n	8016324 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 801630c:	69fb      	ldr	r3, [r7, #28]
 801630e:	3b01      	subs	r3, #1
 8016310:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d005      	beq.n	8016324 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8016318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631a:	2b10      	cmp	r3, #16
 801631c:	d102      	bne.n	8016324 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	3b01      	subs	r3, #1
 8016322:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8016324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016326:	2b10      	cmp	r3, #16
 8016328:	d10f      	bne.n	801634a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 801632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632c:	f003 0320 	and.w	r3, r3, #32
 8016330:	2b00      	cmp	r3, #0
 8016332:	d10a      	bne.n	801634a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	2b1f      	cmp	r3, #31
 8016338:	d807      	bhi.n	801634a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 801633a:	69fb      	ldr	r3, [r7, #28]
 801633c:	1c5a      	adds	r2, r3, #1
 801633e:	61fa      	str	r2, [r7, #28]
 8016340:	69ba      	ldr	r2, [r7, #24]
 8016342:	4413      	add	r3, r2
 8016344:	2278      	movs	r2, #120	; 0x78
 8016346:	701a      	strb	r2, [r3, #0]
 8016348:	e01f      	b.n	801638a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634c:	2b10      	cmp	r3, #16
 801634e:	d10f      	bne.n	8016370 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8016350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016352:	f003 0320 	and.w	r3, r3, #32
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00a      	beq.n	8016370 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	2b1f      	cmp	r3, #31
 801635e:	d807      	bhi.n	8016370 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	1c5a      	adds	r2, r3, #1
 8016364:	61fa      	str	r2, [r7, #28]
 8016366:	69ba      	ldr	r2, [r7, #24]
 8016368:	4413      	add	r3, r2
 801636a:	2258      	movs	r2, #88	; 0x58
 801636c:	701a      	strb	r2, [r3, #0]
 801636e:	e00c      	b.n	801638a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8016370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016372:	2b02      	cmp	r3, #2
 8016374:	d109      	bne.n	801638a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	2b1f      	cmp	r3, #31
 801637a:	d806      	bhi.n	801638a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	1c5a      	adds	r2, r3, #1
 8016380:	61fa      	str	r2, [r7, #28]
 8016382:	69ba      	ldr	r2, [r7, #24]
 8016384:	4413      	add	r3, r2
 8016386:	2262      	movs	r2, #98	; 0x62
 8016388:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	2b1f      	cmp	r3, #31
 801638e:	d806      	bhi.n	801639e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	1c5a      	adds	r2, r3, #1
 8016394:	61fa      	str	r2, [r7, #28]
 8016396:	69ba      	ldr	r2, [r7, #24]
 8016398:	4413      	add	r3, r2
 801639a:	2230      	movs	r2, #48	; 0x30
 801639c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	2b1f      	cmp	r3, #31
 80163a2:	d824      	bhi.n	80163ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 80163a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d007      	beq.n	80163bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	1c5a      	adds	r2, r3, #1
 80163b0:	61fa      	str	r2, [r7, #28]
 80163b2:	69ba      	ldr	r2, [r7, #24]
 80163b4:	4413      	add	r3, r2
 80163b6:	222d      	movs	r2, #45	; 0x2d
 80163b8:	701a      	strb	r2, [r3, #0]
 80163ba:	e018      	b.n	80163ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80163bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163be:	f003 0304 	and.w	r3, r3, #4
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d007      	beq.n	80163d6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80163c6:	69fb      	ldr	r3, [r7, #28]
 80163c8:	1c5a      	adds	r2, r3, #1
 80163ca:	61fa      	str	r2, [r7, #28]
 80163cc:	69ba      	ldr	r2, [r7, #24]
 80163ce:	4413      	add	r3, r2
 80163d0:	222b      	movs	r2, #43	; 0x2b
 80163d2:	701a      	strb	r2, [r3, #0]
 80163d4:	e00b      	b.n	80163ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	f003 0308 	and.w	r3, r3, #8
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d006      	beq.n	80163ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	1c5a      	adds	r2, r3, #1
 80163e4:	61fa      	str	r2, [r7, #28]
 80163e6:	69ba      	ldr	r2, [r7, #24]
 80163e8:	4413      	add	r3, r2
 80163ea:	2220      	movs	r2, #32
 80163ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	9303      	str	r3, [sp, #12]
 80163f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f4:	9302      	str	r3, [sp, #8]
 80163f6:	69fb      	ldr	r3, [r7, #28]
 80163f8:	9301      	str	r3, [sp, #4]
 80163fa:	69bb      	ldr	r3, [r7, #24]
 80163fc:	9300      	str	r3, [sp, #0]
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	68b9      	ldr	r1, [r7, #8]
 8016404:	68f8      	ldr	r0, [r7, #12]
 8016406:	f7ff fed9 	bl	80161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 801640a:	4603      	mov	r3, r0
}
 801640c:	4618      	mov	r0, r3
 801640e:	3710      	adds	r7, #16
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b096      	sub	sp, #88	; 0x58
 8016418:	af08      	add	r7, sp, #32
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8016422:	2300      	movs	r3, #0
 8016424:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8016426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016428:	2b00      	cmp	r3, #0
 801642a:	d103      	bne.n	8016434 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 801642c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801642e:	f023 0310 	bic.w	r3, r3, #16
 8016432:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8016434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801643a:	2b00      	cmp	r3, #0
 801643c:	d002      	beq.n	8016444 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 801643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016440:	2b00      	cmp	r3, #0
 8016442:	d033      	beq.n	80164ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 8016444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016448:	fbb3 f2f2 	udiv	r2, r3, r2
 801644c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801644e:	fb01 f202 	mul.w	r2, r1, r2
 8016452:	1a9b      	subs	r3, r3, r2
 8016454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8016458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801645c:	2b09      	cmp	r3, #9
 801645e:	d804      	bhi.n	801646a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8016460:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016464:	3330      	adds	r3, #48	; 0x30
 8016466:	b2da      	uxtb	r2, r3
 8016468:	e00d      	b.n	8016486 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 801646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801646c:	f003 0320 	and.w	r3, r3, #32
 8016470:	2b00      	cmp	r3, #0
 8016472:	d001      	beq.n	8016478 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 8016474:	2241      	movs	r2, #65	; 0x41
 8016476:	e000      	b.n	801647a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 8016478:	2261      	movs	r2, #97	; 0x61
 801647a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801647e:	4413      	add	r3, r2
 8016480:	b2db      	uxtb	r3, r3
 8016482:	3b0a      	subs	r3, #10
 8016484:	b2da      	uxtb	r2, r3
 8016486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016488:	1c59      	adds	r1, r3, #1
 801648a:	6379      	str	r1, [r7, #52]	; 0x34
 801648c:	3338      	adds	r3, #56	; 0x38
 801648e:	443b      	add	r3, r7
 8016490:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8016494:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016498:	fbb2 f3f3 	udiv	r3, r2, r3
 801649c:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801649e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d003      	beq.n	80164ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 80164a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164a6:	2b1f      	cmp	r3, #31
 80164a8:	d800      	bhi.n	80164ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 80164aa:	e7cb      	b.n	8016444 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80164ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164ae:	9306      	str	r3, [sp, #24]
 80164b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164b2:	9305      	str	r3, [sp, #20]
 80164b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164b6:	9304      	str	r3, [sp, #16]
 80164b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164ba:	9303      	str	r3, [sp, #12]
 80164bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80164c0:	9302      	str	r3, [sp, #8]
 80164c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164c4:	9301      	str	r3, [sp, #4]
 80164c6:	f107 0310 	add.w	r3, r7, #16
 80164ca:	9300      	str	r3, [sp, #0]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	68b9      	ldr	r1, [r7, #8]
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f7ff fec2 	bl	801625c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 80164d8:	4603      	mov	r3, r0
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3738      	adds	r7, #56	; 0x38
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b096      	sub	sp, #88	; 0x58
 80164e6:	af08      	add	r7, sp, #32
 80164e8:	60f8      	str	r0, [r7, #12]
 80164ea:	60b9      	str	r1, [r7, #8]
 80164ec:	607a      	str	r2, [r7, #4]
 80164ee:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80164f0:	2300      	movs	r3, #0
 80164f2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80164f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80164f8:	4313      	orrs	r3, r2
 80164fa:	d103      	bne.n	8016504 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 80164fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80164fe:	f023 0310 	bic.w	r3, r3, #16
 8016502:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8016504:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801650a:	2b00      	cmp	r3, #0
 801650c:	d003      	beq.n	8016516 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 801650e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016512:	4313      	orrs	r3, r2
 8016514:	d038      	beq.n	8016588 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 8016516:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801651a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801651e:	f7ea fbb3 	bl	8000c88 <__aeabi_uldivmod>
 8016522:	4613      	mov	r3, r2
 8016524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8016528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801652c:	2b09      	cmp	r3, #9
 801652e:	d804      	bhi.n	801653a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8016530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016534:	3330      	adds	r3, #48	; 0x30
 8016536:	b2da      	uxtb	r2, r3
 8016538:	e00d      	b.n	8016556 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 801653a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801653c:	f003 0320 	and.w	r3, r3, #32
 8016540:	2b00      	cmp	r3, #0
 8016542:	d001      	beq.n	8016548 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8016544:	2241      	movs	r2, #65	; 0x41
 8016546:	e000      	b.n	801654a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8016548:	2261      	movs	r2, #97	; 0x61
 801654a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801654e:	4413      	add	r3, r2
 8016550:	b2db      	uxtb	r3, r3
 8016552:	3b0a      	subs	r3, #10
 8016554:	b2da      	uxtb	r2, r3
 8016556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016558:	1c59      	adds	r1, r3, #1
 801655a:	6379      	str	r1, [r7, #52]	; 0x34
 801655c:	3338      	adds	r3, #56	; 0x38
 801655e:	443b      	add	r3, r7
 8016560:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8016564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8016568:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801656c:	f7ea fb8c 	bl	8000c88 <__aeabi_uldivmod>
 8016570:	4602      	mov	r2, r0
 8016572:	460b      	mov	r3, r1
 8016574:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8016578:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801657c:	4313      	orrs	r3, r2
 801657e:	d003      	beq.n	8016588 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8016580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016582:	2b1f      	cmp	r3, #31
 8016584:	d800      	bhi.n	8016588 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 8016586:	e7c6      	b.n	8016516 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8016588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801658a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801658c:	9206      	str	r2, [sp, #24]
 801658e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016590:	9205      	str	r2, [sp, #20]
 8016592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016594:	9204      	str	r2, [sp, #16]
 8016596:	9303      	str	r3, [sp, #12]
 8016598:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801659c:	9302      	str	r3, [sp, #8]
 801659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165a0:	9301      	str	r3, [sp, #4]
 80165a2:	f107 0310 	add.w	r3, r7, #16
 80165a6:	9300      	str	r3, [sp, #0]
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	68b9      	ldr	r1, [r7, #8]
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	f7ff fe54 	bl	801625c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 80165b4:	4603      	mov	r3, r0
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3738      	adds	r7, #56	; 0x38
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
	...

080165c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80165c0:	b590      	push	{r4, r7, lr}
 80165c2:	b09d      	sub	sp, #116	; 0x74
 80165c4:	af04      	add	r7, sp, #16
 80165c6:	6178      	str	r0, [r7, #20]
 80165c8:	6139      	str	r1, [r7, #16]
 80165ca:	60fa      	str	r2, [r7, #12]
 80165cc:	60bb      	str	r3, [r7, #8]
 80165ce:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80165d2:	2300      	movs	r3, #0
 80165d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80165d6:	f04f 0200 	mov.w	r2, #0
 80165da:	f04f 0300 	mov.w	r3, #0
 80165de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80165e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80165e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80165ea:	f7ea fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10f      	bne.n	8016614 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80165f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80165f6:	9303      	str	r3, [sp, #12]
 80165f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80165fa:	9302      	str	r3, [sp, #8]
 80165fc:	2303      	movs	r3, #3
 80165fe:	9301      	str	r3, [sp, #4]
 8016600:	4ba7      	ldr	r3, [pc, #668]	; (80168a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	68fa      	ldr	r2, [r7, #12]
 8016608:	6939      	ldr	r1, [r7, #16]
 801660a:	6978      	ldr	r0, [r7, #20]
 801660c:	f7ff fdd6 	bl	80161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8016610:	4603      	mov	r3, r0
 8016612:	e230      	b.n	8016a76 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 8016614:	f04f 32ff 	mov.w	r2, #4294967295
 8016618:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 801661c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016620:	f7ea fa5c 	bl	8000adc <__aeabi_dcmplt>
 8016624:	4603      	mov	r3, r0
 8016626:	2b00      	cmp	r3, #0
 8016628:	d00f      	beq.n	801664a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 801662a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801662c:	9303      	str	r3, [sp, #12]
 801662e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016630:	9302      	str	r3, [sp, #8]
 8016632:	2304      	movs	r3, #4
 8016634:	9301      	str	r3, [sp, #4]
 8016636:	4b9b      	ldr	r3, [pc, #620]	; (80168a4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8016638:	9300      	str	r3, [sp, #0]
 801663a:	68bb      	ldr	r3, [r7, #8]
 801663c:	68fa      	ldr	r2, [r7, #12]
 801663e:	6939      	ldr	r1, [r7, #16]
 8016640:	6978      	ldr	r0, [r7, #20]
 8016642:	f7ff fdbb 	bl	80161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8016646:	4603      	mov	r3, r0
 8016648:	e215      	b.n	8016a76 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 801664a:	f04f 32ff 	mov.w	r2, #4294967295
 801664e:	4b96      	ldr	r3, [pc, #600]	; (80168a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8016650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016654:	f7ea fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d01d      	beq.n	801669a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 801665e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016660:	f003 0304 	and.w	r3, r3, #4
 8016664:	2b00      	cmp	r3, #0
 8016666:	d001      	beq.n	801666c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8016668:	4b90      	ldr	r3, [pc, #576]	; (80168ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 801666a:	e000      	b.n	801666e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 801666c:	4b90      	ldr	r3, [pc, #576]	; (80168b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 801666e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016670:	f002 0204 	and.w	r2, r2, #4
 8016674:	2a00      	cmp	r2, #0
 8016676:	d001      	beq.n	801667c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8016678:	2204      	movs	r2, #4
 801667a:	e000      	b.n	801667e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 801667c:	2203      	movs	r2, #3
 801667e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016680:	9103      	str	r1, [sp, #12]
 8016682:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8016684:	9102      	str	r1, [sp, #8]
 8016686:	9201      	str	r2, [sp, #4]
 8016688:	9300      	str	r3, [sp, #0]
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	68fa      	ldr	r2, [r7, #12]
 801668e:	6939      	ldr	r1, [r7, #16]
 8016690:	6978      	ldr	r0, [r7, #20]
 8016692:	f7ff fd93 	bl	80161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8016696:	4603      	mov	r3, r0
 8016698:	e1ed      	b.n	8016a76 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 801669a:	a37d      	add	r3, pc, #500	; (adr r3, 8016890 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 801669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166a4:	f7ea fa38 	bl	8000b18 <__aeabi_dcmpgt>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d109      	bne.n	80166c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 80166ae:	a37a      	add	r3, pc, #488	; (adr r3, 8016898 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 80166b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166b8:	f7ea fa10 	bl	8000adc <__aeabi_dcmplt>
 80166bc:	4603      	mov	r3, r0
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d00f      	beq.n	80166e2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80166c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80166c4:	9302      	str	r3, [sp, #8]
 80166c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166c8:	9301      	str	r3, [sp, #4]
 80166ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166cc:	9300      	str	r3, [sp, #0]
 80166ce:	ed97 0b00 	vldr	d0, [r7]
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	68fa      	ldr	r2, [r7, #12]
 80166d6:	6939      	ldr	r1, [r7, #16]
 80166d8:	6978      	ldr	r0, [r7, #20]
 80166da:	f000 f9d5 	bl	8016a88 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 80166de:	4603      	mov	r3, r0
 80166e0:	e1c9      	b.n	8016a76 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80166e2:	2300      	movs	r3, #0
 80166e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80166e8:	f04f 0200 	mov.w	r2, #0
 80166ec:	f04f 0300 	mov.w	r3, #0
 80166f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80166f4:	f7ea f9f2 	bl	8000adc <__aeabi_dcmplt>
 80166f8:	4603      	mov	r3, r0
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d00e      	beq.n	801671c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 80166fe:	2301      	movs	r3, #1
 8016700:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8016704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016708:	f04f 0000 	mov.w	r0, #0
 801670c:	f04f 0100 	mov.w	r1, #0
 8016710:	f7e9 fdba 	bl	8000288 <__aeabi_dsub>
 8016714:	4602      	mov	r2, r0
 8016716:	460b      	mov	r3, r1
 8016718:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 801671c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801671e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016722:	2b00      	cmp	r3, #0
 8016724:	d101      	bne.n	801672a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8016726:	2306      	movs	r3, #6
 8016728:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 801672a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801672c:	2b1f      	cmp	r3, #31
 801672e:	d80e      	bhi.n	801674e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8016730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016732:	2b09      	cmp	r3, #9
 8016734:	d90b      	bls.n	801674e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 8016736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016738:	1c5a      	adds	r2, r3, #1
 801673a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801673c:	3360      	adds	r3, #96	; 0x60
 801673e:	443b      	add	r3, r7
 8016740:	2230      	movs	r2, #48	; 0x30
 8016742:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8016746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016748:	3b01      	subs	r3, #1
 801674a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 801674c:	e7ed      	b.n	801672a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 801674e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016752:	f7ea fa01 	bl	8000b58 <__aeabi_d2iz>
 8016756:	4603      	mov	r3, r0
 8016758:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 801675a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801675c:	f7e9 fee2 	bl	8000524 <__aeabi_i2d>
 8016760:	4602      	mov	r2, r0
 8016762:	460b      	mov	r3, r1
 8016764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016768:	f7e9 fd8e 	bl	8000288 <__aeabi_dsub>
 801676c:	4602      	mov	r2, r0
 801676e:	460b      	mov	r3, r1
 8016770:	4610      	mov	r0, r2
 8016772:	4619      	mov	r1, r3
 8016774:	4a4f      	ldr	r2, [pc, #316]	; (80168b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8016776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016778:	00db      	lsls	r3, r3, #3
 801677a:	4413      	add	r3, r2
 801677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016780:	f7e9 ff3a 	bl	80005f8 <__aeabi_dmul>
 8016784:	4602      	mov	r2, r0
 8016786:	460b      	mov	r3, r1
 8016788:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 801678c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016790:	f7ea fa0a 	bl	8000ba8 <__aeabi_d2uiz>
 8016794:	4603      	mov	r3, r0
 8016796:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8016798:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801679a:	f7e9 feb3 	bl	8000504 <__aeabi_ui2d>
 801679e:	4602      	mov	r2, r0
 80167a0:	460b      	mov	r3, r1
 80167a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80167a6:	f7e9 fd6f 	bl	8000288 <__aeabi_dsub>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 80167b2:	f04f 0200 	mov.w	r2, #0
 80167b6:	4b40      	ldr	r3, [pc, #256]	; (80168b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80167b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80167bc:	f7ea f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 80167c0:	4603      	mov	r3, r0
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d016      	beq.n	80167f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 80167c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167c8:	3301      	adds	r3, #1
 80167ca:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80167cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80167ce:	f7e9 fe99 	bl	8000504 <__aeabi_ui2d>
 80167d2:	4a38      	ldr	r2, [pc, #224]	; (80168b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 80167d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167d6:	00db      	lsls	r3, r3, #3
 80167d8:	4413      	add	r3, r2
 80167da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167de:	f7ea f991 	bl	8000b04 <__aeabi_dcmpge>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d01a      	beq.n	801681e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 80167e8:	2300      	movs	r3, #0
 80167ea:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80167ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167ee:	3301      	adds	r3, #1
 80167f0:	657b      	str	r3, [r7, #84]	; 0x54
 80167f2:	e014      	b.n	801681e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 80167f4:	f04f 0200 	mov.w	r2, #0
 80167f8:	4b2f      	ldr	r3, [pc, #188]	; (80168b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 80167fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80167fe:	f7ea f96d 	bl	8000adc <__aeabi_dcmplt>
 8016802:	4603      	mov	r3, r0
 8016804:	2b00      	cmp	r3, #0
 8016806:	d10a      	bne.n	801681e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8016808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801680a:	2b00      	cmp	r3, #0
 801680c:	d004      	beq.n	8016818 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 801680e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016810:	f003 0301 	and.w	r3, r3, #1
 8016814:	2b00      	cmp	r3, #0
 8016816:	d002      	beq.n	801681e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8016818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801681a:	3301      	adds	r3, #1
 801681c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 801681e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016820:	2b00      	cmp	r3, #0
 8016822:	d14b      	bne.n	80168bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8016824:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016826:	f7e9 fe7d 	bl	8000524 <__aeabi_i2d>
 801682a:	4602      	mov	r2, r0
 801682c:	460b      	mov	r3, r1
 801682e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016832:	f7e9 fd29 	bl	8000288 <__aeabi_dsub>
 8016836:	4602      	mov	r2, r0
 8016838:	460b      	mov	r3, r1
 801683a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 801683e:	2301      	movs	r3, #1
 8016840:	461c      	mov	r4, r3
 8016842:	f04f 0200 	mov.w	r2, #0
 8016846:	4b1c      	ldr	r3, [pc, #112]	; (80168b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8016848:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801684c:	f7ea f946 	bl	8000adc <__aeabi_dcmplt>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d101      	bne.n	801685a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8016856:	2300      	movs	r3, #0
 8016858:	461c      	mov	r4, r3
 801685a:	b2e3      	uxtb	r3, r4
 801685c:	f083 0301 	eor.w	r3, r3, #1
 8016860:	b2db      	uxtb	r3, r3
 8016862:	2b00      	cmp	r3, #0
 8016864:	d109      	bne.n	801687a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8016866:	f04f 0200 	mov.w	r2, #0
 801686a:	4b13      	ldr	r3, [pc, #76]	; (80168b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 801686c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016870:	f7ea f952 	bl	8000b18 <__aeabi_dcmpgt>
 8016874:	4603      	mov	r3, r0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d06d      	beq.n	8016956 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 801687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801687c:	f003 0301 	and.w	r3, r3, #1
 8016880:	2b00      	cmp	r3, #0
 8016882:	d068      	beq.n	8016956 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8016884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016886:	3301      	adds	r3, #1
 8016888:	657b      	str	r3, [r7, #84]	; 0x54
 801688a:	e064      	b.n	8016956 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 801688c:	f3af 8000 	nop.w
 8016890:	00000000 	.word	0x00000000
 8016894:	41cdcd65 	.word	0x41cdcd65
 8016898:	00000000 	.word	0x00000000
 801689c:	c1cdcd65 	.word	0xc1cdcd65
 80168a0:	0801f82c 	.word	0x0801f82c
 80168a4:	0801f830 	.word	0x0801f830
 80168a8:	7fefffff 	.word	0x7fefffff
 80168ac:	0801f838 	.word	0x0801f838
 80168b0:	0801f840 	.word	0x0801f840
 80168b4:	0801fdf8 	.word	0x0801fdf8
 80168b8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80168bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80168be:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80168c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168c2:	2b1f      	cmp	r3, #31
 80168c4:	d826      	bhi.n	8016914 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 80168c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168c8:	3b01      	subs	r3, #1
 80168ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80168cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80168ce:	4b6c      	ldr	r3, [pc, #432]	; (8016a80 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 80168d0:	fba3 2301 	umull	r2, r3, r3, r1
 80168d4:	08da      	lsrs	r2, r3, #3
 80168d6:	4613      	mov	r3, r2
 80168d8:	009b      	lsls	r3, r3, #2
 80168da:	4413      	add	r3, r2
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	1aca      	subs	r2, r1, r3
 80168e0:	b2d2      	uxtb	r2, r2
 80168e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80168e4:	1c59      	adds	r1, r3, #1
 80168e6:	65f9      	str	r1, [r7, #92]	; 0x5c
 80168e8:	3230      	adds	r2, #48	; 0x30
 80168ea:	b2d2      	uxtb	r2, r2
 80168ec:	3360      	adds	r3, #96	; 0x60
 80168ee:	443b      	add	r3, r7
 80168f0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80168f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168f6:	4a62      	ldr	r2, [pc, #392]	; (8016a80 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 80168f8:	fba2 2303 	umull	r2, r3, r2, r3
 80168fc:	08db      	lsrs	r3, r3, #3
 80168fe:	653b      	str	r3, [r7, #80]	; 0x50
 8016900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016902:	2b00      	cmp	r3, #0
 8016904:	bf0c      	ite	eq
 8016906:	2301      	moveq	r3, #1
 8016908:	2300      	movne	r3, #0
 801690a:	b2db      	uxtb	r3, r3
 801690c:	2b00      	cmp	r3, #0
 801690e:	d100      	bne.n	8016912 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8016910:	e7d6      	b.n	80168c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8016912:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8016914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016916:	2b1f      	cmp	r3, #31
 8016918:	d806      	bhi.n	8016928 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 801691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801691c:	1e5a      	subs	r2, r3, #1
 801691e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016920:	2b00      	cmp	r3, #0
 8016922:	d001      	beq.n	8016928 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8016924:	2301      	movs	r3, #1
 8016926:	e000      	b.n	801692a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8016928:	2300      	movs	r3, #0
 801692a:	2b00      	cmp	r3, #0
 801692c:	d008      	beq.n	8016940 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 801692e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016930:	1c5a      	adds	r2, r3, #1
 8016932:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016934:	3360      	adds	r3, #96	; 0x60
 8016936:	443b      	add	r3, r7
 8016938:	2230      	movs	r2, #48	; 0x30
 801693a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 801693e:	e7e9      	b.n	8016914 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8016940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016942:	2b1f      	cmp	r3, #31
 8016944:	d807      	bhi.n	8016956 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8016946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016948:	1c5a      	adds	r2, r3, #1
 801694a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801694c:	3360      	adds	r3, #96	; 0x60
 801694e:	443b      	add	r3, r7
 8016950:	222e      	movs	r2, #46	; 0x2e
 8016952:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8016956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016958:	2b1f      	cmp	r3, #31
 801695a:	d827      	bhi.n	80169ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 801695c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801695e:	4b49      	ldr	r3, [pc, #292]	; (8016a84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8016960:	fb83 1302 	smull	r1, r3, r3, r2
 8016964:	1099      	asrs	r1, r3, #2
 8016966:	17d3      	asrs	r3, r2, #31
 8016968:	1ac9      	subs	r1, r1, r3
 801696a:	460b      	mov	r3, r1
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	440b      	add	r3, r1
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	1ad1      	subs	r1, r2, r3
 8016974:	b2ca      	uxtb	r2, r1
 8016976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016978:	1c59      	adds	r1, r3, #1
 801697a:	65f9      	str	r1, [r7, #92]	; 0x5c
 801697c:	3230      	adds	r2, #48	; 0x30
 801697e:	b2d2      	uxtb	r2, r2
 8016980:	3360      	adds	r3, #96	; 0x60
 8016982:	443b      	add	r3, r7
 8016984:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8016988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801698a:	4a3e      	ldr	r2, [pc, #248]	; (8016a84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 801698c:	fb82 1203 	smull	r1, r2, r2, r3
 8016990:	1092      	asrs	r2, r2, #2
 8016992:	17db      	asrs	r3, r3, #31
 8016994:	1ad3      	subs	r3, r2, r3
 8016996:	657b      	str	r3, [r7, #84]	; 0x54
 8016998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801699a:	2b00      	cmp	r3, #0
 801699c:	bf0c      	ite	eq
 801699e:	2301      	moveq	r3, #1
 80169a0:	2300      	movne	r3, #0
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d100      	bne.n	80169aa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80169a8:	e7d5      	b.n	8016956 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 80169aa:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80169ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80169ae:	f003 0302 	and.w	r3, r3, #2
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d123      	bne.n	80169fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 80169b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80169b8:	f003 0301 	and.w	r3, r3, #1
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d01e      	beq.n	80169fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80169c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d00b      	beq.n	80169de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 80169c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d104      	bne.n	80169d8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 80169ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80169d0:	f003 030c 	and.w	r3, r3, #12
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d002      	beq.n	80169de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 80169d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169da:	3b01      	subs	r3, #1
 80169dc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80169de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80169e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d20b      	bcs.n	80169fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 80169e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169e8:	2b1f      	cmp	r3, #31
 80169ea:	d808      	bhi.n	80169fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 80169ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169ee:	1c5a      	adds	r2, r3, #1
 80169f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80169f2:	3360      	adds	r3, #96	; 0x60
 80169f4:	443b      	add	r3, r7
 80169f6:	2230      	movs	r2, #48	; 0x30
 80169f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80169fc:	e7ef      	b.n	80169de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80169fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a00:	2b1f      	cmp	r3, #31
 8016a02:	d827      	bhi.n	8016a54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8016a04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d008      	beq.n	8016a1e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 8016a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a0e:	1c5a      	adds	r2, r3, #1
 8016a10:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016a12:	3360      	adds	r3, #96	; 0x60
 8016a14:	443b      	add	r3, r7
 8016a16:	222d      	movs	r2, #45	; 0x2d
 8016a18:	f803 2c48 	strb.w	r2, [r3, #-72]
 8016a1c:	e01a      	b.n	8016a54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 8016a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a20:	f003 0304 	and.w	r3, r3, #4
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d008      	beq.n	8016a3a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8016a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a2a:	1c5a      	adds	r2, r3, #1
 8016a2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016a2e:	3360      	adds	r3, #96	; 0x60
 8016a30:	443b      	add	r3, r7
 8016a32:	222b      	movs	r2, #43	; 0x2b
 8016a34:	f803 2c48 	strb.w	r2, [r3, #-72]
 8016a38:	e00c      	b.n	8016a54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 8016a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a3c:	f003 0308 	and.w	r3, r3, #8
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d007      	beq.n	8016a54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8016a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a46:	1c5a      	adds	r2, r3, #1
 8016a48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016a4a:	3360      	adds	r3, #96	; 0x60
 8016a4c:	443b      	add	r3, r7
 8016a4e:	2220      	movs	r2, #32
 8016a50:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8016a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016a56:	9303      	str	r3, [sp, #12]
 8016a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016a5a:	9302      	str	r3, [sp, #8]
 8016a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016a5e:	9301      	str	r3, [sp, #4]
 8016a60:	f107 0318 	add.w	r3, r7, #24
 8016a64:	9300      	str	r3, [sp, #0]
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	6939      	ldr	r1, [r7, #16]
 8016a6c:	6978      	ldr	r0, [r7, #20]
 8016a6e:	f7ff fba5 	bl	80161bc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8016a72:	4603      	mov	r3, r0
 8016a74:	bf00      	nop
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3764      	adds	r7, #100	; 0x64
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd90      	pop	{r4, r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	cccccccd 	.word	0xcccccccd
 8016a84:	66666667 	.word	0x66666667

08016a88 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8016a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a8c:	b09f      	sub	sp, #124	; 0x7c
 8016a8e:	af06      	add	r7, sp, #24
 8016a90:	6278      	str	r0, [r7, #36]	; 0x24
 8016a92:	6239      	str	r1, [r7, #32]
 8016a94:	61fa      	str	r2, [r7, #28]
 8016a96:	61bb      	str	r3, [r7, #24]
 8016a98:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8016a9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016aa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016aa4:	f7ea f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d014      	beq.n	8016ad8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8016aae:	f04f 32ff 	mov.w	r2, #4294967295
 8016ab2:	4bc1      	ldr	r3, [pc, #772]	; (8016db8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 8016ab4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ab8:	f7ea f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d10a      	bne.n	8016ad8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8016ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ac6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8016aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ace:	f7ea f805 	bl	8000adc <__aeabi_dcmplt>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d012      	beq.n	8016afe <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8016ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ae2:	9301      	str	r3, [sp, #4]
 8016ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ae8:	9300      	str	r3, [sp, #0]
 8016aea:	ed97 0b04 	vldr	d0, [r7, #16]
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	69fa      	ldr	r2, [r7, #28]
 8016af2:	6a39      	ldr	r1, [r7, #32]
 8016af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016af6:	f7ff fd63 	bl	80165c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8016afa:	4603      	mov	r3, r0
 8016afc:	e23f      	b.n	8016f7e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8016afe:	2301      	movs	r3, #1
 8016b00:	461e      	mov	r6, r3
 8016b02:	f04f 0200 	mov.w	r2, #0
 8016b06:	f04f 0300 	mov.w	r3, #0
 8016b0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016b0e:	f7e9 ffe5 	bl	8000adc <__aeabi_dcmplt>
 8016b12:	4603      	mov	r3, r0
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d101      	bne.n	8016b1c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8016b18:	2300      	movs	r3, #0
 8016b1a:	461e      	mov	r6, r3
 8016b1c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8016b20:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d009      	beq.n	8016b3c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	603b      	str	r3, [r7, #0]
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016b32:	607b      	str	r3, [r7, #4]
 8016b34:	ed97 7b00 	vldr	d7, [r7]
 8016b38:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8016b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d102      	bne.n	8016b4e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8016b48:	2306      	movs	r3, #6
 8016b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8016b4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016b52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8016b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016b5a:	f04f 0200 	mov.w	r2, #0
 8016b5e:	f04f 0300 	mov.w	r3, #0
 8016b62:	0d0a      	lsrs	r2, r1, #20
 8016b64:	2300      	movs	r3, #0
 8016b66:	4613      	mov	r3, r2
 8016b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8016b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016b76:	4690      	mov	r8, r2
 8016b78:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8016b7c:	4644      	mov	r4, r8
 8016b7e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8016b82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016b86:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8016b8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016b8c:	f7e9 fcca 	bl	8000524 <__aeabi_i2d>
 8016b90:	a37d      	add	r3, pc, #500	; (adr r3, 8016d88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 8016b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b96:	f7e9 fd2f 	bl	80005f8 <__aeabi_dmul>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	4610      	mov	r0, r2
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	a37b      	add	r3, pc, #492	; (adr r3, 8016d90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 8016ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba8:	f7e9 fb70 	bl	800028c <__adddf3>
 8016bac:	4602      	mov	r2, r0
 8016bae:	460b      	mov	r3, r1
 8016bb0:	4614      	mov	r4, r2
 8016bb2:	461d      	mov	r5, r3
 8016bb4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016bb8:	f04f 0200 	mov.w	r2, #0
 8016bbc:	4b7f      	ldr	r3, [pc, #508]	; (8016dbc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 8016bbe:	f7e9 fb63 	bl	8000288 <__aeabi_dsub>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	460b      	mov	r3, r1
 8016bc6:	4610      	mov	r0, r2
 8016bc8:	4619      	mov	r1, r3
 8016bca:	a373      	add	r3, pc, #460	; (adr r3, 8016d98 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 8016bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd0:	f7e9 fd12 	bl	80005f8 <__aeabi_dmul>
 8016bd4:	4602      	mov	r2, r0
 8016bd6:	460b      	mov	r3, r1
 8016bd8:	4620      	mov	r0, r4
 8016bda:	4629      	mov	r1, r5
 8016bdc:	f7e9 fb56 	bl	800028c <__adddf3>
 8016be0:	4602      	mov	r2, r0
 8016be2:	460b      	mov	r3, r1
 8016be4:	4610      	mov	r0, r2
 8016be6:	4619      	mov	r1, r3
 8016be8:	f7e9 ffb6 	bl	8000b58 <__aeabi_d2iz>
 8016bec:	4603      	mov	r3, r0
 8016bee:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8016bf0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016bf2:	f7e9 fc97 	bl	8000524 <__aeabi_i2d>
 8016bf6:	a36a      	add	r3, pc, #424	; (adr r3, 8016da0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8016bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bfc:	f7e9 fcfc 	bl	80005f8 <__aeabi_dmul>
 8016c00:	4602      	mov	r2, r0
 8016c02:	460b      	mov	r3, r1
 8016c04:	4610      	mov	r0, r2
 8016c06:	4619      	mov	r1, r3
 8016c08:	f04f 0200 	mov.w	r2, #0
 8016c0c:	4b6c      	ldr	r3, [pc, #432]	; (8016dc0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 8016c0e:	f7e9 fb3d 	bl	800028c <__adddf3>
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	4610      	mov	r0, r2
 8016c18:	4619      	mov	r1, r3
 8016c1a:	f7e9 ff9d 	bl	8000b58 <__aeabi_d2iz>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8016c22:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016c24:	f7e9 fc7e 	bl	8000524 <__aeabi_i2d>
 8016c28:	a35f      	add	r3, pc, #380	; (adr r3, 8016da8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 8016c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2e:	f7e9 fce3 	bl	80005f8 <__aeabi_dmul>
 8016c32:	4602      	mov	r2, r0
 8016c34:	460b      	mov	r3, r1
 8016c36:	4614      	mov	r4, r2
 8016c38:	461d      	mov	r5, r3
 8016c3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016c3c:	f7e9 fc72 	bl	8000524 <__aeabi_i2d>
 8016c40:	a35b      	add	r3, pc, #364	; (adr r3, 8016db0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 8016c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c46:	f7e9 fcd7 	bl	80005f8 <__aeabi_dmul>
 8016c4a:	4602      	mov	r2, r0
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	4620      	mov	r0, r4
 8016c50:	4629      	mov	r1, r5
 8016c52:	f7e9 fb19 	bl	8000288 <__aeabi_dsub>
 8016c56:	4602      	mov	r2, r0
 8016c58:	460b      	mov	r3, r1
 8016c5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8016c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016c62:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016c66:	f7e9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8016c6a:	4602      	mov	r2, r0
 8016c6c:	460b      	mov	r3, r1
 8016c6e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8016c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c74:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8016c78:	17da      	asrs	r2, r3, #31
 8016c7a:	469a      	mov	sl, r3
 8016c7c:	4693      	mov	fp, r2
 8016c7e:	f04f 0200 	mov.w	r2, #0
 8016c82:	f04f 0300 	mov.w	r3, #0
 8016c86:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8016c90:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8016c94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016c98:	4602      	mov	r2, r0
 8016c9a:	460b      	mov	r3, r1
 8016c9c:	f7e9 faf6 	bl	800028c <__adddf3>
 8016ca0:	4602      	mov	r2, r0
 8016ca2:	460b      	mov	r3, r1
 8016ca4:	4690      	mov	r8, r2
 8016ca6:	4699      	mov	r9, r3
 8016ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016cac:	f04f 0000 	mov.w	r0, #0
 8016cb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8016cb4:	f7e9 fae8 	bl	8000288 <__aeabi_dsub>
 8016cb8:	4602      	mov	r2, r0
 8016cba:	460b      	mov	r3, r1
 8016cbc:	4692      	mov	sl, r2
 8016cbe:	469b      	mov	fp, r3
 8016cc0:	f04f 0200 	mov.w	r2, #0
 8016cc4:	4b3f      	ldr	r3, [pc, #252]	; (8016dc4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 8016cc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016cca:	f7e9 fdbf 	bl	800084c <__aeabi_ddiv>
 8016cce:	4602      	mov	r2, r0
 8016cd0:	460b      	mov	r3, r1
 8016cd2:	4610      	mov	r0, r2
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	f04f 0200 	mov.w	r2, #0
 8016cda:	4b3b      	ldr	r3, [pc, #236]	; (8016dc8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8016cdc:	f7e9 fad6 	bl	800028c <__adddf3>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016ce8:	f7e9 fdb0 	bl	800084c <__aeabi_ddiv>
 8016cec:	4602      	mov	r2, r0
 8016cee:	460b      	mov	r3, r1
 8016cf0:	4610      	mov	r0, r2
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	f04f 0200 	mov.w	r2, #0
 8016cf8:	4b34      	ldr	r3, [pc, #208]	; (8016dcc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 8016cfa:	f7e9 fac7 	bl	800028c <__adddf3>
 8016cfe:	4602      	mov	r2, r0
 8016d00:	460b      	mov	r3, r1
 8016d02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016d06:	f7e9 fda1 	bl	800084c <__aeabi_ddiv>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	460b      	mov	r3, r1
 8016d0e:	4650      	mov	r0, sl
 8016d10:	4659      	mov	r1, fp
 8016d12:	f7e9 fabb 	bl	800028c <__adddf3>
 8016d16:	4602      	mov	r2, r0
 8016d18:	460b      	mov	r3, r1
 8016d1a:	4640      	mov	r0, r8
 8016d1c:	4649      	mov	r1, r9
 8016d1e:	f7e9 fd95 	bl	800084c <__aeabi_ddiv>
 8016d22:	4602      	mov	r2, r0
 8016d24:	460b      	mov	r3, r1
 8016d26:	4610      	mov	r0, r2
 8016d28:	4619      	mov	r1, r3
 8016d2a:	f04f 0200 	mov.w	r2, #0
 8016d2e:	4b28      	ldr	r3, [pc, #160]	; (8016dd0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 8016d30:	f7e9 faac 	bl	800028c <__adddf3>
 8016d34:	4602      	mov	r2, r0
 8016d36:	460b      	mov	r3, r1
 8016d38:	4620      	mov	r0, r4
 8016d3a:	4629      	mov	r1, r5
 8016d3c:	f7e9 fc5c 	bl	80005f8 <__aeabi_dmul>
 8016d40:	4602      	mov	r2, r0
 8016d42:	460b      	mov	r3, r1
 8016d44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8016d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016d4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016d50:	f7e9 fec4 	bl	8000adc <__aeabi_dcmplt>
 8016d54:	4603      	mov	r3, r0
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d00d      	beq.n	8016d76 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 8016d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d5c:	3b01      	subs	r3, #1
 8016d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8016d60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016d64:	f04f 0200 	mov.w	r2, #0
 8016d68:	4b17      	ldr	r3, [pc, #92]	; (8016dc8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8016d6a:	f7e9 fd6f 	bl	800084c <__aeabi_ddiv>
 8016d6e:	4602      	mov	r2, r0
 8016d70:	460b      	mov	r3, r1
 8016d72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8016d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d78:	2b63      	cmp	r3, #99	; 0x63
 8016d7a:	dc2b      	bgt.n	8016dd4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8016d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d7e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8016d82:	db27      	blt.n	8016dd4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8016d84:	2304      	movs	r3, #4
 8016d86:	e026      	b.n	8016dd6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8016d88:	509f79fb 	.word	0x509f79fb
 8016d8c:	3fd34413 	.word	0x3fd34413
 8016d90:	8b60c8b3 	.word	0x8b60c8b3
 8016d94:	3fc68a28 	.word	0x3fc68a28
 8016d98:	636f4361 	.word	0x636f4361
 8016d9c:	3fd287a7 	.word	0x3fd287a7
 8016da0:	0979a371 	.word	0x0979a371
 8016da4:	400a934f 	.word	0x400a934f
 8016da8:	bbb55516 	.word	0xbbb55516
 8016dac:	40026bb1 	.word	0x40026bb1
 8016db0:	fefa39ef 	.word	0xfefa39ef
 8016db4:	3fe62e42 	.word	0x3fe62e42
 8016db8:	7fefffff 	.word	0x7fefffff
 8016dbc:	3ff80000 	.word	0x3ff80000
 8016dc0:	3fe00000 	.word	0x3fe00000
 8016dc4:	402c0000 	.word	0x402c0000
 8016dc8:	40240000 	.word	0x40240000
 8016dcc:	40180000 	.word	0x40180000
 8016dd0:	3ff00000 	.word	0x3ff00000
 8016dd4:	2305      	movs	r3, #5
 8016dd6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8016dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d03d      	beq.n	8016e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8016de4:	a368      	add	r3, pc, #416	; (adr r3, 8016f88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 8016de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016dee:	f7e9 fe89 	bl	8000b04 <__aeabi_dcmpge>
 8016df2:	4603      	mov	r3, r0
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d024      	beq.n	8016e42 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8016df8:	a365      	add	r3, pc, #404	; (adr r3, 8016f90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 8016dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016e02:	f7e9 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8016e06:	4603      	mov	r3, r0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d01a      	beq.n	8016e42 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 8016e0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016e12:	429a      	cmp	r2, r3
 8016e14:	da07      	bge.n	8016e26 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8016e16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e1c:	1ad3      	subs	r3, r2, r3
 8016e1e:	3b01      	subs	r3, #1
 8016e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016e24:	e002      	b.n	8016e2c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 8016e26:	2300      	movs	r3, #0
 8016e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8016e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016e34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016e40:	e00e      	b.n	8016e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8016e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d00a      	beq.n	8016e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 8016e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d004      	beq.n	8016e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 8016e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e5a:	3b01      	subs	r3, #1
 8016e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8016e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e64:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8016e66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d904      	bls.n	8016e7a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8016e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e74:	1ad3      	subs	r3, r2, r3
 8016e76:	657b      	str	r3, [r7, #84]	; 0x54
 8016e78:	e001      	b.n	8016e7e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8016e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e82:	f003 0302 	and.w	r3, r3, #2
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d004      	beq.n	8016e94 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 8016e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d001      	beq.n	8016e94 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8016e90:	2300      	movs	r3, #0
 8016e92:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8016e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d009      	beq.n	8016eae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 8016e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016e9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016ea2:	f7e9 fcd3 	bl	800084c <__aeabi_ddiv>
 8016ea6:	4602      	mov	r2, r0
 8016ea8:	460b      	mov	r3, r1
 8016eaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8016eae:	69fb      	ldr	r3, [r7, #28]
 8016eb0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8016eb2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d006      	beq.n	8016ec8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 8016eba:	693b      	ldr	r3, [r7, #16]
 8016ebc:	60bb      	str	r3, [r7, #8]
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016ec4:	60fb      	str	r3, [r7, #12]
 8016ec6:	e003      	b.n	8016ed0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 8016ec8:	ed97 7b04 	vldr	d7, [r7, #16]
 8016ecc:	ed87 7b02 	vstr	d7, [r7, #8]
 8016ed0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016ed8:	9302      	str	r3, [sp, #8]
 8016eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016edc:	9301      	str	r3, [sp, #4]
 8016ede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ee2:	9300      	str	r3, [sp, #0]
 8016ee4:	ed97 0b02 	vldr	d0, [r7, #8]
 8016ee8:	69bb      	ldr	r3, [r7, #24]
 8016eea:	69fa      	ldr	r2, [r7, #28]
 8016eec:	6a39      	ldr	r1, [r7, #32]
 8016eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016ef0:	f7ff fb66 	bl	80165c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8016ef4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8016ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d03f      	beq.n	8016f7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8016efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f00:	f003 0320 	and.w	r3, r3, #32
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d001      	beq.n	8016f0c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 8016f08:	2045      	movs	r0, #69	; 0x45
 8016f0a:	e000      	b.n	8016f0e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 8016f0c:	2065      	movs	r0, #101	; 0x65
 8016f0e:	69fa      	ldr	r2, [r7, #28]
 8016f10:	1c53      	adds	r3, r2, #1
 8016f12:	61fb      	str	r3, [r7, #28]
 8016f14:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	6a39      	ldr	r1, [r7, #32]
 8016f1a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8016f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	bfb8      	it	lt
 8016f22:	425b      	neglt	r3, r3
 8016f24:	4618      	mov	r0, r3
 8016f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f28:	0fdb      	lsrs	r3, r3, #31
 8016f2a:	b2db      	uxtb	r3, r3
 8016f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f2e:	3a01      	subs	r2, #1
 8016f30:	2105      	movs	r1, #5
 8016f32:	9105      	str	r1, [sp, #20]
 8016f34:	9204      	str	r2, [sp, #16]
 8016f36:	2200      	movs	r2, #0
 8016f38:	9203      	str	r2, [sp, #12]
 8016f3a:	220a      	movs	r2, #10
 8016f3c:	9202      	str	r2, [sp, #8]
 8016f3e:	9301      	str	r3, [sp, #4]
 8016f40:	9000      	str	r0, [sp, #0]
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	69fa      	ldr	r2, [r7, #28]
 8016f46:	6a39      	ldr	r1, [r7, #32]
 8016f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f4a:	f7ff fa63 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016f4e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8016f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f54:	f003 0302 	and.w	r3, r3, #2
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d00f      	beq.n	8016f7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8016f5c:	69fa      	ldr	r2, [r7, #28]
 8016f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f60:	1ad3      	subs	r3, r2, r3
 8016f62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d908      	bls.n	8016f7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 8016f6a:	69fa      	ldr	r2, [r7, #28]
 8016f6c:	1c53      	adds	r3, r2, #1
 8016f6e:	61fb      	str	r3, [r7, #28]
 8016f70:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	6a39      	ldr	r1, [r7, #32]
 8016f76:	2020      	movs	r0, #32
 8016f78:	47a0      	blx	r4
 8016f7a:	e7ef      	b.n	8016f5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 8016f7c:	69fb      	ldr	r3, [r7, #28]
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3764      	adds	r7, #100	; 0x64
 8016f82:	46bd      	mov	sp, r7
 8016f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f88:	eb1c432d 	.word	0xeb1c432d
 8016f8c:	3f1a36e2 	.word	0x3f1a36e2
 8016f90:	00000000 	.word	0x00000000
 8016f94:	412e8480 	.word	0x412e8480

08016f98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8016f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9c:	b0a1      	sub	sp, #132	; 0x84
 8016f9e:	af0a      	add	r7, sp, #40	; 0x28
 8016fa0:	60f8      	str	r0, [r7, #12]
 8016fa2:	60b9      	str	r1, [r7, #8]
 8016fa4:	607a      	str	r2, [r7, #4]
 8016fa6:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d101      	bne.n	8016fb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 8016fb2:	4ba5      	ldr	r3, [pc, #660]	; (8017248 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 8016fb4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	f000 84ae 	beq.w	801791c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	781b      	ldrb	r3, [r3, #0]
 8016fc4:	2b25      	cmp	r3, #37	; 0x25
 8016fc6:	d00d      	beq.n	8016fe4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	7818      	ldrb	r0, [r3, #0]
 8016fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016fce:	1c53      	adds	r3, r2, #1
 8016fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8016fd2:	68fe      	ldr	r6, [r7, #12]
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	68b9      	ldr	r1, [r7, #8]
 8016fd8:	47b0      	blx	r6
      format++;
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	3301      	adds	r3, #1
 8016fde:	603b      	str	r3, [r7, #0]
      continue;
 8016fe0:	f000 bc9a 	b.w	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8016fea:	2300      	movs	r3, #0
 8016fec:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	3b20      	subs	r3, #32
 8016ff4:	2b10      	cmp	r3, #16
 8016ff6:	d857      	bhi.n	80170a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8016ff8:	a201      	add	r2, pc, #4	; (adr r2, 8017000 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 8016ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ffe:	bf00      	nop
 8017000:	08017081 	.word	0x08017081
 8017004:	080170a9 	.word	0x080170a9
 8017008:	080170a9 	.word	0x080170a9
 801700c:	08017095 	.word	0x08017095
 8017010:	080170a9 	.word	0x080170a9
 8017014:	080170a9 	.word	0x080170a9
 8017018:	080170a9 	.word	0x080170a9
 801701c:	080170a9 	.word	0x080170a9
 8017020:	080170a9 	.word	0x080170a9
 8017024:	080170a9 	.word	0x080170a9
 8017028:	080170a9 	.word	0x080170a9
 801702c:	0801706d 	.word	0x0801706d
 8017030:	080170a9 	.word	0x080170a9
 8017034:	08017059 	.word	0x08017059
 8017038:	080170a9 	.word	0x080170a9
 801703c:	080170a9 	.word	0x080170a9
 8017040:	08017045 	.word	0x08017045
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8017044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017046:	f043 0301 	orr.w	r3, r3, #1
 801704a:	657b      	str	r3, [r7, #84]	; 0x54
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	3301      	adds	r3, #1
 8017050:	603b      	str	r3, [r7, #0]
 8017052:	2301      	movs	r3, #1
 8017054:	64bb      	str	r3, [r7, #72]	; 0x48
 8017056:	e02a      	b.n	80170ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8017058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801705a:	f043 0302 	orr.w	r3, r3, #2
 801705e:	657b      	str	r3, [r7, #84]	; 0x54
 8017060:	683b      	ldr	r3, [r7, #0]
 8017062:	3301      	adds	r3, #1
 8017064:	603b      	str	r3, [r7, #0]
 8017066:	2301      	movs	r3, #1
 8017068:	64bb      	str	r3, [r7, #72]	; 0x48
 801706a:	e020      	b.n	80170ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 801706c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801706e:	f043 0304 	orr.w	r3, r3, #4
 8017072:	657b      	str	r3, [r7, #84]	; 0x54
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	3301      	adds	r3, #1
 8017078:	603b      	str	r3, [r7, #0]
 801707a:	2301      	movs	r3, #1
 801707c:	64bb      	str	r3, [r7, #72]	; 0x48
 801707e:	e016      	b.n	80170ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8017080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017082:	f043 0308 	orr.w	r3, r3, #8
 8017086:	657b      	str	r3, [r7, #84]	; 0x54
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	3301      	adds	r3, #1
 801708c:	603b      	str	r3, [r7, #0]
 801708e:	2301      	movs	r3, #1
 8017090:	64bb      	str	r3, [r7, #72]	; 0x48
 8017092:	e00c      	b.n	80170ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8017094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017096:	f043 0310 	orr.w	r3, r3, #16
 801709a:	657b      	str	r3, [r7, #84]	; 0x54
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	3301      	adds	r3, #1
 80170a0:	603b      	str	r3, [r7, #0]
 80170a2:	2301      	movs	r3, #1
 80170a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80170a6:	e002      	b.n	80170ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 80170a8:	2300      	movs	r3, #0
 80170aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80170ac:	bf00      	nop
      }
    } while (n);
 80170ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d000      	beq.n	80170b6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 80170b4:	e79b      	b.n	8016fee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 80170b6:	2300      	movs	r3, #0
 80170b8:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	4618      	mov	r0, r3
 80170c0:	f7ff f844 	bl	801614c <_ZL9_is_digitc>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d005      	beq.n	80170d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 80170ca:	463b      	mov	r3, r7
 80170cc:	4618      	mov	r0, r3
 80170ce:	f7ff f851 	bl	8016174 <_ZL5_atoiPPKc>
 80170d2:	6538      	str	r0, [r7, #80]	; 0x50
 80170d4:	e01a      	b.n	801710c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	2b2a      	cmp	r3, #42	; 0x2a
 80170dc:	d116      	bne.n	801710c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 80170de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80170e2:	1d1a      	adds	r2, r3, #4
 80170e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80170ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	da07      	bge.n	8017102 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 80170f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170f4:	f043 0302 	orr.w	r3, r3, #2
 80170f8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80170fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fc:	425b      	negs	r3, r3
 80170fe:	653b      	str	r3, [r7, #80]	; 0x50
 8017100:	e001      	b.n	8017106 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	3301      	adds	r3, #1
 801710a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 801710c:	2300      	movs	r3, #0
 801710e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	2b2e      	cmp	r3, #46	; 0x2e
 8017116:	d126      	bne.n	8017166 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8017118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801711a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801711e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	3301      	adds	r3, #1
 8017124:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	4618      	mov	r0, r3
 801712c:	f7ff f80e 	bl	801614c <_ZL9_is_digitc>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d005      	beq.n	8017142 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 8017136:	463b      	mov	r3, r7
 8017138:	4618      	mov	r0, r3
 801713a:	f7ff f81b 	bl	8016174 <_ZL5_atoiPPKc>
 801713e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017140:	e011      	b.n	8017166 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	781b      	ldrb	r3, [r3, #0]
 8017146:	2b2a      	cmp	r3, #42	; 0x2a
 8017148:	d10d      	bne.n	8017166 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 801714a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801714e:	1d1a      	adds	r2, r3, #4
 8017150:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8017158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801715e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	3301      	adds	r3, #1
 8017164:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	3b68      	subs	r3, #104	; 0x68
 801716c:	2b12      	cmp	r3, #18
 801716e:	d867      	bhi.n	8017240 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8017170:	a201      	add	r2, pc, #4	; (adr r2, 8017178 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 8017172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017176:	bf00      	nop
 8017178:	080171eb 	.word	0x080171eb
 801717c:	08017241 	.word	0x08017241
 8017180:	08017221 	.word	0x08017221
 8017184:	08017241 	.word	0x08017241
 8017188:	080171c5 	.word	0x080171c5
 801718c:	08017241 	.word	0x08017241
 8017190:	08017241 	.word	0x08017241
 8017194:	08017241 	.word	0x08017241
 8017198:	08017241 	.word	0x08017241
 801719c:	08017241 	.word	0x08017241
 80171a0:	08017241 	.word	0x08017241
 80171a4:	08017241 	.word	0x08017241
 80171a8:	08017211 	.word	0x08017211
 80171ac:	08017241 	.word	0x08017241
 80171b0:	08017241 	.word	0x08017241
 80171b4:	08017241 	.word	0x08017241
 80171b8:	08017241 	.word	0x08017241
 80171bc:	08017241 	.word	0x08017241
 80171c0:	08017231 	.word	0x08017231
      case 'l' :
        flags |= FLAGS_LONG;
 80171c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80171ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80171cc:	683b      	ldr	r3, [r7, #0]
 80171ce:	3301      	adds	r3, #1
 80171d0:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	2b6c      	cmp	r3, #108	; 0x6c
 80171d8:	d134      	bne.n	8017244 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 80171da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80171e0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	3301      	adds	r3, #1
 80171e6:	603b      	str	r3, [r7, #0]
        }
        break;
 80171e8:	e02c      	b.n	8017244 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 80171ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80171ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171f0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	3301      	adds	r3, #1
 80171f6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	2b68      	cmp	r3, #104	; 0x68
 80171fe:	d125      	bne.n	801724c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8017200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017206:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	3301      	adds	r3, #1
 801720c:	603b      	str	r3, [r7, #0]
        }
        break;
 801720e:	e01d      	b.n	801724c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8017210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017216:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	3301      	adds	r3, #1
 801721c:	603b      	str	r3, [r7, #0]
        break;
 801721e:	e016      	b.n	801724e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8017220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017226:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	3301      	adds	r3, #1
 801722c:	603b      	str	r3, [r7, #0]
        break;
 801722e:	e00e      	b.n	801724e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8017230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017236:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	3301      	adds	r3, #1
 801723c:	603b      	str	r3, [r7, #0]
        break;
 801723e:	e006      	b.n	801724e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8017240:	bf00      	nop
 8017242:	e004      	b.n	801724e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 8017244:	bf00      	nop
 8017246:	e002      	b.n	801724e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8017248:	080160c7 	.word	0x080160c7
        break;
 801724c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	3b25      	subs	r3, #37	; 0x25
 8017254:	2b53      	cmp	r3, #83	; 0x53
 8017256:	f200 8352 	bhi.w	80178fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 801725a:	a201      	add	r2, pc, #4	; (adr r2, 8017260 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 801725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017260:	080178e7 	.word	0x080178e7
 8017264:	080178ff 	.word	0x080178ff
 8017268:	080178ff 	.word	0x080178ff
 801726c:	080178ff 	.word	0x080178ff
 8017270:	080178ff 	.word	0x080178ff
 8017274:	080178ff 	.word	0x080178ff
 8017278:	080178ff 	.word	0x080178ff
 801727c:	080178ff 	.word	0x080178ff
 8017280:	080178ff 	.word	0x080178ff
 8017284:	080178ff 	.word	0x080178ff
 8017288:	080178ff 	.word	0x080178ff
 801728c:	080178ff 	.word	0x080178ff
 8017290:	080178ff 	.word	0x080178ff
 8017294:	080178ff 	.word	0x080178ff
 8017298:	080178ff 	.word	0x080178ff
 801729c:	080178ff 	.word	0x080178ff
 80172a0:	080178ff 	.word	0x080178ff
 80172a4:	080178ff 	.word	0x080178ff
 80172a8:	080178ff 	.word	0x080178ff
 80172ac:	080178ff 	.word	0x080178ff
 80172b0:	080178ff 	.word	0x080178ff
 80172b4:	080178ff 	.word	0x080178ff
 80172b8:	080178ff 	.word	0x080178ff
 80172bc:	080178ff 	.word	0x080178ff
 80172c0:	080178ff 	.word	0x080178ff
 80172c4:	080178ff 	.word	0x080178ff
 80172c8:	080178ff 	.word	0x080178ff
 80172cc:	080178ff 	.word	0x080178ff
 80172d0:	080178ff 	.word	0x080178ff
 80172d4:	080178ff 	.word	0x080178ff
 80172d8:	080178ff 	.word	0x080178ff
 80172dc:	080178ff 	.word	0x080178ff
 80172e0:	080176b5 	.word	0x080176b5
 80172e4:	08017665 	.word	0x08017665
 80172e8:	080176b5 	.word	0x080176b5
 80172ec:	080178ff 	.word	0x080178ff
 80172f0:	080178ff 	.word	0x080178ff
 80172f4:	080178ff 	.word	0x080178ff
 80172f8:	080178ff 	.word	0x080178ff
 80172fc:	080178ff 	.word	0x080178ff
 8017300:	080178ff 	.word	0x080178ff
 8017304:	080178ff 	.word	0x080178ff
 8017308:	080178ff 	.word	0x080178ff
 801730c:	080178ff 	.word	0x080178ff
 8017310:	080178ff 	.word	0x080178ff
 8017314:	080178ff 	.word	0x080178ff
 8017318:	080178ff 	.word	0x080178ff
 801731c:	080178ff 	.word	0x080178ff
 8017320:	080178ff 	.word	0x080178ff
 8017324:	080178ff 	.word	0x080178ff
 8017328:	080178ff 	.word	0x080178ff
 801732c:	080173b1 	.word	0x080173b1
 8017330:	080178ff 	.word	0x080178ff
 8017334:	080178ff 	.word	0x080178ff
 8017338:	080178ff 	.word	0x080178ff
 801733c:	080178ff 	.word	0x080178ff
 8017340:	080178ff 	.word	0x080178ff
 8017344:	080178ff 	.word	0x080178ff
 8017348:	080178ff 	.word	0x080178ff
 801734c:	080178ff 	.word	0x080178ff
 8017350:	080178ff 	.word	0x080178ff
 8017354:	080173b1 	.word	0x080173b1
 8017358:	08017725 	.word	0x08017725
 801735c:	080173b1 	.word	0x080173b1
 8017360:	080176b5 	.word	0x080176b5
 8017364:	08017665 	.word	0x08017665
 8017368:	080176b5 	.word	0x080176b5
 801736c:	080178ff 	.word	0x080178ff
 8017370:	080173b1 	.word	0x080173b1
 8017374:	080178ff 	.word	0x080178ff
 8017378:	080178ff 	.word	0x080178ff
 801737c:	080178ff 	.word	0x080178ff
 8017380:	080178ff 	.word	0x080178ff
 8017384:	080178ff 	.word	0x080178ff
 8017388:	080173b1 	.word	0x080173b1
 801738c:	0801789b 	.word	0x0801789b
 8017390:	080178ff 	.word	0x080178ff
 8017394:	080178ff 	.word	0x080178ff
 8017398:	080177b1 	.word	0x080177b1
 801739c:	080178ff 	.word	0x080178ff
 80173a0:	080173b1 	.word	0x080173b1
 80173a4:	080178ff 	.word	0x080178ff
 80173a8:	080178ff 	.word	0x080178ff
 80173ac:	080173b1 	.word	0x080173b1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	2b78      	cmp	r3, #120	; 0x78
 80173b6:	d003      	beq.n	80173c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	2b58      	cmp	r3, #88	; 0x58
 80173be:	d102      	bne.n	80173c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 80173c0:	2310      	movs	r3, #16
 80173c2:	643b      	str	r3, [r7, #64]	; 0x40
 80173c4:	e013      	b.n	80173ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	2b6f      	cmp	r3, #111	; 0x6f
 80173cc:	d102      	bne.n	80173d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 80173ce:	2308      	movs	r3, #8
 80173d0:	643b      	str	r3, [r7, #64]	; 0x40
 80173d2:	e00c      	b.n	80173ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	781b      	ldrb	r3, [r3, #0]
 80173d8:	2b62      	cmp	r3, #98	; 0x62
 80173da:	d102      	bne.n	80173e2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 80173dc:	2302      	movs	r3, #2
 80173de:	643b      	str	r3, [r7, #64]	; 0x40
 80173e0:	e005      	b.n	80173ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 80173e2:	230a      	movs	r3, #10
 80173e4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80173e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173e8:	f023 0310 	bic.w	r3, r3, #16
 80173ec:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	2b58      	cmp	r3, #88	; 0x58
 80173f4:	d103      	bne.n	80173fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 80173f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80173f8:	f043 0320 	orr.w	r3, r3, #32
 80173fc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b69      	cmp	r3, #105	; 0x69
 8017404:	d007      	beq.n	8017416 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	2b64      	cmp	r3, #100	; 0x64
 801740c:	d003      	beq.n	8017416 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 801740e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017410:	f023 030c 	bic.w	r3, r3, #12
 8017414:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8017416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801741c:	2b00      	cmp	r3, #0
 801741e:	d003      	beq.n	8017428 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8017420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017422:	f023 0301 	bic.w	r3, r3, #1
 8017426:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	2b69      	cmp	r3, #105	; 0x69
 801742e:	d004      	beq.n	801743a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	2b64      	cmp	r3, #100	; 0x64
 8017436:	f040 8097 	bne.w	8017568 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 801743a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801743c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017440:	2b00      	cmp	r3, #0
 8017442:	d030      	beq.n	80174a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8017444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017448:	3307      	adds	r3, #7
 801744a:	f023 0307 	bic.w	r3, r3, #7
 801744e:	f103 0208 	add.w	r2, r3, #8
 8017452:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801745a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801745e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017462:	2b00      	cmp	r3, #0
 8017464:	da05      	bge.n	8017472 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 8017466:	2100      	movs	r1, #0
 8017468:	4254      	negs	r4, r2
 801746a:	eb61 0503 	sbc.w	r5, r1, r3
 801746e:	4622      	mov	r2, r4
 8017470:	462b      	mov	r3, r5
 8017472:	6979      	ldr	r1, [r7, #20]
 8017474:	0fc9      	lsrs	r1, r1, #31
 8017476:	b2c9      	uxtb	r1, r1
 8017478:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801747a:	2600      	movs	r6, #0
 801747c:	4680      	mov	r8, r0
 801747e:	46b1      	mov	r9, r6
 8017480:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017482:	9008      	str	r0, [sp, #32]
 8017484:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8017486:	9007      	str	r0, [sp, #28]
 8017488:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801748a:	9006      	str	r0, [sp, #24]
 801748c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8017490:	9102      	str	r1, [sp, #8]
 8017492:	e9cd 2300 	strd	r2, r3, [sp]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801749a:	68b9      	ldr	r1, [r7, #8]
 801749c:	68f8      	ldr	r0, [r7, #12]
 801749e:	f7ff f820 	bl	80164e2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 80174a2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 80174a4:	e0da      	b.n	801765c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 80174a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d020      	beq.n	80174f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 80174b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80174b4:	1d1a      	adds	r2, r3, #4
 80174b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80174be:	69fb      	ldr	r3, [r7, #28]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	bfb8      	it	lt
 80174c4:	425b      	neglt	r3, r3
 80174c6:	4619      	mov	r1, r3
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	0fdb      	lsrs	r3, r3, #31
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80174d0:	9205      	str	r2, [sp, #20]
 80174d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80174d4:	9204      	str	r2, [sp, #16]
 80174d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80174d8:	9203      	str	r2, [sp, #12]
 80174da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80174dc:	9202      	str	r2, [sp, #8]
 80174de:	9301      	str	r3, [sp, #4]
 80174e0:	9100      	str	r1, [sp, #0]
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174e6:	68b9      	ldr	r1, [r7, #8]
 80174e8:	68f8      	ldr	r0, [r7, #12]
 80174ea:	f7fe ff93 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80174ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
 80174f0:	e0b4      	b.n	801765c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80174f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d007      	beq.n	801750c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 80174fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017500:	1d1a      	adds	r2, r3, #4
 8017502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	b2db      	uxtb	r3, r3
 801750a:	e012      	b.n	8017532 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 801750c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017512:	2b00      	cmp	r3, #0
 8017514:	d007      	beq.n	8017526 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 8017516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801751a:	1d1a      	adds	r2, r3, #4
 801751c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	b21b      	sxth	r3, r3
 8017524:	e005      	b.n	8017532 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8017526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801752a:	1d1a      	adds	r2, r3, #4
 801752c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8017534:	6a3b      	ldr	r3, [r7, #32]
 8017536:	2b00      	cmp	r3, #0
 8017538:	bfb8      	it	lt
 801753a:	425b      	neglt	r3, r3
 801753c:	4619      	mov	r1, r3
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	0fdb      	lsrs	r3, r3, #31
 8017542:	b2db      	uxtb	r3, r3
 8017544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017546:	9205      	str	r2, [sp, #20]
 8017548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801754a:	9204      	str	r2, [sp, #16]
 801754c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801754e:	9203      	str	r2, [sp, #12]
 8017550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017552:	9202      	str	r2, [sp, #8]
 8017554:	9301      	str	r3, [sp, #4]
 8017556:	9100      	str	r1, [sp, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801755c:	68b9      	ldr	r1, [r7, #8]
 801755e:	68f8      	ldr	r0, [r7, #12]
 8017560:	f7fe ff58 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8017564:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8017566:	e079      	b.n	801765c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8017568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801756a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801756e:	2b00      	cmp	r3, #0
 8017570:	d022      	beq.n	80175b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8017572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017576:	3307      	adds	r3, #7
 8017578:	f023 0307 	bic.w	r3, r3, #7
 801757c:	f103 0208 	add.w	r2, r3, #8
 8017580:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017588:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801758a:	2000      	movs	r0, #0
 801758c:	468a      	mov	sl, r1
 801758e:	4683      	mov	fp, r0
 8017590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017592:	9108      	str	r1, [sp, #32]
 8017594:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017596:	9107      	str	r1, [sp, #28]
 8017598:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801759a:	9106      	str	r1, [sp, #24]
 801759c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80175a0:	2100      	movs	r1, #0
 80175a2:	9102      	str	r1, [sp, #8]
 80175a4:	e9cd 2300 	strd	r2, r3, [sp]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175ac:	68b9      	ldr	r1, [r7, #8]
 80175ae:	68f8      	ldr	r0, [r7, #12]
 80175b0:	f7fe ff97 	bl	80164e2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 80175b4:	6478      	str	r0, [r7, #68]	; 0x44
 80175b6:	e051      	b.n	801765c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80175b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d018      	beq.n	80175f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80175c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80175c6:	1d1a      	adds	r2, r3, #4
 80175c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175d0:	9205      	str	r2, [sp, #20]
 80175d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80175d4:	9204      	str	r2, [sp, #16]
 80175d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80175d8:	9203      	str	r2, [sp, #12]
 80175da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80175dc:	9202      	str	r2, [sp, #8]
 80175de:	2200      	movs	r2, #0
 80175e0:	9201      	str	r2, [sp, #4]
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80175e8:	68b9      	ldr	r1, [r7, #8]
 80175ea:	68f8      	ldr	r0, [r7, #12]
 80175ec:	f7fe ff12 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80175f0:	6478      	str	r0, [r7, #68]	; 0x44
 80175f2:	e033      	b.n	801765c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80175f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80175f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d007      	beq.n	801760e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 80175fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017602:	1d1a      	adds	r2, r3, #4
 8017604:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	b2db      	uxtb	r3, r3
 801760c:	e012      	b.n	8017634 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 801760e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017614:	2b00      	cmp	r3, #0
 8017616:	d007      	beq.n	8017628 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 8017618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801761c:	1d1a      	adds	r2, r3, #4
 801761e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	b29b      	uxth	r3, r3
 8017626:	e005      	b.n	8017634 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8017628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801762c:	1d1a      	adds	r2, r3, #4
 801762e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8017636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017638:	9305      	str	r3, [sp, #20]
 801763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801763c:	9304      	str	r3, [sp, #16]
 801763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017640:	9303      	str	r3, [sp, #12]
 8017642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017644:	9302      	str	r3, [sp, #8]
 8017646:	2300      	movs	r3, #0
 8017648:	9301      	str	r3, [sp, #4]
 801764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801764c:	9300      	str	r3, [sp, #0]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017652:	68b9      	ldr	r1, [r7, #8]
 8017654:	68f8      	ldr	r0, [r7, #12]
 8017656:	f7fe fedd 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801765a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	3301      	adds	r3, #1
 8017660:	603b      	str	r3, [r7, #0]
        break;
 8017662:	e159      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	2b46      	cmp	r3, #70	; 0x46
 801766a:	d103      	bne.n	8017674 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 801766c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801766e:	f043 0320 	orr.w	r3, r3, #32
 8017672:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8017674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017678:	3307      	adds	r3, #7
 801767a:	f023 0307 	bic.w	r3, r3, #7
 801767e:	f103 0208 	add.w	r2, r3, #8
 8017682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017686:	ed93 7b00 	vldr	d7, [r3]
 801768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801768c:	9302      	str	r3, [sp, #8]
 801768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017690:	9301      	str	r3, [sp, #4]
 8017692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017694:	9300      	str	r3, [sp, #0]
 8017696:	eeb0 0a47 	vmov.f32	s0, s14
 801769a:	eef0 0a67 	vmov.f32	s1, s15
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80176a2:	68b9      	ldr	r1, [r7, #8]
 80176a4:	68f8      	ldr	r0, [r7, #12]
 80176a6:	f7fe ff8b 	bl	80165c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 80176aa:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	3301      	adds	r3, #1
 80176b0:	603b      	str	r3, [r7, #0]
        break;
 80176b2:	e131      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80176b4:	683b      	ldr	r3, [r7, #0]
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	2b67      	cmp	r3, #103	; 0x67
 80176ba:	d003      	beq.n	80176c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b47      	cmp	r3, #71	; 0x47
 80176c2:	d103      	bne.n	80176cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 80176c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80176ca:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	781b      	ldrb	r3, [r3, #0]
 80176d0:	2b45      	cmp	r3, #69	; 0x45
 80176d2:	d003      	beq.n	80176dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	781b      	ldrb	r3, [r3, #0]
 80176d8:	2b47      	cmp	r3, #71	; 0x47
 80176da:	d103      	bne.n	80176e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 80176dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176de:	f043 0320 	orr.w	r3, r3, #32
 80176e2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80176e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80176e8:	3307      	adds	r3, #7
 80176ea:	f023 0307 	bic.w	r3, r3, #7
 80176ee:	f103 0208 	add.w	r2, r3, #8
 80176f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80176f6:	ed93 7b00 	vldr	d7, [r3]
 80176fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80176fc:	9302      	str	r3, [sp, #8]
 80176fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017700:	9301      	str	r3, [sp, #4]
 8017702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	eeb0 0a47 	vmov.f32	s0, s14
 801770a:	eef0 0a67 	vmov.f32	s1, s15
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017712:	68b9      	ldr	r1, [r7, #8]
 8017714:	68f8      	ldr	r0, [r7, #12]
 8017716:	f7ff f9b7 	bl	8016a88 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 801771a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	3301      	adds	r3, #1
 8017720:	603b      	str	r3, [r7, #0]
        break;
 8017722:	e0f9      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8017724:	2301      	movs	r3, #1
 8017726:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8017728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801772a:	f003 0302 	and.w	r3, r3, #2
 801772e:	2b00      	cmp	r3, #0
 8017730:	d113      	bne.n	801775a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8017732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017734:	1c5a      	adds	r2, r3, #1
 8017736:	63fa      	str	r2, [r7, #60]	; 0x3c
 8017738:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801773a:	429a      	cmp	r2, r3
 801773c:	bf8c      	ite	hi
 801773e:	2301      	movhi	r3, #1
 8017740:	2300      	movls	r3, #0
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b00      	cmp	r3, #0
 8017746:	d008      	beq.n	801775a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8017748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801774a:	1c53      	adds	r3, r2, #1
 801774c:	647b      	str	r3, [r7, #68]	; 0x44
 801774e:	68fe      	ldr	r6, [r7, #12]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	68b9      	ldr	r1, [r7, #8]
 8017754:	2020      	movs	r0, #32
 8017756:	47b0      	blx	r6
          while (l++ < width) {
 8017758:	e7eb      	b.n	8017732 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801775a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801775e:	1d1a      	adds	r2, r3, #4
 8017760:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	b2d8      	uxtb	r0, r3
 8017768:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801776a:	1c53      	adds	r3, r2, #1
 801776c:	647b      	str	r3, [r7, #68]	; 0x44
 801776e:	68fe      	ldr	r6, [r7, #12]
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	68b9      	ldr	r1, [r7, #8]
 8017774:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8017776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017778:	f003 0302 	and.w	r3, r3, #2
 801777c:	2b00      	cmp	r3, #0
 801777e:	d013      	beq.n	80177a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8017780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017782:	1c5a      	adds	r2, r3, #1
 8017784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8017786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017788:	429a      	cmp	r2, r3
 801778a:	bf8c      	ite	hi
 801778c:	2301      	movhi	r3, #1
 801778e:	2300      	movls	r3, #0
 8017790:	b2db      	uxtb	r3, r3
 8017792:	2b00      	cmp	r3, #0
 8017794:	d008      	beq.n	80177a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8017796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017798:	1c53      	adds	r3, r2, #1
 801779a:	647b      	str	r3, [r7, #68]	; 0x44
 801779c:	68fe      	ldr	r6, [r7, #12]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	68b9      	ldr	r1, [r7, #8]
 80177a2:	2020      	movs	r0, #32
 80177a4:	47b0      	blx	r6
          while (l++ < width) {
 80177a6:	e7eb      	b.n	8017780 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	3301      	adds	r3, #1
 80177ac:	603b      	str	r3, [r7, #0]
        break;
 80177ae:	e0b3      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80177b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80177b4:	1d1a      	adds	r2, r3, #4
 80177b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80177be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d001      	beq.n	80177c8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 80177c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177c6:	e001      	b.n	80177cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 80177c8:	f04f 33ff 	mov.w	r3, #4294967295
 80177cc:	4619      	mov	r1, r3
 80177ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80177d0:	f7fe fc9a 	bl	8016108 <_ZL10_strnlen_sPKcj>
 80177d4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80177d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d007      	beq.n	80177f0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 80177e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80177e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d201      	bcs.n	80177ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 80177e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177ea:	e000      	b.n	80177ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 80177ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80177ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80177f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177f2:	f003 0302 	and.w	r3, r3, #2
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d113      	bne.n	8017822 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 80177fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	637a      	str	r2, [r7, #52]	; 0x34
 8017800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017802:	429a      	cmp	r2, r3
 8017804:	bf8c      	ite	hi
 8017806:	2301      	movhi	r3, #1
 8017808:	2300      	movls	r3, #0
 801780a:	b2db      	uxtb	r3, r3
 801780c:	2b00      	cmp	r3, #0
 801780e:	d008      	beq.n	8017822 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8017810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017812:	1c53      	adds	r3, r2, #1
 8017814:	647b      	str	r3, [r7, #68]	; 0x44
 8017816:	68fe      	ldr	r6, [r7, #12]
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	68b9      	ldr	r1, [r7, #8]
 801781c:	2020      	movs	r0, #32
 801781e:	47b0      	blx	r6
          while (l++ < width) {
 8017820:	e7eb      	b.n	80177fa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8017822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d00b      	beq.n	8017842 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 801782a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801782c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017830:	2b00      	cmp	r3, #0
 8017832:	d004      	beq.n	801783e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8017834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017836:	1e5a      	subs	r2, r3, #1
 8017838:	64fa      	str	r2, [r7, #76]	; 0x4c
 801783a:	2b00      	cmp	r3, #0
 801783c:	d001      	beq.n	8017842 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 801783e:	2301      	movs	r3, #1
 8017840:	e000      	b.n	8017844 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8017842:	2300      	movs	r3, #0
 8017844:	2b00      	cmp	r3, #0
 8017846:	d00b      	beq.n	8017860 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8017848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801784a:	1c5a      	adds	r2, r3, #1
 801784c:	63ba      	str	r2, [r7, #56]	; 0x38
 801784e:	7818      	ldrb	r0, [r3, #0]
 8017850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017852:	1c53      	adds	r3, r2, #1
 8017854:	647b      	str	r3, [r7, #68]	; 0x44
 8017856:	68fe      	ldr	r6, [r7, #12]
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	68b9      	ldr	r1, [r7, #8]
 801785c:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801785e:	e7e0      	b.n	8017822 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8017860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017862:	f003 0302 	and.w	r3, r3, #2
 8017866:	2b00      	cmp	r3, #0
 8017868:	d013      	beq.n	8017892 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 801786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801786c:	1c5a      	adds	r2, r3, #1
 801786e:	637a      	str	r2, [r7, #52]	; 0x34
 8017870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017872:	429a      	cmp	r2, r3
 8017874:	bf8c      	ite	hi
 8017876:	2301      	movhi	r3, #1
 8017878:	2300      	movls	r3, #0
 801787a:	b2db      	uxtb	r3, r3
 801787c:	2b00      	cmp	r3, #0
 801787e:	d008      	beq.n	8017892 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8017880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017882:	1c53      	adds	r3, r2, #1
 8017884:	647b      	str	r3, [r7, #68]	; 0x44
 8017886:	68fe      	ldr	r6, [r7, #12]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	68b9      	ldr	r1, [r7, #8]
 801788c:	2020      	movs	r0, #32
 801788e:	47b0      	blx	r6
          while (l++ < width) {
 8017890:	e7eb      	b.n	801786a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	3301      	adds	r3, #1
 8017896:	603b      	str	r3, [r7, #0]
        break;
 8017898:	e03e      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 801789a:	2308      	movs	r3, #8
 801789c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 801789e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178a0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80178a4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80178a6:	2300      	movs	r3, #0
 80178a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80178ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80178b0:	1d1a      	adds	r2, r3, #4
 80178b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	461a      	mov	r2, r3
 80178ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178bc:	9305      	str	r3, [sp, #20]
 80178be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178c0:	9304      	str	r3, [sp, #16]
 80178c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178c4:	9303      	str	r3, [sp, #12]
 80178c6:	2310      	movs	r3, #16
 80178c8:	9302      	str	r3, [sp, #8]
 80178ca:	2300      	movs	r3, #0
 80178cc:	9301      	str	r3, [sp, #4]
 80178ce:	9200      	str	r2, [sp, #0]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178d4:	68b9      	ldr	r1, [r7, #8]
 80178d6:	68f8      	ldr	r0, [r7, #12]
 80178d8:	f7fe fd9c 	bl	8016414 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80178dc:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	3301      	adds	r3, #1
 80178e2:	603b      	str	r3, [r7, #0]
        break;
 80178e4:	e018      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80178e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80178e8:	1c53      	adds	r3, r2, #1
 80178ea:	647b      	str	r3, [r7, #68]	; 0x44
 80178ec:	68fe      	ldr	r6, [r7, #12]
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	68b9      	ldr	r1, [r7, #8]
 80178f2:	2025      	movs	r0, #37	; 0x25
 80178f4:	47b0      	blx	r6
        format++;
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	3301      	adds	r3, #1
 80178fa:	603b      	str	r3, [r7, #0]
        break;
 80178fc:	e00c      	b.n	8017918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	7818      	ldrb	r0, [r3, #0]
 8017902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017904:	1c53      	adds	r3, r2, #1
 8017906:	647b      	str	r3, [r7, #68]	; 0x44
 8017908:	68fe      	ldr	r6, [r7, #12]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	68b9      	ldr	r1, [r7, #8]
 801790e:	47b0      	blx	r6
        format++;
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	3301      	adds	r3, #1
 8017914:	603b      	str	r3, [r7, #0]
        break;
 8017916:	bf00      	nop
  while (*format)
 8017918:	f7ff bb4d 	b.w	8016fb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801791c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	429a      	cmp	r2, r3
 8017922:	d302      	bcc.n	801792a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	1e5a      	subs	r2, r3, #1
 8017928:	e000      	b.n	801792c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 801792a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801792c:	68fc      	ldr	r4, [r7, #12]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68b9      	ldr	r1, [r7, #8]
 8017932:	2000      	movs	r0, #0
 8017934:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8017936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8017938:	4618      	mov	r0, r3
 801793a:	375c      	adds	r7, #92	; 0x5c
 801793c:	46bd      	mov	sp, r7
 801793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017942:	bf00      	nop

08017944 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8017944:	b40f      	push	{r0, r1, r2, r3}
 8017946:	b580      	push	{r7, lr}
 8017948:	b086      	sub	sp, #24
 801794a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 801794c:	f107 031c 	add.w	r3, r7, #28
 8017950:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8017952:	1d39      	adds	r1, r7, #4
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	9300      	str	r3, [sp, #0]
 8017958:	69bb      	ldr	r3, [r7, #24]
 801795a:	f04f 32ff 	mov.w	r2, #4294967295
 801795e:	4806      	ldr	r0, [pc, #24]	; (8017978 <printf_+0x34>)
 8017960:	f7ff fb1a 	bl	8016f98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8017964:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8017966:	68fb      	ldr	r3, [r7, #12]
}
 8017968:	4618      	mov	r0, r3
 801796a:	3710      	adds	r7, #16
 801796c:	46bd      	mov	sp, r7
 801796e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017972:	b004      	add	sp, #16
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	080160e3 	.word	0x080160e3

0801797c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 801797c:	b480      	push	{r7}
 801797e:	b083      	sub	sp, #12
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017984:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017988:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 801798c:	f003 0301 	and.w	r3, r3, #1
 8017990:	2b00      	cmp	r3, #0
 8017992:	d009      	beq.n	80179a8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8017994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017998:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 801799c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d001      	beq.n	80179a8 <ITM_SendChar+0x2c>
 80179a4:	2301      	movs	r3, #1
 80179a6:	e000      	b.n	80179aa <ITM_SendChar+0x2e>
 80179a8:	2300      	movs	r3, #0
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d010      	beq.n	80179d0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80179ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	bf0c      	ite	eq
 80179b8:	2301      	moveq	r3, #1
 80179ba:	2300      	movne	r3, #0
 80179bc:	b2db      	uxtb	r3, r3
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <ITM_SendChar+0x4a>
    {
      __NOP();
 80179c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80179c4:	e7f3      	b.n	80179ae <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80179c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80179ca:	687a      	ldr	r2, [r7, #4]
 80179cc:	b2d2      	uxtb	r2, r2
 80179ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80179d0:	687b      	ldr	r3, [r7, #4]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	370c      	adds	r7, #12
 80179d6:	46bd      	mov	sp, r7
 80179d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179dc:	4770      	bx	lr

080179de <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 80179de:	b580      	push	{r7, lr}
 80179e0:	b082      	sub	sp, #8
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	4603      	mov	r3, r0
 80179e6:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 80179e8:	79fb      	ldrb	r3, [r7, #7]
 80179ea:	4618      	mov	r0, r3
 80179ec:	f7ff ffc6 	bl	801797c <ITM_SendChar>
}
 80179f0:	bf00      	nop
 80179f2:	3708      	adds	r7, #8
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <__NVIC_SetPriority>:
{
 80179f8:	b480      	push	{r7}
 80179fa:	b083      	sub	sp, #12
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	4603      	mov	r3, r0
 8017a00:	6039      	str	r1, [r7, #0]
 8017a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	db0a      	blt.n	8017a22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017a0c:	683b      	ldr	r3, [r7, #0]
 8017a0e:	b2da      	uxtb	r2, r3
 8017a10:	490c      	ldr	r1, [pc, #48]	; (8017a44 <__NVIC_SetPriority+0x4c>)
 8017a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017a16:	0112      	lsls	r2, r2, #4
 8017a18:	b2d2      	uxtb	r2, r2
 8017a1a:	440b      	add	r3, r1
 8017a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017a20:	e00a      	b.n	8017a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	b2da      	uxtb	r2, r3
 8017a26:	4908      	ldr	r1, [pc, #32]	; (8017a48 <__NVIC_SetPriority+0x50>)
 8017a28:	79fb      	ldrb	r3, [r7, #7]
 8017a2a:	f003 030f 	and.w	r3, r3, #15
 8017a2e:	3b04      	subs	r3, #4
 8017a30:	0112      	lsls	r2, r2, #4
 8017a32:	b2d2      	uxtb	r2, r2
 8017a34:	440b      	add	r3, r1
 8017a36:	761a      	strb	r2, [r3, #24]
}
 8017a38:	bf00      	nop
 8017a3a:	370c      	adds	r7, #12
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a42:	4770      	bx	lr
 8017a44:	e000e100 	.word	0xe000e100
 8017a48:	e000ed00 	.word	0xe000ed00

08017a4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017a50:	4b05      	ldr	r3, [pc, #20]	; (8017a68 <SysTick_Handler+0x1c>)
 8017a52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017a54:	f003 f8a8 	bl	801aba8 <xTaskGetSchedulerState>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	2b01      	cmp	r3, #1
 8017a5c:	d001      	beq.n	8017a62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017a5e:	f004 f8d3 	bl	801bc08 <xPortSysTickHandler>
  }
}
 8017a62:	bf00      	nop
 8017a64:	bd80      	pop	{r7, pc}
 8017a66:	bf00      	nop
 8017a68:	e000e010 	.word	0xe000e010

08017a6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017a70:	2100      	movs	r1, #0
 8017a72:	f06f 0004 	mvn.w	r0, #4
 8017a76:	f7ff ffbf 	bl	80179f8 <__NVIC_SetPriority>
#endif
}
 8017a7a:	bf00      	nop
 8017a7c:	bd80      	pop	{r7, pc}
	...

08017a80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017a80:	b480      	push	{r7}
 8017a82:	b083      	sub	sp, #12
 8017a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a86:	f3ef 8305 	mrs	r3, IPSR
 8017a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8017a8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d003      	beq.n	8017a9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017a92:	f06f 0305 	mvn.w	r3, #5
 8017a96:	607b      	str	r3, [r7, #4]
 8017a98:	e00c      	b.n	8017ab4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017a9a:	4b0a      	ldr	r3, [pc, #40]	; (8017ac4 <osKernelInitialize+0x44>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d105      	bne.n	8017aae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017aa2:	4b08      	ldr	r3, [pc, #32]	; (8017ac4 <osKernelInitialize+0x44>)
 8017aa4:	2201      	movs	r2, #1
 8017aa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	607b      	str	r3, [r7, #4]
 8017aac:	e002      	b.n	8017ab4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017aae:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017ab4:	687b      	ldr	r3, [r7, #4]
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	370c      	adds	r7, #12
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
 8017ac2:	bf00      	nop
 8017ac4:	200017d0 	.word	0x200017d0

08017ac8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b082      	sub	sp, #8
 8017acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017ace:	f3ef 8305 	mrs	r3, IPSR
 8017ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8017ad4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d003      	beq.n	8017ae2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8017ada:	f06f 0305 	mvn.w	r3, #5
 8017ade:	607b      	str	r3, [r7, #4]
 8017ae0:	e010      	b.n	8017b04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017ae2:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <osKernelStart+0x48>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	2b01      	cmp	r3, #1
 8017ae8:	d109      	bne.n	8017afe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017aea:	f7ff ffbf 	bl	8017a6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017aee:	4b08      	ldr	r3, [pc, #32]	; (8017b10 <osKernelStart+0x48>)
 8017af0:	2202      	movs	r2, #2
 8017af2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017af4:	f002 fb98 	bl	801a228 <vTaskStartScheduler>
      stat = osOK;
 8017af8:	2300      	movs	r3, #0
 8017afa:	607b      	str	r3, [r7, #4]
 8017afc:	e002      	b.n	8017b04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017afe:	f04f 33ff 	mov.w	r3, #4294967295
 8017b02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017b04:	687b      	ldr	r3, [r7, #4]
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3708      	adds	r7, #8
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	200017d0 	.word	0x200017d0

08017b14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b08e      	sub	sp, #56	; 0x38
 8017b18:	af04      	add	r7, sp, #16
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017b20:	2300      	movs	r3, #0
 8017b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b24:	f3ef 8305 	mrs	r3, IPSR
 8017b28:	617b      	str	r3, [r7, #20]
  return(result);
 8017b2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d17e      	bne.n	8017c2e <osThreadNew+0x11a>
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d07b      	beq.n	8017c2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017b36:	2380      	movs	r3, #128	; 0x80
 8017b38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017b3a:	2318      	movs	r3, #24
 8017b3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017b42:	f04f 33ff 	mov.w	r3, #4294967295
 8017b46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d045      	beq.n	8017bda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d002      	beq.n	8017b5c <osThreadNew+0x48>
        name = attr->name;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	699b      	ldr	r3, [r3, #24]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d002      	beq.n	8017b6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	699b      	ldr	r3, [r3, #24]
 8017b68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d008      	beq.n	8017b82 <osThreadNew+0x6e>
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	2b38      	cmp	r3, #56	; 0x38
 8017b74:	d805      	bhi.n	8017b82 <osThreadNew+0x6e>
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	685b      	ldr	r3, [r3, #4]
 8017b7a:	f003 0301 	and.w	r3, r3, #1
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d001      	beq.n	8017b86 <osThreadNew+0x72>
        return (NULL);
 8017b82:	2300      	movs	r3, #0
 8017b84:	e054      	b.n	8017c30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	695b      	ldr	r3, [r3, #20]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d003      	beq.n	8017b96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	695b      	ldr	r3, [r3, #20]
 8017b92:	089b      	lsrs	r3, r3, #2
 8017b94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	689b      	ldr	r3, [r3, #8]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d00e      	beq.n	8017bbc <osThreadNew+0xa8>
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	68db      	ldr	r3, [r3, #12]
 8017ba2:	2bbf      	cmp	r3, #191	; 0xbf
 8017ba4:	d90a      	bls.n	8017bbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d006      	beq.n	8017bbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	695b      	ldr	r3, [r3, #20]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d002      	beq.n	8017bbc <osThreadNew+0xa8>
        mem = 1;
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	61bb      	str	r3, [r7, #24]
 8017bba:	e010      	b.n	8017bde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	689b      	ldr	r3, [r3, #8]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d10c      	bne.n	8017bde <osThreadNew+0xca>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	68db      	ldr	r3, [r3, #12]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d108      	bne.n	8017bde <osThreadNew+0xca>
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	691b      	ldr	r3, [r3, #16]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d104      	bne.n	8017bde <osThreadNew+0xca>
          mem = 0;
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	61bb      	str	r3, [r7, #24]
 8017bd8:	e001      	b.n	8017bde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017bde:	69bb      	ldr	r3, [r7, #24]
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d110      	bne.n	8017c06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017be8:	687a      	ldr	r2, [r7, #4]
 8017bea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017bec:	9202      	str	r2, [sp, #8]
 8017bee:	9301      	str	r3, [sp, #4]
 8017bf0:	69fb      	ldr	r3, [r7, #28]
 8017bf2:	9300      	str	r3, [sp, #0]
 8017bf4:	68bb      	ldr	r3, [r7, #8]
 8017bf6:	6a3a      	ldr	r2, [r7, #32]
 8017bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017bfa:	68f8      	ldr	r0, [r7, #12]
 8017bfc:	f002 f924 	bl	8019e48 <xTaskCreateStatic>
 8017c00:	4603      	mov	r3, r0
 8017c02:	613b      	str	r3, [r7, #16]
 8017c04:	e013      	b.n	8017c2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017c06:	69bb      	ldr	r3, [r7, #24]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d110      	bne.n	8017c2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017c0c:	6a3b      	ldr	r3, [r7, #32]
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	f107 0310 	add.w	r3, r7, #16
 8017c14:	9301      	str	r3, [sp, #4]
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	9300      	str	r3, [sp, #0]
 8017c1a:	68bb      	ldr	r3, [r7, #8]
 8017c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c1e:	68f8      	ldr	r0, [r7, #12]
 8017c20:	f002 f96f 	bl	8019f02 <xTaskCreate>
 8017c24:	4603      	mov	r3, r0
 8017c26:	2b01      	cmp	r3, #1
 8017c28:	d001      	beq.n	8017c2e <osThreadNew+0x11a>
            hTask = NULL;
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017c2e:	693b      	ldr	r3, [r7, #16]
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3728      	adds	r7, #40	; 0x28
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b084      	sub	sp, #16
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017c40:	f3ef 8305 	mrs	r3, IPSR
 8017c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8017c46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d003      	beq.n	8017c54 <osDelay+0x1c>
    stat = osErrorISR;
 8017c4c:	f06f 0305 	mvn.w	r3, #5
 8017c50:	60fb      	str	r3, [r7, #12]
 8017c52:	e007      	b.n	8017c64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d002      	beq.n	8017c64 <osDelay+0x2c>
      vTaskDelay(ticks);
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f002 faae 	bl	801a1c0 <vTaskDelay>
    }
  }

  return (stat);
 8017c64:	68fb      	ldr	r3, [r7, #12]
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3710      	adds	r7, #16
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8017c6e:	b580      	push	{r7, lr}
 8017c70:	b088      	sub	sp, #32
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8017c76:	2300      	movs	r3, #0
 8017c78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017c7a:	f3ef 8305 	mrs	r3, IPSR
 8017c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017c80:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d174      	bne.n	8017d70 <osMutexNew+0x102>
    if (attr != NULL) {
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d003      	beq.n	8017c94 <osMutexNew+0x26>
      type = attr->attr_bits;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	685b      	ldr	r3, [r3, #4]
 8017c90:	61bb      	str	r3, [r7, #24]
 8017c92:	e001      	b.n	8017c98 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8017c94:	2300      	movs	r3, #0
 8017c96:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017c98:	69bb      	ldr	r3, [r7, #24]
 8017c9a:	f003 0301 	and.w	r3, r3, #1
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d002      	beq.n	8017ca8 <osMutexNew+0x3a>
      rmtx = 1U;
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	617b      	str	r3, [r7, #20]
 8017ca6:	e001      	b.n	8017cac <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017cac:	69bb      	ldr	r3, [r7, #24]
 8017cae:	f003 0308 	and.w	r3, r3, #8
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d15c      	bne.n	8017d70 <osMutexNew+0x102>
      mem = -1;
 8017cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8017cba:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d015      	beq.n	8017cee <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	689b      	ldr	r3, [r3, #8]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d006      	beq.n	8017cd8 <osMutexNew+0x6a>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	68db      	ldr	r3, [r3, #12]
 8017cce:	2b4f      	cmp	r3, #79	; 0x4f
 8017cd0:	d902      	bls.n	8017cd8 <osMutexNew+0x6a>
          mem = 1;
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	613b      	str	r3, [r7, #16]
 8017cd6:	e00c      	b.n	8017cf2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	689b      	ldr	r3, [r3, #8]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d108      	bne.n	8017cf2 <osMutexNew+0x84>
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d104      	bne.n	8017cf2 <osMutexNew+0x84>
            mem = 0;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	613b      	str	r3, [r7, #16]
 8017cec:	e001      	b.n	8017cf2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d112      	bne.n	8017d1e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8017cf8:	697b      	ldr	r3, [r7, #20]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d007      	beq.n	8017d0e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	689b      	ldr	r3, [r3, #8]
 8017d02:	4619      	mov	r1, r3
 8017d04:	2004      	movs	r0, #4
 8017d06:	f000 fd88 	bl	801881a <xQueueCreateMutexStatic>
 8017d0a:	61f8      	str	r0, [r7, #28]
 8017d0c:	e016      	b.n	8017d3c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	689b      	ldr	r3, [r3, #8]
 8017d12:	4619      	mov	r1, r3
 8017d14:	2001      	movs	r0, #1
 8017d16:	f000 fd80 	bl	801881a <xQueueCreateMutexStatic>
 8017d1a:	61f8      	str	r0, [r7, #28]
 8017d1c:	e00e      	b.n	8017d3c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d10b      	bne.n	8017d3c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017d24:	697b      	ldr	r3, [r7, #20]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d004      	beq.n	8017d34 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8017d2a:	2004      	movs	r0, #4
 8017d2c:	f000 fd5d 	bl	80187ea <xQueueCreateMutex>
 8017d30:	61f8      	str	r0, [r7, #28]
 8017d32:	e003      	b.n	8017d3c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8017d34:	2001      	movs	r0, #1
 8017d36:	f000 fd58 	bl	80187ea <xQueueCreateMutex>
 8017d3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8017d3c:	69fb      	ldr	r3, [r7, #28]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d00c      	beq.n	8017d5c <osMutexNew+0xee>
        if (attr != NULL) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d003      	beq.n	8017d50 <osMutexNew+0xe2>
          name = attr->name;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	60fb      	str	r3, [r7, #12]
 8017d4e:	e001      	b.n	8017d54 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8017d50:	2300      	movs	r3, #0
 8017d52:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8017d54:	68f9      	ldr	r1, [r7, #12]
 8017d56:	69f8      	ldr	r0, [r7, #28]
 8017d58:	f001 fc68 	bl	801962c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8017d5c:	69fb      	ldr	r3, [r7, #28]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d006      	beq.n	8017d70 <osMutexNew+0x102>
 8017d62:	697b      	ldr	r3, [r7, #20]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d003      	beq.n	8017d70 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017d68:	69fb      	ldr	r3, [r7, #28]
 8017d6a:	f043 0301 	orr.w	r3, r3, #1
 8017d6e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8017d70:	69fb      	ldr	r3, [r7, #28]
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	3720      	adds	r7, #32
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}

08017d7a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b086      	sub	sp, #24
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	6078      	str	r0, [r7, #4]
 8017d82:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f023 0301 	bic.w	r3, r3, #1
 8017d8a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f003 0301 	and.w	r3, r3, #1
 8017d92:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017d94:	2300      	movs	r3, #0
 8017d96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017d98:	f3ef 8305 	mrs	r3, IPSR
 8017d9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d9e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d003      	beq.n	8017dac <osMutexAcquire+0x32>
    stat = osErrorISR;
 8017da4:	f06f 0305 	mvn.w	r3, #5
 8017da8:	617b      	str	r3, [r7, #20]
 8017daa:	e02c      	b.n	8017e06 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d103      	bne.n	8017dba <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8017db2:	f06f 0303 	mvn.w	r3, #3
 8017db6:	617b      	str	r3, [r7, #20]
 8017db8:	e025      	b.n	8017e06 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d011      	beq.n	8017de4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8017dc0:	6839      	ldr	r1, [r7, #0]
 8017dc2:	6938      	ldr	r0, [r7, #16]
 8017dc4:	f000 fd78 	bl	80188b8 <xQueueTakeMutexRecursive>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	d01b      	beq.n	8017e06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d003      	beq.n	8017ddc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8017dd4:	f06f 0301 	mvn.w	r3, #1
 8017dd8:	617b      	str	r3, [r7, #20]
 8017dda:	e014      	b.n	8017e06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017ddc:	f06f 0302 	mvn.w	r3, #2
 8017de0:	617b      	str	r3, [r7, #20]
 8017de2:	e010      	b.n	8017e06 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8017de4:	6839      	ldr	r1, [r7, #0]
 8017de6:	6938      	ldr	r0, [r7, #16]
 8017de8:	f001 f90c 	bl	8019004 <xQueueSemaphoreTake>
 8017dec:	4603      	mov	r3, r0
 8017dee:	2b01      	cmp	r3, #1
 8017df0:	d009      	beq.n	8017e06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017df2:	683b      	ldr	r3, [r7, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d003      	beq.n	8017e00 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8017df8:	f06f 0301 	mvn.w	r3, #1
 8017dfc:	617b      	str	r3, [r7, #20]
 8017dfe:	e002      	b.n	8017e06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017e00:	f06f 0302 	mvn.w	r3, #2
 8017e04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8017e06:	697b      	ldr	r3, [r7, #20]
}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3718      	adds	r7, #24
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b086      	sub	sp, #24
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f023 0301 	bic.w	r3, r3, #1
 8017e1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f003 0301 	and.w	r3, r3, #1
 8017e26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e2c:	f3ef 8305 	mrs	r3, IPSR
 8017e30:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d003      	beq.n	8017e40 <osMutexRelease+0x30>
    stat = osErrorISR;
 8017e38:	f06f 0305 	mvn.w	r3, #5
 8017e3c:	617b      	str	r3, [r7, #20]
 8017e3e:	e01f      	b.n	8017e80 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d103      	bne.n	8017e4e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8017e46:	f06f 0303 	mvn.w	r3, #3
 8017e4a:	617b      	str	r3, [r7, #20]
 8017e4c:	e018      	b.n	8017e80 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d009      	beq.n	8017e68 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8017e54:	6938      	ldr	r0, [r7, #16]
 8017e56:	f000 fcfb 	bl	8018850 <xQueueGiveMutexRecursive>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	2b01      	cmp	r3, #1
 8017e5e:	d00f      	beq.n	8017e80 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017e60:	f06f 0302 	mvn.w	r3, #2
 8017e64:	617b      	str	r3, [r7, #20]
 8017e66:	e00b      	b.n	8017e80 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017e68:	2300      	movs	r3, #0
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	6938      	ldr	r0, [r7, #16]
 8017e70:	f000 fdc2 	bl	80189f8 <xQueueGenericSend>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d002      	beq.n	8017e80 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017e7a:	f06f 0302 	mvn.w	r3, #2
 8017e7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017e80:	697b      	ldr	r3, [r7, #20]
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3718      	adds	r7, #24
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}

08017e8a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8017e8a:	b580      	push	{r7, lr}
 8017e8c:	b08a      	sub	sp, #40	; 0x28
 8017e8e:	af02      	add	r7, sp, #8
 8017e90:	60f8      	str	r0, [r7, #12]
 8017e92:	60b9      	str	r1, [r7, #8]
 8017e94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8017e96:	2300      	movs	r3, #0
 8017e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e9a:	f3ef 8305 	mrs	r3, IPSR
 8017e9e:	613b      	str	r3, [r7, #16]
  return(result);
 8017ea0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d175      	bne.n	8017f92 <osSemaphoreNew+0x108>
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d072      	beq.n	8017f92 <osSemaphoreNew+0x108>
 8017eac:	68ba      	ldr	r2, [r7, #8]
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d86e      	bhi.n	8017f92 <osSemaphoreNew+0x108>
    mem = -1;
 8017eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d015      	beq.n	8017eec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	689b      	ldr	r3, [r3, #8]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d006      	beq.n	8017ed6 <osSemaphoreNew+0x4c>
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	68db      	ldr	r3, [r3, #12]
 8017ecc:	2b4f      	cmp	r3, #79	; 0x4f
 8017ece:	d902      	bls.n	8017ed6 <osSemaphoreNew+0x4c>
        mem = 1;
 8017ed0:	2301      	movs	r3, #1
 8017ed2:	61bb      	str	r3, [r7, #24]
 8017ed4:	e00c      	b.n	8017ef0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	689b      	ldr	r3, [r3, #8]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d108      	bne.n	8017ef0 <osSemaphoreNew+0x66>
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	68db      	ldr	r3, [r3, #12]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d104      	bne.n	8017ef0 <osSemaphoreNew+0x66>
          mem = 0;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	61bb      	str	r3, [r7, #24]
 8017eea:	e001      	b.n	8017ef0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8017eec:	2300      	movs	r3, #0
 8017eee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8017ef0:	69bb      	ldr	r3, [r7, #24]
 8017ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ef6:	d04c      	beq.n	8017f92 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	2b01      	cmp	r3, #1
 8017efc:	d128      	bne.n	8017f50 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8017efe:	69bb      	ldr	r3, [r7, #24]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d10a      	bne.n	8017f1a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	689b      	ldr	r3, [r3, #8]
 8017f08:	2203      	movs	r2, #3
 8017f0a:	9200      	str	r2, [sp, #0]
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	2100      	movs	r1, #0
 8017f10:	2001      	movs	r0, #1
 8017f12:	f000 fb7b 	bl	801860c <xQueueGenericCreateStatic>
 8017f16:	61f8      	str	r0, [r7, #28]
 8017f18:	e005      	b.n	8017f26 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8017f1a:	2203      	movs	r2, #3
 8017f1c:	2100      	movs	r1, #0
 8017f1e:	2001      	movs	r0, #1
 8017f20:	f000 fbec 	bl	80186fc <xQueueGenericCreate>
 8017f24:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d022      	beq.n	8017f72 <osSemaphoreNew+0xe8>
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d01f      	beq.n	8017f72 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017f32:	2300      	movs	r3, #0
 8017f34:	2200      	movs	r2, #0
 8017f36:	2100      	movs	r1, #0
 8017f38:	69f8      	ldr	r0, [r7, #28]
 8017f3a:	f000 fd5d 	bl	80189f8 <xQueueGenericSend>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	2b01      	cmp	r3, #1
 8017f42:	d016      	beq.n	8017f72 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8017f44:	69f8      	ldr	r0, [r7, #28]
 8017f46:	f001 fa25 	bl	8019394 <vQueueDelete>
            hSemaphore = NULL;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	61fb      	str	r3, [r7, #28]
 8017f4e:	e010      	b.n	8017f72 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d108      	bne.n	8017f68 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	689b      	ldr	r3, [r3, #8]
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	68b9      	ldr	r1, [r7, #8]
 8017f5e:	68f8      	ldr	r0, [r7, #12]
 8017f60:	f000 fce0 	bl	8018924 <xQueueCreateCountingSemaphoreStatic>
 8017f64:	61f8      	str	r0, [r7, #28]
 8017f66:	e004      	b.n	8017f72 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8017f68:	68b9      	ldr	r1, [r7, #8]
 8017f6a:	68f8      	ldr	r0, [r7, #12]
 8017f6c:	f000 fd11 	bl	8018992 <xQueueCreateCountingSemaphore>
 8017f70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d00c      	beq.n	8017f92 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d003      	beq.n	8017f86 <osSemaphoreNew+0xfc>
          name = attr->name;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	617b      	str	r3, [r7, #20]
 8017f84:	e001      	b.n	8017f8a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8017f86:	2300      	movs	r3, #0
 8017f88:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8017f8a:	6979      	ldr	r1, [r7, #20]
 8017f8c:	69f8      	ldr	r0, [r7, #28]
 8017f8e:	f001 fb4d 	bl	801962c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8017f92:	69fb      	ldr	r3, [r7, #28]
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	3720      	adds	r7, #32
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b086      	sub	sp, #24
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8017faa:	2300      	movs	r3, #0
 8017fac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017fae:	693b      	ldr	r3, [r7, #16]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d103      	bne.n	8017fbc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8017fb4:	f06f 0303 	mvn.w	r3, #3
 8017fb8:	617b      	str	r3, [r7, #20]
 8017fba:	e039      	b.n	8018030 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017fbc:	f3ef 8305 	mrs	r3, IPSR
 8017fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8017fc2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d022      	beq.n	801800e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d003      	beq.n	8017fd6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8017fce:	f06f 0303 	mvn.w	r3, #3
 8017fd2:	617b      	str	r3, [r7, #20]
 8017fd4:	e02c      	b.n	8018030 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8017fda:	f107 0308 	add.w	r3, r7, #8
 8017fde:	461a      	mov	r2, r3
 8017fe0:	2100      	movs	r1, #0
 8017fe2:	6938      	ldr	r0, [r7, #16]
 8017fe4:	f001 f91a 	bl	801921c <xQueueReceiveFromISR>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b01      	cmp	r3, #1
 8017fec:	d003      	beq.n	8017ff6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8017fee:	f06f 0302 	mvn.w	r3, #2
 8017ff2:	617b      	str	r3, [r7, #20]
 8017ff4:	e01c      	b.n	8018030 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d019      	beq.n	8018030 <osSemaphoreAcquire+0x94>
 8017ffc:	4b0f      	ldr	r3, [pc, #60]	; (801803c <osSemaphoreAcquire+0xa0>)
 8017ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018002:	601a      	str	r2, [r3, #0]
 8018004:	f3bf 8f4f 	dsb	sy
 8018008:	f3bf 8f6f 	isb	sy
 801800c:	e010      	b.n	8018030 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801800e:	6839      	ldr	r1, [r7, #0]
 8018010:	6938      	ldr	r0, [r7, #16]
 8018012:	f000 fff7 	bl	8019004 <xQueueSemaphoreTake>
 8018016:	4603      	mov	r3, r0
 8018018:	2b01      	cmp	r3, #1
 801801a:	d009      	beq.n	8018030 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801801c:	683b      	ldr	r3, [r7, #0]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d003      	beq.n	801802a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8018022:	f06f 0301 	mvn.w	r3, #1
 8018026:	617b      	str	r3, [r7, #20]
 8018028:	e002      	b.n	8018030 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801802a:	f06f 0302 	mvn.w	r3, #2
 801802e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8018030:	697b      	ldr	r3, [r7, #20]
}
 8018032:	4618      	mov	r0, r3
 8018034:	3718      	adds	r7, #24
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	e000ed04 	.word	0xe000ed04

08018040 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8018040:	b580      	push	{r7, lr}
 8018042:	b086      	sub	sp, #24
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801804c:	2300      	movs	r3, #0
 801804e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d103      	bne.n	801805e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8018056:	f06f 0303 	mvn.w	r3, #3
 801805a:	617b      	str	r3, [r7, #20]
 801805c:	e02c      	b.n	80180b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801805e:	f3ef 8305 	mrs	r3, IPSR
 8018062:	60fb      	str	r3, [r7, #12]
  return(result);
 8018064:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018066:	2b00      	cmp	r3, #0
 8018068:	d01a      	beq.n	80180a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801806a:	2300      	movs	r3, #0
 801806c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801806e:	f107 0308 	add.w	r3, r7, #8
 8018072:	4619      	mov	r1, r3
 8018074:	6938      	ldr	r0, [r7, #16]
 8018076:	f000 fe58 	bl	8018d2a <xQueueGiveFromISR>
 801807a:	4603      	mov	r3, r0
 801807c:	2b01      	cmp	r3, #1
 801807e:	d003      	beq.n	8018088 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8018080:	f06f 0302 	mvn.w	r3, #2
 8018084:	617b      	str	r3, [r7, #20]
 8018086:	e017      	b.n	80180b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d014      	beq.n	80180b8 <osSemaphoreRelease+0x78>
 801808e:	4b0d      	ldr	r3, [pc, #52]	; (80180c4 <osSemaphoreRelease+0x84>)
 8018090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018094:	601a      	str	r2, [r3, #0]
 8018096:	f3bf 8f4f 	dsb	sy
 801809a:	f3bf 8f6f 	isb	sy
 801809e:	e00b      	b.n	80180b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80180a0:	2300      	movs	r3, #0
 80180a2:	2200      	movs	r2, #0
 80180a4:	2100      	movs	r1, #0
 80180a6:	6938      	ldr	r0, [r7, #16]
 80180a8:	f000 fca6 	bl	80189f8 <xQueueGenericSend>
 80180ac:	4603      	mov	r3, r0
 80180ae:	2b01      	cmp	r3, #1
 80180b0:	d002      	beq.n	80180b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80180b2:	f06f 0302 	mvn.w	r3, #2
 80180b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80180b8:	697b      	ldr	r3, [r7, #20]
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3718      	adds	r7, #24
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
 80180c2:	bf00      	nop
 80180c4:	e000ed04 	.word	0xe000ed04

080180c8 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b086      	sub	sp, #24
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80180d4:	693b      	ldr	r3, [r7, #16]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d102      	bne.n	80180e0 <osSemaphoreGetCount+0x18>
    count = 0U;
 80180da:	2300      	movs	r3, #0
 80180dc:	617b      	str	r3, [r7, #20]
 80180de:	e00e      	b.n	80180fe <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80180e0:	f3ef 8305 	mrs	r3, IPSR
 80180e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80180e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d004      	beq.n	80180f6 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80180ec:	6938      	ldr	r0, [r7, #16]
 80180ee:	f001 f933 	bl	8019358 <uxQueueMessagesWaitingFromISR>
 80180f2:	6178      	str	r0, [r7, #20]
 80180f4:	e003      	b.n	80180fe <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80180f6:	6938      	ldr	r0, [r7, #16]
 80180f8:	f001 f910 	bl	801931c <uxQueueMessagesWaiting>
 80180fc:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80180fe:	697b      	ldr	r3, [r7, #20]
}
 8018100:	4618      	mov	r0, r3
 8018102:	3718      	adds	r7, #24
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}

08018108 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018108:	b580      	push	{r7, lr}
 801810a:	b08a      	sub	sp, #40	; 0x28
 801810c:	af02      	add	r7, sp, #8
 801810e:	60f8      	str	r0, [r7, #12]
 8018110:	60b9      	str	r1, [r7, #8]
 8018112:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8018114:	2300      	movs	r3, #0
 8018116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018118:	f3ef 8305 	mrs	r3, IPSR
 801811c:	613b      	str	r3, [r7, #16]
  return(result);
 801811e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018120:	2b00      	cmp	r3, #0
 8018122:	d15f      	bne.n	80181e4 <osMessageQueueNew+0xdc>
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d05c      	beq.n	80181e4 <osMessageQueueNew+0xdc>
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d059      	beq.n	80181e4 <osMessageQueueNew+0xdc>
    mem = -1;
 8018130:	f04f 33ff 	mov.w	r3, #4294967295
 8018134:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d029      	beq.n	8018190 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	689b      	ldr	r3, [r3, #8]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d012      	beq.n	801816a <osMessageQueueNew+0x62>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	68db      	ldr	r3, [r3, #12]
 8018148:	2b4f      	cmp	r3, #79	; 0x4f
 801814a:	d90e      	bls.n	801816a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018150:	2b00      	cmp	r3, #0
 8018152:	d00a      	beq.n	801816a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	695a      	ldr	r2, [r3, #20]
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	68b9      	ldr	r1, [r7, #8]
 801815c:	fb01 f303 	mul.w	r3, r1, r3
 8018160:	429a      	cmp	r2, r3
 8018162:	d302      	bcc.n	801816a <osMessageQueueNew+0x62>
        mem = 1;
 8018164:	2301      	movs	r3, #1
 8018166:	61bb      	str	r3, [r7, #24]
 8018168:	e014      	b.n	8018194 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	689b      	ldr	r3, [r3, #8]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d110      	bne.n	8018194 <osMessageQueueNew+0x8c>
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d10c      	bne.n	8018194 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801817e:	2b00      	cmp	r3, #0
 8018180:	d108      	bne.n	8018194 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	695b      	ldr	r3, [r3, #20]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d104      	bne.n	8018194 <osMessageQueueNew+0x8c>
          mem = 0;
 801818a:	2300      	movs	r3, #0
 801818c:	61bb      	str	r3, [r7, #24]
 801818e:	e001      	b.n	8018194 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8018190:	2300      	movs	r3, #0
 8018192:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018194:	69bb      	ldr	r3, [r7, #24]
 8018196:	2b01      	cmp	r3, #1
 8018198:	d10b      	bne.n	80181b2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	691a      	ldr	r2, [r3, #16]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	689b      	ldr	r3, [r3, #8]
 80181a2:	2100      	movs	r1, #0
 80181a4:	9100      	str	r1, [sp, #0]
 80181a6:	68b9      	ldr	r1, [r7, #8]
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	f000 fa2f 	bl	801860c <xQueueGenericCreateStatic>
 80181ae:	61f8      	str	r0, [r7, #28]
 80181b0:	e008      	b.n	80181c4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80181b2:	69bb      	ldr	r3, [r7, #24]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d105      	bne.n	80181c4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80181b8:	2200      	movs	r2, #0
 80181ba:	68b9      	ldr	r1, [r7, #8]
 80181bc:	68f8      	ldr	r0, [r7, #12]
 80181be:	f000 fa9d 	bl	80186fc <xQueueGenericCreate>
 80181c2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80181c4:	69fb      	ldr	r3, [r7, #28]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d00c      	beq.n	80181e4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d003      	beq.n	80181d8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	617b      	str	r3, [r7, #20]
 80181d6:	e001      	b.n	80181dc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80181d8:	2300      	movs	r3, #0
 80181da:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80181dc:	6979      	ldr	r1, [r7, #20]
 80181de:	69f8      	ldr	r0, [r7, #28]
 80181e0:	f001 fa24 	bl	801962c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80181e4:	69fb      	ldr	r3, [r7, #28]
}
 80181e6:	4618      	mov	r0, r3
 80181e8:	3720      	adds	r7, #32
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}
	...

080181f0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b088      	sub	sp, #32
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	603b      	str	r3, [r7, #0]
 80181fc:	4613      	mov	r3, r2
 80181fe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018204:	2300      	movs	r3, #0
 8018206:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018208:	f3ef 8305 	mrs	r3, IPSR
 801820c:	617b      	str	r3, [r7, #20]
  return(result);
 801820e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8018210:	2b00      	cmp	r3, #0
 8018212:	d028      	beq.n	8018266 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018214:	69bb      	ldr	r3, [r7, #24]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d005      	beq.n	8018226 <osMessageQueuePut+0x36>
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d002      	beq.n	8018226 <osMessageQueuePut+0x36>
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d003      	beq.n	801822e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8018226:	f06f 0303 	mvn.w	r3, #3
 801822a:	61fb      	str	r3, [r7, #28]
 801822c:	e038      	b.n	80182a0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801822e:	2300      	movs	r3, #0
 8018230:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018232:	f107 0210 	add.w	r2, r7, #16
 8018236:	2300      	movs	r3, #0
 8018238:	68b9      	ldr	r1, [r7, #8]
 801823a:	69b8      	ldr	r0, [r7, #24]
 801823c:	f000 fcda 	bl	8018bf4 <xQueueGenericSendFromISR>
 8018240:	4603      	mov	r3, r0
 8018242:	2b01      	cmp	r3, #1
 8018244:	d003      	beq.n	801824e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8018246:	f06f 0302 	mvn.w	r3, #2
 801824a:	61fb      	str	r3, [r7, #28]
 801824c:	e028      	b.n	80182a0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d025      	beq.n	80182a0 <osMessageQueuePut+0xb0>
 8018254:	4b15      	ldr	r3, [pc, #84]	; (80182ac <osMessageQueuePut+0xbc>)
 8018256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801825a:	601a      	str	r2, [r3, #0]
 801825c:	f3bf 8f4f 	dsb	sy
 8018260:	f3bf 8f6f 	isb	sy
 8018264:	e01c      	b.n	80182a0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018266:	69bb      	ldr	r3, [r7, #24]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d002      	beq.n	8018272 <osMessageQueuePut+0x82>
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d103      	bne.n	801827a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8018272:	f06f 0303 	mvn.w	r3, #3
 8018276:	61fb      	str	r3, [r7, #28]
 8018278:	e012      	b.n	80182a0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801827a:	2300      	movs	r3, #0
 801827c:	683a      	ldr	r2, [r7, #0]
 801827e:	68b9      	ldr	r1, [r7, #8]
 8018280:	69b8      	ldr	r0, [r7, #24]
 8018282:	f000 fbb9 	bl	80189f8 <xQueueGenericSend>
 8018286:	4603      	mov	r3, r0
 8018288:	2b01      	cmp	r3, #1
 801828a:	d009      	beq.n	80182a0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d003      	beq.n	801829a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8018292:	f06f 0301 	mvn.w	r3, #1
 8018296:	61fb      	str	r3, [r7, #28]
 8018298:	e002      	b.n	80182a0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801829a:	f06f 0302 	mvn.w	r3, #2
 801829e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80182a0:	69fb      	ldr	r3, [r7, #28]
}
 80182a2:	4618      	mov	r0, r3
 80182a4:	3720      	adds	r7, #32
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}
 80182aa:	bf00      	nop
 80182ac:	e000ed04 	.word	0xe000ed04

080182b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b088      	sub	sp, #32
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	607a      	str	r2, [r7, #4]
 80182bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80182c2:	2300      	movs	r3, #0
 80182c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80182c6:	f3ef 8305 	mrs	r3, IPSR
 80182ca:	617b      	str	r3, [r7, #20]
  return(result);
 80182cc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d028      	beq.n	8018324 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80182d2:	69bb      	ldr	r3, [r7, #24]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d005      	beq.n	80182e4 <osMessageQueueGet+0x34>
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <osMessageQueueGet+0x34>
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d003      	beq.n	80182ec <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80182e4:	f06f 0303 	mvn.w	r3, #3
 80182e8:	61fb      	str	r3, [r7, #28]
 80182ea:	e037      	b.n	801835c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80182ec:	2300      	movs	r3, #0
 80182ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80182f0:	f107 0310 	add.w	r3, r7, #16
 80182f4:	461a      	mov	r2, r3
 80182f6:	68b9      	ldr	r1, [r7, #8]
 80182f8:	69b8      	ldr	r0, [r7, #24]
 80182fa:	f000 ff8f 	bl	801921c <xQueueReceiveFromISR>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b01      	cmp	r3, #1
 8018302:	d003      	beq.n	801830c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8018304:	f06f 0302 	mvn.w	r3, #2
 8018308:	61fb      	str	r3, [r7, #28]
 801830a:	e027      	b.n	801835c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801830c:	693b      	ldr	r3, [r7, #16]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d024      	beq.n	801835c <osMessageQueueGet+0xac>
 8018312:	4b15      	ldr	r3, [pc, #84]	; (8018368 <osMessageQueueGet+0xb8>)
 8018314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018318:	601a      	str	r2, [r3, #0]
 801831a:	f3bf 8f4f 	dsb	sy
 801831e:	f3bf 8f6f 	isb	sy
 8018322:	e01b      	b.n	801835c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018324:	69bb      	ldr	r3, [r7, #24]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d002      	beq.n	8018330 <osMessageQueueGet+0x80>
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d103      	bne.n	8018338 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8018330:	f06f 0303 	mvn.w	r3, #3
 8018334:	61fb      	str	r3, [r7, #28]
 8018336:	e011      	b.n	801835c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018338:	683a      	ldr	r2, [r7, #0]
 801833a:	68b9      	ldr	r1, [r7, #8]
 801833c:	69b8      	ldr	r0, [r7, #24]
 801833e:	f000 fd81 	bl	8018e44 <xQueueReceive>
 8018342:	4603      	mov	r3, r0
 8018344:	2b01      	cmp	r3, #1
 8018346:	d009      	beq.n	801835c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8018348:	683b      	ldr	r3, [r7, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d003      	beq.n	8018356 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801834e:	f06f 0301 	mvn.w	r3, #1
 8018352:	61fb      	str	r3, [r7, #28]
 8018354:	e002      	b.n	801835c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8018356:	f06f 0302 	mvn.w	r3, #2
 801835a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801835c:	69fb      	ldr	r3, [r7, #28]
}
 801835e:	4618      	mov	r0, r3
 8018360:	3720      	adds	r7, #32
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	e000ed04 	.word	0xe000ed04

0801836c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801836c:	b480      	push	{r7}
 801836e:	b085      	sub	sp, #20
 8018370:	af00      	add	r7, sp, #0
 8018372:	60f8      	str	r0, [r7, #12]
 8018374:	60b9      	str	r1, [r7, #8]
 8018376:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	4a07      	ldr	r2, [pc, #28]	; (8018398 <vApplicationGetIdleTaskMemory+0x2c>)
 801837c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	4a06      	ldr	r2, [pc, #24]	; (801839c <vApplicationGetIdleTaskMemory+0x30>)
 8018382:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	2280      	movs	r2, #128	; 0x80
 8018388:	601a      	str	r2, [r3, #0]
}
 801838a:	bf00      	nop
 801838c:	3714      	adds	r7, #20
 801838e:	46bd      	mov	sp, r7
 8018390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018394:	4770      	bx	lr
 8018396:	bf00      	nop
 8018398:	200017d4 	.word	0x200017d4
 801839c:	20001894 	.word	0x20001894

080183a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80183a0:	b480      	push	{r7}
 80183a2:	b085      	sub	sp, #20
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	4a07      	ldr	r2, [pc, #28]	; (80183cc <vApplicationGetTimerTaskMemory+0x2c>)
 80183b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	4a06      	ldr	r2, [pc, #24]	; (80183d0 <vApplicationGetTimerTaskMemory+0x30>)
 80183b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80183be:	601a      	str	r2, [r3, #0]
}
 80183c0:	bf00      	nop
 80183c2:	3714      	adds	r7, #20
 80183c4:	46bd      	mov	sp, r7
 80183c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ca:	4770      	bx	lr
 80183cc:	20001a94 	.word	0x20001a94
 80183d0:	20001b54 	.word	0x20001b54

080183d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80183d4:	b480      	push	{r7}
 80183d6:	b083      	sub	sp, #12
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	f103 0208 	add.w	r2, r3, #8
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	f04f 32ff 	mov.w	r2, #4294967295
 80183ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	f103 0208 	add.w	r2, r3, #8
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f103 0208 	add.w	r2, r3, #8
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	2200      	movs	r2, #0
 8018406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018408:	bf00      	nop
 801840a:	370c      	adds	r7, #12
 801840c:	46bd      	mov	sp, r7
 801840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018412:	4770      	bx	lr

08018414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018414:	b480      	push	{r7}
 8018416:	b083      	sub	sp, #12
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2200      	movs	r2, #0
 8018420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018422:	bf00      	nop
 8018424:	370c      	adds	r7, #12
 8018426:	46bd      	mov	sp, r7
 8018428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842c:	4770      	bx	lr

0801842e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801842e:	b480      	push	{r7}
 8018430:	b085      	sub	sp, #20
 8018432:	af00      	add	r7, sp, #0
 8018434:	6078      	str	r0, [r7, #4]
 8018436:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	68fa      	ldr	r2, [r7, #12]
 8018442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	689a      	ldr	r2, [r3, #8]
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	689b      	ldr	r3, [r3, #8]
 8018450:	683a      	ldr	r2, [r7, #0]
 8018452:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	683a      	ldr	r2, [r7, #0]
 8018458:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	1c5a      	adds	r2, r3, #1
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	601a      	str	r2, [r3, #0]
}
 801846a:	bf00      	nop
 801846c:	3714      	adds	r7, #20
 801846e:	46bd      	mov	sp, r7
 8018470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018474:	4770      	bx	lr

08018476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018476:	b480      	push	{r7}
 8018478:	b085      	sub	sp, #20
 801847a:	af00      	add	r7, sp, #0
 801847c:	6078      	str	r0, [r7, #4]
 801847e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801848c:	d103      	bne.n	8018496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	691b      	ldr	r3, [r3, #16]
 8018492:	60fb      	str	r3, [r7, #12]
 8018494:	e00c      	b.n	80184b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	3308      	adds	r3, #8
 801849a:	60fb      	str	r3, [r7, #12]
 801849c:	e002      	b.n	80184a4 <vListInsert+0x2e>
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	60fb      	str	r3, [r7, #12]
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	685b      	ldr	r3, [r3, #4]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	68ba      	ldr	r2, [r7, #8]
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d2f6      	bcs.n	801849e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	685a      	ldr	r2, [r3, #4]
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	685b      	ldr	r3, [r3, #4]
 80184bc:	683a      	ldr	r2, [r7, #0]
 80184be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	68fa      	ldr	r2, [r7, #12]
 80184c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	683a      	ldr	r2, [r7, #0]
 80184ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	1c5a      	adds	r2, r3, #1
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	601a      	str	r2, [r3, #0]
}
 80184dc:	bf00      	nop
 80184de:	3714      	adds	r7, #20
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr

080184e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80184e8:	b480      	push	{r7}
 80184ea:	b085      	sub	sp, #20
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	691b      	ldr	r3, [r3, #16]
 80184f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	685b      	ldr	r3, [r3, #4]
 80184fa:	687a      	ldr	r2, [r7, #4]
 80184fc:	6892      	ldr	r2, [r2, #8]
 80184fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	689b      	ldr	r3, [r3, #8]
 8018504:	687a      	ldr	r2, [r7, #4]
 8018506:	6852      	ldr	r2, [r2, #4]
 8018508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	687a      	ldr	r2, [r7, #4]
 8018510:	429a      	cmp	r2, r3
 8018512:	d103      	bne.n	801851c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	689a      	ldr	r2, [r3, #8]
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2200      	movs	r2, #0
 8018520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	1e5a      	subs	r2, r3, #1
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	681b      	ldr	r3, [r3, #0]
}
 8018530:	4618      	mov	r0, r3
 8018532:	3714      	adds	r7, #20
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr

0801853c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b084      	sub	sp, #16
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
 8018544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d10a      	bne.n	8018566 <xQueueGenericReset+0x2a>
	__asm volatile
 8018550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018554:	f383 8811 	msr	BASEPRI, r3
 8018558:	f3bf 8f6f 	isb	sy
 801855c:	f3bf 8f4f 	dsb	sy
 8018560:	60bb      	str	r3, [r7, #8]
}
 8018562:	bf00      	nop
 8018564:	e7fe      	b.n	8018564 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018566:	f003 fabd 	bl	801bae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	681a      	ldr	r2, [r3, #0]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018572:	68f9      	ldr	r1, [r7, #12]
 8018574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018576:	fb01 f303 	mul.w	r3, r1, r3
 801857a:	441a      	add	r2, r3
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2200      	movs	r2, #0
 8018584:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	681a      	ldr	r2, [r3, #0]
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	681a      	ldr	r2, [r3, #0]
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018596:	3b01      	subs	r3, #1
 8018598:	68f9      	ldr	r1, [r7, #12]
 801859a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801859c:	fb01 f303 	mul.w	r3, r1, r3
 80185a0:	441a      	add	r2, r3
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	22ff      	movs	r2, #255	; 0xff
 80185aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	22ff      	movs	r2, #255	; 0xff
 80185b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d114      	bne.n	80185e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	691b      	ldr	r3, [r3, #16]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d01a      	beq.n	80185fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	3310      	adds	r3, #16
 80185c8:	4618      	mov	r0, r3
 80185ca:	f002 f8f5 	bl	801a7b8 <xTaskRemoveFromEventList>
 80185ce:	4603      	mov	r3, r0
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d012      	beq.n	80185fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80185d4:	4b0c      	ldr	r3, [pc, #48]	; (8018608 <xQueueGenericReset+0xcc>)
 80185d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185da:	601a      	str	r2, [r3, #0]
 80185dc:	f3bf 8f4f 	dsb	sy
 80185e0:	f3bf 8f6f 	isb	sy
 80185e4:	e009      	b.n	80185fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80185e6:	68fb      	ldr	r3, [r7, #12]
 80185e8:	3310      	adds	r3, #16
 80185ea:	4618      	mov	r0, r3
 80185ec:	f7ff fef2 	bl	80183d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	3324      	adds	r3, #36	; 0x24
 80185f4:	4618      	mov	r0, r3
 80185f6:	f7ff feed 	bl	80183d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80185fa:	f003 faa3 	bl	801bb44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80185fe:	2301      	movs	r3, #1
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}
 8018608:	e000ed04 	.word	0xe000ed04

0801860c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801860c:	b580      	push	{r7, lr}
 801860e:	b08e      	sub	sp, #56	; 0x38
 8018610:	af02      	add	r7, sp, #8
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	607a      	str	r2, [r7, #4]
 8018618:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d10a      	bne.n	8018636 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018624:	f383 8811 	msr	BASEPRI, r3
 8018628:	f3bf 8f6f 	isb	sy
 801862c:	f3bf 8f4f 	dsb	sy
 8018630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018632:	bf00      	nop
 8018634:	e7fe      	b.n	8018634 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d10a      	bne.n	8018652 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018640:	f383 8811 	msr	BASEPRI, r3
 8018644:	f3bf 8f6f 	isb	sy
 8018648:	f3bf 8f4f 	dsb	sy
 801864c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801864e:	bf00      	nop
 8018650:	e7fe      	b.n	8018650 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d002      	beq.n	801865e <xQueueGenericCreateStatic+0x52>
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d001      	beq.n	8018662 <xQueueGenericCreateStatic+0x56>
 801865e:	2301      	movs	r3, #1
 8018660:	e000      	b.n	8018664 <xQueueGenericCreateStatic+0x58>
 8018662:	2300      	movs	r3, #0
 8018664:	2b00      	cmp	r3, #0
 8018666:	d10a      	bne.n	801867e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8018668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801866c:	f383 8811 	msr	BASEPRI, r3
 8018670:	f3bf 8f6f 	isb	sy
 8018674:	f3bf 8f4f 	dsb	sy
 8018678:	623b      	str	r3, [r7, #32]
}
 801867a:	bf00      	nop
 801867c:	e7fe      	b.n	801867c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d102      	bne.n	801868a <xQueueGenericCreateStatic+0x7e>
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d101      	bne.n	801868e <xQueueGenericCreateStatic+0x82>
 801868a:	2301      	movs	r3, #1
 801868c:	e000      	b.n	8018690 <xQueueGenericCreateStatic+0x84>
 801868e:	2300      	movs	r3, #0
 8018690:	2b00      	cmp	r3, #0
 8018692:	d10a      	bne.n	80186aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8018694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018698:	f383 8811 	msr	BASEPRI, r3
 801869c:	f3bf 8f6f 	isb	sy
 80186a0:	f3bf 8f4f 	dsb	sy
 80186a4:	61fb      	str	r3, [r7, #28]
}
 80186a6:	bf00      	nop
 80186a8:	e7fe      	b.n	80186a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80186aa:	2350      	movs	r3, #80	; 0x50
 80186ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	2b50      	cmp	r3, #80	; 0x50
 80186b2:	d00a      	beq.n	80186ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80186b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b8:	f383 8811 	msr	BASEPRI, r3
 80186bc:	f3bf 8f6f 	isb	sy
 80186c0:	f3bf 8f4f 	dsb	sy
 80186c4:	61bb      	str	r3, [r7, #24]
}
 80186c6:	bf00      	nop
 80186c8:	e7fe      	b.n	80186c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80186ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d00d      	beq.n	80186f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80186d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d8:	2201      	movs	r2, #1
 80186da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80186de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80186e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e4:	9300      	str	r3, [sp, #0]
 80186e6:	4613      	mov	r3, r2
 80186e8:	687a      	ldr	r2, [r7, #4]
 80186ea:	68b9      	ldr	r1, [r7, #8]
 80186ec:	68f8      	ldr	r0, [r7, #12]
 80186ee:	f000 f83f 	bl	8018770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80186f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3730      	adds	r7, #48	; 0x30
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b08a      	sub	sp, #40	; 0x28
 8018700:	af02      	add	r7, sp, #8
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d10a      	bne.n	8018726 <xQueueGenericCreate+0x2a>
	__asm volatile
 8018710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018714:	f383 8811 	msr	BASEPRI, r3
 8018718:	f3bf 8f6f 	isb	sy
 801871c:	f3bf 8f4f 	dsb	sy
 8018720:	613b      	str	r3, [r7, #16]
}
 8018722:	bf00      	nop
 8018724:	e7fe      	b.n	8018724 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	68ba      	ldr	r2, [r7, #8]
 801872a:	fb02 f303 	mul.w	r3, r2, r3
 801872e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	3350      	adds	r3, #80	; 0x50
 8018734:	4618      	mov	r0, r3
 8018736:	f003 faf7 	bl	801bd28 <pvPortMalloc>
 801873a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801873c:	69bb      	ldr	r3, [r7, #24]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d011      	beq.n	8018766 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8018742:	69bb      	ldr	r3, [r7, #24]
 8018744:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	3350      	adds	r3, #80	; 0x50
 801874a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801874c:	69bb      	ldr	r3, [r7, #24]
 801874e:	2200      	movs	r2, #0
 8018750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018754:	79fa      	ldrb	r2, [r7, #7]
 8018756:	69bb      	ldr	r3, [r7, #24]
 8018758:	9300      	str	r3, [sp, #0]
 801875a:	4613      	mov	r3, r2
 801875c:	697a      	ldr	r2, [r7, #20]
 801875e:	68b9      	ldr	r1, [r7, #8]
 8018760:	68f8      	ldr	r0, [r7, #12]
 8018762:	f000 f805 	bl	8018770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018766:	69bb      	ldr	r3, [r7, #24]
	}
 8018768:	4618      	mov	r0, r3
 801876a:	3720      	adds	r7, #32
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b084      	sub	sp, #16
 8018774:	af00      	add	r7, sp, #0
 8018776:	60f8      	str	r0, [r7, #12]
 8018778:	60b9      	str	r1, [r7, #8]
 801877a:	607a      	str	r2, [r7, #4]
 801877c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801877e:	68bb      	ldr	r3, [r7, #8]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d103      	bne.n	801878c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	69ba      	ldr	r2, [r7, #24]
 8018788:	601a      	str	r2, [r3, #0]
 801878a:	e002      	b.n	8018792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	68fa      	ldr	r2, [r7, #12]
 8018796:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018798:	69bb      	ldr	r3, [r7, #24]
 801879a:	68ba      	ldr	r2, [r7, #8]
 801879c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801879e:	2101      	movs	r1, #1
 80187a0:	69b8      	ldr	r0, [r7, #24]
 80187a2:	f7ff fecb 	bl	801853c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80187a6:	69bb      	ldr	r3, [r7, #24]
 80187a8:	78fa      	ldrb	r2, [r7, #3]
 80187aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80187ae:	bf00      	nop
 80187b0:	3710      	adds	r7, #16
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}

080187b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80187b6:	b580      	push	{r7, lr}
 80187b8:	b082      	sub	sp, #8
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d00e      	beq.n	80187e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2200      	movs	r2, #0
 80187c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2200      	movs	r2, #0
 80187ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2200      	movs	r2, #0
 80187d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80187d6:	2300      	movs	r3, #0
 80187d8:	2200      	movs	r2, #0
 80187da:	2100      	movs	r1, #0
 80187dc:	6878      	ldr	r0, [r7, #4]
 80187de:	f000 f90b 	bl	80189f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80187e2:	bf00      	nop
 80187e4:	3708      	adds	r7, #8
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}

080187ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80187ea:	b580      	push	{r7, lr}
 80187ec:	b086      	sub	sp, #24
 80187ee:	af00      	add	r7, sp, #0
 80187f0:	4603      	mov	r3, r0
 80187f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80187f4:	2301      	movs	r3, #1
 80187f6:	617b      	str	r3, [r7, #20]
 80187f8:	2300      	movs	r3, #0
 80187fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80187fc:	79fb      	ldrb	r3, [r7, #7]
 80187fe:	461a      	mov	r2, r3
 8018800:	6939      	ldr	r1, [r7, #16]
 8018802:	6978      	ldr	r0, [r7, #20]
 8018804:	f7ff ff7a 	bl	80186fc <xQueueGenericCreate>
 8018808:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801880a:	68f8      	ldr	r0, [r7, #12]
 801880c:	f7ff ffd3 	bl	80187b6 <prvInitialiseMutex>

		return xNewQueue;
 8018810:	68fb      	ldr	r3, [r7, #12]
	}
 8018812:	4618      	mov	r0, r3
 8018814:	3718      	adds	r7, #24
 8018816:	46bd      	mov	sp, r7
 8018818:	bd80      	pop	{r7, pc}

0801881a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801881a:	b580      	push	{r7, lr}
 801881c:	b088      	sub	sp, #32
 801881e:	af02      	add	r7, sp, #8
 8018820:	4603      	mov	r3, r0
 8018822:	6039      	str	r1, [r7, #0]
 8018824:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8018826:	2301      	movs	r3, #1
 8018828:	617b      	str	r3, [r7, #20]
 801882a:	2300      	movs	r3, #0
 801882c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801882e:	79fb      	ldrb	r3, [r7, #7]
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	2200      	movs	r2, #0
 8018836:	6939      	ldr	r1, [r7, #16]
 8018838:	6978      	ldr	r0, [r7, #20]
 801883a:	f7ff fee7 	bl	801860c <xQueueGenericCreateStatic>
 801883e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018840:	68f8      	ldr	r0, [r7, #12]
 8018842:	f7ff ffb8 	bl	80187b6 <prvInitialiseMutex>

		return xNewQueue;
 8018846:	68fb      	ldr	r3, [r7, #12]
	}
 8018848:	4618      	mov	r0, r3
 801884a:	3718      	adds	r7, #24
 801884c:	46bd      	mov	sp, r7
 801884e:	bd80      	pop	{r7, pc}

08018850 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8018850:	b590      	push	{r4, r7, lr}
 8018852:	b087      	sub	sp, #28
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801885c:	693b      	ldr	r3, [r7, #16]
 801885e:	2b00      	cmp	r3, #0
 8018860:	d10a      	bne.n	8018878 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8018862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018866:	f383 8811 	msr	BASEPRI, r3
 801886a:	f3bf 8f6f 	isb	sy
 801886e:	f3bf 8f4f 	dsb	sy
 8018872:	60fb      	str	r3, [r7, #12]
}
 8018874:	bf00      	nop
 8018876:	e7fe      	b.n	8018876 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8018878:	693b      	ldr	r3, [r7, #16]
 801887a:	689c      	ldr	r4, [r3, #8]
 801887c:	f002 f984 	bl	801ab88 <xTaskGetCurrentTaskHandle>
 8018880:	4603      	mov	r3, r0
 8018882:	429c      	cmp	r4, r3
 8018884:	d111      	bne.n	80188aa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8018886:	693b      	ldr	r3, [r7, #16]
 8018888:	68db      	ldr	r3, [r3, #12]
 801888a:	1e5a      	subs	r2, r3, #1
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018890:	693b      	ldr	r3, [r7, #16]
 8018892:	68db      	ldr	r3, [r3, #12]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d105      	bne.n	80188a4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018898:	2300      	movs	r3, #0
 801889a:	2200      	movs	r2, #0
 801889c:	2100      	movs	r1, #0
 801889e:	6938      	ldr	r0, [r7, #16]
 80188a0:	f000 f8aa 	bl	80189f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80188a4:	2301      	movs	r3, #1
 80188a6:	617b      	str	r3, [r7, #20]
 80188a8:	e001      	b.n	80188ae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80188aa:	2300      	movs	r3, #0
 80188ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80188ae:	697b      	ldr	r3, [r7, #20]
	}
 80188b0:	4618      	mov	r0, r3
 80188b2:	371c      	adds	r7, #28
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd90      	pop	{r4, r7, pc}

080188b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80188b8:	b590      	push	{r4, r7, lr}
 80188ba:	b087      	sub	sp, #28
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
 80188c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80188c6:	693b      	ldr	r3, [r7, #16]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d10a      	bne.n	80188e2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80188cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d0:	f383 8811 	msr	BASEPRI, r3
 80188d4:	f3bf 8f6f 	isb	sy
 80188d8:	f3bf 8f4f 	dsb	sy
 80188dc:	60fb      	str	r3, [r7, #12]
}
 80188de:	bf00      	nop
 80188e0:	e7fe      	b.n	80188e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80188e2:	693b      	ldr	r3, [r7, #16]
 80188e4:	689c      	ldr	r4, [r3, #8]
 80188e6:	f002 f94f 	bl	801ab88 <xTaskGetCurrentTaskHandle>
 80188ea:	4603      	mov	r3, r0
 80188ec:	429c      	cmp	r4, r3
 80188ee:	d107      	bne.n	8018900 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	68db      	ldr	r3, [r3, #12]
 80188f4:	1c5a      	adds	r2, r3, #1
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80188fa:	2301      	movs	r3, #1
 80188fc:	617b      	str	r3, [r7, #20]
 80188fe:	e00c      	b.n	801891a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8018900:	6839      	ldr	r1, [r7, #0]
 8018902:	6938      	ldr	r0, [r7, #16]
 8018904:	f000 fb7e 	bl	8019004 <xQueueSemaphoreTake>
 8018908:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801890a:	697b      	ldr	r3, [r7, #20]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d004      	beq.n	801891a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018910:	693b      	ldr	r3, [r7, #16]
 8018912:	68db      	ldr	r3, [r3, #12]
 8018914:	1c5a      	adds	r2, r3, #1
 8018916:	693b      	ldr	r3, [r7, #16]
 8018918:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801891a:	697b      	ldr	r3, [r7, #20]
	}
 801891c:	4618      	mov	r0, r3
 801891e:	371c      	adds	r7, #28
 8018920:	46bd      	mov	sp, r7
 8018922:	bd90      	pop	{r4, r7, pc}

08018924 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8018924:	b580      	push	{r7, lr}
 8018926:	b08a      	sub	sp, #40	; 0x28
 8018928:	af02      	add	r7, sp, #8
 801892a:	60f8      	str	r0, [r7, #12]
 801892c:	60b9      	str	r1, [r7, #8]
 801892e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d10a      	bne.n	801894c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8018936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801893a:	f383 8811 	msr	BASEPRI, r3
 801893e:	f3bf 8f6f 	isb	sy
 8018942:	f3bf 8f4f 	dsb	sy
 8018946:	61bb      	str	r3, [r7, #24]
}
 8018948:	bf00      	nop
 801894a:	e7fe      	b.n	801894a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801894c:	68ba      	ldr	r2, [r7, #8]
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	429a      	cmp	r2, r3
 8018952:	d90a      	bls.n	801896a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8018954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	617b      	str	r3, [r7, #20]
}
 8018966:	bf00      	nop
 8018968:	e7fe      	b.n	8018968 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801896a:	2302      	movs	r3, #2
 801896c:	9300      	str	r3, [sp, #0]
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	2200      	movs	r2, #0
 8018972:	2100      	movs	r1, #0
 8018974:	68f8      	ldr	r0, [r7, #12]
 8018976:	f7ff fe49 	bl	801860c <xQueueGenericCreateStatic>
 801897a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801897c:	69fb      	ldr	r3, [r7, #28]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d002      	beq.n	8018988 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018982:	69fb      	ldr	r3, [r7, #28]
 8018984:	68ba      	ldr	r2, [r7, #8]
 8018986:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8018988:	69fb      	ldr	r3, [r7, #28]
	}
 801898a:	4618      	mov	r0, r3
 801898c:	3720      	adds	r7, #32
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}

08018992 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8018992:	b580      	push	{r7, lr}
 8018994:	b086      	sub	sp, #24
 8018996:	af00      	add	r7, sp, #0
 8018998:	6078      	str	r0, [r7, #4]
 801899a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d10a      	bne.n	80189b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80189a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a6:	f383 8811 	msr	BASEPRI, r3
 80189aa:	f3bf 8f6f 	isb	sy
 80189ae:	f3bf 8f4f 	dsb	sy
 80189b2:	613b      	str	r3, [r7, #16]
}
 80189b4:	bf00      	nop
 80189b6:	e7fe      	b.n	80189b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80189b8:	683a      	ldr	r2, [r7, #0]
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	429a      	cmp	r2, r3
 80189be:	d90a      	bls.n	80189d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80189c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189c4:	f383 8811 	msr	BASEPRI, r3
 80189c8:	f3bf 8f6f 	isb	sy
 80189cc:	f3bf 8f4f 	dsb	sy
 80189d0:	60fb      	str	r3, [r7, #12]
}
 80189d2:	bf00      	nop
 80189d4:	e7fe      	b.n	80189d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80189d6:	2202      	movs	r2, #2
 80189d8:	2100      	movs	r1, #0
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f7ff fe8e 	bl	80186fc <xQueueGenericCreate>
 80189e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80189e2:	697b      	ldr	r3, [r7, #20]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d002      	beq.n	80189ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	683a      	ldr	r2, [r7, #0]
 80189ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80189ee:	697b      	ldr	r3, [r7, #20]
	}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3718      	adds	r7, #24
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b08e      	sub	sp, #56	; 0x38
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	60f8      	str	r0, [r7, #12]
 8018a00:	60b9      	str	r1, [r7, #8]
 8018a02:	607a      	str	r2, [r7, #4]
 8018a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018a06:	2300      	movs	r3, #0
 8018a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d10a      	bne.n	8018a2a <xQueueGenericSend+0x32>
	__asm volatile
 8018a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a18:	f383 8811 	msr	BASEPRI, r3
 8018a1c:	f3bf 8f6f 	isb	sy
 8018a20:	f3bf 8f4f 	dsb	sy
 8018a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018a26:	bf00      	nop
 8018a28:	e7fe      	b.n	8018a28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d103      	bne.n	8018a38 <xQueueGenericSend+0x40>
 8018a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d101      	bne.n	8018a3c <xQueueGenericSend+0x44>
 8018a38:	2301      	movs	r3, #1
 8018a3a:	e000      	b.n	8018a3e <xQueueGenericSend+0x46>
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d10a      	bne.n	8018a58 <xQueueGenericSend+0x60>
	__asm volatile
 8018a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a46:	f383 8811 	msr	BASEPRI, r3
 8018a4a:	f3bf 8f6f 	isb	sy
 8018a4e:	f3bf 8f4f 	dsb	sy
 8018a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018a54:	bf00      	nop
 8018a56:	e7fe      	b.n	8018a56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	2b02      	cmp	r3, #2
 8018a5c:	d103      	bne.n	8018a66 <xQueueGenericSend+0x6e>
 8018a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a62:	2b01      	cmp	r3, #1
 8018a64:	d101      	bne.n	8018a6a <xQueueGenericSend+0x72>
 8018a66:	2301      	movs	r3, #1
 8018a68:	e000      	b.n	8018a6c <xQueueGenericSend+0x74>
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d10a      	bne.n	8018a86 <xQueueGenericSend+0x8e>
	__asm volatile
 8018a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a74:	f383 8811 	msr	BASEPRI, r3
 8018a78:	f3bf 8f6f 	isb	sy
 8018a7c:	f3bf 8f4f 	dsb	sy
 8018a80:	623b      	str	r3, [r7, #32]
}
 8018a82:	bf00      	nop
 8018a84:	e7fe      	b.n	8018a84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018a86:	f002 f88f 	bl	801aba8 <xTaskGetSchedulerState>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d102      	bne.n	8018a96 <xQueueGenericSend+0x9e>
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d101      	bne.n	8018a9a <xQueueGenericSend+0xa2>
 8018a96:	2301      	movs	r3, #1
 8018a98:	e000      	b.n	8018a9c <xQueueGenericSend+0xa4>
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d10a      	bne.n	8018ab6 <xQueueGenericSend+0xbe>
	__asm volatile
 8018aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa4:	f383 8811 	msr	BASEPRI, r3
 8018aa8:	f3bf 8f6f 	isb	sy
 8018aac:	f3bf 8f4f 	dsb	sy
 8018ab0:	61fb      	str	r3, [r7, #28]
}
 8018ab2:	bf00      	nop
 8018ab4:	e7fe      	b.n	8018ab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018ab6:	f003 f815 	bl	801bae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	d302      	bcc.n	8018acc <xQueueGenericSend+0xd4>
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	2b02      	cmp	r3, #2
 8018aca:	d129      	bne.n	8018b20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018acc:	683a      	ldr	r2, [r7, #0]
 8018ace:	68b9      	ldr	r1, [r7, #8]
 8018ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ad2:	f000 fc9a 	bl	801940a <prvCopyDataToQueue>
 8018ad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d010      	beq.n	8018b02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae2:	3324      	adds	r3, #36	; 0x24
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f001 fe67 	bl	801a7b8 <xTaskRemoveFromEventList>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d013      	beq.n	8018b18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018af0:	4b3f      	ldr	r3, [pc, #252]	; (8018bf0 <xQueueGenericSend+0x1f8>)
 8018af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018af6:	601a      	str	r2, [r3, #0]
 8018af8:	f3bf 8f4f 	dsb	sy
 8018afc:	f3bf 8f6f 	isb	sy
 8018b00:	e00a      	b.n	8018b18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d007      	beq.n	8018b18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018b08:	4b39      	ldr	r3, [pc, #228]	; (8018bf0 <xQueueGenericSend+0x1f8>)
 8018b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b0e:	601a      	str	r2, [r3, #0]
 8018b10:	f3bf 8f4f 	dsb	sy
 8018b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018b18:	f003 f814 	bl	801bb44 <vPortExitCritical>
				return pdPASS;
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	e063      	b.n	8018be8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d103      	bne.n	8018b2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018b26:	f003 f80d 	bl	801bb44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	e05c      	b.n	8018be8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d106      	bne.n	8018b42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018b34:	f107 0314 	add.w	r3, r7, #20
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f001 fec7 	bl	801a8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018b3e:	2301      	movs	r3, #1
 8018b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018b42:	f002 ffff 	bl	801bb44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018b46:	f001 fbe1 	bl	801a30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018b4a:	f002 ffcb 	bl	801bae4 <vPortEnterCritical>
 8018b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018b54:	b25b      	sxtb	r3, r3
 8018b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b5a:	d103      	bne.n	8018b64 <xQueueGenericSend+0x16c>
 8018b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b5e:	2200      	movs	r2, #0
 8018b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018b6a:	b25b      	sxtb	r3, r3
 8018b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b70:	d103      	bne.n	8018b7a <xQueueGenericSend+0x182>
 8018b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b74:	2200      	movs	r2, #0
 8018b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018b7a:	f002 ffe3 	bl	801bb44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018b7e:	1d3a      	adds	r2, r7, #4
 8018b80:	f107 0314 	add.w	r3, r7, #20
 8018b84:	4611      	mov	r1, r2
 8018b86:	4618      	mov	r0, r3
 8018b88:	f001 feb6 	bl	801a8f8 <xTaskCheckForTimeOut>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d124      	bne.n	8018bdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b94:	f000 fd31 	bl	80195fa <prvIsQueueFull>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d018      	beq.n	8018bd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba0:	3310      	adds	r3, #16
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	4611      	mov	r1, r2
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f001 fdb6 	bl	801a718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bae:	f000 fcbc 	bl	801952a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018bb2:	f001 fbb9 	bl	801a328 <xTaskResumeAll>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f47f af7c 	bne.w	8018ab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8018bbe:	4b0c      	ldr	r3, [pc, #48]	; (8018bf0 <xQueueGenericSend+0x1f8>)
 8018bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018bc4:	601a      	str	r2, [r3, #0]
 8018bc6:	f3bf 8f4f 	dsb	sy
 8018bca:	f3bf 8f6f 	isb	sy
 8018bce:	e772      	b.n	8018ab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bd2:	f000 fcaa 	bl	801952a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018bd6:	f001 fba7 	bl	801a328 <xTaskResumeAll>
 8018bda:	e76c      	b.n	8018ab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018bde:	f000 fca4 	bl	801952a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018be2:	f001 fba1 	bl	801a328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8018be6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8018be8:	4618      	mov	r0, r3
 8018bea:	3738      	adds	r7, #56	; 0x38
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	e000ed04 	.word	0xe000ed04

08018bf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b090      	sub	sp, #64	; 0x40
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	60f8      	str	r0, [r7, #12]
 8018bfc:	60b9      	str	r1, [r7, #8]
 8018bfe:	607a      	str	r2, [r7, #4]
 8018c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d10a      	bne.n	8018c22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c10:	f383 8811 	msr	BASEPRI, r3
 8018c14:	f3bf 8f6f 	isb	sy
 8018c18:	f3bf 8f4f 	dsb	sy
 8018c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018c1e:	bf00      	nop
 8018c20:	e7fe      	b.n	8018c20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d103      	bne.n	8018c30 <xQueueGenericSendFromISR+0x3c>
 8018c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d101      	bne.n	8018c34 <xQueueGenericSendFromISR+0x40>
 8018c30:	2301      	movs	r3, #1
 8018c32:	e000      	b.n	8018c36 <xQueueGenericSendFromISR+0x42>
 8018c34:	2300      	movs	r3, #0
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d10a      	bne.n	8018c50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8018c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c3e:	f383 8811 	msr	BASEPRI, r3
 8018c42:	f3bf 8f6f 	isb	sy
 8018c46:	f3bf 8f4f 	dsb	sy
 8018c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018c4c:	bf00      	nop
 8018c4e:	e7fe      	b.n	8018c4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018c50:	683b      	ldr	r3, [r7, #0]
 8018c52:	2b02      	cmp	r3, #2
 8018c54:	d103      	bne.n	8018c5e <xQueueGenericSendFromISR+0x6a>
 8018c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c5a:	2b01      	cmp	r3, #1
 8018c5c:	d101      	bne.n	8018c62 <xQueueGenericSendFromISR+0x6e>
 8018c5e:	2301      	movs	r3, #1
 8018c60:	e000      	b.n	8018c64 <xQueueGenericSendFromISR+0x70>
 8018c62:	2300      	movs	r3, #0
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d10a      	bne.n	8018c7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6c:	f383 8811 	msr	BASEPRI, r3
 8018c70:	f3bf 8f6f 	isb	sy
 8018c74:	f3bf 8f4f 	dsb	sy
 8018c78:	623b      	str	r3, [r7, #32]
}
 8018c7a:	bf00      	nop
 8018c7c:	e7fe      	b.n	8018c7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018c7e:	f003 f813 	bl	801bca8 <vPortValidateInterruptPriority>
	__asm volatile
 8018c82:	f3ef 8211 	mrs	r2, BASEPRI
 8018c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c8a:	f383 8811 	msr	BASEPRI, r3
 8018c8e:	f3bf 8f6f 	isb	sy
 8018c92:	f3bf 8f4f 	dsb	sy
 8018c96:	61fa      	str	r2, [r7, #28]
 8018c98:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8018c9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018c9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d302      	bcc.n	8018cb0 <xQueueGenericSendFromISR+0xbc>
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	2b02      	cmp	r3, #2
 8018cae:	d12f      	bne.n	8018d10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018cc0:	683a      	ldr	r2, [r7, #0]
 8018cc2:	68b9      	ldr	r1, [r7, #8]
 8018cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018cc6:	f000 fba0 	bl	801940a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018cca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cd2:	d112      	bne.n	8018cfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d016      	beq.n	8018d0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cde:	3324      	adds	r3, #36	; 0x24
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f001 fd69 	bl	801a7b8 <xTaskRemoveFromEventList>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d00e      	beq.n	8018d0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d00b      	beq.n	8018d0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2201      	movs	r2, #1
 8018cf6:	601a      	str	r2, [r3, #0]
 8018cf8:	e007      	b.n	8018d0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018cfe:	3301      	adds	r3, #1
 8018d00:	b2db      	uxtb	r3, r3
 8018d02:	b25a      	sxtb	r2, r3
 8018d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8018d0e:	e001      	b.n	8018d14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018d10:	2300      	movs	r3, #0
 8018d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d16:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	f383 8811 	msr	BASEPRI, r3
}
 8018d1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3740      	adds	r7, #64	; 0x40
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}

08018d2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018d2a:	b580      	push	{r7, lr}
 8018d2c:	b08e      	sub	sp, #56	; 0x38
 8018d2e:	af00      	add	r7, sp, #0
 8018d30:	6078      	str	r0, [r7, #4]
 8018d32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d10a      	bne.n	8018d54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8018d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d42:	f383 8811 	msr	BASEPRI, r3
 8018d46:	f3bf 8f6f 	isb	sy
 8018d4a:	f3bf 8f4f 	dsb	sy
 8018d4e:	623b      	str	r3, [r7, #32]
}
 8018d50:	bf00      	nop
 8018d52:	e7fe      	b.n	8018d52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d00a      	beq.n	8018d72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8018d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d60:	f383 8811 	msr	BASEPRI, r3
 8018d64:	f3bf 8f6f 	isb	sy
 8018d68:	f3bf 8f4f 	dsb	sy
 8018d6c:	61fb      	str	r3, [r7, #28]
}
 8018d6e:	bf00      	nop
 8018d70:	e7fe      	b.n	8018d70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d103      	bne.n	8018d82 <xQueueGiveFromISR+0x58>
 8018d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d7c:	689b      	ldr	r3, [r3, #8]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d101      	bne.n	8018d86 <xQueueGiveFromISR+0x5c>
 8018d82:	2301      	movs	r3, #1
 8018d84:	e000      	b.n	8018d88 <xQueueGiveFromISR+0x5e>
 8018d86:	2300      	movs	r3, #0
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10a      	bne.n	8018da2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8018d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d90:	f383 8811 	msr	BASEPRI, r3
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	61bb      	str	r3, [r7, #24]
}
 8018d9e:	bf00      	nop
 8018da0:	e7fe      	b.n	8018da0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018da2:	f002 ff81 	bl	801bca8 <vPortValidateInterruptPriority>
	__asm volatile
 8018da6:	f3ef 8211 	mrs	r2, BASEPRI
 8018daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dae:	f383 8811 	msr	BASEPRI, r3
 8018db2:	f3bf 8f6f 	isb	sy
 8018db6:	f3bf 8f4f 	dsb	sy
 8018dba:	617a      	str	r2, [r7, #20]
 8018dbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8018dbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d22b      	bcs.n	8018e2a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dde:	1c5a      	adds	r2, r3, #1
 8018de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dec:	d112      	bne.n	8018e14 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d016      	beq.n	8018e24 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018df8:	3324      	adds	r3, #36	; 0x24
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f001 fcdc 	bl	801a7b8 <xTaskRemoveFromEventList>
 8018e00:	4603      	mov	r3, r0
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d00e      	beq.n	8018e24 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d00b      	beq.n	8018e24 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	2201      	movs	r2, #1
 8018e10:	601a      	str	r2, [r3, #0]
 8018e12:	e007      	b.n	8018e24 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e18:	3301      	adds	r3, #1
 8018e1a:	b2db      	uxtb	r3, r3
 8018e1c:	b25a      	sxtb	r2, r3
 8018e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018e24:	2301      	movs	r3, #1
 8018e26:	637b      	str	r3, [r7, #52]	; 0x34
 8018e28:	e001      	b.n	8018e2e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8018e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	f383 8811 	msr	BASEPRI, r3
}
 8018e38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3738      	adds	r7, #56	; 0x38
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b08c      	sub	sp, #48	; 0x30
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	60f8      	str	r0, [r7, #12]
 8018e4c:	60b9      	str	r1, [r7, #8]
 8018e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018e50:	2300      	movs	r3, #0
 8018e52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d10a      	bne.n	8018e74 <xQueueReceive+0x30>
	__asm volatile
 8018e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e62:	f383 8811 	msr	BASEPRI, r3
 8018e66:	f3bf 8f6f 	isb	sy
 8018e6a:	f3bf 8f4f 	dsb	sy
 8018e6e:	623b      	str	r3, [r7, #32]
}
 8018e70:	bf00      	nop
 8018e72:	e7fe      	b.n	8018e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d103      	bne.n	8018e82 <xQueueReceive+0x3e>
 8018e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d101      	bne.n	8018e86 <xQueueReceive+0x42>
 8018e82:	2301      	movs	r3, #1
 8018e84:	e000      	b.n	8018e88 <xQueueReceive+0x44>
 8018e86:	2300      	movs	r3, #0
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d10a      	bne.n	8018ea2 <xQueueReceive+0x5e>
	__asm volatile
 8018e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e90:	f383 8811 	msr	BASEPRI, r3
 8018e94:	f3bf 8f6f 	isb	sy
 8018e98:	f3bf 8f4f 	dsb	sy
 8018e9c:	61fb      	str	r3, [r7, #28]
}
 8018e9e:	bf00      	nop
 8018ea0:	e7fe      	b.n	8018ea0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018ea2:	f001 fe81 	bl	801aba8 <xTaskGetSchedulerState>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d102      	bne.n	8018eb2 <xQueueReceive+0x6e>
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d101      	bne.n	8018eb6 <xQueueReceive+0x72>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	e000      	b.n	8018eb8 <xQueueReceive+0x74>
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d10a      	bne.n	8018ed2 <xQueueReceive+0x8e>
	__asm volatile
 8018ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec0:	f383 8811 	msr	BASEPRI, r3
 8018ec4:	f3bf 8f6f 	isb	sy
 8018ec8:	f3bf 8f4f 	dsb	sy
 8018ecc:	61bb      	str	r3, [r7, #24]
}
 8018ece:	bf00      	nop
 8018ed0:	e7fe      	b.n	8018ed0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018ed2:	f002 fe07 	bl	801bae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d01f      	beq.n	8018f22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018ee2:	68b9      	ldr	r1, [r7, #8]
 8018ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ee6:	f000 fafa 	bl	80194de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eec:	1e5a      	subs	r2, r3, #1
 8018eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ef0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ef4:	691b      	ldr	r3, [r3, #16]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d00f      	beq.n	8018f1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018efc:	3310      	adds	r3, #16
 8018efe:	4618      	mov	r0, r3
 8018f00:	f001 fc5a 	bl	801a7b8 <xTaskRemoveFromEventList>
 8018f04:	4603      	mov	r3, r0
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d007      	beq.n	8018f1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018f0a:	4b3d      	ldr	r3, [pc, #244]	; (8019000 <xQueueReceive+0x1bc>)
 8018f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f10:	601a      	str	r2, [r3, #0]
 8018f12:	f3bf 8f4f 	dsb	sy
 8018f16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018f1a:	f002 fe13 	bl	801bb44 <vPortExitCritical>
				return pdPASS;
 8018f1e:	2301      	movs	r3, #1
 8018f20:	e069      	b.n	8018ff6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d103      	bne.n	8018f30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018f28:	f002 fe0c 	bl	801bb44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	e062      	b.n	8018ff6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d106      	bne.n	8018f44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018f36:	f107 0310 	add.w	r3, r7, #16
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f001 fcc6 	bl	801a8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018f40:	2301      	movs	r3, #1
 8018f42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018f44:	f002 fdfe 	bl	801bb44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018f48:	f001 f9e0 	bl	801a30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018f4c:	f002 fdca 	bl	801bae4 <vPortEnterCritical>
 8018f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018f56:	b25b      	sxtb	r3, r3
 8018f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f5c:	d103      	bne.n	8018f66 <xQueueReceive+0x122>
 8018f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f60:	2200      	movs	r2, #0
 8018f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018f6c:	b25b      	sxtb	r3, r3
 8018f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f72:	d103      	bne.n	8018f7c <xQueueReceive+0x138>
 8018f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f76:	2200      	movs	r2, #0
 8018f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018f7c:	f002 fde2 	bl	801bb44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018f80:	1d3a      	adds	r2, r7, #4
 8018f82:	f107 0310 	add.w	r3, r7, #16
 8018f86:	4611      	mov	r1, r2
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f001 fcb5 	bl	801a8f8 <xTaskCheckForTimeOut>
 8018f8e:	4603      	mov	r3, r0
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d123      	bne.n	8018fdc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f96:	f000 fb1a 	bl	80195ce <prvIsQueueEmpty>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d017      	beq.n	8018fd0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa2:	3324      	adds	r3, #36	; 0x24
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	4611      	mov	r1, r2
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f001 fbb5 	bl	801a718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fb0:	f000 fabb 	bl	801952a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018fb4:	f001 f9b8 	bl	801a328 <xTaskResumeAll>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d189      	bne.n	8018ed2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8018fbe:	4b10      	ldr	r3, [pc, #64]	; (8019000 <xQueueReceive+0x1bc>)
 8018fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fc4:	601a      	str	r2, [r3, #0]
 8018fc6:	f3bf 8f4f 	dsb	sy
 8018fca:	f3bf 8f6f 	isb	sy
 8018fce:	e780      	b.n	8018ed2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fd2:	f000 faaa 	bl	801952a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018fd6:	f001 f9a7 	bl	801a328 <xTaskResumeAll>
 8018fda:	e77a      	b.n	8018ed2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fde:	f000 faa4 	bl	801952a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018fe2:	f001 f9a1 	bl	801a328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fe8:	f000 faf1 	bl	80195ce <prvIsQueueEmpty>
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	f43f af6f 	beq.w	8018ed2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018ff4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	3730      	adds	r7, #48	; 0x30
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}
 8018ffe:	bf00      	nop
 8019000:	e000ed04 	.word	0xe000ed04

08019004 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b08e      	sub	sp, #56	; 0x38
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801900e:	2300      	movs	r3, #0
 8019010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019016:	2300      	movs	r3, #0
 8019018:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801901c:	2b00      	cmp	r3, #0
 801901e:	d10a      	bne.n	8019036 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8019020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019024:	f383 8811 	msr	BASEPRI, r3
 8019028:	f3bf 8f6f 	isb	sy
 801902c:	f3bf 8f4f 	dsb	sy
 8019030:	623b      	str	r3, [r7, #32]
}
 8019032:	bf00      	nop
 8019034:	e7fe      	b.n	8019034 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801903a:	2b00      	cmp	r3, #0
 801903c:	d00a      	beq.n	8019054 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019042:	f383 8811 	msr	BASEPRI, r3
 8019046:	f3bf 8f6f 	isb	sy
 801904a:	f3bf 8f4f 	dsb	sy
 801904e:	61fb      	str	r3, [r7, #28]
}
 8019050:	bf00      	nop
 8019052:	e7fe      	b.n	8019052 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019054:	f001 fda8 	bl	801aba8 <xTaskGetSchedulerState>
 8019058:	4603      	mov	r3, r0
 801905a:	2b00      	cmp	r3, #0
 801905c:	d102      	bne.n	8019064 <xQueueSemaphoreTake+0x60>
 801905e:	683b      	ldr	r3, [r7, #0]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d101      	bne.n	8019068 <xQueueSemaphoreTake+0x64>
 8019064:	2301      	movs	r3, #1
 8019066:	e000      	b.n	801906a <xQueueSemaphoreTake+0x66>
 8019068:	2300      	movs	r3, #0
 801906a:	2b00      	cmp	r3, #0
 801906c:	d10a      	bne.n	8019084 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019072:	f383 8811 	msr	BASEPRI, r3
 8019076:	f3bf 8f6f 	isb	sy
 801907a:	f3bf 8f4f 	dsb	sy
 801907e:	61bb      	str	r3, [r7, #24]
}
 8019080:	bf00      	nop
 8019082:	e7fe      	b.n	8019082 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019084:	f002 fd2e 	bl	801bae4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801908c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801908e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019090:	2b00      	cmp	r3, #0
 8019092:	d024      	beq.n	80190de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8019094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019096:	1e5a      	subs	r2, r3, #1
 8019098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d104      	bne.n	80190ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80190a4:	f001 fef6 	bl	801ae94 <pvTaskIncrementMutexHeldCount>
 80190a8:	4602      	mov	r2, r0
 80190aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b0:	691b      	ldr	r3, [r3, #16]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d00f      	beq.n	80190d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80190b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b8:	3310      	adds	r3, #16
 80190ba:	4618      	mov	r0, r3
 80190bc:	f001 fb7c 	bl	801a7b8 <xTaskRemoveFromEventList>
 80190c0:	4603      	mov	r3, r0
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d007      	beq.n	80190d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80190c6:	4b54      	ldr	r3, [pc, #336]	; (8019218 <xQueueSemaphoreTake+0x214>)
 80190c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190cc:	601a      	str	r2, [r3, #0]
 80190ce:	f3bf 8f4f 	dsb	sy
 80190d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80190d6:	f002 fd35 	bl	801bb44 <vPortExitCritical>
				return pdPASS;
 80190da:	2301      	movs	r3, #1
 80190dc:	e097      	b.n	801920e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80190de:	683b      	ldr	r3, [r7, #0]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d111      	bne.n	8019108 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80190e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d00a      	beq.n	8019100 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80190ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190ee:	f383 8811 	msr	BASEPRI, r3
 80190f2:	f3bf 8f6f 	isb	sy
 80190f6:	f3bf 8f4f 	dsb	sy
 80190fa:	617b      	str	r3, [r7, #20]
}
 80190fc:	bf00      	nop
 80190fe:	e7fe      	b.n	80190fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8019100:	f002 fd20 	bl	801bb44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019104:	2300      	movs	r3, #0
 8019106:	e082      	b.n	801920e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801910a:	2b00      	cmp	r3, #0
 801910c:	d106      	bne.n	801911c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801910e:	f107 030c 	add.w	r3, r7, #12
 8019112:	4618      	mov	r0, r3
 8019114:	f001 fbda 	bl	801a8cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019118:	2301      	movs	r3, #1
 801911a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801911c:	f002 fd12 	bl	801bb44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019120:	f001 f8f4 	bl	801a30c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019124:	f002 fcde 	bl	801bae4 <vPortEnterCritical>
 8019128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801912a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801912e:	b25b      	sxtb	r3, r3
 8019130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019134:	d103      	bne.n	801913e <xQueueSemaphoreTake+0x13a>
 8019136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019138:	2200      	movs	r2, #0
 801913a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019144:	b25b      	sxtb	r3, r3
 8019146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801914a:	d103      	bne.n	8019154 <xQueueSemaphoreTake+0x150>
 801914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801914e:	2200      	movs	r2, #0
 8019150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019154:	f002 fcf6 	bl	801bb44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019158:	463a      	mov	r2, r7
 801915a:	f107 030c 	add.w	r3, r7, #12
 801915e:	4611      	mov	r1, r2
 8019160:	4618      	mov	r0, r3
 8019162:	f001 fbc9 	bl	801a8f8 <xTaskCheckForTimeOut>
 8019166:	4603      	mov	r3, r0
 8019168:	2b00      	cmp	r3, #0
 801916a:	d132      	bne.n	80191d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801916c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801916e:	f000 fa2e 	bl	80195ce <prvIsQueueEmpty>
 8019172:	4603      	mov	r3, r0
 8019174:	2b00      	cmp	r3, #0
 8019176:	d026      	beq.n	80191c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d109      	bne.n	8019194 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8019180:	f002 fcb0 	bl	801bae4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019186:	689b      	ldr	r3, [r3, #8]
 8019188:	4618      	mov	r0, r3
 801918a:	f001 fd2b 	bl	801abe4 <xTaskPriorityInherit>
 801918e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8019190:	f002 fcd8 	bl	801bb44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019196:	3324      	adds	r3, #36	; 0x24
 8019198:	683a      	ldr	r2, [r7, #0]
 801919a:	4611      	mov	r1, r2
 801919c:	4618      	mov	r0, r3
 801919e:	f001 fabb 	bl	801a718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80191a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191a4:	f000 f9c1 	bl	801952a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80191a8:	f001 f8be 	bl	801a328 <xTaskResumeAll>
 80191ac:	4603      	mov	r3, r0
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f47f af68 	bne.w	8019084 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80191b4:	4b18      	ldr	r3, [pc, #96]	; (8019218 <xQueueSemaphoreTake+0x214>)
 80191b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191ba:	601a      	str	r2, [r3, #0]
 80191bc:	f3bf 8f4f 	dsb	sy
 80191c0:	f3bf 8f6f 	isb	sy
 80191c4:	e75e      	b.n	8019084 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80191c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191c8:	f000 f9af 	bl	801952a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80191cc:	f001 f8ac 	bl	801a328 <xTaskResumeAll>
 80191d0:	e758      	b.n	8019084 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80191d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191d4:	f000 f9a9 	bl	801952a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80191d8:	f001 f8a6 	bl	801a328 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80191dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191de:	f000 f9f6 	bl	80195ce <prvIsQueueEmpty>
 80191e2:	4603      	mov	r3, r0
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f43f af4d 	beq.w	8019084 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80191ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d00d      	beq.n	801920c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80191f0:	f002 fc78 	bl	801bae4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80191f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191f6:	f000 f8f0 	bl	80193da <prvGetDisinheritPriorityAfterTimeout>
 80191fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80191fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fe:	689b      	ldr	r3, [r3, #8]
 8019200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019202:	4618      	mov	r0, r3
 8019204:	f001 fdc4 	bl	801ad90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8019208:	f002 fc9c 	bl	801bb44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801920c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801920e:	4618      	mov	r0, r3
 8019210:	3738      	adds	r7, #56	; 0x38
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	e000ed04 	.word	0xe000ed04

0801921c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b08e      	sub	sp, #56	; 0x38
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801922e:	2b00      	cmp	r3, #0
 8019230:	d10a      	bne.n	8019248 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8019232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019236:	f383 8811 	msr	BASEPRI, r3
 801923a:	f3bf 8f6f 	isb	sy
 801923e:	f3bf 8f4f 	dsb	sy
 8019242:	623b      	str	r3, [r7, #32]
}
 8019244:	bf00      	nop
 8019246:	e7fe      	b.n	8019246 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d103      	bne.n	8019256 <xQueueReceiveFromISR+0x3a>
 801924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019252:	2b00      	cmp	r3, #0
 8019254:	d101      	bne.n	801925a <xQueueReceiveFromISR+0x3e>
 8019256:	2301      	movs	r3, #1
 8019258:	e000      	b.n	801925c <xQueueReceiveFromISR+0x40>
 801925a:	2300      	movs	r3, #0
 801925c:	2b00      	cmp	r3, #0
 801925e:	d10a      	bne.n	8019276 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8019260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019264:	f383 8811 	msr	BASEPRI, r3
 8019268:	f3bf 8f6f 	isb	sy
 801926c:	f3bf 8f4f 	dsb	sy
 8019270:	61fb      	str	r3, [r7, #28]
}
 8019272:	bf00      	nop
 8019274:	e7fe      	b.n	8019274 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019276:	f002 fd17 	bl	801bca8 <vPortValidateInterruptPriority>
	__asm volatile
 801927a:	f3ef 8211 	mrs	r2, BASEPRI
 801927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019282:	f383 8811 	msr	BASEPRI, r3
 8019286:	f3bf 8f6f 	isb	sy
 801928a:	f3bf 8f4f 	dsb	sy
 801928e:	61ba      	str	r2, [r7, #24]
 8019290:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019292:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019294:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801929a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d02f      	beq.n	8019302 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80192a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80192a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192ac:	68b9      	ldr	r1, [r7, #8]
 80192ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192b0:	f000 f915 	bl	80194de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80192b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192b6:	1e5a      	subs	r2, r3, #1
 80192b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80192bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80192c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192c4:	d112      	bne.n	80192ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80192c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192c8:	691b      	ldr	r3, [r3, #16]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d016      	beq.n	80192fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80192ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192d0:	3310      	adds	r3, #16
 80192d2:	4618      	mov	r0, r3
 80192d4:	f001 fa70 	bl	801a7b8 <xTaskRemoveFromEventList>
 80192d8:	4603      	mov	r3, r0
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d00e      	beq.n	80192fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d00b      	beq.n	80192fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	2201      	movs	r2, #1
 80192e8:	601a      	str	r2, [r3, #0]
 80192ea:	e007      	b.n	80192fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80192ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192f0:	3301      	adds	r3, #1
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	b25a      	sxtb	r2, r3
 80192f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80192fc:	2301      	movs	r3, #1
 80192fe:	637b      	str	r3, [r7, #52]	; 0x34
 8019300:	e001      	b.n	8019306 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8019302:	2300      	movs	r3, #0
 8019304:	637b      	str	r3, [r7, #52]	; 0x34
 8019306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019308:	613b      	str	r3, [r7, #16]
	__asm volatile
 801930a:	693b      	ldr	r3, [r7, #16]
 801930c:	f383 8811 	msr	BASEPRI, r3
}
 8019310:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019314:	4618      	mov	r0, r3
 8019316:	3738      	adds	r7, #56	; 0x38
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b084      	sub	sp, #16
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d10a      	bne.n	8019340 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801932e:	f383 8811 	msr	BASEPRI, r3
 8019332:	f3bf 8f6f 	isb	sy
 8019336:	f3bf 8f4f 	dsb	sy
 801933a:	60bb      	str	r3, [r7, #8]
}
 801933c:	bf00      	nop
 801933e:	e7fe      	b.n	801933e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8019340:	f002 fbd0 	bl	801bae4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019348:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801934a:	f002 fbfb 	bl	801bb44 <vPortExitCritical>

	return uxReturn;
 801934e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019350:	4618      	mov	r0, r3
 8019352:	3710      	adds	r7, #16
 8019354:	46bd      	mov	sp, r7
 8019356:	bd80      	pop	{r7, pc}

08019358 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8019358:	b480      	push	{r7}
 801935a:	b087      	sub	sp, #28
 801935c:	af00      	add	r7, sp, #0
 801935e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8019364:	697b      	ldr	r3, [r7, #20]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d10a      	bne.n	8019380 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801936e:	f383 8811 	msr	BASEPRI, r3
 8019372:	f3bf 8f6f 	isb	sy
 8019376:	f3bf 8f4f 	dsb	sy
 801937a:	60fb      	str	r3, [r7, #12]
}
 801937c:	bf00      	nop
 801937e:	e7fe      	b.n	801937e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8019380:	697b      	ldr	r3, [r7, #20]
 8019382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019384:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8019386:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8019388:	4618      	mov	r0, r3
 801938a:	371c      	adds	r7, #28
 801938c:	46bd      	mov	sp, r7
 801938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019392:	4770      	bx	lr

08019394 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d10a      	bne.n	80193bc <vQueueDelete+0x28>
	__asm volatile
 80193a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193aa:	f383 8811 	msr	BASEPRI, r3
 80193ae:	f3bf 8f6f 	isb	sy
 80193b2:	f3bf 8f4f 	dsb	sy
 80193b6:	60bb      	str	r3, [r7, #8]
}
 80193b8:	bf00      	nop
 80193ba:	e7fe      	b.n	80193ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80193bc:	68f8      	ldr	r0, [r7, #12]
 80193be:	f000 f95f 	bl	8019680 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d102      	bne.n	80193d2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80193cc:	68f8      	ldr	r0, [r7, #12]
 80193ce:	f002 fd7b 	bl	801bec8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80193d2:	bf00      	nop
 80193d4:	3710      	adds	r7, #16
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}

080193da <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80193da:	b480      	push	{r7}
 80193dc:	b085      	sub	sp, #20
 80193de:	af00      	add	r7, sp, #0
 80193e0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d006      	beq.n	80193f8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80193f4:	60fb      	str	r3, [r7, #12]
 80193f6:	e001      	b.n	80193fc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80193f8:	2300      	movs	r3, #0
 80193fa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80193fc:	68fb      	ldr	r3, [r7, #12]
	}
 80193fe:	4618      	mov	r0, r3
 8019400:	3714      	adds	r7, #20
 8019402:	46bd      	mov	sp, r7
 8019404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019408:	4770      	bx	lr

0801940a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801940a:	b580      	push	{r7, lr}
 801940c:	b086      	sub	sp, #24
 801940e:	af00      	add	r7, sp, #0
 8019410:	60f8      	str	r0, [r7, #12]
 8019412:	60b9      	str	r1, [r7, #8]
 8019414:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019416:	2300      	movs	r3, #0
 8019418:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801941e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019424:	2b00      	cmp	r3, #0
 8019426:	d10d      	bne.n	8019444 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d14d      	bne.n	80194cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	689b      	ldr	r3, [r3, #8]
 8019434:	4618      	mov	r0, r3
 8019436:	f001 fc3d 	bl	801acb4 <xTaskPriorityDisinherit>
 801943a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	2200      	movs	r2, #0
 8019440:	609a      	str	r2, [r3, #8]
 8019442:	e043      	b.n	80194cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d119      	bne.n	801947e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	6858      	ldr	r0, [r3, #4]
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019452:	461a      	mov	r2, r3
 8019454:	68b9      	ldr	r1, [r7, #8]
 8019456:	f003 fa15 	bl	801c884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	685a      	ldr	r2, [r3, #4]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019462:	441a      	add	r2, r3
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	685a      	ldr	r2, [r3, #4]
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	689b      	ldr	r3, [r3, #8]
 8019470:	429a      	cmp	r2, r3
 8019472:	d32b      	bcc.n	80194cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	681a      	ldr	r2, [r3, #0]
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	605a      	str	r2, [r3, #4]
 801947c:	e026      	b.n	80194cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	68d8      	ldr	r0, [r3, #12]
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019486:	461a      	mov	r2, r3
 8019488:	68b9      	ldr	r1, [r7, #8]
 801948a:	f003 f9fb 	bl	801c884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	68da      	ldr	r2, [r3, #12]
 8019492:	68fb      	ldr	r3, [r7, #12]
 8019494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019496:	425b      	negs	r3, r3
 8019498:	441a      	add	r2, r3
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	68da      	ldr	r2, [r3, #12]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d207      	bcs.n	80194ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	689a      	ldr	r2, [r3, #8]
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194b2:	425b      	negs	r3, r3
 80194b4:	441a      	add	r2, r3
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2b02      	cmp	r3, #2
 80194be:	d105      	bne.n	80194cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80194c0:	693b      	ldr	r3, [r7, #16]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d002      	beq.n	80194cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80194c6:	693b      	ldr	r3, [r7, #16]
 80194c8:	3b01      	subs	r3, #1
 80194ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80194cc:	693b      	ldr	r3, [r7, #16]
 80194ce:	1c5a      	adds	r2, r3, #1
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80194d4:	697b      	ldr	r3, [r7, #20]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3718      	adds	r7, #24
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}

080194de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80194de:	b580      	push	{r7, lr}
 80194e0:	b082      	sub	sp, #8
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
 80194e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d018      	beq.n	8019522 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	68da      	ldr	r2, [r3, #12]
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194f8:	441a      	add	r2, r3
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	68da      	ldr	r2, [r3, #12]
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	689b      	ldr	r3, [r3, #8]
 8019506:	429a      	cmp	r2, r3
 8019508:	d303      	bcc.n	8019512 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681a      	ldr	r2, [r3, #0]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	68d9      	ldr	r1, [r3, #12]
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801951a:	461a      	mov	r2, r3
 801951c:	6838      	ldr	r0, [r7, #0]
 801951e:	f003 f9b1 	bl	801c884 <memcpy>
	}
}
 8019522:	bf00      	nop
 8019524:	3708      	adds	r7, #8
 8019526:	46bd      	mov	sp, r7
 8019528:	bd80      	pop	{r7, pc}

0801952a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801952a:	b580      	push	{r7, lr}
 801952c:	b084      	sub	sp, #16
 801952e:	af00      	add	r7, sp, #0
 8019530:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019532:	f002 fad7 	bl	801bae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801953c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801953e:	e011      	b.n	8019564 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019544:	2b00      	cmp	r3, #0
 8019546:	d012      	beq.n	801956e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	3324      	adds	r3, #36	; 0x24
 801954c:	4618      	mov	r0, r3
 801954e:	f001 f933 	bl	801a7b8 <xTaskRemoveFromEventList>
 8019552:	4603      	mov	r3, r0
 8019554:	2b00      	cmp	r3, #0
 8019556:	d001      	beq.n	801955c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019558:	f001 fa30 	bl	801a9bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801955c:	7bfb      	ldrb	r3, [r7, #15]
 801955e:	3b01      	subs	r3, #1
 8019560:	b2db      	uxtb	r3, r3
 8019562:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019568:	2b00      	cmp	r3, #0
 801956a:	dce9      	bgt.n	8019540 <prvUnlockQueue+0x16>
 801956c:	e000      	b.n	8019570 <prvUnlockQueue+0x46>
					break;
 801956e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	22ff      	movs	r2, #255	; 0xff
 8019574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019578:	f002 fae4 	bl	801bb44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801957c:	f002 fab2 	bl	801bae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019586:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019588:	e011      	b.n	80195ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	691b      	ldr	r3, [r3, #16]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d012      	beq.n	80195b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	3310      	adds	r3, #16
 8019596:	4618      	mov	r0, r3
 8019598:	f001 f90e 	bl	801a7b8 <xTaskRemoveFromEventList>
 801959c:	4603      	mov	r3, r0
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d001      	beq.n	80195a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80195a2:	f001 fa0b 	bl	801a9bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80195a6:	7bbb      	ldrb	r3, [r7, #14]
 80195a8:	3b01      	subs	r3, #1
 80195aa:	b2db      	uxtb	r3, r3
 80195ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80195ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	dce9      	bgt.n	801958a <prvUnlockQueue+0x60>
 80195b6:	e000      	b.n	80195ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80195b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	22ff      	movs	r2, #255	; 0xff
 80195be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80195c2:	f002 fabf 	bl	801bb44 <vPortExitCritical>
}
 80195c6:	bf00      	nop
 80195c8:	3710      	adds	r7, #16
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd80      	pop	{r7, pc}

080195ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80195ce:	b580      	push	{r7, lr}
 80195d0:	b084      	sub	sp, #16
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80195d6:	f002 fa85 	bl	801bae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d102      	bne.n	80195e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80195e2:	2301      	movs	r3, #1
 80195e4:	60fb      	str	r3, [r7, #12]
 80195e6:	e001      	b.n	80195ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80195e8:	2300      	movs	r3, #0
 80195ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80195ec:	f002 faaa 	bl	801bb44 <vPortExitCritical>

	return xReturn;
 80195f0:	68fb      	ldr	r3, [r7, #12]
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	3710      	adds	r7, #16
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}

080195fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80195fa:	b580      	push	{r7, lr}
 80195fc:	b084      	sub	sp, #16
 80195fe:	af00      	add	r7, sp, #0
 8019600:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019602:	f002 fa6f 	bl	801bae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801960e:	429a      	cmp	r2, r3
 8019610:	d102      	bne.n	8019618 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019612:	2301      	movs	r3, #1
 8019614:	60fb      	str	r3, [r7, #12]
 8019616:	e001      	b.n	801961c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8019618:	2300      	movs	r3, #0
 801961a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801961c:	f002 fa92 	bl	801bb44 <vPortExitCritical>

	return xReturn;
 8019620:	68fb      	ldr	r3, [r7, #12]
}
 8019622:	4618      	mov	r0, r3
 8019624:	3710      	adds	r7, #16
 8019626:	46bd      	mov	sp, r7
 8019628:	bd80      	pop	{r7, pc}
	...

0801962c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801962c:	b480      	push	{r7}
 801962e:	b085      	sub	sp, #20
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019636:	2300      	movs	r3, #0
 8019638:	60fb      	str	r3, [r7, #12]
 801963a:	e014      	b.n	8019666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801963c:	4a0f      	ldr	r2, [pc, #60]	; (801967c <vQueueAddToRegistry+0x50>)
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d10b      	bne.n	8019660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019648:	490c      	ldr	r1, [pc, #48]	; (801967c <vQueueAddToRegistry+0x50>)
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	683a      	ldr	r2, [r7, #0]
 801964e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019652:	4a0a      	ldr	r2, [pc, #40]	; (801967c <vQueueAddToRegistry+0x50>)
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	00db      	lsls	r3, r3, #3
 8019658:	4413      	add	r3, r2
 801965a:	687a      	ldr	r2, [r7, #4]
 801965c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801965e:	e006      	b.n	801966e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	3301      	adds	r3, #1
 8019664:	60fb      	str	r3, [r7, #12]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2b07      	cmp	r3, #7
 801966a:	d9e7      	bls.n	801963c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801966c:	bf00      	nop
 801966e:	bf00      	nop
 8019670:	3714      	adds	r7, #20
 8019672:	46bd      	mov	sp, r7
 8019674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019678:	4770      	bx	lr
 801967a:	bf00      	nop
 801967c:	20001f54 	.word	0x20001f54

08019680 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8019680:	b480      	push	{r7}
 8019682:	b085      	sub	sp, #20
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019688:	2300      	movs	r3, #0
 801968a:	60fb      	str	r3, [r7, #12]
 801968c:	e016      	b.n	80196bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801968e:	4a10      	ldr	r2, [pc, #64]	; (80196d0 <vQueueUnregisterQueue+0x50>)
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	00db      	lsls	r3, r3, #3
 8019694:	4413      	add	r3, r2
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	429a      	cmp	r2, r3
 801969c:	d10b      	bne.n	80196b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801969e:	4a0c      	ldr	r2, [pc, #48]	; (80196d0 <vQueueUnregisterQueue+0x50>)
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	2100      	movs	r1, #0
 80196a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80196a8:	4a09      	ldr	r2, [pc, #36]	; (80196d0 <vQueueUnregisterQueue+0x50>)
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	00db      	lsls	r3, r3, #3
 80196ae:	4413      	add	r3, r2
 80196b0:	2200      	movs	r2, #0
 80196b2:	605a      	str	r2, [r3, #4]
				break;
 80196b4:	e006      	b.n	80196c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	3301      	adds	r3, #1
 80196ba:	60fb      	str	r3, [r7, #12]
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	2b07      	cmp	r3, #7
 80196c0:	d9e5      	bls.n	801968e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80196c2:	bf00      	nop
 80196c4:	bf00      	nop
 80196c6:	3714      	adds	r7, #20
 80196c8:	46bd      	mov	sp, r7
 80196ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ce:	4770      	bx	lr
 80196d0:	20001f54 	.word	0x20001f54

080196d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b086      	sub	sp, #24
 80196d8:	af00      	add	r7, sp, #0
 80196da:	60f8      	str	r0, [r7, #12]
 80196dc:	60b9      	str	r1, [r7, #8]
 80196de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80196e4:	f002 f9fe 	bl	801bae4 <vPortEnterCritical>
 80196e8:	697b      	ldr	r3, [r7, #20]
 80196ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80196ee:	b25b      	sxtb	r3, r3
 80196f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196f4:	d103      	bne.n	80196fe <vQueueWaitForMessageRestricted+0x2a>
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	2200      	movs	r2, #0
 80196fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019704:	b25b      	sxtb	r3, r3
 8019706:	f1b3 3fff 	cmp.w	r3, #4294967295
 801970a:	d103      	bne.n	8019714 <vQueueWaitForMessageRestricted+0x40>
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	2200      	movs	r2, #0
 8019710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019714:	f002 fa16 	bl	801bb44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801971c:	2b00      	cmp	r3, #0
 801971e:	d106      	bne.n	801972e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	3324      	adds	r3, #36	; 0x24
 8019724:	687a      	ldr	r2, [r7, #4]
 8019726:	68b9      	ldr	r1, [r7, #8]
 8019728:	4618      	mov	r0, r3
 801972a:	f001 f819 	bl	801a760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801972e:	6978      	ldr	r0, [r7, #20]
 8019730:	f7ff fefb 	bl	801952a <prvUnlockQueue>
	}
 8019734:	bf00      	nop
 8019736:	3718      	adds	r7, #24
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}

0801973c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 801973c:	b580      	push	{r7, lr}
 801973e:	b08c      	sub	sp, #48	; 0x30
 8019740:	af02      	add	r7, sp, #8
 8019742:	60f8      	str	r0, [r7, #12]
 8019744:	60b9      	str	r1, [r7, #8]
 8019746:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2b01      	cmp	r3, #1
 801974c:	d110      	bne.n	8019770 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801974e:	2301      	movs	r3, #1
 8019750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	2b04      	cmp	r3, #4
 8019758:	d81b      	bhi.n	8019792 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 801975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801975e:	f383 8811 	msr	BASEPRI, r3
 8019762:	f3bf 8f6f 	isb	sy
 8019766:	f3bf 8f4f 	dsb	sy
 801976a:	61fb      	str	r3, [r7, #28]
}
 801976c:	bf00      	nop
 801976e:	e7fe      	b.n	801976e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8019776:	68fb      	ldr	r3, [r7, #12]
 8019778:	2b00      	cmp	r3, #0
 801977a:	d10a      	bne.n	8019792 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 801977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019780:	f383 8811 	msr	BASEPRI, r3
 8019784:	f3bf 8f6f 	isb	sy
 8019788:	f3bf 8f4f 	dsb	sy
 801978c:	61bb      	str	r3, [r7, #24]
}
 801978e:	bf00      	nop
 8019790:	e7fe      	b.n	8019790 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8019792:	68ba      	ldr	r2, [r7, #8]
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	429a      	cmp	r2, r3
 8019798:	d90a      	bls.n	80197b0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 801979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801979e:	f383 8811 	msr	BASEPRI, r3
 80197a2:	f3bf 8f6f 	isb	sy
 80197a6:	f3bf 8f4f 	dsb	sy
 80197aa:	617b      	str	r3, [r7, #20]
}
 80197ac:	bf00      	nop
 80197ae:	e7fe      	b.n	80197ae <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d101      	bne.n	80197ba <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80197b6:	2301      	movs	r3, #1
 80197b8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	3301      	adds	r3, #1
 80197be:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	3324      	adds	r3, #36	; 0x24
 80197c4:	4618      	mov	r0, r3
 80197c6:	f002 faaf 	bl	801bd28 <pvPortMalloc>
 80197ca:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80197cc:	6a3b      	ldr	r3, [r7, #32]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d00a      	beq.n	80197e8 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80197d2:	6a3b      	ldr	r3, [r7, #32]
 80197d4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80197d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197dc:	9300      	str	r3, [sp, #0]
 80197de:	68bb      	ldr	r3, [r7, #8]
 80197e0:	68fa      	ldr	r2, [r7, #12]
 80197e2:	6a38      	ldr	r0, [r7, #32]
 80197e4:	f000 fafd 	bl	8019de2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80197e8:	6a3b      	ldr	r3, [r7, #32]
	}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3728      	adds	r7, #40	; 0x28
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}

080197f2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80197f2:	b480      	push	{r7}
 80197f4:	b087      	sub	sp, #28
 80197f6:	af00      	add	r7, sp, #0
 80197f8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d10a      	bne.n	801981a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8019804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019808:	f383 8811 	msr	BASEPRI, r3
 801980c:	f3bf 8f6f 	isb	sy
 8019810:	f3bf 8f4f 	dsb	sy
 8019814:	60fb      	str	r3, [r7, #12]
}
 8019816:	bf00      	nop
 8019818:	e7fe      	b.n	8019818 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 801981a:	693b      	ldr	r3, [r7, #16]
 801981c:	689a      	ldr	r2, [r3, #8]
 801981e:	693b      	ldr	r3, [r7, #16]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	4413      	add	r3, r2
 8019824:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	697a      	ldr	r2, [r7, #20]
 801982c:	1ad3      	subs	r3, r2, r3
 801982e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8019830:	697b      	ldr	r3, [r7, #20]
 8019832:	3b01      	subs	r3, #1
 8019834:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8019836:	693b      	ldr	r3, [r7, #16]
 8019838:	689b      	ldr	r3, [r3, #8]
 801983a:	697a      	ldr	r2, [r7, #20]
 801983c:	429a      	cmp	r2, r3
 801983e:	d304      	bcc.n	801984a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	689b      	ldr	r3, [r3, #8]
 8019844:	697a      	ldr	r2, [r7, #20]
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 801984a:	697b      	ldr	r3, [r7, #20]
}
 801984c:	4618      	mov	r0, r3
 801984e:	371c      	adds	r7, #28
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr

08019858 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b090      	sub	sp, #64	; 0x40
 801985c:	af02      	add	r7, sp, #8
 801985e:	60f8      	str	r0, [r7, #12]
 8019860:	60b9      	str	r1, [r7, #8]
 8019862:	607a      	str	r2, [r7, #4]
 8019864:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 801986a:	2300      	movs	r3, #0
 801986c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8019872:	68bb      	ldr	r3, [r7, #8]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d10a      	bne.n	801988e <xStreamBufferSend+0x36>
	__asm volatile
 8019878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801987c:	f383 8811 	msr	BASEPRI, r3
 8019880:	f3bf 8f6f 	isb	sy
 8019884:	f3bf 8f4f 	dsb	sy
 8019888:	627b      	str	r3, [r7, #36]	; 0x24
}
 801988a:	bf00      	nop
 801988c:	e7fe      	b.n	801988c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 801988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019890:	2b00      	cmp	r3, #0
 8019892:	d10a      	bne.n	80198aa <xStreamBufferSend+0x52>
	__asm volatile
 8019894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019898:	f383 8811 	msr	BASEPRI, r3
 801989c:	f3bf 8f6f 	isb	sy
 80198a0:	f3bf 8f4f 	dsb	sy
 80198a4:	623b      	str	r3, [r7, #32]
}
 80198a6:	bf00      	nop
 80198a8:	e7fe      	b.n	80198a8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80198aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ac:	7f1b      	ldrb	r3, [r3, #28]
 80198ae:	f003 0301 	and.w	r3, r3, #1
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d011      	beq.n	80198da <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80198b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b8:	3304      	adds	r3, #4
 80198ba:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80198bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d80a      	bhi.n	80198da <xStreamBufferSend+0x82>
	__asm volatile
 80198c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c8:	f383 8811 	msr	BASEPRI, r3
 80198cc:	f3bf 8f6f 	isb	sy
 80198d0:	f3bf 8f4f 	dsb	sy
 80198d4:	61fb      	str	r3, [r7, #28]
}
 80198d6:	bf00      	nop
 80198d8:	e7fe      	b.n	80198d8 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d03e      	beq.n	801995e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80198e0:	f107 0310 	add.w	r3, r7, #16
 80198e4:	4618      	mov	r0, r3
 80198e6:	f000 ffcb 	bl	801a880 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80198ea:	f002 f8fb 	bl	801bae4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80198ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80198f0:	f7ff ff7f 	bl	80197f2 <xStreamBufferSpacesAvailable>
 80198f4:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80198f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80198f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fa:	429a      	cmp	r2, r3
 80198fc:	d217      	bcs.n	801992e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80198fe:	2000      	movs	r0, #0
 8019900:	f001 fbfa 	bl	801b0f8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8019904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019906:	695b      	ldr	r3, [r3, #20]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d00a      	beq.n	8019922 <xStreamBufferSend+0xca>
	__asm volatile
 801990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019910:	f383 8811 	msr	BASEPRI, r3
 8019914:	f3bf 8f6f 	isb	sy
 8019918:	f3bf 8f4f 	dsb	sy
 801991c:	61bb      	str	r3, [r7, #24]
}
 801991e:	bf00      	nop
 8019920:	e7fe      	b.n	8019920 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8019922:	f001 f931 	bl	801ab88 <xTaskGetCurrentTaskHandle>
 8019926:	4602      	mov	r2, r0
 8019928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992a:	615a      	str	r2, [r3, #20]
 801992c:	e002      	b.n	8019934 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 801992e:	f002 f909 	bl	801bb44 <vPortExitCritical>
					break;
 8019932:	e014      	b.n	801995e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8019934:	f002 f906 	bl	801bb44 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	2200      	movs	r2, #0
 801993c:	2100      	movs	r1, #0
 801993e:	2000      	movs	r0, #0
 8019940:	f001 fabc 	bl	801aebc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8019944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019946:	2200      	movs	r2, #0
 8019948:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 801994a:	463a      	mov	r2, r7
 801994c:	f107 0310 	add.w	r3, r7, #16
 8019950:	4611      	mov	r1, r2
 8019952:	4618      	mov	r0, r3
 8019954:	f000 ffd0 	bl	801a8f8 <xTaskCheckForTimeOut>
 8019958:	4603      	mov	r3, r0
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0c5      	beq.n	80198ea <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 801995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019960:	2b00      	cmp	r3, #0
 8019962:	d103      	bne.n	801996c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8019964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019966:	f7ff ff44 	bl	80197f2 <xStreamBufferSpacesAvailable>
 801996a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 801996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801996e:	9300      	str	r3, [sp, #0]
 8019970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019972:	687a      	ldr	r2, [r7, #4]
 8019974:	68b9      	ldr	r1, [r7, #8]
 8019976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019978:	f000 f823 	bl	80199c2 <prvWriteMessageToBuffer>
 801997c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 801997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019980:	2b00      	cmp	r3, #0
 8019982:	d019      	beq.n	80199b8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8019984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019986:	f000 fa0c 	bl	8019da2 <prvBytesInBuffer>
 801998a:	4602      	mov	r2, r0
 801998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801998e:	68db      	ldr	r3, [r3, #12]
 8019990:	429a      	cmp	r2, r3
 8019992:	d311      	bcc.n	80199b8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8019994:	f000 fcba 	bl	801a30c <vTaskSuspendAll>
 8019998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801999a:	691b      	ldr	r3, [r3, #16]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d009      	beq.n	80199b4 <xStreamBufferSend+0x15c>
 80199a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a2:	6918      	ldr	r0, [r3, #16]
 80199a4:	2300      	movs	r3, #0
 80199a6:	2200      	movs	r2, #0
 80199a8:	2100      	movs	r1, #0
 80199aa:	f001 fae7 	bl	801af7c <xTaskGenericNotify>
 80199ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b0:	2200      	movs	r2, #0
 80199b2:	611a      	str	r2, [r3, #16]
 80199b4:	f000 fcb8 	bl	801a328 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80199b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80199ba:	4618      	mov	r0, r3
 80199bc:	3738      	adds	r7, #56	; 0x38
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}

080199c2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80199c2:	b580      	push	{r7, lr}
 80199c4:	b086      	sub	sp, #24
 80199c6:	af00      	add	r7, sp, #0
 80199c8:	60f8      	str	r0, [r7, #12]
 80199ca:	60b9      	str	r1, [r7, #8]
 80199cc:	607a      	str	r2, [r7, #4]
 80199ce:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d102      	bne.n	80199dc <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80199d6:	2300      	movs	r3, #0
 80199d8:	617b      	str	r3, [r7, #20]
 80199da:	e01d      	b.n	8019a18 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	7f1b      	ldrb	r3, [r3, #28]
 80199e0:	f003 0301 	and.w	r3, r3, #1
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d108      	bne.n	80199fa <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80199e8:	2301      	movs	r3, #1
 80199ea:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80199ec:	687a      	ldr	r2, [r7, #4]
 80199ee:	683b      	ldr	r3, [r7, #0]
 80199f0:	4293      	cmp	r3, r2
 80199f2:	bf28      	it	cs
 80199f4:	4613      	movcs	r3, r2
 80199f6:	607b      	str	r3, [r7, #4]
 80199f8:	e00e      	b.n	8019a18 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80199fa:	683a      	ldr	r2, [r7, #0]
 80199fc:	6a3b      	ldr	r3, [r7, #32]
 80199fe:	429a      	cmp	r2, r3
 8019a00:	d308      	bcc.n	8019a14 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8019a02:	2301      	movs	r3, #1
 8019a04:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8019a06:	1d3b      	adds	r3, r7, #4
 8019a08:	2204      	movs	r2, #4
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	68f8      	ldr	r0, [r7, #12]
 8019a0e:	f000 f8dc 	bl	8019bca <prvWriteBytesToBuffer>
 8019a12:	e001      	b.n	8019a18 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8019a14:	2300      	movs	r3, #0
 8019a16:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d007      	beq.n	8019a2e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	461a      	mov	r2, r3
 8019a22:	68b9      	ldr	r1, [r7, #8]
 8019a24:	68f8      	ldr	r0, [r7, #12]
 8019a26:	f000 f8d0 	bl	8019bca <prvWriteBytesToBuffer>
 8019a2a:	6138      	str	r0, [r7, #16]
 8019a2c:	e001      	b.n	8019a32 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8019a32:	693b      	ldr	r3, [r7, #16]
}
 8019a34:	4618      	mov	r0, r3
 8019a36:	3718      	adds	r7, #24
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	bd80      	pop	{r7, pc}

08019a3c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b08e      	sub	sp, #56	; 0x38
 8019a40:	af02      	add	r7, sp, #8
 8019a42:	60f8      	str	r0, [r7, #12]
 8019a44:	60b9      	str	r1, [r7, #8]
 8019a46:	607a      	str	r2, [r7, #4]
 8019a48:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8019a4e:	2300      	movs	r3, #0
 8019a50:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d10a      	bne.n	8019a6e <xStreamBufferReceive+0x32>
	__asm volatile
 8019a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a5c:	f383 8811 	msr	BASEPRI, r3
 8019a60:	f3bf 8f6f 	isb	sy
 8019a64:	f3bf 8f4f 	dsb	sy
 8019a68:	61fb      	str	r3, [r7, #28]
}
 8019a6a:	bf00      	nop
 8019a6c:	e7fe      	b.n	8019a6c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8019a6e:	6a3b      	ldr	r3, [r7, #32]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d10a      	bne.n	8019a8a <xStreamBufferReceive+0x4e>
	__asm volatile
 8019a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a78:	f383 8811 	msr	BASEPRI, r3
 8019a7c:	f3bf 8f6f 	isb	sy
 8019a80:	f3bf 8f4f 	dsb	sy
 8019a84:	61bb      	str	r3, [r7, #24]
}
 8019a86:	bf00      	nop
 8019a88:	e7fe      	b.n	8019a88 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8019a8a:	6a3b      	ldr	r3, [r7, #32]
 8019a8c:	7f1b      	ldrb	r3, [r3, #28]
 8019a8e:	f003 0301 	and.w	r3, r3, #1
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d002      	beq.n	8019a9c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8019a96:	2304      	movs	r3, #4
 8019a98:	627b      	str	r3, [r7, #36]	; 0x24
 8019a9a:	e001      	b.n	8019aa0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d034      	beq.n	8019b10 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8019aa6:	f002 f81d 	bl	801bae4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019aaa:	6a38      	ldr	r0, [r7, #32]
 8019aac:	f000 f979 	bl	8019da2 <prvBytesInBuffer>
 8019ab0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8019ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d816      	bhi.n	8019ae8 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8019aba:	2000      	movs	r0, #0
 8019abc:	f001 fb1c 	bl	801b0f8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8019ac0:	6a3b      	ldr	r3, [r7, #32]
 8019ac2:	691b      	ldr	r3, [r3, #16]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d00a      	beq.n	8019ade <xStreamBufferReceive+0xa2>
	__asm volatile
 8019ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019acc:	f383 8811 	msr	BASEPRI, r3
 8019ad0:	f3bf 8f6f 	isb	sy
 8019ad4:	f3bf 8f4f 	dsb	sy
 8019ad8:	617b      	str	r3, [r7, #20]
}
 8019ada:	bf00      	nop
 8019adc:	e7fe      	b.n	8019adc <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8019ade:	f001 f853 	bl	801ab88 <xTaskGetCurrentTaskHandle>
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	6a3b      	ldr	r3, [r7, #32]
 8019ae6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8019ae8:	f002 f82c 	bl	801bb44 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8019aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d811      	bhi.n	8019b18 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	2200      	movs	r2, #0
 8019af8:	2100      	movs	r1, #0
 8019afa:	2000      	movs	r0, #0
 8019afc:	f001 f9de 	bl	801aebc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8019b00:	6a3b      	ldr	r3, [r7, #32]
 8019b02:	2200      	movs	r2, #0
 8019b04:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019b06:	6a38      	ldr	r0, [r7, #32]
 8019b08:	f000 f94b 	bl	8019da2 <prvBytesInBuffer>
 8019b0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8019b0e:	e003      	b.n	8019b18 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019b10:	6a38      	ldr	r0, [r7, #32]
 8019b12:	f000 f946 	bl	8019da2 <prvBytesInBuffer>
 8019b16:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8019b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d91d      	bls.n	8019b5c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8019b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b22:	9300      	str	r3, [sp, #0]
 8019b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	68b9      	ldr	r1, [r7, #8]
 8019b2a:	6a38      	ldr	r0, [r7, #32]
 8019b2c:	f000 f81b 	bl	8019b66 <prvReadMessageFromBuffer>
 8019b30:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8019b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d011      	beq.n	8019b5c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8019b38:	f000 fbe8 	bl	801a30c <vTaskSuspendAll>
 8019b3c:	6a3b      	ldr	r3, [r7, #32]
 8019b3e:	695b      	ldr	r3, [r3, #20]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d009      	beq.n	8019b58 <xStreamBufferReceive+0x11c>
 8019b44:	6a3b      	ldr	r3, [r7, #32]
 8019b46:	6958      	ldr	r0, [r3, #20]
 8019b48:	2300      	movs	r3, #0
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	2100      	movs	r1, #0
 8019b4e:	f001 fa15 	bl	801af7c <xTaskGenericNotify>
 8019b52:	6a3b      	ldr	r3, [r7, #32]
 8019b54:	2200      	movs	r2, #0
 8019b56:	615a      	str	r2, [r3, #20]
 8019b58:	f000 fbe6 	bl	801a328 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8019b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8019b5e:	4618      	mov	r0, r3
 8019b60:	3730      	adds	r7, #48	; 0x30
 8019b62:	46bd      	mov	sp, r7
 8019b64:	bd80      	pop	{r7, pc}

08019b66 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8019b66:	b580      	push	{r7, lr}
 8019b68:	b088      	sub	sp, #32
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	60f8      	str	r0, [r7, #12]
 8019b6e:	60b9      	str	r1, [r7, #8]
 8019b70:	607a      	str	r2, [r7, #4]
 8019b72:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8019b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d019      	beq.n	8019bae <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8019b80:	f107 0110 	add.w	r1, r7, #16
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b88:	68f8      	ldr	r0, [r7, #12]
 8019b8a:	f000 f890 	bl	8019cae <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8019b8e:	693b      	ldr	r3, [r7, #16]
 8019b90:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8019b92:	683a      	ldr	r2, [r7, #0]
 8019b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8019b9a:	69fa      	ldr	r2, [r7, #28]
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	d907      	bls.n	8019bb2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	69ba      	ldr	r2, [r7, #24]
 8019ba6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	61fb      	str	r3, [r7, #28]
 8019bac:	e001      	b.n	8019bb2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8019bb2:	683b      	ldr	r3, [r7, #0]
 8019bb4:	69fa      	ldr	r2, [r7, #28]
 8019bb6:	68b9      	ldr	r1, [r7, #8]
 8019bb8:	68f8      	ldr	r0, [r7, #12]
 8019bba:	f000 f878 	bl	8019cae <prvReadBytesFromBuffer>
 8019bbe:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8019bc0:	697b      	ldr	r3, [r7, #20]
}
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	3720      	adds	r7, #32
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	bd80      	pop	{r7, pc}

08019bca <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8019bca:	b580      	push	{r7, lr}
 8019bcc:	b08a      	sub	sp, #40	; 0x28
 8019bce:	af00      	add	r7, sp, #0
 8019bd0:	60f8      	str	r0, [r7, #12]
 8019bd2:	60b9      	str	r1, [r7, #8]
 8019bd4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d10a      	bne.n	8019bf2 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8019bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019be0:	f383 8811 	msr	BASEPRI, r3
 8019be4:	f3bf 8f6f 	isb	sy
 8019be8:	f3bf 8f4f 	dsb	sy
 8019bec:	61fb      	str	r3, [r7, #28]
}
 8019bee:	bf00      	nop
 8019bf0:	e7fe      	b.n	8019bf0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	685b      	ldr	r3, [r3, #4]
 8019bf6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	689a      	ldr	r2, [r3, #8]
 8019bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfe:	1ad3      	subs	r3, r2, r3
 8019c00:	687a      	ldr	r2, [r7, #4]
 8019c02:	4293      	cmp	r3, r2
 8019c04:	bf28      	it	cs
 8019c06:	4613      	movcs	r3, r2
 8019c08:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8019c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c0c:	6a3b      	ldr	r3, [r7, #32]
 8019c0e:	441a      	add	r2, r3
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	689b      	ldr	r3, [r3, #8]
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d90a      	bls.n	8019c2e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8019c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c1c:	f383 8811 	msr	BASEPRI, r3
 8019c20:	f3bf 8f6f 	isb	sy
 8019c24:	f3bf 8f4f 	dsb	sy
 8019c28:	61bb      	str	r3, [r7, #24]
}
 8019c2a:	bf00      	nop
 8019c2c:	e7fe      	b.n	8019c2c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	699a      	ldr	r2, [r3, #24]
 8019c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c34:	4413      	add	r3, r2
 8019c36:	6a3a      	ldr	r2, [r7, #32]
 8019c38:	68b9      	ldr	r1, [r7, #8]
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f002 fe22 	bl	801c884 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8019c40:	687a      	ldr	r2, [r7, #4]
 8019c42:	6a3b      	ldr	r3, [r7, #32]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d91c      	bls.n	8019c82 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8019c48:	687a      	ldr	r2, [r7, #4]
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	1ad2      	subs	r2, r2, r3
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	689b      	ldr	r3, [r3, #8]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d90a      	bls.n	8019c6c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8019c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c5a:	f383 8811 	msr	BASEPRI, r3
 8019c5e:	f3bf 8f6f 	isb	sy
 8019c62:	f3bf 8f4f 	dsb	sy
 8019c66:	617b      	str	r3, [r7, #20]
}
 8019c68:	bf00      	nop
 8019c6a:	e7fe      	b.n	8019c6a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	6998      	ldr	r0, [r3, #24]
 8019c70:	68ba      	ldr	r2, [r7, #8]
 8019c72:	6a3b      	ldr	r3, [r7, #32]
 8019c74:	18d1      	adds	r1, r2, r3
 8019c76:	687a      	ldr	r2, [r7, #4]
 8019c78:	6a3b      	ldr	r3, [r7, #32]
 8019c7a:	1ad3      	subs	r3, r2, r3
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	f002 fe01 	bl	801c884 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8019c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	4413      	add	r3, r2
 8019c88:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	689b      	ldr	r3, [r3, #8]
 8019c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d304      	bcc.n	8019c9e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	689b      	ldr	r3, [r3, #8]
 8019c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c9a:	1ad3      	subs	r3, r2, r3
 8019c9c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ca2:	605a      	str	r2, [r3, #4]

	return xCount;
 8019ca4:	687b      	ldr	r3, [r7, #4]
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3728      	adds	r7, #40	; 0x28
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}

08019cae <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8019cae:	b580      	push	{r7, lr}
 8019cb0:	b08a      	sub	sp, #40	; 0x28
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	60f8      	str	r0, [r7, #12]
 8019cb6:	60b9      	str	r1, [r7, #8]
 8019cb8:	607a      	str	r2, [r7, #4]
 8019cba:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8019cbc:	687a      	ldr	r2, [r7, #4]
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	4293      	cmp	r3, r2
 8019cc2:	bf28      	it	cs
 8019cc4:	4613      	movcs	r3, r2
 8019cc6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8019cc8:	6a3b      	ldr	r3, [r7, #32]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d064      	beq.n	8019d98 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	689a      	ldr	r2, [r3, #8]
 8019cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cda:	1ad3      	subs	r3, r2, r3
 8019cdc:	6a3a      	ldr	r2, [r7, #32]
 8019cde:	4293      	cmp	r3, r2
 8019ce0:	bf28      	it	cs
 8019ce2:	4613      	movcs	r3, r2
 8019ce4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8019ce6:	69fa      	ldr	r2, [r7, #28]
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d90a      	bls.n	8019d04 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8019cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cf2:	f383 8811 	msr	BASEPRI, r3
 8019cf6:	f3bf 8f6f 	isb	sy
 8019cfa:	f3bf 8f4f 	dsb	sy
 8019cfe:	61bb      	str	r3, [r7, #24]
}
 8019d00:	bf00      	nop
 8019d02:	e7fe      	b.n	8019d02 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8019d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d06:	69fb      	ldr	r3, [r7, #28]
 8019d08:	441a      	add	r2, r3
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	689b      	ldr	r3, [r3, #8]
 8019d0e:	429a      	cmp	r2, r3
 8019d10:	d90a      	bls.n	8019d28 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8019d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d16:	f383 8811 	msr	BASEPRI, r3
 8019d1a:	f3bf 8f6f 	isb	sy
 8019d1e:	f3bf 8f4f 	dsb	sy
 8019d22:	617b      	str	r3, [r7, #20]
}
 8019d24:	bf00      	nop
 8019d26:	e7fe      	b.n	8019d26 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	699a      	ldr	r2, [r3, #24]
 8019d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2e:	4413      	add	r3, r2
 8019d30:	69fa      	ldr	r2, [r7, #28]
 8019d32:	4619      	mov	r1, r3
 8019d34:	68b8      	ldr	r0, [r7, #8]
 8019d36:	f002 fda5 	bl	801c884 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8019d3a:	6a3a      	ldr	r2, [r7, #32]
 8019d3c:	69fb      	ldr	r3, [r7, #28]
 8019d3e:	429a      	cmp	r2, r3
 8019d40:	d919      	bls.n	8019d76 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8019d42:	6a3a      	ldr	r2, [r7, #32]
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	429a      	cmp	r2, r3
 8019d48:	d90a      	bls.n	8019d60 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8019d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d4e:	f383 8811 	msr	BASEPRI, r3
 8019d52:	f3bf 8f6f 	isb	sy
 8019d56:	f3bf 8f4f 	dsb	sy
 8019d5a:	613b      	str	r3, [r7, #16]
}
 8019d5c:	bf00      	nop
 8019d5e:	e7fe      	b.n	8019d5e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019d60:	68ba      	ldr	r2, [r7, #8]
 8019d62:	69fb      	ldr	r3, [r7, #28]
 8019d64:	18d0      	adds	r0, r2, r3
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	6999      	ldr	r1, [r3, #24]
 8019d6a:	6a3a      	ldr	r2, [r7, #32]
 8019d6c:	69fb      	ldr	r3, [r7, #28]
 8019d6e:	1ad3      	subs	r3, r2, r3
 8019d70:	461a      	mov	r2, r3
 8019d72:	f002 fd87 	bl	801c884 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8019d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d78:	6a3b      	ldr	r3, [r7, #32]
 8019d7a:	4413      	add	r3, r2
 8019d7c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	689b      	ldr	r3, [r3, #8]
 8019d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d304      	bcc.n	8019d92 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8019d88:	68fb      	ldr	r3, [r7, #12]
 8019d8a:	689b      	ldr	r3, [r3, #8]
 8019d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d8e:	1ad3      	subs	r3, r2, r3
 8019d90:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d96:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8019d98:	6a3b      	ldr	r3, [r7, #32]
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3728      	adds	r7, #40	; 0x28
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}

08019da2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8019da2:	b480      	push	{r7}
 8019da4:	b085      	sub	sp, #20
 8019da6:	af00      	add	r7, sp, #0
 8019da8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	689a      	ldr	r2, [r3, #8]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	685b      	ldr	r3, [r3, #4]
 8019db2:	4413      	add	r3, r2
 8019db4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	68fa      	ldr	r2, [r7, #12]
 8019dbc:	1ad3      	subs	r3, r2, r3
 8019dbe:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	689b      	ldr	r3, [r3, #8]
 8019dc4:	68fa      	ldr	r2, [r7, #12]
 8019dc6:	429a      	cmp	r2, r3
 8019dc8:	d304      	bcc.n	8019dd4 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	689b      	ldr	r3, [r3, #8]
 8019dce:	68fa      	ldr	r2, [r7, #12]
 8019dd0:	1ad3      	subs	r3, r2, r3
 8019dd2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3714      	adds	r7, #20
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de0:	4770      	bx	lr

08019de2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8019de2:	b580      	push	{r7, lr}
 8019de4:	b086      	sub	sp, #24
 8019de6:	af00      	add	r7, sp, #0
 8019de8:	60f8      	str	r0, [r7, #12]
 8019dea:	60b9      	str	r1, [r7, #8]
 8019dec:	607a      	str	r2, [r7, #4]
 8019dee:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8019df0:	2355      	movs	r3, #85	; 0x55
 8019df2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8019df4:	687a      	ldr	r2, [r7, #4]
 8019df6:	6979      	ldr	r1, [r7, #20]
 8019df8:	68b8      	ldr	r0, [r7, #8]
 8019dfa:	f002 fd51 	bl	801c8a0 <memset>
 8019dfe:	4602      	mov	r2, r0
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	4293      	cmp	r3, r2
 8019e04:	d00a      	beq.n	8019e1c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8019e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e0a:	f383 8811 	msr	BASEPRI, r3
 8019e0e:	f3bf 8f6f 	isb	sy
 8019e12:	f3bf 8f4f 	dsb	sy
 8019e16:	613b      	str	r3, [r7, #16]
}
 8019e18:	bf00      	nop
 8019e1a:	e7fe      	b.n	8019e1a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8019e1c:	2224      	movs	r2, #36	; 0x24
 8019e1e:	2100      	movs	r1, #0
 8019e20:	68f8      	ldr	r0, [r7, #12]
 8019e22:	f002 fd3d 	bl	801c8a0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	68ba      	ldr	r2, [r7, #8]
 8019e2a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	687a      	ldr	r2, [r7, #4]
 8019e30:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	683a      	ldr	r2, [r7, #0]
 8019e36:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019e3e:	771a      	strb	r2, [r3, #28]
}
 8019e40:	bf00      	nop
 8019e42:	3718      	adds	r7, #24
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b08e      	sub	sp, #56	; 0x38
 8019e4c:	af04      	add	r7, sp, #16
 8019e4e:	60f8      	str	r0, [r7, #12]
 8019e50:	60b9      	str	r1, [r7, #8]
 8019e52:	607a      	str	r2, [r7, #4]
 8019e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d10a      	bne.n	8019e72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8019e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e60:	f383 8811 	msr	BASEPRI, r3
 8019e64:	f3bf 8f6f 	isb	sy
 8019e68:	f3bf 8f4f 	dsb	sy
 8019e6c:	623b      	str	r3, [r7, #32]
}
 8019e6e:	bf00      	nop
 8019e70:	e7fe      	b.n	8019e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d10a      	bne.n	8019e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8019e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e7c:	f383 8811 	msr	BASEPRI, r3
 8019e80:	f3bf 8f6f 	isb	sy
 8019e84:	f3bf 8f4f 	dsb	sy
 8019e88:	61fb      	str	r3, [r7, #28]
}
 8019e8a:	bf00      	nop
 8019e8c:	e7fe      	b.n	8019e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8019e8e:	23c0      	movs	r3, #192	; 0xc0
 8019e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019e92:	693b      	ldr	r3, [r7, #16]
 8019e94:	2bc0      	cmp	r3, #192	; 0xc0
 8019e96:	d00a      	beq.n	8019eae <xTaskCreateStatic+0x66>
	__asm volatile
 8019e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e9c:	f383 8811 	msr	BASEPRI, r3
 8019ea0:	f3bf 8f6f 	isb	sy
 8019ea4:	f3bf 8f4f 	dsb	sy
 8019ea8:	61bb      	str	r3, [r7, #24]
}
 8019eaa:	bf00      	nop
 8019eac:	e7fe      	b.n	8019eac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d01e      	beq.n	8019ef4 <xTaskCreateStatic+0xac>
 8019eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d01b      	beq.n	8019ef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec8:	2202      	movs	r2, #2
 8019eca:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019ece:	2300      	movs	r3, #0
 8019ed0:	9303      	str	r3, [sp, #12]
 8019ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed4:	9302      	str	r3, [sp, #8]
 8019ed6:	f107 0314 	add.w	r3, r7, #20
 8019eda:	9301      	str	r3, [sp, #4]
 8019edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ede:	9300      	str	r3, [sp, #0]
 8019ee0:	683b      	ldr	r3, [r7, #0]
 8019ee2:	687a      	ldr	r2, [r7, #4]
 8019ee4:	68b9      	ldr	r1, [r7, #8]
 8019ee6:	68f8      	ldr	r0, [r7, #12]
 8019ee8:	f000 f850 	bl	8019f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019eee:	f000 f8f7 	bl	801a0e0 <prvAddNewTaskToReadyList>
 8019ef2:	e001      	b.n	8019ef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019ef4:	2300      	movs	r3, #0
 8019ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019ef8:	697b      	ldr	r3, [r7, #20]
	}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3728      	adds	r7, #40	; 0x28
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}

08019f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019f02:	b580      	push	{r7, lr}
 8019f04:	b08c      	sub	sp, #48	; 0x30
 8019f06:	af04      	add	r7, sp, #16
 8019f08:	60f8      	str	r0, [r7, #12]
 8019f0a:	60b9      	str	r1, [r7, #8]
 8019f0c:	603b      	str	r3, [r7, #0]
 8019f0e:	4613      	mov	r3, r2
 8019f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019f12:	88fb      	ldrh	r3, [r7, #6]
 8019f14:	009b      	lsls	r3, r3, #2
 8019f16:	4618      	mov	r0, r3
 8019f18:	f001 ff06 	bl	801bd28 <pvPortMalloc>
 8019f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d00e      	beq.n	8019f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019f24:	20c0      	movs	r0, #192	; 0xc0
 8019f26:	f001 feff 	bl	801bd28 <pvPortMalloc>
 8019f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d003      	beq.n	8019f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019f32:	69fb      	ldr	r3, [r7, #28]
 8019f34:	697a      	ldr	r2, [r7, #20]
 8019f36:	631a      	str	r2, [r3, #48]	; 0x30
 8019f38:	e005      	b.n	8019f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8019f3a:	6978      	ldr	r0, [r7, #20]
 8019f3c:	f001 ffc4 	bl	801bec8 <vPortFree>
 8019f40:	e001      	b.n	8019f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019f42:	2300      	movs	r3, #0
 8019f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019f46:	69fb      	ldr	r3, [r7, #28]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d017      	beq.n	8019f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019f4c:	69fb      	ldr	r3, [r7, #28]
 8019f4e:	2200      	movs	r2, #0
 8019f50:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019f54:	88fa      	ldrh	r2, [r7, #6]
 8019f56:	2300      	movs	r3, #0
 8019f58:	9303      	str	r3, [sp, #12]
 8019f5a:	69fb      	ldr	r3, [r7, #28]
 8019f5c:	9302      	str	r3, [sp, #8]
 8019f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f60:	9301      	str	r3, [sp, #4]
 8019f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f64:	9300      	str	r3, [sp, #0]
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	68b9      	ldr	r1, [r7, #8]
 8019f6a:	68f8      	ldr	r0, [r7, #12]
 8019f6c:	f000 f80e 	bl	8019f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019f70:	69f8      	ldr	r0, [r7, #28]
 8019f72:	f000 f8b5 	bl	801a0e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019f76:	2301      	movs	r3, #1
 8019f78:	61bb      	str	r3, [r7, #24]
 8019f7a:	e002      	b.n	8019f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019f82:	69bb      	ldr	r3, [r7, #24]
	}
 8019f84:	4618      	mov	r0, r3
 8019f86:	3720      	adds	r7, #32
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b088      	sub	sp, #32
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	60f8      	str	r0, [r7, #12]
 8019f94:	60b9      	str	r1, [r7, #8]
 8019f96:	607a      	str	r2, [r7, #4]
 8019f98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	009b      	lsls	r3, r3, #2
 8019fa2:	461a      	mov	r2, r3
 8019fa4:	21a5      	movs	r1, #165	; 0xa5
 8019fa6:	f002 fc7b 	bl	801c8a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019fb4:	3b01      	subs	r3, #1
 8019fb6:	009b      	lsls	r3, r3, #2
 8019fb8:	4413      	add	r3, r2
 8019fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019fbc:	69bb      	ldr	r3, [r7, #24]
 8019fbe:	f023 0307 	bic.w	r3, r3, #7
 8019fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019fc4:	69bb      	ldr	r3, [r7, #24]
 8019fc6:	f003 0307 	and.w	r3, r3, #7
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d00a      	beq.n	8019fe4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8019fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fd2:	f383 8811 	msr	BASEPRI, r3
 8019fd6:	f3bf 8f6f 	isb	sy
 8019fda:	f3bf 8f4f 	dsb	sy
 8019fde:	617b      	str	r3, [r7, #20]
}
 8019fe0:	bf00      	nop
 8019fe2:	e7fe      	b.n	8019fe2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d01f      	beq.n	801a02a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019fea:	2300      	movs	r3, #0
 8019fec:	61fb      	str	r3, [r7, #28]
 8019fee:	e012      	b.n	801a016 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019ff0:	68ba      	ldr	r2, [r7, #8]
 8019ff2:	69fb      	ldr	r3, [r7, #28]
 8019ff4:	4413      	add	r3, r2
 8019ff6:	7819      	ldrb	r1, [r3, #0]
 8019ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ffa:	69fb      	ldr	r3, [r7, #28]
 8019ffc:	4413      	add	r3, r2
 8019ffe:	3334      	adds	r3, #52	; 0x34
 801a000:	460a      	mov	r2, r1
 801a002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a004:	68ba      	ldr	r2, [r7, #8]
 801a006:	69fb      	ldr	r3, [r7, #28]
 801a008:	4413      	add	r3, r2
 801a00a:	781b      	ldrb	r3, [r3, #0]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d006      	beq.n	801a01e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a010:	69fb      	ldr	r3, [r7, #28]
 801a012:	3301      	adds	r3, #1
 801a014:	61fb      	str	r3, [r7, #28]
 801a016:	69fb      	ldr	r3, [r7, #28]
 801a018:	2b0f      	cmp	r3, #15
 801a01a:	d9e9      	bls.n	8019ff0 <prvInitialiseNewTask+0x64>
 801a01c:	e000      	b.n	801a020 <prvInitialiseNewTask+0x94>
			{
				break;
 801a01e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a022:	2200      	movs	r2, #0
 801a024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a028:	e003      	b.n	801a032 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a02c:	2200      	movs	r2, #0
 801a02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a034:	2b37      	cmp	r3, #55	; 0x37
 801a036:	d901      	bls.n	801a03c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a038:	2337      	movs	r3, #55	; 0x37
 801a03a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a040:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a046:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a04a:	2200      	movs	r2, #0
 801a04c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a050:	3304      	adds	r3, #4
 801a052:	4618      	mov	r0, r3
 801a054:	f7fe f9de 	bl	8018414 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a05a:	3318      	adds	r3, #24
 801a05c:	4618      	mov	r0, r3
 801a05e:	f7fe f9d9 	bl	8018414 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a076:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 801a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a07a:	2200      	movs	r2, #0
 801a07c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a080:	2200      	movs	r2, #0
 801a082:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a088:	2200      	movs	r2, #0
 801a08a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a090:	3358      	adds	r3, #88	; 0x58
 801a092:	2260      	movs	r2, #96	; 0x60
 801a094:	2100      	movs	r1, #0
 801a096:	4618      	mov	r0, r3
 801a098:	f002 fc02 	bl	801c8a0 <memset>
 801a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a09e:	4a0d      	ldr	r2, [pc, #52]	; (801a0d4 <prvInitialiseNewTask+0x148>)
 801a0a0:	65da      	str	r2, [r3, #92]	; 0x5c
 801a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0a4:	4a0c      	ldr	r2, [pc, #48]	; (801a0d8 <prvInitialiseNewTask+0x14c>)
 801a0a6:	661a      	str	r2, [r3, #96]	; 0x60
 801a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0aa:	4a0c      	ldr	r2, [pc, #48]	; (801a0dc <prvInitialiseNewTask+0x150>)
 801a0ac:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a0ae:	683a      	ldr	r2, [r7, #0]
 801a0b0:	68f9      	ldr	r1, [r7, #12]
 801a0b2:	69b8      	ldr	r0, [r7, #24]
 801a0b4:	f001 fbe8 	bl	801b888 <pxPortInitialiseStack>
 801a0b8:	4602      	mov	r2, r0
 801a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d002      	beq.n	801a0ca <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a0c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a0ca:	bf00      	nop
 801a0cc:	3720      	adds	r7, #32
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}
 801a0d2:	bf00      	nop
 801a0d4:	0801fe68 	.word	0x0801fe68
 801a0d8:	0801fe88 	.word	0x0801fe88
 801a0dc:	0801fe48 	.word	0x0801fe48

0801a0e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a0e8:	f001 fcfc 	bl	801bae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a0ec:	4b2d      	ldr	r3, [pc, #180]	; (801a1a4 <prvAddNewTaskToReadyList+0xc4>)
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	4a2c      	ldr	r2, [pc, #176]	; (801a1a4 <prvAddNewTaskToReadyList+0xc4>)
 801a0f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a0f6:	4b2c      	ldr	r3, [pc, #176]	; (801a1a8 <prvAddNewTaskToReadyList+0xc8>)
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d109      	bne.n	801a112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a0fe:	4a2a      	ldr	r2, [pc, #168]	; (801a1a8 <prvAddNewTaskToReadyList+0xc8>)
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a104:	4b27      	ldr	r3, [pc, #156]	; (801a1a4 <prvAddNewTaskToReadyList+0xc4>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b01      	cmp	r3, #1
 801a10a:	d110      	bne.n	801a12e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a10c:	f000 fc7a 	bl	801aa04 <prvInitialiseTaskLists>
 801a110:	e00d      	b.n	801a12e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a112:	4b26      	ldr	r3, [pc, #152]	; (801a1ac <prvAddNewTaskToReadyList+0xcc>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d109      	bne.n	801a12e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a11a:	4b23      	ldr	r3, [pc, #140]	; (801a1a8 <prvAddNewTaskToReadyList+0xc8>)
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a124:	429a      	cmp	r2, r3
 801a126:	d802      	bhi.n	801a12e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a128:	4a1f      	ldr	r2, [pc, #124]	; (801a1a8 <prvAddNewTaskToReadyList+0xc8>)
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a12e:	4b20      	ldr	r3, [pc, #128]	; (801a1b0 <prvAddNewTaskToReadyList+0xd0>)
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	3301      	adds	r3, #1
 801a134:	4a1e      	ldr	r2, [pc, #120]	; (801a1b0 <prvAddNewTaskToReadyList+0xd0>)
 801a136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a138:	4b1d      	ldr	r3, [pc, #116]	; (801a1b0 <prvAddNewTaskToReadyList+0xd0>)
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a144:	4b1b      	ldr	r3, [pc, #108]	; (801a1b4 <prvAddNewTaskToReadyList+0xd4>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	429a      	cmp	r2, r3
 801a14a:	d903      	bls.n	801a154 <prvAddNewTaskToReadyList+0x74>
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a150:	4a18      	ldr	r2, [pc, #96]	; (801a1b4 <prvAddNewTaskToReadyList+0xd4>)
 801a152:	6013      	str	r3, [r2, #0]
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a158:	4613      	mov	r3, r2
 801a15a:	009b      	lsls	r3, r3, #2
 801a15c:	4413      	add	r3, r2
 801a15e:	009b      	lsls	r3, r3, #2
 801a160:	4a15      	ldr	r2, [pc, #84]	; (801a1b8 <prvAddNewTaskToReadyList+0xd8>)
 801a162:	441a      	add	r2, r3
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	3304      	adds	r3, #4
 801a168:	4619      	mov	r1, r3
 801a16a:	4610      	mov	r0, r2
 801a16c:	f7fe f95f 	bl	801842e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a170:	f001 fce8 	bl	801bb44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a174:	4b0d      	ldr	r3, [pc, #52]	; (801a1ac <prvAddNewTaskToReadyList+0xcc>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d00e      	beq.n	801a19a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a17c:	4b0a      	ldr	r3, [pc, #40]	; (801a1a8 <prvAddNewTaskToReadyList+0xc8>)
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a186:	429a      	cmp	r2, r3
 801a188:	d207      	bcs.n	801a19a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a18a:	4b0c      	ldr	r3, [pc, #48]	; (801a1bc <prvAddNewTaskToReadyList+0xdc>)
 801a18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a190:	601a      	str	r2, [r3, #0]
 801a192:	f3bf 8f4f 	dsb	sy
 801a196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a19a:	bf00      	nop
 801a19c:	3708      	adds	r7, #8
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
 801a1a2:	bf00      	nop
 801a1a4:	20002468 	.word	0x20002468
 801a1a8:	20001f94 	.word	0x20001f94
 801a1ac:	20002474 	.word	0x20002474
 801a1b0:	20002484 	.word	0x20002484
 801a1b4:	20002470 	.word	0x20002470
 801a1b8:	20001f98 	.word	0x20001f98
 801a1bc:	e000ed04 	.word	0xe000ed04

0801a1c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b084      	sub	sp, #16
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d017      	beq.n	801a202 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a1d2:	4b13      	ldr	r3, [pc, #76]	; (801a220 <vTaskDelay+0x60>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d00a      	beq.n	801a1f0 <vTaskDelay+0x30>
	__asm volatile
 801a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1de:	f383 8811 	msr	BASEPRI, r3
 801a1e2:	f3bf 8f6f 	isb	sy
 801a1e6:	f3bf 8f4f 	dsb	sy
 801a1ea:	60bb      	str	r3, [r7, #8]
}
 801a1ec:	bf00      	nop
 801a1ee:	e7fe      	b.n	801a1ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a1f0:	f000 f88c 	bl	801a30c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f000 ffa4 	bl	801b144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a1fc:	f000 f894 	bl	801a328 <xTaskResumeAll>
 801a200:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d107      	bne.n	801a218 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801a208:	4b06      	ldr	r3, [pc, #24]	; (801a224 <vTaskDelay+0x64>)
 801a20a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a20e:	601a      	str	r2, [r3, #0]
 801a210:	f3bf 8f4f 	dsb	sy
 801a214:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a218:	bf00      	nop
 801a21a:	3710      	adds	r7, #16
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}
 801a220:	20002490 	.word	0x20002490
 801a224:	e000ed04 	.word	0xe000ed04

0801a228 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b08a      	sub	sp, #40	; 0x28
 801a22c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a22e:	2300      	movs	r3, #0
 801a230:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a232:	2300      	movs	r3, #0
 801a234:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a236:	463a      	mov	r2, r7
 801a238:	1d39      	adds	r1, r7, #4
 801a23a:	f107 0308 	add.w	r3, r7, #8
 801a23e:	4618      	mov	r0, r3
 801a240:	f7fe f894 	bl	801836c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a244:	6839      	ldr	r1, [r7, #0]
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	68ba      	ldr	r2, [r7, #8]
 801a24a:	9202      	str	r2, [sp, #8]
 801a24c:	9301      	str	r3, [sp, #4]
 801a24e:	2300      	movs	r3, #0
 801a250:	9300      	str	r3, [sp, #0]
 801a252:	2300      	movs	r3, #0
 801a254:	460a      	mov	r2, r1
 801a256:	4925      	ldr	r1, [pc, #148]	; (801a2ec <vTaskStartScheduler+0xc4>)
 801a258:	4825      	ldr	r0, [pc, #148]	; (801a2f0 <vTaskStartScheduler+0xc8>)
 801a25a:	f7ff fdf5 	bl	8019e48 <xTaskCreateStatic>
 801a25e:	4603      	mov	r3, r0
 801a260:	4a24      	ldr	r2, [pc, #144]	; (801a2f4 <vTaskStartScheduler+0xcc>)
 801a262:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a264:	4b23      	ldr	r3, [pc, #140]	; (801a2f4 <vTaskStartScheduler+0xcc>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d002      	beq.n	801a272 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a26c:	2301      	movs	r3, #1
 801a26e:	617b      	str	r3, [r7, #20]
 801a270:	e001      	b.n	801a276 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a272:	2300      	movs	r3, #0
 801a274:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a276:	697b      	ldr	r3, [r7, #20]
 801a278:	2b01      	cmp	r3, #1
 801a27a:	d102      	bne.n	801a282 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a27c:	f000 ffb6 	bl	801b1ec <xTimerCreateTimerTask>
 801a280:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a282:	697b      	ldr	r3, [r7, #20]
 801a284:	2b01      	cmp	r3, #1
 801a286:	d11d      	bne.n	801a2c4 <vTaskStartScheduler+0x9c>
	__asm volatile
 801a288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a28c:	f383 8811 	msr	BASEPRI, r3
 801a290:	f3bf 8f6f 	isb	sy
 801a294:	f3bf 8f4f 	dsb	sy
 801a298:	613b      	str	r3, [r7, #16]
}
 801a29a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a29c:	4b16      	ldr	r3, [pc, #88]	; (801a2f8 <vTaskStartScheduler+0xd0>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	3358      	adds	r3, #88	; 0x58
 801a2a2:	4a16      	ldr	r2, [pc, #88]	; (801a2fc <vTaskStartScheduler+0xd4>)
 801a2a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a2a6:	4b16      	ldr	r3, [pc, #88]	; (801a300 <vTaskStartScheduler+0xd8>)
 801a2a8:	f04f 32ff 	mov.w	r2, #4294967295
 801a2ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a2ae:	4b15      	ldr	r3, [pc, #84]	; (801a304 <vTaskStartScheduler+0xdc>)
 801a2b0:	2201      	movs	r2, #1
 801a2b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a2b4:	4b14      	ldr	r3, [pc, #80]	; (801a308 <vTaskStartScheduler+0xe0>)
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801a2ba:	f7f5 fbf1 	bl	800faa0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a2be:	f001 fb6f 	bl	801b9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a2c2:	e00e      	b.n	801a2e2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a2c4:	697b      	ldr	r3, [r7, #20]
 801a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2ca:	d10a      	bne.n	801a2e2 <vTaskStartScheduler+0xba>
	__asm volatile
 801a2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2d0:	f383 8811 	msr	BASEPRI, r3
 801a2d4:	f3bf 8f6f 	isb	sy
 801a2d8:	f3bf 8f4f 	dsb	sy
 801a2dc:	60fb      	str	r3, [r7, #12]
}
 801a2de:	bf00      	nop
 801a2e0:	e7fe      	b.n	801a2e0 <vTaskStartScheduler+0xb8>
}
 801a2e2:	bf00      	nop
 801a2e4:	3718      	adds	r7, #24
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
 801a2ea:	bf00      	nop
 801a2ec:	0801f844 	.word	0x0801f844
 801a2f0:	0801a9d5 	.word	0x0801a9d5
 801a2f4:	2000248c 	.word	0x2000248c
 801a2f8:	20001f94 	.word	0x20001f94
 801a2fc:	20000034 	.word	0x20000034
 801a300:	20002488 	.word	0x20002488
 801a304:	20002474 	.word	0x20002474
 801a308:	2000246c 	.word	0x2000246c

0801a30c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a30c:	b480      	push	{r7}
 801a30e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a310:	4b04      	ldr	r3, [pc, #16]	; (801a324 <vTaskSuspendAll+0x18>)
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	3301      	adds	r3, #1
 801a316:	4a03      	ldr	r2, [pc, #12]	; (801a324 <vTaskSuspendAll+0x18>)
 801a318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a31a:	bf00      	nop
 801a31c:	46bd      	mov	sp, r7
 801a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a322:	4770      	bx	lr
 801a324:	20002490 	.word	0x20002490

0801a328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b084      	sub	sp, #16
 801a32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a32e:	2300      	movs	r3, #0
 801a330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a332:	2300      	movs	r3, #0
 801a334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a336:	4b42      	ldr	r3, [pc, #264]	; (801a440 <xTaskResumeAll+0x118>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d10a      	bne.n	801a354 <xTaskResumeAll+0x2c>
	__asm volatile
 801a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a342:	f383 8811 	msr	BASEPRI, r3
 801a346:	f3bf 8f6f 	isb	sy
 801a34a:	f3bf 8f4f 	dsb	sy
 801a34e:	603b      	str	r3, [r7, #0]
}
 801a350:	bf00      	nop
 801a352:	e7fe      	b.n	801a352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a354:	f001 fbc6 	bl	801bae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a358:	4b39      	ldr	r3, [pc, #228]	; (801a440 <xTaskResumeAll+0x118>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	3b01      	subs	r3, #1
 801a35e:	4a38      	ldr	r2, [pc, #224]	; (801a440 <xTaskResumeAll+0x118>)
 801a360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a362:	4b37      	ldr	r3, [pc, #220]	; (801a440 <xTaskResumeAll+0x118>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d162      	bne.n	801a430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a36a:	4b36      	ldr	r3, [pc, #216]	; (801a444 <xTaskResumeAll+0x11c>)
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d05e      	beq.n	801a430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a372:	e02f      	b.n	801a3d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a374:	4b34      	ldr	r3, [pc, #208]	; (801a448 <xTaskResumeAll+0x120>)
 801a376:	68db      	ldr	r3, [r3, #12]
 801a378:	68db      	ldr	r3, [r3, #12]
 801a37a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	3318      	adds	r3, #24
 801a380:	4618      	mov	r0, r3
 801a382:	f7fe f8b1 	bl	80184e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	3304      	adds	r3, #4
 801a38a:	4618      	mov	r0, r3
 801a38c:	f7fe f8ac 	bl	80184e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a394:	4b2d      	ldr	r3, [pc, #180]	; (801a44c <xTaskResumeAll+0x124>)
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	429a      	cmp	r2, r3
 801a39a:	d903      	bls.n	801a3a4 <xTaskResumeAll+0x7c>
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3a0:	4a2a      	ldr	r2, [pc, #168]	; (801a44c <xTaskResumeAll+0x124>)
 801a3a2:	6013      	str	r3, [r2, #0]
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	4a27      	ldr	r2, [pc, #156]	; (801a450 <xTaskResumeAll+0x128>)
 801a3b2:	441a      	add	r2, r3
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	3304      	adds	r3, #4
 801a3b8:	4619      	mov	r1, r3
 801a3ba:	4610      	mov	r0, r2
 801a3bc:	f7fe f837 	bl	801842e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3c4:	4b23      	ldr	r3, [pc, #140]	; (801a454 <xTaskResumeAll+0x12c>)
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d302      	bcc.n	801a3d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801a3ce:	4b22      	ldr	r3, [pc, #136]	; (801a458 <xTaskResumeAll+0x130>)
 801a3d0:	2201      	movs	r2, #1
 801a3d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a3d4:	4b1c      	ldr	r3, [pc, #112]	; (801a448 <xTaskResumeAll+0x120>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d1cb      	bne.n	801a374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d001      	beq.n	801a3e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a3e2:	f000 fbb1 	bl	801ab48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a3e6:	4b1d      	ldr	r3, [pc, #116]	; (801a45c <xTaskResumeAll+0x134>)
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d010      	beq.n	801a414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a3f2:	f000 f847 	bl	801a484 <xTaskIncrementTick>
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d002      	beq.n	801a402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a3fc:	4b16      	ldr	r3, [pc, #88]	; (801a458 <xTaskResumeAll+0x130>)
 801a3fe:	2201      	movs	r2, #1
 801a400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	3b01      	subs	r3, #1
 801a406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d1f1      	bne.n	801a3f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a40e:	4b13      	ldr	r3, [pc, #76]	; (801a45c <xTaskResumeAll+0x134>)
 801a410:	2200      	movs	r2, #0
 801a412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a414:	4b10      	ldr	r3, [pc, #64]	; (801a458 <xTaskResumeAll+0x130>)
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d009      	beq.n	801a430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a41c:	2301      	movs	r3, #1
 801a41e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a420:	4b0f      	ldr	r3, [pc, #60]	; (801a460 <xTaskResumeAll+0x138>)
 801a422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a426:	601a      	str	r2, [r3, #0]
 801a428:	f3bf 8f4f 	dsb	sy
 801a42c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a430:	f001 fb88 	bl	801bb44 <vPortExitCritical>

	return xAlreadyYielded;
 801a434:	68bb      	ldr	r3, [r7, #8]
}
 801a436:	4618      	mov	r0, r3
 801a438:	3710      	adds	r7, #16
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
 801a43e:	bf00      	nop
 801a440:	20002490 	.word	0x20002490
 801a444:	20002468 	.word	0x20002468
 801a448:	20002428 	.word	0x20002428
 801a44c:	20002470 	.word	0x20002470
 801a450:	20001f98 	.word	0x20001f98
 801a454:	20001f94 	.word	0x20001f94
 801a458:	2000247c 	.word	0x2000247c
 801a45c:	20002478 	.word	0x20002478
 801a460:	e000ed04 	.word	0xe000ed04

0801a464 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a464:	b480      	push	{r7}
 801a466:	b083      	sub	sp, #12
 801a468:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a46a:	4b05      	ldr	r3, [pc, #20]	; (801a480 <xTaskGetTickCount+0x1c>)
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a470:	687b      	ldr	r3, [r7, #4]
}
 801a472:	4618      	mov	r0, r3
 801a474:	370c      	adds	r7, #12
 801a476:	46bd      	mov	sp, r7
 801a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47c:	4770      	bx	lr
 801a47e:	bf00      	nop
 801a480:	2000246c 	.word	0x2000246c

0801a484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b086      	sub	sp, #24
 801a488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a48a:	2300      	movs	r3, #0
 801a48c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a48e:	4b4f      	ldr	r3, [pc, #316]	; (801a5cc <xTaskIncrementTick+0x148>)
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	2b00      	cmp	r3, #0
 801a494:	f040 808f 	bne.w	801a5b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a498:	4b4d      	ldr	r3, [pc, #308]	; (801a5d0 <xTaskIncrementTick+0x14c>)
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	3301      	adds	r3, #1
 801a49e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a4a0:	4a4b      	ldr	r2, [pc, #300]	; (801a5d0 <xTaskIncrementTick+0x14c>)
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a4a6:	693b      	ldr	r3, [r7, #16]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d120      	bne.n	801a4ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a4ac:	4b49      	ldr	r3, [pc, #292]	; (801a5d4 <xTaskIncrementTick+0x150>)
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d00a      	beq.n	801a4cc <xTaskIncrementTick+0x48>
	__asm volatile
 801a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ba:	f383 8811 	msr	BASEPRI, r3
 801a4be:	f3bf 8f6f 	isb	sy
 801a4c2:	f3bf 8f4f 	dsb	sy
 801a4c6:	603b      	str	r3, [r7, #0]
}
 801a4c8:	bf00      	nop
 801a4ca:	e7fe      	b.n	801a4ca <xTaskIncrementTick+0x46>
 801a4cc:	4b41      	ldr	r3, [pc, #260]	; (801a5d4 <xTaskIncrementTick+0x150>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	60fb      	str	r3, [r7, #12]
 801a4d2:	4b41      	ldr	r3, [pc, #260]	; (801a5d8 <xTaskIncrementTick+0x154>)
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	4a3f      	ldr	r2, [pc, #252]	; (801a5d4 <xTaskIncrementTick+0x150>)
 801a4d8:	6013      	str	r3, [r2, #0]
 801a4da:	4a3f      	ldr	r2, [pc, #252]	; (801a5d8 <xTaskIncrementTick+0x154>)
 801a4dc:	68fb      	ldr	r3, [r7, #12]
 801a4de:	6013      	str	r3, [r2, #0]
 801a4e0:	4b3e      	ldr	r3, [pc, #248]	; (801a5dc <xTaskIncrementTick+0x158>)
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	3301      	adds	r3, #1
 801a4e6:	4a3d      	ldr	r2, [pc, #244]	; (801a5dc <xTaskIncrementTick+0x158>)
 801a4e8:	6013      	str	r3, [r2, #0]
 801a4ea:	f000 fb2d 	bl	801ab48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a4ee:	4b3c      	ldr	r3, [pc, #240]	; (801a5e0 <xTaskIncrementTick+0x15c>)
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	693a      	ldr	r2, [r7, #16]
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	d349      	bcc.n	801a58c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a4f8:	4b36      	ldr	r3, [pc, #216]	; (801a5d4 <xTaskIncrementTick+0x150>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d104      	bne.n	801a50c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a502:	4b37      	ldr	r3, [pc, #220]	; (801a5e0 <xTaskIncrementTick+0x15c>)
 801a504:	f04f 32ff 	mov.w	r2, #4294967295
 801a508:	601a      	str	r2, [r3, #0]
					break;
 801a50a:	e03f      	b.n	801a58c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a50c:	4b31      	ldr	r3, [pc, #196]	; (801a5d4 <xTaskIncrementTick+0x150>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	68db      	ldr	r3, [r3, #12]
 801a512:	68db      	ldr	r3, [r3, #12]
 801a514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a51c:	693a      	ldr	r2, [r7, #16]
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	429a      	cmp	r2, r3
 801a522:	d203      	bcs.n	801a52c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a524:	4a2e      	ldr	r2, [pc, #184]	; (801a5e0 <xTaskIncrementTick+0x15c>)
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a52a:	e02f      	b.n	801a58c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	3304      	adds	r3, #4
 801a530:	4618      	mov	r0, r3
 801a532:	f7fd ffd9 	bl	80184e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d004      	beq.n	801a548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a53e:	68bb      	ldr	r3, [r7, #8]
 801a540:	3318      	adds	r3, #24
 801a542:	4618      	mov	r0, r3
 801a544:	f7fd ffd0 	bl	80184e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a54c:	4b25      	ldr	r3, [pc, #148]	; (801a5e4 <xTaskIncrementTick+0x160>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	429a      	cmp	r2, r3
 801a552:	d903      	bls.n	801a55c <xTaskIncrementTick+0xd8>
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a558:	4a22      	ldr	r2, [pc, #136]	; (801a5e4 <xTaskIncrementTick+0x160>)
 801a55a:	6013      	str	r3, [r2, #0]
 801a55c:	68bb      	ldr	r3, [r7, #8]
 801a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a560:	4613      	mov	r3, r2
 801a562:	009b      	lsls	r3, r3, #2
 801a564:	4413      	add	r3, r2
 801a566:	009b      	lsls	r3, r3, #2
 801a568:	4a1f      	ldr	r2, [pc, #124]	; (801a5e8 <xTaskIncrementTick+0x164>)
 801a56a:	441a      	add	r2, r3
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	3304      	adds	r3, #4
 801a570:	4619      	mov	r1, r3
 801a572:	4610      	mov	r0, r2
 801a574:	f7fd ff5b 	bl	801842e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a57c:	4b1b      	ldr	r3, [pc, #108]	; (801a5ec <xTaskIncrementTick+0x168>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a582:	429a      	cmp	r2, r3
 801a584:	d3b8      	bcc.n	801a4f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a586:	2301      	movs	r3, #1
 801a588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a58a:	e7b5      	b.n	801a4f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a58c:	4b17      	ldr	r3, [pc, #92]	; (801a5ec <xTaskIncrementTick+0x168>)
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a592:	4915      	ldr	r1, [pc, #84]	; (801a5e8 <xTaskIncrementTick+0x164>)
 801a594:	4613      	mov	r3, r2
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	4413      	add	r3, r2
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	440b      	add	r3, r1
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	2b01      	cmp	r3, #1
 801a5a2:	d901      	bls.n	801a5a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a5a8:	4b11      	ldr	r3, [pc, #68]	; (801a5f0 <xTaskIncrementTick+0x16c>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d007      	beq.n	801a5c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	617b      	str	r3, [r7, #20]
 801a5b4:	e004      	b.n	801a5c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a5b6:	4b0f      	ldr	r3, [pc, #60]	; (801a5f4 <xTaskIncrementTick+0x170>)
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	4a0d      	ldr	r2, [pc, #52]	; (801a5f4 <xTaskIncrementTick+0x170>)
 801a5be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801a5c0:	697b      	ldr	r3, [r7, #20]
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	3718      	adds	r7, #24
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}
 801a5ca:	bf00      	nop
 801a5cc:	20002490 	.word	0x20002490
 801a5d0:	2000246c 	.word	0x2000246c
 801a5d4:	20002420 	.word	0x20002420
 801a5d8:	20002424 	.word	0x20002424
 801a5dc:	20002480 	.word	0x20002480
 801a5e0:	20002488 	.word	0x20002488
 801a5e4:	20002470 	.word	0x20002470
 801a5e8:	20001f98 	.word	0x20001f98
 801a5ec:	20001f94 	.word	0x20001f94
 801a5f0:	2000247c 	.word	0x2000247c
 801a5f4:	20002478 	.word	0x20002478

0801a5f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b084      	sub	sp, #16
 801a5fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a5fe:	4b3e      	ldr	r3, [pc, #248]	; (801a6f8 <vTaskSwitchContext+0x100>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d003      	beq.n	801a60e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a606:	4b3d      	ldr	r3, [pc, #244]	; (801a6fc <vTaskSwitchContext+0x104>)
 801a608:	2201      	movs	r2, #1
 801a60a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a60c:	e070      	b.n	801a6f0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801a60e:	4b3b      	ldr	r3, [pc, #236]	; (801a6fc <vTaskSwitchContext+0x104>)
 801a610:	2200      	movs	r2, #0
 801a612:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801a614:	f7f5 fa4b 	bl	800faae <getRunTimeCounterValue>
 801a618:	4603      	mov	r3, r0
 801a61a:	4a39      	ldr	r2, [pc, #228]	; (801a700 <vTaskSwitchContext+0x108>)
 801a61c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801a61e:	4b38      	ldr	r3, [pc, #224]	; (801a700 <vTaskSwitchContext+0x108>)
 801a620:	681a      	ldr	r2, [r3, #0]
 801a622:	4b38      	ldr	r3, [pc, #224]	; (801a704 <vTaskSwitchContext+0x10c>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	429a      	cmp	r2, r3
 801a628:	d909      	bls.n	801a63e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801a62a:	4b37      	ldr	r3, [pc, #220]	; (801a708 <vTaskSwitchContext+0x110>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a630:	4a33      	ldr	r2, [pc, #204]	; (801a700 <vTaskSwitchContext+0x108>)
 801a632:	6810      	ldr	r0, [r2, #0]
 801a634:	4a33      	ldr	r2, [pc, #204]	; (801a704 <vTaskSwitchContext+0x10c>)
 801a636:	6812      	ldr	r2, [r2, #0]
 801a638:	1a82      	subs	r2, r0, r2
 801a63a:	440a      	add	r2, r1
 801a63c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801a63e:	4b30      	ldr	r3, [pc, #192]	; (801a700 <vTaskSwitchContext+0x108>)
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4a30      	ldr	r2, [pc, #192]	; (801a704 <vTaskSwitchContext+0x10c>)
 801a644:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a646:	4b30      	ldr	r3, [pc, #192]	; (801a708 <vTaskSwitchContext+0x110>)
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	681a      	ldr	r2, [r3, #0]
 801a64c:	4b2e      	ldr	r3, [pc, #184]	; (801a708 <vTaskSwitchContext+0x110>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a652:	429a      	cmp	r2, r3
 801a654:	d808      	bhi.n	801a668 <vTaskSwitchContext+0x70>
 801a656:	4b2c      	ldr	r3, [pc, #176]	; (801a708 <vTaskSwitchContext+0x110>)
 801a658:	681a      	ldr	r2, [r3, #0]
 801a65a:	4b2b      	ldr	r3, [pc, #172]	; (801a708 <vTaskSwitchContext+0x110>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	3334      	adds	r3, #52	; 0x34
 801a660:	4619      	mov	r1, r3
 801a662:	4610      	mov	r0, r2
 801a664:	f7f5 fa2b 	bl	800fabe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a668:	4b28      	ldr	r3, [pc, #160]	; (801a70c <vTaskSwitchContext+0x114>)
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	60fb      	str	r3, [r7, #12]
 801a66e:	e010      	b.n	801a692 <vTaskSwitchContext+0x9a>
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d10a      	bne.n	801a68c <vTaskSwitchContext+0x94>
	__asm volatile
 801a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a67a:	f383 8811 	msr	BASEPRI, r3
 801a67e:	f3bf 8f6f 	isb	sy
 801a682:	f3bf 8f4f 	dsb	sy
 801a686:	607b      	str	r3, [r7, #4]
}
 801a688:	bf00      	nop
 801a68a:	e7fe      	b.n	801a68a <vTaskSwitchContext+0x92>
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	3b01      	subs	r3, #1
 801a690:	60fb      	str	r3, [r7, #12]
 801a692:	491f      	ldr	r1, [pc, #124]	; (801a710 <vTaskSwitchContext+0x118>)
 801a694:	68fa      	ldr	r2, [r7, #12]
 801a696:	4613      	mov	r3, r2
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	4413      	add	r3, r2
 801a69c:	009b      	lsls	r3, r3, #2
 801a69e:	440b      	add	r3, r1
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d0e4      	beq.n	801a670 <vTaskSwitchContext+0x78>
 801a6a6:	68fa      	ldr	r2, [r7, #12]
 801a6a8:	4613      	mov	r3, r2
 801a6aa:	009b      	lsls	r3, r3, #2
 801a6ac:	4413      	add	r3, r2
 801a6ae:	009b      	lsls	r3, r3, #2
 801a6b0:	4a17      	ldr	r2, [pc, #92]	; (801a710 <vTaskSwitchContext+0x118>)
 801a6b2:	4413      	add	r3, r2
 801a6b4:	60bb      	str	r3, [r7, #8]
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	685a      	ldr	r2, [r3, #4]
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	605a      	str	r2, [r3, #4]
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	685a      	ldr	r2, [r3, #4]
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	3308      	adds	r3, #8
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d104      	bne.n	801a6d6 <vTaskSwitchContext+0xde>
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	685b      	ldr	r3, [r3, #4]
 801a6d0:	685a      	ldr	r2, [r3, #4]
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	605a      	str	r2, [r3, #4]
 801a6d6:	68bb      	ldr	r3, [r7, #8]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	68db      	ldr	r3, [r3, #12]
 801a6dc:	4a0a      	ldr	r2, [pc, #40]	; (801a708 <vTaskSwitchContext+0x110>)
 801a6de:	6013      	str	r3, [r2, #0]
 801a6e0:	4a0a      	ldr	r2, [pc, #40]	; (801a70c <vTaskSwitchContext+0x114>)
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801a6e6:	4b08      	ldr	r3, [pc, #32]	; (801a708 <vTaskSwitchContext+0x110>)
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	3358      	adds	r3, #88	; 0x58
 801a6ec:	4a09      	ldr	r2, [pc, #36]	; (801a714 <vTaskSwitchContext+0x11c>)
 801a6ee:	6013      	str	r3, [r2, #0]
}
 801a6f0:	bf00      	nop
 801a6f2:	3710      	adds	r7, #16
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}
 801a6f8:	20002490 	.word	0x20002490
 801a6fc:	2000247c 	.word	0x2000247c
 801a700:	20002498 	.word	0x20002498
 801a704:	20002494 	.word	0x20002494
 801a708:	20001f94 	.word	0x20001f94
 801a70c:	20002470 	.word	0x20002470
 801a710:	20001f98 	.word	0x20001f98
 801a714:	20000034 	.word	0x20000034

0801a718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b084      	sub	sp, #16
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d10a      	bne.n	801a73e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a72c:	f383 8811 	msr	BASEPRI, r3
 801a730:	f3bf 8f6f 	isb	sy
 801a734:	f3bf 8f4f 	dsb	sy
 801a738:	60fb      	str	r3, [r7, #12]
}
 801a73a:	bf00      	nop
 801a73c:	e7fe      	b.n	801a73c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a73e:	4b07      	ldr	r3, [pc, #28]	; (801a75c <vTaskPlaceOnEventList+0x44>)
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	3318      	adds	r3, #24
 801a744:	4619      	mov	r1, r3
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f7fd fe95 	bl	8018476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a74c:	2101      	movs	r1, #1
 801a74e:	6838      	ldr	r0, [r7, #0]
 801a750:	f000 fcf8 	bl	801b144 <prvAddCurrentTaskToDelayedList>
}
 801a754:	bf00      	nop
 801a756:	3710      	adds	r7, #16
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}
 801a75c:	20001f94 	.word	0x20001f94

0801a760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a760:	b580      	push	{r7, lr}
 801a762:	b086      	sub	sp, #24
 801a764:	af00      	add	r7, sp, #0
 801a766:	60f8      	str	r0, [r7, #12]
 801a768:	60b9      	str	r1, [r7, #8]
 801a76a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d10a      	bne.n	801a788 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a776:	f383 8811 	msr	BASEPRI, r3
 801a77a:	f3bf 8f6f 	isb	sy
 801a77e:	f3bf 8f4f 	dsb	sy
 801a782:	617b      	str	r3, [r7, #20]
}
 801a784:	bf00      	nop
 801a786:	e7fe      	b.n	801a786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a788:	4b0a      	ldr	r3, [pc, #40]	; (801a7b4 <vTaskPlaceOnEventListRestricted+0x54>)
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	3318      	adds	r3, #24
 801a78e:	4619      	mov	r1, r3
 801a790:	68f8      	ldr	r0, [r7, #12]
 801a792:	f7fd fe4c 	bl	801842e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d002      	beq.n	801a7a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a79c:	f04f 33ff 	mov.w	r3, #4294967295
 801a7a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a7a2:	6879      	ldr	r1, [r7, #4]
 801a7a4:	68b8      	ldr	r0, [r7, #8]
 801a7a6:	f000 fccd 	bl	801b144 <prvAddCurrentTaskToDelayedList>
	}
 801a7aa:	bf00      	nop
 801a7ac:	3718      	adds	r7, #24
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bd80      	pop	{r7, pc}
 801a7b2:	bf00      	nop
 801a7b4:	20001f94 	.word	0x20001f94

0801a7b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b086      	sub	sp, #24
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	68db      	ldr	r3, [r3, #12]
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d10a      	bne.n	801a7e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7d2:	f383 8811 	msr	BASEPRI, r3
 801a7d6:	f3bf 8f6f 	isb	sy
 801a7da:	f3bf 8f4f 	dsb	sy
 801a7de:	60fb      	str	r3, [r7, #12]
}
 801a7e0:	bf00      	nop
 801a7e2:	e7fe      	b.n	801a7e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a7e4:	693b      	ldr	r3, [r7, #16]
 801a7e6:	3318      	adds	r3, #24
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7fd fe7d 	bl	80184e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a7ee:	4b1e      	ldr	r3, [pc, #120]	; (801a868 <xTaskRemoveFromEventList+0xb0>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d11d      	bne.n	801a832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a7f6:	693b      	ldr	r3, [r7, #16]
 801a7f8:	3304      	adds	r3, #4
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f7fd fe74 	bl	80184e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a800:	693b      	ldr	r3, [r7, #16]
 801a802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a804:	4b19      	ldr	r3, [pc, #100]	; (801a86c <xTaskRemoveFromEventList+0xb4>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	429a      	cmp	r2, r3
 801a80a:	d903      	bls.n	801a814 <xTaskRemoveFromEventList+0x5c>
 801a80c:	693b      	ldr	r3, [r7, #16]
 801a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a810:	4a16      	ldr	r2, [pc, #88]	; (801a86c <xTaskRemoveFromEventList+0xb4>)
 801a812:	6013      	str	r3, [r2, #0]
 801a814:	693b      	ldr	r3, [r7, #16]
 801a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a818:	4613      	mov	r3, r2
 801a81a:	009b      	lsls	r3, r3, #2
 801a81c:	4413      	add	r3, r2
 801a81e:	009b      	lsls	r3, r3, #2
 801a820:	4a13      	ldr	r2, [pc, #76]	; (801a870 <xTaskRemoveFromEventList+0xb8>)
 801a822:	441a      	add	r2, r3
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	3304      	adds	r3, #4
 801a828:	4619      	mov	r1, r3
 801a82a:	4610      	mov	r0, r2
 801a82c:	f7fd fdff 	bl	801842e <vListInsertEnd>
 801a830:	e005      	b.n	801a83e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a832:	693b      	ldr	r3, [r7, #16]
 801a834:	3318      	adds	r3, #24
 801a836:	4619      	mov	r1, r3
 801a838:	480e      	ldr	r0, [pc, #56]	; (801a874 <xTaskRemoveFromEventList+0xbc>)
 801a83a:	f7fd fdf8 	bl	801842e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a83e:	693b      	ldr	r3, [r7, #16]
 801a840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a842:	4b0d      	ldr	r3, [pc, #52]	; (801a878 <xTaskRemoveFromEventList+0xc0>)
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a848:	429a      	cmp	r2, r3
 801a84a:	d905      	bls.n	801a858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a84c:	2301      	movs	r3, #1
 801a84e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a850:	4b0a      	ldr	r3, [pc, #40]	; (801a87c <xTaskRemoveFromEventList+0xc4>)
 801a852:	2201      	movs	r2, #1
 801a854:	601a      	str	r2, [r3, #0]
 801a856:	e001      	b.n	801a85c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a858:	2300      	movs	r3, #0
 801a85a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a85c:	697b      	ldr	r3, [r7, #20]
}
 801a85e:	4618      	mov	r0, r3
 801a860:	3718      	adds	r7, #24
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}
 801a866:	bf00      	nop
 801a868:	20002490 	.word	0x20002490
 801a86c:	20002470 	.word	0x20002470
 801a870:	20001f98 	.word	0x20001f98
 801a874:	20002428 	.word	0x20002428
 801a878:	20001f94 	.word	0x20001f94
 801a87c:	2000247c 	.word	0x2000247c

0801a880 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b084      	sub	sp, #16
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d10a      	bne.n	801a8a4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 801a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a892:	f383 8811 	msr	BASEPRI, r3
 801a896:	f3bf 8f6f 	isb	sy
 801a89a:	f3bf 8f4f 	dsb	sy
 801a89e:	60fb      	str	r3, [r7, #12]
}
 801a8a0:	bf00      	nop
 801a8a2:	e7fe      	b.n	801a8a2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 801a8a4:	f001 f91e 	bl	801bae4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a8a8:	4b06      	ldr	r3, [pc, #24]	; (801a8c4 <vTaskSetTimeOutState+0x44>)
 801a8aa:	681a      	ldr	r2, [r3, #0]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 801a8b0:	4b05      	ldr	r3, [pc, #20]	; (801a8c8 <vTaskSetTimeOutState+0x48>)
 801a8b2:	681a      	ldr	r2, [r3, #0]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 801a8b8:	f001 f944 	bl	801bb44 <vPortExitCritical>
}
 801a8bc:	bf00      	nop
 801a8be:	3710      	adds	r7, #16
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}
 801a8c4:	20002480 	.word	0x20002480
 801a8c8:	2000246c 	.word	0x2000246c

0801a8cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b083      	sub	sp, #12
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a8d4:	4b06      	ldr	r3, [pc, #24]	; (801a8f0 <vTaskInternalSetTimeOutState+0x24>)
 801a8d6:	681a      	ldr	r2, [r3, #0]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a8dc:	4b05      	ldr	r3, [pc, #20]	; (801a8f4 <vTaskInternalSetTimeOutState+0x28>)
 801a8de:	681a      	ldr	r2, [r3, #0]
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	605a      	str	r2, [r3, #4]
}
 801a8e4:	bf00      	nop
 801a8e6:	370c      	adds	r7, #12
 801a8e8:	46bd      	mov	sp, r7
 801a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ee:	4770      	bx	lr
 801a8f0:	20002480 	.word	0x20002480
 801a8f4:	2000246c 	.word	0x2000246c

0801a8f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b088      	sub	sp, #32
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
 801a900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d10a      	bne.n	801a91e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a90c:	f383 8811 	msr	BASEPRI, r3
 801a910:	f3bf 8f6f 	isb	sy
 801a914:	f3bf 8f4f 	dsb	sy
 801a918:	613b      	str	r3, [r7, #16]
}
 801a91a:	bf00      	nop
 801a91c:	e7fe      	b.n	801a91c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d10a      	bne.n	801a93a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a928:	f383 8811 	msr	BASEPRI, r3
 801a92c:	f3bf 8f6f 	isb	sy
 801a930:	f3bf 8f4f 	dsb	sy
 801a934:	60fb      	str	r3, [r7, #12]
}
 801a936:	bf00      	nop
 801a938:	e7fe      	b.n	801a938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a93a:	f001 f8d3 	bl	801bae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a93e:	4b1d      	ldr	r3, [pc, #116]	; (801a9b4 <xTaskCheckForTimeOut+0xbc>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	685b      	ldr	r3, [r3, #4]
 801a948:	69ba      	ldr	r2, [r7, #24]
 801a94a:	1ad3      	subs	r3, r2, r3
 801a94c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a956:	d102      	bne.n	801a95e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a958:	2300      	movs	r3, #0
 801a95a:	61fb      	str	r3, [r7, #28]
 801a95c:	e023      	b.n	801a9a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	681a      	ldr	r2, [r3, #0]
 801a962:	4b15      	ldr	r3, [pc, #84]	; (801a9b8 <xTaskCheckForTimeOut+0xc0>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	429a      	cmp	r2, r3
 801a968:	d007      	beq.n	801a97a <xTaskCheckForTimeOut+0x82>
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	685b      	ldr	r3, [r3, #4]
 801a96e:	69ba      	ldr	r2, [r7, #24]
 801a970:	429a      	cmp	r2, r3
 801a972:	d302      	bcc.n	801a97a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a974:	2301      	movs	r3, #1
 801a976:	61fb      	str	r3, [r7, #28]
 801a978:	e015      	b.n	801a9a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	697a      	ldr	r2, [r7, #20]
 801a980:	429a      	cmp	r2, r3
 801a982:	d20b      	bcs.n	801a99c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a984:	683b      	ldr	r3, [r7, #0]
 801a986:	681a      	ldr	r2, [r3, #0]
 801a988:	697b      	ldr	r3, [r7, #20]
 801a98a:	1ad2      	subs	r2, r2, r3
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a990:	6878      	ldr	r0, [r7, #4]
 801a992:	f7ff ff9b 	bl	801a8cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a996:	2300      	movs	r3, #0
 801a998:	61fb      	str	r3, [r7, #28]
 801a99a:	e004      	b.n	801a9a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	2200      	movs	r2, #0
 801a9a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a9a6:	f001 f8cd 	bl	801bb44 <vPortExitCritical>

	return xReturn;
 801a9aa:	69fb      	ldr	r3, [r7, #28]
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3720      	adds	r7, #32
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	2000246c 	.word	0x2000246c
 801a9b8:	20002480 	.word	0x20002480

0801a9bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a9bc:	b480      	push	{r7}
 801a9be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a9c0:	4b03      	ldr	r3, [pc, #12]	; (801a9d0 <vTaskMissedYield+0x14>)
 801a9c2:	2201      	movs	r2, #1
 801a9c4:	601a      	str	r2, [r3, #0]
}
 801a9c6:	bf00      	nop
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr
 801a9d0:	2000247c 	.word	0x2000247c

0801a9d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a9dc:	f000 f852 	bl	801aa84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a9e0:	4b06      	ldr	r3, [pc, #24]	; (801a9fc <prvIdleTask+0x28>)
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	2b01      	cmp	r3, #1
 801a9e6:	d9f9      	bls.n	801a9dc <prvIdleTask+0x8>
			{
				taskYIELD();
 801a9e8:	4b05      	ldr	r3, [pc, #20]	; (801aa00 <prvIdleTask+0x2c>)
 801a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a9ee:	601a      	str	r2, [r3, #0]
 801a9f0:	f3bf 8f4f 	dsb	sy
 801a9f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a9f8:	e7f0      	b.n	801a9dc <prvIdleTask+0x8>
 801a9fa:	bf00      	nop
 801a9fc:	20001f98 	.word	0x20001f98
 801aa00:	e000ed04 	.word	0xe000ed04

0801aa04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b082      	sub	sp, #8
 801aa08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	607b      	str	r3, [r7, #4]
 801aa0e:	e00c      	b.n	801aa2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801aa10:	687a      	ldr	r2, [r7, #4]
 801aa12:	4613      	mov	r3, r2
 801aa14:	009b      	lsls	r3, r3, #2
 801aa16:	4413      	add	r3, r2
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	4a12      	ldr	r2, [pc, #72]	; (801aa64 <prvInitialiseTaskLists+0x60>)
 801aa1c:	4413      	add	r3, r2
 801aa1e:	4618      	mov	r0, r3
 801aa20:	f7fd fcd8 	bl	80183d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	3301      	adds	r3, #1
 801aa28:	607b      	str	r3, [r7, #4]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	2b37      	cmp	r3, #55	; 0x37
 801aa2e:	d9ef      	bls.n	801aa10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801aa30:	480d      	ldr	r0, [pc, #52]	; (801aa68 <prvInitialiseTaskLists+0x64>)
 801aa32:	f7fd fccf 	bl	80183d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801aa36:	480d      	ldr	r0, [pc, #52]	; (801aa6c <prvInitialiseTaskLists+0x68>)
 801aa38:	f7fd fccc 	bl	80183d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801aa3c:	480c      	ldr	r0, [pc, #48]	; (801aa70 <prvInitialiseTaskLists+0x6c>)
 801aa3e:	f7fd fcc9 	bl	80183d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801aa42:	480c      	ldr	r0, [pc, #48]	; (801aa74 <prvInitialiseTaskLists+0x70>)
 801aa44:	f7fd fcc6 	bl	80183d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801aa48:	480b      	ldr	r0, [pc, #44]	; (801aa78 <prvInitialiseTaskLists+0x74>)
 801aa4a:	f7fd fcc3 	bl	80183d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801aa4e:	4b0b      	ldr	r3, [pc, #44]	; (801aa7c <prvInitialiseTaskLists+0x78>)
 801aa50:	4a05      	ldr	r2, [pc, #20]	; (801aa68 <prvInitialiseTaskLists+0x64>)
 801aa52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801aa54:	4b0a      	ldr	r3, [pc, #40]	; (801aa80 <prvInitialiseTaskLists+0x7c>)
 801aa56:	4a05      	ldr	r2, [pc, #20]	; (801aa6c <prvInitialiseTaskLists+0x68>)
 801aa58:	601a      	str	r2, [r3, #0]
}
 801aa5a:	bf00      	nop
 801aa5c:	3708      	adds	r7, #8
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	bd80      	pop	{r7, pc}
 801aa62:	bf00      	nop
 801aa64:	20001f98 	.word	0x20001f98
 801aa68:	200023f8 	.word	0x200023f8
 801aa6c:	2000240c 	.word	0x2000240c
 801aa70:	20002428 	.word	0x20002428
 801aa74:	2000243c 	.word	0x2000243c
 801aa78:	20002454 	.word	0x20002454
 801aa7c:	20002420 	.word	0x20002420
 801aa80:	20002424 	.word	0x20002424

0801aa84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b082      	sub	sp, #8
 801aa88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801aa8a:	e019      	b.n	801aac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801aa8c:	f001 f82a 	bl	801bae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa90:	4b10      	ldr	r3, [pc, #64]	; (801aad4 <prvCheckTasksWaitingTermination+0x50>)
 801aa92:	68db      	ldr	r3, [r3, #12]
 801aa94:	68db      	ldr	r3, [r3, #12]
 801aa96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	3304      	adds	r3, #4
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	f7fd fd23 	bl	80184e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801aaa2:	4b0d      	ldr	r3, [pc, #52]	; (801aad8 <prvCheckTasksWaitingTermination+0x54>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	3b01      	subs	r3, #1
 801aaa8:	4a0b      	ldr	r2, [pc, #44]	; (801aad8 <prvCheckTasksWaitingTermination+0x54>)
 801aaaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801aaac:	4b0b      	ldr	r3, [pc, #44]	; (801aadc <prvCheckTasksWaitingTermination+0x58>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	3b01      	subs	r3, #1
 801aab2:	4a0a      	ldr	r2, [pc, #40]	; (801aadc <prvCheckTasksWaitingTermination+0x58>)
 801aab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801aab6:	f001 f845 	bl	801bb44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801aaba:	6878      	ldr	r0, [r7, #4]
 801aabc:	f000 f810 	bl	801aae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801aac0:	4b06      	ldr	r3, [pc, #24]	; (801aadc <prvCheckTasksWaitingTermination+0x58>)
 801aac2:	681b      	ldr	r3, [r3, #0]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d1e1      	bne.n	801aa8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801aac8:	bf00      	nop
 801aaca:	bf00      	nop
 801aacc:	3708      	adds	r7, #8
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
 801aad2:	bf00      	nop
 801aad4:	2000243c 	.word	0x2000243c
 801aad8:	20002468 	.word	0x20002468
 801aadc:	20002450 	.word	0x20002450

0801aae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b084      	sub	sp, #16
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	3358      	adds	r3, #88	; 0x58
 801aaec:	4618      	mov	r0, r3
 801aaee:	f002 fc37 	bl	801d360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d108      	bne.n	801ab0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab00:	4618      	mov	r0, r3
 801ab02:	f001 f9e1 	bl	801bec8 <vPortFree>
				vPortFree( pxTCB );
 801ab06:	6878      	ldr	r0, [r7, #4]
 801ab08:	f001 f9de 	bl	801bec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801ab0c:	e018      	b.n	801ab40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d103      	bne.n	801ab20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801ab18:	6878      	ldr	r0, [r7, #4]
 801ab1a:	f001 f9d5 	bl	801bec8 <vPortFree>
	}
 801ab1e:	e00f      	b.n	801ab40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801ab26:	2b02      	cmp	r3, #2
 801ab28:	d00a      	beq.n	801ab40 <prvDeleteTCB+0x60>
	__asm volatile
 801ab2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab2e:	f383 8811 	msr	BASEPRI, r3
 801ab32:	f3bf 8f6f 	isb	sy
 801ab36:	f3bf 8f4f 	dsb	sy
 801ab3a:	60fb      	str	r3, [r7, #12]
}
 801ab3c:	bf00      	nop
 801ab3e:	e7fe      	b.n	801ab3e <prvDeleteTCB+0x5e>
	}
 801ab40:	bf00      	nop
 801ab42:	3710      	adds	r7, #16
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}

0801ab48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801ab48:	b480      	push	{r7}
 801ab4a:	b083      	sub	sp, #12
 801ab4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ab4e:	4b0c      	ldr	r3, [pc, #48]	; (801ab80 <prvResetNextTaskUnblockTime+0x38>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d104      	bne.n	801ab62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801ab58:	4b0a      	ldr	r3, [pc, #40]	; (801ab84 <prvResetNextTaskUnblockTime+0x3c>)
 801ab5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ab5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801ab60:	e008      	b.n	801ab74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ab62:	4b07      	ldr	r3, [pc, #28]	; (801ab80 <prvResetNextTaskUnblockTime+0x38>)
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	68db      	ldr	r3, [r3, #12]
 801ab68:	68db      	ldr	r3, [r3, #12]
 801ab6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	4a04      	ldr	r2, [pc, #16]	; (801ab84 <prvResetNextTaskUnblockTime+0x3c>)
 801ab72:	6013      	str	r3, [r2, #0]
}
 801ab74:	bf00      	nop
 801ab76:	370c      	adds	r7, #12
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7e:	4770      	bx	lr
 801ab80:	20002420 	.word	0x20002420
 801ab84:	20002488 	.word	0x20002488

0801ab88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801ab88:	b480      	push	{r7}
 801ab8a:	b083      	sub	sp, #12
 801ab8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801ab8e:	4b05      	ldr	r3, [pc, #20]	; (801aba4 <xTaskGetCurrentTaskHandle+0x1c>)
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	607b      	str	r3, [r7, #4]

		return xReturn;
 801ab94:	687b      	ldr	r3, [r7, #4]
	}
 801ab96:	4618      	mov	r0, r3
 801ab98:	370c      	adds	r7, #12
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba0:	4770      	bx	lr
 801aba2:	bf00      	nop
 801aba4:	20001f94 	.word	0x20001f94

0801aba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801aba8:	b480      	push	{r7}
 801abaa:	b083      	sub	sp, #12
 801abac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801abae:	4b0b      	ldr	r3, [pc, #44]	; (801abdc <xTaskGetSchedulerState+0x34>)
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d102      	bne.n	801abbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801abb6:	2301      	movs	r3, #1
 801abb8:	607b      	str	r3, [r7, #4]
 801abba:	e008      	b.n	801abce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801abbc:	4b08      	ldr	r3, [pc, #32]	; (801abe0 <xTaskGetSchedulerState+0x38>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d102      	bne.n	801abca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801abc4:	2302      	movs	r3, #2
 801abc6:	607b      	str	r3, [r7, #4]
 801abc8:	e001      	b.n	801abce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801abca:	2300      	movs	r3, #0
 801abcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801abce:	687b      	ldr	r3, [r7, #4]
	}
 801abd0:	4618      	mov	r0, r3
 801abd2:	370c      	adds	r7, #12
 801abd4:	46bd      	mov	sp, r7
 801abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abda:	4770      	bx	lr
 801abdc:	20002474 	.word	0x20002474
 801abe0:	20002490 	.word	0x20002490

0801abe4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b084      	sub	sp, #16
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801abf0:	2300      	movs	r3, #0
 801abf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d051      	beq.n	801ac9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abfe:	4b2a      	ldr	r3, [pc, #168]	; (801aca8 <xTaskPriorityInherit+0xc4>)
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d241      	bcs.n	801ac8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	699b      	ldr	r3, [r3, #24]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	db06      	blt.n	801ac1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac10:	4b25      	ldr	r3, [pc, #148]	; (801aca8 <xTaskPriorityInherit+0xc4>)
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ac1a:	68bb      	ldr	r3, [r7, #8]
 801ac1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801ac1e:	68bb      	ldr	r3, [r7, #8]
 801ac20:	6959      	ldr	r1, [r3, #20]
 801ac22:	68bb      	ldr	r3, [r7, #8]
 801ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac26:	4613      	mov	r3, r2
 801ac28:	009b      	lsls	r3, r3, #2
 801ac2a:	4413      	add	r3, r2
 801ac2c:	009b      	lsls	r3, r3, #2
 801ac2e:	4a1f      	ldr	r2, [pc, #124]	; (801acac <xTaskPriorityInherit+0xc8>)
 801ac30:	4413      	add	r3, r2
 801ac32:	4299      	cmp	r1, r3
 801ac34:	d122      	bne.n	801ac7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ac36:	68bb      	ldr	r3, [r7, #8]
 801ac38:	3304      	adds	r3, #4
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7fd fc54 	bl	80184e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ac40:	4b19      	ldr	r3, [pc, #100]	; (801aca8 <xTaskPriorityInherit+0xc4>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801ac4a:	68bb      	ldr	r3, [r7, #8]
 801ac4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac4e:	4b18      	ldr	r3, [pc, #96]	; (801acb0 <xTaskPriorityInherit+0xcc>)
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	d903      	bls.n	801ac5e <xTaskPriorityInherit+0x7a>
 801ac56:	68bb      	ldr	r3, [r7, #8]
 801ac58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac5a:	4a15      	ldr	r2, [pc, #84]	; (801acb0 <xTaskPriorityInherit+0xcc>)
 801ac5c:	6013      	str	r3, [r2, #0]
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac62:	4613      	mov	r3, r2
 801ac64:	009b      	lsls	r3, r3, #2
 801ac66:	4413      	add	r3, r2
 801ac68:	009b      	lsls	r3, r3, #2
 801ac6a:	4a10      	ldr	r2, [pc, #64]	; (801acac <xTaskPriorityInherit+0xc8>)
 801ac6c:	441a      	add	r2, r3
 801ac6e:	68bb      	ldr	r3, [r7, #8]
 801ac70:	3304      	adds	r3, #4
 801ac72:	4619      	mov	r1, r3
 801ac74:	4610      	mov	r0, r2
 801ac76:	f7fd fbda 	bl	801842e <vListInsertEnd>
 801ac7a:	e004      	b.n	801ac86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801ac7c:	4b0a      	ldr	r3, [pc, #40]	; (801aca8 <xTaskPriorityInherit+0xc4>)
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac82:	68bb      	ldr	r3, [r7, #8]
 801ac84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801ac86:	2301      	movs	r3, #1
 801ac88:	60fb      	str	r3, [r7, #12]
 801ac8a:	e008      	b.n	801ac9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ac90:	4b05      	ldr	r3, [pc, #20]	; (801aca8 <xTaskPriorityInherit+0xc4>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac96:	429a      	cmp	r2, r3
 801ac98:	d201      	bcs.n	801ac9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ac9e:	68fb      	ldr	r3, [r7, #12]
	}
 801aca0:	4618      	mov	r0, r3
 801aca2:	3710      	adds	r7, #16
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}
 801aca8:	20001f94 	.word	0x20001f94
 801acac:	20001f98 	.word	0x20001f98
 801acb0:	20002470 	.word	0x20002470

0801acb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b086      	sub	sp, #24
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801acc0:	2300      	movs	r3, #0
 801acc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d056      	beq.n	801ad78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801acca:	4b2e      	ldr	r3, [pc, #184]	; (801ad84 <xTaskPriorityDisinherit+0xd0>)
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	693a      	ldr	r2, [r7, #16]
 801acd0:	429a      	cmp	r2, r3
 801acd2:	d00a      	beq.n	801acea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acd8:	f383 8811 	msr	BASEPRI, r3
 801acdc:	f3bf 8f6f 	isb	sy
 801ace0:	f3bf 8f4f 	dsb	sy
 801ace4:	60fb      	str	r3, [r7, #12]
}
 801ace6:	bf00      	nop
 801ace8:	e7fe      	b.n	801ace8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801acea:	693b      	ldr	r3, [r7, #16]
 801acec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d10a      	bne.n	801ad08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acf6:	f383 8811 	msr	BASEPRI, r3
 801acfa:	f3bf 8f6f 	isb	sy
 801acfe:	f3bf 8f4f 	dsb	sy
 801ad02:	60bb      	str	r3, [r7, #8]
}
 801ad04:	bf00      	nop
 801ad06:	e7fe      	b.n	801ad06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801ad08:	693b      	ldr	r3, [r7, #16]
 801ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad0c:	1e5a      	subs	r2, r3, #1
 801ad0e:	693b      	ldr	r3, [r7, #16]
 801ad10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad16:	693b      	ldr	r3, [r7, #16]
 801ad18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d02c      	beq.n	801ad78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801ad1e:	693b      	ldr	r3, [r7, #16]
 801ad20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d128      	bne.n	801ad78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	3304      	adds	r3, #4
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	f7fd fbdc 	bl	80184e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801ad30:	693b      	ldr	r3, [r7, #16]
 801ad32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801ad34:	693b      	ldr	r3, [r7, #16]
 801ad36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ad38:	693b      	ldr	r3, [r7, #16]
 801ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ad40:	693b      	ldr	r3, [r7, #16]
 801ad42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801ad44:	693b      	ldr	r3, [r7, #16]
 801ad46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad48:	4b0f      	ldr	r3, [pc, #60]	; (801ad88 <xTaskPriorityDisinherit+0xd4>)
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d903      	bls.n	801ad58 <xTaskPriorityDisinherit+0xa4>
 801ad50:	693b      	ldr	r3, [r7, #16]
 801ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad54:	4a0c      	ldr	r2, [pc, #48]	; (801ad88 <xTaskPriorityDisinherit+0xd4>)
 801ad56:	6013      	str	r3, [r2, #0]
 801ad58:	693b      	ldr	r3, [r7, #16]
 801ad5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad5c:	4613      	mov	r3, r2
 801ad5e:	009b      	lsls	r3, r3, #2
 801ad60:	4413      	add	r3, r2
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	4a09      	ldr	r2, [pc, #36]	; (801ad8c <xTaskPriorityDisinherit+0xd8>)
 801ad66:	441a      	add	r2, r3
 801ad68:	693b      	ldr	r3, [r7, #16]
 801ad6a:	3304      	adds	r3, #4
 801ad6c:	4619      	mov	r1, r3
 801ad6e:	4610      	mov	r0, r2
 801ad70:	f7fd fb5d 	bl	801842e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801ad74:	2301      	movs	r3, #1
 801ad76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ad78:	697b      	ldr	r3, [r7, #20]
	}
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	3718      	adds	r7, #24
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	20001f94 	.word	0x20001f94
 801ad88:	20002470 	.word	0x20002470
 801ad8c:	20001f98 	.word	0x20001f98

0801ad90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b088      	sub	sp, #32
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801ad9e:	2301      	movs	r3, #1
 801ada0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d06a      	beq.n	801ae7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801ada8:	69bb      	ldr	r3, [r7, #24]
 801adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adac:	2b00      	cmp	r3, #0
 801adae:	d10a      	bne.n	801adc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adb4:	f383 8811 	msr	BASEPRI, r3
 801adb8:	f3bf 8f6f 	isb	sy
 801adbc:	f3bf 8f4f 	dsb	sy
 801adc0:	60fb      	str	r3, [r7, #12]
}
 801adc2:	bf00      	nop
 801adc4:	e7fe      	b.n	801adc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801adc6:	69bb      	ldr	r3, [r7, #24]
 801adc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801adca:	683a      	ldr	r2, [r7, #0]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d902      	bls.n	801add6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	61fb      	str	r3, [r7, #28]
 801add4:	e002      	b.n	801addc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801adda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801addc:	69bb      	ldr	r3, [r7, #24]
 801adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ade0:	69fa      	ldr	r2, [r7, #28]
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d04b      	beq.n	801ae7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801ade6:	69bb      	ldr	r3, [r7, #24]
 801ade8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801adea:	697a      	ldr	r2, [r7, #20]
 801adec:	429a      	cmp	r2, r3
 801adee:	d146      	bne.n	801ae7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801adf0:	4b25      	ldr	r3, [pc, #148]	; (801ae88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	69ba      	ldr	r2, [r7, #24]
 801adf6:	429a      	cmp	r2, r3
 801adf8:	d10a      	bne.n	801ae10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adfe:	f383 8811 	msr	BASEPRI, r3
 801ae02:	f3bf 8f6f 	isb	sy
 801ae06:	f3bf 8f4f 	dsb	sy
 801ae0a:	60bb      	str	r3, [r7, #8]
}
 801ae0c:	bf00      	nop
 801ae0e:	e7fe      	b.n	801ae0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801ae10:	69bb      	ldr	r3, [r7, #24]
 801ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ae16:	69bb      	ldr	r3, [r7, #24]
 801ae18:	69fa      	ldr	r2, [r7, #28]
 801ae1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ae1c:	69bb      	ldr	r3, [r7, #24]
 801ae1e:	699b      	ldr	r3, [r3, #24]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	db04      	blt.n	801ae2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ae2a:	69bb      	ldr	r3, [r7, #24]
 801ae2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ae2e:	69bb      	ldr	r3, [r7, #24]
 801ae30:	6959      	ldr	r1, [r3, #20]
 801ae32:	693a      	ldr	r2, [r7, #16]
 801ae34:	4613      	mov	r3, r2
 801ae36:	009b      	lsls	r3, r3, #2
 801ae38:	4413      	add	r3, r2
 801ae3a:	009b      	lsls	r3, r3, #2
 801ae3c:	4a13      	ldr	r2, [pc, #76]	; (801ae8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801ae3e:	4413      	add	r3, r2
 801ae40:	4299      	cmp	r1, r3
 801ae42:	d11c      	bne.n	801ae7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ae44:	69bb      	ldr	r3, [r7, #24]
 801ae46:	3304      	adds	r3, #4
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7fd fb4d 	bl	80184e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ae4e:	69bb      	ldr	r3, [r7, #24]
 801ae50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae52:	4b0f      	ldr	r3, [pc, #60]	; (801ae90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	429a      	cmp	r2, r3
 801ae58:	d903      	bls.n	801ae62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae5e:	4a0c      	ldr	r2, [pc, #48]	; (801ae90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801ae60:	6013      	str	r3, [r2, #0]
 801ae62:	69bb      	ldr	r3, [r7, #24]
 801ae64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae66:	4613      	mov	r3, r2
 801ae68:	009b      	lsls	r3, r3, #2
 801ae6a:	4413      	add	r3, r2
 801ae6c:	009b      	lsls	r3, r3, #2
 801ae6e:	4a07      	ldr	r2, [pc, #28]	; (801ae8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801ae70:	441a      	add	r2, r3
 801ae72:	69bb      	ldr	r3, [r7, #24]
 801ae74:	3304      	adds	r3, #4
 801ae76:	4619      	mov	r1, r3
 801ae78:	4610      	mov	r0, r2
 801ae7a:	f7fd fad8 	bl	801842e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ae7e:	bf00      	nop
 801ae80:	3720      	adds	r7, #32
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	20001f94 	.word	0x20001f94
 801ae8c:	20001f98 	.word	0x20001f98
 801ae90:	20002470 	.word	0x20002470

0801ae94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801ae94:	b480      	push	{r7}
 801ae96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801ae98:	4b07      	ldr	r3, [pc, #28]	; (801aeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d004      	beq.n	801aeaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801aea0:	4b05      	ldr	r3, [pc, #20]	; (801aeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aea6:	3201      	adds	r2, #1
 801aea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801aeaa:	4b03      	ldr	r3, [pc, #12]	; (801aeb8 <pvTaskIncrementMutexHeldCount+0x24>)
 801aeac:	681b      	ldr	r3, [r3, #0]
	}
 801aeae:	4618      	mov	r0, r3
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeb6:	4770      	bx	lr
 801aeb8:	20001f94 	.word	0x20001f94

0801aebc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b086      	sub	sp, #24
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	60f8      	str	r0, [r7, #12]
 801aec4:	60b9      	str	r1, [r7, #8]
 801aec6:	607a      	str	r2, [r7, #4]
 801aec8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801aeca:	f000 fe0b 	bl	801bae4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801aece:	4b29      	ldr	r3, [pc, #164]	; (801af74 <xTaskNotifyWait+0xb8>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	2b02      	cmp	r3, #2
 801aeda:	d01c      	beq.n	801af16 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801aedc:	4b25      	ldr	r3, [pc, #148]	; (801af74 <xTaskNotifyWait+0xb8>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801aee4:	68fa      	ldr	r2, [r7, #12]
 801aee6:	43d2      	mvns	r2, r2
 801aee8:	400a      	ands	r2, r1
 801aeea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801aeee:	4b21      	ldr	r3, [pc, #132]	; (801af74 <xTaskNotifyWait+0xb8>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	2201      	movs	r2, #1
 801aef4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d00b      	beq.n	801af16 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801aefe:	2101      	movs	r1, #1
 801af00:	6838      	ldr	r0, [r7, #0]
 801af02:	f000 f91f 	bl	801b144 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801af06:	4b1c      	ldr	r3, [pc, #112]	; (801af78 <xTaskNotifyWait+0xbc>)
 801af08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af0c:	601a      	str	r2, [r3, #0]
 801af0e:	f3bf 8f4f 	dsb	sy
 801af12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801af16:	f000 fe15 	bl	801bb44 <vPortExitCritical>

		taskENTER_CRITICAL();
 801af1a:	f000 fde3 	bl	801bae4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d005      	beq.n	801af30 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801af24:	4b13      	ldr	r3, [pc, #76]	; (801af74 <xTaskNotifyWait+0xb8>)
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801af30:	4b10      	ldr	r3, [pc, #64]	; (801af74 <xTaskNotifyWait+0xb8>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	2b02      	cmp	r3, #2
 801af3c:	d002      	beq.n	801af44 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801af3e:	2300      	movs	r3, #0
 801af40:	617b      	str	r3, [r7, #20]
 801af42:	e00a      	b.n	801af5a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801af44:	4b0b      	ldr	r3, [pc, #44]	; (801af74 <xTaskNotifyWait+0xb8>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801af4c:	68ba      	ldr	r2, [r7, #8]
 801af4e:	43d2      	mvns	r2, r2
 801af50:	400a      	ands	r2, r1
 801af52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801af56:	2301      	movs	r3, #1
 801af58:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801af5a:	4b06      	ldr	r3, [pc, #24]	; (801af74 <xTaskNotifyWait+0xb8>)
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	2200      	movs	r2, #0
 801af60:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801af64:	f000 fdee 	bl	801bb44 <vPortExitCritical>

		return xReturn;
 801af68:	697b      	ldr	r3, [r7, #20]
	}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3718      	adds	r7, #24
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}
 801af72:	bf00      	nop
 801af74:	20001f94 	.word	0x20001f94
 801af78:	e000ed04 	.word	0xe000ed04

0801af7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801af7c:	b580      	push	{r7, lr}
 801af7e:	b08a      	sub	sp, #40	; 0x28
 801af80:	af00      	add	r7, sp, #0
 801af82:	60f8      	str	r0, [r7, #12]
 801af84:	60b9      	str	r1, [r7, #8]
 801af86:	603b      	str	r3, [r7, #0]
 801af88:	4613      	mov	r3, r2
 801af8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801af8c:	2301      	movs	r3, #1
 801af8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	2b00      	cmp	r3, #0
 801af94:	d10a      	bne.n	801afac <xTaskGenericNotify+0x30>
	__asm volatile
 801af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af9a:	f383 8811 	msr	BASEPRI, r3
 801af9e:	f3bf 8f6f 	isb	sy
 801afa2:	f3bf 8f4f 	dsb	sy
 801afa6:	61bb      	str	r3, [r7, #24]
}
 801afa8:	bf00      	nop
 801afaa:	e7fe      	b.n	801afaa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801afb0:	f000 fd98 	bl	801bae4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801afb4:	683b      	ldr	r3, [r7, #0]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d004      	beq.n	801afc4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801afba:	6a3b      	ldr	r3, [r7, #32]
 801afbc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801afc0:	683b      	ldr	r3, [r7, #0]
 801afc2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801afc4:	6a3b      	ldr	r3, [r7, #32]
 801afc6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801afca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801afcc:	6a3b      	ldr	r3, [r7, #32]
 801afce:	2202      	movs	r2, #2
 801afd0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801afd4:	79fb      	ldrb	r3, [r7, #7]
 801afd6:	2b04      	cmp	r3, #4
 801afd8:	d82d      	bhi.n	801b036 <xTaskGenericNotify+0xba>
 801afda:	a201      	add	r2, pc, #4	; (adr r2, 801afe0 <xTaskGenericNotify+0x64>)
 801afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afe0:	0801b059 	.word	0x0801b059
 801afe4:	0801aff5 	.word	0x0801aff5
 801afe8:	0801b007 	.word	0x0801b007
 801afec:	0801b017 	.word	0x0801b017
 801aff0:	0801b021 	.word	0x0801b021
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801aff4:	6a3b      	ldr	r3, [r7, #32]
 801aff6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801affa:	68bb      	ldr	r3, [r7, #8]
 801affc:	431a      	orrs	r2, r3
 801affe:	6a3b      	ldr	r3, [r7, #32]
 801b000:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801b004:	e02b      	b.n	801b05e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801b006:	6a3b      	ldr	r3, [r7, #32]
 801b008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b00c:	1c5a      	adds	r2, r3, #1
 801b00e:	6a3b      	ldr	r3, [r7, #32]
 801b010:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801b014:	e023      	b.n	801b05e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801b016:	6a3b      	ldr	r3, [r7, #32]
 801b018:	68ba      	ldr	r2, [r7, #8]
 801b01a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801b01e:	e01e      	b.n	801b05e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801b020:	7ffb      	ldrb	r3, [r7, #31]
 801b022:	2b02      	cmp	r3, #2
 801b024:	d004      	beq.n	801b030 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801b026:	6a3b      	ldr	r3, [r7, #32]
 801b028:	68ba      	ldr	r2, [r7, #8]
 801b02a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801b02e:	e016      	b.n	801b05e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801b030:	2300      	movs	r3, #0
 801b032:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801b034:	e013      	b.n	801b05e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801b036:	6a3b      	ldr	r3, [r7, #32]
 801b038:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b040:	d00c      	beq.n	801b05c <xTaskGenericNotify+0xe0>
	__asm volatile
 801b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b046:	f383 8811 	msr	BASEPRI, r3
 801b04a:	f3bf 8f6f 	isb	sy
 801b04e:	f3bf 8f4f 	dsb	sy
 801b052:	617b      	str	r3, [r7, #20]
}
 801b054:	bf00      	nop
 801b056:	e7fe      	b.n	801b056 <xTaskGenericNotify+0xda>
					break;
 801b058:	bf00      	nop
 801b05a:	e000      	b.n	801b05e <xTaskGenericNotify+0xe2>

					break;
 801b05c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801b05e:	7ffb      	ldrb	r3, [r7, #31]
 801b060:	2b01      	cmp	r3, #1
 801b062:	d13a      	bne.n	801b0da <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b064:	6a3b      	ldr	r3, [r7, #32]
 801b066:	3304      	adds	r3, #4
 801b068:	4618      	mov	r0, r3
 801b06a:	f7fd fa3d 	bl	80184e8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801b06e:	6a3b      	ldr	r3, [r7, #32]
 801b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b072:	4b1d      	ldr	r3, [pc, #116]	; (801b0e8 <xTaskGenericNotify+0x16c>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	429a      	cmp	r2, r3
 801b078:	d903      	bls.n	801b082 <xTaskGenericNotify+0x106>
 801b07a:	6a3b      	ldr	r3, [r7, #32]
 801b07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b07e:	4a1a      	ldr	r2, [pc, #104]	; (801b0e8 <xTaskGenericNotify+0x16c>)
 801b080:	6013      	str	r3, [r2, #0]
 801b082:	6a3b      	ldr	r3, [r7, #32]
 801b084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b086:	4613      	mov	r3, r2
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	4413      	add	r3, r2
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	4a17      	ldr	r2, [pc, #92]	; (801b0ec <xTaskGenericNotify+0x170>)
 801b090:	441a      	add	r2, r3
 801b092:	6a3b      	ldr	r3, [r7, #32]
 801b094:	3304      	adds	r3, #4
 801b096:	4619      	mov	r1, r3
 801b098:	4610      	mov	r0, r2
 801b09a:	f7fd f9c8 	bl	801842e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801b09e:	6a3b      	ldr	r3, [r7, #32]
 801b0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d00a      	beq.n	801b0bc <xTaskGenericNotify+0x140>
	__asm volatile
 801b0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0aa:	f383 8811 	msr	BASEPRI, r3
 801b0ae:	f3bf 8f6f 	isb	sy
 801b0b2:	f3bf 8f4f 	dsb	sy
 801b0b6:	613b      	str	r3, [r7, #16]
}
 801b0b8:	bf00      	nop
 801b0ba:	e7fe      	b.n	801b0ba <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b0bc:	6a3b      	ldr	r3, [r7, #32]
 801b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0c0:	4b0b      	ldr	r3, [pc, #44]	; (801b0f0 <xTaskGenericNotify+0x174>)
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0c6:	429a      	cmp	r2, r3
 801b0c8:	d907      	bls.n	801b0da <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801b0ca:	4b0a      	ldr	r3, [pc, #40]	; (801b0f4 <xTaskGenericNotify+0x178>)
 801b0cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b0d0:	601a      	str	r2, [r3, #0]
 801b0d2:	f3bf 8f4f 	dsb	sy
 801b0d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801b0da:	f000 fd33 	bl	801bb44 <vPortExitCritical>

		return xReturn;
 801b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	3728      	adds	r7, #40	; 0x28
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	bd80      	pop	{r7, pc}
 801b0e8:	20002470 	.word	0x20002470
 801b0ec:	20001f98 	.word	0x20001f98
 801b0f0:	20001f94 	.word	0x20001f94
 801b0f4:	e000ed04 	.word	0xe000ed04

0801b0f8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b084      	sub	sp, #16
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d102      	bne.n	801b10c <xTaskNotifyStateClear+0x14>
 801b106:	4b0e      	ldr	r3, [pc, #56]	; (801b140 <xTaskNotifyStateClear+0x48>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	e000      	b.n	801b10e <xTaskNotifyStateClear+0x16>
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 801b110:	f000 fce8 	bl	801bae4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	2b02      	cmp	r3, #2
 801b11e:	d106      	bne.n	801b12e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	2200      	movs	r2, #0
 801b124:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 801b128:	2301      	movs	r3, #1
 801b12a:	60fb      	str	r3, [r7, #12]
 801b12c:	e001      	b.n	801b132 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801b12e:	2300      	movs	r3, #0
 801b130:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801b132:	f000 fd07 	bl	801bb44 <vPortExitCritical>

		return xReturn;
 801b136:	68fb      	ldr	r3, [r7, #12]
	}
 801b138:	4618      	mov	r0, r3
 801b13a:	3710      	adds	r7, #16
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bd80      	pop	{r7, pc}
 801b140:	20001f94 	.word	0x20001f94

0801b144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b144:	b580      	push	{r7, lr}
 801b146:	b084      	sub	sp, #16
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
 801b14c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b14e:	4b21      	ldr	r3, [pc, #132]	; (801b1d4 <prvAddCurrentTaskToDelayedList+0x90>)
 801b150:	681b      	ldr	r3, [r3, #0]
 801b152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b154:	4b20      	ldr	r3, [pc, #128]	; (801b1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	3304      	adds	r3, #4
 801b15a:	4618      	mov	r0, r3
 801b15c:	f7fd f9c4 	bl	80184e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b166:	d10a      	bne.n	801b17e <prvAddCurrentTaskToDelayedList+0x3a>
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d007      	beq.n	801b17e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b16e:	4b1a      	ldr	r3, [pc, #104]	; (801b1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	3304      	adds	r3, #4
 801b174:	4619      	mov	r1, r3
 801b176:	4819      	ldr	r0, [pc, #100]	; (801b1dc <prvAddCurrentTaskToDelayedList+0x98>)
 801b178:	f7fd f959 	bl	801842e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b17c:	e026      	b.n	801b1cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b17e:	68fa      	ldr	r2, [r7, #12]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	4413      	add	r3, r2
 801b184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b186:	4b14      	ldr	r3, [pc, #80]	; (801b1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	68ba      	ldr	r2, [r7, #8]
 801b18c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b18e:	68ba      	ldr	r2, [r7, #8]
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	429a      	cmp	r2, r3
 801b194:	d209      	bcs.n	801b1aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b196:	4b12      	ldr	r3, [pc, #72]	; (801b1e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 801b198:	681a      	ldr	r2, [r3, #0]
 801b19a:	4b0f      	ldr	r3, [pc, #60]	; (801b1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	3304      	adds	r3, #4
 801b1a0:	4619      	mov	r1, r3
 801b1a2:	4610      	mov	r0, r2
 801b1a4:	f7fd f967 	bl	8018476 <vListInsert>
}
 801b1a8:	e010      	b.n	801b1cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b1aa:	4b0e      	ldr	r3, [pc, #56]	; (801b1e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801b1ac:	681a      	ldr	r2, [r3, #0]
 801b1ae:	4b0a      	ldr	r3, [pc, #40]	; (801b1d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	3304      	adds	r3, #4
 801b1b4:	4619      	mov	r1, r3
 801b1b6:	4610      	mov	r0, r2
 801b1b8:	f7fd f95d 	bl	8018476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b1bc:	4b0a      	ldr	r3, [pc, #40]	; (801b1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	68ba      	ldr	r2, [r7, #8]
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	d202      	bcs.n	801b1cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b1c6:	4a08      	ldr	r2, [pc, #32]	; (801b1e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	6013      	str	r3, [r2, #0]
}
 801b1cc:	bf00      	nop
 801b1ce:	3710      	adds	r7, #16
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}
 801b1d4:	2000246c 	.word	0x2000246c
 801b1d8:	20001f94 	.word	0x20001f94
 801b1dc:	20002454 	.word	0x20002454
 801b1e0:	20002424 	.word	0x20002424
 801b1e4:	20002420 	.word	0x20002420
 801b1e8:	20002488 	.word	0x20002488

0801b1ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b08a      	sub	sp, #40	; 0x28
 801b1f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b1f6:	f000 fb07 	bl	801b808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b1fa:	4b1c      	ldr	r3, [pc, #112]	; (801b26c <xTimerCreateTimerTask+0x80>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d021      	beq.n	801b246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b202:	2300      	movs	r3, #0
 801b204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b206:	2300      	movs	r3, #0
 801b208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b20a:	1d3a      	adds	r2, r7, #4
 801b20c:	f107 0108 	add.w	r1, r7, #8
 801b210:	f107 030c 	add.w	r3, r7, #12
 801b214:	4618      	mov	r0, r3
 801b216:	f7fd f8c3 	bl	80183a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b21a:	6879      	ldr	r1, [r7, #4]
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	68fa      	ldr	r2, [r7, #12]
 801b220:	9202      	str	r2, [sp, #8]
 801b222:	9301      	str	r3, [sp, #4]
 801b224:	2302      	movs	r3, #2
 801b226:	9300      	str	r3, [sp, #0]
 801b228:	2300      	movs	r3, #0
 801b22a:	460a      	mov	r2, r1
 801b22c:	4910      	ldr	r1, [pc, #64]	; (801b270 <xTimerCreateTimerTask+0x84>)
 801b22e:	4811      	ldr	r0, [pc, #68]	; (801b274 <xTimerCreateTimerTask+0x88>)
 801b230:	f7fe fe0a 	bl	8019e48 <xTaskCreateStatic>
 801b234:	4603      	mov	r3, r0
 801b236:	4a10      	ldr	r2, [pc, #64]	; (801b278 <xTimerCreateTimerTask+0x8c>)
 801b238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b23a:	4b0f      	ldr	r3, [pc, #60]	; (801b278 <xTimerCreateTimerTask+0x8c>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d001      	beq.n	801b246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b242:	2301      	movs	r3, #1
 801b244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d10a      	bne.n	801b262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b250:	f383 8811 	msr	BASEPRI, r3
 801b254:	f3bf 8f6f 	isb	sy
 801b258:	f3bf 8f4f 	dsb	sy
 801b25c:	613b      	str	r3, [r7, #16]
}
 801b25e:	bf00      	nop
 801b260:	e7fe      	b.n	801b260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801b262:	697b      	ldr	r3, [r7, #20]
}
 801b264:	4618      	mov	r0, r3
 801b266:	3718      	adds	r7, #24
 801b268:	46bd      	mov	sp, r7
 801b26a:	bd80      	pop	{r7, pc}
 801b26c:	200024cc 	.word	0x200024cc
 801b270:	0801f874 	.word	0x0801f874
 801b274:	0801b3b1 	.word	0x0801b3b1
 801b278:	200024d0 	.word	0x200024d0

0801b27c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b08a      	sub	sp, #40	; 0x28
 801b280:	af00      	add	r7, sp, #0
 801b282:	60f8      	str	r0, [r7, #12]
 801b284:	60b9      	str	r1, [r7, #8]
 801b286:	607a      	str	r2, [r7, #4]
 801b288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b28a:	2300      	movs	r3, #0
 801b28c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d10a      	bne.n	801b2aa <xTimerGenericCommand+0x2e>
	__asm volatile
 801b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b298:	f383 8811 	msr	BASEPRI, r3
 801b29c:	f3bf 8f6f 	isb	sy
 801b2a0:	f3bf 8f4f 	dsb	sy
 801b2a4:	623b      	str	r3, [r7, #32]
}
 801b2a6:	bf00      	nop
 801b2a8:	e7fe      	b.n	801b2a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b2aa:	4b1a      	ldr	r3, [pc, #104]	; (801b314 <xTimerGenericCommand+0x98>)
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d02a      	beq.n	801b308 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b2b2:	68bb      	ldr	r3, [r7, #8]
 801b2b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b2be:	68bb      	ldr	r3, [r7, #8]
 801b2c0:	2b05      	cmp	r3, #5
 801b2c2:	dc18      	bgt.n	801b2f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b2c4:	f7ff fc70 	bl	801aba8 <xTaskGetSchedulerState>
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b02      	cmp	r3, #2
 801b2cc:	d109      	bne.n	801b2e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b2ce:	4b11      	ldr	r3, [pc, #68]	; (801b314 <xTimerGenericCommand+0x98>)
 801b2d0:	6818      	ldr	r0, [r3, #0]
 801b2d2:	f107 0110 	add.w	r1, r7, #16
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2da:	f7fd fb8d 	bl	80189f8 <xQueueGenericSend>
 801b2de:	6278      	str	r0, [r7, #36]	; 0x24
 801b2e0:	e012      	b.n	801b308 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b2e2:	4b0c      	ldr	r3, [pc, #48]	; (801b314 <xTimerGenericCommand+0x98>)
 801b2e4:	6818      	ldr	r0, [r3, #0]
 801b2e6:	f107 0110 	add.w	r1, r7, #16
 801b2ea:	2300      	movs	r3, #0
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	f7fd fb83 	bl	80189f8 <xQueueGenericSend>
 801b2f2:	6278      	str	r0, [r7, #36]	; 0x24
 801b2f4:	e008      	b.n	801b308 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b2f6:	4b07      	ldr	r3, [pc, #28]	; (801b314 <xTimerGenericCommand+0x98>)
 801b2f8:	6818      	ldr	r0, [r3, #0]
 801b2fa:	f107 0110 	add.w	r1, r7, #16
 801b2fe:	2300      	movs	r3, #0
 801b300:	683a      	ldr	r2, [r7, #0]
 801b302:	f7fd fc77 	bl	8018bf4 <xQueueGenericSendFromISR>
 801b306:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b30a:	4618      	mov	r0, r3
 801b30c:	3728      	adds	r7, #40	; 0x28
 801b30e:	46bd      	mov	sp, r7
 801b310:	bd80      	pop	{r7, pc}
 801b312:	bf00      	nop
 801b314:	200024cc 	.word	0x200024cc

0801b318 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b088      	sub	sp, #32
 801b31c:	af02      	add	r7, sp, #8
 801b31e:	6078      	str	r0, [r7, #4]
 801b320:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b322:	4b22      	ldr	r3, [pc, #136]	; (801b3ac <prvProcessExpiredTimer+0x94>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	68db      	ldr	r3, [r3, #12]
 801b328:	68db      	ldr	r3, [r3, #12]
 801b32a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	3304      	adds	r3, #4
 801b330:	4618      	mov	r0, r3
 801b332:	f7fd f8d9 	bl	80184e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b336:	697b      	ldr	r3, [r7, #20]
 801b338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b33c:	f003 0304 	and.w	r3, r3, #4
 801b340:	2b00      	cmp	r3, #0
 801b342:	d022      	beq.n	801b38a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	699a      	ldr	r2, [r3, #24]
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	18d1      	adds	r1, r2, r3
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	683a      	ldr	r2, [r7, #0]
 801b350:	6978      	ldr	r0, [r7, #20]
 801b352:	f000 f8d1 	bl	801b4f8 <prvInsertTimerInActiveList>
 801b356:	4603      	mov	r3, r0
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d01f      	beq.n	801b39c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b35c:	2300      	movs	r3, #0
 801b35e:	9300      	str	r3, [sp, #0]
 801b360:	2300      	movs	r3, #0
 801b362:	687a      	ldr	r2, [r7, #4]
 801b364:	2100      	movs	r1, #0
 801b366:	6978      	ldr	r0, [r7, #20]
 801b368:	f7ff ff88 	bl	801b27c <xTimerGenericCommand>
 801b36c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b36e:	693b      	ldr	r3, [r7, #16]
 801b370:	2b00      	cmp	r3, #0
 801b372:	d113      	bne.n	801b39c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b378:	f383 8811 	msr	BASEPRI, r3
 801b37c:	f3bf 8f6f 	isb	sy
 801b380:	f3bf 8f4f 	dsb	sy
 801b384:	60fb      	str	r3, [r7, #12]
}
 801b386:	bf00      	nop
 801b388:	e7fe      	b.n	801b388 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b38a:	697b      	ldr	r3, [r7, #20]
 801b38c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b390:	f023 0301 	bic.w	r3, r3, #1
 801b394:	b2da      	uxtb	r2, r3
 801b396:	697b      	ldr	r3, [r7, #20]
 801b398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b39c:	697b      	ldr	r3, [r7, #20]
 801b39e:	6a1b      	ldr	r3, [r3, #32]
 801b3a0:	6978      	ldr	r0, [r7, #20]
 801b3a2:	4798      	blx	r3
}
 801b3a4:	bf00      	nop
 801b3a6:	3718      	adds	r7, #24
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	200024c4 	.word	0x200024c4

0801b3b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b084      	sub	sp, #16
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b3b8:	f107 0308 	add.w	r3, r7, #8
 801b3bc:	4618      	mov	r0, r3
 801b3be:	f000 f857 	bl	801b470 <prvGetNextExpireTime>
 801b3c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	4619      	mov	r1, r3
 801b3c8:	68f8      	ldr	r0, [r7, #12]
 801b3ca:	f000 f803 	bl	801b3d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b3ce:	f000 f8d5 	bl	801b57c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b3d2:	e7f1      	b.n	801b3b8 <prvTimerTask+0x8>

0801b3d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b084      	sub	sp, #16
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b3de:	f7fe ff95 	bl	801a30c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b3e2:	f107 0308 	add.w	r3, r7, #8
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	f000 f866 	bl	801b4b8 <prvSampleTimeNow>
 801b3ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d130      	bne.n	801b456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b3f4:	683b      	ldr	r3, [r7, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d10a      	bne.n	801b410 <prvProcessTimerOrBlockTask+0x3c>
 801b3fa:	687a      	ldr	r2, [r7, #4]
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d806      	bhi.n	801b410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b402:	f7fe ff91 	bl	801a328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b406:	68f9      	ldr	r1, [r7, #12]
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	f7ff ff85 	bl	801b318 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b40e:	e024      	b.n	801b45a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b410:	683b      	ldr	r3, [r7, #0]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d008      	beq.n	801b428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b416:	4b13      	ldr	r3, [pc, #76]	; (801b464 <prvProcessTimerOrBlockTask+0x90>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d101      	bne.n	801b424 <prvProcessTimerOrBlockTask+0x50>
 801b420:	2301      	movs	r3, #1
 801b422:	e000      	b.n	801b426 <prvProcessTimerOrBlockTask+0x52>
 801b424:	2300      	movs	r3, #0
 801b426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b428:	4b0f      	ldr	r3, [pc, #60]	; (801b468 <prvProcessTimerOrBlockTask+0x94>)
 801b42a:	6818      	ldr	r0, [r3, #0]
 801b42c:	687a      	ldr	r2, [r7, #4]
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	1ad3      	subs	r3, r2, r3
 801b432:	683a      	ldr	r2, [r7, #0]
 801b434:	4619      	mov	r1, r3
 801b436:	f7fe f94d 	bl	80196d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b43a:	f7fe ff75 	bl	801a328 <xTaskResumeAll>
 801b43e:	4603      	mov	r3, r0
 801b440:	2b00      	cmp	r3, #0
 801b442:	d10a      	bne.n	801b45a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b444:	4b09      	ldr	r3, [pc, #36]	; (801b46c <prvProcessTimerOrBlockTask+0x98>)
 801b446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b44a:	601a      	str	r2, [r3, #0]
 801b44c:	f3bf 8f4f 	dsb	sy
 801b450:	f3bf 8f6f 	isb	sy
}
 801b454:	e001      	b.n	801b45a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b456:	f7fe ff67 	bl	801a328 <xTaskResumeAll>
}
 801b45a:	bf00      	nop
 801b45c:	3710      	adds	r7, #16
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	200024c8 	.word	0x200024c8
 801b468:	200024cc 	.word	0x200024cc
 801b46c:	e000ed04 	.word	0xe000ed04

0801b470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b470:	b480      	push	{r7}
 801b472:	b085      	sub	sp, #20
 801b474:	af00      	add	r7, sp, #0
 801b476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b478:	4b0e      	ldr	r3, [pc, #56]	; (801b4b4 <prvGetNextExpireTime+0x44>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d101      	bne.n	801b486 <prvGetNextExpireTime+0x16>
 801b482:	2201      	movs	r2, #1
 801b484:	e000      	b.n	801b488 <prvGetNextExpireTime+0x18>
 801b486:	2200      	movs	r2, #0
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d105      	bne.n	801b4a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b494:	4b07      	ldr	r3, [pc, #28]	; (801b4b4 <prvGetNextExpireTime+0x44>)
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	68db      	ldr	r3, [r3, #12]
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	60fb      	str	r3, [r7, #12]
 801b49e:	e001      	b.n	801b4a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b4a4:	68fb      	ldr	r3, [r7, #12]
}
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	3714      	adds	r7, #20
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b0:	4770      	bx	lr
 801b4b2:	bf00      	nop
 801b4b4:	200024c4 	.word	0x200024c4

0801b4b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b084      	sub	sp, #16
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b4c0:	f7fe ffd0 	bl	801a464 <xTaskGetTickCount>
 801b4c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b4c6:	4b0b      	ldr	r3, [pc, #44]	; (801b4f4 <prvSampleTimeNow+0x3c>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	68fa      	ldr	r2, [r7, #12]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d205      	bcs.n	801b4dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b4d0:	f000 f936 	bl	801b740 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	2201      	movs	r2, #1
 801b4d8:	601a      	str	r2, [r3, #0]
 801b4da:	e002      	b.n	801b4e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b4e2:	4a04      	ldr	r2, [pc, #16]	; (801b4f4 <prvSampleTimeNow+0x3c>)
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b4e8:	68fb      	ldr	r3, [r7, #12]
}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	3710      	adds	r7, #16
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	bd80      	pop	{r7, pc}
 801b4f2:	bf00      	nop
 801b4f4:	200024d4 	.word	0x200024d4

0801b4f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b4f8:	b580      	push	{r7, lr}
 801b4fa:	b086      	sub	sp, #24
 801b4fc:	af00      	add	r7, sp, #0
 801b4fe:	60f8      	str	r0, [r7, #12]
 801b500:	60b9      	str	r1, [r7, #8]
 801b502:	607a      	str	r2, [r7, #4]
 801b504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b506:	2300      	movs	r3, #0
 801b508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b50a:	68fb      	ldr	r3, [r7, #12]
 801b50c:	68ba      	ldr	r2, [r7, #8]
 801b50e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	68fa      	ldr	r2, [r7, #12]
 801b514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b516:	68ba      	ldr	r2, [r7, #8]
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d812      	bhi.n	801b544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b51e:	687a      	ldr	r2, [r7, #4]
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	1ad2      	subs	r2, r2, r3
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	699b      	ldr	r3, [r3, #24]
 801b528:	429a      	cmp	r2, r3
 801b52a:	d302      	bcc.n	801b532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b52c:	2301      	movs	r3, #1
 801b52e:	617b      	str	r3, [r7, #20]
 801b530:	e01b      	b.n	801b56a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b532:	4b10      	ldr	r3, [pc, #64]	; (801b574 <prvInsertTimerInActiveList+0x7c>)
 801b534:	681a      	ldr	r2, [r3, #0]
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	3304      	adds	r3, #4
 801b53a:	4619      	mov	r1, r3
 801b53c:	4610      	mov	r0, r2
 801b53e:	f7fc ff9a 	bl	8018476 <vListInsert>
 801b542:	e012      	b.n	801b56a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b544:	687a      	ldr	r2, [r7, #4]
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	429a      	cmp	r2, r3
 801b54a:	d206      	bcs.n	801b55a <prvInsertTimerInActiveList+0x62>
 801b54c:	68ba      	ldr	r2, [r7, #8]
 801b54e:	683b      	ldr	r3, [r7, #0]
 801b550:	429a      	cmp	r2, r3
 801b552:	d302      	bcc.n	801b55a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b554:	2301      	movs	r3, #1
 801b556:	617b      	str	r3, [r7, #20]
 801b558:	e007      	b.n	801b56a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b55a:	4b07      	ldr	r3, [pc, #28]	; (801b578 <prvInsertTimerInActiveList+0x80>)
 801b55c:	681a      	ldr	r2, [r3, #0]
 801b55e:	68fb      	ldr	r3, [r7, #12]
 801b560:	3304      	adds	r3, #4
 801b562:	4619      	mov	r1, r3
 801b564:	4610      	mov	r0, r2
 801b566:	f7fc ff86 	bl	8018476 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b56a:	697b      	ldr	r3, [r7, #20]
}
 801b56c:	4618      	mov	r0, r3
 801b56e:	3718      	adds	r7, #24
 801b570:	46bd      	mov	sp, r7
 801b572:	bd80      	pop	{r7, pc}
 801b574:	200024c8 	.word	0x200024c8
 801b578:	200024c4 	.word	0x200024c4

0801b57c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b57c:	b580      	push	{r7, lr}
 801b57e:	b08e      	sub	sp, #56	; 0x38
 801b580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b582:	e0ca      	b.n	801b71a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	2b00      	cmp	r3, #0
 801b588:	da18      	bge.n	801b5bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b58a:	1d3b      	adds	r3, r7, #4
 801b58c:	3304      	adds	r3, #4
 801b58e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b592:	2b00      	cmp	r3, #0
 801b594:	d10a      	bne.n	801b5ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 801b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b59a:	f383 8811 	msr	BASEPRI, r3
 801b59e:	f3bf 8f6f 	isb	sy
 801b5a2:	f3bf 8f4f 	dsb	sy
 801b5a6:	61fb      	str	r3, [r7, #28]
}
 801b5a8:	bf00      	nop
 801b5aa:	e7fe      	b.n	801b5aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b5b2:	6850      	ldr	r0, [r2, #4]
 801b5b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b5b6:	6892      	ldr	r2, [r2, #8]
 801b5b8:	4611      	mov	r1, r2
 801b5ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	f2c0 80aa 	blt.w	801b718 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5ca:	695b      	ldr	r3, [r3, #20]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d004      	beq.n	801b5da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5d2:	3304      	adds	r3, #4
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f7fc ff87 	bl	80184e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b5da:	463b      	mov	r3, r7
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f7ff ff6b 	bl	801b4b8 <prvSampleTimeNow>
 801b5e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	2b09      	cmp	r3, #9
 801b5e8:	f200 8097 	bhi.w	801b71a <prvProcessReceivedCommands+0x19e>
 801b5ec:	a201      	add	r2, pc, #4	; (adr r2, 801b5f4 <prvProcessReceivedCommands+0x78>)
 801b5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b5f2:	bf00      	nop
 801b5f4:	0801b61d 	.word	0x0801b61d
 801b5f8:	0801b61d 	.word	0x0801b61d
 801b5fc:	0801b61d 	.word	0x0801b61d
 801b600:	0801b691 	.word	0x0801b691
 801b604:	0801b6a5 	.word	0x0801b6a5
 801b608:	0801b6ef 	.word	0x0801b6ef
 801b60c:	0801b61d 	.word	0x0801b61d
 801b610:	0801b61d 	.word	0x0801b61d
 801b614:	0801b691 	.word	0x0801b691
 801b618:	0801b6a5 	.word	0x0801b6a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b61e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b622:	f043 0301 	orr.w	r3, r3, #1
 801b626:	b2da      	uxtb	r2, r3
 801b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b62a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b62e:	68ba      	ldr	r2, [r7, #8]
 801b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b632:	699b      	ldr	r3, [r3, #24]
 801b634:	18d1      	adds	r1, r2, r3
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b63c:	f7ff ff5c 	bl	801b4f8 <prvInsertTimerInActiveList>
 801b640:	4603      	mov	r3, r0
 801b642:	2b00      	cmp	r3, #0
 801b644:	d069      	beq.n	801b71a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b648:	6a1b      	ldr	r3, [r3, #32]
 801b64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b64c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b654:	f003 0304 	and.w	r3, r3, #4
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d05e      	beq.n	801b71a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b65c:	68ba      	ldr	r2, [r7, #8]
 801b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b660:	699b      	ldr	r3, [r3, #24]
 801b662:	441a      	add	r2, r3
 801b664:	2300      	movs	r3, #0
 801b666:	9300      	str	r3, [sp, #0]
 801b668:	2300      	movs	r3, #0
 801b66a:	2100      	movs	r1, #0
 801b66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b66e:	f7ff fe05 	bl	801b27c <xTimerGenericCommand>
 801b672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b674:	6a3b      	ldr	r3, [r7, #32]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d14f      	bne.n	801b71a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b67e:	f383 8811 	msr	BASEPRI, r3
 801b682:	f3bf 8f6f 	isb	sy
 801b686:	f3bf 8f4f 	dsb	sy
 801b68a:	61bb      	str	r3, [r7, #24]
}
 801b68c:	bf00      	nop
 801b68e:	e7fe      	b.n	801b68e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b696:	f023 0301 	bic.w	r3, r3, #1
 801b69a:	b2da      	uxtb	r2, r3
 801b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b6a2:	e03a      	b.n	801b71a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b6aa:	f043 0301 	orr.w	r3, r3, #1
 801b6ae:	b2da      	uxtb	r2, r3
 801b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b6b6:	68ba      	ldr	r2, [r7, #8]
 801b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6be:	699b      	ldr	r3, [r3, #24]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d10a      	bne.n	801b6da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6c8:	f383 8811 	msr	BASEPRI, r3
 801b6cc:	f3bf 8f6f 	isb	sy
 801b6d0:	f3bf 8f4f 	dsb	sy
 801b6d4:	617b      	str	r3, [r7, #20]
}
 801b6d6:	bf00      	nop
 801b6d8:	e7fe      	b.n	801b6d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6dc:	699a      	ldr	r2, [r3, #24]
 801b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e0:	18d1      	adds	r1, r2, r3
 801b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b6e8:	f7ff ff06 	bl	801b4f8 <prvInsertTimerInActiveList>
					break;
 801b6ec:	e015      	b.n	801b71a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b6f4:	f003 0302 	and.w	r3, r3, #2
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d103      	bne.n	801b704 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b6fe:	f000 fbe3 	bl	801bec8 <vPortFree>
 801b702:	e00a      	b.n	801b71a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b70a:	f023 0301 	bic.w	r3, r3, #1
 801b70e:	b2da      	uxtb	r2, r3
 801b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b716:	e000      	b.n	801b71a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b71a:	4b08      	ldr	r3, [pc, #32]	; (801b73c <prvProcessReceivedCommands+0x1c0>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	1d39      	adds	r1, r7, #4
 801b720:	2200      	movs	r2, #0
 801b722:	4618      	mov	r0, r3
 801b724:	f7fd fb8e 	bl	8018e44 <xQueueReceive>
 801b728:	4603      	mov	r3, r0
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	f47f af2a 	bne.w	801b584 <prvProcessReceivedCommands+0x8>
	}
}
 801b730:	bf00      	nop
 801b732:	bf00      	nop
 801b734:	3730      	adds	r7, #48	; 0x30
 801b736:	46bd      	mov	sp, r7
 801b738:	bd80      	pop	{r7, pc}
 801b73a:	bf00      	nop
 801b73c:	200024cc 	.word	0x200024cc

0801b740 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b740:	b580      	push	{r7, lr}
 801b742:	b088      	sub	sp, #32
 801b744:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b746:	e048      	b.n	801b7da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b748:	4b2d      	ldr	r3, [pc, #180]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	68db      	ldr	r3, [r3, #12]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b752:	4b2b      	ldr	r3, [pc, #172]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	68db      	ldr	r3, [r3, #12]
 801b758:	68db      	ldr	r3, [r3, #12]
 801b75a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	3304      	adds	r3, #4
 801b760:	4618      	mov	r0, r3
 801b762:	f7fc fec1 	bl	80184e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	6a1b      	ldr	r3, [r3, #32]
 801b76a:	68f8      	ldr	r0, [r7, #12]
 801b76c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b76e:	68fb      	ldr	r3, [r7, #12]
 801b770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b774:	f003 0304 	and.w	r3, r3, #4
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d02e      	beq.n	801b7da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	699b      	ldr	r3, [r3, #24]
 801b780:	693a      	ldr	r2, [r7, #16]
 801b782:	4413      	add	r3, r2
 801b784:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b786:	68ba      	ldr	r2, [r7, #8]
 801b788:	693b      	ldr	r3, [r7, #16]
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d90e      	bls.n	801b7ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	68ba      	ldr	r2, [r7, #8]
 801b792:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	68fa      	ldr	r2, [r7, #12]
 801b798:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b79a:	4b19      	ldr	r3, [pc, #100]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b79c:	681a      	ldr	r2, [r3, #0]
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	3304      	adds	r3, #4
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	4610      	mov	r0, r2
 801b7a6:	f7fc fe66 	bl	8018476 <vListInsert>
 801b7aa:	e016      	b.n	801b7da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	9300      	str	r3, [sp, #0]
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	693a      	ldr	r2, [r7, #16]
 801b7b4:	2100      	movs	r1, #0
 801b7b6:	68f8      	ldr	r0, [r7, #12]
 801b7b8:	f7ff fd60 	bl	801b27c <xTimerGenericCommand>
 801b7bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d10a      	bne.n	801b7da <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7c8:	f383 8811 	msr	BASEPRI, r3
 801b7cc:	f3bf 8f6f 	isb	sy
 801b7d0:	f3bf 8f4f 	dsb	sy
 801b7d4:	603b      	str	r3, [r7, #0]
}
 801b7d6:	bf00      	nop
 801b7d8:	e7fe      	b.n	801b7d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b7da:	4b09      	ldr	r3, [pc, #36]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d1b1      	bne.n	801b748 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b7e4:	4b06      	ldr	r3, [pc, #24]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b7ea:	4b06      	ldr	r3, [pc, #24]	; (801b804 <prvSwitchTimerLists+0xc4>)
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	4a04      	ldr	r2, [pc, #16]	; (801b800 <prvSwitchTimerLists+0xc0>)
 801b7f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b7f2:	4a04      	ldr	r2, [pc, #16]	; (801b804 <prvSwitchTimerLists+0xc4>)
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	6013      	str	r3, [r2, #0]
}
 801b7f8:	bf00      	nop
 801b7fa:	3718      	adds	r7, #24
 801b7fc:	46bd      	mov	sp, r7
 801b7fe:	bd80      	pop	{r7, pc}
 801b800:	200024c4 	.word	0x200024c4
 801b804:	200024c8 	.word	0x200024c8

0801b808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b808:	b580      	push	{r7, lr}
 801b80a:	b082      	sub	sp, #8
 801b80c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b80e:	f000 f969 	bl	801bae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b812:	4b15      	ldr	r3, [pc, #84]	; (801b868 <prvCheckForValidListAndQueue+0x60>)
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d120      	bne.n	801b85c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b81a:	4814      	ldr	r0, [pc, #80]	; (801b86c <prvCheckForValidListAndQueue+0x64>)
 801b81c:	f7fc fdda 	bl	80183d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b820:	4813      	ldr	r0, [pc, #76]	; (801b870 <prvCheckForValidListAndQueue+0x68>)
 801b822:	f7fc fdd7 	bl	80183d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b826:	4b13      	ldr	r3, [pc, #76]	; (801b874 <prvCheckForValidListAndQueue+0x6c>)
 801b828:	4a10      	ldr	r2, [pc, #64]	; (801b86c <prvCheckForValidListAndQueue+0x64>)
 801b82a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b82c:	4b12      	ldr	r3, [pc, #72]	; (801b878 <prvCheckForValidListAndQueue+0x70>)
 801b82e:	4a10      	ldr	r2, [pc, #64]	; (801b870 <prvCheckForValidListAndQueue+0x68>)
 801b830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b832:	2300      	movs	r3, #0
 801b834:	9300      	str	r3, [sp, #0]
 801b836:	4b11      	ldr	r3, [pc, #68]	; (801b87c <prvCheckForValidListAndQueue+0x74>)
 801b838:	4a11      	ldr	r2, [pc, #68]	; (801b880 <prvCheckForValidListAndQueue+0x78>)
 801b83a:	2110      	movs	r1, #16
 801b83c:	200a      	movs	r0, #10
 801b83e:	f7fc fee5 	bl	801860c <xQueueGenericCreateStatic>
 801b842:	4603      	mov	r3, r0
 801b844:	4a08      	ldr	r2, [pc, #32]	; (801b868 <prvCheckForValidListAndQueue+0x60>)
 801b846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b848:	4b07      	ldr	r3, [pc, #28]	; (801b868 <prvCheckForValidListAndQueue+0x60>)
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d005      	beq.n	801b85c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b850:	4b05      	ldr	r3, [pc, #20]	; (801b868 <prvCheckForValidListAndQueue+0x60>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	490b      	ldr	r1, [pc, #44]	; (801b884 <prvCheckForValidListAndQueue+0x7c>)
 801b856:	4618      	mov	r0, r3
 801b858:	f7fd fee8 	bl	801962c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b85c:	f000 f972 	bl	801bb44 <vPortExitCritical>
}
 801b860:	bf00      	nop
 801b862:	46bd      	mov	sp, r7
 801b864:	bd80      	pop	{r7, pc}
 801b866:	bf00      	nop
 801b868:	200024cc 	.word	0x200024cc
 801b86c:	2000249c 	.word	0x2000249c
 801b870:	200024b0 	.word	0x200024b0
 801b874:	200024c4 	.word	0x200024c4
 801b878:	200024c8 	.word	0x200024c8
 801b87c:	20002578 	.word	0x20002578
 801b880:	200024d8 	.word	0x200024d8
 801b884:	0801f87c 	.word	0x0801f87c

0801b888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b888:	b480      	push	{r7}
 801b88a:	b085      	sub	sp, #20
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	60f8      	str	r0, [r7, #12]
 801b890:	60b9      	str	r1, [r7, #8]
 801b892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b894:	68fb      	ldr	r3, [r7, #12]
 801b896:	3b04      	subs	r3, #4
 801b898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	3b04      	subs	r3, #4
 801b8a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	f023 0201 	bic.w	r2, r3, #1
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	3b04      	subs	r3, #4
 801b8b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b8b8:	4a0c      	ldr	r2, [pc, #48]	; (801b8ec <pxPortInitialiseStack+0x64>)
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	3b14      	subs	r3, #20
 801b8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b8c4:	687a      	ldr	r2, [r7, #4]
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	3b04      	subs	r3, #4
 801b8ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	f06f 0202 	mvn.w	r2, #2
 801b8d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	3b20      	subs	r3, #32
 801b8dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b8de:	68fb      	ldr	r3, [r7, #12]
}
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	3714      	adds	r7, #20
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ea:	4770      	bx	lr
 801b8ec:	0801b8f1 	.word	0x0801b8f1

0801b8f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b085      	sub	sp, #20
 801b8f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b8fa:	4b12      	ldr	r3, [pc, #72]	; (801b944 <prvTaskExitError+0x54>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b902:	d00a      	beq.n	801b91a <prvTaskExitError+0x2a>
	__asm volatile
 801b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b908:	f383 8811 	msr	BASEPRI, r3
 801b90c:	f3bf 8f6f 	isb	sy
 801b910:	f3bf 8f4f 	dsb	sy
 801b914:	60fb      	str	r3, [r7, #12]
}
 801b916:	bf00      	nop
 801b918:	e7fe      	b.n	801b918 <prvTaskExitError+0x28>
	__asm volatile
 801b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b91e:	f383 8811 	msr	BASEPRI, r3
 801b922:	f3bf 8f6f 	isb	sy
 801b926:	f3bf 8f4f 	dsb	sy
 801b92a:	60bb      	str	r3, [r7, #8]
}
 801b92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b92e:	bf00      	nop
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d0fc      	beq.n	801b930 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b936:	bf00      	nop
 801b938:	bf00      	nop
 801b93a:	3714      	adds	r7, #20
 801b93c:	46bd      	mov	sp, r7
 801b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b942:	4770      	bx	lr
 801b944:	2000002c 	.word	0x2000002c
	...

0801b950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b950:	4b07      	ldr	r3, [pc, #28]	; (801b970 <pxCurrentTCBConst2>)
 801b952:	6819      	ldr	r1, [r3, #0]
 801b954:	6808      	ldr	r0, [r1, #0]
 801b956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b95a:	f380 8809 	msr	PSP, r0
 801b95e:	f3bf 8f6f 	isb	sy
 801b962:	f04f 0000 	mov.w	r0, #0
 801b966:	f380 8811 	msr	BASEPRI, r0
 801b96a:	4770      	bx	lr
 801b96c:	f3af 8000 	nop.w

0801b970 <pxCurrentTCBConst2>:
 801b970:	20001f94 	.word	0x20001f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b974:	bf00      	nop
 801b976:	bf00      	nop

0801b978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b978:	4808      	ldr	r0, [pc, #32]	; (801b99c <prvPortStartFirstTask+0x24>)
 801b97a:	6800      	ldr	r0, [r0, #0]
 801b97c:	6800      	ldr	r0, [r0, #0]
 801b97e:	f380 8808 	msr	MSP, r0
 801b982:	f04f 0000 	mov.w	r0, #0
 801b986:	f380 8814 	msr	CONTROL, r0
 801b98a:	b662      	cpsie	i
 801b98c:	b661      	cpsie	f
 801b98e:	f3bf 8f4f 	dsb	sy
 801b992:	f3bf 8f6f 	isb	sy
 801b996:	df00      	svc	0
 801b998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b99a:	bf00      	nop
 801b99c:	e000ed08 	.word	0xe000ed08

0801b9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b086      	sub	sp, #24
 801b9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b9a6:	4b46      	ldr	r3, [pc, #280]	; (801bac0 <xPortStartScheduler+0x120>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	4a46      	ldr	r2, [pc, #280]	; (801bac4 <xPortStartScheduler+0x124>)
 801b9ac:	4293      	cmp	r3, r2
 801b9ae:	d10a      	bne.n	801b9c6 <xPortStartScheduler+0x26>
	__asm volatile
 801b9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9b4:	f383 8811 	msr	BASEPRI, r3
 801b9b8:	f3bf 8f6f 	isb	sy
 801b9bc:	f3bf 8f4f 	dsb	sy
 801b9c0:	613b      	str	r3, [r7, #16]
}
 801b9c2:	bf00      	nop
 801b9c4:	e7fe      	b.n	801b9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b9c6:	4b3e      	ldr	r3, [pc, #248]	; (801bac0 <xPortStartScheduler+0x120>)
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	4a3f      	ldr	r2, [pc, #252]	; (801bac8 <xPortStartScheduler+0x128>)
 801b9cc:	4293      	cmp	r3, r2
 801b9ce:	d10a      	bne.n	801b9e6 <xPortStartScheduler+0x46>
	__asm volatile
 801b9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9d4:	f383 8811 	msr	BASEPRI, r3
 801b9d8:	f3bf 8f6f 	isb	sy
 801b9dc:	f3bf 8f4f 	dsb	sy
 801b9e0:	60fb      	str	r3, [r7, #12]
}
 801b9e2:	bf00      	nop
 801b9e4:	e7fe      	b.n	801b9e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b9e6:	4b39      	ldr	r3, [pc, #228]	; (801bacc <xPortStartScheduler+0x12c>)
 801b9e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	b2db      	uxtb	r3, r3
 801b9f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b9f2:	697b      	ldr	r3, [r7, #20]
 801b9f4:	22ff      	movs	r2, #255	; 0xff
 801b9f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	781b      	ldrb	r3, [r3, #0]
 801b9fc:	b2db      	uxtb	r3, r3
 801b9fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801ba00:	78fb      	ldrb	r3, [r7, #3]
 801ba02:	b2db      	uxtb	r3, r3
 801ba04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ba08:	b2da      	uxtb	r2, r3
 801ba0a:	4b31      	ldr	r3, [pc, #196]	; (801bad0 <xPortStartScheduler+0x130>)
 801ba0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801ba0e:	4b31      	ldr	r3, [pc, #196]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba10:	2207      	movs	r2, #7
 801ba12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ba14:	e009      	b.n	801ba2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801ba16:	4b2f      	ldr	r3, [pc, #188]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	3b01      	subs	r3, #1
 801ba1c:	4a2d      	ldr	r2, [pc, #180]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801ba20:	78fb      	ldrb	r3, [r7, #3]
 801ba22:	b2db      	uxtb	r3, r3
 801ba24:	005b      	lsls	r3, r3, #1
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801ba2a:	78fb      	ldrb	r3, [r7, #3]
 801ba2c:	b2db      	uxtb	r3, r3
 801ba2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ba32:	2b80      	cmp	r3, #128	; 0x80
 801ba34:	d0ef      	beq.n	801ba16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801ba36:	4b27      	ldr	r3, [pc, #156]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	f1c3 0307 	rsb	r3, r3, #7
 801ba3e:	2b04      	cmp	r3, #4
 801ba40:	d00a      	beq.n	801ba58 <xPortStartScheduler+0xb8>
	__asm volatile
 801ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba46:	f383 8811 	msr	BASEPRI, r3
 801ba4a:	f3bf 8f6f 	isb	sy
 801ba4e:	f3bf 8f4f 	dsb	sy
 801ba52:	60bb      	str	r3, [r7, #8]
}
 801ba54:	bf00      	nop
 801ba56:	e7fe      	b.n	801ba56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801ba58:	4b1e      	ldr	r3, [pc, #120]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	021b      	lsls	r3, r3, #8
 801ba5e:	4a1d      	ldr	r2, [pc, #116]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801ba62:	4b1c      	ldr	r3, [pc, #112]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801ba6a:	4a1a      	ldr	r2, [pc, #104]	; (801bad4 <xPortStartScheduler+0x134>)
 801ba6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	b2da      	uxtb	r2, r3
 801ba72:	697b      	ldr	r3, [r7, #20]
 801ba74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ba76:	4b18      	ldr	r3, [pc, #96]	; (801bad8 <xPortStartScheduler+0x138>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	4a17      	ldr	r2, [pc, #92]	; (801bad8 <xPortStartScheduler+0x138>)
 801ba7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801ba80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801ba82:	4b15      	ldr	r3, [pc, #84]	; (801bad8 <xPortStartScheduler+0x138>)
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4a14      	ldr	r2, [pc, #80]	; (801bad8 <xPortStartScheduler+0x138>)
 801ba88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801ba8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801ba8e:	f000 f8dd 	bl	801bc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801ba92:	4b12      	ldr	r3, [pc, #72]	; (801badc <xPortStartScheduler+0x13c>)
 801ba94:	2200      	movs	r2, #0
 801ba96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801ba98:	f000 f8fc 	bl	801bc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801ba9c:	4b10      	ldr	r3, [pc, #64]	; (801bae0 <xPortStartScheduler+0x140>)
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	4a0f      	ldr	r2, [pc, #60]	; (801bae0 <xPortStartScheduler+0x140>)
 801baa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801baa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801baa8:	f7ff ff66 	bl	801b978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801baac:	f7fe fda4 	bl	801a5f8 <vTaskSwitchContext>
	prvTaskExitError();
 801bab0:	f7ff ff1e 	bl	801b8f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801bab4:	2300      	movs	r3, #0
}
 801bab6:	4618      	mov	r0, r3
 801bab8:	3718      	adds	r7, #24
 801baba:	46bd      	mov	sp, r7
 801babc:	bd80      	pop	{r7, pc}
 801babe:	bf00      	nop
 801bac0:	e000ed00 	.word	0xe000ed00
 801bac4:	410fc271 	.word	0x410fc271
 801bac8:	410fc270 	.word	0x410fc270
 801bacc:	e000e400 	.word	0xe000e400
 801bad0:	200025c8 	.word	0x200025c8
 801bad4:	200025cc 	.word	0x200025cc
 801bad8:	e000ed20 	.word	0xe000ed20
 801badc:	2000002c 	.word	0x2000002c
 801bae0:	e000ef34 	.word	0xe000ef34

0801bae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801bae4:	b480      	push	{r7}
 801bae6:	b083      	sub	sp, #12
 801bae8:	af00      	add	r7, sp, #0
	__asm volatile
 801baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801baee:	f383 8811 	msr	BASEPRI, r3
 801baf2:	f3bf 8f6f 	isb	sy
 801baf6:	f3bf 8f4f 	dsb	sy
 801bafa:	607b      	str	r3, [r7, #4]
}
 801bafc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801bafe:	4b0f      	ldr	r3, [pc, #60]	; (801bb3c <vPortEnterCritical+0x58>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	3301      	adds	r3, #1
 801bb04:	4a0d      	ldr	r2, [pc, #52]	; (801bb3c <vPortEnterCritical+0x58>)
 801bb06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801bb08:	4b0c      	ldr	r3, [pc, #48]	; (801bb3c <vPortEnterCritical+0x58>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	2b01      	cmp	r3, #1
 801bb0e:	d10f      	bne.n	801bb30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801bb10:	4b0b      	ldr	r3, [pc, #44]	; (801bb40 <vPortEnterCritical+0x5c>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	b2db      	uxtb	r3, r3
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d00a      	beq.n	801bb30 <vPortEnterCritical+0x4c>
	__asm volatile
 801bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb1e:	f383 8811 	msr	BASEPRI, r3
 801bb22:	f3bf 8f6f 	isb	sy
 801bb26:	f3bf 8f4f 	dsb	sy
 801bb2a:	603b      	str	r3, [r7, #0]
}
 801bb2c:	bf00      	nop
 801bb2e:	e7fe      	b.n	801bb2e <vPortEnterCritical+0x4a>
	}
}
 801bb30:	bf00      	nop
 801bb32:	370c      	adds	r7, #12
 801bb34:	46bd      	mov	sp, r7
 801bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb3a:	4770      	bx	lr
 801bb3c:	2000002c 	.word	0x2000002c
 801bb40:	e000ed04 	.word	0xe000ed04

0801bb44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801bb44:	b480      	push	{r7}
 801bb46:	b083      	sub	sp, #12
 801bb48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801bb4a:	4b12      	ldr	r3, [pc, #72]	; (801bb94 <vPortExitCritical+0x50>)
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d10a      	bne.n	801bb68 <vPortExitCritical+0x24>
	__asm volatile
 801bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb56:	f383 8811 	msr	BASEPRI, r3
 801bb5a:	f3bf 8f6f 	isb	sy
 801bb5e:	f3bf 8f4f 	dsb	sy
 801bb62:	607b      	str	r3, [r7, #4]
}
 801bb64:	bf00      	nop
 801bb66:	e7fe      	b.n	801bb66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801bb68:	4b0a      	ldr	r3, [pc, #40]	; (801bb94 <vPortExitCritical+0x50>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	3b01      	subs	r3, #1
 801bb6e:	4a09      	ldr	r2, [pc, #36]	; (801bb94 <vPortExitCritical+0x50>)
 801bb70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801bb72:	4b08      	ldr	r3, [pc, #32]	; (801bb94 <vPortExitCritical+0x50>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d105      	bne.n	801bb86 <vPortExitCritical+0x42>
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	f383 8811 	msr	BASEPRI, r3
}
 801bb84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801bb86:	bf00      	nop
 801bb88:	370c      	adds	r7, #12
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb90:	4770      	bx	lr
 801bb92:	bf00      	nop
 801bb94:	2000002c 	.word	0x2000002c
	...

0801bba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801bba0:	f3ef 8009 	mrs	r0, PSP
 801bba4:	f3bf 8f6f 	isb	sy
 801bba8:	4b15      	ldr	r3, [pc, #84]	; (801bc00 <pxCurrentTCBConst>)
 801bbaa:	681a      	ldr	r2, [r3, #0]
 801bbac:	f01e 0f10 	tst.w	lr, #16
 801bbb0:	bf08      	it	eq
 801bbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801bbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbba:	6010      	str	r0, [r2, #0]
 801bbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801bbc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801bbc4:	f380 8811 	msr	BASEPRI, r0
 801bbc8:	f3bf 8f4f 	dsb	sy
 801bbcc:	f3bf 8f6f 	isb	sy
 801bbd0:	f7fe fd12 	bl	801a5f8 <vTaskSwitchContext>
 801bbd4:	f04f 0000 	mov.w	r0, #0
 801bbd8:	f380 8811 	msr	BASEPRI, r0
 801bbdc:	bc09      	pop	{r0, r3}
 801bbde:	6819      	ldr	r1, [r3, #0]
 801bbe0:	6808      	ldr	r0, [r1, #0]
 801bbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbe6:	f01e 0f10 	tst.w	lr, #16
 801bbea:	bf08      	it	eq
 801bbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801bbf0:	f380 8809 	msr	PSP, r0
 801bbf4:	f3bf 8f6f 	isb	sy
 801bbf8:	4770      	bx	lr
 801bbfa:	bf00      	nop
 801bbfc:	f3af 8000 	nop.w

0801bc00 <pxCurrentTCBConst>:
 801bc00:	20001f94 	.word	0x20001f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801bc04:	bf00      	nop
 801bc06:	bf00      	nop

0801bc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b082      	sub	sp, #8
 801bc0c:	af00      	add	r7, sp, #0
	__asm volatile
 801bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc12:	f383 8811 	msr	BASEPRI, r3
 801bc16:	f3bf 8f6f 	isb	sy
 801bc1a:	f3bf 8f4f 	dsb	sy
 801bc1e:	607b      	str	r3, [r7, #4]
}
 801bc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801bc22:	f7fe fc2f 	bl	801a484 <xTaskIncrementTick>
 801bc26:	4603      	mov	r3, r0
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d003      	beq.n	801bc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801bc2c:	4b06      	ldr	r3, [pc, #24]	; (801bc48 <xPortSysTickHandler+0x40>)
 801bc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bc32:	601a      	str	r2, [r3, #0]
 801bc34:	2300      	movs	r3, #0
 801bc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bc38:	683b      	ldr	r3, [r7, #0]
 801bc3a:	f383 8811 	msr	BASEPRI, r3
}
 801bc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801bc40:	bf00      	nop
 801bc42:	3708      	adds	r7, #8
 801bc44:	46bd      	mov	sp, r7
 801bc46:	bd80      	pop	{r7, pc}
 801bc48:	e000ed04 	.word	0xe000ed04

0801bc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801bc4c:	b480      	push	{r7}
 801bc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801bc50:	4b0b      	ldr	r3, [pc, #44]	; (801bc80 <vPortSetupTimerInterrupt+0x34>)
 801bc52:	2200      	movs	r2, #0
 801bc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801bc56:	4b0b      	ldr	r3, [pc, #44]	; (801bc84 <vPortSetupTimerInterrupt+0x38>)
 801bc58:	2200      	movs	r2, #0
 801bc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801bc5c:	4b0a      	ldr	r3, [pc, #40]	; (801bc88 <vPortSetupTimerInterrupt+0x3c>)
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	4a0a      	ldr	r2, [pc, #40]	; (801bc8c <vPortSetupTimerInterrupt+0x40>)
 801bc62:	fba2 2303 	umull	r2, r3, r2, r3
 801bc66:	099b      	lsrs	r3, r3, #6
 801bc68:	4a09      	ldr	r2, [pc, #36]	; (801bc90 <vPortSetupTimerInterrupt+0x44>)
 801bc6a:	3b01      	subs	r3, #1
 801bc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801bc6e:	4b04      	ldr	r3, [pc, #16]	; (801bc80 <vPortSetupTimerInterrupt+0x34>)
 801bc70:	2207      	movs	r2, #7
 801bc72:	601a      	str	r2, [r3, #0]
}
 801bc74:	bf00      	nop
 801bc76:	46bd      	mov	sp, r7
 801bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7c:	4770      	bx	lr
 801bc7e:	bf00      	nop
 801bc80:	e000e010 	.word	0xe000e010
 801bc84:	e000e018 	.word	0xe000e018
 801bc88:	20000020 	.word	0x20000020
 801bc8c:	10624dd3 	.word	0x10624dd3
 801bc90:	e000e014 	.word	0xe000e014

0801bc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801bc94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801bca4 <vPortEnableVFP+0x10>
 801bc98:	6801      	ldr	r1, [r0, #0]
 801bc9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801bc9e:	6001      	str	r1, [r0, #0]
 801bca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801bca2:	bf00      	nop
 801bca4:	e000ed88 	.word	0xe000ed88

0801bca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801bca8:	b480      	push	{r7}
 801bcaa:	b085      	sub	sp, #20
 801bcac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801bcae:	f3ef 8305 	mrs	r3, IPSR
 801bcb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	2b0f      	cmp	r3, #15
 801bcb8:	d914      	bls.n	801bce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801bcba:	4a17      	ldr	r2, [pc, #92]	; (801bd18 <vPortValidateInterruptPriority+0x70>)
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	4413      	add	r3, r2
 801bcc0:	781b      	ldrb	r3, [r3, #0]
 801bcc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801bcc4:	4b15      	ldr	r3, [pc, #84]	; (801bd1c <vPortValidateInterruptPriority+0x74>)
 801bcc6:	781b      	ldrb	r3, [r3, #0]
 801bcc8:	7afa      	ldrb	r2, [r7, #11]
 801bcca:	429a      	cmp	r2, r3
 801bccc:	d20a      	bcs.n	801bce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcd2:	f383 8811 	msr	BASEPRI, r3
 801bcd6:	f3bf 8f6f 	isb	sy
 801bcda:	f3bf 8f4f 	dsb	sy
 801bcde:	607b      	str	r3, [r7, #4]
}
 801bce0:	bf00      	nop
 801bce2:	e7fe      	b.n	801bce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801bce4:	4b0e      	ldr	r3, [pc, #56]	; (801bd20 <vPortValidateInterruptPriority+0x78>)
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801bcec:	4b0d      	ldr	r3, [pc, #52]	; (801bd24 <vPortValidateInterruptPriority+0x7c>)
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d90a      	bls.n	801bd0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcf8:	f383 8811 	msr	BASEPRI, r3
 801bcfc:	f3bf 8f6f 	isb	sy
 801bd00:	f3bf 8f4f 	dsb	sy
 801bd04:	603b      	str	r3, [r7, #0]
}
 801bd06:	bf00      	nop
 801bd08:	e7fe      	b.n	801bd08 <vPortValidateInterruptPriority+0x60>
	}
 801bd0a:	bf00      	nop
 801bd0c:	3714      	adds	r7, #20
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd14:	4770      	bx	lr
 801bd16:	bf00      	nop
 801bd18:	e000e3f0 	.word	0xe000e3f0
 801bd1c:	200025c8 	.word	0x200025c8
 801bd20:	e000ed0c 	.word	0xe000ed0c
 801bd24:	200025cc 	.word	0x200025cc

0801bd28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b08a      	sub	sp, #40	; 0x28
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801bd30:	2300      	movs	r3, #0
 801bd32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801bd34:	f7fe faea 	bl	801a30c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801bd38:	4b5d      	ldr	r3, [pc, #372]	; (801beb0 <pvPortMalloc+0x188>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d101      	bne.n	801bd44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801bd40:	f000 f930 	bl	801bfa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801bd44:	4b5b      	ldr	r3, [pc, #364]	; (801beb4 <pvPortMalloc+0x18c>)
 801bd46:	681a      	ldr	r2, [r3, #0]
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	4013      	ands	r3, r2
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	f040 8093 	bne.w	801be78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d01d      	beq.n	801bd94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801bd58:	2208      	movs	r2, #8
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	4413      	add	r3, r2
 801bd5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	f003 0307 	and.w	r3, r3, #7
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d014      	beq.n	801bd94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	f023 0307 	bic.w	r3, r3, #7
 801bd70:	3308      	adds	r3, #8
 801bd72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	f003 0307 	and.w	r3, r3, #7
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d00a      	beq.n	801bd94 <pvPortMalloc+0x6c>
	__asm volatile
 801bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd82:	f383 8811 	msr	BASEPRI, r3
 801bd86:	f3bf 8f6f 	isb	sy
 801bd8a:	f3bf 8f4f 	dsb	sy
 801bd8e:	617b      	str	r3, [r7, #20]
}
 801bd90:	bf00      	nop
 801bd92:	e7fe      	b.n	801bd92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d06e      	beq.n	801be78 <pvPortMalloc+0x150>
 801bd9a:	4b47      	ldr	r3, [pc, #284]	; (801beb8 <pvPortMalloc+0x190>)
 801bd9c:	681b      	ldr	r3, [r3, #0]
 801bd9e:	687a      	ldr	r2, [r7, #4]
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d869      	bhi.n	801be78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801bda4:	4b45      	ldr	r3, [pc, #276]	; (801bebc <pvPortMalloc+0x194>)
 801bda6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801bda8:	4b44      	ldr	r3, [pc, #272]	; (801bebc <pvPortMalloc+0x194>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bdae:	e004      	b.n	801bdba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdbc:	685b      	ldr	r3, [r3, #4]
 801bdbe:	687a      	ldr	r2, [r7, #4]
 801bdc0:	429a      	cmp	r2, r3
 801bdc2:	d903      	bls.n	801bdcc <pvPortMalloc+0xa4>
 801bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d1f1      	bne.n	801bdb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801bdcc:	4b38      	ldr	r3, [pc, #224]	; (801beb0 <pvPortMalloc+0x188>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	d050      	beq.n	801be78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801bdd6:	6a3b      	ldr	r3, [r7, #32]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	2208      	movs	r2, #8
 801bddc:	4413      	add	r3, r2
 801bdde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bde2:	681a      	ldr	r2, [r3, #0]
 801bde4:	6a3b      	ldr	r3, [r7, #32]
 801bde6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdea:	685a      	ldr	r2, [r3, #4]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	1ad2      	subs	r2, r2, r3
 801bdf0:	2308      	movs	r3, #8
 801bdf2:	005b      	lsls	r3, r3, #1
 801bdf4:	429a      	cmp	r2, r3
 801bdf6:	d91f      	bls.n	801be38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	4413      	add	r3, r2
 801bdfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801be00:	69bb      	ldr	r3, [r7, #24]
 801be02:	f003 0307 	and.w	r3, r3, #7
 801be06:	2b00      	cmp	r3, #0
 801be08:	d00a      	beq.n	801be20 <pvPortMalloc+0xf8>
	__asm volatile
 801be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be0e:	f383 8811 	msr	BASEPRI, r3
 801be12:	f3bf 8f6f 	isb	sy
 801be16:	f3bf 8f4f 	dsb	sy
 801be1a:	613b      	str	r3, [r7, #16]
}
 801be1c:	bf00      	nop
 801be1e:	e7fe      	b.n	801be1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be22:	685a      	ldr	r2, [r3, #4]
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	1ad2      	subs	r2, r2, r3
 801be28:	69bb      	ldr	r3, [r7, #24]
 801be2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be2e:	687a      	ldr	r2, [r7, #4]
 801be30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801be32:	69b8      	ldr	r0, [r7, #24]
 801be34:	f000 f918 	bl	801c068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801be38:	4b1f      	ldr	r3, [pc, #124]	; (801beb8 <pvPortMalloc+0x190>)
 801be3a:	681a      	ldr	r2, [r3, #0]
 801be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be3e:	685b      	ldr	r3, [r3, #4]
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	4a1d      	ldr	r2, [pc, #116]	; (801beb8 <pvPortMalloc+0x190>)
 801be44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801be46:	4b1c      	ldr	r3, [pc, #112]	; (801beb8 <pvPortMalloc+0x190>)
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	4b1d      	ldr	r3, [pc, #116]	; (801bec0 <pvPortMalloc+0x198>)
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	429a      	cmp	r2, r3
 801be50:	d203      	bcs.n	801be5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801be52:	4b19      	ldr	r3, [pc, #100]	; (801beb8 <pvPortMalloc+0x190>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	4a1a      	ldr	r2, [pc, #104]	; (801bec0 <pvPortMalloc+0x198>)
 801be58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be5c:	685a      	ldr	r2, [r3, #4]
 801be5e:	4b15      	ldr	r3, [pc, #84]	; (801beb4 <pvPortMalloc+0x18c>)
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	431a      	orrs	r2, r3
 801be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be6a:	2200      	movs	r2, #0
 801be6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801be6e:	4b15      	ldr	r3, [pc, #84]	; (801bec4 <pvPortMalloc+0x19c>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	3301      	adds	r3, #1
 801be74:	4a13      	ldr	r2, [pc, #76]	; (801bec4 <pvPortMalloc+0x19c>)
 801be76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801be78:	f7fe fa56 	bl	801a328 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801be7c:	69fb      	ldr	r3, [r7, #28]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d101      	bne.n	801be86 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801be82:	f7f3 fe27 	bl	800fad4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801be86:	69fb      	ldr	r3, [r7, #28]
 801be88:	f003 0307 	and.w	r3, r3, #7
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d00a      	beq.n	801bea6 <pvPortMalloc+0x17e>
	__asm volatile
 801be90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be94:	f383 8811 	msr	BASEPRI, r3
 801be98:	f3bf 8f6f 	isb	sy
 801be9c:	f3bf 8f4f 	dsb	sy
 801bea0:	60fb      	str	r3, [r7, #12]
}
 801bea2:	bf00      	nop
 801bea4:	e7fe      	b.n	801bea4 <pvPortMalloc+0x17c>
	return pvReturn;
 801bea6:	69fb      	ldr	r3, [r7, #28]
}
 801bea8:	4618      	mov	r0, r3
 801beaa:	3728      	adds	r7, #40	; 0x28
 801beac:	46bd      	mov	sp, r7
 801beae:	bd80      	pop	{r7, pc}
 801beb0:	2000a5d8 	.word	0x2000a5d8
 801beb4:	2000a5ec 	.word	0x2000a5ec
 801beb8:	2000a5dc 	.word	0x2000a5dc
 801bebc:	2000a5d0 	.word	0x2000a5d0
 801bec0:	2000a5e0 	.word	0x2000a5e0
 801bec4:	2000a5e4 	.word	0x2000a5e4

0801bec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801bec8:	b580      	push	{r7, lr}
 801beca:	b086      	sub	sp, #24
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d04d      	beq.n	801bf76 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801beda:	2308      	movs	r3, #8
 801bedc:	425b      	negs	r3, r3
 801bede:	697a      	ldr	r2, [r7, #20]
 801bee0:	4413      	add	r3, r2
 801bee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801bee4:	697b      	ldr	r3, [r7, #20]
 801bee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801bee8:	693b      	ldr	r3, [r7, #16]
 801beea:	685a      	ldr	r2, [r3, #4]
 801beec:	4b24      	ldr	r3, [pc, #144]	; (801bf80 <vPortFree+0xb8>)
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	4013      	ands	r3, r2
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d10a      	bne.n	801bf0c <vPortFree+0x44>
	__asm volatile
 801bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801befa:	f383 8811 	msr	BASEPRI, r3
 801befe:	f3bf 8f6f 	isb	sy
 801bf02:	f3bf 8f4f 	dsb	sy
 801bf06:	60fb      	str	r3, [r7, #12]
}
 801bf08:	bf00      	nop
 801bf0a:	e7fe      	b.n	801bf0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801bf0c:	693b      	ldr	r3, [r7, #16]
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d00a      	beq.n	801bf2a <vPortFree+0x62>
	__asm volatile
 801bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf18:	f383 8811 	msr	BASEPRI, r3
 801bf1c:	f3bf 8f6f 	isb	sy
 801bf20:	f3bf 8f4f 	dsb	sy
 801bf24:	60bb      	str	r3, [r7, #8]
}
 801bf26:	bf00      	nop
 801bf28:	e7fe      	b.n	801bf28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801bf2a:	693b      	ldr	r3, [r7, #16]
 801bf2c:	685a      	ldr	r2, [r3, #4]
 801bf2e:	4b14      	ldr	r3, [pc, #80]	; (801bf80 <vPortFree+0xb8>)
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	4013      	ands	r3, r2
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d01e      	beq.n	801bf76 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801bf38:	693b      	ldr	r3, [r7, #16]
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d11a      	bne.n	801bf76 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801bf40:	693b      	ldr	r3, [r7, #16]
 801bf42:	685a      	ldr	r2, [r3, #4]
 801bf44:	4b0e      	ldr	r3, [pc, #56]	; (801bf80 <vPortFree+0xb8>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	43db      	mvns	r3, r3
 801bf4a:	401a      	ands	r2, r3
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801bf50:	f7fe f9dc 	bl	801a30c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801bf54:	693b      	ldr	r3, [r7, #16]
 801bf56:	685a      	ldr	r2, [r3, #4]
 801bf58:	4b0a      	ldr	r3, [pc, #40]	; (801bf84 <vPortFree+0xbc>)
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	4413      	add	r3, r2
 801bf5e:	4a09      	ldr	r2, [pc, #36]	; (801bf84 <vPortFree+0xbc>)
 801bf60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801bf62:	6938      	ldr	r0, [r7, #16]
 801bf64:	f000 f880 	bl	801c068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801bf68:	4b07      	ldr	r3, [pc, #28]	; (801bf88 <vPortFree+0xc0>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	4a06      	ldr	r2, [pc, #24]	; (801bf88 <vPortFree+0xc0>)
 801bf70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801bf72:	f7fe f9d9 	bl	801a328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801bf76:	bf00      	nop
 801bf78:	3718      	adds	r7, #24
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	bd80      	pop	{r7, pc}
 801bf7e:	bf00      	nop
 801bf80:	2000a5ec 	.word	0x2000a5ec
 801bf84:	2000a5dc 	.word	0x2000a5dc
 801bf88:	2000a5e8 	.word	0x2000a5e8

0801bf8c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801bf8c:	b480      	push	{r7}
 801bf8e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 801bf90:	4b03      	ldr	r3, [pc, #12]	; (801bfa0 <xPortGetFreeHeapSize+0x14>)
 801bf92:	681b      	ldr	r3, [r3, #0]
}
 801bf94:	4618      	mov	r0, r3
 801bf96:	46bd      	mov	sp, r7
 801bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9c:	4770      	bx	lr
 801bf9e:	bf00      	nop
 801bfa0:	2000a5dc 	.word	0x2000a5dc

0801bfa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801bfa4:	b480      	push	{r7}
 801bfa6:	b085      	sub	sp, #20
 801bfa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801bfaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bfae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801bfb0:	4b27      	ldr	r3, [pc, #156]	; (801c050 <prvHeapInit+0xac>)
 801bfb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	f003 0307 	and.w	r3, r3, #7
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d00c      	beq.n	801bfd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	3307      	adds	r3, #7
 801bfc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	f023 0307 	bic.w	r3, r3, #7
 801bfca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801bfcc:	68ba      	ldr	r2, [r7, #8]
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	4a1f      	ldr	r2, [pc, #124]	; (801c050 <prvHeapInit+0xac>)
 801bfd4:	4413      	add	r3, r2
 801bfd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801bfdc:	4a1d      	ldr	r2, [pc, #116]	; (801c054 <prvHeapInit+0xb0>)
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801bfe2:	4b1c      	ldr	r3, [pc, #112]	; (801c054 <prvHeapInit+0xb0>)
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	68ba      	ldr	r2, [r7, #8]
 801bfec:	4413      	add	r3, r2
 801bfee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801bff0:	2208      	movs	r2, #8
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	1a9b      	subs	r3, r3, r2
 801bff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	f023 0307 	bic.w	r3, r3, #7
 801bffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	4a15      	ldr	r2, [pc, #84]	; (801c058 <prvHeapInit+0xb4>)
 801c004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c006:	4b14      	ldr	r3, [pc, #80]	; (801c058 <prvHeapInit+0xb4>)
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	2200      	movs	r2, #0
 801c00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c00e:	4b12      	ldr	r3, [pc, #72]	; (801c058 <prvHeapInit+0xb4>)
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	2200      	movs	r2, #0
 801c014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c01a:	683b      	ldr	r3, [r7, #0]
 801c01c:	68fa      	ldr	r2, [r7, #12]
 801c01e:	1ad2      	subs	r2, r2, r3
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c024:	4b0c      	ldr	r3, [pc, #48]	; (801c058 <prvHeapInit+0xb4>)
 801c026:	681a      	ldr	r2, [r3, #0]
 801c028:	683b      	ldr	r3, [r7, #0]
 801c02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c02c:	683b      	ldr	r3, [r7, #0]
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	4a0a      	ldr	r2, [pc, #40]	; (801c05c <prvHeapInit+0xb8>)
 801c032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c034:	683b      	ldr	r3, [r7, #0]
 801c036:	685b      	ldr	r3, [r3, #4]
 801c038:	4a09      	ldr	r2, [pc, #36]	; (801c060 <prvHeapInit+0xbc>)
 801c03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c03c:	4b09      	ldr	r3, [pc, #36]	; (801c064 <prvHeapInit+0xc0>)
 801c03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c042:	601a      	str	r2, [r3, #0]
}
 801c044:	bf00      	nop
 801c046:	3714      	adds	r7, #20
 801c048:	46bd      	mov	sp, r7
 801c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c04e:	4770      	bx	lr
 801c050:	200025d0 	.word	0x200025d0
 801c054:	2000a5d0 	.word	0x2000a5d0
 801c058:	2000a5d8 	.word	0x2000a5d8
 801c05c:	2000a5e0 	.word	0x2000a5e0
 801c060:	2000a5dc 	.word	0x2000a5dc
 801c064:	2000a5ec 	.word	0x2000a5ec

0801c068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c068:	b480      	push	{r7}
 801c06a:	b085      	sub	sp, #20
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c070:	4b28      	ldr	r3, [pc, #160]	; (801c114 <prvInsertBlockIntoFreeList+0xac>)
 801c072:	60fb      	str	r3, [r7, #12]
 801c074:	e002      	b.n	801c07c <prvInsertBlockIntoFreeList+0x14>
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	60fb      	str	r3, [r7, #12]
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	687a      	ldr	r2, [r7, #4]
 801c082:	429a      	cmp	r2, r3
 801c084:	d8f7      	bhi.n	801c076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	685b      	ldr	r3, [r3, #4]
 801c08e:	68ba      	ldr	r2, [r7, #8]
 801c090:	4413      	add	r3, r2
 801c092:	687a      	ldr	r2, [r7, #4]
 801c094:	429a      	cmp	r2, r3
 801c096:	d108      	bne.n	801c0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	685a      	ldr	r2, [r3, #4]
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	441a      	add	r2, r3
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	685b      	ldr	r3, [r3, #4]
 801c0b2:	68ba      	ldr	r2, [r7, #8]
 801c0b4:	441a      	add	r2, r3
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	429a      	cmp	r2, r3
 801c0bc:	d118      	bne.n	801c0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	681a      	ldr	r2, [r3, #0]
 801c0c2:	4b15      	ldr	r3, [pc, #84]	; (801c118 <prvInsertBlockIntoFreeList+0xb0>)
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	429a      	cmp	r2, r3
 801c0c8:	d00d      	beq.n	801c0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	685a      	ldr	r2, [r3, #4]
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	685b      	ldr	r3, [r3, #4]
 801c0d4:	441a      	add	r2, r3
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	681a      	ldr	r2, [r3, #0]
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	601a      	str	r2, [r3, #0]
 801c0e4:	e008      	b.n	801c0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c0e6:	4b0c      	ldr	r3, [pc, #48]	; (801c118 <prvInsertBlockIntoFreeList+0xb0>)
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	601a      	str	r2, [r3, #0]
 801c0ee:	e003      	b.n	801c0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	681a      	ldr	r2, [r3, #0]
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c0f8:	68fa      	ldr	r2, [r7, #12]
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	429a      	cmp	r2, r3
 801c0fe:	d002      	beq.n	801c106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	687a      	ldr	r2, [r7, #4]
 801c104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c106:	bf00      	nop
 801c108:	3714      	adds	r7, #20
 801c10a:	46bd      	mov	sp, r7
 801c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c110:	4770      	bx	lr
 801c112:	bf00      	nop
 801c114:	2000a5d0 	.word	0x2000a5d0
 801c118:	2000a5d8 	.word	0x2000a5d8

0801c11c <_ZdlPvj>:
 801c11c:	f000 b819 	b.w	801c152 <_ZdlPv>

0801c120 <_ZdaPv>:
 801c120:	f000 b817 	b.w	801c152 <_ZdlPv>

0801c124 <__cxa_guard_acquire>:
 801c124:	6803      	ldr	r3, [r0, #0]
 801c126:	07db      	lsls	r3, r3, #31
 801c128:	d406      	bmi.n	801c138 <__cxa_guard_acquire+0x14>
 801c12a:	7843      	ldrb	r3, [r0, #1]
 801c12c:	b103      	cbz	r3, 801c130 <__cxa_guard_acquire+0xc>
 801c12e:	deff      	udf	#255	; 0xff
 801c130:	2301      	movs	r3, #1
 801c132:	7043      	strb	r3, [r0, #1]
 801c134:	4618      	mov	r0, r3
 801c136:	4770      	bx	lr
 801c138:	2000      	movs	r0, #0
 801c13a:	4770      	bx	lr

0801c13c <__cxa_guard_release>:
 801c13c:	2301      	movs	r3, #1
 801c13e:	6003      	str	r3, [r0, #0]
 801c140:	4770      	bx	lr

0801c142 <_Znaj>:
 801c142:	f000 b81a 	b.w	801c17a <_Znwj>

0801c146 <__cxa_pure_virtual>:
 801c146:	b508      	push	{r3, lr}
 801c148:	f000 f812 	bl	801c170 <_ZSt9terminatev>

0801c14c <_ZSt25__throw_bad_function_callv>:
 801c14c:	b508      	push	{r3, lr}
 801c14e:	f000 fa57 	bl	801c600 <abort>

0801c152 <_ZdlPv>:
 801c152:	f000 bb8f 	b.w	801c874 <free>

0801c156 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801c156:	b508      	push	{r3, lr}
 801c158:	4780      	blx	r0
 801c15a:	f000 fa51 	bl	801c600 <abort>
	...

0801c160 <_ZSt13get_terminatev>:
 801c160:	4b02      	ldr	r3, [pc, #8]	; (801c16c <_ZSt13get_terminatev+0xc>)
 801c162:	6818      	ldr	r0, [r3, #0]
 801c164:	f3bf 8f5b 	dmb	ish
 801c168:	4770      	bx	lr
 801c16a:	bf00      	nop
 801c16c:	20000030 	.word	0x20000030

0801c170 <_ZSt9terminatev>:
 801c170:	b508      	push	{r3, lr}
 801c172:	f7ff fff5 	bl	801c160 <_ZSt13get_terminatev>
 801c176:	f7ff ffee 	bl	801c156 <_ZN10__cxxabiv111__terminateEPFvvE>

0801c17a <_Znwj>:
 801c17a:	2801      	cmp	r0, #1
 801c17c:	bf38      	it	cc
 801c17e:	2001      	movcc	r0, #1
 801c180:	b510      	push	{r4, lr}
 801c182:	4604      	mov	r4, r0
 801c184:	4620      	mov	r0, r4
 801c186:	f000 fb6d 	bl	801c864 <malloc>
 801c18a:	b930      	cbnz	r0, 801c19a <_Znwj+0x20>
 801c18c:	f000 f806 	bl	801c19c <_ZSt15get_new_handlerv>
 801c190:	b908      	cbnz	r0, 801c196 <_Znwj+0x1c>
 801c192:	f000 fa35 	bl	801c600 <abort>
 801c196:	4780      	blx	r0
 801c198:	e7f4      	b.n	801c184 <_Znwj+0xa>
 801c19a:	bd10      	pop	{r4, pc}

0801c19c <_ZSt15get_new_handlerv>:
 801c19c:	4b02      	ldr	r3, [pc, #8]	; (801c1a8 <_ZSt15get_new_handlerv+0xc>)
 801c19e:	6818      	ldr	r0, [r3, #0]
 801c1a0:	f3bf 8f5b 	dmb	ish
 801c1a4:	4770      	bx	lr
 801c1a6:	bf00      	nop
 801c1a8:	2000a5f0 	.word	0x2000a5f0

0801c1ac <roundf>:
 801c1ac:	ee10 0a10 	vmov	r0, s0
 801c1b0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801c1b4:	3a7f      	subs	r2, #127	; 0x7f
 801c1b6:	2a16      	cmp	r2, #22
 801c1b8:	dc15      	bgt.n	801c1e6 <roundf+0x3a>
 801c1ba:	2a00      	cmp	r2, #0
 801c1bc:	da08      	bge.n	801c1d0 <roundf+0x24>
 801c1be:	3201      	adds	r2, #1
 801c1c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801c1c4:	d101      	bne.n	801c1ca <roundf+0x1e>
 801c1c6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801c1ca:	ee00 3a10 	vmov	s0, r3
 801c1ce:	4770      	bx	lr
 801c1d0:	4907      	ldr	r1, [pc, #28]	; (801c1f0 <roundf+0x44>)
 801c1d2:	4111      	asrs	r1, r2
 801c1d4:	4208      	tst	r0, r1
 801c1d6:	d0fa      	beq.n	801c1ce <roundf+0x22>
 801c1d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801c1dc:	4113      	asrs	r3, r2
 801c1de:	4403      	add	r3, r0
 801c1e0:	ea23 0301 	bic.w	r3, r3, r1
 801c1e4:	e7f1      	b.n	801c1ca <roundf+0x1e>
 801c1e6:	2a80      	cmp	r2, #128	; 0x80
 801c1e8:	d1f1      	bne.n	801c1ce <roundf+0x22>
 801c1ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c1ee:	4770      	bx	lr
 801c1f0:	007fffff 	.word	0x007fffff
 801c1f4:	00000000 	.word	0x00000000

0801c1f8 <log>:
 801c1f8:	b538      	push	{r3, r4, r5, lr}
 801c1fa:	ed2d 8b02 	vpush	{d8}
 801c1fe:	ec55 4b10 	vmov	r4, r5, d0
 801c202:	f000 f839 	bl	801c278 <__ieee754_log>
 801c206:	4622      	mov	r2, r4
 801c208:	462b      	mov	r3, r5
 801c20a:	4620      	mov	r0, r4
 801c20c:	4629      	mov	r1, r5
 801c20e:	eeb0 8a40 	vmov.f32	s16, s0
 801c212:	eef0 8a60 	vmov.f32	s17, s1
 801c216:	f7e4 fc89 	bl	8000b2c <__aeabi_dcmpun>
 801c21a:	b998      	cbnz	r0, 801c244 <log+0x4c>
 801c21c:	2200      	movs	r2, #0
 801c21e:	2300      	movs	r3, #0
 801c220:	4620      	mov	r0, r4
 801c222:	4629      	mov	r1, r5
 801c224:	f7e4 fc78 	bl	8000b18 <__aeabi_dcmpgt>
 801c228:	b960      	cbnz	r0, 801c244 <log+0x4c>
 801c22a:	2200      	movs	r2, #0
 801c22c:	2300      	movs	r3, #0
 801c22e:	4620      	mov	r0, r4
 801c230:	4629      	mov	r1, r5
 801c232:	f7e4 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 801c236:	b160      	cbz	r0, 801c252 <log+0x5a>
 801c238:	f000 f9f0 	bl	801c61c <__errno>
 801c23c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801c268 <log+0x70>
 801c240:	2322      	movs	r3, #34	; 0x22
 801c242:	6003      	str	r3, [r0, #0]
 801c244:	eeb0 0a48 	vmov.f32	s0, s16
 801c248:	eef0 0a68 	vmov.f32	s1, s17
 801c24c:	ecbd 8b02 	vpop	{d8}
 801c250:	bd38      	pop	{r3, r4, r5, pc}
 801c252:	f000 f9e3 	bl	801c61c <__errno>
 801c256:	ecbd 8b02 	vpop	{d8}
 801c25a:	2321      	movs	r3, #33	; 0x21
 801c25c:	6003      	str	r3, [r0, #0]
 801c25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c262:	4803      	ldr	r0, [pc, #12]	; (801c270 <log+0x78>)
 801c264:	f000 b9c4 	b.w	801c5f0 <nan>
 801c268:	00000000 	.word	0x00000000
 801c26c:	fff00000 	.word	0xfff00000
 801c270:	08020107 	.word	0x08020107
 801c274:	00000000 	.word	0x00000000

0801c278 <__ieee754_log>:
 801c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c27c:	ec51 0b10 	vmov	r0, r1, d0
 801c280:	ed2d 8b04 	vpush	{d8-d9}
 801c284:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801c288:	b083      	sub	sp, #12
 801c28a:	460d      	mov	r5, r1
 801c28c:	da29      	bge.n	801c2e2 <__ieee754_log+0x6a>
 801c28e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c292:	4303      	orrs	r3, r0
 801c294:	ee10 2a10 	vmov	r2, s0
 801c298:	d10c      	bne.n	801c2b4 <__ieee754_log+0x3c>
 801c29a:	49cf      	ldr	r1, [pc, #828]	; (801c5d8 <__ieee754_log+0x360>)
 801c29c:	2200      	movs	r2, #0
 801c29e:	2300      	movs	r3, #0
 801c2a0:	2000      	movs	r0, #0
 801c2a2:	f7e4 fad3 	bl	800084c <__aeabi_ddiv>
 801c2a6:	ec41 0b10 	vmov	d0, r0, r1
 801c2aa:	b003      	add	sp, #12
 801c2ac:	ecbd 8b04 	vpop	{d8-d9}
 801c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2b4:	2900      	cmp	r1, #0
 801c2b6:	da05      	bge.n	801c2c4 <__ieee754_log+0x4c>
 801c2b8:	460b      	mov	r3, r1
 801c2ba:	f7e3 ffe5 	bl	8000288 <__aeabi_dsub>
 801c2be:	2200      	movs	r2, #0
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	e7ee      	b.n	801c2a2 <__ieee754_log+0x2a>
 801c2c4:	4bc5      	ldr	r3, [pc, #788]	; (801c5dc <__ieee754_log+0x364>)
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	f7e4 f996 	bl	80005f8 <__aeabi_dmul>
 801c2cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801c2d0:	460d      	mov	r5, r1
 801c2d2:	4ac3      	ldr	r2, [pc, #780]	; (801c5e0 <__ieee754_log+0x368>)
 801c2d4:	4295      	cmp	r5, r2
 801c2d6:	dd06      	ble.n	801c2e6 <__ieee754_log+0x6e>
 801c2d8:	4602      	mov	r2, r0
 801c2da:	460b      	mov	r3, r1
 801c2dc:	f7e3 ffd6 	bl	800028c <__adddf3>
 801c2e0:	e7e1      	b.n	801c2a6 <__ieee754_log+0x2e>
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	e7f5      	b.n	801c2d2 <__ieee754_log+0x5a>
 801c2e6:	152c      	asrs	r4, r5, #20
 801c2e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801c2ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801c2f0:	441c      	add	r4, r3
 801c2f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801c2f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801c2fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c2fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801c302:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801c306:	ea42 0105 	orr.w	r1, r2, r5
 801c30a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801c30e:	2200      	movs	r2, #0
 801c310:	4bb4      	ldr	r3, [pc, #720]	; (801c5e4 <__ieee754_log+0x36c>)
 801c312:	f7e3 ffb9 	bl	8000288 <__aeabi_dsub>
 801c316:	1cab      	adds	r3, r5, #2
 801c318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c31c:	2b02      	cmp	r3, #2
 801c31e:	4682      	mov	sl, r0
 801c320:	468b      	mov	fp, r1
 801c322:	f04f 0200 	mov.w	r2, #0
 801c326:	dc53      	bgt.n	801c3d0 <__ieee754_log+0x158>
 801c328:	2300      	movs	r3, #0
 801c32a:	f7e4 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 801c32e:	b1d0      	cbz	r0, 801c366 <__ieee754_log+0xee>
 801c330:	2c00      	cmp	r4, #0
 801c332:	f000 8122 	beq.w	801c57a <__ieee754_log+0x302>
 801c336:	4620      	mov	r0, r4
 801c338:	f7e4 f8f4 	bl	8000524 <__aeabi_i2d>
 801c33c:	a390      	add	r3, pc, #576	; (adr r3, 801c580 <__ieee754_log+0x308>)
 801c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c342:	4606      	mov	r6, r0
 801c344:	460f      	mov	r7, r1
 801c346:	f7e4 f957 	bl	80005f8 <__aeabi_dmul>
 801c34a:	a38f      	add	r3, pc, #572	; (adr r3, 801c588 <__ieee754_log+0x310>)
 801c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c350:	4604      	mov	r4, r0
 801c352:	460d      	mov	r5, r1
 801c354:	4630      	mov	r0, r6
 801c356:	4639      	mov	r1, r7
 801c358:	f7e4 f94e 	bl	80005f8 <__aeabi_dmul>
 801c35c:	4602      	mov	r2, r0
 801c35e:	460b      	mov	r3, r1
 801c360:	4620      	mov	r0, r4
 801c362:	4629      	mov	r1, r5
 801c364:	e7ba      	b.n	801c2dc <__ieee754_log+0x64>
 801c366:	a38a      	add	r3, pc, #552	; (adr r3, 801c590 <__ieee754_log+0x318>)
 801c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c36c:	4650      	mov	r0, sl
 801c36e:	4659      	mov	r1, fp
 801c370:	f7e4 f942 	bl	80005f8 <__aeabi_dmul>
 801c374:	4602      	mov	r2, r0
 801c376:	460b      	mov	r3, r1
 801c378:	2000      	movs	r0, #0
 801c37a:	499b      	ldr	r1, [pc, #620]	; (801c5e8 <__ieee754_log+0x370>)
 801c37c:	f7e3 ff84 	bl	8000288 <__aeabi_dsub>
 801c380:	4652      	mov	r2, sl
 801c382:	4606      	mov	r6, r0
 801c384:	460f      	mov	r7, r1
 801c386:	465b      	mov	r3, fp
 801c388:	4650      	mov	r0, sl
 801c38a:	4659      	mov	r1, fp
 801c38c:	f7e4 f934 	bl	80005f8 <__aeabi_dmul>
 801c390:	4602      	mov	r2, r0
 801c392:	460b      	mov	r3, r1
 801c394:	4630      	mov	r0, r6
 801c396:	4639      	mov	r1, r7
 801c398:	f7e4 f92e 	bl	80005f8 <__aeabi_dmul>
 801c39c:	4606      	mov	r6, r0
 801c39e:	460f      	mov	r7, r1
 801c3a0:	b914      	cbnz	r4, 801c3a8 <__ieee754_log+0x130>
 801c3a2:	4632      	mov	r2, r6
 801c3a4:	463b      	mov	r3, r7
 801c3a6:	e0a2      	b.n	801c4ee <__ieee754_log+0x276>
 801c3a8:	4620      	mov	r0, r4
 801c3aa:	f7e4 f8bb 	bl	8000524 <__aeabi_i2d>
 801c3ae:	a374      	add	r3, pc, #464	; (adr r3, 801c580 <__ieee754_log+0x308>)
 801c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b4:	4680      	mov	r8, r0
 801c3b6:	4689      	mov	r9, r1
 801c3b8:	f7e4 f91e 	bl	80005f8 <__aeabi_dmul>
 801c3bc:	a372      	add	r3, pc, #456	; (adr r3, 801c588 <__ieee754_log+0x310>)
 801c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3c2:	4604      	mov	r4, r0
 801c3c4:	460d      	mov	r5, r1
 801c3c6:	4640      	mov	r0, r8
 801c3c8:	4649      	mov	r1, r9
 801c3ca:	f7e4 f915 	bl	80005f8 <__aeabi_dmul>
 801c3ce:	e0a7      	b.n	801c520 <__ieee754_log+0x2a8>
 801c3d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c3d4:	f7e3 ff5a 	bl	800028c <__adddf3>
 801c3d8:	4602      	mov	r2, r0
 801c3da:	460b      	mov	r3, r1
 801c3dc:	4650      	mov	r0, sl
 801c3de:	4659      	mov	r1, fp
 801c3e0:	f7e4 fa34 	bl	800084c <__aeabi_ddiv>
 801c3e4:	ec41 0b18 	vmov	d8, r0, r1
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	f7e4 f89b 	bl	8000524 <__aeabi_i2d>
 801c3ee:	ec53 2b18 	vmov	r2, r3, d8
 801c3f2:	ec41 0b19 	vmov	d9, r0, r1
 801c3f6:	ec51 0b18 	vmov	r0, r1, d8
 801c3fa:	f7e4 f8fd 	bl	80005f8 <__aeabi_dmul>
 801c3fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801c402:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801c406:	9301      	str	r3, [sp, #4]
 801c408:	4602      	mov	r2, r0
 801c40a:	460b      	mov	r3, r1
 801c40c:	4680      	mov	r8, r0
 801c40e:	4689      	mov	r9, r1
 801c410:	f7e4 f8f2 	bl	80005f8 <__aeabi_dmul>
 801c414:	a360      	add	r3, pc, #384	; (adr r3, 801c598 <__ieee754_log+0x320>)
 801c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41a:	4606      	mov	r6, r0
 801c41c:	460f      	mov	r7, r1
 801c41e:	f7e4 f8eb 	bl	80005f8 <__aeabi_dmul>
 801c422:	a35f      	add	r3, pc, #380	; (adr r3, 801c5a0 <__ieee754_log+0x328>)
 801c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c428:	f7e3 ff30 	bl	800028c <__adddf3>
 801c42c:	4632      	mov	r2, r6
 801c42e:	463b      	mov	r3, r7
 801c430:	f7e4 f8e2 	bl	80005f8 <__aeabi_dmul>
 801c434:	a35c      	add	r3, pc, #368	; (adr r3, 801c5a8 <__ieee754_log+0x330>)
 801c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c43a:	f7e3 ff27 	bl	800028c <__adddf3>
 801c43e:	4632      	mov	r2, r6
 801c440:	463b      	mov	r3, r7
 801c442:	f7e4 f8d9 	bl	80005f8 <__aeabi_dmul>
 801c446:	a35a      	add	r3, pc, #360	; (adr r3, 801c5b0 <__ieee754_log+0x338>)
 801c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c44c:	f7e3 ff1e 	bl	800028c <__adddf3>
 801c450:	4642      	mov	r2, r8
 801c452:	464b      	mov	r3, r9
 801c454:	f7e4 f8d0 	bl	80005f8 <__aeabi_dmul>
 801c458:	a357      	add	r3, pc, #348	; (adr r3, 801c5b8 <__ieee754_log+0x340>)
 801c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45e:	4680      	mov	r8, r0
 801c460:	4689      	mov	r9, r1
 801c462:	4630      	mov	r0, r6
 801c464:	4639      	mov	r1, r7
 801c466:	f7e4 f8c7 	bl	80005f8 <__aeabi_dmul>
 801c46a:	a355      	add	r3, pc, #340	; (adr r3, 801c5c0 <__ieee754_log+0x348>)
 801c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c470:	f7e3 ff0c 	bl	800028c <__adddf3>
 801c474:	4632      	mov	r2, r6
 801c476:	463b      	mov	r3, r7
 801c478:	f7e4 f8be 	bl	80005f8 <__aeabi_dmul>
 801c47c:	a352      	add	r3, pc, #328	; (adr r3, 801c5c8 <__ieee754_log+0x350>)
 801c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c482:	f7e3 ff03 	bl	800028c <__adddf3>
 801c486:	4632      	mov	r2, r6
 801c488:	463b      	mov	r3, r7
 801c48a:	f7e4 f8b5 	bl	80005f8 <__aeabi_dmul>
 801c48e:	460b      	mov	r3, r1
 801c490:	4602      	mov	r2, r0
 801c492:	4649      	mov	r1, r9
 801c494:	4640      	mov	r0, r8
 801c496:	f7e3 fef9 	bl	800028c <__adddf3>
 801c49a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801c49e:	9b01      	ldr	r3, [sp, #4]
 801c4a0:	3551      	adds	r5, #81	; 0x51
 801c4a2:	431d      	orrs	r5, r3
 801c4a4:	2d00      	cmp	r5, #0
 801c4a6:	4680      	mov	r8, r0
 801c4a8:	4689      	mov	r9, r1
 801c4aa:	dd48      	ble.n	801c53e <__ieee754_log+0x2c6>
 801c4ac:	4b4e      	ldr	r3, [pc, #312]	; (801c5e8 <__ieee754_log+0x370>)
 801c4ae:	2200      	movs	r2, #0
 801c4b0:	4650      	mov	r0, sl
 801c4b2:	4659      	mov	r1, fp
 801c4b4:	f7e4 f8a0 	bl	80005f8 <__aeabi_dmul>
 801c4b8:	4652      	mov	r2, sl
 801c4ba:	465b      	mov	r3, fp
 801c4bc:	f7e4 f89c 	bl	80005f8 <__aeabi_dmul>
 801c4c0:	4602      	mov	r2, r0
 801c4c2:	460b      	mov	r3, r1
 801c4c4:	4606      	mov	r6, r0
 801c4c6:	460f      	mov	r7, r1
 801c4c8:	4640      	mov	r0, r8
 801c4ca:	4649      	mov	r1, r9
 801c4cc:	f7e3 fede 	bl	800028c <__adddf3>
 801c4d0:	ec53 2b18 	vmov	r2, r3, d8
 801c4d4:	f7e4 f890 	bl	80005f8 <__aeabi_dmul>
 801c4d8:	4680      	mov	r8, r0
 801c4da:	4689      	mov	r9, r1
 801c4dc:	b964      	cbnz	r4, 801c4f8 <__ieee754_log+0x280>
 801c4de:	4602      	mov	r2, r0
 801c4e0:	460b      	mov	r3, r1
 801c4e2:	4630      	mov	r0, r6
 801c4e4:	4639      	mov	r1, r7
 801c4e6:	f7e3 fecf 	bl	8000288 <__aeabi_dsub>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	4650      	mov	r0, sl
 801c4f0:	4659      	mov	r1, fp
 801c4f2:	f7e3 fec9 	bl	8000288 <__aeabi_dsub>
 801c4f6:	e6d6      	b.n	801c2a6 <__ieee754_log+0x2e>
 801c4f8:	a321      	add	r3, pc, #132	; (adr r3, 801c580 <__ieee754_log+0x308>)
 801c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4fe:	ec51 0b19 	vmov	r0, r1, d9
 801c502:	f7e4 f879 	bl	80005f8 <__aeabi_dmul>
 801c506:	a320      	add	r3, pc, #128	; (adr r3, 801c588 <__ieee754_log+0x310>)
 801c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50c:	4604      	mov	r4, r0
 801c50e:	460d      	mov	r5, r1
 801c510:	ec51 0b19 	vmov	r0, r1, d9
 801c514:	f7e4 f870 	bl	80005f8 <__aeabi_dmul>
 801c518:	4642      	mov	r2, r8
 801c51a:	464b      	mov	r3, r9
 801c51c:	f7e3 feb6 	bl	800028c <__adddf3>
 801c520:	4602      	mov	r2, r0
 801c522:	460b      	mov	r3, r1
 801c524:	4630      	mov	r0, r6
 801c526:	4639      	mov	r1, r7
 801c528:	f7e3 feae 	bl	8000288 <__aeabi_dsub>
 801c52c:	4652      	mov	r2, sl
 801c52e:	465b      	mov	r3, fp
 801c530:	f7e3 feaa 	bl	8000288 <__aeabi_dsub>
 801c534:	4602      	mov	r2, r0
 801c536:	460b      	mov	r3, r1
 801c538:	4620      	mov	r0, r4
 801c53a:	4629      	mov	r1, r5
 801c53c:	e7d9      	b.n	801c4f2 <__ieee754_log+0x27a>
 801c53e:	4602      	mov	r2, r0
 801c540:	460b      	mov	r3, r1
 801c542:	4650      	mov	r0, sl
 801c544:	4659      	mov	r1, fp
 801c546:	f7e3 fe9f 	bl	8000288 <__aeabi_dsub>
 801c54a:	ec53 2b18 	vmov	r2, r3, d8
 801c54e:	f7e4 f853 	bl	80005f8 <__aeabi_dmul>
 801c552:	4606      	mov	r6, r0
 801c554:	460f      	mov	r7, r1
 801c556:	2c00      	cmp	r4, #0
 801c558:	f43f af23 	beq.w	801c3a2 <__ieee754_log+0x12a>
 801c55c:	a308      	add	r3, pc, #32	; (adr r3, 801c580 <__ieee754_log+0x308>)
 801c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c562:	ec51 0b19 	vmov	r0, r1, d9
 801c566:	f7e4 f847 	bl	80005f8 <__aeabi_dmul>
 801c56a:	a307      	add	r3, pc, #28	; (adr r3, 801c588 <__ieee754_log+0x310>)
 801c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c570:	4604      	mov	r4, r0
 801c572:	460d      	mov	r5, r1
 801c574:	ec51 0b19 	vmov	r0, r1, d9
 801c578:	e727      	b.n	801c3ca <__ieee754_log+0x152>
 801c57a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801c5d0 <__ieee754_log+0x358>
 801c57e:	e694      	b.n	801c2aa <__ieee754_log+0x32>
 801c580:	fee00000 	.word	0xfee00000
 801c584:	3fe62e42 	.word	0x3fe62e42
 801c588:	35793c76 	.word	0x35793c76
 801c58c:	3dea39ef 	.word	0x3dea39ef
 801c590:	55555555 	.word	0x55555555
 801c594:	3fd55555 	.word	0x3fd55555
 801c598:	df3e5244 	.word	0xdf3e5244
 801c59c:	3fc2f112 	.word	0x3fc2f112
 801c5a0:	96cb03de 	.word	0x96cb03de
 801c5a4:	3fc74664 	.word	0x3fc74664
 801c5a8:	94229359 	.word	0x94229359
 801c5ac:	3fd24924 	.word	0x3fd24924
 801c5b0:	55555593 	.word	0x55555593
 801c5b4:	3fe55555 	.word	0x3fe55555
 801c5b8:	d078c69f 	.word	0xd078c69f
 801c5bc:	3fc39a09 	.word	0x3fc39a09
 801c5c0:	1d8e78af 	.word	0x1d8e78af
 801c5c4:	3fcc71c5 	.word	0x3fcc71c5
 801c5c8:	9997fa04 	.word	0x9997fa04
 801c5cc:	3fd99999 	.word	0x3fd99999
	...
 801c5d8:	c3500000 	.word	0xc3500000
 801c5dc:	43500000 	.word	0x43500000
 801c5e0:	7fefffff 	.word	0x7fefffff
 801c5e4:	3ff00000 	.word	0x3ff00000
 801c5e8:	3fe00000 	.word	0x3fe00000
 801c5ec:	00000000 	.word	0x00000000

0801c5f0 <nan>:
 801c5f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c5f8 <nan+0x8>
 801c5f4:	4770      	bx	lr
 801c5f6:	bf00      	nop
 801c5f8:	00000000 	.word	0x00000000
 801c5fc:	7ff80000 	.word	0x7ff80000

0801c600 <abort>:
 801c600:	b508      	push	{r3, lr}
 801c602:	2006      	movs	r0, #6
 801c604:	f000 ff40 	bl	801d488 <raise>
 801c608:	2001      	movs	r0, #1
 801c60a:	f7f3 fecd 	bl	80103a8 <_exit>

0801c60e <atexit>:
 801c60e:	2300      	movs	r3, #0
 801c610:	4601      	mov	r1, r0
 801c612:	461a      	mov	r2, r3
 801c614:	4618      	mov	r0, r3
 801c616:	f000 bfa9 	b.w	801d56c <__register_exitproc>
	...

0801c61c <__errno>:
 801c61c:	4b01      	ldr	r3, [pc, #4]	; (801c624 <__errno+0x8>)
 801c61e:	6818      	ldr	r0, [r3, #0]
 801c620:	4770      	bx	lr
 801c622:	bf00      	nop
 801c624:	20000034 	.word	0x20000034

0801c628 <std>:
 801c628:	2300      	movs	r3, #0
 801c62a:	b510      	push	{r4, lr}
 801c62c:	4604      	mov	r4, r0
 801c62e:	e9c0 3300 	strd	r3, r3, [r0]
 801c632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c636:	6083      	str	r3, [r0, #8]
 801c638:	8181      	strh	r1, [r0, #12]
 801c63a:	6643      	str	r3, [r0, #100]	; 0x64
 801c63c:	81c2      	strh	r2, [r0, #14]
 801c63e:	6183      	str	r3, [r0, #24]
 801c640:	4619      	mov	r1, r3
 801c642:	2208      	movs	r2, #8
 801c644:	305c      	adds	r0, #92	; 0x5c
 801c646:	f000 f92b 	bl	801c8a0 <memset>
 801c64a:	4b05      	ldr	r3, [pc, #20]	; (801c660 <std+0x38>)
 801c64c:	6263      	str	r3, [r4, #36]	; 0x24
 801c64e:	4b05      	ldr	r3, [pc, #20]	; (801c664 <std+0x3c>)
 801c650:	62a3      	str	r3, [r4, #40]	; 0x28
 801c652:	4b05      	ldr	r3, [pc, #20]	; (801c668 <std+0x40>)
 801c654:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c656:	4b05      	ldr	r3, [pc, #20]	; (801c66c <std+0x44>)
 801c658:	6224      	str	r4, [r4, #32]
 801c65a:	6323      	str	r3, [r4, #48]	; 0x30
 801c65c:	bd10      	pop	{r4, pc}
 801c65e:	bf00      	nop
 801c660:	0801d4c1 	.word	0x0801d4c1
 801c664:	0801d4e3 	.word	0x0801d4e3
 801c668:	0801d51b 	.word	0x0801d51b
 801c66c:	0801d53f 	.word	0x0801d53f

0801c670 <_cleanup_r>:
 801c670:	4901      	ldr	r1, [pc, #4]	; (801c678 <_cleanup_r+0x8>)
 801c672:	f000 b8af 	b.w	801c7d4 <_fwalk_reent>
 801c676:	bf00      	nop
 801c678:	0801e451 	.word	0x0801e451

0801c67c <__sfmoreglue>:
 801c67c:	b570      	push	{r4, r5, r6, lr}
 801c67e:	2268      	movs	r2, #104	; 0x68
 801c680:	1e4d      	subs	r5, r1, #1
 801c682:	4355      	muls	r5, r2
 801c684:	460e      	mov	r6, r1
 801c686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c68a:	f000 f97d 	bl	801c988 <_malloc_r>
 801c68e:	4604      	mov	r4, r0
 801c690:	b140      	cbz	r0, 801c6a4 <__sfmoreglue+0x28>
 801c692:	2100      	movs	r1, #0
 801c694:	e9c0 1600 	strd	r1, r6, [r0]
 801c698:	300c      	adds	r0, #12
 801c69a:	60a0      	str	r0, [r4, #8]
 801c69c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c6a0:	f000 f8fe 	bl	801c8a0 <memset>
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	bd70      	pop	{r4, r5, r6, pc}

0801c6a8 <__sfp_lock_acquire>:
 801c6a8:	4801      	ldr	r0, [pc, #4]	; (801c6b0 <__sfp_lock_acquire+0x8>)
 801c6aa:	f000 b8d8 	b.w	801c85e <__retarget_lock_acquire_recursive>
 801c6ae:	bf00      	nop
 801c6b0:	2000a5f6 	.word	0x2000a5f6

0801c6b4 <__sfp_lock_release>:
 801c6b4:	4801      	ldr	r0, [pc, #4]	; (801c6bc <__sfp_lock_release+0x8>)
 801c6b6:	f000 b8d4 	b.w	801c862 <__retarget_lock_release_recursive>
 801c6ba:	bf00      	nop
 801c6bc:	2000a5f6 	.word	0x2000a5f6

0801c6c0 <__sinit_lock_acquire>:
 801c6c0:	4801      	ldr	r0, [pc, #4]	; (801c6c8 <__sinit_lock_acquire+0x8>)
 801c6c2:	f000 b8cc 	b.w	801c85e <__retarget_lock_acquire_recursive>
 801c6c6:	bf00      	nop
 801c6c8:	2000a5f7 	.word	0x2000a5f7

0801c6cc <__sinit_lock_release>:
 801c6cc:	4801      	ldr	r0, [pc, #4]	; (801c6d4 <__sinit_lock_release+0x8>)
 801c6ce:	f000 b8c8 	b.w	801c862 <__retarget_lock_release_recursive>
 801c6d2:	bf00      	nop
 801c6d4:	2000a5f7 	.word	0x2000a5f7

0801c6d8 <__sinit>:
 801c6d8:	b510      	push	{r4, lr}
 801c6da:	4604      	mov	r4, r0
 801c6dc:	f7ff fff0 	bl	801c6c0 <__sinit_lock_acquire>
 801c6e0:	69a3      	ldr	r3, [r4, #24]
 801c6e2:	b11b      	cbz	r3, 801c6ec <__sinit+0x14>
 801c6e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c6e8:	f7ff bff0 	b.w	801c6cc <__sinit_lock_release>
 801c6ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c6f0:	6523      	str	r3, [r4, #80]	; 0x50
 801c6f2:	4b13      	ldr	r3, [pc, #76]	; (801c740 <__sinit+0x68>)
 801c6f4:	4a13      	ldr	r2, [pc, #76]	; (801c744 <__sinit+0x6c>)
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	62a2      	str	r2, [r4, #40]	; 0x28
 801c6fa:	42a3      	cmp	r3, r4
 801c6fc:	bf04      	itt	eq
 801c6fe:	2301      	moveq	r3, #1
 801c700:	61a3      	streq	r3, [r4, #24]
 801c702:	4620      	mov	r0, r4
 801c704:	f000 f820 	bl	801c748 <__sfp>
 801c708:	6060      	str	r0, [r4, #4]
 801c70a:	4620      	mov	r0, r4
 801c70c:	f000 f81c 	bl	801c748 <__sfp>
 801c710:	60a0      	str	r0, [r4, #8]
 801c712:	4620      	mov	r0, r4
 801c714:	f000 f818 	bl	801c748 <__sfp>
 801c718:	2200      	movs	r2, #0
 801c71a:	60e0      	str	r0, [r4, #12]
 801c71c:	2104      	movs	r1, #4
 801c71e:	6860      	ldr	r0, [r4, #4]
 801c720:	f7ff ff82 	bl	801c628 <std>
 801c724:	68a0      	ldr	r0, [r4, #8]
 801c726:	2201      	movs	r2, #1
 801c728:	2109      	movs	r1, #9
 801c72a:	f7ff ff7d 	bl	801c628 <std>
 801c72e:	68e0      	ldr	r0, [r4, #12]
 801c730:	2202      	movs	r2, #2
 801c732:	2112      	movs	r1, #18
 801c734:	f7ff ff78 	bl	801c628 <std>
 801c738:	2301      	movs	r3, #1
 801c73a:	61a3      	str	r3, [r4, #24]
 801c73c:	e7d2      	b.n	801c6e4 <__sinit+0xc>
 801c73e:	bf00      	nop
 801c740:	0801fea8 	.word	0x0801fea8
 801c744:	0801c671 	.word	0x0801c671

0801c748 <__sfp>:
 801c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c74a:	4607      	mov	r7, r0
 801c74c:	f7ff ffac 	bl	801c6a8 <__sfp_lock_acquire>
 801c750:	4b1e      	ldr	r3, [pc, #120]	; (801c7cc <__sfp+0x84>)
 801c752:	681e      	ldr	r6, [r3, #0]
 801c754:	69b3      	ldr	r3, [r6, #24]
 801c756:	b913      	cbnz	r3, 801c75e <__sfp+0x16>
 801c758:	4630      	mov	r0, r6
 801c75a:	f7ff ffbd 	bl	801c6d8 <__sinit>
 801c75e:	3648      	adds	r6, #72	; 0x48
 801c760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c764:	3b01      	subs	r3, #1
 801c766:	d503      	bpl.n	801c770 <__sfp+0x28>
 801c768:	6833      	ldr	r3, [r6, #0]
 801c76a:	b30b      	cbz	r3, 801c7b0 <__sfp+0x68>
 801c76c:	6836      	ldr	r6, [r6, #0]
 801c76e:	e7f7      	b.n	801c760 <__sfp+0x18>
 801c770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c774:	b9d5      	cbnz	r5, 801c7ac <__sfp+0x64>
 801c776:	4b16      	ldr	r3, [pc, #88]	; (801c7d0 <__sfp+0x88>)
 801c778:	60e3      	str	r3, [r4, #12]
 801c77a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c77e:	6665      	str	r5, [r4, #100]	; 0x64
 801c780:	f000 f86c 	bl	801c85c <__retarget_lock_init_recursive>
 801c784:	f7ff ff96 	bl	801c6b4 <__sfp_lock_release>
 801c788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c78c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c790:	6025      	str	r5, [r4, #0]
 801c792:	61a5      	str	r5, [r4, #24]
 801c794:	2208      	movs	r2, #8
 801c796:	4629      	mov	r1, r5
 801c798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c79c:	f000 f880 	bl	801c8a0 <memset>
 801c7a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c7a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c7a8:	4620      	mov	r0, r4
 801c7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7ac:	3468      	adds	r4, #104	; 0x68
 801c7ae:	e7d9      	b.n	801c764 <__sfp+0x1c>
 801c7b0:	2104      	movs	r1, #4
 801c7b2:	4638      	mov	r0, r7
 801c7b4:	f7ff ff62 	bl	801c67c <__sfmoreglue>
 801c7b8:	4604      	mov	r4, r0
 801c7ba:	6030      	str	r0, [r6, #0]
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d1d5      	bne.n	801c76c <__sfp+0x24>
 801c7c0:	f7ff ff78 	bl	801c6b4 <__sfp_lock_release>
 801c7c4:	230c      	movs	r3, #12
 801c7c6:	603b      	str	r3, [r7, #0]
 801c7c8:	e7ee      	b.n	801c7a8 <__sfp+0x60>
 801c7ca:	bf00      	nop
 801c7cc:	0801fea8 	.word	0x0801fea8
 801c7d0:	ffff0001 	.word	0xffff0001

0801c7d4 <_fwalk_reent>:
 801c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c7d8:	4606      	mov	r6, r0
 801c7da:	4688      	mov	r8, r1
 801c7dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c7e0:	2700      	movs	r7, #0
 801c7e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c7e6:	f1b9 0901 	subs.w	r9, r9, #1
 801c7ea:	d505      	bpl.n	801c7f8 <_fwalk_reent+0x24>
 801c7ec:	6824      	ldr	r4, [r4, #0]
 801c7ee:	2c00      	cmp	r4, #0
 801c7f0:	d1f7      	bne.n	801c7e2 <_fwalk_reent+0xe>
 801c7f2:	4638      	mov	r0, r7
 801c7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7f8:	89ab      	ldrh	r3, [r5, #12]
 801c7fa:	2b01      	cmp	r3, #1
 801c7fc:	d907      	bls.n	801c80e <_fwalk_reent+0x3a>
 801c7fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c802:	3301      	adds	r3, #1
 801c804:	d003      	beq.n	801c80e <_fwalk_reent+0x3a>
 801c806:	4629      	mov	r1, r5
 801c808:	4630      	mov	r0, r6
 801c80a:	47c0      	blx	r8
 801c80c:	4307      	orrs	r7, r0
 801c80e:	3568      	adds	r5, #104	; 0x68
 801c810:	e7e9      	b.n	801c7e6 <_fwalk_reent+0x12>
	...

0801c814 <__libc_init_array>:
 801c814:	b570      	push	{r4, r5, r6, lr}
 801c816:	4d0d      	ldr	r5, [pc, #52]	; (801c84c <__libc_init_array+0x38>)
 801c818:	4c0d      	ldr	r4, [pc, #52]	; (801c850 <__libc_init_array+0x3c>)
 801c81a:	1b64      	subs	r4, r4, r5
 801c81c:	10a4      	asrs	r4, r4, #2
 801c81e:	2600      	movs	r6, #0
 801c820:	42a6      	cmp	r6, r4
 801c822:	d109      	bne.n	801c838 <__libc_init_array+0x24>
 801c824:	4d0b      	ldr	r5, [pc, #44]	; (801c854 <__libc_init_array+0x40>)
 801c826:	4c0c      	ldr	r4, [pc, #48]	; (801c858 <__libc_init_array+0x44>)
 801c828:	f002 fd0e 	bl	801f248 <_init>
 801c82c:	1b64      	subs	r4, r4, r5
 801c82e:	10a4      	asrs	r4, r4, #2
 801c830:	2600      	movs	r6, #0
 801c832:	42a6      	cmp	r6, r4
 801c834:	d105      	bne.n	801c842 <__libc_init_array+0x2e>
 801c836:	bd70      	pop	{r4, r5, r6, pc}
 801c838:	f855 3b04 	ldr.w	r3, [r5], #4
 801c83c:	4798      	blx	r3
 801c83e:	3601      	adds	r6, #1
 801c840:	e7ee      	b.n	801c820 <__libc_init_array+0xc>
 801c842:	f855 3b04 	ldr.w	r3, [r5], #4
 801c846:	4798      	blx	r3
 801c848:	3601      	adds	r6, #1
 801c84a:	e7f2      	b.n	801c832 <__libc_init_array+0x1e>
 801c84c:	0802022c 	.word	0x0802022c
 801c850:	0802022c 	.word	0x0802022c
 801c854:	0802022c 	.word	0x0802022c
 801c858:	08020250 	.word	0x08020250

0801c85c <__retarget_lock_init_recursive>:
 801c85c:	4770      	bx	lr

0801c85e <__retarget_lock_acquire_recursive>:
 801c85e:	4770      	bx	lr

0801c860 <__retarget_lock_release>:
 801c860:	4770      	bx	lr

0801c862 <__retarget_lock_release_recursive>:
 801c862:	4770      	bx	lr

0801c864 <malloc>:
 801c864:	4b02      	ldr	r3, [pc, #8]	; (801c870 <malloc+0xc>)
 801c866:	4601      	mov	r1, r0
 801c868:	6818      	ldr	r0, [r3, #0]
 801c86a:	f000 b88d 	b.w	801c988 <_malloc_r>
 801c86e:	bf00      	nop
 801c870:	20000034 	.word	0x20000034

0801c874 <free>:
 801c874:	4b02      	ldr	r3, [pc, #8]	; (801c880 <free+0xc>)
 801c876:	4601      	mov	r1, r0
 801c878:	6818      	ldr	r0, [r3, #0]
 801c87a:	f000 b819 	b.w	801c8b0 <_free_r>
 801c87e:	bf00      	nop
 801c880:	20000034 	.word	0x20000034

0801c884 <memcpy>:
 801c884:	440a      	add	r2, r1
 801c886:	4291      	cmp	r1, r2
 801c888:	f100 33ff 	add.w	r3, r0, #4294967295
 801c88c:	d100      	bne.n	801c890 <memcpy+0xc>
 801c88e:	4770      	bx	lr
 801c890:	b510      	push	{r4, lr}
 801c892:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c896:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c89a:	4291      	cmp	r1, r2
 801c89c:	d1f9      	bne.n	801c892 <memcpy+0xe>
 801c89e:	bd10      	pop	{r4, pc}

0801c8a0 <memset>:
 801c8a0:	4402      	add	r2, r0
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	4293      	cmp	r3, r2
 801c8a6:	d100      	bne.n	801c8aa <memset+0xa>
 801c8a8:	4770      	bx	lr
 801c8aa:	f803 1b01 	strb.w	r1, [r3], #1
 801c8ae:	e7f9      	b.n	801c8a4 <memset+0x4>

0801c8b0 <_free_r>:
 801c8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c8b2:	2900      	cmp	r1, #0
 801c8b4:	d044      	beq.n	801c940 <_free_r+0x90>
 801c8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c8ba:	9001      	str	r0, [sp, #4]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	f1a1 0404 	sub.w	r4, r1, #4
 801c8c2:	bfb8      	it	lt
 801c8c4:	18e4      	addlt	r4, r4, r3
 801c8c6:	f001 fe15 	bl	801e4f4 <__malloc_lock>
 801c8ca:	4a1e      	ldr	r2, [pc, #120]	; (801c944 <_free_r+0x94>)
 801c8cc:	9801      	ldr	r0, [sp, #4]
 801c8ce:	6813      	ldr	r3, [r2, #0]
 801c8d0:	b933      	cbnz	r3, 801c8e0 <_free_r+0x30>
 801c8d2:	6063      	str	r3, [r4, #4]
 801c8d4:	6014      	str	r4, [r2, #0]
 801c8d6:	b003      	add	sp, #12
 801c8d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c8dc:	f001 be10 	b.w	801e500 <__malloc_unlock>
 801c8e0:	42a3      	cmp	r3, r4
 801c8e2:	d908      	bls.n	801c8f6 <_free_r+0x46>
 801c8e4:	6825      	ldr	r5, [r4, #0]
 801c8e6:	1961      	adds	r1, r4, r5
 801c8e8:	428b      	cmp	r3, r1
 801c8ea:	bf01      	itttt	eq
 801c8ec:	6819      	ldreq	r1, [r3, #0]
 801c8ee:	685b      	ldreq	r3, [r3, #4]
 801c8f0:	1949      	addeq	r1, r1, r5
 801c8f2:	6021      	streq	r1, [r4, #0]
 801c8f4:	e7ed      	b.n	801c8d2 <_free_r+0x22>
 801c8f6:	461a      	mov	r2, r3
 801c8f8:	685b      	ldr	r3, [r3, #4]
 801c8fa:	b10b      	cbz	r3, 801c900 <_free_r+0x50>
 801c8fc:	42a3      	cmp	r3, r4
 801c8fe:	d9fa      	bls.n	801c8f6 <_free_r+0x46>
 801c900:	6811      	ldr	r1, [r2, #0]
 801c902:	1855      	adds	r5, r2, r1
 801c904:	42a5      	cmp	r5, r4
 801c906:	d10b      	bne.n	801c920 <_free_r+0x70>
 801c908:	6824      	ldr	r4, [r4, #0]
 801c90a:	4421      	add	r1, r4
 801c90c:	1854      	adds	r4, r2, r1
 801c90e:	42a3      	cmp	r3, r4
 801c910:	6011      	str	r1, [r2, #0]
 801c912:	d1e0      	bne.n	801c8d6 <_free_r+0x26>
 801c914:	681c      	ldr	r4, [r3, #0]
 801c916:	685b      	ldr	r3, [r3, #4]
 801c918:	6053      	str	r3, [r2, #4]
 801c91a:	4421      	add	r1, r4
 801c91c:	6011      	str	r1, [r2, #0]
 801c91e:	e7da      	b.n	801c8d6 <_free_r+0x26>
 801c920:	d902      	bls.n	801c928 <_free_r+0x78>
 801c922:	230c      	movs	r3, #12
 801c924:	6003      	str	r3, [r0, #0]
 801c926:	e7d6      	b.n	801c8d6 <_free_r+0x26>
 801c928:	6825      	ldr	r5, [r4, #0]
 801c92a:	1961      	adds	r1, r4, r5
 801c92c:	428b      	cmp	r3, r1
 801c92e:	bf04      	itt	eq
 801c930:	6819      	ldreq	r1, [r3, #0]
 801c932:	685b      	ldreq	r3, [r3, #4]
 801c934:	6063      	str	r3, [r4, #4]
 801c936:	bf04      	itt	eq
 801c938:	1949      	addeq	r1, r1, r5
 801c93a:	6021      	streq	r1, [r4, #0]
 801c93c:	6054      	str	r4, [r2, #4]
 801c93e:	e7ca      	b.n	801c8d6 <_free_r+0x26>
 801c940:	b003      	add	sp, #12
 801c942:	bd30      	pop	{r4, r5, pc}
 801c944:	2000a5f8 	.word	0x2000a5f8

0801c948 <sbrk_aligned>:
 801c948:	b570      	push	{r4, r5, r6, lr}
 801c94a:	4e0e      	ldr	r6, [pc, #56]	; (801c984 <sbrk_aligned+0x3c>)
 801c94c:	460c      	mov	r4, r1
 801c94e:	6831      	ldr	r1, [r6, #0]
 801c950:	4605      	mov	r5, r0
 801c952:	b911      	cbnz	r1, 801c95a <sbrk_aligned+0x12>
 801c954:	f000 fd60 	bl	801d418 <_sbrk_r>
 801c958:	6030      	str	r0, [r6, #0]
 801c95a:	4621      	mov	r1, r4
 801c95c:	4628      	mov	r0, r5
 801c95e:	f000 fd5b 	bl	801d418 <_sbrk_r>
 801c962:	1c43      	adds	r3, r0, #1
 801c964:	d00a      	beq.n	801c97c <sbrk_aligned+0x34>
 801c966:	1cc4      	adds	r4, r0, #3
 801c968:	f024 0403 	bic.w	r4, r4, #3
 801c96c:	42a0      	cmp	r0, r4
 801c96e:	d007      	beq.n	801c980 <sbrk_aligned+0x38>
 801c970:	1a21      	subs	r1, r4, r0
 801c972:	4628      	mov	r0, r5
 801c974:	f000 fd50 	bl	801d418 <_sbrk_r>
 801c978:	3001      	adds	r0, #1
 801c97a:	d101      	bne.n	801c980 <sbrk_aligned+0x38>
 801c97c:	f04f 34ff 	mov.w	r4, #4294967295
 801c980:	4620      	mov	r0, r4
 801c982:	bd70      	pop	{r4, r5, r6, pc}
 801c984:	2000a5fc 	.word	0x2000a5fc

0801c988 <_malloc_r>:
 801c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c98c:	1ccd      	adds	r5, r1, #3
 801c98e:	f025 0503 	bic.w	r5, r5, #3
 801c992:	3508      	adds	r5, #8
 801c994:	2d0c      	cmp	r5, #12
 801c996:	bf38      	it	cc
 801c998:	250c      	movcc	r5, #12
 801c99a:	2d00      	cmp	r5, #0
 801c99c:	4607      	mov	r7, r0
 801c99e:	db01      	blt.n	801c9a4 <_malloc_r+0x1c>
 801c9a0:	42a9      	cmp	r1, r5
 801c9a2:	d905      	bls.n	801c9b0 <_malloc_r+0x28>
 801c9a4:	230c      	movs	r3, #12
 801c9a6:	603b      	str	r3, [r7, #0]
 801c9a8:	2600      	movs	r6, #0
 801c9aa:	4630      	mov	r0, r6
 801c9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9b0:	4e2e      	ldr	r6, [pc, #184]	; (801ca6c <_malloc_r+0xe4>)
 801c9b2:	f001 fd9f 	bl	801e4f4 <__malloc_lock>
 801c9b6:	6833      	ldr	r3, [r6, #0]
 801c9b8:	461c      	mov	r4, r3
 801c9ba:	bb34      	cbnz	r4, 801ca0a <_malloc_r+0x82>
 801c9bc:	4629      	mov	r1, r5
 801c9be:	4638      	mov	r0, r7
 801c9c0:	f7ff ffc2 	bl	801c948 <sbrk_aligned>
 801c9c4:	1c43      	adds	r3, r0, #1
 801c9c6:	4604      	mov	r4, r0
 801c9c8:	d14d      	bne.n	801ca66 <_malloc_r+0xde>
 801c9ca:	6834      	ldr	r4, [r6, #0]
 801c9cc:	4626      	mov	r6, r4
 801c9ce:	2e00      	cmp	r6, #0
 801c9d0:	d140      	bne.n	801ca54 <_malloc_r+0xcc>
 801c9d2:	6823      	ldr	r3, [r4, #0]
 801c9d4:	4631      	mov	r1, r6
 801c9d6:	4638      	mov	r0, r7
 801c9d8:	eb04 0803 	add.w	r8, r4, r3
 801c9dc:	f000 fd1c 	bl	801d418 <_sbrk_r>
 801c9e0:	4580      	cmp	r8, r0
 801c9e2:	d13a      	bne.n	801ca5a <_malloc_r+0xd2>
 801c9e4:	6821      	ldr	r1, [r4, #0]
 801c9e6:	3503      	adds	r5, #3
 801c9e8:	1a6d      	subs	r5, r5, r1
 801c9ea:	f025 0503 	bic.w	r5, r5, #3
 801c9ee:	3508      	adds	r5, #8
 801c9f0:	2d0c      	cmp	r5, #12
 801c9f2:	bf38      	it	cc
 801c9f4:	250c      	movcc	r5, #12
 801c9f6:	4629      	mov	r1, r5
 801c9f8:	4638      	mov	r0, r7
 801c9fa:	f7ff ffa5 	bl	801c948 <sbrk_aligned>
 801c9fe:	3001      	adds	r0, #1
 801ca00:	d02b      	beq.n	801ca5a <_malloc_r+0xd2>
 801ca02:	6823      	ldr	r3, [r4, #0]
 801ca04:	442b      	add	r3, r5
 801ca06:	6023      	str	r3, [r4, #0]
 801ca08:	e00e      	b.n	801ca28 <_malloc_r+0xa0>
 801ca0a:	6822      	ldr	r2, [r4, #0]
 801ca0c:	1b52      	subs	r2, r2, r5
 801ca0e:	d41e      	bmi.n	801ca4e <_malloc_r+0xc6>
 801ca10:	2a0b      	cmp	r2, #11
 801ca12:	d916      	bls.n	801ca42 <_malloc_r+0xba>
 801ca14:	1961      	adds	r1, r4, r5
 801ca16:	42a3      	cmp	r3, r4
 801ca18:	6025      	str	r5, [r4, #0]
 801ca1a:	bf18      	it	ne
 801ca1c:	6059      	strne	r1, [r3, #4]
 801ca1e:	6863      	ldr	r3, [r4, #4]
 801ca20:	bf08      	it	eq
 801ca22:	6031      	streq	r1, [r6, #0]
 801ca24:	5162      	str	r2, [r4, r5]
 801ca26:	604b      	str	r3, [r1, #4]
 801ca28:	4638      	mov	r0, r7
 801ca2a:	f104 060b 	add.w	r6, r4, #11
 801ca2e:	f001 fd67 	bl	801e500 <__malloc_unlock>
 801ca32:	f026 0607 	bic.w	r6, r6, #7
 801ca36:	1d23      	adds	r3, r4, #4
 801ca38:	1af2      	subs	r2, r6, r3
 801ca3a:	d0b6      	beq.n	801c9aa <_malloc_r+0x22>
 801ca3c:	1b9b      	subs	r3, r3, r6
 801ca3e:	50a3      	str	r3, [r4, r2]
 801ca40:	e7b3      	b.n	801c9aa <_malloc_r+0x22>
 801ca42:	6862      	ldr	r2, [r4, #4]
 801ca44:	42a3      	cmp	r3, r4
 801ca46:	bf0c      	ite	eq
 801ca48:	6032      	streq	r2, [r6, #0]
 801ca4a:	605a      	strne	r2, [r3, #4]
 801ca4c:	e7ec      	b.n	801ca28 <_malloc_r+0xa0>
 801ca4e:	4623      	mov	r3, r4
 801ca50:	6864      	ldr	r4, [r4, #4]
 801ca52:	e7b2      	b.n	801c9ba <_malloc_r+0x32>
 801ca54:	4634      	mov	r4, r6
 801ca56:	6876      	ldr	r6, [r6, #4]
 801ca58:	e7b9      	b.n	801c9ce <_malloc_r+0x46>
 801ca5a:	230c      	movs	r3, #12
 801ca5c:	603b      	str	r3, [r7, #0]
 801ca5e:	4638      	mov	r0, r7
 801ca60:	f001 fd4e 	bl	801e500 <__malloc_unlock>
 801ca64:	e7a1      	b.n	801c9aa <_malloc_r+0x22>
 801ca66:	6025      	str	r5, [r4, #0]
 801ca68:	e7de      	b.n	801ca28 <_malloc_r+0xa0>
 801ca6a:	bf00      	nop
 801ca6c:	2000a5f8 	.word	0x2000a5f8

0801ca70 <__cvt>:
 801ca70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ca74:	ec55 4b10 	vmov	r4, r5, d0
 801ca78:	2d00      	cmp	r5, #0
 801ca7a:	460e      	mov	r6, r1
 801ca7c:	4619      	mov	r1, r3
 801ca7e:	462b      	mov	r3, r5
 801ca80:	bfbb      	ittet	lt
 801ca82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ca86:	461d      	movlt	r5, r3
 801ca88:	2300      	movge	r3, #0
 801ca8a:	232d      	movlt	r3, #45	; 0x2d
 801ca8c:	700b      	strb	r3, [r1, #0]
 801ca8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ca90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ca94:	4691      	mov	r9, r2
 801ca96:	f023 0820 	bic.w	r8, r3, #32
 801ca9a:	bfbc      	itt	lt
 801ca9c:	4622      	movlt	r2, r4
 801ca9e:	4614      	movlt	r4, r2
 801caa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801caa4:	d005      	beq.n	801cab2 <__cvt+0x42>
 801caa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801caaa:	d100      	bne.n	801caae <__cvt+0x3e>
 801caac:	3601      	adds	r6, #1
 801caae:	2102      	movs	r1, #2
 801cab0:	e000      	b.n	801cab4 <__cvt+0x44>
 801cab2:	2103      	movs	r1, #3
 801cab4:	ab03      	add	r3, sp, #12
 801cab6:	9301      	str	r3, [sp, #4]
 801cab8:	ab02      	add	r3, sp, #8
 801caba:	9300      	str	r3, [sp, #0]
 801cabc:	ec45 4b10 	vmov	d0, r4, r5
 801cac0:	4653      	mov	r3, sl
 801cac2:	4632      	mov	r2, r6
 801cac4:	f000 fe50 	bl	801d768 <_dtoa_r>
 801cac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801cacc:	4607      	mov	r7, r0
 801cace:	d102      	bne.n	801cad6 <__cvt+0x66>
 801cad0:	f019 0f01 	tst.w	r9, #1
 801cad4:	d022      	beq.n	801cb1c <__cvt+0xac>
 801cad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cada:	eb07 0906 	add.w	r9, r7, r6
 801cade:	d110      	bne.n	801cb02 <__cvt+0x92>
 801cae0:	783b      	ldrb	r3, [r7, #0]
 801cae2:	2b30      	cmp	r3, #48	; 0x30
 801cae4:	d10a      	bne.n	801cafc <__cvt+0x8c>
 801cae6:	2200      	movs	r2, #0
 801cae8:	2300      	movs	r3, #0
 801caea:	4620      	mov	r0, r4
 801caec:	4629      	mov	r1, r5
 801caee:	f7e3 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 801caf2:	b918      	cbnz	r0, 801cafc <__cvt+0x8c>
 801caf4:	f1c6 0601 	rsb	r6, r6, #1
 801caf8:	f8ca 6000 	str.w	r6, [sl]
 801cafc:	f8da 3000 	ldr.w	r3, [sl]
 801cb00:	4499      	add	r9, r3
 801cb02:	2200      	movs	r2, #0
 801cb04:	2300      	movs	r3, #0
 801cb06:	4620      	mov	r0, r4
 801cb08:	4629      	mov	r1, r5
 801cb0a:	f7e3 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801cb0e:	b108      	cbz	r0, 801cb14 <__cvt+0xa4>
 801cb10:	f8cd 900c 	str.w	r9, [sp, #12]
 801cb14:	2230      	movs	r2, #48	; 0x30
 801cb16:	9b03      	ldr	r3, [sp, #12]
 801cb18:	454b      	cmp	r3, r9
 801cb1a:	d307      	bcc.n	801cb2c <__cvt+0xbc>
 801cb1c:	9b03      	ldr	r3, [sp, #12]
 801cb1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb20:	1bdb      	subs	r3, r3, r7
 801cb22:	4638      	mov	r0, r7
 801cb24:	6013      	str	r3, [r2, #0]
 801cb26:	b004      	add	sp, #16
 801cb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb2c:	1c59      	adds	r1, r3, #1
 801cb2e:	9103      	str	r1, [sp, #12]
 801cb30:	701a      	strb	r2, [r3, #0]
 801cb32:	e7f0      	b.n	801cb16 <__cvt+0xa6>

0801cb34 <__exponent>:
 801cb34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb36:	4603      	mov	r3, r0
 801cb38:	2900      	cmp	r1, #0
 801cb3a:	bfb8      	it	lt
 801cb3c:	4249      	neglt	r1, r1
 801cb3e:	f803 2b02 	strb.w	r2, [r3], #2
 801cb42:	bfb4      	ite	lt
 801cb44:	222d      	movlt	r2, #45	; 0x2d
 801cb46:	222b      	movge	r2, #43	; 0x2b
 801cb48:	2909      	cmp	r1, #9
 801cb4a:	7042      	strb	r2, [r0, #1]
 801cb4c:	dd2a      	ble.n	801cba4 <__exponent+0x70>
 801cb4e:	f10d 0407 	add.w	r4, sp, #7
 801cb52:	46a4      	mov	ip, r4
 801cb54:	270a      	movs	r7, #10
 801cb56:	46a6      	mov	lr, r4
 801cb58:	460a      	mov	r2, r1
 801cb5a:	fb91 f6f7 	sdiv	r6, r1, r7
 801cb5e:	fb07 1516 	mls	r5, r7, r6, r1
 801cb62:	3530      	adds	r5, #48	; 0x30
 801cb64:	2a63      	cmp	r2, #99	; 0x63
 801cb66:	f104 34ff 	add.w	r4, r4, #4294967295
 801cb6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801cb6e:	4631      	mov	r1, r6
 801cb70:	dcf1      	bgt.n	801cb56 <__exponent+0x22>
 801cb72:	3130      	adds	r1, #48	; 0x30
 801cb74:	f1ae 0502 	sub.w	r5, lr, #2
 801cb78:	f804 1c01 	strb.w	r1, [r4, #-1]
 801cb7c:	1c44      	adds	r4, r0, #1
 801cb7e:	4629      	mov	r1, r5
 801cb80:	4561      	cmp	r1, ip
 801cb82:	d30a      	bcc.n	801cb9a <__exponent+0x66>
 801cb84:	f10d 0209 	add.w	r2, sp, #9
 801cb88:	eba2 020e 	sub.w	r2, r2, lr
 801cb8c:	4565      	cmp	r5, ip
 801cb8e:	bf88      	it	hi
 801cb90:	2200      	movhi	r2, #0
 801cb92:	4413      	add	r3, r2
 801cb94:	1a18      	subs	r0, r3, r0
 801cb96:	b003      	add	sp, #12
 801cb98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cb9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 801cba2:	e7ed      	b.n	801cb80 <__exponent+0x4c>
 801cba4:	2330      	movs	r3, #48	; 0x30
 801cba6:	3130      	adds	r1, #48	; 0x30
 801cba8:	7083      	strb	r3, [r0, #2]
 801cbaa:	70c1      	strb	r1, [r0, #3]
 801cbac:	1d03      	adds	r3, r0, #4
 801cbae:	e7f1      	b.n	801cb94 <__exponent+0x60>

0801cbb0 <_printf_float>:
 801cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbb4:	ed2d 8b02 	vpush	{d8}
 801cbb8:	b08d      	sub	sp, #52	; 0x34
 801cbba:	460c      	mov	r4, r1
 801cbbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801cbc0:	4616      	mov	r6, r2
 801cbc2:	461f      	mov	r7, r3
 801cbc4:	4605      	mov	r5, r0
 801cbc6:	f001 fc7f 	bl	801e4c8 <_localeconv_r>
 801cbca:	f8d0 a000 	ldr.w	sl, [r0]
 801cbce:	4650      	mov	r0, sl
 801cbd0:	f7e3 fafe 	bl	80001d0 <strlen>
 801cbd4:	2300      	movs	r3, #0
 801cbd6:	930a      	str	r3, [sp, #40]	; 0x28
 801cbd8:	6823      	ldr	r3, [r4, #0]
 801cbda:	9305      	str	r3, [sp, #20]
 801cbdc:	f8d8 3000 	ldr.w	r3, [r8]
 801cbe0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801cbe4:	3307      	adds	r3, #7
 801cbe6:	f023 0307 	bic.w	r3, r3, #7
 801cbea:	f103 0208 	add.w	r2, r3, #8
 801cbee:	f8c8 2000 	str.w	r2, [r8]
 801cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801cbfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801cbfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cc02:	9307      	str	r3, [sp, #28]
 801cc04:	f8cd 8018 	str.w	r8, [sp, #24]
 801cc08:	ee08 0a10 	vmov	s16, r0
 801cc0c:	4b9f      	ldr	r3, [pc, #636]	; (801ce8c <_printf_float+0x2dc>)
 801cc0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc12:	f04f 32ff 	mov.w	r2, #4294967295
 801cc16:	f7e3 ff89 	bl	8000b2c <__aeabi_dcmpun>
 801cc1a:	bb88      	cbnz	r0, 801cc80 <_printf_float+0xd0>
 801cc1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc20:	4b9a      	ldr	r3, [pc, #616]	; (801ce8c <_printf_float+0x2dc>)
 801cc22:	f04f 32ff 	mov.w	r2, #4294967295
 801cc26:	f7e3 ff63 	bl	8000af0 <__aeabi_dcmple>
 801cc2a:	bb48      	cbnz	r0, 801cc80 <_printf_float+0xd0>
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	2300      	movs	r3, #0
 801cc30:	4640      	mov	r0, r8
 801cc32:	4649      	mov	r1, r9
 801cc34:	f7e3 ff52 	bl	8000adc <__aeabi_dcmplt>
 801cc38:	b110      	cbz	r0, 801cc40 <_printf_float+0x90>
 801cc3a:	232d      	movs	r3, #45	; 0x2d
 801cc3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc40:	4b93      	ldr	r3, [pc, #588]	; (801ce90 <_printf_float+0x2e0>)
 801cc42:	4894      	ldr	r0, [pc, #592]	; (801ce94 <_printf_float+0x2e4>)
 801cc44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801cc48:	bf94      	ite	ls
 801cc4a:	4698      	movls	r8, r3
 801cc4c:	4680      	movhi	r8, r0
 801cc4e:	2303      	movs	r3, #3
 801cc50:	6123      	str	r3, [r4, #16]
 801cc52:	9b05      	ldr	r3, [sp, #20]
 801cc54:	f023 0204 	bic.w	r2, r3, #4
 801cc58:	6022      	str	r2, [r4, #0]
 801cc5a:	f04f 0900 	mov.w	r9, #0
 801cc5e:	9700      	str	r7, [sp, #0]
 801cc60:	4633      	mov	r3, r6
 801cc62:	aa0b      	add	r2, sp, #44	; 0x2c
 801cc64:	4621      	mov	r1, r4
 801cc66:	4628      	mov	r0, r5
 801cc68:	f000 f9d8 	bl	801d01c <_printf_common>
 801cc6c:	3001      	adds	r0, #1
 801cc6e:	f040 8090 	bne.w	801cd92 <_printf_float+0x1e2>
 801cc72:	f04f 30ff 	mov.w	r0, #4294967295
 801cc76:	b00d      	add	sp, #52	; 0x34
 801cc78:	ecbd 8b02 	vpop	{d8}
 801cc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc80:	4642      	mov	r2, r8
 801cc82:	464b      	mov	r3, r9
 801cc84:	4640      	mov	r0, r8
 801cc86:	4649      	mov	r1, r9
 801cc88:	f7e3 ff50 	bl	8000b2c <__aeabi_dcmpun>
 801cc8c:	b140      	cbz	r0, 801cca0 <_printf_float+0xf0>
 801cc8e:	464b      	mov	r3, r9
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	bfbc      	itt	lt
 801cc94:	232d      	movlt	r3, #45	; 0x2d
 801cc96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cc9a:	487f      	ldr	r0, [pc, #508]	; (801ce98 <_printf_float+0x2e8>)
 801cc9c:	4b7f      	ldr	r3, [pc, #508]	; (801ce9c <_printf_float+0x2ec>)
 801cc9e:	e7d1      	b.n	801cc44 <_printf_float+0x94>
 801cca0:	6863      	ldr	r3, [r4, #4]
 801cca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801cca6:	9206      	str	r2, [sp, #24]
 801cca8:	1c5a      	adds	r2, r3, #1
 801ccaa:	d13f      	bne.n	801cd2c <_printf_float+0x17c>
 801ccac:	2306      	movs	r3, #6
 801ccae:	6063      	str	r3, [r4, #4]
 801ccb0:	9b05      	ldr	r3, [sp, #20]
 801ccb2:	6861      	ldr	r1, [r4, #4]
 801ccb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801ccb8:	2300      	movs	r3, #0
 801ccba:	9303      	str	r3, [sp, #12]
 801ccbc:	ab0a      	add	r3, sp, #40	; 0x28
 801ccbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 801ccc2:	ab09      	add	r3, sp, #36	; 0x24
 801ccc4:	ec49 8b10 	vmov	d0, r8, r9
 801ccc8:	9300      	str	r3, [sp, #0]
 801ccca:	6022      	str	r2, [r4, #0]
 801cccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ccd0:	4628      	mov	r0, r5
 801ccd2:	f7ff fecd 	bl	801ca70 <__cvt>
 801ccd6:	9b06      	ldr	r3, [sp, #24]
 801ccd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ccda:	2b47      	cmp	r3, #71	; 0x47
 801ccdc:	4680      	mov	r8, r0
 801ccde:	d108      	bne.n	801ccf2 <_printf_float+0x142>
 801cce0:	1cc8      	adds	r0, r1, #3
 801cce2:	db02      	blt.n	801ccea <_printf_float+0x13a>
 801cce4:	6863      	ldr	r3, [r4, #4]
 801cce6:	4299      	cmp	r1, r3
 801cce8:	dd41      	ble.n	801cd6e <_printf_float+0x1be>
 801ccea:	f1ab 0b02 	sub.w	fp, fp, #2
 801ccee:	fa5f fb8b 	uxtb.w	fp, fp
 801ccf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ccf6:	d820      	bhi.n	801cd3a <_printf_float+0x18a>
 801ccf8:	3901      	subs	r1, #1
 801ccfa:	465a      	mov	r2, fp
 801ccfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cd00:	9109      	str	r1, [sp, #36]	; 0x24
 801cd02:	f7ff ff17 	bl	801cb34 <__exponent>
 801cd06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd08:	1813      	adds	r3, r2, r0
 801cd0a:	2a01      	cmp	r2, #1
 801cd0c:	4681      	mov	r9, r0
 801cd0e:	6123      	str	r3, [r4, #16]
 801cd10:	dc02      	bgt.n	801cd18 <_printf_float+0x168>
 801cd12:	6822      	ldr	r2, [r4, #0]
 801cd14:	07d2      	lsls	r2, r2, #31
 801cd16:	d501      	bpl.n	801cd1c <_printf_float+0x16c>
 801cd18:	3301      	adds	r3, #1
 801cd1a:	6123      	str	r3, [r4, #16]
 801cd1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d09c      	beq.n	801cc5e <_printf_float+0xae>
 801cd24:	232d      	movs	r3, #45	; 0x2d
 801cd26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd2a:	e798      	b.n	801cc5e <_printf_float+0xae>
 801cd2c:	9a06      	ldr	r2, [sp, #24]
 801cd2e:	2a47      	cmp	r2, #71	; 0x47
 801cd30:	d1be      	bne.n	801ccb0 <_printf_float+0x100>
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d1bc      	bne.n	801ccb0 <_printf_float+0x100>
 801cd36:	2301      	movs	r3, #1
 801cd38:	e7b9      	b.n	801ccae <_printf_float+0xfe>
 801cd3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801cd3e:	d118      	bne.n	801cd72 <_printf_float+0x1c2>
 801cd40:	2900      	cmp	r1, #0
 801cd42:	6863      	ldr	r3, [r4, #4]
 801cd44:	dd0b      	ble.n	801cd5e <_printf_float+0x1ae>
 801cd46:	6121      	str	r1, [r4, #16]
 801cd48:	b913      	cbnz	r3, 801cd50 <_printf_float+0x1a0>
 801cd4a:	6822      	ldr	r2, [r4, #0]
 801cd4c:	07d0      	lsls	r0, r2, #31
 801cd4e:	d502      	bpl.n	801cd56 <_printf_float+0x1a6>
 801cd50:	3301      	adds	r3, #1
 801cd52:	440b      	add	r3, r1
 801cd54:	6123      	str	r3, [r4, #16]
 801cd56:	65a1      	str	r1, [r4, #88]	; 0x58
 801cd58:	f04f 0900 	mov.w	r9, #0
 801cd5c:	e7de      	b.n	801cd1c <_printf_float+0x16c>
 801cd5e:	b913      	cbnz	r3, 801cd66 <_printf_float+0x1b6>
 801cd60:	6822      	ldr	r2, [r4, #0]
 801cd62:	07d2      	lsls	r2, r2, #31
 801cd64:	d501      	bpl.n	801cd6a <_printf_float+0x1ba>
 801cd66:	3302      	adds	r3, #2
 801cd68:	e7f4      	b.n	801cd54 <_printf_float+0x1a4>
 801cd6a:	2301      	movs	r3, #1
 801cd6c:	e7f2      	b.n	801cd54 <_printf_float+0x1a4>
 801cd6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801cd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd74:	4299      	cmp	r1, r3
 801cd76:	db05      	blt.n	801cd84 <_printf_float+0x1d4>
 801cd78:	6823      	ldr	r3, [r4, #0]
 801cd7a:	6121      	str	r1, [r4, #16]
 801cd7c:	07d8      	lsls	r0, r3, #31
 801cd7e:	d5ea      	bpl.n	801cd56 <_printf_float+0x1a6>
 801cd80:	1c4b      	adds	r3, r1, #1
 801cd82:	e7e7      	b.n	801cd54 <_printf_float+0x1a4>
 801cd84:	2900      	cmp	r1, #0
 801cd86:	bfd4      	ite	le
 801cd88:	f1c1 0202 	rsble	r2, r1, #2
 801cd8c:	2201      	movgt	r2, #1
 801cd8e:	4413      	add	r3, r2
 801cd90:	e7e0      	b.n	801cd54 <_printf_float+0x1a4>
 801cd92:	6823      	ldr	r3, [r4, #0]
 801cd94:	055a      	lsls	r2, r3, #21
 801cd96:	d407      	bmi.n	801cda8 <_printf_float+0x1f8>
 801cd98:	6923      	ldr	r3, [r4, #16]
 801cd9a:	4642      	mov	r2, r8
 801cd9c:	4631      	mov	r1, r6
 801cd9e:	4628      	mov	r0, r5
 801cda0:	47b8      	blx	r7
 801cda2:	3001      	adds	r0, #1
 801cda4:	d12c      	bne.n	801ce00 <_printf_float+0x250>
 801cda6:	e764      	b.n	801cc72 <_printf_float+0xc2>
 801cda8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cdac:	f240 80e0 	bls.w	801cf70 <_printf_float+0x3c0>
 801cdb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cdb4:	2200      	movs	r2, #0
 801cdb6:	2300      	movs	r3, #0
 801cdb8:	f7e3 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 801cdbc:	2800      	cmp	r0, #0
 801cdbe:	d034      	beq.n	801ce2a <_printf_float+0x27a>
 801cdc0:	4a37      	ldr	r2, [pc, #220]	; (801cea0 <_printf_float+0x2f0>)
 801cdc2:	2301      	movs	r3, #1
 801cdc4:	4631      	mov	r1, r6
 801cdc6:	4628      	mov	r0, r5
 801cdc8:	47b8      	blx	r7
 801cdca:	3001      	adds	r0, #1
 801cdcc:	f43f af51 	beq.w	801cc72 <_printf_float+0xc2>
 801cdd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	db02      	blt.n	801cdde <_printf_float+0x22e>
 801cdd8:	6823      	ldr	r3, [r4, #0]
 801cdda:	07d8      	lsls	r0, r3, #31
 801cddc:	d510      	bpl.n	801ce00 <_printf_float+0x250>
 801cdde:	ee18 3a10 	vmov	r3, s16
 801cde2:	4652      	mov	r2, sl
 801cde4:	4631      	mov	r1, r6
 801cde6:	4628      	mov	r0, r5
 801cde8:	47b8      	blx	r7
 801cdea:	3001      	adds	r0, #1
 801cdec:	f43f af41 	beq.w	801cc72 <_printf_float+0xc2>
 801cdf0:	f04f 0800 	mov.w	r8, #0
 801cdf4:	f104 091a 	add.w	r9, r4, #26
 801cdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdfa:	3b01      	subs	r3, #1
 801cdfc:	4543      	cmp	r3, r8
 801cdfe:	dc09      	bgt.n	801ce14 <_printf_float+0x264>
 801ce00:	6823      	ldr	r3, [r4, #0]
 801ce02:	079b      	lsls	r3, r3, #30
 801ce04:	f100 8105 	bmi.w	801d012 <_printf_float+0x462>
 801ce08:	68e0      	ldr	r0, [r4, #12]
 801ce0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce0c:	4298      	cmp	r0, r3
 801ce0e:	bfb8      	it	lt
 801ce10:	4618      	movlt	r0, r3
 801ce12:	e730      	b.n	801cc76 <_printf_float+0xc6>
 801ce14:	2301      	movs	r3, #1
 801ce16:	464a      	mov	r2, r9
 801ce18:	4631      	mov	r1, r6
 801ce1a:	4628      	mov	r0, r5
 801ce1c:	47b8      	blx	r7
 801ce1e:	3001      	adds	r0, #1
 801ce20:	f43f af27 	beq.w	801cc72 <_printf_float+0xc2>
 801ce24:	f108 0801 	add.w	r8, r8, #1
 801ce28:	e7e6      	b.n	801cdf8 <_printf_float+0x248>
 801ce2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	dc39      	bgt.n	801cea4 <_printf_float+0x2f4>
 801ce30:	4a1b      	ldr	r2, [pc, #108]	; (801cea0 <_printf_float+0x2f0>)
 801ce32:	2301      	movs	r3, #1
 801ce34:	4631      	mov	r1, r6
 801ce36:	4628      	mov	r0, r5
 801ce38:	47b8      	blx	r7
 801ce3a:	3001      	adds	r0, #1
 801ce3c:	f43f af19 	beq.w	801cc72 <_printf_float+0xc2>
 801ce40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ce44:	4313      	orrs	r3, r2
 801ce46:	d102      	bne.n	801ce4e <_printf_float+0x29e>
 801ce48:	6823      	ldr	r3, [r4, #0]
 801ce4a:	07d9      	lsls	r1, r3, #31
 801ce4c:	d5d8      	bpl.n	801ce00 <_printf_float+0x250>
 801ce4e:	ee18 3a10 	vmov	r3, s16
 801ce52:	4652      	mov	r2, sl
 801ce54:	4631      	mov	r1, r6
 801ce56:	4628      	mov	r0, r5
 801ce58:	47b8      	blx	r7
 801ce5a:	3001      	adds	r0, #1
 801ce5c:	f43f af09 	beq.w	801cc72 <_printf_float+0xc2>
 801ce60:	f04f 0900 	mov.w	r9, #0
 801ce64:	f104 0a1a 	add.w	sl, r4, #26
 801ce68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce6a:	425b      	negs	r3, r3
 801ce6c:	454b      	cmp	r3, r9
 801ce6e:	dc01      	bgt.n	801ce74 <_printf_float+0x2c4>
 801ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce72:	e792      	b.n	801cd9a <_printf_float+0x1ea>
 801ce74:	2301      	movs	r3, #1
 801ce76:	4652      	mov	r2, sl
 801ce78:	4631      	mov	r1, r6
 801ce7a:	4628      	mov	r0, r5
 801ce7c:	47b8      	blx	r7
 801ce7e:	3001      	adds	r0, #1
 801ce80:	f43f aef7 	beq.w	801cc72 <_printf_float+0xc2>
 801ce84:	f109 0901 	add.w	r9, r9, #1
 801ce88:	e7ee      	b.n	801ce68 <_printf_float+0x2b8>
 801ce8a:	bf00      	nop
 801ce8c:	7fefffff 	.word	0x7fefffff
 801ce90:	0801feac 	.word	0x0801feac
 801ce94:	0801feb0 	.word	0x0801feb0
 801ce98:	0801feb8 	.word	0x0801feb8
 801ce9c:	0801feb4 	.word	0x0801feb4
 801cea0:	0801febc 	.word	0x0801febc
 801cea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cea8:	429a      	cmp	r2, r3
 801ceaa:	bfa8      	it	ge
 801ceac:	461a      	movge	r2, r3
 801ceae:	2a00      	cmp	r2, #0
 801ceb0:	4691      	mov	r9, r2
 801ceb2:	dc37      	bgt.n	801cf24 <_printf_float+0x374>
 801ceb4:	f04f 0b00 	mov.w	fp, #0
 801ceb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cebc:	f104 021a 	add.w	r2, r4, #26
 801cec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cec2:	9305      	str	r3, [sp, #20]
 801cec4:	eba3 0309 	sub.w	r3, r3, r9
 801cec8:	455b      	cmp	r3, fp
 801ceca:	dc33      	bgt.n	801cf34 <_printf_float+0x384>
 801cecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ced0:	429a      	cmp	r2, r3
 801ced2:	db3b      	blt.n	801cf4c <_printf_float+0x39c>
 801ced4:	6823      	ldr	r3, [r4, #0]
 801ced6:	07da      	lsls	r2, r3, #31
 801ced8:	d438      	bmi.n	801cf4c <_printf_float+0x39c>
 801ceda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cedc:	9a05      	ldr	r2, [sp, #20]
 801cede:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cee0:	1a9a      	subs	r2, r3, r2
 801cee2:	eba3 0901 	sub.w	r9, r3, r1
 801cee6:	4591      	cmp	r9, r2
 801cee8:	bfa8      	it	ge
 801ceea:	4691      	movge	r9, r2
 801ceec:	f1b9 0f00 	cmp.w	r9, #0
 801cef0:	dc35      	bgt.n	801cf5e <_printf_float+0x3ae>
 801cef2:	f04f 0800 	mov.w	r8, #0
 801cef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cefa:	f104 0a1a 	add.w	sl, r4, #26
 801cefe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cf02:	1a9b      	subs	r3, r3, r2
 801cf04:	eba3 0309 	sub.w	r3, r3, r9
 801cf08:	4543      	cmp	r3, r8
 801cf0a:	f77f af79 	ble.w	801ce00 <_printf_float+0x250>
 801cf0e:	2301      	movs	r3, #1
 801cf10:	4652      	mov	r2, sl
 801cf12:	4631      	mov	r1, r6
 801cf14:	4628      	mov	r0, r5
 801cf16:	47b8      	blx	r7
 801cf18:	3001      	adds	r0, #1
 801cf1a:	f43f aeaa 	beq.w	801cc72 <_printf_float+0xc2>
 801cf1e:	f108 0801 	add.w	r8, r8, #1
 801cf22:	e7ec      	b.n	801cefe <_printf_float+0x34e>
 801cf24:	4613      	mov	r3, r2
 801cf26:	4631      	mov	r1, r6
 801cf28:	4642      	mov	r2, r8
 801cf2a:	4628      	mov	r0, r5
 801cf2c:	47b8      	blx	r7
 801cf2e:	3001      	adds	r0, #1
 801cf30:	d1c0      	bne.n	801ceb4 <_printf_float+0x304>
 801cf32:	e69e      	b.n	801cc72 <_printf_float+0xc2>
 801cf34:	2301      	movs	r3, #1
 801cf36:	4631      	mov	r1, r6
 801cf38:	4628      	mov	r0, r5
 801cf3a:	9205      	str	r2, [sp, #20]
 801cf3c:	47b8      	blx	r7
 801cf3e:	3001      	adds	r0, #1
 801cf40:	f43f ae97 	beq.w	801cc72 <_printf_float+0xc2>
 801cf44:	9a05      	ldr	r2, [sp, #20]
 801cf46:	f10b 0b01 	add.w	fp, fp, #1
 801cf4a:	e7b9      	b.n	801cec0 <_printf_float+0x310>
 801cf4c:	ee18 3a10 	vmov	r3, s16
 801cf50:	4652      	mov	r2, sl
 801cf52:	4631      	mov	r1, r6
 801cf54:	4628      	mov	r0, r5
 801cf56:	47b8      	blx	r7
 801cf58:	3001      	adds	r0, #1
 801cf5a:	d1be      	bne.n	801ceda <_printf_float+0x32a>
 801cf5c:	e689      	b.n	801cc72 <_printf_float+0xc2>
 801cf5e:	9a05      	ldr	r2, [sp, #20]
 801cf60:	464b      	mov	r3, r9
 801cf62:	4442      	add	r2, r8
 801cf64:	4631      	mov	r1, r6
 801cf66:	4628      	mov	r0, r5
 801cf68:	47b8      	blx	r7
 801cf6a:	3001      	adds	r0, #1
 801cf6c:	d1c1      	bne.n	801cef2 <_printf_float+0x342>
 801cf6e:	e680      	b.n	801cc72 <_printf_float+0xc2>
 801cf70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf72:	2a01      	cmp	r2, #1
 801cf74:	dc01      	bgt.n	801cf7a <_printf_float+0x3ca>
 801cf76:	07db      	lsls	r3, r3, #31
 801cf78:	d538      	bpl.n	801cfec <_printf_float+0x43c>
 801cf7a:	2301      	movs	r3, #1
 801cf7c:	4642      	mov	r2, r8
 801cf7e:	4631      	mov	r1, r6
 801cf80:	4628      	mov	r0, r5
 801cf82:	47b8      	blx	r7
 801cf84:	3001      	adds	r0, #1
 801cf86:	f43f ae74 	beq.w	801cc72 <_printf_float+0xc2>
 801cf8a:	ee18 3a10 	vmov	r3, s16
 801cf8e:	4652      	mov	r2, sl
 801cf90:	4631      	mov	r1, r6
 801cf92:	4628      	mov	r0, r5
 801cf94:	47b8      	blx	r7
 801cf96:	3001      	adds	r0, #1
 801cf98:	f43f ae6b 	beq.w	801cc72 <_printf_float+0xc2>
 801cf9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	2300      	movs	r3, #0
 801cfa4:	f7e3 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 801cfa8:	b9d8      	cbnz	r0, 801cfe2 <_printf_float+0x432>
 801cfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfac:	f108 0201 	add.w	r2, r8, #1
 801cfb0:	3b01      	subs	r3, #1
 801cfb2:	4631      	mov	r1, r6
 801cfb4:	4628      	mov	r0, r5
 801cfb6:	47b8      	blx	r7
 801cfb8:	3001      	adds	r0, #1
 801cfba:	d10e      	bne.n	801cfda <_printf_float+0x42a>
 801cfbc:	e659      	b.n	801cc72 <_printf_float+0xc2>
 801cfbe:	2301      	movs	r3, #1
 801cfc0:	4652      	mov	r2, sl
 801cfc2:	4631      	mov	r1, r6
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	47b8      	blx	r7
 801cfc8:	3001      	adds	r0, #1
 801cfca:	f43f ae52 	beq.w	801cc72 <_printf_float+0xc2>
 801cfce:	f108 0801 	add.w	r8, r8, #1
 801cfd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfd4:	3b01      	subs	r3, #1
 801cfd6:	4543      	cmp	r3, r8
 801cfd8:	dcf1      	bgt.n	801cfbe <_printf_float+0x40e>
 801cfda:	464b      	mov	r3, r9
 801cfdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801cfe0:	e6dc      	b.n	801cd9c <_printf_float+0x1ec>
 801cfe2:	f04f 0800 	mov.w	r8, #0
 801cfe6:	f104 0a1a 	add.w	sl, r4, #26
 801cfea:	e7f2      	b.n	801cfd2 <_printf_float+0x422>
 801cfec:	2301      	movs	r3, #1
 801cfee:	4642      	mov	r2, r8
 801cff0:	e7df      	b.n	801cfb2 <_printf_float+0x402>
 801cff2:	2301      	movs	r3, #1
 801cff4:	464a      	mov	r2, r9
 801cff6:	4631      	mov	r1, r6
 801cff8:	4628      	mov	r0, r5
 801cffa:	47b8      	blx	r7
 801cffc:	3001      	adds	r0, #1
 801cffe:	f43f ae38 	beq.w	801cc72 <_printf_float+0xc2>
 801d002:	f108 0801 	add.w	r8, r8, #1
 801d006:	68e3      	ldr	r3, [r4, #12]
 801d008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d00a:	1a5b      	subs	r3, r3, r1
 801d00c:	4543      	cmp	r3, r8
 801d00e:	dcf0      	bgt.n	801cff2 <_printf_float+0x442>
 801d010:	e6fa      	b.n	801ce08 <_printf_float+0x258>
 801d012:	f04f 0800 	mov.w	r8, #0
 801d016:	f104 0919 	add.w	r9, r4, #25
 801d01a:	e7f4      	b.n	801d006 <_printf_float+0x456>

0801d01c <_printf_common>:
 801d01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d020:	4616      	mov	r6, r2
 801d022:	4699      	mov	r9, r3
 801d024:	688a      	ldr	r2, [r1, #8]
 801d026:	690b      	ldr	r3, [r1, #16]
 801d028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d02c:	4293      	cmp	r3, r2
 801d02e:	bfb8      	it	lt
 801d030:	4613      	movlt	r3, r2
 801d032:	6033      	str	r3, [r6, #0]
 801d034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d038:	4607      	mov	r7, r0
 801d03a:	460c      	mov	r4, r1
 801d03c:	b10a      	cbz	r2, 801d042 <_printf_common+0x26>
 801d03e:	3301      	adds	r3, #1
 801d040:	6033      	str	r3, [r6, #0]
 801d042:	6823      	ldr	r3, [r4, #0]
 801d044:	0699      	lsls	r1, r3, #26
 801d046:	bf42      	ittt	mi
 801d048:	6833      	ldrmi	r3, [r6, #0]
 801d04a:	3302      	addmi	r3, #2
 801d04c:	6033      	strmi	r3, [r6, #0]
 801d04e:	6825      	ldr	r5, [r4, #0]
 801d050:	f015 0506 	ands.w	r5, r5, #6
 801d054:	d106      	bne.n	801d064 <_printf_common+0x48>
 801d056:	f104 0a19 	add.w	sl, r4, #25
 801d05a:	68e3      	ldr	r3, [r4, #12]
 801d05c:	6832      	ldr	r2, [r6, #0]
 801d05e:	1a9b      	subs	r3, r3, r2
 801d060:	42ab      	cmp	r3, r5
 801d062:	dc26      	bgt.n	801d0b2 <_printf_common+0x96>
 801d064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d068:	1e13      	subs	r3, r2, #0
 801d06a:	6822      	ldr	r2, [r4, #0]
 801d06c:	bf18      	it	ne
 801d06e:	2301      	movne	r3, #1
 801d070:	0692      	lsls	r2, r2, #26
 801d072:	d42b      	bmi.n	801d0cc <_printf_common+0xb0>
 801d074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d078:	4649      	mov	r1, r9
 801d07a:	4638      	mov	r0, r7
 801d07c:	47c0      	blx	r8
 801d07e:	3001      	adds	r0, #1
 801d080:	d01e      	beq.n	801d0c0 <_printf_common+0xa4>
 801d082:	6823      	ldr	r3, [r4, #0]
 801d084:	68e5      	ldr	r5, [r4, #12]
 801d086:	6832      	ldr	r2, [r6, #0]
 801d088:	f003 0306 	and.w	r3, r3, #6
 801d08c:	2b04      	cmp	r3, #4
 801d08e:	bf08      	it	eq
 801d090:	1aad      	subeq	r5, r5, r2
 801d092:	68a3      	ldr	r3, [r4, #8]
 801d094:	6922      	ldr	r2, [r4, #16]
 801d096:	bf0c      	ite	eq
 801d098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d09c:	2500      	movne	r5, #0
 801d09e:	4293      	cmp	r3, r2
 801d0a0:	bfc4      	itt	gt
 801d0a2:	1a9b      	subgt	r3, r3, r2
 801d0a4:	18ed      	addgt	r5, r5, r3
 801d0a6:	2600      	movs	r6, #0
 801d0a8:	341a      	adds	r4, #26
 801d0aa:	42b5      	cmp	r5, r6
 801d0ac:	d11a      	bne.n	801d0e4 <_printf_common+0xc8>
 801d0ae:	2000      	movs	r0, #0
 801d0b0:	e008      	b.n	801d0c4 <_printf_common+0xa8>
 801d0b2:	2301      	movs	r3, #1
 801d0b4:	4652      	mov	r2, sl
 801d0b6:	4649      	mov	r1, r9
 801d0b8:	4638      	mov	r0, r7
 801d0ba:	47c0      	blx	r8
 801d0bc:	3001      	adds	r0, #1
 801d0be:	d103      	bne.n	801d0c8 <_printf_common+0xac>
 801d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0c8:	3501      	adds	r5, #1
 801d0ca:	e7c6      	b.n	801d05a <_printf_common+0x3e>
 801d0cc:	18e1      	adds	r1, r4, r3
 801d0ce:	1c5a      	adds	r2, r3, #1
 801d0d0:	2030      	movs	r0, #48	; 0x30
 801d0d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d0d6:	4422      	add	r2, r4
 801d0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d0dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d0e0:	3302      	adds	r3, #2
 801d0e2:	e7c7      	b.n	801d074 <_printf_common+0x58>
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	4622      	mov	r2, r4
 801d0e8:	4649      	mov	r1, r9
 801d0ea:	4638      	mov	r0, r7
 801d0ec:	47c0      	blx	r8
 801d0ee:	3001      	adds	r0, #1
 801d0f0:	d0e6      	beq.n	801d0c0 <_printf_common+0xa4>
 801d0f2:	3601      	adds	r6, #1
 801d0f4:	e7d9      	b.n	801d0aa <_printf_common+0x8e>
	...

0801d0f8 <_printf_i>:
 801d0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d0fc:	7e0f      	ldrb	r7, [r1, #24]
 801d0fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d100:	2f78      	cmp	r7, #120	; 0x78
 801d102:	4691      	mov	r9, r2
 801d104:	4680      	mov	r8, r0
 801d106:	460c      	mov	r4, r1
 801d108:	469a      	mov	sl, r3
 801d10a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d10e:	d807      	bhi.n	801d120 <_printf_i+0x28>
 801d110:	2f62      	cmp	r7, #98	; 0x62
 801d112:	d80a      	bhi.n	801d12a <_printf_i+0x32>
 801d114:	2f00      	cmp	r7, #0
 801d116:	f000 80d8 	beq.w	801d2ca <_printf_i+0x1d2>
 801d11a:	2f58      	cmp	r7, #88	; 0x58
 801d11c:	f000 80a3 	beq.w	801d266 <_printf_i+0x16e>
 801d120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d128:	e03a      	b.n	801d1a0 <_printf_i+0xa8>
 801d12a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d12e:	2b15      	cmp	r3, #21
 801d130:	d8f6      	bhi.n	801d120 <_printf_i+0x28>
 801d132:	a101      	add	r1, pc, #4	; (adr r1, 801d138 <_printf_i+0x40>)
 801d134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d138:	0801d191 	.word	0x0801d191
 801d13c:	0801d1a5 	.word	0x0801d1a5
 801d140:	0801d121 	.word	0x0801d121
 801d144:	0801d121 	.word	0x0801d121
 801d148:	0801d121 	.word	0x0801d121
 801d14c:	0801d121 	.word	0x0801d121
 801d150:	0801d1a5 	.word	0x0801d1a5
 801d154:	0801d121 	.word	0x0801d121
 801d158:	0801d121 	.word	0x0801d121
 801d15c:	0801d121 	.word	0x0801d121
 801d160:	0801d121 	.word	0x0801d121
 801d164:	0801d2b1 	.word	0x0801d2b1
 801d168:	0801d1d5 	.word	0x0801d1d5
 801d16c:	0801d293 	.word	0x0801d293
 801d170:	0801d121 	.word	0x0801d121
 801d174:	0801d121 	.word	0x0801d121
 801d178:	0801d2d3 	.word	0x0801d2d3
 801d17c:	0801d121 	.word	0x0801d121
 801d180:	0801d1d5 	.word	0x0801d1d5
 801d184:	0801d121 	.word	0x0801d121
 801d188:	0801d121 	.word	0x0801d121
 801d18c:	0801d29b 	.word	0x0801d29b
 801d190:	682b      	ldr	r3, [r5, #0]
 801d192:	1d1a      	adds	r2, r3, #4
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	602a      	str	r2, [r5, #0]
 801d198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d1a0:	2301      	movs	r3, #1
 801d1a2:	e0a3      	b.n	801d2ec <_printf_i+0x1f4>
 801d1a4:	6820      	ldr	r0, [r4, #0]
 801d1a6:	6829      	ldr	r1, [r5, #0]
 801d1a8:	0606      	lsls	r6, r0, #24
 801d1aa:	f101 0304 	add.w	r3, r1, #4
 801d1ae:	d50a      	bpl.n	801d1c6 <_printf_i+0xce>
 801d1b0:	680e      	ldr	r6, [r1, #0]
 801d1b2:	602b      	str	r3, [r5, #0]
 801d1b4:	2e00      	cmp	r6, #0
 801d1b6:	da03      	bge.n	801d1c0 <_printf_i+0xc8>
 801d1b8:	232d      	movs	r3, #45	; 0x2d
 801d1ba:	4276      	negs	r6, r6
 801d1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1c0:	485e      	ldr	r0, [pc, #376]	; (801d33c <_printf_i+0x244>)
 801d1c2:	230a      	movs	r3, #10
 801d1c4:	e019      	b.n	801d1fa <_printf_i+0x102>
 801d1c6:	680e      	ldr	r6, [r1, #0]
 801d1c8:	602b      	str	r3, [r5, #0]
 801d1ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d1ce:	bf18      	it	ne
 801d1d0:	b236      	sxthne	r6, r6
 801d1d2:	e7ef      	b.n	801d1b4 <_printf_i+0xbc>
 801d1d4:	682b      	ldr	r3, [r5, #0]
 801d1d6:	6820      	ldr	r0, [r4, #0]
 801d1d8:	1d19      	adds	r1, r3, #4
 801d1da:	6029      	str	r1, [r5, #0]
 801d1dc:	0601      	lsls	r1, r0, #24
 801d1de:	d501      	bpl.n	801d1e4 <_printf_i+0xec>
 801d1e0:	681e      	ldr	r6, [r3, #0]
 801d1e2:	e002      	b.n	801d1ea <_printf_i+0xf2>
 801d1e4:	0646      	lsls	r6, r0, #25
 801d1e6:	d5fb      	bpl.n	801d1e0 <_printf_i+0xe8>
 801d1e8:	881e      	ldrh	r6, [r3, #0]
 801d1ea:	4854      	ldr	r0, [pc, #336]	; (801d33c <_printf_i+0x244>)
 801d1ec:	2f6f      	cmp	r7, #111	; 0x6f
 801d1ee:	bf0c      	ite	eq
 801d1f0:	2308      	moveq	r3, #8
 801d1f2:	230a      	movne	r3, #10
 801d1f4:	2100      	movs	r1, #0
 801d1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d1fa:	6865      	ldr	r5, [r4, #4]
 801d1fc:	60a5      	str	r5, [r4, #8]
 801d1fe:	2d00      	cmp	r5, #0
 801d200:	bfa2      	ittt	ge
 801d202:	6821      	ldrge	r1, [r4, #0]
 801d204:	f021 0104 	bicge.w	r1, r1, #4
 801d208:	6021      	strge	r1, [r4, #0]
 801d20a:	b90e      	cbnz	r6, 801d210 <_printf_i+0x118>
 801d20c:	2d00      	cmp	r5, #0
 801d20e:	d04d      	beq.n	801d2ac <_printf_i+0x1b4>
 801d210:	4615      	mov	r5, r2
 801d212:	fbb6 f1f3 	udiv	r1, r6, r3
 801d216:	fb03 6711 	mls	r7, r3, r1, r6
 801d21a:	5dc7      	ldrb	r7, [r0, r7]
 801d21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d220:	4637      	mov	r7, r6
 801d222:	42bb      	cmp	r3, r7
 801d224:	460e      	mov	r6, r1
 801d226:	d9f4      	bls.n	801d212 <_printf_i+0x11a>
 801d228:	2b08      	cmp	r3, #8
 801d22a:	d10b      	bne.n	801d244 <_printf_i+0x14c>
 801d22c:	6823      	ldr	r3, [r4, #0]
 801d22e:	07de      	lsls	r6, r3, #31
 801d230:	d508      	bpl.n	801d244 <_printf_i+0x14c>
 801d232:	6923      	ldr	r3, [r4, #16]
 801d234:	6861      	ldr	r1, [r4, #4]
 801d236:	4299      	cmp	r1, r3
 801d238:	bfde      	ittt	le
 801d23a:	2330      	movle	r3, #48	; 0x30
 801d23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d240:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d244:	1b52      	subs	r2, r2, r5
 801d246:	6122      	str	r2, [r4, #16]
 801d248:	f8cd a000 	str.w	sl, [sp]
 801d24c:	464b      	mov	r3, r9
 801d24e:	aa03      	add	r2, sp, #12
 801d250:	4621      	mov	r1, r4
 801d252:	4640      	mov	r0, r8
 801d254:	f7ff fee2 	bl	801d01c <_printf_common>
 801d258:	3001      	adds	r0, #1
 801d25a:	d14c      	bne.n	801d2f6 <_printf_i+0x1fe>
 801d25c:	f04f 30ff 	mov.w	r0, #4294967295
 801d260:	b004      	add	sp, #16
 801d262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d266:	4835      	ldr	r0, [pc, #212]	; (801d33c <_printf_i+0x244>)
 801d268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801d26c:	6829      	ldr	r1, [r5, #0]
 801d26e:	6823      	ldr	r3, [r4, #0]
 801d270:	f851 6b04 	ldr.w	r6, [r1], #4
 801d274:	6029      	str	r1, [r5, #0]
 801d276:	061d      	lsls	r5, r3, #24
 801d278:	d514      	bpl.n	801d2a4 <_printf_i+0x1ac>
 801d27a:	07df      	lsls	r7, r3, #31
 801d27c:	bf44      	itt	mi
 801d27e:	f043 0320 	orrmi.w	r3, r3, #32
 801d282:	6023      	strmi	r3, [r4, #0]
 801d284:	b91e      	cbnz	r6, 801d28e <_printf_i+0x196>
 801d286:	6823      	ldr	r3, [r4, #0]
 801d288:	f023 0320 	bic.w	r3, r3, #32
 801d28c:	6023      	str	r3, [r4, #0]
 801d28e:	2310      	movs	r3, #16
 801d290:	e7b0      	b.n	801d1f4 <_printf_i+0xfc>
 801d292:	6823      	ldr	r3, [r4, #0]
 801d294:	f043 0320 	orr.w	r3, r3, #32
 801d298:	6023      	str	r3, [r4, #0]
 801d29a:	2378      	movs	r3, #120	; 0x78
 801d29c:	4828      	ldr	r0, [pc, #160]	; (801d340 <_printf_i+0x248>)
 801d29e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d2a2:	e7e3      	b.n	801d26c <_printf_i+0x174>
 801d2a4:	0659      	lsls	r1, r3, #25
 801d2a6:	bf48      	it	mi
 801d2a8:	b2b6      	uxthmi	r6, r6
 801d2aa:	e7e6      	b.n	801d27a <_printf_i+0x182>
 801d2ac:	4615      	mov	r5, r2
 801d2ae:	e7bb      	b.n	801d228 <_printf_i+0x130>
 801d2b0:	682b      	ldr	r3, [r5, #0]
 801d2b2:	6826      	ldr	r6, [r4, #0]
 801d2b4:	6961      	ldr	r1, [r4, #20]
 801d2b6:	1d18      	adds	r0, r3, #4
 801d2b8:	6028      	str	r0, [r5, #0]
 801d2ba:	0635      	lsls	r5, r6, #24
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	d501      	bpl.n	801d2c4 <_printf_i+0x1cc>
 801d2c0:	6019      	str	r1, [r3, #0]
 801d2c2:	e002      	b.n	801d2ca <_printf_i+0x1d2>
 801d2c4:	0670      	lsls	r0, r6, #25
 801d2c6:	d5fb      	bpl.n	801d2c0 <_printf_i+0x1c8>
 801d2c8:	8019      	strh	r1, [r3, #0]
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	6123      	str	r3, [r4, #16]
 801d2ce:	4615      	mov	r5, r2
 801d2d0:	e7ba      	b.n	801d248 <_printf_i+0x150>
 801d2d2:	682b      	ldr	r3, [r5, #0]
 801d2d4:	1d1a      	adds	r2, r3, #4
 801d2d6:	602a      	str	r2, [r5, #0]
 801d2d8:	681d      	ldr	r5, [r3, #0]
 801d2da:	6862      	ldr	r2, [r4, #4]
 801d2dc:	2100      	movs	r1, #0
 801d2de:	4628      	mov	r0, r5
 801d2e0:	f7e2 ff7e 	bl	80001e0 <memchr>
 801d2e4:	b108      	cbz	r0, 801d2ea <_printf_i+0x1f2>
 801d2e6:	1b40      	subs	r0, r0, r5
 801d2e8:	6060      	str	r0, [r4, #4]
 801d2ea:	6863      	ldr	r3, [r4, #4]
 801d2ec:	6123      	str	r3, [r4, #16]
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d2f4:	e7a8      	b.n	801d248 <_printf_i+0x150>
 801d2f6:	6923      	ldr	r3, [r4, #16]
 801d2f8:	462a      	mov	r2, r5
 801d2fa:	4649      	mov	r1, r9
 801d2fc:	4640      	mov	r0, r8
 801d2fe:	47d0      	blx	sl
 801d300:	3001      	adds	r0, #1
 801d302:	d0ab      	beq.n	801d25c <_printf_i+0x164>
 801d304:	6823      	ldr	r3, [r4, #0]
 801d306:	079b      	lsls	r3, r3, #30
 801d308:	d413      	bmi.n	801d332 <_printf_i+0x23a>
 801d30a:	68e0      	ldr	r0, [r4, #12]
 801d30c:	9b03      	ldr	r3, [sp, #12]
 801d30e:	4298      	cmp	r0, r3
 801d310:	bfb8      	it	lt
 801d312:	4618      	movlt	r0, r3
 801d314:	e7a4      	b.n	801d260 <_printf_i+0x168>
 801d316:	2301      	movs	r3, #1
 801d318:	4632      	mov	r2, r6
 801d31a:	4649      	mov	r1, r9
 801d31c:	4640      	mov	r0, r8
 801d31e:	47d0      	blx	sl
 801d320:	3001      	adds	r0, #1
 801d322:	d09b      	beq.n	801d25c <_printf_i+0x164>
 801d324:	3501      	adds	r5, #1
 801d326:	68e3      	ldr	r3, [r4, #12]
 801d328:	9903      	ldr	r1, [sp, #12]
 801d32a:	1a5b      	subs	r3, r3, r1
 801d32c:	42ab      	cmp	r3, r5
 801d32e:	dcf2      	bgt.n	801d316 <_printf_i+0x21e>
 801d330:	e7eb      	b.n	801d30a <_printf_i+0x212>
 801d332:	2500      	movs	r5, #0
 801d334:	f104 0619 	add.w	r6, r4, #25
 801d338:	e7f5      	b.n	801d326 <_printf_i+0x22e>
 801d33a:	bf00      	nop
 801d33c:	0801febe 	.word	0x0801febe
 801d340:	0801fecf 	.word	0x0801fecf

0801d344 <cleanup_glue>:
 801d344:	b538      	push	{r3, r4, r5, lr}
 801d346:	460c      	mov	r4, r1
 801d348:	6809      	ldr	r1, [r1, #0]
 801d34a:	4605      	mov	r5, r0
 801d34c:	b109      	cbz	r1, 801d352 <cleanup_glue+0xe>
 801d34e:	f7ff fff9 	bl	801d344 <cleanup_glue>
 801d352:	4621      	mov	r1, r4
 801d354:	4628      	mov	r0, r5
 801d356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d35a:	f7ff baa9 	b.w	801c8b0 <_free_r>
	...

0801d360 <_reclaim_reent>:
 801d360:	4b2c      	ldr	r3, [pc, #176]	; (801d414 <_reclaim_reent+0xb4>)
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	4283      	cmp	r3, r0
 801d366:	b570      	push	{r4, r5, r6, lr}
 801d368:	4604      	mov	r4, r0
 801d36a:	d051      	beq.n	801d410 <_reclaim_reent+0xb0>
 801d36c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d36e:	b143      	cbz	r3, 801d382 <_reclaim_reent+0x22>
 801d370:	68db      	ldr	r3, [r3, #12]
 801d372:	2b00      	cmp	r3, #0
 801d374:	d14a      	bne.n	801d40c <_reclaim_reent+0xac>
 801d376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d378:	6819      	ldr	r1, [r3, #0]
 801d37a:	b111      	cbz	r1, 801d382 <_reclaim_reent+0x22>
 801d37c:	4620      	mov	r0, r4
 801d37e:	f7ff fa97 	bl	801c8b0 <_free_r>
 801d382:	6961      	ldr	r1, [r4, #20]
 801d384:	b111      	cbz	r1, 801d38c <_reclaim_reent+0x2c>
 801d386:	4620      	mov	r0, r4
 801d388:	f7ff fa92 	bl	801c8b0 <_free_r>
 801d38c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d38e:	b111      	cbz	r1, 801d396 <_reclaim_reent+0x36>
 801d390:	4620      	mov	r0, r4
 801d392:	f7ff fa8d 	bl	801c8b0 <_free_r>
 801d396:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d398:	b111      	cbz	r1, 801d3a0 <_reclaim_reent+0x40>
 801d39a:	4620      	mov	r0, r4
 801d39c:	f7ff fa88 	bl	801c8b0 <_free_r>
 801d3a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801d3a2:	b111      	cbz	r1, 801d3aa <_reclaim_reent+0x4a>
 801d3a4:	4620      	mov	r0, r4
 801d3a6:	f7ff fa83 	bl	801c8b0 <_free_r>
 801d3aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d3ac:	b111      	cbz	r1, 801d3b4 <_reclaim_reent+0x54>
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	f7ff fa7e 	bl	801c8b0 <_free_r>
 801d3b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d3b6:	b111      	cbz	r1, 801d3be <_reclaim_reent+0x5e>
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	f7ff fa79 	bl	801c8b0 <_free_r>
 801d3be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d3c0:	b111      	cbz	r1, 801d3c8 <_reclaim_reent+0x68>
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	f7ff fa74 	bl	801c8b0 <_free_r>
 801d3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d3ca:	b111      	cbz	r1, 801d3d2 <_reclaim_reent+0x72>
 801d3cc:	4620      	mov	r0, r4
 801d3ce:	f7ff fa6f 	bl	801c8b0 <_free_r>
 801d3d2:	69a3      	ldr	r3, [r4, #24]
 801d3d4:	b1e3      	cbz	r3, 801d410 <_reclaim_reent+0xb0>
 801d3d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d3d8:	4620      	mov	r0, r4
 801d3da:	4798      	blx	r3
 801d3dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d3de:	b1b9      	cbz	r1, 801d410 <_reclaim_reent+0xb0>
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3e6:	f7ff bfad 	b.w	801d344 <cleanup_glue>
 801d3ea:	5949      	ldr	r1, [r1, r5]
 801d3ec:	b941      	cbnz	r1, 801d400 <_reclaim_reent+0xa0>
 801d3ee:	3504      	adds	r5, #4
 801d3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d3f2:	2d80      	cmp	r5, #128	; 0x80
 801d3f4:	68d9      	ldr	r1, [r3, #12]
 801d3f6:	d1f8      	bne.n	801d3ea <_reclaim_reent+0x8a>
 801d3f8:	4620      	mov	r0, r4
 801d3fa:	f7ff fa59 	bl	801c8b0 <_free_r>
 801d3fe:	e7ba      	b.n	801d376 <_reclaim_reent+0x16>
 801d400:	680e      	ldr	r6, [r1, #0]
 801d402:	4620      	mov	r0, r4
 801d404:	f7ff fa54 	bl	801c8b0 <_free_r>
 801d408:	4631      	mov	r1, r6
 801d40a:	e7ef      	b.n	801d3ec <_reclaim_reent+0x8c>
 801d40c:	2500      	movs	r5, #0
 801d40e:	e7ef      	b.n	801d3f0 <_reclaim_reent+0x90>
 801d410:	bd70      	pop	{r4, r5, r6, pc}
 801d412:	bf00      	nop
 801d414:	20000034 	.word	0x20000034

0801d418 <_sbrk_r>:
 801d418:	b538      	push	{r3, r4, r5, lr}
 801d41a:	4d06      	ldr	r5, [pc, #24]	; (801d434 <_sbrk_r+0x1c>)
 801d41c:	2300      	movs	r3, #0
 801d41e:	4604      	mov	r4, r0
 801d420:	4608      	mov	r0, r1
 801d422:	602b      	str	r3, [r5, #0]
 801d424:	f7f3 f838 	bl	8010498 <_sbrk>
 801d428:	1c43      	adds	r3, r0, #1
 801d42a:	d102      	bne.n	801d432 <_sbrk_r+0x1a>
 801d42c:	682b      	ldr	r3, [r5, #0]
 801d42e:	b103      	cbz	r3, 801d432 <_sbrk_r+0x1a>
 801d430:	6023      	str	r3, [r4, #0]
 801d432:	bd38      	pop	{r3, r4, r5, pc}
 801d434:	2000a600 	.word	0x2000a600

0801d438 <_raise_r>:
 801d438:	291f      	cmp	r1, #31
 801d43a:	b538      	push	{r3, r4, r5, lr}
 801d43c:	4604      	mov	r4, r0
 801d43e:	460d      	mov	r5, r1
 801d440:	d904      	bls.n	801d44c <_raise_r+0x14>
 801d442:	2316      	movs	r3, #22
 801d444:	6003      	str	r3, [r0, #0]
 801d446:	f04f 30ff 	mov.w	r0, #4294967295
 801d44a:	bd38      	pop	{r3, r4, r5, pc}
 801d44c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d44e:	b112      	cbz	r2, 801d456 <_raise_r+0x1e>
 801d450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d454:	b94b      	cbnz	r3, 801d46a <_raise_r+0x32>
 801d456:	4620      	mov	r0, r4
 801d458:	f000 f830 	bl	801d4bc <_getpid_r>
 801d45c:	462a      	mov	r2, r5
 801d45e:	4601      	mov	r1, r0
 801d460:	4620      	mov	r0, r4
 801d462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d466:	f000 b817 	b.w	801d498 <_kill_r>
 801d46a:	2b01      	cmp	r3, #1
 801d46c:	d00a      	beq.n	801d484 <_raise_r+0x4c>
 801d46e:	1c59      	adds	r1, r3, #1
 801d470:	d103      	bne.n	801d47a <_raise_r+0x42>
 801d472:	2316      	movs	r3, #22
 801d474:	6003      	str	r3, [r0, #0]
 801d476:	2001      	movs	r0, #1
 801d478:	e7e7      	b.n	801d44a <_raise_r+0x12>
 801d47a:	2400      	movs	r4, #0
 801d47c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d480:	4628      	mov	r0, r5
 801d482:	4798      	blx	r3
 801d484:	2000      	movs	r0, #0
 801d486:	e7e0      	b.n	801d44a <_raise_r+0x12>

0801d488 <raise>:
 801d488:	4b02      	ldr	r3, [pc, #8]	; (801d494 <raise+0xc>)
 801d48a:	4601      	mov	r1, r0
 801d48c:	6818      	ldr	r0, [r3, #0]
 801d48e:	f7ff bfd3 	b.w	801d438 <_raise_r>
 801d492:	bf00      	nop
 801d494:	20000034 	.word	0x20000034

0801d498 <_kill_r>:
 801d498:	b538      	push	{r3, r4, r5, lr}
 801d49a:	4d07      	ldr	r5, [pc, #28]	; (801d4b8 <_kill_r+0x20>)
 801d49c:	2300      	movs	r3, #0
 801d49e:	4604      	mov	r4, r0
 801d4a0:	4608      	mov	r0, r1
 801d4a2:	4611      	mov	r1, r2
 801d4a4:	602b      	str	r3, [r5, #0]
 801d4a6:	f7f2 ff6f 	bl	8010388 <_kill>
 801d4aa:	1c43      	adds	r3, r0, #1
 801d4ac:	d102      	bne.n	801d4b4 <_kill_r+0x1c>
 801d4ae:	682b      	ldr	r3, [r5, #0]
 801d4b0:	b103      	cbz	r3, 801d4b4 <_kill_r+0x1c>
 801d4b2:	6023      	str	r3, [r4, #0]
 801d4b4:	bd38      	pop	{r3, r4, r5, pc}
 801d4b6:	bf00      	nop
 801d4b8:	2000a600 	.word	0x2000a600

0801d4bc <_getpid_r>:
 801d4bc:	f7f2 bf5c 	b.w	8010378 <_getpid>

0801d4c0 <__sread>:
 801d4c0:	b510      	push	{r4, lr}
 801d4c2:	460c      	mov	r4, r1
 801d4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4c8:	f001 fbba 	bl	801ec40 <_read_r>
 801d4cc:	2800      	cmp	r0, #0
 801d4ce:	bfab      	itete	ge
 801d4d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d4d2:	89a3      	ldrhlt	r3, [r4, #12]
 801d4d4:	181b      	addge	r3, r3, r0
 801d4d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d4da:	bfac      	ite	ge
 801d4dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801d4de:	81a3      	strhlt	r3, [r4, #12]
 801d4e0:	bd10      	pop	{r4, pc}

0801d4e2 <__swrite>:
 801d4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4e6:	461f      	mov	r7, r3
 801d4e8:	898b      	ldrh	r3, [r1, #12]
 801d4ea:	05db      	lsls	r3, r3, #23
 801d4ec:	4605      	mov	r5, r0
 801d4ee:	460c      	mov	r4, r1
 801d4f0:	4616      	mov	r6, r2
 801d4f2:	d505      	bpl.n	801d500 <__swrite+0x1e>
 801d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4f8:	2302      	movs	r3, #2
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	f000 ffe8 	bl	801e4d0 <_lseek_r>
 801d500:	89a3      	ldrh	r3, [r4, #12]
 801d502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d50a:	81a3      	strh	r3, [r4, #12]
 801d50c:	4632      	mov	r2, r6
 801d50e:	463b      	mov	r3, r7
 801d510:	4628      	mov	r0, r5
 801d512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d516:	f000 b817 	b.w	801d548 <_write_r>

0801d51a <__sseek>:
 801d51a:	b510      	push	{r4, lr}
 801d51c:	460c      	mov	r4, r1
 801d51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d522:	f000 ffd5 	bl	801e4d0 <_lseek_r>
 801d526:	1c43      	adds	r3, r0, #1
 801d528:	89a3      	ldrh	r3, [r4, #12]
 801d52a:	bf15      	itete	ne
 801d52c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d52e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d536:	81a3      	strheq	r3, [r4, #12]
 801d538:	bf18      	it	ne
 801d53a:	81a3      	strhne	r3, [r4, #12]
 801d53c:	bd10      	pop	{r4, pc}

0801d53e <__sclose>:
 801d53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d542:	f000 b875 	b.w	801d630 <_close_r>
	...

0801d548 <_write_r>:
 801d548:	b538      	push	{r3, r4, r5, lr}
 801d54a:	4d07      	ldr	r5, [pc, #28]	; (801d568 <_write_r+0x20>)
 801d54c:	4604      	mov	r4, r0
 801d54e:	4608      	mov	r0, r1
 801d550:	4611      	mov	r1, r2
 801d552:	2200      	movs	r2, #0
 801d554:	602a      	str	r2, [r5, #0]
 801d556:	461a      	mov	r2, r3
 801d558:	f7f2 ff4d 	bl	80103f6 <_write>
 801d55c:	1c43      	adds	r3, r0, #1
 801d55e:	d102      	bne.n	801d566 <_write_r+0x1e>
 801d560:	682b      	ldr	r3, [r5, #0]
 801d562:	b103      	cbz	r3, 801d566 <_write_r+0x1e>
 801d564:	6023      	str	r3, [r4, #0]
 801d566:	bd38      	pop	{r3, r4, r5, pc}
 801d568:	2000a600 	.word	0x2000a600

0801d56c <__register_exitproc>:
 801d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d570:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801d62c <__register_exitproc+0xc0>
 801d574:	4606      	mov	r6, r0
 801d576:	f8d8 0000 	ldr.w	r0, [r8]
 801d57a:	461f      	mov	r7, r3
 801d57c:	460d      	mov	r5, r1
 801d57e:	4691      	mov	r9, r2
 801d580:	f7ff f96d 	bl	801c85e <__retarget_lock_acquire_recursive>
 801d584:	4b25      	ldr	r3, [pc, #148]	; (801d61c <__register_exitproc+0xb0>)
 801d586:	681c      	ldr	r4, [r3, #0]
 801d588:	b934      	cbnz	r4, 801d598 <__register_exitproc+0x2c>
 801d58a:	4c25      	ldr	r4, [pc, #148]	; (801d620 <__register_exitproc+0xb4>)
 801d58c:	601c      	str	r4, [r3, #0]
 801d58e:	4b25      	ldr	r3, [pc, #148]	; (801d624 <__register_exitproc+0xb8>)
 801d590:	b113      	cbz	r3, 801d598 <__register_exitproc+0x2c>
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801d598:	6863      	ldr	r3, [r4, #4]
 801d59a:	2b1f      	cmp	r3, #31
 801d59c:	dd07      	ble.n	801d5ae <__register_exitproc+0x42>
 801d59e:	f8d8 0000 	ldr.w	r0, [r8]
 801d5a2:	f7ff f95e 	bl	801c862 <__retarget_lock_release_recursive>
 801d5a6:	f04f 30ff 	mov.w	r0, #4294967295
 801d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d5ae:	b34e      	cbz	r6, 801d604 <__register_exitproc+0x98>
 801d5b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801d5b4:	b988      	cbnz	r0, 801d5da <__register_exitproc+0x6e>
 801d5b6:	4b1c      	ldr	r3, [pc, #112]	; (801d628 <__register_exitproc+0xbc>)
 801d5b8:	b923      	cbnz	r3, 801d5c4 <__register_exitproc+0x58>
 801d5ba:	f8d8 0000 	ldr.w	r0, [r8]
 801d5be:	f7ff f94f 	bl	801c860 <__retarget_lock_release>
 801d5c2:	e7f0      	b.n	801d5a6 <__register_exitproc+0x3a>
 801d5c4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801d5c8:	f7ff f94c 	bl	801c864 <malloc>
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	d0f4      	beq.n	801d5ba <__register_exitproc+0x4e>
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801d5d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801d5da:	6863      	ldr	r3, [r4, #4]
 801d5dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801d5e0:	2201      	movs	r2, #1
 801d5e2:	409a      	lsls	r2, r3
 801d5e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801d5e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801d5ec:	4313      	orrs	r3, r2
 801d5ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801d5f2:	2e02      	cmp	r6, #2
 801d5f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801d5f8:	bf02      	ittt	eq
 801d5fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801d5fe:	4313      	orreq	r3, r2
 801d600:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801d604:	6863      	ldr	r3, [r4, #4]
 801d606:	f8d8 0000 	ldr.w	r0, [r8]
 801d60a:	1c5a      	adds	r2, r3, #1
 801d60c:	3302      	adds	r3, #2
 801d60e:	6062      	str	r2, [r4, #4]
 801d610:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801d614:	f7ff f925 	bl	801c862 <__retarget_lock_release_recursive>
 801d618:	2000      	movs	r0, #0
 801d61a:	e7c6      	b.n	801d5aa <__register_exitproc+0x3e>
 801d61c:	2000a690 	.word	0x2000a690
 801d620:	2000a604 	.word	0x2000a604
 801d624:	00000000 	.word	0x00000000
 801d628:	0801c865 	.word	0x0801c865
 801d62c:	20000098 	.word	0x20000098

0801d630 <_close_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	4d06      	ldr	r5, [pc, #24]	; (801d64c <_close_r+0x1c>)
 801d634:	2300      	movs	r3, #0
 801d636:	4604      	mov	r4, r0
 801d638:	4608      	mov	r0, r1
 801d63a:	602b      	str	r3, [r5, #0]
 801d63c:	f7f2 fef7 	bl	801042e <_close>
 801d640:	1c43      	adds	r3, r0, #1
 801d642:	d102      	bne.n	801d64a <_close_r+0x1a>
 801d644:	682b      	ldr	r3, [r5, #0]
 801d646:	b103      	cbz	r3, 801d64a <_close_r+0x1a>
 801d648:	6023      	str	r3, [r4, #0]
 801d64a:	bd38      	pop	{r3, r4, r5, pc}
 801d64c:	2000a600 	.word	0x2000a600

0801d650 <quorem>:
 801d650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d654:	6903      	ldr	r3, [r0, #16]
 801d656:	690c      	ldr	r4, [r1, #16]
 801d658:	42a3      	cmp	r3, r4
 801d65a:	4607      	mov	r7, r0
 801d65c:	f2c0 8081 	blt.w	801d762 <quorem+0x112>
 801d660:	3c01      	subs	r4, #1
 801d662:	f101 0814 	add.w	r8, r1, #20
 801d666:	f100 0514 	add.w	r5, r0, #20
 801d66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d66e:	9301      	str	r3, [sp, #4]
 801d670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d678:	3301      	adds	r3, #1
 801d67a:	429a      	cmp	r2, r3
 801d67c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d684:	fbb2 f6f3 	udiv	r6, r2, r3
 801d688:	d331      	bcc.n	801d6ee <quorem+0x9e>
 801d68a:	f04f 0e00 	mov.w	lr, #0
 801d68e:	4640      	mov	r0, r8
 801d690:	46ac      	mov	ip, r5
 801d692:	46f2      	mov	sl, lr
 801d694:	f850 2b04 	ldr.w	r2, [r0], #4
 801d698:	b293      	uxth	r3, r2
 801d69a:	fb06 e303 	mla	r3, r6, r3, lr
 801d69e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d6a2:	b29b      	uxth	r3, r3
 801d6a4:	ebaa 0303 	sub.w	r3, sl, r3
 801d6a8:	f8dc a000 	ldr.w	sl, [ip]
 801d6ac:	0c12      	lsrs	r2, r2, #16
 801d6ae:	fa13 f38a 	uxtah	r3, r3, sl
 801d6b2:	fb06 e202 	mla	r2, r6, r2, lr
 801d6b6:	9300      	str	r3, [sp, #0]
 801d6b8:	9b00      	ldr	r3, [sp, #0]
 801d6ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d6be:	b292      	uxth	r2, r2
 801d6c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d6c8:	f8bd 3000 	ldrh.w	r3, [sp]
 801d6cc:	4581      	cmp	r9, r0
 801d6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d6d2:	f84c 3b04 	str.w	r3, [ip], #4
 801d6d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d6da:	d2db      	bcs.n	801d694 <quorem+0x44>
 801d6dc:	f855 300b 	ldr.w	r3, [r5, fp]
 801d6e0:	b92b      	cbnz	r3, 801d6ee <quorem+0x9e>
 801d6e2:	9b01      	ldr	r3, [sp, #4]
 801d6e4:	3b04      	subs	r3, #4
 801d6e6:	429d      	cmp	r5, r3
 801d6e8:	461a      	mov	r2, r3
 801d6ea:	d32e      	bcc.n	801d74a <quorem+0xfa>
 801d6ec:	613c      	str	r4, [r7, #16]
 801d6ee:	4638      	mov	r0, r7
 801d6f0:	f001 f98e 	bl	801ea10 <__mcmp>
 801d6f4:	2800      	cmp	r0, #0
 801d6f6:	db24      	blt.n	801d742 <quorem+0xf2>
 801d6f8:	3601      	adds	r6, #1
 801d6fa:	4628      	mov	r0, r5
 801d6fc:	f04f 0c00 	mov.w	ip, #0
 801d700:	f858 2b04 	ldr.w	r2, [r8], #4
 801d704:	f8d0 e000 	ldr.w	lr, [r0]
 801d708:	b293      	uxth	r3, r2
 801d70a:	ebac 0303 	sub.w	r3, ip, r3
 801d70e:	0c12      	lsrs	r2, r2, #16
 801d710:	fa13 f38e 	uxtah	r3, r3, lr
 801d714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d71c:	b29b      	uxth	r3, r3
 801d71e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d722:	45c1      	cmp	r9, r8
 801d724:	f840 3b04 	str.w	r3, [r0], #4
 801d728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d72c:	d2e8      	bcs.n	801d700 <quorem+0xb0>
 801d72e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d736:	b922      	cbnz	r2, 801d742 <quorem+0xf2>
 801d738:	3b04      	subs	r3, #4
 801d73a:	429d      	cmp	r5, r3
 801d73c:	461a      	mov	r2, r3
 801d73e:	d30a      	bcc.n	801d756 <quorem+0x106>
 801d740:	613c      	str	r4, [r7, #16]
 801d742:	4630      	mov	r0, r6
 801d744:	b003      	add	sp, #12
 801d746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d74a:	6812      	ldr	r2, [r2, #0]
 801d74c:	3b04      	subs	r3, #4
 801d74e:	2a00      	cmp	r2, #0
 801d750:	d1cc      	bne.n	801d6ec <quorem+0x9c>
 801d752:	3c01      	subs	r4, #1
 801d754:	e7c7      	b.n	801d6e6 <quorem+0x96>
 801d756:	6812      	ldr	r2, [r2, #0]
 801d758:	3b04      	subs	r3, #4
 801d75a:	2a00      	cmp	r2, #0
 801d75c:	d1f0      	bne.n	801d740 <quorem+0xf0>
 801d75e:	3c01      	subs	r4, #1
 801d760:	e7eb      	b.n	801d73a <quorem+0xea>
 801d762:	2000      	movs	r0, #0
 801d764:	e7ee      	b.n	801d744 <quorem+0xf4>
	...

0801d768 <_dtoa_r>:
 801d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d76c:	ed2d 8b04 	vpush	{d8-d9}
 801d770:	ec57 6b10 	vmov	r6, r7, d0
 801d774:	b093      	sub	sp, #76	; 0x4c
 801d776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d77c:	9106      	str	r1, [sp, #24]
 801d77e:	ee10 aa10 	vmov	sl, s0
 801d782:	4604      	mov	r4, r0
 801d784:	9209      	str	r2, [sp, #36]	; 0x24
 801d786:	930c      	str	r3, [sp, #48]	; 0x30
 801d788:	46bb      	mov	fp, r7
 801d78a:	b975      	cbnz	r5, 801d7aa <_dtoa_r+0x42>
 801d78c:	2010      	movs	r0, #16
 801d78e:	f7ff f869 	bl	801c864 <malloc>
 801d792:	4602      	mov	r2, r0
 801d794:	6260      	str	r0, [r4, #36]	; 0x24
 801d796:	b920      	cbnz	r0, 801d7a2 <_dtoa_r+0x3a>
 801d798:	4ba7      	ldr	r3, [pc, #668]	; (801da38 <_dtoa_r+0x2d0>)
 801d79a:	21ea      	movs	r1, #234	; 0xea
 801d79c:	48a7      	ldr	r0, [pc, #668]	; (801da3c <_dtoa_r+0x2d4>)
 801d79e:	f001 fa61 	bl	801ec64 <__assert_func>
 801d7a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d7a6:	6005      	str	r5, [r0, #0]
 801d7a8:	60c5      	str	r5, [r0, #12]
 801d7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7ac:	6819      	ldr	r1, [r3, #0]
 801d7ae:	b151      	cbz	r1, 801d7c6 <_dtoa_r+0x5e>
 801d7b0:	685a      	ldr	r2, [r3, #4]
 801d7b2:	604a      	str	r2, [r1, #4]
 801d7b4:	2301      	movs	r3, #1
 801d7b6:	4093      	lsls	r3, r2
 801d7b8:	608b      	str	r3, [r1, #8]
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	f000 fee6 	bl	801e58c <_Bfree>
 801d7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	601a      	str	r2, [r3, #0]
 801d7c6:	1e3b      	subs	r3, r7, #0
 801d7c8:	bfaa      	itet	ge
 801d7ca:	2300      	movge	r3, #0
 801d7cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d7d0:	f8c8 3000 	strge.w	r3, [r8]
 801d7d4:	4b9a      	ldr	r3, [pc, #616]	; (801da40 <_dtoa_r+0x2d8>)
 801d7d6:	bfbc      	itt	lt
 801d7d8:	2201      	movlt	r2, #1
 801d7da:	f8c8 2000 	strlt.w	r2, [r8]
 801d7de:	ea33 030b 	bics.w	r3, r3, fp
 801d7e2:	d11b      	bne.n	801d81c <_dtoa_r+0xb4>
 801d7e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d7e6:	f242 730f 	movw	r3, #9999	; 0x270f
 801d7ea:	6013      	str	r3, [r2, #0]
 801d7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d7f0:	4333      	orrs	r3, r6
 801d7f2:	f000 8592 	beq.w	801e31a <_dtoa_r+0xbb2>
 801d7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d7f8:	b963      	cbnz	r3, 801d814 <_dtoa_r+0xac>
 801d7fa:	4b92      	ldr	r3, [pc, #584]	; (801da44 <_dtoa_r+0x2dc>)
 801d7fc:	e022      	b.n	801d844 <_dtoa_r+0xdc>
 801d7fe:	4b92      	ldr	r3, [pc, #584]	; (801da48 <_dtoa_r+0x2e0>)
 801d800:	9301      	str	r3, [sp, #4]
 801d802:	3308      	adds	r3, #8
 801d804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d806:	6013      	str	r3, [r2, #0]
 801d808:	9801      	ldr	r0, [sp, #4]
 801d80a:	b013      	add	sp, #76	; 0x4c
 801d80c:	ecbd 8b04 	vpop	{d8-d9}
 801d810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d814:	4b8b      	ldr	r3, [pc, #556]	; (801da44 <_dtoa_r+0x2dc>)
 801d816:	9301      	str	r3, [sp, #4]
 801d818:	3303      	adds	r3, #3
 801d81a:	e7f3      	b.n	801d804 <_dtoa_r+0x9c>
 801d81c:	2200      	movs	r2, #0
 801d81e:	2300      	movs	r3, #0
 801d820:	4650      	mov	r0, sl
 801d822:	4659      	mov	r1, fp
 801d824:	f7e3 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 801d828:	ec4b ab19 	vmov	d9, sl, fp
 801d82c:	4680      	mov	r8, r0
 801d82e:	b158      	cbz	r0, 801d848 <_dtoa_r+0xe0>
 801d830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d832:	2301      	movs	r3, #1
 801d834:	6013      	str	r3, [r2, #0]
 801d836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d838:	2b00      	cmp	r3, #0
 801d83a:	f000 856b 	beq.w	801e314 <_dtoa_r+0xbac>
 801d83e:	4883      	ldr	r0, [pc, #524]	; (801da4c <_dtoa_r+0x2e4>)
 801d840:	6018      	str	r0, [r3, #0]
 801d842:	1e43      	subs	r3, r0, #1
 801d844:	9301      	str	r3, [sp, #4]
 801d846:	e7df      	b.n	801d808 <_dtoa_r+0xa0>
 801d848:	ec4b ab10 	vmov	d0, sl, fp
 801d84c:	aa10      	add	r2, sp, #64	; 0x40
 801d84e:	a911      	add	r1, sp, #68	; 0x44
 801d850:	4620      	mov	r0, r4
 801d852:	f001 f983 	bl	801eb5c <__d2b>
 801d856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d85a:	ee08 0a10 	vmov	s16, r0
 801d85e:	2d00      	cmp	r5, #0
 801d860:	f000 8084 	beq.w	801d96c <_dtoa_r+0x204>
 801d864:	ee19 3a90 	vmov	r3, s19
 801d868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d86c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d870:	4656      	mov	r6, sl
 801d872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d87a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d87e:	4b74      	ldr	r3, [pc, #464]	; (801da50 <_dtoa_r+0x2e8>)
 801d880:	2200      	movs	r2, #0
 801d882:	4630      	mov	r0, r6
 801d884:	4639      	mov	r1, r7
 801d886:	f7e2 fcff 	bl	8000288 <__aeabi_dsub>
 801d88a:	a365      	add	r3, pc, #404	; (adr r3, 801da20 <_dtoa_r+0x2b8>)
 801d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d890:	f7e2 feb2 	bl	80005f8 <__aeabi_dmul>
 801d894:	a364      	add	r3, pc, #400	; (adr r3, 801da28 <_dtoa_r+0x2c0>)
 801d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d89a:	f7e2 fcf7 	bl	800028c <__adddf3>
 801d89e:	4606      	mov	r6, r0
 801d8a0:	4628      	mov	r0, r5
 801d8a2:	460f      	mov	r7, r1
 801d8a4:	f7e2 fe3e 	bl	8000524 <__aeabi_i2d>
 801d8a8:	a361      	add	r3, pc, #388	; (adr r3, 801da30 <_dtoa_r+0x2c8>)
 801d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ae:	f7e2 fea3 	bl	80005f8 <__aeabi_dmul>
 801d8b2:	4602      	mov	r2, r0
 801d8b4:	460b      	mov	r3, r1
 801d8b6:	4630      	mov	r0, r6
 801d8b8:	4639      	mov	r1, r7
 801d8ba:	f7e2 fce7 	bl	800028c <__adddf3>
 801d8be:	4606      	mov	r6, r0
 801d8c0:	460f      	mov	r7, r1
 801d8c2:	f7e3 f949 	bl	8000b58 <__aeabi_d2iz>
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	9000      	str	r0, [sp, #0]
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	4630      	mov	r0, r6
 801d8ce:	4639      	mov	r1, r7
 801d8d0:	f7e3 f904 	bl	8000adc <__aeabi_dcmplt>
 801d8d4:	b150      	cbz	r0, 801d8ec <_dtoa_r+0x184>
 801d8d6:	9800      	ldr	r0, [sp, #0]
 801d8d8:	f7e2 fe24 	bl	8000524 <__aeabi_i2d>
 801d8dc:	4632      	mov	r2, r6
 801d8de:	463b      	mov	r3, r7
 801d8e0:	f7e3 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 801d8e4:	b910      	cbnz	r0, 801d8ec <_dtoa_r+0x184>
 801d8e6:	9b00      	ldr	r3, [sp, #0]
 801d8e8:	3b01      	subs	r3, #1
 801d8ea:	9300      	str	r3, [sp, #0]
 801d8ec:	9b00      	ldr	r3, [sp, #0]
 801d8ee:	2b16      	cmp	r3, #22
 801d8f0:	d85a      	bhi.n	801d9a8 <_dtoa_r+0x240>
 801d8f2:	9a00      	ldr	r2, [sp, #0]
 801d8f4:	4b57      	ldr	r3, [pc, #348]	; (801da54 <_dtoa_r+0x2ec>)
 801d8f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8fe:	ec51 0b19 	vmov	r0, r1, d9
 801d902:	f7e3 f8eb 	bl	8000adc <__aeabi_dcmplt>
 801d906:	2800      	cmp	r0, #0
 801d908:	d050      	beq.n	801d9ac <_dtoa_r+0x244>
 801d90a:	9b00      	ldr	r3, [sp, #0]
 801d90c:	3b01      	subs	r3, #1
 801d90e:	9300      	str	r3, [sp, #0]
 801d910:	2300      	movs	r3, #0
 801d912:	930b      	str	r3, [sp, #44]	; 0x2c
 801d914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d916:	1b5d      	subs	r5, r3, r5
 801d918:	1e6b      	subs	r3, r5, #1
 801d91a:	9305      	str	r3, [sp, #20]
 801d91c:	bf45      	ittet	mi
 801d91e:	f1c5 0301 	rsbmi	r3, r5, #1
 801d922:	9304      	strmi	r3, [sp, #16]
 801d924:	2300      	movpl	r3, #0
 801d926:	2300      	movmi	r3, #0
 801d928:	bf4c      	ite	mi
 801d92a:	9305      	strmi	r3, [sp, #20]
 801d92c:	9304      	strpl	r3, [sp, #16]
 801d92e:	9b00      	ldr	r3, [sp, #0]
 801d930:	2b00      	cmp	r3, #0
 801d932:	db3d      	blt.n	801d9b0 <_dtoa_r+0x248>
 801d934:	9b05      	ldr	r3, [sp, #20]
 801d936:	9a00      	ldr	r2, [sp, #0]
 801d938:	920a      	str	r2, [sp, #40]	; 0x28
 801d93a:	4413      	add	r3, r2
 801d93c:	9305      	str	r3, [sp, #20]
 801d93e:	2300      	movs	r3, #0
 801d940:	9307      	str	r3, [sp, #28]
 801d942:	9b06      	ldr	r3, [sp, #24]
 801d944:	2b09      	cmp	r3, #9
 801d946:	f200 8089 	bhi.w	801da5c <_dtoa_r+0x2f4>
 801d94a:	2b05      	cmp	r3, #5
 801d94c:	bfc4      	itt	gt
 801d94e:	3b04      	subgt	r3, #4
 801d950:	9306      	strgt	r3, [sp, #24]
 801d952:	9b06      	ldr	r3, [sp, #24]
 801d954:	f1a3 0302 	sub.w	r3, r3, #2
 801d958:	bfcc      	ite	gt
 801d95a:	2500      	movgt	r5, #0
 801d95c:	2501      	movle	r5, #1
 801d95e:	2b03      	cmp	r3, #3
 801d960:	f200 8087 	bhi.w	801da72 <_dtoa_r+0x30a>
 801d964:	e8df f003 	tbb	[pc, r3]
 801d968:	59383a2d 	.word	0x59383a2d
 801d96c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d970:	441d      	add	r5, r3
 801d972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d976:	2b20      	cmp	r3, #32
 801d978:	bfc1      	itttt	gt
 801d97a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d97e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d982:	fa0b f303 	lslgt.w	r3, fp, r3
 801d986:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d98a:	bfda      	itte	le
 801d98c:	f1c3 0320 	rsble	r3, r3, #32
 801d990:	fa06 f003 	lslle.w	r0, r6, r3
 801d994:	4318      	orrgt	r0, r3
 801d996:	f7e2 fdb5 	bl	8000504 <__aeabi_ui2d>
 801d99a:	2301      	movs	r3, #1
 801d99c:	4606      	mov	r6, r0
 801d99e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d9a2:	3d01      	subs	r5, #1
 801d9a4:	930e      	str	r3, [sp, #56]	; 0x38
 801d9a6:	e76a      	b.n	801d87e <_dtoa_r+0x116>
 801d9a8:	2301      	movs	r3, #1
 801d9aa:	e7b2      	b.n	801d912 <_dtoa_r+0x1aa>
 801d9ac:	900b      	str	r0, [sp, #44]	; 0x2c
 801d9ae:	e7b1      	b.n	801d914 <_dtoa_r+0x1ac>
 801d9b0:	9b04      	ldr	r3, [sp, #16]
 801d9b2:	9a00      	ldr	r2, [sp, #0]
 801d9b4:	1a9b      	subs	r3, r3, r2
 801d9b6:	9304      	str	r3, [sp, #16]
 801d9b8:	4253      	negs	r3, r2
 801d9ba:	9307      	str	r3, [sp, #28]
 801d9bc:	2300      	movs	r3, #0
 801d9be:	930a      	str	r3, [sp, #40]	; 0x28
 801d9c0:	e7bf      	b.n	801d942 <_dtoa_r+0x1da>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	9308      	str	r3, [sp, #32]
 801d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	dc55      	bgt.n	801da78 <_dtoa_r+0x310>
 801d9cc:	2301      	movs	r3, #1
 801d9ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	9209      	str	r2, [sp, #36]	; 0x24
 801d9d6:	e00c      	b.n	801d9f2 <_dtoa_r+0x28a>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	e7f3      	b.n	801d9c4 <_dtoa_r+0x25c>
 801d9dc:	2300      	movs	r3, #0
 801d9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9e0:	9308      	str	r3, [sp, #32]
 801d9e2:	9b00      	ldr	r3, [sp, #0]
 801d9e4:	4413      	add	r3, r2
 801d9e6:	9302      	str	r3, [sp, #8]
 801d9e8:	3301      	adds	r3, #1
 801d9ea:	2b01      	cmp	r3, #1
 801d9ec:	9303      	str	r3, [sp, #12]
 801d9ee:	bfb8      	it	lt
 801d9f0:	2301      	movlt	r3, #1
 801d9f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d9f4:	2200      	movs	r2, #0
 801d9f6:	6042      	str	r2, [r0, #4]
 801d9f8:	2204      	movs	r2, #4
 801d9fa:	f102 0614 	add.w	r6, r2, #20
 801d9fe:	429e      	cmp	r6, r3
 801da00:	6841      	ldr	r1, [r0, #4]
 801da02:	d93d      	bls.n	801da80 <_dtoa_r+0x318>
 801da04:	4620      	mov	r0, r4
 801da06:	f000 fd81 	bl	801e50c <_Balloc>
 801da0a:	9001      	str	r0, [sp, #4]
 801da0c:	2800      	cmp	r0, #0
 801da0e:	d13b      	bne.n	801da88 <_dtoa_r+0x320>
 801da10:	4b11      	ldr	r3, [pc, #68]	; (801da58 <_dtoa_r+0x2f0>)
 801da12:	4602      	mov	r2, r0
 801da14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801da18:	e6c0      	b.n	801d79c <_dtoa_r+0x34>
 801da1a:	2301      	movs	r3, #1
 801da1c:	e7df      	b.n	801d9de <_dtoa_r+0x276>
 801da1e:	bf00      	nop
 801da20:	636f4361 	.word	0x636f4361
 801da24:	3fd287a7 	.word	0x3fd287a7
 801da28:	8b60c8b3 	.word	0x8b60c8b3
 801da2c:	3fc68a28 	.word	0x3fc68a28
 801da30:	509f79fb 	.word	0x509f79fb
 801da34:	3fd34413 	.word	0x3fd34413
 801da38:	0801feed 	.word	0x0801feed
 801da3c:	0801ff04 	.word	0x0801ff04
 801da40:	7ff00000 	.word	0x7ff00000
 801da44:	0801fee9 	.word	0x0801fee9
 801da48:	0801fee0 	.word	0x0801fee0
 801da4c:	0801febd 	.word	0x0801febd
 801da50:	3ff80000 	.word	0x3ff80000
 801da54:	0801fff8 	.word	0x0801fff8
 801da58:	0801ff5f 	.word	0x0801ff5f
 801da5c:	2501      	movs	r5, #1
 801da5e:	2300      	movs	r3, #0
 801da60:	9306      	str	r3, [sp, #24]
 801da62:	9508      	str	r5, [sp, #32]
 801da64:	f04f 33ff 	mov.w	r3, #4294967295
 801da68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801da6c:	2200      	movs	r2, #0
 801da6e:	2312      	movs	r3, #18
 801da70:	e7b0      	b.n	801d9d4 <_dtoa_r+0x26c>
 801da72:	2301      	movs	r3, #1
 801da74:	9308      	str	r3, [sp, #32]
 801da76:	e7f5      	b.n	801da64 <_dtoa_r+0x2fc>
 801da78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801da7e:	e7b8      	b.n	801d9f2 <_dtoa_r+0x28a>
 801da80:	3101      	adds	r1, #1
 801da82:	6041      	str	r1, [r0, #4]
 801da84:	0052      	lsls	r2, r2, #1
 801da86:	e7b8      	b.n	801d9fa <_dtoa_r+0x292>
 801da88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801da8a:	9a01      	ldr	r2, [sp, #4]
 801da8c:	601a      	str	r2, [r3, #0]
 801da8e:	9b03      	ldr	r3, [sp, #12]
 801da90:	2b0e      	cmp	r3, #14
 801da92:	f200 809d 	bhi.w	801dbd0 <_dtoa_r+0x468>
 801da96:	2d00      	cmp	r5, #0
 801da98:	f000 809a 	beq.w	801dbd0 <_dtoa_r+0x468>
 801da9c:	9b00      	ldr	r3, [sp, #0]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	dd32      	ble.n	801db08 <_dtoa_r+0x3a0>
 801daa2:	4ab7      	ldr	r2, [pc, #732]	; (801dd80 <_dtoa_r+0x618>)
 801daa4:	f003 030f 	and.w	r3, r3, #15
 801daa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801daac:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dab0:	9b00      	ldr	r3, [sp, #0]
 801dab2:	05d8      	lsls	r0, r3, #23
 801dab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 801dab8:	d516      	bpl.n	801dae8 <_dtoa_r+0x380>
 801daba:	4bb2      	ldr	r3, [pc, #712]	; (801dd84 <_dtoa_r+0x61c>)
 801dabc:	ec51 0b19 	vmov	r0, r1, d9
 801dac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dac4:	f7e2 fec2 	bl	800084c <__aeabi_ddiv>
 801dac8:	f007 070f 	and.w	r7, r7, #15
 801dacc:	4682      	mov	sl, r0
 801dace:	468b      	mov	fp, r1
 801dad0:	2503      	movs	r5, #3
 801dad2:	4eac      	ldr	r6, [pc, #688]	; (801dd84 <_dtoa_r+0x61c>)
 801dad4:	b957      	cbnz	r7, 801daec <_dtoa_r+0x384>
 801dad6:	4642      	mov	r2, r8
 801dad8:	464b      	mov	r3, r9
 801dada:	4650      	mov	r0, sl
 801dadc:	4659      	mov	r1, fp
 801dade:	f7e2 feb5 	bl	800084c <__aeabi_ddiv>
 801dae2:	4682      	mov	sl, r0
 801dae4:	468b      	mov	fp, r1
 801dae6:	e028      	b.n	801db3a <_dtoa_r+0x3d2>
 801dae8:	2502      	movs	r5, #2
 801daea:	e7f2      	b.n	801dad2 <_dtoa_r+0x36a>
 801daec:	07f9      	lsls	r1, r7, #31
 801daee:	d508      	bpl.n	801db02 <_dtoa_r+0x39a>
 801daf0:	4640      	mov	r0, r8
 801daf2:	4649      	mov	r1, r9
 801daf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801daf8:	f7e2 fd7e 	bl	80005f8 <__aeabi_dmul>
 801dafc:	3501      	adds	r5, #1
 801dafe:	4680      	mov	r8, r0
 801db00:	4689      	mov	r9, r1
 801db02:	107f      	asrs	r7, r7, #1
 801db04:	3608      	adds	r6, #8
 801db06:	e7e5      	b.n	801dad4 <_dtoa_r+0x36c>
 801db08:	f000 809b 	beq.w	801dc42 <_dtoa_r+0x4da>
 801db0c:	9b00      	ldr	r3, [sp, #0]
 801db0e:	4f9d      	ldr	r7, [pc, #628]	; (801dd84 <_dtoa_r+0x61c>)
 801db10:	425e      	negs	r6, r3
 801db12:	4b9b      	ldr	r3, [pc, #620]	; (801dd80 <_dtoa_r+0x618>)
 801db14:	f006 020f 	and.w	r2, r6, #15
 801db18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801db1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db20:	ec51 0b19 	vmov	r0, r1, d9
 801db24:	f7e2 fd68 	bl	80005f8 <__aeabi_dmul>
 801db28:	1136      	asrs	r6, r6, #4
 801db2a:	4682      	mov	sl, r0
 801db2c:	468b      	mov	fp, r1
 801db2e:	2300      	movs	r3, #0
 801db30:	2502      	movs	r5, #2
 801db32:	2e00      	cmp	r6, #0
 801db34:	d17a      	bne.n	801dc2c <_dtoa_r+0x4c4>
 801db36:	2b00      	cmp	r3, #0
 801db38:	d1d3      	bne.n	801dae2 <_dtoa_r+0x37a>
 801db3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	f000 8082 	beq.w	801dc46 <_dtoa_r+0x4de>
 801db42:	4b91      	ldr	r3, [pc, #580]	; (801dd88 <_dtoa_r+0x620>)
 801db44:	2200      	movs	r2, #0
 801db46:	4650      	mov	r0, sl
 801db48:	4659      	mov	r1, fp
 801db4a:	f7e2 ffc7 	bl	8000adc <__aeabi_dcmplt>
 801db4e:	2800      	cmp	r0, #0
 801db50:	d079      	beq.n	801dc46 <_dtoa_r+0x4de>
 801db52:	9b03      	ldr	r3, [sp, #12]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d076      	beq.n	801dc46 <_dtoa_r+0x4de>
 801db58:	9b02      	ldr	r3, [sp, #8]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	dd36      	ble.n	801dbcc <_dtoa_r+0x464>
 801db5e:	9b00      	ldr	r3, [sp, #0]
 801db60:	4650      	mov	r0, sl
 801db62:	4659      	mov	r1, fp
 801db64:	1e5f      	subs	r7, r3, #1
 801db66:	2200      	movs	r2, #0
 801db68:	4b88      	ldr	r3, [pc, #544]	; (801dd8c <_dtoa_r+0x624>)
 801db6a:	f7e2 fd45 	bl	80005f8 <__aeabi_dmul>
 801db6e:	9e02      	ldr	r6, [sp, #8]
 801db70:	4682      	mov	sl, r0
 801db72:	468b      	mov	fp, r1
 801db74:	3501      	adds	r5, #1
 801db76:	4628      	mov	r0, r5
 801db78:	f7e2 fcd4 	bl	8000524 <__aeabi_i2d>
 801db7c:	4652      	mov	r2, sl
 801db7e:	465b      	mov	r3, fp
 801db80:	f7e2 fd3a 	bl	80005f8 <__aeabi_dmul>
 801db84:	4b82      	ldr	r3, [pc, #520]	; (801dd90 <_dtoa_r+0x628>)
 801db86:	2200      	movs	r2, #0
 801db88:	f7e2 fb80 	bl	800028c <__adddf3>
 801db8c:	46d0      	mov	r8, sl
 801db8e:	46d9      	mov	r9, fp
 801db90:	4682      	mov	sl, r0
 801db92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801db96:	2e00      	cmp	r6, #0
 801db98:	d158      	bne.n	801dc4c <_dtoa_r+0x4e4>
 801db9a:	4b7e      	ldr	r3, [pc, #504]	; (801dd94 <_dtoa_r+0x62c>)
 801db9c:	2200      	movs	r2, #0
 801db9e:	4640      	mov	r0, r8
 801dba0:	4649      	mov	r1, r9
 801dba2:	f7e2 fb71 	bl	8000288 <__aeabi_dsub>
 801dba6:	4652      	mov	r2, sl
 801dba8:	465b      	mov	r3, fp
 801dbaa:	4680      	mov	r8, r0
 801dbac:	4689      	mov	r9, r1
 801dbae:	f7e2 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	f040 8295 	bne.w	801e0e2 <_dtoa_r+0x97a>
 801dbb8:	4652      	mov	r2, sl
 801dbba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801dbbe:	4640      	mov	r0, r8
 801dbc0:	4649      	mov	r1, r9
 801dbc2:	f7e2 ff8b 	bl	8000adc <__aeabi_dcmplt>
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	f040 8289 	bne.w	801e0de <_dtoa_r+0x976>
 801dbcc:	ec5b ab19 	vmov	sl, fp, d9
 801dbd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	f2c0 8148 	blt.w	801de68 <_dtoa_r+0x700>
 801dbd8:	9a00      	ldr	r2, [sp, #0]
 801dbda:	2a0e      	cmp	r2, #14
 801dbdc:	f300 8144 	bgt.w	801de68 <_dtoa_r+0x700>
 801dbe0:	4b67      	ldr	r3, [pc, #412]	; (801dd80 <_dtoa_r+0x618>)
 801dbe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dbe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801dbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	f280 80d5 	bge.w	801dd9c <_dtoa_r+0x634>
 801dbf2:	9b03      	ldr	r3, [sp, #12]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	f300 80d1 	bgt.w	801dd9c <_dtoa_r+0x634>
 801dbfa:	f040 826f 	bne.w	801e0dc <_dtoa_r+0x974>
 801dbfe:	4b65      	ldr	r3, [pc, #404]	; (801dd94 <_dtoa_r+0x62c>)
 801dc00:	2200      	movs	r2, #0
 801dc02:	4640      	mov	r0, r8
 801dc04:	4649      	mov	r1, r9
 801dc06:	f7e2 fcf7 	bl	80005f8 <__aeabi_dmul>
 801dc0a:	4652      	mov	r2, sl
 801dc0c:	465b      	mov	r3, fp
 801dc0e:	f7e2 ff79 	bl	8000b04 <__aeabi_dcmpge>
 801dc12:	9e03      	ldr	r6, [sp, #12]
 801dc14:	4637      	mov	r7, r6
 801dc16:	2800      	cmp	r0, #0
 801dc18:	f040 8245 	bne.w	801e0a6 <_dtoa_r+0x93e>
 801dc1c:	9d01      	ldr	r5, [sp, #4]
 801dc1e:	2331      	movs	r3, #49	; 0x31
 801dc20:	f805 3b01 	strb.w	r3, [r5], #1
 801dc24:	9b00      	ldr	r3, [sp, #0]
 801dc26:	3301      	adds	r3, #1
 801dc28:	9300      	str	r3, [sp, #0]
 801dc2a:	e240      	b.n	801e0ae <_dtoa_r+0x946>
 801dc2c:	07f2      	lsls	r2, r6, #31
 801dc2e:	d505      	bpl.n	801dc3c <_dtoa_r+0x4d4>
 801dc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dc34:	f7e2 fce0 	bl	80005f8 <__aeabi_dmul>
 801dc38:	3501      	adds	r5, #1
 801dc3a:	2301      	movs	r3, #1
 801dc3c:	1076      	asrs	r6, r6, #1
 801dc3e:	3708      	adds	r7, #8
 801dc40:	e777      	b.n	801db32 <_dtoa_r+0x3ca>
 801dc42:	2502      	movs	r5, #2
 801dc44:	e779      	b.n	801db3a <_dtoa_r+0x3d2>
 801dc46:	9f00      	ldr	r7, [sp, #0]
 801dc48:	9e03      	ldr	r6, [sp, #12]
 801dc4a:	e794      	b.n	801db76 <_dtoa_r+0x40e>
 801dc4c:	9901      	ldr	r1, [sp, #4]
 801dc4e:	4b4c      	ldr	r3, [pc, #304]	; (801dd80 <_dtoa_r+0x618>)
 801dc50:	4431      	add	r1, r6
 801dc52:	910d      	str	r1, [sp, #52]	; 0x34
 801dc54:	9908      	ldr	r1, [sp, #32]
 801dc56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801dc5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801dc5e:	2900      	cmp	r1, #0
 801dc60:	d043      	beq.n	801dcea <_dtoa_r+0x582>
 801dc62:	494d      	ldr	r1, [pc, #308]	; (801dd98 <_dtoa_r+0x630>)
 801dc64:	2000      	movs	r0, #0
 801dc66:	f7e2 fdf1 	bl	800084c <__aeabi_ddiv>
 801dc6a:	4652      	mov	r2, sl
 801dc6c:	465b      	mov	r3, fp
 801dc6e:	f7e2 fb0b 	bl	8000288 <__aeabi_dsub>
 801dc72:	9d01      	ldr	r5, [sp, #4]
 801dc74:	4682      	mov	sl, r0
 801dc76:	468b      	mov	fp, r1
 801dc78:	4649      	mov	r1, r9
 801dc7a:	4640      	mov	r0, r8
 801dc7c:	f7e2 ff6c 	bl	8000b58 <__aeabi_d2iz>
 801dc80:	4606      	mov	r6, r0
 801dc82:	f7e2 fc4f 	bl	8000524 <__aeabi_i2d>
 801dc86:	4602      	mov	r2, r0
 801dc88:	460b      	mov	r3, r1
 801dc8a:	4640      	mov	r0, r8
 801dc8c:	4649      	mov	r1, r9
 801dc8e:	f7e2 fafb 	bl	8000288 <__aeabi_dsub>
 801dc92:	3630      	adds	r6, #48	; 0x30
 801dc94:	f805 6b01 	strb.w	r6, [r5], #1
 801dc98:	4652      	mov	r2, sl
 801dc9a:	465b      	mov	r3, fp
 801dc9c:	4680      	mov	r8, r0
 801dc9e:	4689      	mov	r9, r1
 801dca0:	f7e2 ff1c 	bl	8000adc <__aeabi_dcmplt>
 801dca4:	2800      	cmp	r0, #0
 801dca6:	d163      	bne.n	801dd70 <_dtoa_r+0x608>
 801dca8:	4642      	mov	r2, r8
 801dcaa:	464b      	mov	r3, r9
 801dcac:	4936      	ldr	r1, [pc, #216]	; (801dd88 <_dtoa_r+0x620>)
 801dcae:	2000      	movs	r0, #0
 801dcb0:	f7e2 faea 	bl	8000288 <__aeabi_dsub>
 801dcb4:	4652      	mov	r2, sl
 801dcb6:	465b      	mov	r3, fp
 801dcb8:	f7e2 ff10 	bl	8000adc <__aeabi_dcmplt>
 801dcbc:	2800      	cmp	r0, #0
 801dcbe:	f040 80b5 	bne.w	801de2c <_dtoa_r+0x6c4>
 801dcc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcc4:	429d      	cmp	r5, r3
 801dcc6:	d081      	beq.n	801dbcc <_dtoa_r+0x464>
 801dcc8:	4b30      	ldr	r3, [pc, #192]	; (801dd8c <_dtoa_r+0x624>)
 801dcca:	2200      	movs	r2, #0
 801dccc:	4650      	mov	r0, sl
 801dcce:	4659      	mov	r1, fp
 801dcd0:	f7e2 fc92 	bl	80005f8 <__aeabi_dmul>
 801dcd4:	4b2d      	ldr	r3, [pc, #180]	; (801dd8c <_dtoa_r+0x624>)
 801dcd6:	4682      	mov	sl, r0
 801dcd8:	468b      	mov	fp, r1
 801dcda:	4640      	mov	r0, r8
 801dcdc:	4649      	mov	r1, r9
 801dcde:	2200      	movs	r2, #0
 801dce0:	f7e2 fc8a 	bl	80005f8 <__aeabi_dmul>
 801dce4:	4680      	mov	r8, r0
 801dce6:	4689      	mov	r9, r1
 801dce8:	e7c6      	b.n	801dc78 <_dtoa_r+0x510>
 801dcea:	4650      	mov	r0, sl
 801dcec:	4659      	mov	r1, fp
 801dcee:	f7e2 fc83 	bl	80005f8 <__aeabi_dmul>
 801dcf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dcf4:	9d01      	ldr	r5, [sp, #4]
 801dcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcf8:	4682      	mov	sl, r0
 801dcfa:	468b      	mov	fp, r1
 801dcfc:	4649      	mov	r1, r9
 801dcfe:	4640      	mov	r0, r8
 801dd00:	f7e2 ff2a 	bl	8000b58 <__aeabi_d2iz>
 801dd04:	4606      	mov	r6, r0
 801dd06:	f7e2 fc0d 	bl	8000524 <__aeabi_i2d>
 801dd0a:	3630      	adds	r6, #48	; 0x30
 801dd0c:	4602      	mov	r2, r0
 801dd0e:	460b      	mov	r3, r1
 801dd10:	4640      	mov	r0, r8
 801dd12:	4649      	mov	r1, r9
 801dd14:	f7e2 fab8 	bl	8000288 <__aeabi_dsub>
 801dd18:	f805 6b01 	strb.w	r6, [r5], #1
 801dd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd1e:	429d      	cmp	r5, r3
 801dd20:	4680      	mov	r8, r0
 801dd22:	4689      	mov	r9, r1
 801dd24:	f04f 0200 	mov.w	r2, #0
 801dd28:	d124      	bne.n	801dd74 <_dtoa_r+0x60c>
 801dd2a:	4b1b      	ldr	r3, [pc, #108]	; (801dd98 <_dtoa_r+0x630>)
 801dd2c:	4650      	mov	r0, sl
 801dd2e:	4659      	mov	r1, fp
 801dd30:	f7e2 faac 	bl	800028c <__adddf3>
 801dd34:	4602      	mov	r2, r0
 801dd36:	460b      	mov	r3, r1
 801dd38:	4640      	mov	r0, r8
 801dd3a:	4649      	mov	r1, r9
 801dd3c:	f7e2 feec 	bl	8000b18 <__aeabi_dcmpgt>
 801dd40:	2800      	cmp	r0, #0
 801dd42:	d173      	bne.n	801de2c <_dtoa_r+0x6c4>
 801dd44:	4652      	mov	r2, sl
 801dd46:	465b      	mov	r3, fp
 801dd48:	4913      	ldr	r1, [pc, #76]	; (801dd98 <_dtoa_r+0x630>)
 801dd4a:	2000      	movs	r0, #0
 801dd4c:	f7e2 fa9c 	bl	8000288 <__aeabi_dsub>
 801dd50:	4602      	mov	r2, r0
 801dd52:	460b      	mov	r3, r1
 801dd54:	4640      	mov	r0, r8
 801dd56:	4649      	mov	r1, r9
 801dd58:	f7e2 fec0 	bl	8000adc <__aeabi_dcmplt>
 801dd5c:	2800      	cmp	r0, #0
 801dd5e:	f43f af35 	beq.w	801dbcc <_dtoa_r+0x464>
 801dd62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dd64:	1e6b      	subs	r3, r5, #1
 801dd66:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801dd6c:	2b30      	cmp	r3, #48	; 0x30
 801dd6e:	d0f8      	beq.n	801dd62 <_dtoa_r+0x5fa>
 801dd70:	9700      	str	r7, [sp, #0]
 801dd72:	e049      	b.n	801de08 <_dtoa_r+0x6a0>
 801dd74:	4b05      	ldr	r3, [pc, #20]	; (801dd8c <_dtoa_r+0x624>)
 801dd76:	f7e2 fc3f 	bl	80005f8 <__aeabi_dmul>
 801dd7a:	4680      	mov	r8, r0
 801dd7c:	4689      	mov	r9, r1
 801dd7e:	e7bd      	b.n	801dcfc <_dtoa_r+0x594>
 801dd80:	0801fff8 	.word	0x0801fff8
 801dd84:	0801ffd0 	.word	0x0801ffd0
 801dd88:	3ff00000 	.word	0x3ff00000
 801dd8c:	40240000 	.word	0x40240000
 801dd90:	401c0000 	.word	0x401c0000
 801dd94:	40140000 	.word	0x40140000
 801dd98:	3fe00000 	.word	0x3fe00000
 801dd9c:	9d01      	ldr	r5, [sp, #4]
 801dd9e:	4656      	mov	r6, sl
 801dda0:	465f      	mov	r7, fp
 801dda2:	4642      	mov	r2, r8
 801dda4:	464b      	mov	r3, r9
 801dda6:	4630      	mov	r0, r6
 801dda8:	4639      	mov	r1, r7
 801ddaa:	f7e2 fd4f 	bl	800084c <__aeabi_ddiv>
 801ddae:	f7e2 fed3 	bl	8000b58 <__aeabi_d2iz>
 801ddb2:	4682      	mov	sl, r0
 801ddb4:	f7e2 fbb6 	bl	8000524 <__aeabi_i2d>
 801ddb8:	4642      	mov	r2, r8
 801ddba:	464b      	mov	r3, r9
 801ddbc:	f7e2 fc1c 	bl	80005f8 <__aeabi_dmul>
 801ddc0:	4602      	mov	r2, r0
 801ddc2:	460b      	mov	r3, r1
 801ddc4:	4630      	mov	r0, r6
 801ddc6:	4639      	mov	r1, r7
 801ddc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801ddcc:	f7e2 fa5c 	bl	8000288 <__aeabi_dsub>
 801ddd0:	f805 6b01 	strb.w	r6, [r5], #1
 801ddd4:	9e01      	ldr	r6, [sp, #4]
 801ddd6:	9f03      	ldr	r7, [sp, #12]
 801ddd8:	1bae      	subs	r6, r5, r6
 801ddda:	42b7      	cmp	r7, r6
 801dddc:	4602      	mov	r2, r0
 801ddde:	460b      	mov	r3, r1
 801dde0:	d135      	bne.n	801de4e <_dtoa_r+0x6e6>
 801dde2:	f7e2 fa53 	bl	800028c <__adddf3>
 801dde6:	4642      	mov	r2, r8
 801dde8:	464b      	mov	r3, r9
 801ddea:	4606      	mov	r6, r0
 801ddec:	460f      	mov	r7, r1
 801ddee:	f7e2 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 801ddf2:	b9d0      	cbnz	r0, 801de2a <_dtoa_r+0x6c2>
 801ddf4:	4642      	mov	r2, r8
 801ddf6:	464b      	mov	r3, r9
 801ddf8:	4630      	mov	r0, r6
 801ddfa:	4639      	mov	r1, r7
 801ddfc:	f7e2 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 801de00:	b110      	cbz	r0, 801de08 <_dtoa_r+0x6a0>
 801de02:	f01a 0f01 	tst.w	sl, #1
 801de06:	d110      	bne.n	801de2a <_dtoa_r+0x6c2>
 801de08:	4620      	mov	r0, r4
 801de0a:	ee18 1a10 	vmov	r1, s16
 801de0e:	f000 fbbd 	bl	801e58c <_Bfree>
 801de12:	2300      	movs	r3, #0
 801de14:	9800      	ldr	r0, [sp, #0]
 801de16:	702b      	strb	r3, [r5, #0]
 801de18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de1a:	3001      	adds	r0, #1
 801de1c:	6018      	str	r0, [r3, #0]
 801de1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de20:	2b00      	cmp	r3, #0
 801de22:	f43f acf1 	beq.w	801d808 <_dtoa_r+0xa0>
 801de26:	601d      	str	r5, [r3, #0]
 801de28:	e4ee      	b.n	801d808 <_dtoa_r+0xa0>
 801de2a:	9f00      	ldr	r7, [sp, #0]
 801de2c:	462b      	mov	r3, r5
 801de2e:	461d      	mov	r5, r3
 801de30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de34:	2a39      	cmp	r2, #57	; 0x39
 801de36:	d106      	bne.n	801de46 <_dtoa_r+0x6de>
 801de38:	9a01      	ldr	r2, [sp, #4]
 801de3a:	429a      	cmp	r2, r3
 801de3c:	d1f7      	bne.n	801de2e <_dtoa_r+0x6c6>
 801de3e:	9901      	ldr	r1, [sp, #4]
 801de40:	2230      	movs	r2, #48	; 0x30
 801de42:	3701      	adds	r7, #1
 801de44:	700a      	strb	r2, [r1, #0]
 801de46:	781a      	ldrb	r2, [r3, #0]
 801de48:	3201      	adds	r2, #1
 801de4a:	701a      	strb	r2, [r3, #0]
 801de4c:	e790      	b.n	801dd70 <_dtoa_r+0x608>
 801de4e:	4ba6      	ldr	r3, [pc, #664]	; (801e0e8 <_dtoa_r+0x980>)
 801de50:	2200      	movs	r2, #0
 801de52:	f7e2 fbd1 	bl	80005f8 <__aeabi_dmul>
 801de56:	2200      	movs	r2, #0
 801de58:	2300      	movs	r3, #0
 801de5a:	4606      	mov	r6, r0
 801de5c:	460f      	mov	r7, r1
 801de5e:	f7e2 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 801de62:	2800      	cmp	r0, #0
 801de64:	d09d      	beq.n	801dda2 <_dtoa_r+0x63a>
 801de66:	e7cf      	b.n	801de08 <_dtoa_r+0x6a0>
 801de68:	9a08      	ldr	r2, [sp, #32]
 801de6a:	2a00      	cmp	r2, #0
 801de6c:	f000 80d7 	beq.w	801e01e <_dtoa_r+0x8b6>
 801de70:	9a06      	ldr	r2, [sp, #24]
 801de72:	2a01      	cmp	r2, #1
 801de74:	f300 80ba 	bgt.w	801dfec <_dtoa_r+0x884>
 801de78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de7a:	2a00      	cmp	r2, #0
 801de7c:	f000 80b2 	beq.w	801dfe4 <_dtoa_r+0x87c>
 801de80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801de84:	9e07      	ldr	r6, [sp, #28]
 801de86:	9d04      	ldr	r5, [sp, #16]
 801de88:	9a04      	ldr	r2, [sp, #16]
 801de8a:	441a      	add	r2, r3
 801de8c:	9204      	str	r2, [sp, #16]
 801de8e:	9a05      	ldr	r2, [sp, #20]
 801de90:	2101      	movs	r1, #1
 801de92:	441a      	add	r2, r3
 801de94:	4620      	mov	r0, r4
 801de96:	9205      	str	r2, [sp, #20]
 801de98:	f000 fc30 	bl	801e6fc <__i2b>
 801de9c:	4607      	mov	r7, r0
 801de9e:	2d00      	cmp	r5, #0
 801dea0:	dd0c      	ble.n	801debc <_dtoa_r+0x754>
 801dea2:	9b05      	ldr	r3, [sp, #20]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	dd09      	ble.n	801debc <_dtoa_r+0x754>
 801dea8:	42ab      	cmp	r3, r5
 801deaa:	9a04      	ldr	r2, [sp, #16]
 801deac:	bfa8      	it	ge
 801deae:	462b      	movge	r3, r5
 801deb0:	1ad2      	subs	r2, r2, r3
 801deb2:	9204      	str	r2, [sp, #16]
 801deb4:	9a05      	ldr	r2, [sp, #20]
 801deb6:	1aed      	subs	r5, r5, r3
 801deb8:	1ad3      	subs	r3, r2, r3
 801deba:	9305      	str	r3, [sp, #20]
 801debc:	9b07      	ldr	r3, [sp, #28]
 801debe:	b31b      	cbz	r3, 801df08 <_dtoa_r+0x7a0>
 801dec0:	9b08      	ldr	r3, [sp, #32]
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	f000 80af 	beq.w	801e026 <_dtoa_r+0x8be>
 801dec8:	2e00      	cmp	r6, #0
 801deca:	dd13      	ble.n	801def4 <_dtoa_r+0x78c>
 801decc:	4639      	mov	r1, r7
 801dece:	4632      	mov	r2, r6
 801ded0:	4620      	mov	r0, r4
 801ded2:	f000 fcd3 	bl	801e87c <__pow5mult>
 801ded6:	ee18 2a10 	vmov	r2, s16
 801deda:	4601      	mov	r1, r0
 801dedc:	4607      	mov	r7, r0
 801dede:	4620      	mov	r0, r4
 801dee0:	f000 fc22 	bl	801e728 <__multiply>
 801dee4:	ee18 1a10 	vmov	r1, s16
 801dee8:	4680      	mov	r8, r0
 801deea:	4620      	mov	r0, r4
 801deec:	f000 fb4e 	bl	801e58c <_Bfree>
 801def0:	ee08 8a10 	vmov	s16, r8
 801def4:	9b07      	ldr	r3, [sp, #28]
 801def6:	1b9a      	subs	r2, r3, r6
 801def8:	d006      	beq.n	801df08 <_dtoa_r+0x7a0>
 801defa:	ee18 1a10 	vmov	r1, s16
 801defe:	4620      	mov	r0, r4
 801df00:	f000 fcbc 	bl	801e87c <__pow5mult>
 801df04:	ee08 0a10 	vmov	s16, r0
 801df08:	2101      	movs	r1, #1
 801df0a:	4620      	mov	r0, r4
 801df0c:	f000 fbf6 	bl	801e6fc <__i2b>
 801df10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df12:	2b00      	cmp	r3, #0
 801df14:	4606      	mov	r6, r0
 801df16:	f340 8088 	ble.w	801e02a <_dtoa_r+0x8c2>
 801df1a:	461a      	mov	r2, r3
 801df1c:	4601      	mov	r1, r0
 801df1e:	4620      	mov	r0, r4
 801df20:	f000 fcac 	bl	801e87c <__pow5mult>
 801df24:	9b06      	ldr	r3, [sp, #24]
 801df26:	2b01      	cmp	r3, #1
 801df28:	4606      	mov	r6, r0
 801df2a:	f340 8081 	ble.w	801e030 <_dtoa_r+0x8c8>
 801df2e:	f04f 0800 	mov.w	r8, #0
 801df32:	6933      	ldr	r3, [r6, #16]
 801df34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801df38:	6918      	ldr	r0, [r3, #16]
 801df3a:	f000 fb8f 	bl	801e65c <__hi0bits>
 801df3e:	f1c0 0020 	rsb	r0, r0, #32
 801df42:	9b05      	ldr	r3, [sp, #20]
 801df44:	4418      	add	r0, r3
 801df46:	f010 001f 	ands.w	r0, r0, #31
 801df4a:	f000 8092 	beq.w	801e072 <_dtoa_r+0x90a>
 801df4e:	f1c0 0320 	rsb	r3, r0, #32
 801df52:	2b04      	cmp	r3, #4
 801df54:	f340 808a 	ble.w	801e06c <_dtoa_r+0x904>
 801df58:	f1c0 001c 	rsb	r0, r0, #28
 801df5c:	9b04      	ldr	r3, [sp, #16]
 801df5e:	4403      	add	r3, r0
 801df60:	9304      	str	r3, [sp, #16]
 801df62:	9b05      	ldr	r3, [sp, #20]
 801df64:	4403      	add	r3, r0
 801df66:	4405      	add	r5, r0
 801df68:	9305      	str	r3, [sp, #20]
 801df6a:	9b04      	ldr	r3, [sp, #16]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	dd07      	ble.n	801df80 <_dtoa_r+0x818>
 801df70:	ee18 1a10 	vmov	r1, s16
 801df74:	461a      	mov	r2, r3
 801df76:	4620      	mov	r0, r4
 801df78:	f000 fcda 	bl	801e930 <__lshift>
 801df7c:	ee08 0a10 	vmov	s16, r0
 801df80:	9b05      	ldr	r3, [sp, #20]
 801df82:	2b00      	cmp	r3, #0
 801df84:	dd05      	ble.n	801df92 <_dtoa_r+0x82a>
 801df86:	4631      	mov	r1, r6
 801df88:	461a      	mov	r2, r3
 801df8a:	4620      	mov	r0, r4
 801df8c:	f000 fcd0 	bl	801e930 <__lshift>
 801df90:	4606      	mov	r6, r0
 801df92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df94:	2b00      	cmp	r3, #0
 801df96:	d06e      	beq.n	801e076 <_dtoa_r+0x90e>
 801df98:	ee18 0a10 	vmov	r0, s16
 801df9c:	4631      	mov	r1, r6
 801df9e:	f000 fd37 	bl	801ea10 <__mcmp>
 801dfa2:	2800      	cmp	r0, #0
 801dfa4:	da67      	bge.n	801e076 <_dtoa_r+0x90e>
 801dfa6:	9b00      	ldr	r3, [sp, #0]
 801dfa8:	3b01      	subs	r3, #1
 801dfaa:	ee18 1a10 	vmov	r1, s16
 801dfae:	9300      	str	r3, [sp, #0]
 801dfb0:	220a      	movs	r2, #10
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	4620      	mov	r0, r4
 801dfb6:	f000 fb0b 	bl	801e5d0 <__multadd>
 801dfba:	9b08      	ldr	r3, [sp, #32]
 801dfbc:	ee08 0a10 	vmov	s16, r0
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	f000 81b1 	beq.w	801e328 <_dtoa_r+0xbc0>
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	4639      	mov	r1, r7
 801dfca:	220a      	movs	r2, #10
 801dfcc:	4620      	mov	r0, r4
 801dfce:	f000 faff 	bl	801e5d0 <__multadd>
 801dfd2:	9b02      	ldr	r3, [sp, #8]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	4607      	mov	r7, r0
 801dfd8:	f300 808e 	bgt.w	801e0f8 <_dtoa_r+0x990>
 801dfdc:	9b06      	ldr	r3, [sp, #24]
 801dfde:	2b02      	cmp	r3, #2
 801dfe0:	dc51      	bgt.n	801e086 <_dtoa_r+0x91e>
 801dfe2:	e089      	b.n	801e0f8 <_dtoa_r+0x990>
 801dfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dfe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801dfea:	e74b      	b.n	801de84 <_dtoa_r+0x71c>
 801dfec:	9b03      	ldr	r3, [sp, #12]
 801dfee:	1e5e      	subs	r6, r3, #1
 801dff0:	9b07      	ldr	r3, [sp, #28]
 801dff2:	42b3      	cmp	r3, r6
 801dff4:	bfbf      	itttt	lt
 801dff6:	9b07      	ldrlt	r3, [sp, #28]
 801dff8:	9607      	strlt	r6, [sp, #28]
 801dffa:	1af2      	sublt	r2, r6, r3
 801dffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801dffe:	bfb6      	itet	lt
 801e000:	189b      	addlt	r3, r3, r2
 801e002:	1b9e      	subge	r6, r3, r6
 801e004:	930a      	strlt	r3, [sp, #40]	; 0x28
 801e006:	9b03      	ldr	r3, [sp, #12]
 801e008:	bfb8      	it	lt
 801e00a:	2600      	movlt	r6, #0
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	bfb7      	itett	lt
 801e010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801e014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801e018:	1a9d      	sublt	r5, r3, r2
 801e01a:	2300      	movlt	r3, #0
 801e01c:	e734      	b.n	801de88 <_dtoa_r+0x720>
 801e01e:	9e07      	ldr	r6, [sp, #28]
 801e020:	9d04      	ldr	r5, [sp, #16]
 801e022:	9f08      	ldr	r7, [sp, #32]
 801e024:	e73b      	b.n	801de9e <_dtoa_r+0x736>
 801e026:	9a07      	ldr	r2, [sp, #28]
 801e028:	e767      	b.n	801defa <_dtoa_r+0x792>
 801e02a:	9b06      	ldr	r3, [sp, #24]
 801e02c:	2b01      	cmp	r3, #1
 801e02e:	dc18      	bgt.n	801e062 <_dtoa_r+0x8fa>
 801e030:	f1ba 0f00 	cmp.w	sl, #0
 801e034:	d115      	bne.n	801e062 <_dtoa_r+0x8fa>
 801e036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e03a:	b993      	cbnz	r3, 801e062 <_dtoa_r+0x8fa>
 801e03c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e040:	0d1b      	lsrs	r3, r3, #20
 801e042:	051b      	lsls	r3, r3, #20
 801e044:	b183      	cbz	r3, 801e068 <_dtoa_r+0x900>
 801e046:	9b04      	ldr	r3, [sp, #16]
 801e048:	3301      	adds	r3, #1
 801e04a:	9304      	str	r3, [sp, #16]
 801e04c:	9b05      	ldr	r3, [sp, #20]
 801e04e:	3301      	adds	r3, #1
 801e050:	9305      	str	r3, [sp, #20]
 801e052:	f04f 0801 	mov.w	r8, #1
 801e056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e058:	2b00      	cmp	r3, #0
 801e05a:	f47f af6a 	bne.w	801df32 <_dtoa_r+0x7ca>
 801e05e:	2001      	movs	r0, #1
 801e060:	e76f      	b.n	801df42 <_dtoa_r+0x7da>
 801e062:	f04f 0800 	mov.w	r8, #0
 801e066:	e7f6      	b.n	801e056 <_dtoa_r+0x8ee>
 801e068:	4698      	mov	r8, r3
 801e06a:	e7f4      	b.n	801e056 <_dtoa_r+0x8ee>
 801e06c:	f43f af7d 	beq.w	801df6a <_dtoa_r+0x802>
 801e070:	4618      	mov	r0, r3
 801e072:	301c      	adds	r0, #28
 801e074:	e772      	b.n	801df5c <_dtoa_r+0x7f4>
 801e076:	9b03      	ldr	r3, [sp, #12]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	dc37      	bgt.n	801e0ec <_dtoa_r+0x984>
 801e07c:	9b06      	ldr	r3, [sp, #24]
 801e07e:	2b02      	cmp	r3, #2
 801e080:	dd34      	ble.n	801e0ec <_dtoa_r+0x984>
 801e082:	9b03      	ldr	r3, [sp, #12]
 801e084:	9302      	str	r3, [sp, #8]
 801e086:	9b02      	ldr	r3, [sp, #8]
 801e088:	b96b      	cbnz	r3, 801e0a6 <_dtoa_r+0x93e>
 801e08a:	4631      	mov	r1, r6
 801e08c:	2205      	movs	r2, #5
 801e08e:	4620      	mov	r0, r4
 801e090:	f000 fa9e 	bl	801e5d0 <__multadd>
 801e094:	4601      	mov	r1, r0
 801e096:	4606      	mov	r6, r0
 801e098:	ee18 0a10 	vmov	r0, s16
 801e09c:	f000 fcb8 	bl	801ea10 <__mcmp>
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	f73f adbb 	bgt.w	801dc1c <_dtoa_r+0x4b4>
 801e0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0a8:	9d01      	ldr	r5, [sp, #4]
 801e0aa:	43db      	mvns	r3, r3
 801e0ac:	9300      	str	r3, [sp, #0]
 801e0ae:	f04f 0800 	mov.w	r8, #0
 801e0b2:	4631      	mov	r1, r6
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	f000 fa69 	bl	801e58c <_Bfree>
 801e0ba:	2f00      	cmp	r7, #0
 801e0bc:	f43f aea4 	beq.w	801de08 <_dtoa_r+0x6a0>
 801e0c0:	f1b8 0f00 	cmp.w	r8, #0
 801e0c4:	d005      	beq.n	801e0d2 <_dtoa_r+0x96a>
 801e0c6:	45b8      	cmp	r8, r7
 801e0c8:	d003      	beq.n	801e0d2 <_dtoa_r+0x96a>
 801e0ca:	4641      	mov	r1, r8
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	f000 fa5d 	bl	801e58c <_Bfree>
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	4620      	mov	r0, r4
 801e0d6:	f000 fa59 	bl	801e58c <_Bfree>
 801e0da:	e695      	b.n	801de08 <_dtoa_r+0x6a0>
 801e0dc:	2600      	movs	r6, #0
 801e0de:	4637      	mov	r7, r6
 801e0e0:	e7e1      	b.n	801e0a6 <_dtoa_r+0x93e>
 801e0e2:	9700      	str	r7, [sp, #0]
 801e0e4:	4637      	mov	r7, r6
 801e0e6:	e599      	b.n	801dc1c <_dtoa_r+0x4b4>
 801e0e8:	40240000 	.word	0x40240000
 801e0ec:	9b08      	ldr	r3, [sp, #32]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	f000 80ca 	beq.w	801e288 <_dtoa_r+0xb20>
 801e0f4:	9b03      	ldr	r3, [sp, #12]
 801e0f6:	9302      	str	r3, [sp, #8]
 801e0f8:	2d00      	cmp	r5, #0
 801e0fa:	dd05      	ble.n	801e108 <_dtoa_r+0x9a0>
 801e0fc:	4639      	mov	r1, r7
 801e0fe:	462a      	mov	r2, r5
 801e100:	4620      	mov	r0, r4
 801e102:	f000 fc15 	bl	801e930 <__lshift>
 801e106:	4607      	mov	r7, r0
 801e108:	f1b8 0f00 	cmp.w	r8, #0
 801e10c:	d05b      	beq.n	801e1c6 <_dtoa_r+0xa5e>
 801e10e:	6879      	ldr	r1, [r7, #4]
 801e110:	4620      	mov	r0, r4
 801e112:	f000 f9fb 	bl	801e50c <_Balloc>
 801e116:	4605      	mov	r5, r0
 801e118:	b928      	cbnz	r0, 801e126 <_dtoa_r+0x9be>
 801e11a:	4b87      	ldr	r3, [pc, #540]	; (801e338 <_dtoa_r+0xbd0>)
 801e11c:	4602      	mov	r2, r0
 801e11e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801e122:	f7ff bb3b 	b.w	801d79c <_dtoa_r+0x34>
 801e126:	693a      	ldr	r2, [r7, #16]
 801e128:	3202      	adds	r2, #2
 801e12a:	0092      	lsls	r2, r2, #2
 801e12c:	f107 010c 	add.w	r1, r7, #12
 801e130:	300c      	adds	r0, #12
 801e132:	f7fe fba7 	bl	801c884 <memcpy>
 801e136:	2201      	movs	r2, #1
 801e138:	4629      	mov	r1, r5
 801e13a:	4620      	mov	r0, r4
 801e13c:	f000 fbf8 	bl	801e930 <__lshift>
 801e140:	9b01      	ldr	r3, [sp, #4]
 801e142:	f103 0901 	add.w	r9, r3, #1
 801e146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e14a:	4413      	add	r3, r2
 801e14c:	9305      	str	r3, [sp, #20]
 801e14e:	f00a 0301 	and.w	r3, sl, #1
 801e152:	46b8      	mov	r8, r7
 801e154:	9304      	str	r3, [sp, #16]
 801e156:	4607      	mov	r7, r0
 801e158:	4631      	mov	r1, r6
 801e15a:	ee18 0a10 	vmov	r0, s16
 801e15e:	f7ff fa77 	bl	801d650 <quorem>
 801e162:	4641      	mov	r1, r8
 801e164:	9002      	str	r0, [sp, #8]
 801e166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e16a:	ee18 0a10 	vmov	r0, s16
 801e16e:	f000 fc4f 	bl	801ea10 <__mcmp>
 801e172:	463a      	mov	r2, r7
 801e174:	9003      	str	r0, [sp, #12]
 801e176:	4631      	mov	r1, r6
 801e178:	4620      	mov	r0, r4
 801e17a:	f000 fc65 	bl	801ea48 <__mdiff>
 801e17e:	68c2      	ldr	r2, [r0, #12]
 801e180:	f109 3bff 	add.w	fp, r9, #4294967295
 801e184:	4605      	mov	r5, r0
 801e186:	bb02      	cbnz	r2, 801e1ca <_dtoa_r+0xa62>
 801e188:	4601      	mov	r1, r0
 801e18a:	ee18 0a10 	vmov	r0, s16
 801e18e:	f000 fc3f 	bl	801ea10 <__mcmp>
 801e192:	4602      	mov	r2, r0
 801e194:	4629      	mov	r1, r5
 801e196:	4620      	mov	r0, r4
 801e198:	9207      	str	r2, [sp, #28]
 801e19a:	f000 f9f7 	bl	801e58c <_Bfree>
 801e19e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e1a2:	ea43 0102 	orr.w	r1, r3, r2
 801e1a6:	9b04      	ldr	r3, [sp, #16]
 801e1a8:	430b      	orrs	r3, r1
 801e1aa:	464d      	mov	r5, r9
 801e1ac:	d10f      	bne.n	801e1ce <_dtoa_r+0xa66>
 801e1ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e1b2:	d02a      	beq.n	801e20a <_dtoa_r+0xaa2>
 801e1b4:	9b03      	ldr	r3, [sp, #12]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	dd02      	ble.n	801e1c0 <_dtoa_r+0xa58>
 801e1ba:	9b02      	ldr	r3, [sp, #8]
 801e1bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801e1c0:	f88b a000 	strb.w	sl, [fp]
 801e1c4:	e775      	b.n	801e0b2 <_dtoa_r+0x94a>
 801e1c6:	4638      	mov	r0, r7
 801e1c8:	e7ba      	b.n	801e140 <_dtoa_r+0x9d8>
 801e1ca:	2201      	movs	r2, #1
 801e1cc:	e7e2      	b.n	801e194 <_dtoa_r+0xa2c>
 801e1ce:	9b03      	ldr	r3, [sp, #12]
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	db04      	blt.n	801e1de <_dtoa_r+0xa76>
 801e1d4:	9906      	ldr	r1, [sp, #24]
 801e1d6:	430b      	orrs	r3, r1
 801e1d8:	9904      	ldr	r1, [sp, #16]
 801e1da:	430b      	orrs	r3, r1
 801e1dc:	d122      	bne.n	801e224 <_dtoa_r+0xabc>
 801e1de:	2a00      	cmp	r2, #0
 801e1e0:	ddee      	ble.n	801e1c0 <_dtoa_r+0xa58>
 801e1e2:	ee18 1a10 	vmov	r1, s16
 801e1e6:	2201      	movs	r2, #1
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	f000 fba1 	bl	801e930 <__lshift>
 801e1ee:	4631      	mov	r1, r6
 801e1f0:	ee08 0a10 	vmov	s16, r0
 801e1f4:	f000 fc0c 	bl	801ea10 <__mcmp>
 801e1f8:	2800      	cmp	r0, #0
 801e1fa:	dc03      	bgt.n	801e204 <_dtoa_r+0xa9c>
 801e1fc:	d1e0      	bne.n	801e1c0 <_dtoa_r+0xa58>
 801e1fe:	f01a 0f01 	tst.w	sl, #1
 801e202:	d0dd      	beq.n	801e1c0 <_dtoa_r+0xa58>
 801e204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e208:	d1d7      	bne.n	801e1ba <_dtoa_r+0xa52>
 801e20a:	2339      	movs	r3, #57	; 0x39
 801e20c:	f88b 3000 	strb.w	r3, [fp]
 801e210:	462b      	mov	r3, r5
 801e212:	461d      	mov	r5, r3
 801e214:	3b01      	subs	r3, #1
 801e216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801e21a:	2a39      	cmp	r2, #57	; 0x39
 801e21c:	d071      	beq.n	801e302 <_dtoa_r+0xb9a>
 801e21e:	3201      	adds	r2, #1
 801e220:	701a      	strb	r2, [r3, #0]
 801e222:	e746      	b.n	801e0b2 <_dtoa_r+0x94a>
 801e224:	2a00      	cmp	r2, #0
 801e226:	dd07      	ble.n	801e238 <_dtoa_r+0xad0>
 801e228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801e22c:	d0ed      	beq.n	801e20a <_dtoa_r+0xaa2>
 801e22e:	f10a 0301 	add.w	r3, sl, #1
 801e232:	f88b 3000 	strb.w	r3, [fp]
 801e236:	e73c      	b.n	801e0b2 <_dtoa_r+0x94a>
 801e238:	9b05      	ldr	r3, [sp, #20]
 801e23a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801e23e:	4599      	cmp	r9, r3
 801e240:	d047      	beq.n	801e2d2 <_dtoa_r+0xb6a>
 801e242:	ee18 1a10 	vmov	r1, s16
 801e246:	2300      	movs	r3, #0
 801e248:	220a      	movs	r2, #10
 801e24a:	4620      	mov	r0, r4
 801e24c:	f000 f9c0 	bl	801e5d0 <__multadd>
 801e250:	45b8      	cmp	r8, r7
 801e252:	ee08 0a10 	vmov	s16, r0
 801e256:	f04f 0300 	mov.w	r3, #0
 801e25a:	f04f 020a 	mov.w	r2, #10
 801e25e:	4641      	mov	r1, r8
 801e260:	4620      	mov	r0, r4
 801e262:	d106      	bne.n	801e272 <_dtoa_r+0xb0a>
 801e264:	f000 f9b4 	bl	801e5d0 <__multadd>
 801e268:	4680      	mov	r8, r0
 801e26a:	4607      	mov	r7, r0
 801e26c:	f109 0901 	add.w	r9, r9, #1
 801e270:	e772      	b.n	801e158 <_dtoa_r+0x9f0>
 801e272:	f000 f9ad 	bl	801e5d0 <__multadd>
 801e276:	4639      	mov	r1, r7
 801e278:	4680      	mov	r8, r0
 801e27a:	2300      	movs	r3, #0
 801e27c:	220a      	movs	r2, #10
 801e27e:	4620      	mov	r0, r4
 801e280:	f000 f9a6 	bl	801e5d0 <__multadd>
 801e284:	4607      	mov	r7, r0
 801e286:	e7f1      	b.n	801e26c <_dtoa_r+0xb04>
 801e288:	9b03      	ldr	r3, [sp, #12]
 801e28a:	9302      	str	r3, [sp, #8]
 801e28c:	9d01      	ldr	r5, [sp, #4]
 801e28e:	ee18 0a10 	vmov	r0, s16
 801e292:	4631      	mov	r1, r6
 801e294:	f7ff f9dc 	bl	801d650 <quorem>
 801e298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801e29c:	9b01      	ldr	r3, [sp, #4]
 801e29e:	f805 ab01 	strb.w	sl, [r5], #1
 801e2a2:	1aea      	subs	r2, r5, r3
 801e2a4:	9b02      	ldr	r3, [sp, #8]
 801e2a6:	4293      	cmp	r3, r2
 801e2a8:	dd09      	ble.n	801e2be <_dtoa_r+0xb56>
 801e2aa:	ee18 1a10 	vmov	r1, s16
 801e2ae:	2300      	movs	r3, #0
 801e2b0:	220a      	movs	r2, #10
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	f000 f98c 	bl	801e5d0 <__multadd>
 801e2b8:	ee08 0a10 	vmov	s16, r0
 801e2bc:	e7e7      	b.n	801e28e <_dtoa_r+0xb26>
 801e2be:	9b02      	ldr	r3, [sp, #8]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	bfc8      	it	gt
 801e2c4:	461d      	movgt	r5, r3
 801e2c6:	9b01      	ldr	r3, [sp, #4]
 801e2c8:	bfd8      	it	le
 801e2ca:	2501      	movle	r5, #1
 801e2cc:	441d      	add	r5, r3
 801e2ce:	f04f 0800 	mov.w	r8, #0
 801e2d2:	ee18 1a10 	vmov	r1, s16
 801e2d6:	2201      	movs	r2, #1
 801e2d8:	4620      	mov	r0, r4
 801e2da:	f000 fb29 	bl	801e930 <__lshift>
 801e2de:	4631      	mov	r1, r6
 801e2e0:	ee08 0a10 	vmov	s16, r0
 801e2e4:	f000 fb94 	bl	801ea10 <__mcmp>
 801e2e8:	2800      	cmp	r0, #0
 801e2ea:	dc91      	bgt.n	801e210 <_dtoa_r+0xaa8>
 801e2ec:	d102      	bne.n	801e2f4 <_dtoa_r+0xb8c>
 801e2ee:	f01a 0f01 	tst.w	sl, #1
 801e2f2:	d18d      	bne.n	801e210 <_dtoa_r+0xaa8>
 801e2f4:	462b      	mov	r3, r5
 801e2f6:	461d      	mov	r5, r3
 801e2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e2fc:	2a30      	cmp	r2, #48	; 0x30
 801e2fe:	d0fa      	beq.n	801e2f6 <_dtoa_r+0xb8e>
 801e300:	e6d7      	b.n	801e0b2 <_dtoa_r+0x94a>
 801e302:	9a01      	ldr	r2, [sp, #4]
 801e304:	429a      	cmp	r2, r3
 801e306:	d184      	bne.n	801e212 <_dtoa_r+0xaaa>
 801e308:	9b00      	ldr	r3, [sp, #0]
 801e30a:	3301      	adds	r3, #1
 801e30c:	9300      	str	r3, [sp, #0]
 801e30e:	2331      	movs	r3, #49	; 0x31
 801e310:	7013      	strb	r3, [r2, #0]
 801e312:	e6ce      	b.n	801e0b2 <_dtoa_r+0x94a>
 801e314:	4b09      	ldr	r3, [pc, #36]	; (801e33c <_dtoa_r+0xbd4>)
 801e316:	f7ff ba95 	b.w	801d844 <_dtoa_r+0xdc>
 801e31a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	f47f aa6e 	bne.w	801d7fe <_dtoa_r+0x96>
 801e322:	4b07      	ldr	r3, [pc, #28]	; (801e340 <_dtoa_r+0xbd8>)
 801e324:	f7ff ba8e 	b.w	801d844 <_dtoa_r+0xdc>
 801e328:	9b02      	ldr	r3, [sp, #8]
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	dcae      	bgt.n	801e28c <_dtoa_r+0xb24>
 801e32e:	9b06      	ldr	r3, [sp, #24]
 801e330:	2b02      	cmp	r3, #2
 801e332:	f73f aea8 	bgt.w	801e086 <_dtoa_r+0x91e>
 801e336:	e7a9      	b.n	801e28c <_dtoa_r+0xb24>
 801e338:	0801ff5f 	.word	0x0801ff5f
 801e33c:	0801febc 	.word	0x0801febc
 801e340:	0801fee0 	.word	0x0801fee0

0801e344 <__sflush_r>:
 801e344:	898a      	ldrh	r2, [r1, #12]
 801e346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e34a:	4605      	mov	r5, r0
 801e34c:	0710      	lsls	r0, r2, #28
 801e34e:	460c      	mov	r4, r1
 801e350:	d458      	bmi.n	801e404 <__sflush_r+0xc0>
 801e352:	684b      	ldr	r3, [r1, #4]
 801e354:	2b00      	cmp	r3, #0
 801e356:	dc05      	bgt.n	801e364 <__sflush_r+0x20>
 801e358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	dc02      	bgt.n	801e364 <__sflush_r+0x20>
 801e35e:	2000      	movs	r0, #0
 801e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e366:	2e00      	cmp	r6, #0
 801e368:	d0f9      	beq.n	801e35e <__sflush_r+0x1a>
 801e36a:	2300      	movs	r3, #0
 801e36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e370:	682f      	ldr	r7, [r5, #0]
 801e372:	602b      	str	r3, [r5, #0]
 801e374:	d032      	beq.n	801e3dc <__sflush_r+0x98>
 801e376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e378:	89a3      	ldrh	r3, [r4, #12]
 801e37a:	075a      	lsls	r2, r3, #29
 801e37c:	d505      	bpl.n	801e38a <__sflush_r+0x46>
 801e37e:	6863      	ldr	r3, [r4, #4]
 801e380:	1ac0      	subs	r0, r0, r3
 801e382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e384:	b10b      	cbz	r3, 801e38a <__sflush_r+0x46>
 801e386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e388:	1ac0      	subs	r0, r0, r3
 801e38a:	2300      	movs	r3, #0
 801e38c:	4602      	mov	r2, r0
 801e38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e390:	6a21      	ldr	r1, [r4, #32]
 801e392:	4628      	mov	r0, r5
 801e394:	47b0      	blx	r6
 801e396:	1c43      	adds	r3, r0, #1
 801e398:	89a3      	ldrh	r3, [r4, #12]
 801e39a:	d106      	bne.n	801e3aa <__sflush_r+0x66>
 801e39c:	6829      	ldr	r1, [r5, #0]
 801e39e:	291d      	cmp	r1, #29
 801e3a0:	d82c      	bhi.n	801e3fc <__sflush_r+0xb8>
 801e3a2:	4a2a      	ldr	r2, [pc, #168]	; (801e44c <__sflush_r+0x108>)
 801e3a4:	40ca      	lsrs	r2, r1
 801e3a6:	07d6      	lsls	r6, r2, #31
 801e3a8:	d528      	bpl.n	801e3fc <__sflush_r+0xb8>
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	6062      	str	r2, [r4, #4]
 801e3ae:	04d9      	lsls	r1, r3, #19
 801e3b0:	6922      	ldr	r2, [r4, #16]
 801e3b2:	6022      	str	r2, [r4, #0]
 801e3b4:	d504      	bpl.n	801e3c0 <__sflush_r+0x7c>
 801e3b6:	1c42      	adds	r2, r0, #1
 801e3b8:	d101      	bne.n	801e3be <__sflush_r+0x7a>
 801e3ba:	682b      	ldr	r3, [r5, #0]
 801e3bc:	b903      	cbnz	r3, 801e3c0 <__sflush_r+0x7c>
 801e3be:	6560      	str	r0, [r4, #84]	; 0x54
 801e3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3c2:	602f      	str	r7, [r5, #0]
 801e3c4:	2900      	cmp	r1, #0
 801e3c6:	d0ca      	beq.n	801e35e <__sflush_r+0x1a>
 801e3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3cc:	4299      	cmp	r1, r3
 801e3ce:	d002      	beq.n	801e3d6 <__sflush_r+0x92>
 801e3d0:	4628      	mov	r0, r5
 801e3d2:	f7fe fa6d 	bl	801c8b0 <_free_r>
 801e3d6:	2000      	movs	r0, #0
 801e3d8:	6360      	str	r0, [r4, #52]	; 0x34
 801e3da:	e7c1      	b.n	801e360 <__sflush_r+0x1c>
 801e3dc:	6a21      	ldr	r1, [r4, #32]
 801e3de:	2301      	movs	r3, #1
 801e3e0:	4628      	mov	r0, r5
 801e3e2:	47b0      	blx	r6
 801e3e4:	1c41      	adds	r1, r0, #1
 801e3e6:	d1c7      	bne.n	801e378 <__sflush_r+0x34>
 801e3e8:	682b      	ldr	r3, [r5, #0]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	d0c4      	beq.n	801e378 <__sflush_r+0x34>
 801e3ee:	2b1d      	cmp	r3, #29
 801e3f0:	d001      	beq.n	801e3f6 <__sflush_r+0xb2>
 801e3f2:	2b16      	cmp	r3, #22
 801e3f4:	d101      	bne.n	801e3fa <__sflush_r+0xb6>
 801e3f6:	602f      	str	r7, [r5, #0]
 801e3f8:	e7b1      	b.n	801e35e <__sflush_r+0x1a>
 801e3fa:	89a3      	ldrh	r3, [r4, #12]
 801e3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e400:	81a3      	strh	r3, [r4, #12]
 801e402:	e7ad      	b.n	801e360 <__sflush_r+0x1c>
 801e404:	690f      	ldr	r7, [r1, #16]
 801e406:	2f00      	cmp	r7, #0
 801e408:	d0a9      	beq.n	801e35e <__sflush_r+0x1a>
 801e40a:	0793      	lsls	r3, r2, #30
 801e40c:	680e      	ldr	r6, [r1, #0]
 801e40e:	bf08      	it	eq
 801e410:	694b      	ldreq	r3, [r1, #20]
 801e412:	600f      	str	r7, [r1, #0]
 801e414:	bf18      	it	ne
 801e416:	2300      	movne	r3, #0
 801e418:	eba6 0807 	sub.w	r8, r6, r7
 801e41c:	608b      	str	r3, [r1, #8]
 801e41e:	f1b8 0f00 	cmp.w	r8, #0
 801e422:	dd9c      	ble.n	801e35e <__sflush_r+0x1a>
 801e424:	6a21      	ldr	r1, [r4, #32]
 801e426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e428:	4643      	mov	r3, r8
 801e42a:	463a      	mov	r2, r7
 801e42c:	4628      	mov	r0, r5
 801e42e:	47b0      	blx	r6
 801e430:	2800      	cmp	r0, #0
 801e432:	dc06      	bgt.n	801e442 <__sflush_r+0xfe>
 801e434:	89a3      	ldrh	r3, [r4, #12]
 801e436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e43a:	81a3      	strh	r3, [r4, #12]
 801e43c:	f04f 30ff 	mov.w	r0, #4294967295
 801e440:	e78e      	b.n	801e360 <__sflush_r+0x1c>
 801e442:	4407      	add	r7, r0
 801e444:	eba8 0800 	sub.w	r8, r8, r0
 801e448:	e7e9      	b.n	801e41e <__sflush_r+0xda>
 801e44a:	bf00      	nop
 801e44c:	20400001 	.word	0x20400001

0801e450 <_fflush_r>:
 801e450:	b538      	push	{r3, r4, r5, lr}
 801e452:	690b      	ldr	r3, [r1, #16]
 801e454:	4605      	mov	r5, r0
 801e456:	460c      	mov	r4, r1
 801e458:	b913      	cbnz	r3, 801e460 <_fflush_r+0x10>
 801e45a:	2500      	movs	r5, #0
 801e45c:	4628      	mov	r0, r5
 801e45e:	bd38      	pop	{r3, r4, r5, pc}
 801e460:	b118      	cbz	r0, 801e46a <_fflush_r+0x1a>
 801e462:	6983      	ldr	r3, [r0, #24]
 801e464:	b90b      	cbnz	r3, 801e46a <_fflush_r+0x1a>
 801e466:	f7fe f937 	bl	801c6d8 <__sinit>
 801e46a:	4b14      	ldr	r3, [pc, #80]	; (801e4bc <_fflush_r+0x6c>)
 801e46c:	429c      	cmp	r4, r3
 801e46e:	d11b      	bne.n	801e4a8 <_fflush_r+0x58>
 801e470:	686c      	ldr	r4, [r5, #4]
 801e472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d0ef      	beq.n	801e45a <_fflush_r+0xa>
 801e47a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e47c:	07d0      	lsls	r0, r2, #31
 801e47e:	d404      	bmi.n	801e48a <_fflush_r+0x3a>
 801e480:	0599      	lsls	r1, r3, #22
 801e482:	d402      	bmi.n	801e48a <_fflush_r+0x3a>
 801e484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e486:	f7fe f9ea 	bl	801c85e <__retarget_lock_acquire_recursive>
 801e48a:	4628      	mov	r0, r5
 801e48c:	4621      	mov	r1, r4
 801e48e:	f7ff ff59 	bl	801e344 <__sflush_r>
 801e492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e494:	07da      	lsls	r2, r3, #31
 801e496:	4605      	mov	r5, r0
 801e498:	d4e0      	bmi.n	801e45c <_fflush_r+0xc>
 801e49a:	89a3      	ldrh	r3, [r4, #12]
 801e49c:	059b      	lsls	r3, r3, #22
 801e49e:	d4dd      	bmi.n	801e45c <_fflush_r+0xc>
 801e4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e4a2:	f7fe f9de 	bl	801c862 <__retarget_lock_release_recursive>
 801e4a6:	e7d9      	b.n	801e45c <_fflush_r+0xc>
 801e4a8:	4b05      	ldr	r3, [pc, #20]	; (801e4c0 <_fflush_r+0x70>)
 801e4aa:	429c      	cmp	r4, r3
 801e4ac:	d101      	bne.n	801e4b2 <_fflush_r+0x62>
 801e4ae:	68ac      	ldr	r4, [r5, #8]
 801e4b0:	e7df      	b.n	801e472 <_fflush_r+0x22>
 801e4b2:	4b04      	ldr	r3, [pc, #16]	; (801e4c4 <_fflush_r+0x74>)
 801e4b4:	429c      	cmp	r4, r3
 801e4b6:	bf08      	it	eq
 801e4b8:	68ec      	ldreq	r4, [r5, #12]
 801e4ba:	e7da      	b.n	801e472 <_fflush_r+0x22>
 801e4bc:	0801fe68 	.word	0x0801fe68
 801e4c0:	0801fe88 	.word	0x0801fe88
 801e4c4:	0801fe48 	.word	0x0801fe48

0801e4c8 <_localeconv_r>:
 801e4c8:	4800      	ldr	r0, [pc, #0]	; (801e4cc <_localeconv_r+0x4>)
 801e4ca:	4770      	bx	lr
 801e4cc:	2000018c 	.word	0x2000018c

0801e4d0 <_lseek_r>:
 801e4d0:	b538      	push	{r3, r4, r5, lr}
 801e4d2:	4d07      	ldr	r5, [pc, #28]	; (801e4f0 <_lseek_r+0x20>)
 801e4d4:	4604      	mov	r4, r0
 801e4d6:	4608      	mov	r0, r1
 801e4d8:	4611      	mov	r1, r2
 801e4da:	2200      	movs	r2, #0
 801e4dc:	602a      	str	r2, [r5, #0]
 801e4de:	461a      	mov	r2, r3
 801e4e0:	f7f1 ffcc 	bl	801047c <_lseek>
 801e4e4:	1c43      	adds	r3, r0, #1
 801e4e6:	d102      	bne.n	801e4ee <_lseek_r+0x1e>
 801e4e8:	682b      	ldr	r3, [r5, #0]
 801e4ea:	b103      	cbz	r3, 801e4ee <_lseek_r+0x1e>
 801e4ec:	6023      	str	r3, [r4, #0]
 801e4ee:	bd38      	pop	{r3, r4, r5, pc}
 801e4f0:	2000a600 	.word	0x2000a600

0801e4f4 <__malloc_lock>:
 801e4f4:	4801      	ldr	r0, [pc, #4]	; (801e4fc <__malloc_lock+0x8>)
 801e4f6:	f7fe b9b2 	b.w	801c85e <__retarget_lock_acquire_recursive>
 801e4fa:	bf00      	nop
 801e4fc:	2000a5f5 	.word	0x2000a5f5

0801e500 <__malloc_unlock>:
 801e500:	4801      	ldr	r0, [pc, #4]	; (801e508 <__malloc_unlock+0x8>)
 801e502:	f7fe b9ae 	b.w	801c862 <__retarget_lock_release_recursive>
 801e506:	bf00      	nop
 801e508:	2000a5f5 	.word	0x2000a5f5

0801e50c <_Balloc>:
 801e50c:	b570      	push	{r4, r5, r6, lr}
 801e50e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e510:	4604      	mov	r4, r0
 801e512:	460d      	mov	r5, r1
 801e514:	b976      	cbnz	r6, 801e534 <_Balloc+0x28>
 801e516:	2010      	movs	r0, #16
 801e518:	f7fe f9a4 	bl	801c864 <malloc>
 801e51c:	4602      	mov	r2, r0
 801e51e:	6260      	str	r0, [r4, #36]	; 0x24
 801e520:	b920      	cbnz	r0, 801e52c <_Balloc+0x20>
 801e522:	4b18      	ldr	r3, [pc, #96]	; (801e584 <_Balloc+0x78>)
 801e524:	4818      	ldr	r0, [pc, #96]	; (801e588 <_Balloc+0x7c>)
 801e526:	2166      	movs	r1, #102	; 0x66
 801e528:	f000 fb9c 	bl	801ec64 <__assert_func>
 801e52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e530:	6006      	str	r6, [r0, #0]
 801e532:	60c6      	str	r6, [r0, #12]
 801e534:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e536:	68f3      	ldr	r3, [r6, #12]
 801e538:	b183      	cbz	r3, 801e55c <_Balloc+0x50>
 801e53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e53c:	68db      	ldr	r3, [r3, #12]
 801e53e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e542:	b9b8      	cbnz	r0, 801e574 <_Balloc+0x68>
 801e544:	2101      	movs	r1, #1
 801e546:	fa01 f605 	lsl.w	r6, r1, r5
 801e54a:	1d72      	adds	r2, r6, #5
 801e54c:	0092      	lsls	r2, r2, #2
 801e54e:	4620      	mov	r0, r4
 801e550:	f000 fb60 	bl	801ec14 <_calloc_r>
 801e554:	b160      	cbz	r0, 801e570 <_Balloc+0x64>
 801e556:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e55a:	e00e      	b.n	801e57a <_Balloc+0x6e>
 801e55c:	2221      	movs	r2, #33	; 0x21
 801e55e:	2104      	movs	r1, #4
 801e560:	4620      	mov	r0, r4
 801e562:	f000 fb57 	bl	801ec14 <_calloc_r>
 801e566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e568:	60f0      	str	r0, [r6, #12]
 801e56a:	68db      	ldr	r3, [r3, #12]
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d1e4      	bne.n	801e53a <_Balloc+0x2e>
 801e570:	2000      	movs	r0, #0
 801e572:	bd70      	pop	{r4, r5, r6, pc}
 801e574:	6802      	ldr	r2, [r0, #0]
 801e576:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e57a:	2300      	movs	r3, #0
 801e57c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e580:	e7f7      	b.n	801e572 <_Balloc+0x66>
 801e582:	bf00      	nop
 801e584:	0801feed 	.word	0x0801feed
 801e588:	0801ff70 	.word	0x0801ff70

0801e58c <_Bfree>:
 801e58c:	b570      	push	{r4, r5, r6, lr}
 801e58e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e590:	4605      	mov	r5, r0
 801e592:	460c      	mov	r4, r1
 801e594:	b976      	cbnz	r6, 801e5b4 <_Bfree+0x28>
 801e596:	2010      	movs	r0, #16
 801e598:	f7fe f964 	bl	801c864 <malloc>
 801e59c:	4602      	mov	r2, r0
 801e59e:	6268      	str	r0, [r5, #36]	; 0x24
 801e5a0:	b920      	cbnz	r0, 801e5ac <_Bfree+0x20>
 801e5a2:	4b09      	ldr	r3, [pc, #36]	; (801e5c8 <_Bfree+0x3c>)
 801e5a4:	4809      	ldr	r0, [pc, #36]	; (801e5cc <_Bfree+0x40>)
 801e5a6:	218a      	movs	r1, #138	; 0x8a
 801e5a8:	f000 fb5c 	bl	801ec64 <__assert_func>
 801e5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e5b0:	6006      	str	r6, [r0, #0]
 801e5b2:	60c6      	str	r6, [r0, #12]
 801e5b4:	b13c      	cbz	r4, 801e5c6 <_Bfree+0x3a>
 801e5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e5b8:	6862      	ldr	r2, [r4, #4]
 801e5ba:	68db      	ldr	r3, [r3, #12]
 801e5bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e5c0:	6021      	str	r1, [r4, #0]
 801e5c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e5c6:	bd70      	pop	{r4, r5, r6, pc}
 801e5c8:	0801feed 	.word	0x0801feed
 801e5cc:	0801ff70 	.word	0x0801ff70

0801e5d0 <__multadd>:
 801e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5d4:	690d      	ldr	r5, [r1, #16]
 801e5d6:	4607      	mov	r7, r0
 801e5d8:	460c      	mov	r4, r1
 801e5da:	461e      	mov	r6, r3
 801e5dc:	f101 0c14 	add.w	ip, r1, #20
 801e5e0:	2000      	movs	r0, #0
 801e5e2:	f8dc 3000 	ldr.w	r3, [ip]
 801e5e6:	b299      	uxth	r1, r3
 801e5e8:	fb02 6101 	mla	r1, r2, r1, r6
 801e5ec:	0c1e      	lsrs	r6, r3, #16
 801e5ee:	0c0b      	lsrs	r3, r1, #16
 801e5f0:	fb02 3306 	mla	r3, r2, r6, r3
 801e5f4:	b289      	uxth	r1, r1
 801e5f6:	3001      	adds	r0, #1
 801e5f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e5fc:	4285      	cmp	r5, r0
 801e5fe:	f84c 1b04 	str.w	r1, [ip], #4
 801e602:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e606:	dcec      	bgt.n	801e5e2 <__multadd+0x12>
 801e608:	b30e      	cbz	r6, 801e64e <__multadd+0x7e>
 801e60a:	68a3      	ldr	r3, [r4, #8]
 801e60c:	42ab      	cmp	r3, r5
 801e60e:	dc19      	bgt.n	801e644 <__multadd+0x74>
 801e610:	6861      	ldr	r1, [r4, #4]
 801e612:	4638      	mov	r0, r7
 801e614:	3101      	adds	r1, #1
 801e616:	f7ff ff79 	bl	801e50c <_Balloc>
 801e61a:	4680      	mov	r8, r0
 801e61c:	b928      	cbnz	r0, 801e62a <__multadd+0x5a>
 801e61e:	4602      	mov	r2, r0
 801e620:	4b0c      	ldr	r3, [pc, #48]	; (801e654 <__multadd+0x84>)
 801e622:	480d      	ldr	r0, [pc, #52]	; (801e658 <__multadd+0x88>)
 801e624:	21b5      	movs	r1, #181	; 0xb5
 801e626:	f000 fb1d 	bl	801ec64 <__assert_func>
 801e62a:	6922      	ldr	r2, [r4, #16]
 801e62c:	3202      	adds	r2, #2
 801e62e:	f104 010c 	add.w	r1, r4, #12
 801e632:	0092      	lsls	r2, r2, #2
 801e634:	300c      	adds	r0, #12
 801e636:	f7fe f925 	bl	801c884 <memcpy>
 801e63a:	4621      	mov	r1, r4
 801e63c:	4638      	mov	r0, r7
 801e63e:	f7ff ffa5 	bl	801e58c <_Bfree>
 801e642:	4644      	mov	r4, r8
 801e644:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e648:	3501      	adds	r5, #1
 801e64a:	615e      	str	r6, [r3, #20]
 801e64c:	6125      	str	r5, [r4, #16]
 801e64e:	4620      	mov	r0, r4
 801e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e654:	0801ff5f 	.word	0x0801ff5f
 801e658:	0801ff70 	.word	0x0801ff70

0801e65c <__hi0bits>:
 801e65c:	0c03      	lsrs	r3, r0, #16
 801e65e:	041b      	lsls	r3, r3, #16
 801e660:	b9d3      	cbnz	r3, 801e698 <__hi0bits+0x3c>
 801e662:	0400      	lsls	r0, r0, #16
 801e664:	2310      	movs	r3, #16
 801e666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e66a:	bf04      	itt	eq
 801e66c:	0200      	lsleq	r0, r0, #8
 801e66e:	3308      	addeq	r3, #8
 801e670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e674:	bf04      	itt	eq
 801e676:	0100      	lsleq	r0, r0, #4
 801e678:	3304      	addeq	r3, #4
 801e67a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e67e:	bf04      	itt	eq
 801e680:	0080      	lsleq	r0, r0, #2
 801e682:	3302      	addeq	r3, #2
 801e684:	2800      	cmp	r0, #0
 801e686:	db05      	blt.n	801e694 <__hi0bits+0x38>
 801e688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e68c:	f103 0301 	add.w	r3, r3, #1
 801e690:	bf08      	it	eq
 801e692:	2320      	moveq	r3, #32
 801e694:	4618      	mov	r0, r3
 801e696:	4770      	bx	lr
 801e698:	2300      	movs	r3, #0
 801e69a:	e7e4      	b.n	801e666 <__hi0bits+0xa>

0801e69c <__lo0bits>:
 801e69c:	6803      	ldr	r3, [r0, #0]
 801e69e:	f013 0207 	ands.w	r2, r3, #7
 801e6a2:	4601      	mov	r1, r0
 801e6a4:	d00b      	beq.n	801e6be <__lo0bits+0x22>
 801e6a6:	07da      	lsls	r2, r3, #31
 801e6a8:	d423      	bmi.n	801e6f2 <__lo0bits+0x56>
 801e6aa:	0798      	lsls	r0, r3, #30
 801e6ac:	bf49      	itett	mi
 801e6ae:	085b      	lsrmi	r3, r3, #1
 801e6b0:	089b      	lsrpl	r3, r3, #2
 801e6b2:	2001      	movmi	r0, #1
 801e6b4:	600b      	strmi	r3, [r1, #0]
 801e6b6:	bf5c      	itt	pl
 801e6b8:	600b      	strpl	r3, [r1, #0]
 801e6ba:	2002      	movpl	r0, #2
 801e6bc:	4770      	bx	lr
 801e6be:	b298      	uxth	r0, r3
 801e6c0:	b9a8      	cbnz	r0, 801e6ee <__lo0bits+0x52>
 801e6c2:	0c1b      	lsrs	r3, r3, #16
 801e6c4:	2010      	movs	r0, #16
 801e6c6:	b2da      	uxtb	r2, r3
 801e6c8:	b90a      	cbnz	r2, 801e6ce <__lo0bits+0x32>
 801e6ca:	3008      	adds	r0, #8
 801e6cc:	0a1b      	lsrs	r3, r3, #8
 801e6ce:	071a      	lsls	r2, r3, #28
 801e6d0:	bf04      	itt	eq
 801e6d2:	091b      	lsreq	r3, r3, #4
 801e6d4:	3004      	addeq	r0, #4
 801e6d6:	079a      	lsls	r2, r3, #30
 801e6d8:	bf04      	itt	eq
 801e6da:	089b      	lsreq	r3, r3, #2
 801e6dc:	3002      	addeq	r0, #2
 801e6de:	07da      	lsls	r2, r3, #31
 801e6e0:	d403      	bmi.n	801e6ea <__lo0bits+0x4e>
 801e6e2:	085b      	lsrs	r3, r3, #1
 801e6e4:	f100 0001 	add.w	r0, r0, #1
 801e6e8:	d005      	beq.n	801e6f6 <__lo0bits+0x5a>
 801e6ea:	600b      	str	r3, [r1, #0]
 801e6ec:	4770      	bx	lr
 801e6ee:	4610      	mov	r0, r2
 801e6f0:	e7e9      	b.n	801e6c6 <__lo0bits+0x2a>
 801e6f2:	2000      	movs	r0, #0
 801e6f4:	4770      	bx	lr
 801e6f6:	2020      	movs	r0, #32
 801e6f8:	4770      	bx	lr
	...

0801e6fc <__i2b>:
 801e6fc:	b510      	push	{r4, lr}
 801e6fe:	460c      	mov	r4, r1
 801e700:	2101      	movs	r1, #1
 801e702:	f7ff ff03 	bl	801e50c <_Balloc>
 801e706:	4602      	mov	r2, r0
 801e708:	b928      	cbnz	r0, 801e716 <__i2b+0x1a>
 801e70a:	4b05      	ldr	r3, [pc, #20]	; (801e720 <__i2b+0x24>)
 801e70c:	4805      	ldr	r0, [pc, #20]	; (801e724 <__i2b+0x28>)
 801e70e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e712:	f000 faa7 	bl	801ec64 <__assert_func>
 801e716:	2301      	movs	r3, #1
 801e718:	6144      	str	r4, [r0, #20]
 801e71a:	6103      	str	r3, [r0, #16]
 801e71c:	bd10      	pop	{r4, pc}
 801e71e:	bf00      	nop
 801e720:	0801ff5f 	.word	0x0801ff5f
 801e724:	0801ff70 	.word	0x0801ff70

0801e728 <__multiply>:
 801e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e72c:	4691      	mov	r9, r2
 801e72e:	690a      	ldr	r2, [r1, #16]
 801e730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e734:	429a      	cmp	r2, r3
 801e736:	bfb8      	it	lt
 801e738:	460b      	movlt	r3, r1
 801e73a:	460c      	mov	r4, r1
 801e73c:	bfbc      	itt	lt
 801e73e:	464c      	movlt	r4, r9
 801e740:	4699      	movlt	r9, r3
 801e742:	6927      	ldr	r7, [r4, #16]
 801e744:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e748:	68a3      	ldr	r3, [r4, #8]
 801e74a:	6861      	ldr	r1, [r4, #4]
 801e74c:	eb07 060a 	add.w	r6, r7, sl
 801e750:	42b3      	cmp	r3, r6
 801e752:	b085      	sub	sp, #20
 801e754:	bfb8      	it	lt
 801e756:	3101      	addlt	r1, #1
 801e758:	f7ff fed8 	bl	801e50c <_Balloc>
 801e75c:	b930      	cbnz	r0, 801e76c <__multiply+0x44>
 801e75e:	4602      	mov	r2, r0
 801e760:	4b44      	ldr	r3, [pc, #272]	; (801e874 <__multiply+0x14c>)
 801e762:	4845      	ldr	r0, [pc, #276]	; (801e878 <__multiply+0x150>)
 801e764:	f240 115d 	movw	r1, #349	; 0x15d
 801e768:	f000 fa7c 	bl	801ec64 <__assert_func>
 801e76c:	f100 0514 	add.w	r5, r0, #20
 801e770:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e774:	462b      	mov	r3, r5
 801e776:	2200      	movs	r2, #0
 801e778:	4543      	cmp	r3, r8
 801e77a:	d321      	bcc.n	801e7c0 <__multiply+0x98>
 801e77c:	f104 0314 	add.w	r3, r4, #20
 801e780:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e784:	f109 0314 	add.w	r3, r9, #20
 801e788:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e78c:	9202      	str	r2, [sp, #8]
 801e78e:	1b3a      	subs	r2, r7, r4
 801e790:	3a15      	subs	r2, #21
 801e792:	f022 0203 	bic.w	r2, r2, #3
 801e796:	3204      	adds	r2, #4
 801e798:	f104 0115 	add.w	r1, r4, #21
 801e79c:	428f      	cmp	r7, r1
 801e79e:	bf38      	it	cc
 801e7a0:	2204      	movcc	r2, #4
 801e7a2:	9201      	str	r2, [sp, #4]
 801e7a4:	9a02      	ldr	r2, [sp, #8]
 801e7a6:	9303      	str	r3, [sp, #12]
 801e7a8:	429a      	cmp	r2, r3
 801e7aa:	d80c      	bhi.n	801e7c6 <__multiply+0x9e>
 801e7ac:	2e00      	cmp	r6, #0
 801e7ae:	dd03      	ble.n	801e7b8 <__multiply+0x90>
 801e7b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d05a      	beq.n	801e86e <__multiply+0x146>
 801e7b8:	6106      	str	r6, [r0, #16]
 801e7ba:	b005      	add	sp, #20
 801e7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7c0:	f843 2b04 	str.w	r2, [r3], #4
 801e7c4:	e7d8      	b.n	801e778 <__multiply+0x50>
 801e7c6:	f8b3 a000 	ldrh.w	sl, [r3]
 801e7ca:	f1ba 0f00 	cmp.w	sl, #0
 801e7ce:	d024      	beq.n	801e81a <__multiply+0xf2>
 801e7d0:	f104 0e14 	add.w	lr, r4, #20
 801e7d4:	46a9      	mov	r9, r5
 801e7d6:	f04f 0c00 	mov.w	ip, #0
 801e7da:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e7de:	f8d9 1000 	ldr.w	r1, [r9]
 801e7e2:	fa1f fb82 	uxth.w	fp, r2
 801e7e6:	b289      	uxth	r1, r1
 801e7e8:	fb0a 110b 	mla	r1, sl, fp, r1
 801e7ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e7f0:	f8d9 2000 	ldr.w	r2, [r9]
 801e7f4:	4461      	add	r1, ip
 801e7f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e7fa:	fb0a c20b 	mla	r2, sl, fp, ip
 801e7fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e802:	b289      	uxth	r1, r1
 801e804:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e808:	4577      	cmp	r7, lr
 801e80a:	f849 1b04 	str.w	r1, [r9], #4
 801e80e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e812:	d8e2      	bhi.n	801e7da <__multiply+0xb2>
 801e814:	9a01      	ldr	r2, [sp, #4]
 801e816:	f845 c002 	str.w	ip, [r5, r2]
 801e81a:	9a03      	ldr	r2, [sp, #12]
 801e81c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e820:	3304      	adds	r3, #4
 801e822:	f1b9 0f00 	cmp.w	r9, #0
 801e826:	d020      	beq.n	801e86a <__multiply+0x142>
 801e828:	6829      	ldr	r1, [r5, #0]
 801e82a:	f104 0c14 	add.w	ip, r4, #20
 801e82e:	46ae      	mov	lr, r5
 801e830:	f04f 0a00 	mov.w	sl, #0
 801e834:	f8bc b000 	ldrh.w	fp, [ip]
 801e838:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e83c:	fb09 220b 	mla	r2, r9, fp, r2
 801e840:	4492      	add	sl, r2
 801e842:	b289      	uxth	r1, r1
 801e844:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e848:	f84e 1b04 	str.w	r1, [lr], #4
 801e84c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e850:	f8be 1000 	ldrh.w	r1, [lr]
 801e854:	0c12      	lsrs	r2, r2, #16
 801e856:	fb09 1102 	mla	r1, r9, r2, r1
 801e85a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e85e:	4567      	cmp	r7, ip
 801e860:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e864:	d8e6      	bhi.n	801e834 <__multiply+0x10c>
 801e866:	9a01      	ldr	r2, [sp, #4]
 801e868:	50a9      	str	r1, [r5, r2]
 801e86a:	3504      	adds	r5, #4
 801e86c:	e79a      	b.n	801e7a4 <__multiply+0x7c>
 801e86e:	3e01      	subs	r6, #1
 801e870:	e79c      	b.n	801e7ac <__multiply+0x84>
 801e872:	bf00      	nop
 801e874:	0801ff5f 	.word	0x0801ff5f
 801e878:	0801ff70 	.word	0x0801ff70

0801e87c <__pow5mult>:
 801e87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e880:	4615      	mov	r5, r2
 801e882:	f012 0203 	ands.w	r2, r2, #3
 801e886:	4606      	mov	r6, r0
 801e888:	460f      	mov	r7, r1
 801e88a:	d007      	beq.n	801e89c <__pow5mult+0x20>
 801e88c:	4c25      	ldr	r4, [pc, #148]	; (801e924 <__pow5mult+0xa8>)
 801e88e:	3a01      	subs	r2, #1
 801e890:	2300      	movs	r3, #0
 801e892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e896:	f7ff fe9b 	bl	801e5d0 <__multadd>
 801e89a:	4607      	mov	r7, r0
 801e89c:	10ad      	asrs	r5, r5, #2
 801e89e:	d03d      	beq.n	801e91c <__pow5mult+0xa0>
 801e8a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e8a2:	b97c      	cbnz	r4, 801e8c4 <__pow5mult+0x48>
 801e8a4:	2010      	movs	r0, #16
 801e8a6:	f7fd ffdd 	bl	801c864 <malloc>
 801e8aa:	4602      	mov	r2, r0
 801e8ac:	6270      	str	r0, [r6, #36]	; 0x24
 801e8ae:	b928      	cbnz	r0, 801e8bc <__pow5mult+0x40>
 801e8b0:	4b1d      	ldr	r3, [pc, #116]	; (801e928 <__pow5mult+0xac>)
 801e8b2:	481e      	ldr	r0, [pc, #120]	; (801e92c <__pow5mult+0xb0>)
 801e8b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e8b8:	f000 f9d4 	bl	801ec64 <__assert_func>
 801e8bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e8c0:	6004      	str	r4, [r0, #0]
 801e8c2:	60c4      	str	r4, [r0, #12]
 801e8c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e8c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e8cc:	b94c      	cbnz	r4, 801e8e2 <__pow5mult+0x66>
 801e8ce:	f240 2171 	movw	r1, #625	; 0x271
 801e8d2:	4630      	mov	r0, r6
 801e8d4:	f7ff ff12 	bl	801e6fc <__i2b>
 801e8d8:	2300      	movs	r3, #0
 801e8da:	f8c8 0008 	str.w	r0, [r8, #8]
 801e8de:	4604      	mov	r4, r0
 801e8e0:	6003      	str	r3, [r0, #0]
 801e8e2:	f04f 0900 	mov.w	r9, #0
 801e8e6:	07eb      	lsls	r3, r5, #31
 801e8e8:	d50a      	bpl.n	801e900 <__pow5mult+0x84>
 801e8ea:	4639      	mov	r1, r7
 801e8ec:	4622      	mov	r2, r4
 801e8ee:	4630      	mov	r0, r6
 801e8f0:	f7ff ff1a 	bl	801e728 <__multiply>
 801e8f4:	4639      	mov	r1, r7
 801e8f6:	4680      	mov	r8, r0
 801e8f8:	4630      	mov	r0, r6
 801e8fa:	f7ff fe47 	bl	801e58c <_Bfree>
 801e8fe:	4647      	mov	r7, r8
 801e900:	106d      	asrs	r5, r5, #1
 801e902:	d00b      	beq.n	801e91c <__pow5mult+0xa0>
 801e904:	6820      	ldr	r0, [r4, #0]
 801e906:	b938      	cbnz	r0, 801e918 <__pow5mult+0x9c>
 801e908:	4622      	mov	r2, r4
 801e90a:	4621      	mov	r1, r4
 801e90c:	4630      	mov	r0, r6
 801e90e:	f7ff ff0b 	bl	801e728 <__multiply>
 801e912:	6020      	str	r0, [r4, #0]
 801e914:	f8c0 9000 	str.w	r9, [r0]
 801e918:	4604      	mov	r4, r0
 801e91a:	e7e4      	b.n	801e8e6 <__pow5mult+0x6a>
 801e91c:	4638      	mov	r0, r7
 801e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e922:	bf00      	nop
 801e924:	080200c0 	.word	0x080200c0
 801e928:	0801feed 	.word	0x0801feed
 801e92c:	0801ff70 	.word	0x0801ff70

0801e930 <__lshift>:
 801e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e934:	460c      	mov	r4, r1
 801e936:	6849      	ldr	r1, [r1, #4]
 801e938:	6923      	ldr	r3, [r4, #16]
 801e93a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e93e:	68a3      	ldr	r3, [r4, #8]
 801e940:	4607      	mov	r7, r0
 801e942:	4691      	mov	r9, r2
 801e944:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e948:	f108 0601 	add.w	r6, r8, #1
 801e94c:	42b3      	cmp	r3, r6
 801e94e:	db0b      	blt.n	801e968 <__lshift+0x38>
 801e950:	4638      	mov	r0, r7
 801e952:	f7ff fddb 	bl	801e50c <_Balloc>
 801e956:	4605      	mov	r5, r0
 801e958:	b948      	cbnz	r0, 801e96e <__lshift+0x3e>
 801e95a:	4602      	mov	r2, r0
 801e95c:	4b2a      	ldr	r3, [pc, #168]	; (801ea08 <__lshift+0xd8>)
 801e95e:	482b      	ldr	r0, [pc, #172]	; (801ea0c <__lshift+0xdc>)
 801e960:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e964:	f000 f97e 	bl	801ec64 <__assert_func>
 801e968:	3101      	adds	r1, #1
 801e96a:	005b      	lsls	r3, r3, #1
 801e96c:	e7ee      	b.n	801e94c <__lshift+0x1c>
 801e96e:	2300      	movs	r3, #0
 801e970:	f100 0114 	add.w	r1, r0, #20
 801e974:	f100 0210 	add.w	r2, r0, #16
 801e978:	4618      	mov	r0, r3
 801e97a:	4553      	cmp	r3, sl
 801e97c:	db37      	blt.n	801e9ee <__lshift+0xbe>
 801e97e:	6920      	ldr	r0, [r4, #16]
 801e980:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e984:	f104 0314 	add.w	r3, r4, #20
 801e988:	f019 091f 	ands.w	r9, r9, #31
 801e98c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e990:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e994:	d02f      	beq.n	801e9f6 <__lshift+0xc6>
 801e996:	f1c9 0e20 	rsb	lr, r9, #32
 801e99a:	468a      	mov	sl, r1
 801e99c:	f04f 0c00 	mov.w	ip, #0
 801e9a0:	681a      	ldr	r2, [r3, #0]
 801e9a2:	fa02 f209 	lsl.w	r2, r2, r9
 801e9a6:	ea42 020c 	orr.w	r2, r2, ip
 801e9aa:	f84a 2b04 	str.w	r2, [sl], #4
 801e9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9b2:	4298      	cmp	r0, r3
 801e9b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e9b8:	d8f2      	bhi.n	801e9a0 <__lshift+0x70>
 801e9ba:	1b03      	subs	r3, r0, r4
 801e9bc:	3b15      	subs	r3, #21
 801e9be:	f023 0303 	bic.w	r3, r3, #3
 801e9c2:	3304      	adds	r3, #4
 801e9c4:	f104 0215 	add.w	r2, r4, #21
 801e9c8:	4290      	cmp	r0, r2
 801e9ca:	bf38      	it	cc
 801e9cc:	2304      	movcc	r3, #4
 801e9ce:	f841 c003 	str.w	ip, [r1, r3]
 801e9d2:	f1bc 0f00 	cmp.w	ip, #0
 801e9d6:	d001      	beq.n	801e9dc <__lshift+0xac>
 801e9d8:	f108 0602 	add.w	r6, r8, #2
 801e9dc:	3e01      	subs	r6, #1
 801e9de:	4638      	mov	r0, r7
 801e9e0:	612e      	str	r6, [r5, #16]
 801e9e2:	4621      	mov	r1, r4
 801e9e4:	f7ff fdd2 	bl	801e58c <_Bfree>
 801e9e8:	4628      	mov	r0, r5
 801e9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 801e9f2:	3301      	adds	r3, #1
 801e9f4:	e7c1      	b.n	801e97a <__lshift+0x4a>
 801e9f6:	3904      	subs	r1, #4
 801e9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9fc:	f841 2f04 	str.w	r2, [r1, #4]!
 801ea00:	4298      	cmp	r0, r3
 801ea02:	d8f9      	bhi.n	801e9f8 <__lshift+0xc8>
 801ea04:	e7ea      	b.n	801e9dc <__lshift+0xac>
 801ea06:	bf00      	nop
 801ea08:	0801ff5f 	.word	0x0801ff5f
 801ea0c:	0801ff70 	.word	0x0801ff70

0801ea10 <__mcmp>:
 801ea10:	b530      	push	{r4, r5, lr}
 801ea12:	6902      	ldr	r2, [r0, #16]
 801ea14:	690c      	ldr	r4, [r1, #16]
 801ea16:	1b12      	subs	r2, r2, r4
 801ea18:	d10e      	bne.n	801ea38 <__mcmp+0x28>
 801ea1a:	f100 0314 	add.w	r3, r0, #20
 801ea1e:	3114      	adds	r1, #20
 801ea20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ea24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ea28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ea2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ea30:	42a5      	cmp	r5, r4
 801ea32:	d003      	beq.n	801ea3c <__mcmp+0x2c>
 801ea34:	d305      	bcc.n	801ea42 <__mcmp+0x32>
 801ea36:	2201      	movs	r2, #1
 801ea38:	4610      	mov	r0, r2
 801ea3a:	bd30      	pop	{r4, r5, pc}
 801ea3c:	4283      	cmp	r3, r0
 801ea3e:	d3f3      	bcc.n	801ea28 <__mcmp+0x18>
 801ea40:	e7fa      	b.n	801ea38 <__mcmp+0x28>
 801ea42:	f04f 32ff 	mov.w	r2, #4294967295
 801ea46:	e7f7      	b.n	801ea38 <__mcmp+0x28>

0801ea48 <__mdiff>:
 801ea48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea4c:	460c      	mov	r4, r1
 801ea4e:	4606      	mov	r6, r0
 801ea50:	4611      	mov	r1, r2
 801ea52:	4620      	mov	r0, r4
 801ea54:	4690      	mov	r8, r2
 801ea56:	f7ff ffdb 	bl	801ea10 <__mcmp>
 801ea5a:	1e05      	subs	r5, r0, #0
 801ea5c:	d110      	bne.n	801ea80 <__mdiff+0x38>
 801ea5e:	4629      	mov	r1, r5
 801ea60:	4630      	mov	r0, r6
 801ea62:	f7ff fd53 	bl	801e50c <_Balloc>
 801ea66:	b930      	cbnz	r0, 801ea76 <__mdiff+0x2e>
 801ea68:	4b3a      	ldr	r3, [pc, #232]	; (801eb54 <__mdiff+0x10c>)
 801ea6a:	4602      	mov	r2, r0
 801ea6c:	f240 2132 	movw	r1, #562	; 0x232
 801ea70:	4839      	ldr	r0, [pc, #228]	; (801eb58 <__mdiff+0x110>)
 801ea72:	f000 f8f7 	bl	801ec64 <__assert_func>
 801ea76:	2301      	movs	r3, #1
 801ea78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ea7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea80:	bfa4      	itt	ge
 801ea82:	4643      	movge	r3, r8
 801ea84:	46a0      	movge	r8, r4
 801ea86:	4630      	mov	r0, r6
 801ea88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ea8c:	bfa6      	itte	ge
 801ea8e:	461c      	movge	r4, r3
 801ea90:	2500      	movge	r5, #0
 801ea92:	2501      	movlt	r5, #1
 801ea94:	f7ff fd3a 	bl	801e50c <_Balloc>
 801ea98:	b920      	cbnz	r0, 801eaa4 <__mdiff+0x5c>
 801ea9a:	4b2e      	ldr	r3, [pc, #184]	; (801eb54 <__mdiff+0x10c>)
 801ea9c:	4602      	mov	r2, r0
 801ea9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801eaa2:	e7e5      	b.n	801ea70 <__mdiff+0x28>
 801eaa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801eaa8:	6926      	ldr	r6, [r4, #16]
 801eaaa:	60c5      	str	r5, [r0, #12]
 801eaac:	f104 0914 	add.w	r9, r4, #20
 801eab0:	f108 0514 	add.w	r5, r8, #20
 801eab4:	f100 0e14 	add.w	lr, r0, #20
 801eab8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801eabc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801eac0:	f108 0210 	add.w	r2, r8, #16
 801eac4:	46f2      	mov	sl, lr
 801eac6:	2100      	movs	r1, #0
 801eac8:	f859 3b04 	ldr.w	r3, [r9], #4
 801eacc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ead0:	fa1f f883 	uxth.w	r8, r3
 801ead4:	fa11 f18b 	uxtah	r1, r1, fp
 801ead8:	0c1b      	lsrs	r3, r3, #16
 801eada:	eba1 0808 	sub.w	r8, r1, r8
 801eade:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801eae2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801eae6:	fa1f f888 	uxth.w	r8, r8
 801eaea:	1419      	asrs	r1, r3, #16
 801eaec:	454e      	cmp	r6, r9
 801eaee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801eaf2:	f84a 3b04 	str.w	r3, [sl], #4
 801eaf6:	d8e7      	bhi.n	801eac8 <__mdiff+0x80>
 801eaf8:	1b33      	subs	r3, r6, r4
 801eafa:	3b15      	subs	r3, #21
 801eafc:	f023 0303 	bic.w	r3, r3, #3
 801eb00:	3304      	adds	r3, #4
 801eb02:	3415      	adds	r4, #21
 801eb04:	42a6      	cmp	r6, r4
 801eb06:	bf38      	it	cc
 801eb08:	2304      	movcc	r3, #4
 801eb0a:	441d      	add	r5, r3
 801eb0c:	4473      	add	r3, lr
 801eb0e:	469e      	mov	lr, r3
 801eb10:	462e      	mov	r6, r5
 801eb12:	4566      	cmp	r6, ip
 801eb14:	d30e      	bcc.n	801eb34 <__mdiff+0xec>
 801eb16:	f10c 0203 	add.w	r2, ip, #3
 801eb1a:	1b52      	subs	r2, r2, r5
 801eb1c:	f022 0203 	bic.w	r2, r2, #3
 801eb20:	3d03      	subs	r5, #3
 801eb22:	45ac      	cmp	ip, r5
 801eb24:	bf38      	it	cc
 801eb26:	2200      	movcc	r2, #0
 801eb28:	441a      	add	r2, r3
 801eb2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801eb2e:	b17b      	cbz	r3, 801eb50 <__mdiff+0x108>
 801eb30:	6107      	str	r7, [r0, #16]
 801eb32:	e7a3      	b.n	801ea7c <__mdiff+0x34>
 801eb34:	f856 8b04 	ldr.w	r8, [r6], #4
 801eb38:	fa11 f288 	uxtah	r2, r1, r8
 801eb3c:	1414      	asrs	r4, r2, #16
 801eb3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801eb42:	b292      	uxth	r2, r2
 801eb44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801eb48:	f84e 2b04 	str.w	r2, [lr], #4
 801eb4c:	1421      	asrs	r1, r4, #16
 801eb4e:	e7e0      	b.n	801eb12 <__mdiff+0xca>
 801eb50:	3f01      	subs	r7, #1
 801eb52:	e7ea      	b.n	801eb2a <__mdiff+0xe2>
 801eb54:	0801ff5f 	.word	0x0801ff5f
 801eb58:	0801ff70 	.word	0x0801ff70

0801eb5c <__d2b>:
 801eb5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801eb60:	4689      	mov	r9, r1
 801eb62:	2101      	movs	r1, #1
 801eb64:	ec57 6b10 	vmov	r6, r7, d0
 801eb68:	4690      	mov	r8, r2
 801eb6a:	f7ff fccf 	bl	801e50c <_Balloc>
 801eb6e:	4604      	mov	r4, r0
 801eb70:	b930      	cbnz	r0, 801eb80 <__d2b+0x24>
 801eb72:	4602      	mov	r2, r0
 801eb74:	4b25      	ldr	r3, [pc, #148]	; (801ec0c <__d2b+0xb0>)
 801eb76:	4826      	ldr	r0, [pc, #152]	; (801ec10 <__d2b+0xb4>)
 801eb78:	f240 310a 	movw	r1, #778	; 0x30a
 801eb7c:	f000 f872 	bl	801ec64 <__assert_func>
 801eb80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801eb84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801eb88:	bb35      	cbnz	r5, 801ebd8 <__d2b+0x7c>
 801eb8a:	2e00      	cmp	r6, #0
 801eb8c:	9301      	str	r3, [sp, #4]
 801eb8e:	d028      	beq.n	801ebe2 <__d2b+0x86>
 801eb90:	4668      	mov	r0, sp
 801eb92:	9600      	str	r6, [sp, #0]
 801eb94:	f7ff fd82 	bl	801e69c <__lo0bits>
 801eb98:	9900      	ldr	r1, [sp, #0]
 801eb9a:	b300      	cbz	r0, 801ebde <__d2b+0x82>
 801eb9c:	9a01      	ldr	r2, [sp, #4]
 801eb9e:	f1c0 0320 	rsb	r3, r0, #32
 801eba2:	fa02 f303 	lsl.w	r3, r2, r3
 801eba6:	430b      	orrs	r3, r1
 801eba8:	40c2      	lsrs	r2, r0
 801ebaa:	6163      	str	r3, [r4, #20]
 801ebac:	9201      	str	r2, [sp, #4]
 801ebae:	9b01      	ldr	r3, [sp, #4]
 801ebb0:	61a3      	str	r3, [r4, #24]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	bf14      	ite	ne
 801ebb6:	2202      	movne	r2, #2
 801ebb8:	2201      	moveq	r2, #1
 801ebba:	6122      	str	r2, [r4, #16]
 801ebbc:	b1d5      	cbz	r5, 801ebf4 <__d2b+0x98>
 801ebbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ebc2:	4405      	add	r5, r0
 801ebc4:	f8c9 5000 	str.w	r5, [r9]
 801ebc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ebcc:	f8c8 0000 	str.w	r0, [r8]
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	b003      	add	sp, #12
 801ebd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ebd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ebdc:	e7d5      	b.n	801eb8a <__d2b+0x2e>
 801ebde:	6161      	str	r1, [r4, #20]
 801ebe0:	e7e5      	b.n	801ebae <__d2b+0x52>
 801ebe2:	a801      	add	r0, sp, #4
 801ebe4:	f7ff fd5a 	bl	801e69c <__lo0bits>
 801ebe8:	9b01      	ldr	r3, [sp, #4]
 801ebea:	6163      	str	r3, [r4, #20]
 801ebec:	2201      	movs	r2, #1
 801ebee:	6122      	str	r2, [r4, #16]
 801ebf0:	3020      	adds	r0, #32
 801ebf2:	e7e3      	b.n	801ebbc <__d2b+0x60>
 801ebf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ebf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ebfc:	f8c9 0000 	str.w	r0, [r9]
 801ec00:	6918      	ldr	r0, [r3, #16]
 801ec02:	f7ff fd2b 	bl	801e65c <__hi0bits>
 801ec06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ec0a:	e7df      	b.n	801ebcc <__d2b+0x70>
 801ec0c:	0801ff5f 	.word	0x0801ff5f
 801ec10:	0801ff70 	.word	0x0801ff70

0801ec14 <_calloc_r>:
 801ec14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ec16:	fba1 2402 	umull	r2, r4, r1, r2
 801ec1a:	b94c      	cbnz	r4, 801ec30 <_calloc_r+0x1c>
 801ec1c:	4611      	mov	r1, r2
 801ec1e:	9201      	str	r2, [sp, #4]
 801ec20:	f7fd feb2 	bl	801c988 <_malloc_r>
 801ec24:	9a01      	ldr	r2, [sp, #4]
 801ec26:	4605      	mov	r5, r0
 801ec28:	b930      	cbnz	r0, 801ec38 <_calloc_r+0x24>
 801ec2a:	4628      	mov	r0, r5
 801ec2c:	b003      	add	sp, #12
 801ec2e:	bd30      	pop	{r4, r5, pc}
 801ec30:	220c      	movs	r2, #12
 801ec32:	6002      	str	r2, [r0, #0]
 801ec34:	2500      	movs	r5, #0
 801ec36:	e7f8      	b.n	801ec2a <_calloc_r+0x16>
 801ec38:	4621      	mov	r1, r4
 801ec3a:	f7fd fe31 	bl	801c8a0 <memset>
 801ec3e:	e7f4      	b.n	801ec2a <_calloc_r+0x16>

0801ec40 <_read_r>:
 801ec40:	b538      	push	{r3, r4, r5, lr}
 801ec42:	4d07      	ldr	r5, [pc, #28]	; (801ec60 <_read_r+0x20>)
 801ec44:	4604      	mov	r4, r0
 801ec46:	4608      	mov	r0, r1
 801ec48:	4611      	mov	r1, r2
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	602a      	str	r2, [r5, #0]
 801ec4e:	461a      	mov	r2, r3
 801ec50:	f7f1 fbb4 	bl	80103bc <_read>
 801ec54:	1c43      	adds	r3, r0, #1
 801ec56:	d102      	bne.n	801ec5e <_read_r+0x1e>
 801ec58:	682b      	ldr	r3, [r5, #0]
 801ec5a:	b103      	cbz	r3, 801ec5e <_read_r+0x1e>
 801ec5c:	6023      	str	r3, [r4, #0]
 801ec5e:	bd38      	pop	{r3, r4, r5, pc}
 801ec60:	2000a600 	.word	0x2000a600

0801ec64 <__assert_func>:
 801ec64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ec66:	4614      	mov	r4, r2
 801ec68:	461a      	mov	r2, r3
 801ec6a:	4b09      	ldr	r3, [pc, #36]	; (801ec90 <__assert_func+0x2c>)
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	4605      	mov	r5, r0
 801ec70:	68d8      	ldr	r0, [r3, #12]
 801ec72:	b14c      	cbz	r4, 801ec88 <__assert_func+0x24>
 801ec74:	4b07      	ldr	r3, [pc, #28]	; (801ec94 <__assert_func+0x30>)
 801ec76:	9100      	str	r1, [sp, #0]
 801ec78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ec7c:	4906      	ldr	r1, [pc, #24]	; (801ec98 <__assert_func+0x34>)
 801ec7e:	462b      	mov	r3, r5
 801ec80:	f000 f80e 	bl	801eca0 <fiprintf>
 801ec84:	f7fd fcbc 	bl	801c600 <abort>
 801ec88:	4b04      	ldr	r3, [pc, #16]	; (801ec9c <__assert_func+0x38>)
 801ec8a:	461c      	mov	r4, r3
 801ec8c:	e7f3      	b.n	801ec76 <__assert_func+0x12>
 801ec8e:	bf00      	nop
 801ec90:	20000034 	.word	0x20000034
 801ec94:	080200cc 	.word	0x080200cc
 801ec98:	080200d9 	.word	0x080200d9
 801ec9c:	08020107 	.word	0x08020107

0801eca0 <fiprintf>:
 801eca0:	b40e      	push	{r1, r2, r3}
 801eca2:	b503      	push	{r0, r1, lr}
 801eca4:	4601      	mov	r1, r0
 801eca6:	ab03      	add	r3, sp, #12
 801eca8:	4805      	ldr	r0, [pc, #20]	; (801ecc0 <fiprintf+0x20>)
 801ecaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecae:	6800      	ldr	r0, [r0, #0]
 801ecb0:	9301      	str	r3, [sp, #4]
 801ecb2:	f000 f843 	bl	801ed3c <_vfiprintf_r>
 801ecb6:	b002      	add	sp, #8
 801ecb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecbc:	b003      	add	sp, #12
 801ecbe:	4770      	bx	lr
 801ecc0:	20000034 	.word	0x20000034

0801ecc4 <__ascii_mbtowc>:
 801ecc4:	b082      	sub	sp, #8
 801ecc6:	b901      	cbnz	r1, 801ecca <__ascii_mbtowc+0x6>
 801ecc8:	a901      	add	r1, sp, #4
 801ecca:	b142      	cbz	r2, 801ecde <__ascii_mbtowc+0x1a>
 801eccc:	b14b      	cbz	r3, 801ece2 <__ascii_mbtowc+0x1e>
 801ecce:	7813      	ldrb	r3, [r2, #0]
 801ecd0:	600b      	str	r3, [r1, #0]
 801ecd2:	7812      	ldrb	r2, [r2, #0]
 801ecd4:	1e10      	subs	r0, r2, #0
 801ecd6:	bf18      	it	ne
 801ecd8:	2001      	movne	r0, #1
 801ecda:	b002      	add	sp, #8
 801ecdc:	4770      	bx	lr
 801ecde:	4610      	mov	r0, r2
 801ece0:	e7fb      	b.n	801ecda <__ascii_mbtowc+0x16>
 801ece2:	f06f 0001 	mvn.w	r0, #1
 801ece6:	e7f8      	b.n	801ecda <__ascii_mbtowc+0x16>

0801ece8 <__sfputc_r>:
 801ece8:	6893      	ldr	r3, [r2, #8]
 801ecea:	3b01      	subs	r3, #1
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	b410      	push	{r4}
 801ecf0:	6093      	str	r3, [r2, #8]
 801ecf2:	da08      	bge.n	801ed06 <__sfputc_r+0x1e>
 801ecf4:	6994      	ldr	r4, [r2, #24]
 801ecf6:	42a3      	cmp	r3, r4
 801ecf8:	db01      	blt.n	801ecfe <__sfputc_r+0x16>
 801ecfa:	290a      	cmp	r1, #10
 801ecfc:	d103      	bne.n	801ed06 <__sfputc_r+0x1e>
 801ecfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed02:	f000 b94b 	b.w	801ef9c <__swbuf_r>
 801ed06:	6813      	ldr	r3, [r2, #0]
 801ed08:	1c58      	adds	r0, r3, #1
 801ed0a:	6010      	str	r0, [r2, #0]
 801ed0c:	7019      	strb	r1, [r3, #0]
 801ed0e:	4608      	mov	r0, r1
 801ed10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ed14:	4770      	bx	lr

0801ed16 <__sfputs_r>:
 801ed16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed18:	4606      	mov	r6, r0
 801ed1a:	460f      	mov	r7, r1
 801ed1c:	4614      	mov	r4, r2
 801ed1e:	18d5      	adds	r5, r2, r3
 801ed20:	42ac      	cmp	r4, r5
 801ed22:	d101      	bne.n	801ed28 <__sfputs_r+0x12>
 801ed24:	2000      	movs	r0, #0
 801ed26:	e007      	b.n	801ed38 <__sfputs_r+0x22>
 801ed28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ed2c:	463a      	mov	r2, r7
 801ed2e:	4630      	mov	r0, r6
 801ed30:	f7ff ffda 	bl	801ece8 <__sfputc_r>
 801ed34:	1c43      	adds	r3, r0, #1
 801ed36:	d1f3      	bne.n	801ed20 <__sfputs_r+0xa>
 801ed38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ed3c <_vfiprintf_r>:
 801ed3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed40:	460d      	mov	r5, r1
 801ed42:	b09d      	sub	sp, #116	; 0x74
 801ed44:	4614      	mov	r4, r2
 801ed46:	4698      	mov	r8, r3
 801ed48:	4606      	mov	r6, r0
 801ed4a:	b118      	cbz	r0, 801ed54 <_vfiprintf_r+0x18>
 801ed4c:	6983      	ldr	r3, [r0, #24]
 801ed4e:	b90b      	cbnz	r3, 801ed54 <_vfiprintf_r+0x18>
 801ed50:	f7fd fcc2 	bl	801c6d8 <__sinit>
 801ed54:	4b89      	ldr	r3, [pc, #548]	; (801ef7c <_vfiprintf_r+0x240>)
 801ed56:	429d      	cmp	r5, r3
 801ed58:	d11b      	bne.n	801ed92 <_vfiprintf_r+0x56>
 801ed5a:	6875      	ldr	r5, [r6, #4]
 801ed5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed5e:	07d9      	lsls	r1, r3, #31
 801ed60:	d405      	bmi.n	801ed6e <_vfiprintf_r+0x32>
 801ed62:	89ab      	ldrh	r3, [r5, #12]
 801ed64:	059a      	lsls	r2, r3, #22
 801ed66:	d402      	bmi.n	801ed6e <_vfiprintf_r+0x32>
 801ed68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ed6a:	f7fd fd78 	bl	801c85e <__retarget_lock_acquire_recursive>
 801ed6e:	89ab      	ldrh	r3, [r5, #12]
 801ed70:	071b      	lsls	r3, r3, #28
 801ed72:	d501      	bpl.n	801ed78 <_vfiprintf_r+0x3c>
 801ed74:	692b      	ldr	r3, [r5, #16]
 801ed76:	b9eb      	cbnz	r3, 801edb4 <_vfiprintf_r+0x78>
 801ed78:	4629      	mov	r1, r5
 801ed7a:	4630      	mov	r0, r6
 801ed7c:	f000 f96e 	bl	801f05c <__swsetup_r>
 801ed80:	b1c0      	cbz	r0, 801edb4 <_vfiprintf_r+0x78>
 801ed82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed84:	07dc      	lsls	r4, r3, #31
 801ed86:	d50e      	bpl.n	801eda6 <_vfiprintf_r+0x6a>
 801ed88:	f04f 30ff 	mov.w	r0, #4294967295
 801ed8c:	b01d      	add	sp, #116	; 0x74
 801ed8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed92:	4b7b      	ldr	r3, [pc, #492]	; (801ef80 <_vfiprintf_r+0x244>)
 801ed94:	429d      	cmp	r5, r3
 801ed96:	d101      	bne.n	801ed9c <_vfiprintf_r+0x60>
 801ed98:	68b5      	ldr	r5, [r6, #8]
 801ed9a:	e7df      	b.n	801ed5c <_vfiprintf_r+0x20>
 801ed9c:	4b79      	ldr	r3, [pc, #484]	; (801ef84 <_vfiprintf_r+0x248>)
 801ed9e:	429d      	cmp	r5, r3
 801eda0:	bf08      	it	eq
 801eda2:	68f5      	ldreq	r5, [r6, #12]
 801eda4:	e7da      	b.n	801ed5c <_vfiprintf_r+0x20>
 801eda6:	89ab      	ldrh	r3, [r5, #12]
 801eda8:	0598      	lsls	r0, r3, #22
 801edaa:	d4ed      	bmi.n	801ed88 <_vfiprintf_r+0x4c>
 801edac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801edae:	f7fd fd58 	bl	801c862 <__retarget_lock_release_recursive>
 801edb2:	e7e9      	b.n	801ed88 <_vfiprintf_r+0x4c>
 801edb4:	2300      	movs	r3, #0
 801edb6:	9309      	str	r3, [sp, #36]	; 0x24
 801edb8:	2320      	movs	r3, #32
 801edba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801edbe:	f8cd 800c 	str.w	r8, [sp, #12]
 801edc2:	2330      	movs	r3, #48	; 0x30
 801edc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ef88 <_vfiprintf_r+0x24c>
 801edc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801edcc:	f04f 0901 	mov.w	r9, #1
 801edd0:	4623      	mov	r3, r4
 801edd2:	469a      	mov	sl, r3
 801edd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edd8:	b10a      	cbz	r2, 801edde <_vfiprintf_r+0xa2>
 801edda:	2a25      	cmp	r2, #37	; 0x25
 801eddc:	d1f9      	bne.n	801edd2 <_vfiprintf_r+0x96>
 801edde:	ebba 0b04 	subs.w	fp, sl, r4
 801ede2:	d00b      	beq.n	801edfc <_vfiprintf_r+0xc0>
 801ede4:	465b      	mov	r3, fp
 801ede6:	4622      	mov	r2, r4
 801ede8:	4629      	mov	r1, r5
 801edea:	4630      	mov	r0, r6
 801edec:	f7ff ff93 	bl	801ed16 <__sfputs_r>
 801edf0:	3001      	adds	r0, #1
 801edf2:	f000 80aa 	beq.w	801ef4a <_vfiprintf_r+0x20e>
 801edf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edf8:	445a      	add	r2, fp
 801edfa:	9209      	str	r2, [sp, #36]	; 0x24
 801edfc:	f89a 3000 	ldrb.w	r3, [sl]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	f000 80a2 	beq.w	801ef4a <_vfiprintf_r+0x20e>
 801ee06:	2300      	movs	r3, #0
 801ee08:	f04f 32ff 	mov.w	r2, #4294967295
 801ee0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ee10:	f10a 0a01 	add.w	sl, sl, #1
 801ee14:	9304      	str	r3, [sp, #16]
 801ee16:	9307      	str	r3, [sp, #28]
 801ee18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ee1c:	931a      	str	r3, [sp, #104]	; 0x68
 801ee1e:	4654      	mov	r4, sl
 801ee20:	2205      	movs	r2, #5
 801ee22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee26:	4858      	ldr	r0, [pc, #352]	; (801ef88 <_vfiprintf_r+0x24c>)
 801ee28:	f7e1 f9da 	bl	80001e0 <memchr>
 801ee2c:	9a04      	ldr	r2, [sp, #16]
 801ee2e:	b9d8      	cbnz	r0, 801ee68 <_vfiprintf_r+0x12c>
 801ee30:	06d1      	lsls	r1, r2, #27
 801ee32:	bf44      	itt	mi
 801ee34:	2320      	movmi	r3, #32
 801ee36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee3a:	0713      	lsls	r3, r2, #28
 801ee3c:	bf44      	itt	mi
 801ee3e:	232b      	movmi	r3, #43	; 0x2b
 801ee40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee44:	f89a 3000 	ldrb.w	r3, [sl]
 801ee48:	2b2a      	cmp	r3, #42	; 0x2a
 801ee4a:	d015      	beq.n	801ee78 <_vfiprintf_r+0x13c>
 801ee4c:	9a07      	ldr	r2, [sp, #28]
 801ee4e:	4654      	mov	r4, sl
 801ee50:	2000      	movs	r0, #0
 801ee52:	f04f 0c0a 	mov.w	ip, #10
 801ee56:	4621      	mov	r1, r4
 801ee58:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee5c:	3b30      	subs	r3, #48	; 0x30
 801ee5e:	2b09      	cmp	r3, #9
 801ee60:	d94e      	bls.n	801ef00 <_vfiprintf_r+0x1c4>
 801ee62:	b1b0      	cbz	r0, 801ee92 <_vfiprintf_r+0x156>
 801ee64:	9207      	str	r2, [sp, #28]
 801ee66:	e014      	b.n	801ee92 <_vfiprintf_r+0x156>
 801ee68:	eba0 0308 	sub.w	r3, r0, r8
 801ee6c:	fa09 f303 	lsl.w	r3, r9, r3
 801ee70:	4313      	orrs	r3, r2
 801ee72:	9304      	str	r3, [sp, #16]
 801ee74:	46a2      	mov	sl, r4
 801ee76:	e7d2      	b.n	801ee1e <_vfiprintf_r+0xe2>
 801ee78:	9b03      	ldr	r3, [sp, #12]
 801ee7a:	1d19      	adds	r1, r3, #4
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	9103      	str	r1, [sp, #12]
 801ee80:	2b00      	cmp	r3, #0
 801ee82:	bfbb      	ittet	lt
 801ee84:	425b      	neglt	r3, r3
 801ee86:	f042 0202 	orrlt.w	r2, r2, #2
 801ee8a:	9307      	strge	r3, [sp, #28]
 801ee8c:	9307      	strlt	r3, [sp, #28]
 801ee8e:	bfb8      	it	lt
 801ee90:	9204      	strlt	r2, [sp, #16]
 801ee92:	7823      	ldrb	r3, [r4, #0]
 801ee94:	2b2e      	cmp	r3, #46	; 0x2e
 801ee96:	d10c      	bne.n	801eeb2 <_vfiprintf_r+0x176>
 801ee98:	7863      	ldrb	r3, [r4, #1]
 801ee9a:	2b2a      	cmp	r3, #42	; 0x2a
 801ee9c:	d135      	bne.n	801ef0a <_vfiprintf_r+0x1ce>
 801ee9e:	9b03      	ldr	r3, [sp, #12]
 801eea0:	1d1a      	adds	r2, r3, #4
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	9203      	str	r2, [sp, #12]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	bfb8      	it	lt
 801eeaa:	f04f 33ff 	movlt.w	r3, #4294967295
 801eeae:	3402      	adds	r4, #2
 801eeb0:	9305      	str	r3, [sp, #20]
 801eeb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ef98 <_vfiprintf_r+0x25c>
 801eeb6:	7821      	ldrb	r1, [r4, #0]
 801eeb8:	2203      	movs	r2, #3
 801eeba:	4650      	mov	r0, sl
 801eebc:	f7e1 f990 	bl	80001e0 <memchr>
 801eec0:	b140      	cbz	r0, 801eed4 <_vfiprintf_r+0x198>
 801eec2:	2340      	movs	r3, #64	; 0x40
 801eec4:	eba0 000a 	sub.w	r0, r0, sl
 801eec8:	fa03 f000 	lsl.w	r0, r3, r0
 801eecc:	9b04      	ldr	r3, [sp, #16]
 801eece:	4303      	orrs	r3, r0
 801eed0:	3401      	adds	r4, #1
 801eed2:	9304      	str	r3, [sp, #16]
 801eed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eed8:	482c      	ldr	r0, [pc, #176]	; (801ef8c <_vfiprintf_r+0x250>)
 801eeda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eede:	2206      	movs	r2, #6
 801eee0:	f7e1 f97e 	bl	80001e0 <memchr>
 801eee4:	2800      	cmp	r0, #0
 801eee6:	d03f      	beq.n	801ef68 <_vfiprintf_r+0x22c>
 801eee8:	4b29      	ldr	r3, [pc, #164]	; (801ef90 <_vfiprintf_r+0x254>)
 801eeea:	bb1b      	cbnz	r3, 801ef34 <_vfiprintf_r+0x1f8>
 801eeec:	9b03      	ldr	r3, [sp, #12]
 801eeee:	3307      	adds	r3, #7
 801eef0:	f023 0307 	bic.w	r3, r3, #7
 801eef4:	3308      	adds	r3, #8
 801eef6:	9303      	str	r3, [sp, #12]
 801eef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eefa:	443b      	add	r3, r7
 801eefc:	9309      	str	r3, [sp, #36]	; 0x24
 801eefe:	e767      	b.n	801edd0 <_vfiprintf_r+0x94>
 801ef00:	fb0c 3202 	mla	r2, ip, r2, r3
 801ef04:	460c      	mov	r4, r1
 801ef06:	2001      	movs	r0, #1
 801ef08:	e7a5      	b.n	801ee56 <_vfiprintf_r+0x11a>
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	3401      	adds	r4, #1
 801ef0e:	9305      	str	r3, [sp, #20]
 801ef10:	4619      	mov	r1, r3
 801ef12:	f04f 0c0a 	mov.w	ip, #10
 801ef16:	4620      	mov	r0, r4
 801ef18:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ef1c:	3a30      	subs	r2, #48	; 0x30
 801ef1e:	2a09      	cmp	r2, #9
 801ef20:	d903      	bls.n	801ef2a <_vfiprintf_r+0x1ee>
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	d0c5      	beq.n	801eeb2 <_vfiprintf_r+0x176>
 801ef26:	9105      	str	r1, [sp, #20]
 801ef28:	e7c3      	b.n	801eeb2 <_vfiprintf_r+0x176>
 801ef2a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef2e:	4604      	mov	r4, r0
 801ef30:	2301      	movs	r3, #1
 801ef32:	e7f0      	b.n	801ef16 <_vfiprintf_r+0x1da>
 801ef34:	ab03      	add	r3, sp, #12
 801ef36:	9300      	str	r3, [sp, #0]
 801ef38:	462a      	mov	r2, r5
 801ef3a:	4b16      	ldr	r3, [pc, #88]	; (801ef94 <_vfiprintf_r+0x258>)
 801ef3c:	a904      	add	r1, sp, #16
 801ef3e:	4630      	mov	r0, r6
 801ef40:	f7fd fe36 	bl	801cbb0 <_printf_float>
 801ef44:	4607      	mov	r7, r0
 801ef46:	1c78      	adds	r0, r7, #1
 801ef48:	d1d6      	bne.n	801eef8 <_vfiprintf_r+0x1bc>
 801ef4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef4c:	07d9      	lsls	r1, r3, #31
 801ef4e:	d405      	bmi.n	801ef5c <_vfiprintf_r+0x220>
 801ef50:	89ab      	ldrh	r3, [r5, #12]
 801ef52:	059a      	lsls	r2, r3, #22
 801ef54:	d402      	bmi.n	801ef5c <_vfiprintf_r+0x220>
 801ef56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef58:	f7fd fc83 	bl	801c862 <__retarget_lock_release_recursive>
 801ef5c:	89ab      	ldrh	r3, [r5, #12]
 801ef5e:	065b      	lsls	r3, r3, #25
 801ef60:	f53f af12 	bmi.w	801ed88 <_vfiprintf_r+0x4c>
 801ef64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef66:	e711      	b.n	801ed8c <_vfiprintf_r+0x50>
 801ef68:	ab03      	add	r3, sp, #12
 801ef6a:	9300      	str	r3, [sp, #0]
 801ef6c:	462a      	mov	r2, r5
 801ef6e:	4b09      	ldr	r3, [pc, #36]	; (801ef94 <_vfiprintf_r+0x258>)
 801ef70:	a904      	add	r1, sp, #16
 801ef72:	4630      	mov	r0, r6
 801ef74:	f7fe f8c0 	bl	801d0f8 <_printf_i>
 801ef78:	e7e4      	b.n	801ef44 <_vfiprintf_r+0x208>
 801ef7a:	bf00      	nop
 801ef7c:	0801fe68 	.word	0x0801fe68
 801ef80:	0801fe88 	.word	0x0801fe88
 801ef84:	0801fe48 	.word	0x0801fe48
 801ef88:	08020112 	.word	0x08020112
 801ef8c:	0802011c 	.word	0x0802011c
 801ef90:	0801cbb1 	.word	0x0801cbb1
 801ef94:	0801ed17 	.word	0x0801ed17
 801ef98:	08020118 	.word	0x08020118

0801ef9c <__swbuf_r>:
 801ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef9e:	460e      	mov	r6, r1
 801efa0:	4614      	mov	r4, r2
 801efa2:	4605      	mov	r5, r0
 801efa4:	b118      	cbz	r0, 801efae <__swbuf_r+0x12>
 801efa6:	6983      	ldr	r3, [r0, #24]
 801efa8:	b90b      	cbnz	r3, 801efae <__swbuf_r+0x12>
 801efaa:	f7fd fb95 	bl	801c6d8 <__sinit>
 801efae:	4b21      	ldr	r3, [pc, #132]	; (801f034 <__swbuf_r+0x98>)
 801efb0:	429c      	cmp	r4, r3
 801efb2:	d12b      	bne.n	801f00c <__swbuf_r+0x70>
 801efb4:	686c      	ldr	r4, [r5, #4]
 801efb6:	69a3      	ldr	r3, [r4, #24]
 801efb8:	60a3      	str	r3, [r4, #8]
 801efba:	89a3      	ldrh	r3, [r4, #12]
 801efbc:	071a      	lsls	r2, r3, #28
 801efbe:	d52f      	bpl.n	801f020 <__swbuf_r+0x84>
 801efc0:	6923      	ldr	r3, [r4, #16]
 801efc2:	b36b      	cbz	r3, 801f020 <__swbuf_r+0x84>
 801efc4:	6923      	ldr	r3, [r4, #16]
 801efc6:	6820      	ldr	r0, [r4, #0]
 801efc8:	1ac0      	subs	r0, r0, r3
 801efca:	6963      	ldr	r3, [r4, #20]
 801efcc:	b2f6      	uxtb	r6, r6
 801efce:	4283      	cmp	r3, r0
 801efd0:	4637      	mov	r7, r6
 801efd2:	dc04      	bgt.n	801efde <__swbuf_r+0x42>
 801efd4:	4621      	mov	r1, r4
 801efd6:	4628      	mov	r0, r5
 801efd8:	f7ff fa3a 	bl	801e450 <_fflush_r>
 801efdc:	bb30      	cbnz	r0, 801f02c <__swbuf_r+0x90>
 801efde:	68a3      	ldr	r3, [r4, #8]
 801efe0:	3b01      	subs	r3, #1
 801efe2:	60a3      	str	r3, [r4, #8]
 801efe4:	6823      	ldr	r3, [r4, #0]
 801efe6:	1c5a      	adds	r2, r3, #1
 801efe8:	6022      	str	r2, [r4, #0]
 801efea:	701e      	strb	r6, [r3, #0]
 801efec:	6963      	ldr	r3, [r4, #20]
 801efee:	3001      	adds	r0, #1
 801eff0:	4283      	cmp	r3, r0
 801eff2:	d004      	beq.n	801effe <__swbuf_r+0x62>
 801eff4:	89a3      	ldrh	r3, [r4, #12]
 801eff6:	07db      	lsls	r3, r3, #31
 801eff8:	d506      	bpl.n	801f008 <__swbuf_r+0x6c>
 801effa:	2e0a      	cmp	r6, #10
 801effc:	d104      	bne.n	801f008 <__swbuf_r+0x6c>
 801effe:	4621      	mov	r1, r4
 801f000:	4628      	mov	r0, r5
 801f002:	f7ff fa25 	bl	801e450 <_fflush_r>
 801f006:	b988      	cbnz	r0, 801f02c <__swbuf_r+0x90>
 801f008:	4638      	mov	r0, r7
 801f00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f00c:	4b0a      	ldr	r3, [pc, #40]	; (801f038 <__swbuf_r+0x9c>)
 801f00e:	429c      	cmp	r4, r3
 801f010:	d101      	bne.n	801f016 <__swbuf_r+0x7a>
 801f012:	68ac      	ldr	r4, [r5, #8]
 801f014:	e7cf      	b.n	801efb6 <__swbuf_r+0x1a>
 801f016:	4b09      	ldr	r3, [pc, #36]	; (801f03c <__swbuf_r+0xa0>)
 801f018:	429c      	cmp	r4, r3
 801f01a:	bf08      	it	eq
 801f01c:	68ec      	ldreq	r4, [r5, #12]
 801f01e:	e7ca      	b.n	801efb6 <__swbuf_r+0x1a>
 801f020:	4621      	mov	r1, r4
 801f022:	4628      	mov	r0, r5
 801f024:	f000 f81a 	bl	801f05c <__swsetup_r>
 801f028:	2800      	cmp	r0, #0
 801f02a:	d0cb      	beq.n	801efc4 <__swbuf_r+0x28>
 801f02c:	f04f 37ff 	mov.w	r7, #4294967295
 801f030:	e7ea      	b.n	801f008 <__swbuf_r+0x6c>
 801f032:	bf00      	nop
 801f034:	0801fe68 	.word	0x0801fe68
 801f038:	0801fe88 	.word	0x0801fe88
 801f03c:	0801fe48 	.word	0x0801fe48

0801f040 <__ascii_wctomb>:
 801f040:	b149      	cbz	r1, 801f056 <__ascii_wctomb+0x16>
 801f042:	2aff      	cmp	r2, #255	; 0xff
 801f044:	bf85      	ittet	hi
 801f046:	238a      	movhi	r3, #138	; 0x8a
 801f048:	6003      	strhi	r3, [r0, #0]
 801f04a:	700a      	strbls	r2, [r1, #0]
 801f04c:	f04f 30ff 	movhi.w	r0, #4294967295
 801f050:	bf98      	it	ls
 801f052:	2001      	movls	r0, #1
 801f054:	4770      	bx	lr
 801f056:	4608      	mov	r0, r1
 801f058:	4770      	bx	lr
	...

0801f05c <__swsetup_r>:
 801f05c:	4b32      	ldr	r3, [pc, #200]	; (801f128 <__swsetup_r+0xcc>)
 801f05e:	b570      	push	{r4, r5, r6, lr}
 801f060:	681d      	ldr	r5, [r3, #0]
 801f062:	4606      	mov	r6, r0
 801f064:	460c      	mov	r4, r1
 801f066:	b125      	cbz	r5, 801f072 <__swsetup_r+0x16>
 801f068:	69ab      	ldr	r3, [r5, #24]
 801f06a:	b913      	cbnz	r3, 801f072 <__swsetup_r+0x16>
 801f06c:	4628      	mov	r0, r5
 801f06e:	f7fd fb33 	bl	801c6d8 <__sinit>
 801f072:	4b2e      	ldr	r3, [pc, #184]	; (801f12c <__swsetup_r+0xd0>)
 801f074:	429c      	cmp	r4, r3
 801f076:	d10f      	bne.n	801f098 <__swsetup_r+0x3c>
 801f078:	686c      	ldr	r4, [r5, #4]
 801f07a:	89a3      	ldrh	r3, [r4, #12]
 801f07c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f080:	0719      	lsls	r1, r3, #28
 801f082:	d42c      	bmi.n	801f0de <__swsetup_r+0x82>
 801f084:	06dd      	lsls	r5, r3, #27
 801f086:	d411      	bmi.n	801f0ac <__swsetup_r+0x50>
 801f088:	2309      	movs	r3, #9
 801f08a:	6033      	str	r3, [r6, #0]
 801f08c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f090:	81a3      	strh	r3, [r4, #12]
 801f092:	f04f 30ff 	mov.w	r0, #4294967295
 801f096:	e03e      	b.n	801f116 <__swsetup_r+0xba>
 801f098:	4b25      	ldr	r3, [pc, #148]	; (801f130 <__swsetup_r+0xd4>)
 801f09a:	429c      	cmp	r4, r3
 801f09c:	d101      	bne.n	801f0a2 <__swsetup_r+0x46>
 801f09e:	68ac      	ldr	r4, [r5, #8]
 801f0a0:	e7eb      	b.n	801f07a <__swsetup_r+0x1e>
 801f0a2:	4b24      	ldr	r3, [pc, #144]	; (801f134 <__swsetup_r+0xd8>)
 801f0a4:	429c      	cmp	r4, r3
 801f0a6:	bf08      	it	eq
 801f0a8:	68ec      	ldreq	r4, [r5, #12]
 801f0aa:	e7e6      	b.n	801f07a <__swsetup_r+0x1e>
 801f0ac:	0758      	lsls	r0, r3, #29
 801f0ae:	d512      	bpl.n	801f0d6 <__swsetup_r+0x7a>
 801f0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f0b2:	b141      	cbz	r1, 801f0c6 <__swsetup_r+0x6a>
 801f0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f0b8:	4299      	cmp	r1, r3
 801f0ba:	d002      	beq.n	801f0c2 <__swsetup_r+0x66>
 801f0bc:	4630      	mov	r0, r6
 801f0be:	f7fd fbf7 	bl	801c8b0 <_free_r>
 801f0c2:	2300      	movs	r3, #0
 801f0c4:	6363      	str	r3, [r4, #52]	; 0x34
 801f0c6:	89a3      	ldrh	r3, [r4, #12]
 801f0c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f0cc:	81a3      	strh	r3, [r4, #12]
 801f0ce:	2300      	movs	r3, #0
 801f0d0:	6063      	str	r3, [r4, #4]
 801f0d2:	6923      	ldr	r3, [r4, #16]
 801f0d4:	6023      	str	r3, [r4, #0]
 801f0d6:	89a3      	ldrh	r3, [r4, #12]
 801f0d8:	f043 0308 	orr.w	r3, r3, #8
 801f0dc:	81a3      	strh	r3, [r4, #12]
 801f0de:	6923      	ldr	r3, [r4, #16]
 801f0e0:	b94b      	cbnz	r3, 801f0f6 <__swsetup_r+0x9a>
 801f0e2:	89a3      	ldrh	r3, [r4, #12]
 801f0e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f0ec:	d003      	beq.n	801f0f6 <__swsetup_r+0x9a>
 801f0ee:	4621      	mov	r1, r4
 801f0f0:	4630      	mov	r0, r6
 801f0f2:	f000 f847 	bl	801f184 <__smakebuf_r>
 801f0f6:	89a0      	ldrh	r0, [r4, #12]
 801f0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f0fc:	f010 0301 	ands.w	r3, r0, #1
 801f100:	d00a      	beq.n	801f118 <__swsetup_r+0xbc>
 801f102:	2300      	movs	r3, #0
 801f104:	60a3      	str	r3, [r4, #8]
 801f106:	6963      	ldr	r3, [r4, #20]
 801f108:	425b      	negs	r3, r3
 801f10a:	61a3      	str	r3, [r4, #24]
 801f10c:	6923      	ldr	r3, [r4, #16]
 801f10e:	b943      	cbnz	r3, 801f122 <__swsetup_r+0xc6>
 801f110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f114:	d1ba      	bne.n	801f08c <__swsetup_r+0x30>
 801f116:	bd70      	pop	{r4, r5, r6, pc}
 801f118:	0781      	lsls	r1, r0, #30
 801f11a:	bf58      	it	pl
 801f11c:	6963      	ldrpl	r3, [r4, #20]
 801f11e:	60a3      	str	r3, [r4, #8]
 801f120:	e7f4      	b.n	801f10c <__swsetup_r+0xb0>
 801f122:	2000      	movs	r0, #0
 801f124:	e7f7      	b.n	801f116 <__swsetup_r+0xba>
 801f126:	bf00      	nop
 801f128:	20000034 	.word	0x20000034
 801f12c:	0801fe68 	.word	0x0801fe68
 801f130:	0801fe88 	.word	0x0801fe88
 801f134:	0801fe48 	.word	0x0801fe48

0801f138 <__swhatbuf_r>:
 801f138:	b570      	push	{r4, r5, r6, lr}
 801f13a:	460e      	mov	r6, r1
 801f13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f140:	2900      	cmp	r1, #0
 801f142:	b096      	sub	sp, #88	; 0x58
 801f144:	4614      	mov	r4, r2
 801f146:	461d      	mov	r5, r3
 801f148:	da08      	bge.n	801f15c <__swhatbuf_r+0x24>
 801f14a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f14e:	2200      	movs	r2, #0
 801f150:	602a      	str	r2, [r5, #0]
 801f152:	061a      	lsls	r2, r3, #24
 801f154:	d410      	bmi.n	801f178 <__swhatbuf_r+0x40>
 801f156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f15a:	e00e      	b.n	801f17a <__swhatbuf_r+0x42>
 801f15c:	466a      	mov	r2, sp
 801f15e:	f000 f851 	bl	801f204 <_fstat_r>
 801f162:	2800      	cmp	r0, #0
 801f164:	dbf1      	blt.n	801f14a <__swhatbuf_r+0x12>
 801f166:	9a01      	ldr	r2, [sp, #4]
 801f168:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f16c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f170:	425a      	negs	r2, r3
 801f172:	415a      	adcs	r2, r3
 801f174:	602a      	str	r2, [r5, #0]
 801f176:	e7ee      	b.n	801f156 <__swhatbuf_r+0x1e>
 801f178:	2340      	movs	r3, #64	; 0x40
 801f17a:	2000      	movs	r0, #0
 801f17c:	6023      	str	r3, [r4, #0]
 801f17e:	b016      	add	sp, #88	; 0x58
 801f180:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f184 <__smakebuf_r>:
 801f184:	898b      	ldrh	r3, [r1, #12]
 801f186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f188:	079d      	lsls	r5, r3, #30
 801f18a:	4606      	mov	r6, r0
 801f18c:	460c      	mov	r4, r1
 801f18e:	d507      	bpl.n	801f1a0 <__smakebuf_r+0x1c>
 801f190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f194:	6023      	str	r3, [r4, #0]
 801f196:	6123      	str	r3, [r4, #16]
 801f198:	2301      	movs	r3, #1
 801f19a:	6163      	str	r3, [r4, #20]
 801f19c:	b002      	add	sp, #8
 801f19e:	bd70      	pop	{r4, r5, r6, pc}
 801f1a0:	ab01      	add	r3, sp, #4
 801f1a2:	466a      	mov	r2, sp
 801f1a4:	f7ff ffc8 	bl	801f138 <__swhatbuf_r>
 801f1a8:	9900      	ldr	r1, [sp, #0]
 801f1aa:	4605      	mov	r5, r0
 801f1ac:	4630      	mov	r0, r6
 801f1ae:	f7fd fbeb 	bl	801c988 <_malloc_r>
 801f1b2:	b948      	cbnz	r0, 801f1c8 <__smakebuf_r+0x44>
 801f1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f1b8:	059a      	lsls	r2, r3, #22
 801f1ba:	d4ef      	bmi.n	801f19c <__smakebuf_r+0x18>
 801f1bc:	f023 0303 	bic.w	r3, r3, #3
 801f1c0:	f043 0302 	orr.w	r3, r3, #2
 801f1c4:	81a3      	strh	r3, [r4, #12]
 801f1c6:	e7e3      	b.n	801f190 <__smakebuf_r+0xc>
 801f1c8:	4b0d      	ldr	r3, [pc, #52]	; (801f200 <__smakebuf_r+0x7c>)
 801f1ca:	62b3      	str	r3, [r6, #40]	; 0x28
 801f1cc:	89a3      	ldrh	r3, [r4, #12]
 801f1ce:	6020      	str	r0, [r4, #0]
 801f1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1d4:	81a3      	strh	r3, [r4, #12]
 801f1d6:	9b00      	ldr	r3, [sp, #0]
 801f1d8:	6163      	str	r3, [r4, #20]
 801f1da:	9b01      	ldr	r3, [sp, #4]
 801f1dc:	6120      	str	r0, [r4, #16]
 801f1de:	b15b      	cbz	r3, 801f1f8 <__smakebuf_r+0x74>
 801f1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f1e4:	4630      	mov	r0, r6
 801f1e6:	f000 f81f 	bl	801f228 <_isatty_r>
 801f1ea:	b128      	cbz	r0, 801f1f8 <__smakebuf_r+0x74>
 801f1ec:	89a3      	ldrh	r3, [r4, #12]
 801f1ee:	f023 0303 	bic.w	r3, r3, #3
 801f1f2:	f043 0301 	orr.w	r3, r3, #1
 801f1f6:	81a3      	strh	r3, [r4, #12]
 801f1f8:	89a0      	ldrh	r0, [r4, #12]
 801f1fa:	4305      	orrs	r5, r0
 801f1fc:	81a5      	strh	r5, [r4, #12]
 801f1fe:	e7cd      	b.n	801f19c <__smakebuf_r+0x18>
 801f200:	0801c671 	.word	0x0801c671

0801f204 <_fstat_r>:
 801f204:	b538      	push	{r3, r4, r5, lr}
 801f206:	4d07      	ldr	r5, [pc, #28]	; (801f224 <_fstat_r+0x20>)
 801f208:	2300      	movs	r3, #0
 801f20a:	4604      	mov	r4, r0
 801f20c:	4608      	mov	r0, r1
 801f20e:	4611      	mov	r1, r2
 801f210:	602b      	str	r3, [r5, #0]
 801f212:	f7f1 f918 	bl	8010446 <_fstat>
 801f216:	1c43      	adds	r3, r0, #1
 801f218:	d102      	bne.n	801f220 <_fstat_r+0x1c>
 801f21a:	682b      	ldr	r3, [r5, #0]
 801f21c:	b103      	cbz	r3, 801f220 <_fstat_r+0x1c>
 801f21e:	6023      	str	r3, [r4, #0]
 801f220:	bd38      	pop	{r3, r4, r5, pc}
 801f222:	bf00      	nop
 801f224:	2000a600 	.word	0x2000a600

0801f228 <_isatty_r>:
 801f228:	b538      	push	{r3, r4, r5, lr}
 801f22a:	4d06      	ldr	r5, [pc, #24]	; (801f244 <_isatty_r+0x1c>)
 801f22c:	2300      	movs	r3, #0
 801f22e:	4604      	mov	r4, r0
 801f230:	4608      	mov	r0, r1
 801f232:	602b      	str	r3, [r5, #0]
 801f234:	f7f1 f917 	bl	8010466 <_isatty>
 801f238:	1c43      	adds	r3, r0, #1
 801f23a:	d102      	bne.n	801f242 <_isatty_r+0x1a>
 801f23c:	682b      	ldr	r3, [r5, #0]
 801f23e:	b103      	cbz	r3, 801f242 <_isatty_r+0x1a>
 801f240:	6023      	str	r3, [r4, #0]
 801f242:	bd38      	pop	{r3, r4, r5, pc}
 801f244:	2000a600 	.word	0x2000a600

0801f248 <_init>:
 801f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f24a:	bf00      	nop
 801f24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f24e:	bc08      	pop	{r3}
 801f250:	469e      	mov	lr, r3
 801f252:	4770      	bx	lr

0801f254 <_fini>:
 801f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f256:	bf00      	nop
 801f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f25a:	bc08      	pop	{r3}
 801f25c:	469e      	mov	lr, r3
 801f25e:	4770      	bx	lr
