
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b64  08017ba0  08017ba0  00027ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018704  08018704  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08018704  08018704  00028704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801870c  0801870c  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0801870c  0801870c  0002870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801872c  0801872c  0002872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08018734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          0000a2c4  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a4bc  2000a4bc  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061319  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00010c7f  00000000  00000000  00091541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000042d8  00000000  00000000  000a21c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e68  00000000  00000000  000a6498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003548a  00000000  00000000  000aa300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000513a7  00000000  00000000  000df78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104ec4  00000000  00000000  00130b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002359f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00013054  00000000  00000000  00235a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017b88 	.word	0x08017b88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08017b88 	.word	0x08017b88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f00f fc50 	bl	8010ae8 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f013 f8e4 	bl	8014424 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f00e ffeb 	bl	801023c <printf_>
 8001266:	f013 f90d 	bl	8014484 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000079c 	.word	0x2000079c
 8001278:	08017ba0 	.word	0x08017ba0

0800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800129a:	b5b0      	push	{r4, r5, r7, lr}
 800129c:	b08c      	sub	sp, #48	; 0x30
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffe5 	bl	800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f012 fa9d 	bl	8013804 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012d2:	f001 f84b 	bl	800236c <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d00b      	beq.n	80012fc <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	461c      	mov	r4, r3
 80012ea:	4615      	mov	r5, r2
 80012ec:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff92 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001300:	e7db      	b.n	80012ba <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001304 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5b 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001316:	f240 7301 	movw	r3, #1793	; 0x701
 800131a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001324:	f000 ff42 	bl	80021ac <_ZN7canzero9getStatusEv>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f107 010c 	add.w	r1, r7, #12
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	f00f fbd5 	bl	8010ae8 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800133e:	f000 f841 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4618      	mov	r0, r3
 8001358:	f00f f8ea 	bl	8010530 <osDelay>
		frame ++;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	3301      	adds	r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001362:	e7df      	b.n	8001324 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001364:	2000079c 	.word	0x2000079c
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	f000 f824 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 800137c:	4603      	mov	r3, r0
 800137e:	3305      	adds	r3, #5
 8001380:	461a      	mov	r2, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	f107 010c 	add.w	r1, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	4620      	mov	r0, r4
 800139a:	f010 ffcb 	bl	8012334 <xStreamBufferReceive>
 800139e:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0e2      	beq.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fede 	bl	8002174 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013b8:	e7dc      	b.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013ba:	bf00      	nop
 80013bc:	20000214 	.word	0x20000214
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013c8:	f003 fd06 	bl	8004dd8 <_Z24OD_HeartbeatInterval_getv>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <_Z41__static_initialization_and_destruction_0ii>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10c      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d107      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2100      	movs	r1, #0
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f010 fe1e 	bl	8012034 <xStreamBufferGenericCreate>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000214 	.word	0x20000214

0800140c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
 8001410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffdd 	bl	80013d4 <_Z41__static_initialization_and_destruction_0ii>
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	4798      	blx	r3
    }
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffd4 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8e1 	bl	800166c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN7canzero10receiver_tD1Ev>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffde 	bl	8001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_ZN7canzero10receiver_taSERKS0_>:
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f8f3 	bl	80016ca <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7d1a      	ldrb	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	751a      	strb	r2, [r3, #20]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d12f      	bne.n	800157c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	429a      	cmp	r2, r3
 8001528:	d258      	bcs.n	80015dc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 800152a:	4930      	ldr	r1, [pc, #192]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3314      	adds	r3, #20
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d119      	bne.n	8001574 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3310      	adds	r3, #16
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4299      	cmp	r1, r3
 8001558:	d10c      	bne.n	8001574 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001566:	4413      	add	r3, r2
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f8c8 	bl	8001700 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001570:	2301      	movs	r3, #1
 8001572:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	3301      	adds	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e7d1      	b.n	8001520 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	429a      	cmp	r2, r3
 8001588:	d228      	bcs.n	80015dc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800158a:	4918      	ldr	r1, [pc, #96]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3314      	adds	r3, #20
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d119      	bne.n	80015d4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4403      	add	r3, r0
 80015b2:	3310      	adds	r3, #16
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4299      	cmp	r1, r3
 80015b8:	d10c      	bne.n	80015d4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015c6:	4413      	add	r3, r2
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f898 	bl	8001700 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80015d0:	2301      	movs	r3, #1
 80015d2:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e7d1      	b.n	8001580 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000790 	.word	0x20000790
 80015ec:	20000218 	.word	0x20000218

080015f0 <_ZN3can25unregisterMessageReceiverEj>:



namespace can {

void unregisterMessageReceiver(unsigned int id){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	using namespace canzero;
	taskENTER_CRITICAL();
 80015f8:	f012 ff14 	bl	8014424 <vPortEnterCritical>
	for(size_t i = 0;i<g_size;i++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	d226      	bcs.n	8001658 <_ZN3can25unregisterMessageReceiverEj+0x68>
		if(g_receivers[i].m_receiverId == id){
 800160a:	4917      	ldr	r1, [pc, #92]	; (8001668 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3318      	adds	r3, #24
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d116      	bne.n	8001650 <_ZN3can25unregisterMessageReceiverEj+0x60>
			g_receivers[i] = g_receivers[--g_size];
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 800162e:	1898      	adds	r0, r3, r2
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 8001648:	4413      	add	r3, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff ff3f 	bl	80014ce <_ZN7canzero10receiver_taSERKS0_>
	for(size_t i = 0;i<g_size;i++){
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e7d3      	b.n	8001600 <_ZN3can25unregisterMessageReceiverEj+0x10>
		}
	}
	taskEXIT_CRITICAL();
 8001658:	f012 ff14 	bl	8014484 <vPortExitCritical>
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000790 	.word	0x20000790
 8001668:	20000218 	.word	0x20000218

0800166c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fed0 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fec2 	bl	800141c <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f000 f84d 	bl	8001738 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	2202      	movs	r2, #2
 80016ae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
	}
    }
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ffd3 	bl	8001686 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f836 	bl	8001758 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fec5 	bl	8001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 80016f6:	687b      	ldr	r3, [r7, #4]
      }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fea6 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 8001718:	f013 f9b8 	bl	8014a8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68dc      	ldr	r4, [r3, #12]
 8001720:	687d      	ldr	r5, [r7, #4]
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f000 f839 	bl	800179a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4628      	mov	r0, r5
 800172e:	47a0      	blx	r4
 8001730:	bf00      	nop
    }
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bdb0      	pop	{r4, r5, r7, pc}

08001738 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe8b 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 8001748:	4603      	mov	r3, r0
 800174a:	f083 0301 	eor.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f82c 	bl	80017c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0208 	add.w	r2, r3, #8
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3308      	adds	r3, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f000 f855 	bl	800182a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f103 020c 	add.w	r2, r3, #12
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	330c      	adds	r3, #12
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f000 f876 	bl	800187e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffed 	bl	80017b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017e0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f7ff ffe3 	bl	80017b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017ea:	4602      	mov	r2, r0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ffd8 	bl	80017b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001800:	4602      	mov	r2, r0
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001808:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffed 	bl	8001814 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800183a:	4603      	mov	r3, r0
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff ffe7 	bl	8001814 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001846:	4603      	mov	r3, r0
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffde 	bl	8001814 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001858:	4603      	mov	r3, r0
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]
    }
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ffed 	bl	8001868 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800188e:	4603      	mov	r3, r0
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f7ff ffe7 	bl	8001868 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800189a:	4603      	mov	r3, r0
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ffde 	bl	8001868 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018ac:	4603      	mov	r3, r0
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]
    }
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_Z41__static_initialization_and_destruction_0ii>:

}
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10f      	bne.n	80018ec <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10a      	bne.n	80018ec <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80018d8:	2431      	movs	r4, #49	; 0x31
 80018da:	461d      	mov	r5, r3
 80018dc:	2c00      	cmp	r4, #0
 80018de:	db05      	blt.n	80018ec <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018e0:	4628      	mov	r0, r5
 80018e2:	f7ff fdda 	bl	800149a <_ZN7canzero10receiver_tC1Ev>
 80018e6:	351c      	adds	r5, #28
 80018e8:	3c01      	subs	r4, #1
 80018ea:	e7f7      	b.n	80018dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10d      	bne.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x52>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x52>
 80018fc:	4c07      	ldr	r4, [pc, #28]	; (800191c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001900:	429c      	cmp	r4, r3
 8001902:	d004      	beq.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001904:	3c1c      	subs	r4, #28
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff fdd4 	bl	80014b4 <_ZN7canzero10receiver_tD1Ev>
 800190c:	e7f7      	b.n	80018fe <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bdb0      	pop	{r4, r5, r7, pc}
 8001916:	bf00      	nop
 8001918:	20000218 	.word	0x20000218
 800191c:	20000790 	.word	0x20000790

08001920 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
 8001924:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff ffc7 	bl	80018bc <_Z41__static_initialization_and_destruction_0ii>
 800192e:	bd80      	pop	{r7, pc}

08001930 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
 8001934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ffbf 	bl	80018bc <_Z41__static_initialization_and_destruction_0ii>
 800193e:	bd80      	pop	{r7, pc}

08001940 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001940:	b084      	sub	sp, #16
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
 8001946:	f107 0c08 	add.w	ip, r7, #8
 800194a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 800194e:	f107 0008 	add.w	r0, r7, #8
 8001952:	f000 f835 	bl	80019c0 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_Z9processRX9RxMessage+0x74>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	230a      	movs	r3, #10
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f107 0108 	add.w	r1, r7, #8
 8001968:	f010 fbf2 	bl	8012150 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 800196c:	e01c      	b.n	80019a8 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 800196e:	f107 0008 	add.w	r0, r7, #8
 8001972:	f7ff fdc9 	bl	8001508 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d115      	bne.n	80019a8 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8001982:	f012 fd4f 	bl	8014424 <vPortEnterCritical>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4619      	mov	r1, r3
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <_Z9processRX9RxMessage+0x78>)
 800198c:	f00e fc56 	bl	801023c <printf_>
 8001990:	f012 fd78 	bl	8014484 <vPortExitCritical>
}
 8001994:	e008      	b.n	80019a8 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001996:	f012 fd45 	bl	8014424 <vPortEnterCritical>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <_Z9processRX9RxMessage+0x7c>)
 80019a0:	f00e fc4c 	bl	801023c <printf_>
 80019a4:	f012 fd6e 	bl	8014484 <vPortExitCritical>
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019b0:	b004      	add	sp, #16
 80019b2:	4770      	bx	lr
 80019b4:	20000794 	.word	0x20000794
 80019b8:	08017bd4 	.word	0x08017bd4
 80019bc:	08017bf8 	.word	0x08017bf8

080019c0 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f240 12c1 	movw	r2, #449	; 0x1c1
 80019d8:	4293      	cmp	r3, r2
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e000      	b.n	80019e6 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80019e4:	2300      	movs	r3, #0
    }
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_Z41__static_initialization_and_destruction_0ii>:
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10c      	bne.n	8001a1e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d107      	bne.n	8001a1e <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2100      	movs	r1, #0
 8001a12:	20c8      	movs	r0, #200	; 0xc8
 8001a14:	f010 fb0e 	bl	8012034 <xStreamBufferGenericCreate>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a1c:	6013      	str	r3, [r2, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000794 	.word	0x20000794

08001a2c <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff ffdd 	bl	80019f4 <_Z41__static_initialization_and_destruction_0ii>
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10c      	bne.n	8001a66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d107      	bne.n	8001a66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a56:	4a06      	ldr	r2, [pc, #24]	; (8001a70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a58:	2124      	movs	r1, #36	; 0x24
 8001a5a:	2010      	movs	r0, #16
 8001a5c:	f00e ffd0 	bl	8010a00 <osMessageQueueNew>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08017e58 	.word	0x08017e58
 8001a74:	20000798 	.word	0x20000798

08001a78 <_GLOBAL__sub_I_czReceiveQueue>:
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff ffdb 	bl	8001a3c <_Z41__static_initialization_and_destruction_0ii>
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a8c:	f3bf 8f4f 	dsb	sy
}
 8001a90:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <__NVIC_SystemReset+0x24>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a9a:	4904      	ldr	r1, [pc, #16]	; (8001aac <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_SystemReset+0x28>)
 8001a9e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aa0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa2:	f3bf 8f4f 	dsb	sy
}
 8001aa6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <__NVIC_SystemReset+0x20>
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	05fa0004 	.word	0x05fa0004

08001ab4 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b092      	sub	sp, #72	; 0x48
 8001ab8:	af06      	add	r7, sp, #24
 8001aba:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <_Z15cz_receive_taskPv+0xa4>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	f107 010c 	add.w	r1, r7, #12
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f00f f86d 	bl	8010ba8 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d136      	bne.n	8001b42 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f8e3 	bl	8001ca4 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001ae4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d1e7      	bne.n	8001abc <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001aec:	f7ff ffcc 	bl	8001a88 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f8ee 	bl	8001cd6 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fcb3 	bl	8004470 <_Z22handleSDORequestUploadRK9RxMessage>
 8001b0a:	e7d7      	b.n	8001abc <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f8f9 	bl	8001d08 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 f8ac 	bl	8003c7e <_Z24handleSDORequestDownloadRK9RxMessage>
 8001b26:	e7c9      	b.n	8001abc <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001b28:	466d      	mov	r5, sp
 8001b2a:	f107 041c 	add.w	r4, r7, #28
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	602b      	str	r3, [r5, #0]
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3c:	f7ff ff00 	bl	8001940 <_Z9processRX9RxMessage>
 8001b40:	e7bc      	b.n	8001abc <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d1b9      	bne.n	8001abc <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001b48:	f012 fc6c 	bl	8014424 <vPortEnterCritical>
 8001b4c:	4803      	ldr	r0, [pc, #12]	; (8001b5c <_Z15cz_receive_taskPv+0xa8>)
 8001b4e:	f00e fb75 	bl	801023c <printf_>
 8001b52:	f012 fc97 	bl	8014484 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b56:	e7b1      	b.n	8001abc <_Z15cz_receive_taskPv+0x8>
 8001b58:	20000798 	.word	0x20000798
 8001b5c:	08017c2c 	.word	0x08017c2c

08001b60 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f009 fa94 	bl	800b0a0 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001b78:	f107 040c 	add.w	r4, r7, #12
 8001b7c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	dc0e      	bgt.n	8001bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001b96:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	4413      	add	r3, r2
 8001b9e:	7819      	ldrb	r1, [r3, #0]
 8001ba0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	4413      	add	r3, r2
 8001ba8:	460a      	mov	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	3301      	adds	r3, #1
 8001bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001bb2:	e7ed      	b.n	8001b90 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f107 010c 	add.w	r1, r7, #12
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f00e ff92 	bl	8010ae8 <osMessageQueuePut>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0

	}
}
 8001bc8:	bf00      	nop
 8001bca:	3758      	adds	r7, #88	; 0x58
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	20000798 	.word	0x20000798

08001bd4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b096      	sub	sp, #88	; 0x58
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001bdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001be0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001be4:	2101      	movs	r1, #1
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f009 fa5a 	bl	800b0a0 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001bec:	f107 040c 	add.w	r4, r7, #12
 8001bf0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	657b      	str	r3, [r7, #84]	; 0x54
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	dc0e      	bgt.n	8001c28 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c0a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c10:	4413      	add	r3, r2
 8001c12:	7819      	ldrb	r1, [r3, #0]
 8001c14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1a:	4413      	add	r3, r2
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	3301      	adds	r3, #1
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
 8001c26:	e7ed      	b.n	8001c04 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f107 010c 	add.w	r1, r7, #12
 8001c30:	2300      	movs	r3, #0
 8001c32:	2200      	movs	r2, #0
 8001c34:	f00e ff58 	bl	8010ae8 <osMessageQueuePut>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0

	}
}
 8001c3c:	bf00      	nop
 8001c3e:	3758      	adds	r7, #88	; 0x58
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bdb0      	pop	{r4, r5, r7, pc}
 8001c44:	20000798 	.word	0x20000798

08001c48 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f009 fd6e 	bl	800b732 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c56:	f3ef 8211 	mrs	r2, BASEPRI
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	60fa      	str	r2, [r7, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <HAL_CAN_ErrorCallback+0x44>)
 8001c74:	f00e fae2 	bl	801023c <printf_>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c82:	bf00      	nop
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	08017c44 	.word	0x08017c44

08001c90 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f240 7281 	movw	r2, #1921	; 0x781
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e000      	b.n	8001cca <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cc8:	2300      	movs	r3, #0
    }
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	e000      	b.n	8001cfc <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cfa:	2300      	movs	r3, #0
    }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d109      	bne.n	8001d2c <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f240 6201 	movw	r2, #1537	; 0x601
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e000      	b.n	8001d2e <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d2c:	2300      	movs	r3, #0
    }
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d107      	bne.n	8001d66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d58:	2120      	movs	r1, #32
 8001d5a:	2010      	movs	r0, #16
 8001d5c:	f00e fe50 	bl	8010a00 <osMessageQueueNew>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	08017e70 	.word	0x08017e70
 8001d74:	2000079c 	.word	0x2000079c

08001d78 <_GLOBAL__sub_I_czSendQueue>:
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff ffdb 	bl	8001d3c <_Z41__static_initialization_and_destruction_0ii>
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fa19 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <_Z13cz_send_entryPv+0x180>)
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f107 010c 	add.w	r1, r7, #12
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	2200      	movs	r2, #0
 8001dac:	f00e fefc 	bl	8010ba8 <osMessageQueueGet>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001dc0:	f007 fae8 	bl	8009394 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d901      	bls.n	8001dce <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001dca:	f007 fae3 	bl	8009394 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d102      	bne.n	8001dea <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001de4:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <_Z13cz_send_entryPv+0x184>)
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
 8001de8:	e010      	b.n	8001e0c <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df0:	d102      	bne.n	8001df8 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <_Z13cz_send_entryPv+0x188>)
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	e009      	b.n	8001e0c <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <_Z13cz_send_entryPv+0x184>)
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
 8001e06:	e001      	b.n	8001e0c <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <_Z13cz_send_entryPv+0x188>)
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e0e:	f009 f912 	bl	800b036 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d016      	beq.n	8001e50 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e22:	f107 0008 	add.w	r0, r7, #8
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	f103 0218 	add.w	r2, r3, #24
 8001e2e:	f107 010c 	add.w	r1, r7, #12
 8001e32:	4603      	mov	r3, r0
 8001e34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e36:	f009 f823 	bl	800ae80 <HAL_CAN_AddTxMessage>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d059      	beq.n	8001efe <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001e4a:	f007 faa3 	bl	8009394 <Error_Handler>
 8001e4e:	e056      	b.n	8001efe <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e52:	4a2e      	ldr	r2, [pc, #184]	; (8001f0c <_Z13cz_send_entryPv+0x184>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10c      	bne.n	8001e72 <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <_Z13cz_send_entryPv+0x18c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <_Z13cz_send_entryPv+0x18c>)
 8001e60:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001e62:	f012 fadf 	bl	8014424 <vPortEnterCritical>
 8001e66:	482c      	ldr	r0, [pc, #176]	; (8001f18 <_Z13cz_send_entryPv+0x190>)
 8001e68:	f00e f9e8 	bl	801023c <printf_>
 8001e6c:	f012 fb0a 	bl	8014484 <vPortExitCritical>
 8001e70:	e00b      	b.n	8001e8a <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <_Z13cz_send_entryPv+0x194>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <_Z13cz_send_entryPv+0x194>)
 8001e7a:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001e7c:	f012 fad2 	bl	8014424 <vPortEnterCritical>
 8001e80:	4827      	ldr	r0, [pc, #156]	; (8001f20 <_Z13cz_send_entryPv+0x198>)
 8001e82:	f00e f9db 	bl	801023c <printf_>
 8001e86:	f012 fafd 	bl	8014484 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f00e fb50 	bl	8010530 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e92:	f009 f8d0 	bl	800b036 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001ea6:	f107 0008 	add.w	r0, r7, #8
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	f103 0218 	add.w	r2, r3, #24
 8001eb2:	f107 010c 	add.w	r1, r7, #12
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eba:	f008 ffe1 	bl	800ae80 <HAL_CAN_AddTxMessage>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d017      	beq.n	8001efe <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ece:	f000 fa5e 	bl	800238e <_ZN7canzero32handle_trasmission_request_errorEv>
 8001ed2:	e014      	b.n	8001efe <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <_Z13cz_send_entryPv+0x184>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <_Z13cz_send_entryPv+0x19c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <_Z13cz_send_entryPv+0x19c>)
 8001ee4:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <_Z13cz_send_entryPv+0x184>)
 8001ee8:	f000 fa47 	bl	800237a <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001eec:	e007      	b.n	8001efe <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <_Z13cz_send_entryPv+0x1a0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <_Z13cz_send_entryPv+0x1a0>)
 8001ef6:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001ef8:	4805      	ldr	r0, [pc, #20]	; (8001f10 <_Z13cz_send_entryPv+0x188>)
 8001efa:	f000 fa3e 	bl	800237a <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	3301      	adds	r3, #1
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001f04:	e74b      	b.n	8001d9e <_Z13cz_send_entryPv+0x16>
 8001f06:	bf00      	nop
 8001f08:	2000079c 	.word	0x2000079c
 8001f0c:	20000db8 	.word	0x20000db8
 8001f10:	20000de0 	.word	0x20000de0
 8001f14:	200007f4 	.word	0x200007f4
 8001f18:	08017c6c 	.word	0x08017c6c
 8001f1c:	2000080c 	.word	0x2000080c
 8001f20:	08017c94 	.word	0x08017c94
 8001f24:	200007ec 	.word	0x200007ec
 8001f28:	20000804 	.word	0x20000804

08001f2c <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001f32:	2080      	movs	r0, #128	; 0x80
 8001f34:	f000 f91e 	bl	8002174 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	da4f      	bge.n	8001fe2 <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	0b5b      	lsrs	r3, r3, #13
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001f52:	2300      	movs	r3, #0
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	0b5b      	lsrs	r3, r3, #13
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001f66:	2300      	movs	r3, #0
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	f043 0306 	orr.w	r3, r3, #6
 8001f70:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	0fda      	lsrs	r2, r3, #31
 8001f76:	4413      	add	r3, r2
 8001f78:	105b      	asrs	r3, r3, #1
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e001      	b.n	8001f8c <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001f90:	230e      	movs	r3, #14
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001f98:	463b      	mov	r3, r7
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4871      	ldr	r0, [pc, #452]	; (8002164 <_ZN7canzero4initEv+0x238>)
 8001f9e:	f008 fe4b 	bl	800ac38 <HAL_CAN_ConfigFilter>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001fb2:	f007 f9ef 	bl	8009394 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	330e      	adds	r3, #14
 8001fba:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4869      	ldr	r0, [pc, #420]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 8001fc2:	f008 fe39 	bl	800ac38 <HAL_CAN_ConfigFilter>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001fd6:	f007 f9dd 	bl	8009394 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	3301      	adds	r3, #1
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe0:	e7ac      	b.n	8001f3c <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	2b09      	cmp	r3, #9
 8001fea:	dc69      	bgt.n	80020c0 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	0fda      	lsrs	r2, r3, #31
 8001ff0:	4413      	add	r3, r2
 8001ff2:	105b      	asrs	r3, r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001ffa:	4a5c      	ldr	r2, [pc, #368]	; (800216c <_ZN7canzero4initEv+0x240>)
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <_ZN7canzero4initEv+0x244>)
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	f043 0318 	orr.w	r3, r3, #24
 8002014:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	2b09      	cmp	r3, #9
 800201a:	d106      	bne.n	800202a <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800201c:	2301      	movs	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8002024:	2306      	movs	r3, #6
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e011      	b.n	800204e <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 800202e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002030:	3301      	adds	r3, #1
 8002032:	4a4e      	ldr	r2, [pc, #312]	; (800216c <_ZN7canzero4initEv+0x240>)
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	015b      	lsls	r3, r3, #5
 800203a:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	3301      	adds	r3, #1
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <_ZN7canzero4initEv+0x244>)
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	f043 0318 	orr.w	r3, r3, #24
 800204c:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	0fda      	lsrs	r2, r3, #31
 8002052:	4413      	add	r3, r2
 8002054:	105b      	asrs	r3, r3, #1
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e001      	b.n	8002068 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 800206c:	230e      	movs	r3, #14
 800206e:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002070:	463b      	mov	r3, r7
 8002072:	4619      	mov	r1, r3
 8002074:	483b      	ldr	r0, [pc, #236]	; (8002164 <_ZN7canzero4initEv+0x238>)
 8002076:	f008 fddf 	bl	800ac38 <HAL_CAN_ConfigFilter>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 800208a:	f007 f983 	bl	8009394 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	0fda      	lsrs	r2, r3, #31
 8002092:	4413      	add	r3, r2
 8002094:	105b      	asrs	r3, r3, #1
 8002096:	330e      	adds	r3, #14
 8002098:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	4832      	ldr	r0, [pc, #200]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 80020a0:	f008 fdca 	bl	800ac38 <HAL_CAN_ConfigFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 80020b4:	f007 f96e 	bl	8009394 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	3302      	adds	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	e792      	b.n	8001fe6 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 80020c0:	4828      	ldr	r0, [pc, #160]	; (8002164 <_ZN7canzero4initEv+0x238>)
 80020c2:	f008 fe99 	bl	800adf8 <HAL_CAN_Start>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN7canzero4initEv+0x1ac>
 80020cc:	4826      	ldr	r0, [pc, #152]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 80020ce:	f008 fe93 	bl	800adf8 <HAL_CAN_Start>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <_ZN7canzero4initEv+0x1b0>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <_ZN7canzero4initEv+0x1b2>
 80020dc:	2300      	movs	r3, #0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 80020e2:	f007 f957 	bl	8009394 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80020e6:	2102      	movs	r1, #2
 80020e8:	481e      	ldr	r0, [pc, #120]	; (8002164 <_ZN7canzero4initEv+0x238>)
 80020ea:	f009 f8eb 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 80020ee:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10e      	bne.n	8002112 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80020f4:	2110      	movs	r1, #16
 80020f6:	481b      	ldr	r0, [pc, #108]	; (8002164 <_ZN7canzero4initEv+0x238>)
 80020f8:	f009 f8e4 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002106:	4817      	ldr	r0, [pc, #92]	; (8002164 <_ZN7canzero4initEv+0x238>)
 8002108:	f009 f8dc 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_ZN7canzero4initEv+0x1ea>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <_ZN7canzero4initEv+0x1ec>
 8002116:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 800211c:	f007 f93a 	bl	8009394 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002120:	2102      	movs	r1, #2
 8002122:	4811      	ldr	r0, [pc, #68]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 8002124:	f009 f8ce 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 8002128:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800212e:	2110      	movs	r1, #16
 8002130:	480d      	ldr	r0, [pc, #52]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 8002132:	f009 f8c7 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800213c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002140:	4809      	ldr	r0, [pc, #36]	; (8002168 <_ZN7canzero4initEv+0x23c>)
 8002142:	f009 f8bf 	bl	800b2c4 <HAL_CAN_ActivateNotification>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_ZN7canzero4initEv+0x224>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <_ZN7canzero4initEv+0x226>
 8002150:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8002156:	f007 f91d 	bl	8009394 <Error_Handler>
	}
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000db8 	.word	0x20000db8
 8002168:	20000de0 	.word	0x20000de0
 800216c:	08017eb0 	.word	0x08017eb0
 8002170:	08017e88 	.word	0x08017e88

08002174 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 31ff 	mov.w	r1, #4294967295
 8002186:	4618      	mov	r0, r3
 8002188:	f00e fa73 	bl	8010672 <osMutexAcquire>
	nodeStatus = new_status;
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <_ZN7canzero9setStatusE9cz_status+0x34>)
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f00e fab6 	bl	8010708 <osMutexRelease>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200007a0 	.word	0x200007a0
 80021a8:	200007a4 	.word	0x200007a4

080021ac <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <_ZN7canzero9getStatusEv+0x30>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ba:	4618      	mov	r0, r3
 80021bc:	f00e fa59 	bl	8010672 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <_ZN7canzero9getStatusEv+0x34>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <_ZN7canzero9getStatusEv+0x30>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00e fa9c 	bl	8010708 <osMutexRelease>
	return returnValue;
 80021d0:	79fb      	ldrb	r3, [r7, #7]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200007a0 	.word	0x200007a0
 80021e0:	200007a4 	.word	0x200007a4

080021e4 <_Z41__static_initialization_and_destruction_0ii>:
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10a      	bne.n	800220a <_Z41__static_initialization_and_destruction_0ii+0x26>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d105      	bne.n	800220a <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002200:	f00e f9b1 	bl	8010566 <osMutexNew>
 8002204:	4603      	mov	r3, r0
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08017ed8 	.word	0x08017ed8
 8002218:	200007a0 	.word	0x200007a0

0800221c <_GLOBAL__sub_I__ZN7canzero4initEv>:
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
 8002220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff ffdd 	bl	80021e4 <_Z41__static_initialization_and_destruction_0ii>
 800222a:	bd80      	pop	{r7, pc}

0800222c <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	; 0x38
 8002230:	af02      	add	r7, sp, #8
 8002232:	6078      	str	r0, [r7, #4]
	canzero::init();
 8002234:	f7ff fe7a 	bl	8001f2c <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	2318      	movs	r3, #24
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2300      	movs	r3, #0
 8002248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224c:	4939      	ldr	r1, [pc, #228]	; (8002334 <canzero_start+0x108>)
 800224e:	483a      	ldr	r0, [pc, #232]	; (8002338 <canzero_start+0x10c>)
 8002250:	f010 fafb 	bl	801284a <xTaskCreate>
 8002254:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	2b01      	cmp	r3, #1
 800225a:	d006      	beq.n	800226a <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 800225c:	f012 f8e2 	bl	8014424 <vPortEnterCritical>
 8002260:	4836      	ldr	r0, [pc, #216]	; (800233c <canzero_start+0x110>)
 8002262:	f00d ffeb 	bl	801023c <printf_>
 8002266:	f012 f90d 	bl	8014484 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2318      	movs	r3, #24
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227e:	4930      	ldr	r1, [pc, #192]	; (8002340 <canzero_start+0x114>)
 8002280:	4830      	ldr	r0, [pc, #192]	; (8002344 <canzero_start+0x118>)
 8002282:	f010 fae2 	bl	801284a <xTaskCreate>
 8002286:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	2b01      	cmp	r3, #1
 800228c:	d006      	beq.n	800229c <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 800228e:	f012 f8c9 	bl	8014424 <vPortEnterCritical>
 8002292:	482d      	ldr	r0, [pc, #180]	; (8002348 <canzero_start+0x11c>)
 8002294:	f00d ffd2 	bl	801023c <printf_>
 8002298:	f012 f8f4 	bl	8014484 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2318      	movs	r3, #24
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	4926      	ldr	r1, [pc, #152]	; (800234c <canzero_start+0x120>)
 80022b2:	4827      	ldr	r0, [pc, #156]	; (8002350 <canzero_start+0x124>)
 80022b4:	f010 fac9 	bl	801284a <xTaskCreate>
 80022b8:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d006      	beq.n	80022ce <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80022c0:	f012 f8b0 	bl	8014424 <vPortEnterCritical>
 80022c4:	4823      	ldr	r0, [pc, #140]	; (8002354 <canzero_start+0x128>)
 80022c6:	f00d ffb9 	bl	801023c <printf_>
 80022ca:	f012 f8db 	bl	8014484 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2318      	movs	r3, #24
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e2:	491d      	ldr	r1, [pc, #116]	; (8002358 <canzero_start+0x12c>)
 80022e4:	481d      	ldr	r0, [pc, #116]	; (800235c <canzero_start+0x130>)
 80022e6:	f010 fab0 	bl	801284a <xTaskCreate>
 80022ea:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d006      	beq.n	8002300 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 80022f2:	f012 f897 	bl	8014424 <vPortEnterCritical>
 80022f6:	481a      	ldr	r0, [pc, #104]	; (8002360 <canzero_start+0x134>)
 80022f8:	f00d ffa0 	bl	801023c <printf_>
 80022fc:	f012 f8c2 	bl	8014484 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	2328      	movs	r3, #40	; 0x28
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002314:	4913      	ldr	r1, [pc, #76]	; (8002364 <canzero_start+0x138>)
 8002316:	4814      	ldr	r0, [pc, #80]	; (8002368 <canzero_start+0x13c>)
 8002318:	f010 fa97 	bl	801284a <xTaskCreate>
 800231c:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d001      	beq.n	8002328 <canzero_start+0xfc>
		Error_Handler();
 8002324:	f007 f836 	bl	8009394 <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f00e f900 	bl	8010530 <osDelay>
 8002330:	e7fa      	b.n	8002328 <canzero_start+0xfc>
 8002332:	bf00      	nop
 8002334:	08017ccc 	.word	0x08017ccc
 8002338:	08001d89 	.word	0x08001d89
 800233c:	08017cd4 	.word	0x08017cd4
 8002340:	08017cf8 	.word	0x08017cf8
 8002344:	08001ab5 	.word	0x08001ab5
 8002348:	08017d04 	.word	0x08017d04
 800234c:	08017d2c 	.word	0x08017d2c
 8002350:	0800136d 	.word	0x0800136d
 8002354:	08017d38 	.word	0x08017d38
 8002358:	08017d68 	.word	0x08017d68
 800235c:	08001305 	.word	0x08001305
 8002360:	08017d74 	.word	0x08017d74
 8002364:	08017da4 	.word	0x08017da4
 8002368:	0800129b 	.word	0x0800129b

0800236c <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80023a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80023aa:	f012 fb9f 	bl	8014aec <roundf>
 80023ae:	eef0 7a40 	vmov.f32	s15, s0
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80023bc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023c0:	b0a2      	sub	sp, #136	; 0x88
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80023c8:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80023cc:	4619      	mov	r1, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023d4:	460b      	mov	r3, r1
 80023d6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80023ec:	7113      	strb	r3, [r2, #4]
 80023ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023f2:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023f6:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 80023f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002404:	3301      	adds	r3, #1
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	441a      	add	r2, r3
 800240c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002410:	3302      	adds	r3, #2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	441a      	add	r2, r3
 8002418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800241c:	3303      	adds	r3, #3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	4413      	add	r3, r2
 8002424:	2200      	movs	r2, #0
 8002426:	461c      	mov	r4, r3
 8002428:	4615      	mov	r5, r2
 800242a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800242e:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8002432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002436:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800243a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800243e:	3304      	adds	r3, #4
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2200      	movs	r2, #0
 8002446:	673b      	str	r3, [r7, #112]	; 0x70
 8002448:	677a      	str	r2, [r7, #116]	; 0x74
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002454:	0019      	movs	r1, r3
 8002456:	2000      	movs	r0, #0
 8002458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800245c:	3305      	adds	r3, #5
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2200      	movs	r2, #0
 8002464:	66bb      	str	r3, [r7, #104]	; 0x68
 8002466:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8002472:	0233      	lsls	r3, r6, #8
 8002474:	2200      	movs	r2, #0
 8002476:	eb10 0802 	adds.w	r8, r0, r2
 800247a:	eb41 0903 	adc.w	r9, r1, r3
 800247e:	eb14 0308 	adds.w	r3, r4, r8
 8002482:	663b      	str	r3, [r7, #96]	; 0x60
 8002484:	eb45 0309 	adc.w	r3, r5, r9
 8002488:	667b      	str	r3, [r7, #100]	; 0x64
 800248a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800248e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002492:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8002496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800249e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a2:	3306      	adds	r3, #6
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80024ac:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024ae:	f04f 0000 	mov.w	r0, #0
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b8:	0419      	lsls	r1, r3, #16
 80024ba:	2000      	movs	r0, #0
 80024bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c0:	3307      	adds	r3, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2200      	movs	r2, #0
 80024c8:	653b      	str	r3, [r7, #80]	; 0x50
 80024ca:	657a      	str	r2, [r7, #84]	; 0x54
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80024d6:	0633      	lsls	r3, r6, #24
 80024d8:	2200      	movs	r2, #0
 80024da:	eb10 0a02 	adds.w	sl, r0, r2
 80024de:	eb41 0b03 	adc.w	fp, r1, r3
 80024e2:	eb14 030a 	adds.w	r3, r4, sl
 80024e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024e8:	eb45 030b 	adc.w	r3, r5, fp
 80024ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80024f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80024fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024fe:	3307      	adds	r3, #7
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002508:	3306      	adds	r3, #6
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	441a      	add	r2, r3
 8002510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002514:	3305      	adds	r3, #5
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	441a      	add	r2, r3
 800251c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002520:	3304      	adds	r3, #4
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	061b      	lsls	r3, r3, #24
 8002526:	4413      	add	r3, r2
 8002528:	2200      	movs	r2, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
 800252c:	647a      	str	r2, [r7, #68]	; 0x44
 800252e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002532:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002536:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 800253a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800253e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002546:	3303      	adds	r3, #3
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2200      	movs	r2, #0
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	0019      	movs	r1, r3
 800255e:	2000      	movs	r0, #0
 8002560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002564:	3302      	adds	r3, #2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2200      	movs	r2, #0
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	637a      	str	r2, [r7, #52]	; 0x34
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800257a:	0233      	lsls	r3, r6, #8
 800257c:	2200      	movs	r2, #0
 800257e:	1886      	adds	r6, r0, r2
 8002580:	62be      	str	r6, [r7, #40]	; 0x28
 8002582:	eb41 0303 	adc.w	r3, r1, r3
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800258c:	460b      	mov	r3, r1
 800258e:	18e3      	adds	r3, r4, r3
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	4613      	mov	r3, r2
 8002594:	eb45 0303 	adc.w	r3, r5, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800259e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80025a2:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 80025a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025aa:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025b2:	3301      	adds	r3, #1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	f04f 0000 	mov.w	r0, #0
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	0419      	lsls	r1, r3, #16
 80025ca:	2000      	movs	r0, #0
 80025cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	617a      	str	r2, [r7, #20]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	693e      	ldr	r6, [r7, #16]
 80025e4:	0633      	lsls	r3, r6, #24
 80025e6:	2200      	movs	r2, #0
 80025e8:	1886      	adds	r6, r0, r2
 80025ea:	60be      	str	r6, [r7, #8]
 80025ec:	eb41 0303 	adc.w	r3, r1, r3
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80025f6:	460b      	mov	r3, r1
 80025f8:	18e3      	adds	r3, r4, r3
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	eb45 0303 	adc.w	r3, r5, r3
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800260c:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002614:	4618      	mov	r0, r3
 8002616:	3788      	adds	r7, #136	; 0x88
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800261e:	4770      	bx	lr

08002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002620:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d302      	bcc.n	800263e <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002638:	f640 73ff 	movw	r3, #4095	; 0xfff
 800263c:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	8af9      	ldrh	r1, [r7, #22]
 800264a:	2000      	movs	r0, #0
 800264c:	468a      	mov	sl, r1
 800264e:	4683      	mov	fp, r0
 8002650:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8002654:	2500      	movs	r5, #0
 8002656:	ea42 0804 	orr.w	r8, r2, r4
 800265a:	ea43 0905 	orr.w	r9, r3, r5
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800266e:	4770      	bx	lr

08002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	b293      	uxth	r3, r2
 8002682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002686:	81fb      	strh	r3, [r7, #14]
                return value;
 8002688:	89fb      	ldrh	r3, [r7, #14]
            }
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002696:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2200      	movs	r2, #0
 80026b4:	4698      	mov	r8, r3
 80026b6:	4691      	mov	r9, r2
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80026c4:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80026c8:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80026cc:	b294      	uxth	r4, r2
 80026ce:	2500      	movs	r5, #0
 80026d0:	ea40 0a04 	orr.w	sl, r0, r4
 80026d4:	ea41 0b05 	orr.w	fp, r1, r5
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80026de:	bf00      	nop
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026e8:	4770      	bx	lr
	...

080026ec <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b088      	sub	sp, #32
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6178      	str	r0, [r7, #20]
 80026f6:	6139      	str	r1, [r7, #16]
 80026f8:	60fa      	str	r2, [r7, #12]
 80026fa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80026fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002702:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80027a0 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	dd01      	ble.n	8002714 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 8002712:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002714:	edd7 7a02 	vldr	s15, [r7, #8]
 8002718:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027a8 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 800271c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d501      	bpl.n	800272a <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002728:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2599);
 800272a:	f640 2327 	movw	r3, #2599	; 0xa27
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff74 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002738:	edd7 7a02 	vldr	s15, [r7, #8]
 800273c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80027b0 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8002740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002744:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80027b4 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 8002748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800274c:	eeb0 0a47 	vmov.f32	s0, s14
 8002750:	f7ff fe24 	bl	800239c <_ZSt5roundf>
 8002754:	eef0 7a40 	vmov.f32	s15, s0
 8002758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800275c:	ee17 3a90 	vmov	r3, s15
 8002760:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	8bf9      	ldrh	r1, [r7, #30]
 800276a:	2000      	movs	r0, #0
 800276c:	4688      	mov	r8, r1
 800276e:	4681      	mov	r9, r0
 8002770:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002774:	6079      	str	r1, [r7, #4]
 8002776:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800277a:	6039      	str	r1, [r7, #0]
 800277c:	683c      	ldr	r4, [r7, #0]
 800277e:	2500      	movs	r5, #0
 8002780:	ea42 0a04 	orr.w	sl, r2, r4
 8002784:	ea43 0b05 	orr.w	fp, r3, r5
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2204      	movs	r2, #4
 8002792:	701a      	strb	r2, [r3, #0]
            }
 8002794:	bf00      	nop
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279e:	bf00      	nop
 80027a0:	440ad666 	.word	0x440ad666
 80027a4:	440ad666 	.word	0x440ad666
 80027a8:	c2c80000 	.word	0xc2c80000
 80027ac:	c2c80000 	.word	0xc2c80000
 80027b0:	42c80000 	.word	0x42c80000
 80027b4:	3c23d70a 	.word	0x3c23d70a

080027b8 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80027b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027bc:	b088      	sub	sp, #32
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6178      	str	r0, [r7, #20]
 80027c2:	6139      	str	r1, [r7, #16]
 80027c4:	60fa      	str	r2, [r7, #12]
 80027c6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80027ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800286c <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 80027d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	dd01      	ble.n	80027e0 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 80027de:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80027e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002874 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 80027e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d501      	bpl.n	80027f6 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 80027f4:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2598);
 80027f6:	f640 2326 	movw	r3, #2598	; 0xa26
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	6978      	ldr	r0, [r7, #20]
 8002800:	f7ff ff0e 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002804:	edd7 7a02 	vldr	s15, [r7, #8]
 8002808:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800287c <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 800280c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002810:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002880 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 8002814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002818:	eeb0 0a47 	vmov.f32	s0, s14
 800281c:	f7ff fdbe 	bl	800239c <_ZSt5roundf>
 8002820:	eef0 7a40 	vmov.f32	s15, s0
 8002824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002828:	ee17 3a90 	vmov	r3, s15
 800282c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	8bf9      	ldrh	r1, [r7, #30]
 8002836:	2000      	movs	r0, #0
 8002838:	4688      	mov	r8, r1
 800283a:	4681      	mov	r9, r0
 800283c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002840:	6079      	str	r1, [r7, #4]
 8002842:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002846:	6039      	str	r1, [r7, #0]
 8002848:	683c      	ldr	r4, [r7, #0]
 800284a:	2500      	movs	r5, #0
 800284c:	ea42 0a04 	orr.w	sl, r2, r4
 8002850:	ea43 0b05 	orr.w	fp, r3, r5
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2204      	movs	r2, #4
 800285e:	701a      	strb	r2, [r3, #0]
            }
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286a:	bf00      	nop
 800286c:	440ad666 	.word	0x440ad666
 8002870:	440ad666 	.word	0x440ad666
 8002874:	c2c80000 	.word	0xc2c80000
 8002878:	c2c80000 	.word	0xc2c80000
 800287c:	42c80000 	.word	0x42c80000
 8002880:	3c23d70a 	.word	0x3c23d70a

08002884 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002888:	b088      	sub	sp, #32
 800288a:	af00      	add	r7, sp, #0
 800288c:	6178      	str	r0, [r7, #20]
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	60fa      	str	r2, [r7, #12]
 8002892:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002896:	edd7 7a02 	vldr	s15, [r7, #8]
 800289a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002938 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 800289e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	dd01      	ble.n	80028ac <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 80028a8:	4b24      	ldr	r3, [pc, #144]	; (800293c <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 80028aa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80028ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002940 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 80028b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d501      	bpl.n	80028c2 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 80028c0:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2597);
 80028c2:	f640 2325 	movw	r3, #2597	; 0xa25
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	6939      	ldr	r1, [r7, #16]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff fea8 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80028d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002948 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 80028d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028dc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800294c <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 80028e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028e4:	eeb0 0a47 	vmov.f32	s0, s14
 80028e8:	f7ff fd58 	bl	800239c <_ZSt5roundf>
 80028ec:	eef0 7a40 	vmov.f32	s15, s0
 80028f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f4:	ee17 3a90 	vmov	r3, s15
 80028f8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	8bf9      	ldrh	r1, [r7, #30]
 8002902:	2000      	movs	r0, #0
 8002904:	4688      	mov	r8, r1
 8002906:	4681      	mov	r9, r0
 8002908:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800290c:	6079      	str	r1, [r7, #4]
 800290e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002912:	6039      	str	r1, [r7, #0]
 8002914:	683c      	ldr	r4, [r7, #0]
 8002916:	2500      	movs	r5, #0
 8002918:	ea42 0a04 	orr.w	sl, r2, r4
 800291c:	ea43 0b05 	orr.w	fp, r3, r5
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2204      	movs	r2, #4
 800292a:	701a      	strb	r2, [r3, #0]
            }
 800292c:	bf00      	nop
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002936:	bf00      	nop
 8002938:	440ad666 	.word	0x440ad666
 800293c:	440ad666 	.word	0x440ad666
 8002940:	c2c80000 	.word	0xc2c80000
 8002944:	c2c80000 	.word	0xc2c80000
 8002948:	42c80000 	.word	0x42c80000
 800294c:	3c23d70a 	.word	0x3c23d70a

08002950 <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2592);
 8002960:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fe59 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2200      	movs	r2, #0
 800297c:	4698      	mov	r8, r3
 800297e:	4691      	mov	r9, r2
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800298c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002990:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002994:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002998:	2500      	movs	r5, #0
 800299a:	ea40 0a04 	orr.w	sl, r0, r4
 800299e:	ea41 0b05 	orr.w	fp, r1, r5
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	701a      	strb	r2, [r3, #0]
            }
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029b8 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b088      	sub	sp, #32
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6178      	str	r0, [r7, #20]
 80029c2:	6139      	str	r1, [r7, #16]
 80029c4:	60fa      	str	r2, [r7, #12]
 80029c6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ce:	d302      	bcc.n	80029d6 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80029d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80029d4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 80029d6:	f240 4369 	movw	r3, #1129	; 0x469
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff fe1e 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	69f9      	ldr	r1, [r7, #28]
 80029f0:	2000      	movs	r0, #0
 80029f2:	468a      	mov	sl, r1
 80029f4:	4683      	mov	fp, r0
 80029f6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80029fa:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80029fe:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002a02:	0424      	lsls	r4, r4, #16
 8002a04:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002a08:	ea42 0104 	orr.w	r1, r2, r4
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	432b      	orrs	r3, r5
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a18:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2205      	movs	r2, #5
 8002a20:	701a      	strb	r2, [r3, #0]
            }
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a2c <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 8002a3c:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff fdeb 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2200      	movs	r2, #0
 8002a58:	4698      	mov	r8, r3
 8002a5a:	4691      	mov	r9, r2
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002a68:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a6c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002a70:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002a74:	2500      	movs	r5, #0
 8002a76:	ea40 0a04 	orr.w	sl, r0, r4
 8002a7a:	ea41 0b05 	orr.w	fp, r1, r5
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2203      	movs	r2, #3
 8002a88:	701a      	strb	r2, [r3, #0]
            }
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a94 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6178      	str	r0, [r7, #20]
 8002a9e:	6139      	str	r1, [r7, #16]
 8002aa0:	60fa      	str	r2, [r7, #12]
 8002aa2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aaa:	d302      	bcc.n	8002ab2 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002aac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002ab0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 8002ab2:	f240 4367 	movw	r3, #1127	; 0x467
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	6939      	ldr	r1, [r7, #16]
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f7ff fdb0 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	2000      	movs	r0, #0
 8002ace:	468a      	mov	sl, r1
 8002ad0:	4683      	mov	fp, r0
 8002ad2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002ad6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002ada:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002ade:	0424      	lsls	r4, r4, #16
 8002ae0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002ae4:	ea42 0104 	orr.w	r1, r2, r4
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	432b      	orrs	r3, r5
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002af4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2205      	movs	r2, #5
 8002afc:	701a      	strb	r2, [r3, #0]
            }
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b08 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8002b18:	f240 4366 	movw	r3, #1126	; 0x466
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fd7d 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2200      	movs	r2, #0
 8002b34:	4698      	mov	r8, r3
 8002b36:	4691      	mov	r9, r2
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b44:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b48:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b4c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b50:	2500      	movs	r5, #0
 8002b52:	ea40 0a04 	orr.w	sl, r0, r4
 8002b56:	ea41 0b05 	orr.w	fp, r1, r5
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	701a      	strb	r2, [r3, #0]
            }
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b70 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b74:	b088      	sub	sp, #32
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6178      	str	r0, [r7, #20]
 8002b7a:	6139      	str	r1, [r7, #16]
 8002b7c:	60fa      	str	r2, [r7, #12]
 8002b7e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002b80:	897b      	ldrh	r3, [r7, #10]
 8002b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b86:	d902      	bls.n	8002b8e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	2b7c      	cmp	r3, #124	; 0x7c
 8002b92:	d801      	bhi.n	8002b98 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002b94:	237d      	movs	r3, #125	; 0x7d
 8002b96:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 8002b98:	f240 4364 	movw	r3, #1124	; 0x464
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6939      	ldr	r1, [r7, #16]
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f7ff fd3d 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	8bf9      	ldrh	r1, [r7, #30]
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	4688      	mov	r8, r1
 8002bb6:	4681      	mov	r9, r0
 8002bb8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002bbc:	6079      	str	r1, [r7, #4]
 8002bbe:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002bc2:	6039      	str	r1, [r7, #0]
 8002bc4:	683c      	ldr	r4, [r7, #0]
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	ea42 0a04 	orr.w	sl, r2, r4
 8002bcc:	ea43 0b05 	orr.w	fp, r3, r5
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	701a      	strb	r2, [r3, #0]
            }
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002be6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 8002bf0:	6839      	ldr	r1, [r7, #0]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fd3c 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f240 4364 	movw	r3, #1124	; 0x464
 8002c00:	429a      	cmp	r2, r3
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d000      	beq.n	8002c10 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002c0e:	e7fe      	b.n	8002c0e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	0c02      	lsrs	r2, r0, #16
 8002c20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c24:	0c0b      	lsrs	r3, r1, #16
 8002c26:	4613      	mov	r3, r2
 8002c28:	81fb      	strh	r3, [r7, #14]
                return value;
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
            }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 8002c44:	f240 4363 	movw	r3, #1123	; 0x463
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff fce7 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4698      	mov	r8, r3
 8002c62:	4691      	mov	r9, r2
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002c70:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002c74:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002c78:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002c7c:	2500      	movs	r5, #0
 8002c7e:	ea40 0a04 	orr.w	sl, r0, r4
 8002c82:	ea41 0b05 	orr.w	fp, r1, r5
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	701a      	strb	r2, [r3, #0]
            }
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c9c <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 8002ca6:	6839      	ldr	r1, [r7, #0]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fce1 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f240 4363 	movw	r3, #1123	; 0x463
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d000      	beq.n	8002cc6 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002cc4:	e7fe      	b.n	8002cc4 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	0c02      	lsrs	r2, r0, #16
 8002cd6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cda:	0c0b      	lsrs	r3, r1, #16
 8002cdc:	4613      	mov	r3, r2
 8002cde:	73fb      	strb	r3, [r7, #15]
                return value;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b088      	sub	sp, #32
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6178      	str	r0, [r7, #20]
 8002cf6:	6139      	str	r1, [r7, #16]
 8002cf8:	60fa      	str	r2, [r7, #12]
 8002cfa:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8002cfc:	f240 4362 	movw	r3, #1122	; 0x462
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	6939      	ldr	r1, [r7, #16]
 8002d04:	6978      	ldr	r0, [r7, #20]
 8002d06:	f7ff fc8b 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	69f9      	ldr	r1, [r7, #28]
 8002d16:	2000      	movs	r0, #0
 8002d18:	468a      	mov	sl, r1
 8002d1a:	4683      	mov	fp, r0
 8002d1c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002d20:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002d26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d2a:	ea08 0400 	and.w	r4, r8, r0
 8002d2e:	ea09 0501 	and.w	r5, r9, r1
 8002d32:	ea42 0104 	orr.w	r1, r2, r4
 8002d36:	6039      	str	r1, [r7, #0]
 8002d38:	432b      	orrs	r3, r5
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d42:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2206      	movs	r2, #6
 8002d4a:	701a      	strb	r2, [r3, #0]
            }
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d56:	bf00      	nop
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d60:	b086      	sub	sp, #24
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8002d6c:	f240 4361 	movw	r3, #1121	; 0x461
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fc53 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2200      	movs	r2, #0
 8002d88:	4698      	mov	r8, r3
 8002d8a:	4691      	mov	r9, r2
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002d98:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002d9c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002da0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002da4:	2500      	movs	r5, #0
 8002da6:	ea40 0a04 	orr.w	sl, r0, r4
 8002daa:	ea41 0b05 	orr.w	fp, r1, r5
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	701a      	strb	r2, [r3, #0]
            }
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dc4 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 8002dd4:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff fc1f 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2200      	movs	r2, #0
 8002df0:	4698      	mov	r8, r3
 8002df2:	4691      	mov	r9, r2
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002e00:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002e04:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002e08:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002e0c:	2500      	movs	r5, #0
 8002e0e:	ea40 0a04 	orr.w	sl, r0, r4
 8002e12:	ea41 0b05 	orr.w	fp, r1, r5
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	701a      	strb	r2, [r3, #0]
            }
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e2c <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6178      	str	r0, [r7, #20]
 8002e36:	6139      	str	r1, [r7, #16]
 8002e38:	60fa      	str	r2, [r7, #12]
 8002e3a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e42:	d302      	bcc.n	8002e4a <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002e44:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002e48:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 8002e4a:	f240 4359 	movw	r3, #1113	; 0x459
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6939      	ldr	r1, [r7, #16]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff fbe4 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	69f9      	ldr	r1, [r7, #28]
 8002e64:	2000      	movs	r0, #0
 8002e66:	468a      	mov	sl, r1
 8002e68:	4683      	mov	fp, r0
 8002e6a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002e6e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002e72:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002e76:	0424      	lsls	r4, r4, #16
 8002e78:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002e7c:	ea42 0104 	orr.w	r1, r2, r4
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	432b      	orrs	r3, r5
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e8c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2205      	movs	r2, #5
 8002e94:	701a      	strb	r2, [r3, #0]
            }
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ea0 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002eb0:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff fbb1 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4698      	mov	r8, r3
 8002ece:	4691      	mov	r9, r2
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002edc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ee0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ee4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ee8:	2500      	movs	r5, #0
 8002eea:	ea40 0a04 	orr.w	sl, r0, r4
 8002eee:	ea41 0b05 	orr.w	fp, r1, r5
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2203      	movs	r2, #3
 8002efc:	701a      	strb	r2, [r3, #0]
            }
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f08 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6178      	str	r0, [r7, #20]
 8002f12:	6139      	str	r1, [r7, #16]
 8002f14:	60fa      	str	r2, [r7, #12]
 8002f16:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1e:	d302      	bcc.n	8002f26 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002f20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002f24:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8002f26:	f240 4357 	movw	r3, #1111	; 0x457
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6939      	ldr	r1, [r7, #16]
 8002f2e:	6978      	ldr	r0, [r7, #20]
 8002f30:	f7ff fb76 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	2000      	movs	r0, #0
 8002f42:	468a      	mov	sl, r1
 8002f44:	4683      	mov	fp, r0
 8002f46:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002f4a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002f4e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002f52:	0424      	lsls	r4, r4, #16
 8002f54:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002f58:	ea42 0104 	orr.w	r1, r2, r4
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	432b      	orrs	r3, r5
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f68:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2205      	movs	r2, #5
 8002f70:	701a      	strb	r2, [r3, #0]
            }
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f7c <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002f8c:	f240 4356 	movw	r3, #1110	; 0x456
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fb43 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002f9a:	78fb      	ldrb	r3, [r7, #3]
 8002f9c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4698      	mov	r8, r3
 8002faa:	4691      	mov	r9, r2
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002fb8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002fbc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002fc0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	ea40 0a04 	orr.w	sl, r0, r4
 8002fca:	ea41 0b05 	orr.w	fp, r1, r5
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	701a      	strb	r2, [r3, #0]
            }
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fe4 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b088      	sub	sp, #32
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6178      	str	r0, [r7, #20]
 8002fee:	6139      	str	r1, [r7, #16]
 8002ff0:	60fa      	str	r2, [r7, #12]
 8002ff2:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffa:	d902      	bls.n	8003002 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003000:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	2b7c      	cmp	r3, #124	; 0x7c
 8003006:	d801      	bhi.n	800300c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003008:	237d      	movs	r3, #125	; 0x7d
 800300a:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 800300c:	f240 4354 	movw	r3, #1108	; 0x454
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6939      	ldr	r1, [r7, #16]
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff fb03 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	8bf9      	ldrh	r1, [r7, #30]
 8003026:	2000      	movs	r0, #0
 8003028:	4688      	mov	r8, r1
 800302a:	4681      	mov	r9, r0
 800302c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003030:	6079      	str	r1, [r7, #4]
 8003032:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003036:	6039      	str	r1, [r7, #0]
 8003038:	683c      	ldr	r4, [r7, #0]
 800303a:	2500      	movs	r5, #0
 800303c:	ea42 0a04 	orr.w	sl, r2, r4
 8003040:	ea43 0b05 	orr.w	fp, r3, r5
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2204      	movs	r2, #4
 800304e:	701a      	strb	r2, [r3, #0]
            }
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800305a <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fb02 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	f240 4354 	movw	r3, #1108	; 0x454
 8003074:	429a      	cmp	r2, r3
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d000      	beq.n	8003084 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003082:	e7fe      	b.n	8003082 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	0c02      	lsrs	r2, r0, #16
 8003094:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003098:	0c0b      	lsrs	r3, r1, #16
 800309a:	4613      	mov	r3, r2
 800309c:	81fb      	strh	r3, [r7, #14]
                return value;
 800309e:	89fb      	ldrh	r3, [r7, #14]
            }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 80030b8:	f240 4353 	movw	r3, #1107	; 0x453
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff faad 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2200      	movs	r2, #0
 80030d4:	4698      	mov	r8, r3
 80030d6:	4691      	mov	r9, r2
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80030e4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80030e8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80030ec:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80030f0:	2500      	movs	r5, #0
 80030f2:	ea40 0a04 	orr.w	sl, r0, r4
 80030f6:	ea41 0b05 	orr.w	fp, r1, r5
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2203      	movs	r2, #3
 8003104:	701a      	strb	r2, [r3, #0]
            }
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003110 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 800311a:	6839      	ldr	r1, [r7, #0]
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff faa7 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	f240 4353 	movw	r3, #1107	; 0x453
 800312a:	429a      	cmp	r2, r3
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d000      	beq.n	800313a <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003138:	e7fe      	b.n	8003138 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	0c02      	lsrs	r2, r0, #16
 800314a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800314e:	0c0b      	lsrs	r3, r1, #16
 8003150:	4613      	mov	r3, r2
 8003152:	73fb      	strb	r3, [r7, #15]
                return value;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003164:	b088      	sub	sp, #32
 8003166:	af00      	add	r7, sp, #0
 8003168:	6178      	str	r0, [r7, #20]
 800316a:	6139      	str	r1, [r7, #16]
 800316c:	60fa      	str	r2, [r7, #12]
 800316e:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8003170:	f240 4352 	movw	r3, #1106	; 0x452
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6939      	ldr	r1, [r7, #16]
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	f7ff fa51 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	69f9      	ldr	r1, [r7, #28]
 800318a:	2000      	movs	r0, #0
 800318c:	468a      	mov	sl, r1
 800318e:	4683      	mov	fp, r0
 8003190:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003194:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 800319a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800319e:	ea08 0400 	and.w	r4, r8, r0
 80031a2:	ea09 0501 	and.w	r5, r9, r1
 80031a6:	ea42 0104 	orr.w	r1, r2, r4
 80031aa:	6039      	str	r1, [r7, #0]
 80031ac:	432b      	orrs	r3, r5
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031b6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2206      	movs	r2, #6
 80031be:	701a      	strb	r2, [r3, #0]
            }
 80031c0:	bf00      	nop
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ca:	bf00      	nop
 80031cc:	ffff0000 	.word	0xffff0000

080031d0 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 80031e0:	f240 4351 	movw	r3, #1105	; 0x451
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fa19 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2200      	movs	r2, #0
 80031fc:	4698      	mov	r8, r3
 80031fe:	4691      	mov	r9, r2
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800320c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003210:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003214:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003218:	2500      	movs	r5, #0
 800321a:	ea40 0a04 	orr.w	sl, r0, r4
 800321e:	ea41 0b05 	orr.w	fp, r1, r5
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	701a      	strb	r2, [r3, #0]
            }
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003238 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8003248:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff f9e5 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2200      	movs	r2, #0
 8003264:	4698      	mov	r8, r3
 8003266:	4691      	mov	r9, r2
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003274:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003278:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800327c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003280:	2500      	movs	r5, #0
 8003282:	ea40 0a04 	orr.w	sl, r0, r4
 8003286:	ea41 0b05 	orr.w	fp, r1, r5
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	701a      	strb	r2, [r3, #0]
            }
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032a0 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6178      	str	r0, [r7, #20]
 80032aa:	6139      	str	r1, [r7, #16]
 80032ac:	60fa      	str	r2, [r7, #12]
 80032ae:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b6:	d302      	bcc.n	80032be <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 80032b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80032bc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 80032be:	f240 4331 	movw	r3, #1073	; 0x431
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff f9aa 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	69f9      	ldr	r1, [r7, #28]
 80032d8:	2000      	movs	r0, #0
 80032da:	468a      	mov	sl, r1
 80032dc:	4683      	mov	fp, r0
 80032de:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80032e2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80032e6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80032ea:	0424      	lsls	r4, r4, #16
 80032ec:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80032f0:	ea42 0104 	orr.w	r1, r2, r4
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	432b      	orrs	r3, r5
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003300:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2205      	movs	r2, #5
 8003308:	701a      	strb	r2, [r3, #0]
            }
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003314 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b088      	sub	sp, #32
 800331a:	af00      	add	r7, sp, #0
 800331c:	6178      	str	r0, [r7, #20]
 800331e:	6139      	str	r1, [r7, #16]
 8003320:	60fa      	str	r2, [r7, #12]
 8003322:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8003324:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	6978      	ldr	r0, [r7, #20]
 800332e:	f7ff f977 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	69f9      	ldr	r1, [r7, #28]
 800333e:	2000      	movs	r0, #0
 8003340:	468a      	mov	sl, r1
 8003342:	4683      	mov	fp, r0
 8003344:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003348:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 800334e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003352:	ea08 0400 	and.w	r4, r8, r0
 8003356:	ea09 0501 	and.w	r5, r9, r1
 800335a:	ea42 0104 	orr.w	r1, r2, r4
 800335e:	6039      	str	r1, [r7, #0]
 8003360:	432b      	orrs	r3, r5
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	e9d7 1200 	ldrd	r1, r2, [r7]
 800336a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2206      	movs	r2, #6
 8003372:	701a      	strb	r2, [r3, #0]
            }
 8003374:	bf00      	nop
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800337e:	bf00      	nop
 8003380:	ffff0000 	.word	0xffff0000

08003384 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d305      	bcc.n	80033a8 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 80033a8:	f240 4321 	movw	r3, #1057	; 0x421
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff f935 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80033b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	040b      	lsls	r3, r1, #16
 80033d2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80033d6:	0402      	lsls	r2, r0, #16
 80033d8:	ea48 0402 	orr.w	r4, r8, r2
 80033dc:	ea49 0503 	orr.w	r5, r9, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	701a      	strb	r2, [r3, #0]
            }
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080033f6 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80033f6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003404:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d305      	bcc.n	800341a <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 800340e:	f04f 32ff 	mov.w	r2, #4294967295
 8003412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003416:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 800341a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff f8fc 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800342c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003436:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	040b      	lsls	r3, r1, #16
 8003444:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003448:	0402      	lsls	r2, r0, #16
 800344a:	ea48 0402 	orr.w	r4, r8, r2
 800344e:	ea49 0503 	orr.w	r5, r9, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2208      	movs	r2, #8
 800345c:	701a      	strb	r2, [r3, #0]
            }
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003468 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8003478:	f240 4316 	movw	r3, #1046	; 0x416
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff f8cd 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2200      	movs	r2, #0
 8003494:	4698      	mov	r8, r3
 8003496:	4691      	mov	r9, r2
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80034a4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034a8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034ac:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034b0:	2500      	movs	r5, #0
 80034b2:	ea40 0a04 	orr.w	sl, r0, r4
 80034b6:	ea41 0b05 	orr.w	fp, r1, r5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2203      	movs	r2, #3
 80034c4:	701a      	strb	r2, [r3, #0]
            }
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034d0 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80034d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d4:	b086      	sub	sp, #24
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
 80034de:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 80034e0:	f240 4315 	movw	r3, #1045	; 0x415
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff f899 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
 80034fa:	2200      	movs	r2, #0
 80034fc:	4698      	mov	r8, r3
 80034fe:	4691      	mov	r9, r2
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800350c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003510:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003514:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003518:	2500      	movs	r5, #0
 800351a:	ea40 0a04 	orr.w	sl, r0, r4
 800351e:	ea41 0b05 	orr.w	fp, r1, r5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2203      	movs	r2, #3
 800352c:	701a      	strb	r2, [r3, #0]
            }
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003538 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b088      	sub	sp, #32
 800353e:	af00      	add	r7, sp, #0
 8003540:	6178      	str	r0, [r7, #20]
 8003542:	6139      	str	r1, [r7, #16]
 8003544:	60fa      	str	r2, [r7, #12]
 8003546:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800354e:	d302      	bcc.n	8003556 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8003550:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003554:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 8003556:	f240 4314 	movw	r3, #1044	; 0x414
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	6939      	ldr	r1, [r7, #16]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7ff f85e 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	69f9      	ldr	r1, [r7, #28]
 8003570:	2000      	movs	r0, #0
 8003572:	468a      	mov	sl, r1
 8003574:	4683      	mov	fp, r0
 8003576:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800357a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800357e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003582:	0424      	lsls	r4, r4, #16
 8003584:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003588:	ea42 0104 	orr.w	r1, r2, r4
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	432b      	orrs	r3, r5
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003598:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2205      	movs	r2, #5
 80035a0:	701a      	strb	r2, [r3, #0]
            }
 80035a2:	bf00      	nop
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035ac <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6178      	str	r0, [r7, #20]
 80035b6:	6139      	str	r1, [r7, #16]
 80035b8:	60fa      	str	r2, [r7, #12]
 80035ba:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80035be:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003654 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80035c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	dd01      	ble.n	80035d4 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80035d2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80035d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e0:	d502      	bpl.n	80035e8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 80035e8:	f240 4313 	movw	r3, #1043	; 0x413
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	6939      	ldr	r1, [r7, #16]
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7ff f815 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80035f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fa:	eddf 6a18 	vldr	s13, [pc, #96]	; 800365c <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80035fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003602:	eeb0 0a47 	vmov.f32	s0, s14
 8003606:	f7fe fec9 	bl	800239c <_ZSt5roundf>
 800360a:	eef0 7a40 	vmov.f32	s15, s0
 800360e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003612:	ee17 3a90 	vmov	r3, s15
 8003616:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	8bf9      	ldrh	r1, [r7, #30]
 8003620:	2000      	movs	r0, #0
 8003622:	4688      	mov	r8, r1
 8003624:	4681      	mov	r9, r0
 8003626:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800362a:	6079      	str	r1, [r7, #4]
 800362c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	683c      	ldr	r4, [r7, #0]
 8003634:	2500      	movs	r5, #0
 8003636:	ea42 0a04 	orr.w	sl, r2, r4
 800363a:	ea43 0b05 	orr.w	fp, r3, r5
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2204      	movs	r2, #4
 8003648:	701a      	strb	r2, [r3, #0]
            }
 800364a:	bf00      	nop
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003654:	428311ec 	.word	0x428311ec
 8003658:	428311ec 	.word	0x428311ec
 800365c:	3a83126f 	.word	0x3a83126f

08003660 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b088      	sub	sp, #32
 8003666:	af00      	add	r7, sp, #0
 8003668:	6178      	str	r0, [r7, #20]
 800366a:	6139      	str	r1, [r7, #16]
 800366c:	60fa      	str	r2, [r7, #12]
 800366e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003672:	edd7 7a02 	vldr	s15, [r7, #8]
 8003676:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003714 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	dd01      	ble.n	8003688 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8003686:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003688:	edd7 7a02 	vldr	s15, [r7, #8]
 800368c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	d501      	bpl.n	800369e <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 800369a:	4b20      	ldr	r3, [pc, #128]	; (800371c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 800369c:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 800369e:	f240 4312 	movw	r3, #1042	; 0x412
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6939      	ldr	r1, [r7, #16]
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7fe ffba 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80036ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80036b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036b8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003720 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80036bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036c0:	eeb0 0a47 	vmov.f32	s0, s14
 80036c4:	f7fe fe6a 	bl	800239c <_ZSt5roundf>
 80036c8:	eef0 7a40 	vmov.f32	s15, s0
 80036cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d0:	ee17 3a90 	vmov	r3, s15
 80036d4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	8bf9      	ldrh	r1, [r7, #30]
 80036de:	2000      	movs	r0, #0
 80036e0:	4688      	mov	r8, r1
 80036e2:	4681      	mov	r9, r0
 80036e4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80036e8:	6079      	str	r1, [r7, #4]
 80036ea:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80036ee:	6039      	str	r1, [r7, #0]
 80036f0:	683c      	ldr	r4, [r7, #0]
 80036f2:	2500      	movs	r5, #0
 80036f4:	ea42 0a04 	orr.w	sl, r2, r4
 80036f8:	ea43 0b05 	orr.w	fp, r3, r5
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2204      	movs	r2, #4
 8003706:	701a      	strb	r2, [r3, #0]
            }
 8003708:	bf00      	nop
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003712:	bf00      	nop
 8003714:	441c5666 	.word	0x441c5666
 8003718:	441c5666 	.word	0x441c5666
 800371c:	c1f00000 	.word	0xc1f00000
 8003720:	3c23d70a 	.word	0x3c23d70a

08003724 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b088      	sub	sp, #32
 800372a:	af00      	add	r7, sp, #0
 800372c:	6178      	str	r0, [r7, #20]
 800372e:	6139      	str	r1, [r7, #16]
 8003730:	60fa      	str	r2, [r7, #12]
 8003732:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 800373e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 8003740:	f240 4311 	movw	r3, #1041	; 0x411
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6939      	ldr	r1, [r7, #16]
 8003748:	6978      	ldr	r0, [r7, #20]
 800374a:	f7fe ff69 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	2000      	movs	r0, #0
 800375e:	4688      	mov	r8, r1
 8003760:	4681      	mov	r9, r0
 8003762:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003766:	6079      	str	r1, [r7, #4]
 8003768:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	683c      	ldr	r4, [r7, #0]
 8003770:	2500      	movs	r5, #0
 8003772:	ea42 0a04 	orr.w	sl, r2, r4
 8003776:	ea43 0b05 	orr.w	fp, r3, r5
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2204      	movs	r2, #4
 8003784:	701a      	strb	r2, [r3, #0]
            }
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003790:	0003fffc 	.word	0x0003fffc

08003794 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af00      	add	r7, sp, #0
 800379c:	6178      	str	r0, [r7, #20]
 800379e:	6139      	str	r1, [r7, #16]
 80037a0:	60fa      	str	r2, [r7, #12]
 80037a2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80037a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037aa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003848 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80037ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b6:	dd01      	ble.n	80037bc <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80037ba:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80037bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c8:	d502      	bpl.n	80037d0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 80037d0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6939      	ldr	r1, [r7, #16]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7fe ff21 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80037de:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80037e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037ea:	eeb0 0a47 	vmov.f32	s0, s14
 80037ee:	f7fe fdd5 	bl	800239c <_ZSt5roundf>
 80037f2:	eef0 7a40 	vmov.f32	s15, s0
 80037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80037fe:	793b      	ldrb	r3, [r7, #4]
 8003800:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003808:	7ffb      	ldrb	r3, [r7, #31]
 800380a:	2200      	movs	r2, #0
 800380c:	4698      	mov	r8, r3
 800380e:	4691      	mov	r9, r2
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800381c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003820:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003824:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003828:	2500      	movs	r5, #0
 800382a:	ea40 0a04 	orr.w	sl, r0, r4
 800382e:	ea41 0b05 	orr.w	fp, r1, r5
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2203      	movs	r2, #3
 800383c:	701a      	strb	r2, [r3, #0]
            }
 800383e:	bf00      	nop
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003848:	42c80000 	.word	0x42c80000
 800384c:	42c80000 	.word	0x42c80000

08003850 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	6178      	str	r0, [r7, #20]
 800385a:	6139      	str	r1, [r7, #16]
 800385c:	60fa      	str	r2, [r7, #12]
 800385e:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 8003860:	2321      	movs	r3, #33	; 0x21
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	6939      	ldr	r1, [r7, #16]
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7fe feda 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800386c:	897b      	ldrh	r3, [r7, #10]
 800386e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	8bf9      	ldrh	r1, [r7, #30]
 8003878:	2000      	movs	r0, #0
 800387a:	4688      	mov	r8, r1
 800387c:	4681      	mov	r9, r0
 800387e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003882:	6079      	str	r1, [r7, #4]
 8003884:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	683c      	ldr	r4, [r7, #0]
 800388c:	2500      	movs	r5, #0
 800388e:	ea42 0a04 	orr.w	sl, r2, r4
 8003892:	ea43 0b05 	orr.w	fp, r3, r5
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2204      	movs	r2, #4
 80038a0:	701a      	strb	r2, [r3, #0]
            }
 80038a2:	bf00      	nop
 80038a4:	3720      	adds	r7, #32
 80038a6:	46bd      	mov	sp, r7
 80038a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038ac <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fe fed9 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b21      	cmp	r3, #33	; 0x21
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d000      	beq.n	80038d0 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80038ce:	e7fe      	b.n	80038ce <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	0c02      	lsrs	r2, r0, #16
 80038e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80038e4:	0c0b      	lsrs	r3, r1, #16
 80038e6:	4613      	mov	r3, r2
 80038e8:	81fb      	strh	r3, [r7, #14]
                return value;
 80038ea:	89fb      	ldrh	r3, [r7, #14]
            }
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80038f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8003904:	2320      	movs	r3, #32
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7fe fe88 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2200      	movs	r2, #0
 800391e:	4698      	mov	r8, r3
 8003920:	4691      	mov	r9, r2
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800392e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003932:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003936:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800393a:	2500      	movs	r5, #0
 800393c:	ea40 0a04 	orr.w	sl, r0, r4
 8003940:	ea41 0b05 	orr.w	fp, r1, r5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	701a      	strb	r2, [r3, #0]
            }
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800395a <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe fe82 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800396c:	4603      	mov	r3, r0
 800396e:	2b20      	cmp	r3, #32
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d000      	beq.n	800397e <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 800397c:	e7fe      	b.n	800397c <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	0c02      	lsrs	r2, r0, #16
 800398e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003992:	0c0b      	lsrs	r3, r1, #16
 8003994:	4613      	mov	r3, r2
 8003996:	73fb      	strb	r3, [r7, #15]
                return value;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
            }
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80039a2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6178      	str	r0, [r7, #20]
 80039ac:	6139      	str	r1, [r7, #16]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 80039b2:	2310      	movs	r3, #16
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f7fe fe31 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	8bf9      	ldrh	r1, [r7, #30]
 80039ca:	2000      	movs	r0, #0
 80039cc:	4688      	mov	r8, r1
 80039ce:	4681      	mov	r9, r0
 80039d0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80039d4:	6079      	str	r1, [r7, #4]
 80039d6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80039da:	6039      	str	r1, [r7, #0]
 80039dc:	683c      	ldr	r4, [r7, #0]
 80039de:	2500      	movs	r5, #0
 80039e0:	ea42 0a04 	orr.w	sl, r2, r4
 80039e4:	ea43 0b05 	orr.w	fp, r3, r5
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2204      	movs	r2, #4
 80039f2:	701a      	strb	r2, [r3, #0]
            }
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039fe <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe fe30 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d000      	beq.n	8003a22 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8003a20:	e7fe      	b.n	8003a20 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	0c02      	lsrs	r2, r0, #16
 8003a32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a36:	0c0b      	lsrs	r3, r1, #16
 8003a38:	4613      	mov	r3, r2
 8003a3a:	81fb      	strh	r3, [r7, #14]
                return value;
 8003a3c:	89fb      	ldrh	r3, [r7, #14]
            }
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003a46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6178      	str	r0, [r7, #20]
 8003a50:	6139      	str	r1, [r7, #16]
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 8003a56:	2305      	movs	r3, #5
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f7fe fddf 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	8bf9      	ldrh	r1, [r7, #30]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	4688      	mov	r8, r1
 8003a72:	4681      	mov	r9, r0
 8003a74:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003a78:	6079      	str	r1, [r7, #4]
 8003a7a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003a7e:	6039      	str	r1, [r7, #0]
 8003a80:	683c      	ldr	r4, [r7, #0]
 8003a82:	2500      	movs	r5, #0
 8003a84:	ea42 0a04 	orr.w	sl, r2, r4
 8003a88:	ea43 0b05 	orr.w	fp, r3, r5
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2204      	movs	r2, #4
 8003a96:	701a      	strb	r2, [r3, #0]
            }
 8003a98:	bf00      	nop
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003aa2 <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003aa2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6178      	str	r0, [r7, #20]
 8003aac:	6139      	str	r1, [r7, #16]
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	6939      	ldr	r1, [r7, #16]
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f7fe fdb1 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003abe:	897b      	ldrh	r3, [r7, #10]
 8003ac0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	8bf9      	ldrh	r1, [r7, #30]
 8003aca:	2000      	movs	r0, #0
 8003acc:	4688      	mov	r8, r1
 8003ace:	4681      	mov	r9, r0
 8003ad0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003ad4:	6079      	str	r1, [r7, #4]
 8003ad6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003ada:	6039      	str	r1, [r7, #0]
 8003adc:	683c      	ldr	r4, [r7, #0]
 8003ade:	2500      	movs	r5, #0
 8003ae0:	ea42 0a04 	orr.w	sl, r2, r4
 8003ae4:	ea43 0b05 	orr.w	fp, r3, r5
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	701a      	strb	r2, [r3, #0]
            }
 8003af4:	bf00      	nop
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003afe <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003afe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6178      	str	r0, [r7, #20]
 8003b08:	6139      	str	r1, [r7, #16]
 8003b0a:	60fa      	str	r2, [r7, #12]
 8003b0c:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 8003b0e:	2303      	movs	r3, #3
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6939      	ldr	r1, [r7, #16]
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	f7fe fd83 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	8bf9      	ldrh	r1, [r7, #30]
 8003b26:	2000      	movs	r0, #0
 8003b28:	4688      	mov	r8, r1
 8003b2a:	4681      	mov	r9, r0
 8003b2c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003b30:	6079      	str	r1, [r7, #4]
 8003b32:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003b36:	6039      	str	r1, [r7, #0]
 8003b38:	683c      	ldr	r4, [r7, #0]
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	ea42 0a04 	orr.w	sl, r2, r4
 8003b40:	ea43 0b05 	orr.w	fp, r3, r5
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]
            }
 8003b50:	bf00      	nop
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b5a <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7fe fd55 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2200      	movs	r2, #0
 8003b84:	4698      	mov	r8, r3
 8003b86:	4691      	mov	r9, r2
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b94:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b98:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b9c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ba0:	2500      	movs	r5, #0
 8003ba2:	ea40 0a04 	orr.w	sl, r0, r4
 8003ba6:	ea41 0b05 	orr.w	fp, r1, r5
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	701a      	strb	r2, [r3, #0]
            }
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bc0 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7fe fd22 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	2200      	movs	r2, #0
 8003bea:	4698      	mov	r8, r3
 8003bec:	4691      	mov	r9, r2
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003bfa:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003bfe:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003c02:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003c06:	2500      	movs	r5, #0
 8003c08:	ea40 0a04 	orr.w	sl, r0, r4
 8003c0c:	ea41 0b05 	orr.w	fp, r1, r5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2203      	movs	r2, #3
 8003c1a:	701a      	strb	r2, [r3, #0]
            }
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c26 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af02      	add	r7, sp, #8
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f240 6101 	movw	r1, #1537	; 0x601
 8003c40:	f7fe fbbc 	bl	80023bc <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003c48:	f240 6201 	movw	r2, #1537	; 0x601
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d000      	beq.n	8003c52 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003c50:	e7fe      	b.n	8003c50 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	6839      	ldr	r1, [r7, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	331c      	adds	r3, #28
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffd9 	bl	8003c26 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	; 0x28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ffe5 	bl	8003c5c <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fdd6 	bl	8005848 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f814 	bl	8003cd0 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003ca8:	bf00      	nop
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	f240 5181 	movw	r1, #1409	; 0x581
 8003cc2:	f7fd f963 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b092      	sub	sp, #72	; 0x48
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff ffe6 	bl	8003cb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	f640 2227 	movw	r2, #2599	; 0xa27
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	f300 836b 	bgt.w	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003cf6:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8003cfa:	da06      	bge.n	8003d0a <_Z31handleSDORequestDownloadBySDOIDt+0x3a>
 8003cfc:	2b21      	cmp	r3, #33	; 0x21
 8003cfe:	f300 8123 	bgt.w	8003f48 <_Z31handleSDORequestDownloadBySDOIDt+0x278>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f300 80d6 	bgt.w	8003eb4 <_Z31handleSDORequestDownloadBySDOIDt+0x1e4>
 8003d08:	e360      	b.n	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003d0a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003d0e:	2b07      	cmp	r3, #7
 8003d10:	f200 835c 	bhi.w	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <_Z31handleSDORequestDownloadBySDOIDt+0x4c>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08004357 	.word	0x08004357
 8003d20:	080043cd 	.word	0x080043cd
 8003d24:	080043cd 	.word	0x080043cd
 8003d28:	080043cd 	.word	0x080043cd
 8003d2c:	080043cd 	.word	0x080043cd
 8003d30:	08004373 	.word	0x08004373
 8003d34:	08004391 	.word	0x08004391
 8003d38:	080043af 	.word	0x080043af
 8003d3c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003d40:	2b59      	cmp	r3, #89	; 0x59
 8003d42:	f200 8343 	bhi.w	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <_Z31handleSDORequestDownloadBySDOIDt+0x7c>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	0800403d 	.word	0x0800403d
 8003d50:	0800405b 	.word	0x0800405b
 8003d54:	08004075 	.word	0x08004075
 8003d58:	08004093 	.word	0x08004093
 8003d5c:	080040b1 	.word	0x080040b1
 8003d60:	080040cb 	.word	0x080040cb
 8003d64:	080040e7 	.word	0x080040e7
 8003d68:	080043cd 	.word	0x080043cd
 8003d6c:	080043cd 	.word	0x080043cd
 8003d70:	080043cd 	.word	0x080043cd
 8003d74:	080043cd 	.word	0x080043cd
 8003d78:	080043cd 	.word	0x080043cd
 8003d7c:	080043cd 	.word	0x080043cd
 8003d80:	080043cd 	.word	0x080043cd
 8003d84:	080043cd 	.word	0x080043cd
 8003d88:	080043cd 	.word	0x080043cd
 8003d8c:	08004103 	.word	0x08004103
 8003d90:	0800411d 	.word	0x0800411d
 8003d94:	080043cd 	.word	0x080043cd
 8003d98:	080043cd 	.word	0x080043cd
 8003d9c:	080043cd 	.word	0x080043cd
 8003da0:	080043cd 	.word	0x080043cd
 8003da4:	080043cd 	.word	0x080043cd
 8003da8:	080043cd 	.word	0x080043cd
 8003dac:	080043cd 	.word	0x080043cd
 8003db0:	080043cd 	.word	0x080043cd
 8003db4:	080043cd 	.word	0x080043cd
 8003db8:	080043cd 	.word	0x080043cd
 8003dbc:	080043cd 	.word	0x080043cd
 8003dc0:	080043cd 	.word	0x080043cd
 8003dc4:	080043cd 	.word	0x080043cd
 8003dc8:	080043cd 	.word	0x080043cd
 8003dcc:	08004137 	.word	0x08004137
 8003dd0:	08004151 	.word	0x08004151
 8003dd4:	080043cd 	.word	0x080043cd
 8003dd8:	080043cd 	.word	0x080043cd
 8003ddc:	080043cd 	.word	0x080043cd
 8003de0:	080043cd 	.word	0x080043cd
 8003de4:	080043cd 	.word	0x080043cd
 8003de8:	080043cd 	.word	0x080043cd
 8003dec:	080043cd 	.word	0x080043cd
 8003df0:	080043cd 	.word	0x080043cd
 8003df4:	080043cd 	.word	0x080043cd
 8003df8:	080043cd 	.word	0x080043cd
 8003dfc:	080043cd 	.word	0x080043cd
 8003e00:	080043cd 	.word	0x080043cd
 8003e04:	080043cd 	.word	0x080043cd
 8003e08:	080043cd 	.word	0x080043cd
 8003e0c:	080043cd 	.word	0x080043cd
 8003e10:	080043cd 	.word	0x080043cd
 8003e14:	080043cd 	.word	0x080043cd
 8003e18:	080043cd 	.word	0x080043cd
 8003e1c:	080043cd 	.word	0x080043cd
 8003e20:	080043cd 	.word	0x080043cd
 8003e24:	080043cd 	.word	0x080043cd
 8003e28:	080043cd 	.word	0x080043cd
 8003e2c:	080043cd 	.word	0x080043cd
 8003e30:	080043cd 	.word	0x080043cd
 8003e34:	080043cd 	.word	0x080043cd
 8003e38:	080043cd 	.word	0x080043cd
 8003e3c:	080043cd 	.word	0x080043cd
 8003e40:	080043cd 	.word	0x080043cd
 8003e44:	080043cd 	.word	0x080043cd
 8003e48:	080043cd 	.word	0x080043cd
 8003e4c:	0800416b 	.word	0x0800416b
 8003e50:	08004187 	.word	0x08004187
 8003e54:	080041a3 	.word	0x080041a3
 8003e58:	080041bd 	.word	0x080041bd
 8003e5c:	080041d9 	.word	0x080041d9
 8003e60:	080043cd 	.word	0x080043cd
 8003e64:	080041f5 	.word	0x080041f5
 8003e68:	08004211 	.word	0x08004211
 8003e6c:	0800422b 	.word	0x0800422b
 8003e70:	08004247 	.word	0x08004247
 8003e74:	080043cd 	.word	0x080043cd
 8003e78:	080043cd 	.word	0x080043cd
 8003e7c:	080043cd 	.word	0x080043cd
 8003e80:	080043cd 	.word	0x080043cd
 8003e84:	080043cd 	.word	0x080043cd
 8003e88:	080043cd 	.word	0x080043cd
 8003e8c:	08004261 	.word	0x08004261
 8003e90:	0800427d 	.word	0x0800427d
 8003e94:	08004299 	.word	0x08004299
 8003e98:	080042b3 	.word	0x080042b3
 8003e9c:	080042cf 	.word	0x080042cf
 8003ea0:	080043cd 	.word	0x080043cd
 8003ea4:	080042eb 	.word	0x080042eb
 8003ea8:	08004307 	.word	0x08004307
 8003eac:	08004321 	.word	0x08004321
 8003eb0:	0800433d 	.word	0x0800433d
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f200 8288 	bhi.w	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003ebc:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <_Z31handleSDORequestDownloadBySDOIDt+0x1f4>)
 8003ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec2:	bf00      	nop
 8003ec4:	08003f5d 	.word	0x08003f5d
 8003ec8:	08003f79 	.word	0x08003f79
 8003ecc:	08003f95 	.word	0x08003f95
 8003ed0:	08003fb1 	.word	0x08003fb1
 8003ed4:	08003fcd 	.word	0x08003fcd
 8003ed8:	080043cd 	.word	0x080043cd
 8003edc:	080043cd 	.word	0x080043cd
 8003ee0:	080043cd 	.word	0x080043cd
 8003ee4:	080043cd 	.word	0x080043cd
 8003ee8:	080043cd 	.word	0x080043cd
 8003eec:	080043cd 	.word	0x080043cd
 8003ef0:	080043cd 	.word	0x080043cd
 8003ef4:	080043cd 	.word	0x080043cd
 8003ef8:	080043cd 	.word	0x080043cd
 8003efc:	080043cd 	.word	0x080043cd
 8003f00:	08003fe9 	.word	0x08003fe9
 8003f04:	080043cd 	.word	0x080043cd
 8003f08:	080043cd 	.word	0x080043cd
 8003f0c:	080043cd 	.word	0x080043cd
 8003f10:	080043cd 	.word	0x080043cd
 8003f14:	080043cd 	.word	0x080043cd
 8003f18:	080043cd 	.word	0x080043cd
 8003f1c:	080043cd 	.word	0x080043cd
 8003f20:	080043cd 	.word	0x080043cd
 8003f24:	080043cd 	.word	0x080043cd
 8003f28:	080043cd 	.word	0x080043cd
 8003f2c:	080043cd 	.word	0x080043cd
 8003f30:	080043cd 	.word	0x080043cd
 8003f34:	080043cd 	.word	0x080043cd
 8003f38:	080043cd 	.word	0x080043cd
 8003f3c:	080043cd 	.word	0x080043cd
 8003f40:	08004005 	.word	0x08004005
 8003f44:	08004021 	.word	0x08004021
 8003f48:	f240 4269 	movw	r2, #1129	; 0x469
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	f300 823d 	bgt.w	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003f52:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003f56:	f6bf aef1 	bge.w	8003d3c <_Z31handleSDORequestDownloadBySDOIDt+0x6c>
 8003f5a:	e237      	b.n	80043cc <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003f5c:	f000 feb0 	bl	8004cc0 <_Z13OD_NodeID_getv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	461a      	mov	r2, r3
 8003f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f68:	4611      	mov	r1, r2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fc7e 	bl	800586c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f76:	e231      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003f78:	f000 febe 	bl	8004cf8 <_Z17OD_NodeStatus_getv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fc85 	bl	8005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f92:	e223      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003f94:	f000 fecc 	bl	8004d30 <_Z22OD_ProtocolVersion_getv>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fc8c 	bl	80058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fae:	e215      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003fb0:	f000 feda 	bl	8004d68 <_Z19OD_StackVersion_getv>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fc93 	bl	80058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fca:	e207      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003fcc:	f000 fee8 	bl	8004da0 <_Z17OD_DbcVersion_getv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fc9a 	bl	8005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fe6:	e1f9      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003fe8:	f000 fef6 	bl	8004dd8 <_Z24OD_HeartbeatInterval_getv>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fca1 	bl	800593e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004002:	e1eb      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004004:	f000 ff20 	bl	8004e48 <_Z21OD_SendOdOnBootup_getv>
 8004008:	4603      	mov	r3, r0
 800400a:	461a      	mov	r2, r3
 800400c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fca8 	bl	8005968 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800401e:	e1dd      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004020:	f000 ff4a 	bl	8004eb8 <_Z26OD_OdEntrySendInterval_getv>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fcaf 	bl	8005992 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800403a:	e1cf      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 800403c:	f000 ff74 	bl	8004f28 <_Z15OD_CpuUsage_getv>
 8004040:	eef0 7a40 	vmov.f32	s15, s0
 8004044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004048:	eeb0 0a67 	vmov.f32	s0, s15
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fcb5 	bl	80059bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004058:	e1c0      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 800405a:	f000 ff9f 	bl	8004f9c <_Z14OD_MemFree_getv>
 800405e:	4602      	mov	r2, r0
 8004060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fcbf 	bl	80059ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004072:	e1b3      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8004074:	f000 ffca 	bl	800500c <_Z16OD_BoardTemp_getv>
 8004078:	eef0 7a40 	vmov.f32	s15, s0
 800407c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004080:	eeb0 0a67 	vmov.f32	s0, s15
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fcc4 	bl	8005a12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800408a:	2300      	movs	r3, #0
 800408c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004090:	e1a4      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8004092:	f000 fff5 	bl	8005080 <_Z19OD_InputVoltage_getv>
 8004096:	eef0 7a40 	vmov.f32	s15, s0
 800409a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800409e:	eeb0 0a67 	vmov.f32	s0, s15
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fccc 	bl	8005a40 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040ae:	e195      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 80040b0:	f001 f820 	bl	80050f4 <_Z14OD_runtime_getv>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fcd6 	bl	8005a6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040c8:	e188      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 80040ca:	f001 f82f 	bl	800512c <_Z12OD_SdcIn_getv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 fcdc 	bl	8005a96 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040e4:	e17a      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 80040e6:	f001 f83d 	bl	8005164 <_Z13OD_SdcOut_getv>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fce3 	bl	8005ac0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004100:	e16c      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8004102:	f001 f84b 	bl	800519c <_Z15OD_ChipUID1_getv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800410e:	4608      	mov	r0, r1
 8004110:	f001 fceb 	bl	8005aea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800411a:	e15f      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 800411c:	f001 f85e 	bl	80051dc <_Z15OD_ChipUID2_getv>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004128:	4608      	mov	r0, r1
 800412a:	f001 fcf7 	bl	8005b1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800412e:	2300      	movs	r3, #0
 8004130:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004134:	e152      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8004136:	f001 f871 	bl	800521c <_Z16OD_BuildDate_getv>
 800413a:	4602      	mov	r2, r0
 800413c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f001 fd03 	bl	8005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800414e:	e145      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8004150:	f001 f880 	bl	8005254 <_Z16OD_BuildTime_getv>
 8004154:	4602      	mov	r2, r0
 8004156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f001 fd0a 	bl	8005b76 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004162:	2300      	movs	r3, #0
 8004164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004168:	e138      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800416a:	f001 f88f 	bl	800528c <_Z20OD_CAN1_TxErrCnt_getv>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fd10 	bl	8005b9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800417e:	2300      	movs	r3, #0
 8004180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004184:	e12a      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8004186:	f001 f89d 	bl	80052c4 <_Z20OD_CAN1_RxErrCnt_getv>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f001 fd17 	bl	8005bc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041a0:	e11c      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80041a2:	f001 f8ab 	bl	80052fc <_Z25OD_CAN1_lastErrorCode_getv>
 80041a6:	4602      	mov	r2, r0
 80041a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fd1f 	bl	8005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041ba:	e10f      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80041bc:	f001 f8ba 	bl	8005334 <_Z26OD_CAN1_autoErrorReset_getv>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461a      	mov	r2, r3
 80041c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 fd25 	bl	8005c1a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041d6:	e101      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80041d8:	f001 f8e4 	bl	80053a4 <_Z20OD_CAN1_Baudrate_getv>
 80041dc:	4603      	mov	r3, r0
 80041de:	461a      	mov	r2, r3
 80041e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fd2c 	bl	8005c44 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041f2:	e0f3      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 80041f4:	f001 f90e 	bl	8005414 <_Z18OD_CAN1_Status_getv>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fd33 	bl	8005c6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800420e:	e0e5      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8004210:	f001 f91c 	bl	800544c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8004214:	4602      	mov	r2, r0
 8004216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fd3b 	bl	8005c98 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004228:	e0d8      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800422a:	f001 f92b 	bl	8005484 <_Z23OD_CAN1_ErrorStatus_getv>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fd41 	bl	8005cc0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004244:	e0ca      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004246:	f001 f939 	bl	80054bc <_Z29OD_CAN1_DelayedTxMessages_getv>
 800424a:	4602      	mov	r2, r0
 800424c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fd49 	bl	8005cea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004258:	2300      	movs	r3, #0
 800425a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800425e:	e0bd      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004260:	f001 f948 	bl	80054f4 <_Z20OD_CAN2_TxErrCnt_getv>
 8004264:	4603      	mov	r3, r0
 8004266:	461a      	mov	r2, r3
 8004268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fd4f 	bl	8005d12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800427a:	e0af      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 800427c:	f001 f956 	bl	800552c <_Z20OD_CAN2_RxErrCnt_getv>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fd56 	bl	8005d3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004296:	e0a1      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004298:	f001 f964 	bl	8005564 <_Z25OD_CAN2_lastErrorCode_getv>
 800429c:	4602      	mov	r2, r0
 800429e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 fd5e 	bl	8005d66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042b0:	e094      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80042b2:	f001 f973 	bl	800559c <_Z26OD_CAN2_autoErrorReset_getv>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fd64 	bl	8005d8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042cc:	e086      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80042ce:	f001 f99d 	bl	800560c <_Z20OD_CAN2_Baudrate_getv>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fd6b 	bl	8005db8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042e8:	e078      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 80042ea:	f001 f9c7 	bl	800567c <_Z18OD_CAN2_Status_getv>
 80042ee:	4603      	mov	r3, r0
 80042f0:	461a      	mov	r2, r3
 80042f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 fd72 	bl	8005de2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004304:	e06a      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004306:	f001 f9d5 	bl	80056b4 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800430a:	4602      	mov	r2, r0
 800430c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f001 fd7a 	bl	8005e0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800431e:	e05d      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004320:	f001 f9e4 	bl	80056ec <_Z23OD_CAN2_ErrorStatus_getv>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f001 fd80 	bl	8005e34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800433a:	e04f      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 800433c:	f001 f9f2 	bl	8005724 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004340:	4602      	mov	r2, r0
 8004342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f001 fd88 	bl	8005e5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004354:	e042      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 8004356:	f001 fa01 	bl	800575c <_Z17OD_IMU_number_getv>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fd8e 	bl	8005e86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004370:	e034      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8004372:	f001 fa0f 	bl	8005794 <_Z23OD_IMU1_Temperature_getv>
 8004376:	eef0 7a40 	vmov.f32	s15, s0
 800437a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800437e:	eeb0 0a67 	vmov.f32	s0, s15
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fd94 	bl	8005eb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800438e:	e025      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8004390:	f001 fa1e 	bl	80057d0 <_Z23OD_IMU2_Temperature_getv>
 8004394:	eef0 7a40 	vmov.f32	s15, s0
 8004398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800439c:	eeb0 0a67 	vmov.f32	s0, s15
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fd9c 	bl	8005ede <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80043ac:	e016      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 80043ae:	f001 fa2d 	bl	800580c <_Z23OD_IMU3_Temperature_getv>
 80043b2:	eef0 7a40 	vmov.f32	s15, s0
 80043b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 fda4 	bl	8005f0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80043ca:	e007      	b.n	80043dc <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fdb0 	bl	8005f3a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 80043da:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 80043dc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80043e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 fdbc 	bl	8005f64 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043f4:	2200      	movs	r2, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc fefc 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_Z31handleSDORequestDownloadBySDOIDt+0x744>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	2300      	movs	r3, #0
 8004406:	2200      	movs	r2, #0
 8004408:	f00c fb6e 	bl	8010ae8 <osMessageQueuePut>
}
 800440c:	bf00      	nop
 800440e:	3748      	adds	r7, #72	; 0x48
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	2000079c 	.word	0x2000079c

08004418 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2300      	movs	r3, #0
 800442c:	2208      	movs	r2, #8
 800442e:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8004432:	f7fd ffc3 	bl	80023bc <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800443a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800443e:	4293      	cmp	r3, r2
 8004440:	d000      	beq.n	8004444 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004442:	e7fe      	b.n	8004442 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	331c      	adds	r3, #28
 800445e:	461a      	mov	r2, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff ffd9 	bl	8004418 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b09c      	sub	sp, #112	; 0x70
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8004478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ffe5 	bl	800444e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8004484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fc11 	bl	8003cb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8004494:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fd78 	bl	8005f8e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 800449e:	4603      	mov	r3, r0
 80044a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 80044a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044a8:	f640 2227 	movw	r2, #2599	; 0xa27
 80044ac:	4293      	cmp	r3, r2
 80044ae:	f300 83e0 	bgt.w	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80044b2:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 80044b6:	da06      	bge.n	80044c6 <_Z22handleSDORequestUploadRK9RxMessage+0x56>
 80044b8:	2b21      	cmp	r3, #33	; 0x21
 80044ba:	f300 8123 	bgt.w	8004704 <_Z22handleSDORequestUploadRK9RxMessage+0x294>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f300 80d6 	bgt.w	8004670 <_Z22handleSDORequestUploadRK9RxMessage+0x200>
 80044c4:	e3d5      	b.n	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80044c6:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80044ca:	2b07      	cmp	r3, #7
 80044cc:	f200 83d1 	bhi.w	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <_Z22handleSDORequestUploadRK9RxMessage+0x68>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	08004bfd 	.word	0x08004bfd
 80044dc:	08004c73 	.word	0x08004c73
 80044e0:	08004c73 	.word	0x08004c73
 80044e4:	08004c73 	.word	0x08004c73
 80044e8:	08004c73 	.word	0x08004c73
 80044ec:	08004c19 	.word	0x08004c19
 80044f0:	08004c37 	.word	0x08004c37
 80044f4:	08004c55 	.word	0x08004c55
 80044f8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80044fc:	2b59      	cmp	r3, #89	; 0x59
 80044fe:	f200 83b8 	bhi.w	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <_Z22handleSDORequestUploadRK9RxMessage+0x98>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004847 	.word	0x08004847
 800450c:	08004865 	.word	0x08004865
 8004510:	0800487f 	.word	0x0800487f
 8004514:	0800489d 	.word	0x0800489d
 8004518:	080048bb 	.word	0x080048bb
 800451c:	080048d5 	.word	0x080048d5
 8004520:	080048f1 	.word	0x080048f1
 8004524:	08004c73 	.word	0x08004c73
 8004528:	08004c73 	.word	0x08004c73
 800452c:	08004c73 	.word	0x08004c73
 8004530:	08004c73 	.word	0x08004c73
 8004534:	08004c73 	.word	0x08004c73
 8004538:	08004c73 	.word	0x08004c73
 800453c:	08004c73 	.word	0x08004c73
 8004540:	08004c73 	.word	0x08004c73
 8004544:	08004c73 	.word	0x08004c73
 8004548:	0800490d 	.word	0x0800490d
 800454c:	08004927 	.word	0x08004927
 8004550:	08004c73 	.word	0x08004c73
 8004554:	08004c73 	.word	0x08004c73
 8004558:	08004c73 	.word	0x08004c73
 800455c:	08004c73 	.word	0x08004c73
 8004560:	08004c73 	.word	0x08004c73
 8004564:	08004c73 	.word	0x08004c73
 8004568:	08004c73 	.word	0x08004c73
 800456c:	08004c73 	.word	0x08004c73
 8004570:	08004c73 	.word	0x08004c73
 8004574:	08004c73 	.word	0x08004c73
 8004578:	08004c73 	.word	0x08004c73
 800457c:	08004c73 	.word	0x08004c73
 8004580:	08004c73 	.word	0x08004c73
 8004584:	08004c73 	.word	0x08004c73
 8004588:	08004941 	.word	0x08004941
 800458c:	0800495b 	.word	0x0800495b
 8004590:	08004c73 	.word	0x08004c73
 8004594:	08004c73 	.word	0x08004c73
 8004598:	08004c73 	.word	0x08004c73
 800459c:	08004c73 	.word	0x08004c73
 80045a0:	08004c73 	.word	0x08004c73
 80045a4:	08004c73 	.word	0x08004c73
 80045a8:	08004c73 	.word	0x08004c73
 80045ac:	08004c73 	.word	0x08004c73
 80045b0:	08004c73 	.word	0x08004c73
 80045b4:	08004c73 	.word	0x08004c73
 80045b8:	08004c73 	.word	0x08004c73
 80045bc:	08004c73 	.word	0x08004c73
 80045c0:	08004c73 	.word	0x08004c73
 80045c4:	08004c73 	.word	0x08004c73
 80045c8:	08004c73 	.word	0x08004c73
 80045cc:	08004c73 	.word	0x08004c73
 80045d0:	08004c73 	.word	0x08004c73
 80045d4:	08004c73 	.word	0x08004c73
 80045d8:	08004c73 	.word	0x08004c73
 80045dc:	08004c73 	.word	0x08004c73
 80045e0:	08004c73 	.word	0x08004c73
 80045e4:	08004c73 	.word	0x08004c73
 80045e8:	08004c73 	.word	0x08004c73
 80045ec:	08004c73 	.word	0x08004c73
 80045f0:	08004c73 	.word	0x08004c73
 80045f4:	08004c73 	.word	0x08004c73
 80045f8:	08004c73 	.word	0x08004c73
 80045fc:	08004c73 	.word	0x08004c73
 8004600:	08004c73 	.word	0x08004c73
 8004604:	08004c73 	.word	0x08004c73
 8004608:	08004975 	.word	0x08004975
 800460c:	08004991 	.word	0x08004991
 8004610:	080049ad 	.word	0x080049ad
 8004614:	080049c7 	.word	0x080049c7
 8004618:	080049fd 	.word	0x080049fd
 800461c:	08004c73 	.word	0x08004c73
 8004620:	08004a4d 	.word	0x08004a4d
 8004624:	08004a69 	.word	0x08004a69
 8004628:	08004a83 	.word	0x08004a83
 800462c:	08004a9f 	.word	0x08004a9f
 8004630:	08004c73 	.word	0x08004c73
 8004634:	08004c73 	.word	0x08004c73
 8004638:	08004c73 	.word	0x08004c73
 800463c:	08004c73 	.word	0x08004c73
 8004640:	08004c73 	.word	0x08004c73
 8004644:	08004c73 	.word	0x08004c73
 8004648:	08004ab9 	.word	0x08004ab9
 800464c:	08004ad5 	.word	0x08004ad5
 8004650:	08004af1 	.word	0x08004af1
 8004654:	08004b0b 	.word	0x08004b0b
 8004658:	08004b41 	.word	0x08004b41
 800465c:	08004c73 	.word	0x08004c73
 8004660:	08004b91 	.word	0x08004b91
 8004664:	08004bad 	.word	0x08004bad
 8004668:	08004bc7 	.word	0x08004bc7
 800466c:	08004be3 	.word	0x08004be3
 8004670:	3b01      	subs	r3, #1
 8004672:	2b20      	cmp	r3, #32
 8004674:	f200 82fd 	bhi.w	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x210>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	08004719 	.word	0x08004719
 8004684:	08004735 	.word	0x08004735
 8004688:	08004751 	.word	0x08004751
 800468c:	0800476d 	.word	0x0800476d
 8004690:	08004789 	.word	0x08004789
 8004694:	08004c73 	.word	0x08004c73
 8004698:	08004c73 	.word	0x08004c73
 800469c:	08004c73 	.word	0x08004c73
 80046a0:	08004c73 	.word	0x08004c73
 80046a4:	08004c73 	.word	0x08004c73
 80046a8:	08004c73 	.word	0x08004c73
 80046ac:	08004c73 	.word	0x08004c73
 80046b0:	08004c73 	.word	0x08004c73
 80046b4:	08004c73 	.word	0x08004c73
 80046b8:	08004c73 	.word	0x08004c73
 80046bc:	080047a5 	.word	0x080047a5
 80046c0:	08004c73 	.word	0x08004c73
 80046c4:	08004c73 	.word	0x08004c73
 80046c8:	08004c73 	.word	0x08004c73
 80046cc:	08004c73 	.word	0x08004c73
 80046d0:	08004c73 	.word	0x08004c73
 80046d4:	08004c73 	.word	0x08004c73
 80046d8:	08004c73 	.word	0x08004c73
 80046dc:	08004c73 	.word	0x08004c73
 80046e0:	08004c73 	.word	0x08004c73
 80046e4:	08004c73 	.word	0x08004c73
 80046e8:	08004c73 	.word	0x08004c73
 80046ec:	08004c73 	.word	0x08004c73
 80046f0:	08004c73 	.word	0x08004c73
 80046f4:	08004c73 	.word	0x08004c73
 80046f8:	08004c73 	.word	0x08004c73
 80046fc:	080047db 	.word	0x080047db
 8004700:	08004811 	.word	0x08004811
 8004704:	f240 4269 	movw	r2, #1129	; 0x469
 8004708:	4293      	cmp	r3, r2
 800470a:	f300 82b2 	bgt.w	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800470e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004712:	f6bf aef1 	bge.w	80044f8 <_Z22handleSDORequestUploadRK9RxMessage+0x88>
 8004716:	e2ac      	b.n	8004c72 <_Z22handleSDORequestUploadRK9RxMessage+0x802>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004718:	2303      	movs	r3, #3
 800471a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 800471e:	f000 facf 	bl	8004cc0 <_Z13OD_NodeID_getv>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f001 f89d 	bl	800586c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 8004732:	e2a7      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004734:	2303      	movs	r3, #3
 8004736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 800473a:	f000 fadd 	bl	8004cf8 <_Z17OD_NodeStatus_getv>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f001 f8a4 	bl	8005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800474e:	e299      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004750:	2303      	movs	r3, #3
 8004752:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004756:	f000 faeb 	bl	8004d30 <_Z22OD_ProtocolVersion_getv>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f001 f8ab 	bl	80058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 800476a:	e28b      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800476c:	2303      	movs	r3, #3
 800476e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8004772:	f000 faf9 	bl	8004d68 <_Z19OD_StackVersion_getv>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f001 f8b2 	bl	80058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8004786:	e27d      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004788:	2303      	movs	r3, #3
 800478a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 800478e:	f000 fb07 	bl	8004da0 <_Z17OD_DbcVersion_getv>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f001 f8b9 	bl	8005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80047a2:	e26f      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 80047a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 fc02 	bl	8005fb2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80047b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fb29 	bl	8004e10 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80047c4:	f000 fb08 	bl	8004dd8 <_Z24OD_HeartbeatInterval_getv>
 80047c8:	4603      	mov	r3, r0
 80047ca:	461a      	mov	r2, r3
 80047cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f8b3 	bl	800593e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 80047d8:	e254      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 80047da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fbf9 	bl	8005fd6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 80047ea:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fb46 	bl	8004e80 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80047fa:	f000 fb25 	bl	8004e48 <_Z21OD_SendOdOnBootup_getv>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f001 f8ad 	bl	8005968 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800480e:	e239      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8004810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004814:	4618      	mov	r0, r3
 8004816:	f001 fbf0 	bl	8005ffa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 800481a:	4603      	mov	r3, r0
 800481c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8004820:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fb63 	bl	8004ef0 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004830:	f000 fb42 	bl	8004eb8 <_Z26OD_OdEntrySendInterval_getv>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f8a7 	bl	8005992 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8004844:	e21e      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004846:	2303      	movs	r3, #3
 8004848:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 800484c:	f000 fb6c 	bl	8004f28 <_Z15OD_CpuUsage_getv>
 8004850:	eef0 7a40 	vmov.f32	s15, s0
 8004854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004858:	eeb0 0a67 	vmov.f32	s0, s15
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f8ad 	bl	80059bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8004862:	e20f      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004864:	2303      	movs	r3, #3
 8004866:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 800486a:	f000 fb97 	bl	8004f9c <_Z14OD_MemFree_getv>
 800486e:	4602      	mov	r2, r0
 8004870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f001 f8b7 	bl	80059ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 800487c:	e202      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800487e:	2303      	movs	r3, #3
 8004880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8004884:	f000 fbc2 	bl	800500c <_Z16OD_BoardTemp_getv>
 8004888:	eef0 7a40 	vmov.f32	s15, s0
 800488c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004890:	eeb0 0a67 	vmov.f32	s0, s15
 8004894:	4618      	mov	r0, r3
 8004896:	f001 f8bc 	bl	8005a12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 800489a:	e1f3      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800489c:	2303      	movs	r3, #3
 800489e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 80048a2:	f000 fbed 	bl	8005080 <_Z19OD_InputVoltage_getv>
 80048a6:	eef0 7a40 	vmov.f32	s15, s0
 80048aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ae:	eeb0 0a67 	vmov.f32	s0, s15
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f8c4 	bl	8005a40 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80048b8:	e1e4      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 80048c0:	f000 fc18 	bl	80050f4 <_Z14OD_runtime_getv>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f8ce 	bl	8005a6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 80048d2:	e1d7      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 80048da:	f000 fc27 	bl	800512c <_Z12OD_SdcIn_getv>
 80048de:	4603      	mov	r3, r0
 80048e0:	461a      	mov	r2, r3
 80048e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e6:	4611      	mov	r1, r2
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f8d4 	bl	8005a96 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 80048ee:	e1c9      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 80048f6:	f000 fc35 	bl	8005164 <_Z13OD_SdcOut_getv>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f8db 	bl	8005ac0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 800490a:	e1bb      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800490c:	2303      	movs	r3, #3
 800490e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8004912:	f000 fc43 	bl	800519c <_Z15OD_ChipUID1_getv>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800491e:	4608      	mov	r0, r1
 8004920:	f001 f8e3 	bl	8005aea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8004924:	e1ae      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004926:	2303      	movs	r3, #3
 8004928:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 800492c:	f000 fc56 	bl	80051dc <_Z15OD_ChipUID2_getv>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004938:	4608      	mov	r0, r1
 800493a:	f001 f8ef 	bl	8005b1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 800493e:	e1a1      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004940:	2303      	movs	r3, #3
 8004942:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8004946:	f000 fc69 	bl	800521c <_Z16OD_BuildDate_getv>
 800494a:	4602      	mov	r2, r0
 800494c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004950:	4611      	mov	r1, r2
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f8fb 	bl	8005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8004958:	e194      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800495a:	2303      	movs	r3, #3
 800495c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8004960:	f000 fc78 	bl	8005254 <_Z16OD_BuildTime_getv>
 8004964:	4602      	mov	r2, r0
 8004966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f001 f902 	bl	8005b76 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8004972:	e187      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004974:	2303      	movs	r3, #3
 8004976:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800497a:	f000 fc87 	bl	800528c <_Z20OD_CAN1_TxErrCnt_getv>
 800497e:	4603      	mov	r3, r0
 8004980:	461a      	mov	r2, r3
 8004982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004986:	4611      	mov	r1, r2
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f908 	bl	8005b9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 800498e:	e179      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004990:	2303      	movs	r3, #3
 8004992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8004996:	f000 fc95 	bl	80052c4 <_Z20OD_CAN1_RxErrCnt_getv>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 f90f 	bl	8005bc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80049aa:	e16b      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80049b2:	f000 fca3 	bl	80052fc <_Z25OD_CAN1_lastErrorCode_getv>
 80049b6:	4602      	mov	r2, r0
 80049b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f917 	bl	8005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80049c4:	e15e      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 80049c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 fb27 	bl	800601e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 80049d6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fcc6 	bl	800536c <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80049e6:	f000 fca5 	bl	8005334 <_Z26OD_CAN1_autoErrorReset_getv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 f910 	bl	8005c1a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80049fa:	e143      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 80049fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fb1e 	bl	8006042 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8004a0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a10:	2b7c      	cmp	r3, #124	; 0x7c
 8004a12:	d904      	bls.n	8004a1e <_Z22handleSDORequestUploadRK9RxMessage+0x5ae>
 8004a14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1c:	d903      	bls.n	8004a26 <_Z22handleSDORequestUploadRK9RxMessage+0x5b6>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004a1e:	2305      	movs	r3, #5
 8004a20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004a24:	e007      	b.n	8004a36 <_Z22handleSDORequestUploadRK9RxMessage+0x5c6>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8004a26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fcd6 	bl	80053dc <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8004a36:	f000 fcb5 	bl	80053a4 <_Z20OD_CAN1_Baudrate_getv>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 f8fd 	bl	8005c44 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8004a4a:	e11b      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8004a52:	f000 fcdf 	bl	8005414 <_Z18OD_CAN1_Status_getv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 f904 	bl	8005c6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8004a66:	e10d      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8004a6e:	f000 fced 	bl	800544c <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8004a72:	4602      	mov	r2, r0
 8004a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 f90c 	bl	8005c98 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004a80:	e100      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004a88:	f000 fcfc 	bl	8005484 <_Z23OD_CAN1_ErrorStatus_getv>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f001 f912 	bl	8005cc0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004a9c:	e0f2      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004aa4:	f000 fd0a 	bl	80054bc <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 f91a 	bl	8005cea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004ab6:	e0e5      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004abe:	f000 fd19 	bl	80054f4 <_Z20OD_CAN2_TxErrCnt_getv>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 f920 	bl	8005d12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8004ad2:	e0d7      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004ada:	f000 fd27 	bl	800552c <_Z20OD_CAN2_RxErrCnt_getv>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f927 	bl	8005d3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004aee:	e0c9      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004af6:	f000 fd35 	bl	8005564 <_Z25OD_CAN2_lastErrorCode_getv>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 f92f 	bl	8005d66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004b08:	e0bc      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 8004b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 faa9 	bl	8006066 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8004b1a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd58 	bl	80055d4 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004b2a:	f000 fd37 	bl	800559c <_Z26OD_CAN2_autoErrorReset_getv>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461a      	mov	r2, r3
 8004b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f928 	bl	8005d8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004b3e:	e0a1      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 8004b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 faa0 	bl	800608a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8004b50:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004b54:	2b7c      	cmp	r3, #124	; 0x7c
 8004b56:	d904      	bls.n	8004b62 <_Z22handleSDORequestUploadRK9RxMessage+0x6f2>
 8004b58:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b60:	d903      	bls.n	8004b6a <_Z22handleSDORequestUploadRK9RxMessage+0x6fa>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004b62:	2305      	movs	r3, #5
 8004b64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004b68:	e007      	b.n	8004b7a <_Z22handleSDORequestUploadRK9RxMessage+0x70a>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8004b6a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fd68 	bl	8005644 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8004b7a:	f000 fd47 	bl	800560c <_Z20OD_CAN2_Baudrate_getv>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	461a      	mov	r2, r3
 8004b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 f915 	bl	8005db8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8004b8e:	e079      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004b96:	f000 fd71 	bl	800567c <_Z18OD_CAN2_Status_getv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 f91c 	bl	8005de2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8004baa:	e06b      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004bb2:	f000 fd7f 	bl	80056b4 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 f924 	bl	8005e0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004bc4:	e05e      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004bcc:	f000 fd8e 	bl	80056ec <_Z23OD_CAN2_ErrorStatus_getv>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 f92a 	bl	8005e34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004be0:	e050      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004be8:	f000 fd9c 	bl	8005724 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004bec:	4602      	mov	r2, r0
 8004bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 f932 	bl	8005e5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004bfa:	e043      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 8004c02:	f000 fdab 	bl	800575c <_Z17OD_IMU_number_getv>
 8004c06:	4603      	mov	r3, r0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 f938 	bl	8005e86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 8004c16:	e035      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8004c1e:	f000 fdb9 	bl	8005794 <_Z23OD_IMU1_Temperature_getv>
 8004c22:	eef0 7a40 	vmov.f32	s15, s0
 8004c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f93e 	bl	8005eb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 8004c34:	e026      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8004c3c:	f000 fdc8 	bl	80057d0 <_Z23OD_IMU2_Temperature_getv>
 8004c40:	eef0 7a40 	vmov.f32	s15, s0
 8004c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c48:	eeb0 0a67 	vmov.f32	s0, s15
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 f946 	bl	8005ede <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 8004c52:	e017      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8004c5a:	f000 fdd7 	bl	800580c <_Z23OD_IMU3_Temperature_getv>
 8004c5e:	eef0 7a40 	vmov.f32	s15, s0
 8004c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c66:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 f94e 	bl	8005f0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 8004c70:	e008      	b.n	8004c84 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8004c72:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f95c 	bl	8005f3a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004c82:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8004c84:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 f968 	bl	8005f64 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc faa8 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <_Z22handleSDORequestUploadRK9RxMessage+0x84c>)
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	f107 0108 	add.w	r1, r7, #8
 8004cac:	2300      	movs	r3, #0
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f00b ff1a 	bl	8010ae8 <osMessageQueuePut>
}
 8004cb4:	bf00      	nop
 8004cb6:	3770      	adds	r7, #112	; 0x70
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	2000079c 	.word	0x2000079c

08004cc0 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <_Z13OD_NodeID_getv+0x30>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f04f 31ff 	mov.w	r1, #4294967295
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f00b fccf 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8004cd4:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <_Z13OD_NodeID_getv+0x34>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_Z13OD_NodeID_getv+0x30>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f00b fd12 	bl	8010708 <osMutexRelease>
    return value;
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000820 	.word	0x20000820
 8004cf4:	200007a5 	.word	0x200007a5

08004cf8 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <_Z17OD_NodeStatus_getv+0x30>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f04f 31ff 	mov.w	r1, #4294967295
 8004d06:	4618      	mov	r0, r3
 8004d08:	f00b fcb3 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <_Z17OD_NodeStatus_getv+0x34>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_Z17OD_NodeStatus_getv+0x30>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f00b fcf6 	bl	8010708 <osMutexRelease>
    return value;
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000824 	.word	0x20000824
 8004d2c:	200007a6 	.word	0x200007a6

08004d30 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00b fc97 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004d44:	4b07      	ldr	r3, [pc, #28]	; (8004d64 <_Z22OD_ProtocolVersion_getv+0x34>)
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f00b fcda 	bl	8010708 <osMutexRelease>
    return value;
 8004d54:	88fb      	ldrh	r3, [r7, #6]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000828 	.word	0x20000828
 8004d64:	20000000 	.word	0x20000000

08004d68 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <_Z19OD_StackVersion_getv+0x30>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f04f 31ff 	mov.w	r1, #4294967295
 8004d76:	4618      	mov	r0, r3
 8004d78:	f00b fc7b 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <_Z19OD_StackVersion_getv+0x34>)
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <_Z19OD_StackVersion_getv+0x30>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f00b fcbe 	bl	8010708 <osMutexRelease>
    return value;
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	2000082c 	.word	0x2000082c
 8004d9c:	200007a8 	.word	0x200007a8

08004da0 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <_Z17OD_DbcVersion_getv+0x30>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f04f 31ff 	mov.w	r1, #4294967295
 8004dae:	4618      	mov	r0, r3
 8004db0:	f00b fc5f 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <_Z17OD_DbcVersion_getv+0x34>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <_Z17OD_DbcVersion_getv+0x30>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f00b fca2 	bl	8010708 <osMutexRelease>
    return value;
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000830 	.word	0x20000830
 8004dd4:	200007aa 	.word	0x200007aa

08004dd8 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f04f 31ff 	mov.w	r1, #4294967295
 8004de6:	4618      	mov	r0, r3
 8004de8:	f00b fc43 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <_Z24OD_HeartbeatInterval_getv+0x34>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f00b fc86 	bl	8010708 <osMutexRelease>
    return value;
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000834 	.word	0x20000834
 8004e0c:	20000002 	.word	0x20000002

08004e10 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e22:	4618      	mov	r0, r3
 8004e24:	f00b fc25 	bl	8010672 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004e28:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004e2e:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f00b fc68 	bl	8010708 <osMutexRelease>
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000834 	.word	0x20000834
 8004e44:	20000002 	.word	0x20000002

08004e48 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f04f 31ff 	mov.w	r1, #4294967295
 8004e56:	4618      	mov	r0, r3
 8004e58:	f00b fc0b 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004e5c:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <_Z21OD_SendOdOnBootup_getv+0x34>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f00b fc4e 	bl	8010708 <osMutexRelease>
    return value;
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000838 	.word	0x20000838
 8004e7c:	200007ac 	.word	0x200007ac

08004e80 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e92:	4618      	mov	r0, r3
 8004e94:	f00b fbed 	bl	8010672 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8004e98:	4a06      	ldr	r2, [pc, #24]	; (8004eb4 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004e9e:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f00b fc30 	bl	8010708 <osMutexRelease>
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000838 	.word	0x20000838
 8004eb4:	200007ac 	.word	0x200007ac

08004eb8 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f00b fbd3 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f00b fc16 	bl	8010708 <osMutexRelease>
    return value;
 8004edc:	88fb      	ldrh	r3, [r7, #6]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000083c 	.word	0x2000083c
 8004eec:	20000004 	.word	0x20000004

08004ef0 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f04f 31ff 	mov.w	r1, #4294967295
 8004f02:	4618      	mov	r0, r3
 8004f04:	f00b fbb5 	bl	8010672 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004f08:	4a06      	ldr	r2, [pc, #24]	; (8004f24 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f00b fbf8 	bl	8010708 <osMutexRelease>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2000083c 	.word	0x2000083c
 8004f24:	20000004 	.word	0x20000004

08004f28 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <_Z15OD_CpuUsage_getv+0x34>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f04f 31ff 	mov.w	r1, #4294967295
 8004f36:	4618      	mov	r0, r3
 8004f38:	f00b fb9b 	bl	8010672 <osMutexAcquire>
    float value = OD_CpuUsage;
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <_Z15OD_CpuUsage_getv+0x38>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <_Z15OD_CpuUsage_getv+0x34>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f00b fbde 	bl	8010708 <osMutexRelease>
    return value;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	ee07 3a90 	vmov	s15, r3
}
 8004f52:	eeb0 0a67 	vmov.f32	s0, s15
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000840 	.word	0x20000840
 8004f60:	200007b0 	.word	0x200007b0

08004f64 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <_Z15OD_CpuUsage_setf+0x30>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f04f 31ff 	mov.w	r1, #4294967295
 8004f76:	4618      	mov	r0, r3
 8004f78:	f00b fb7b 	bl	8010672 <osMutexAcquire>
    OD_CpuUsage = value;
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <_Z15OD_CpuUsage_setf+0x34>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <_Z15OD_CpuUsage_setf+0x30>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f00b fbbe 	bl	8010708 <osMutexRelease>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000840 	.word	0x20000840
 8004f98:	200007b0 	.word	0x200007b0

08004f9c <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <_Z14OD_MemFree_getv+0x30>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8004faa:	4618      	mov	r0, r3
 8004fac:	f00b fb61 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <_Z14OD_MemFree_getv+0x34>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <_Z14OD_MemFree_getv+0x30>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f00b fba4 	bl	8010708 <osMutexRelease>
    return value;
 8004fc0:	687b      	ldr	r3, [r7, #4]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000844 	.word	0x20000844
 8004fd0:	200007b4 	.word	0x200007b4

08004fd4 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <_Z14OD_MemFree_setm+0x30>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f00b fb44 	bl	8010672 <osMutexAcquire>
    OD_MemFree = value;
 8004fea:	4a07      	ldr	r2, [pc, #28]	; (8005008 <_Z14OD_MemFree_setm+0x34>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <_Z14OD_MemFree_setm+0x30>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f00b fb87 	bl	8010708 <osMutexRelease>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000844 	.word	0x20000844
 8005008:	200007b4 	.word	0x200007b4

0800500c <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <_Z16OD_BoardTemp_getv+0x34>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f04f 31ff 	mov.w	r1, #4294967295
 800501a:	4618      	mov	r0, r3
 800501c:	f00b fb29 	bl	8010672 <osMutexAcquire>
    float value = OD_BoardTemp;
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <_Z16OD_BoardTemp_getv+0x38>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <_Z16OD_BoardTemp_getv+0x34>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f00b fb6c 	bl	8010708 <osMutexRelease>
    return value;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	ee07 3a90 	vmov	s15, r3
}
 8005036:	eeb0 0a67 	vmov.f32	s0, s15
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000848 	.word	0x20000848
 8005044:	200007b8 	.word	0x200007b8

08005048 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <_Z16OD_BoardTemp_setf+0x30>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f04f 31ff 	mov.w	r1, #4294967295
 800505a:	4618      	mov	r0, r3
 800505c:	f00b fb09 	bl	8010672 <osMutexAcquire>
    OD_BoardTemp = value;
 8005060:	4a06      	ldr	r2, [pc, #24]	; (800507c <_Z16OD_BoardTemp_setf+0x34>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <_Z16OD_BoardTemp_setf+0x30>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f00b fb4c 	bl	8010708 <osMutexRelease>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000848 	.word	0x20000848
 800507c:	200007b8 	.word	0x200007b8

08005080 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <_Z19OD_InputVoltage_getv+0x34>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f04f 31ff 	mov.w	r1, #4294967295
 800508e:	4618      	mov	r0, r3
 8005090:	f00b faef 	bl	8010672 <osMutexAcquire>
    float value = OD_InputVoltage;
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <_Z19OD_InputVoltage_getv+0x38>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <_Z19OD_InputVoltage_getv+0x34>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f00b fb32 	bl	8010708 <osMutexRelease>
    return value;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	ee07 3a90 	vmov	s15, r3
}
 80050aa:	eeb0 0a67 	vmov.f32	s0, s15
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	2000084c 	.word	0x2000084c
 80050b8:	200007bc 	.word	0x200007bc

080050bc <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <_Z19OD_InputVoltage_setf+0x30>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f04f 31ff 	mov.w	r1, #4294967295
 80050ce:	4618      	mov	r0, r3
 80050d0:	f00b facf 	bl	8010672 <osMutexAcquire>
    OD_InputVoltage = value;
 80050d4:	4a06      	ldr	r2, [pc, #24]	; (80050f0 <_Z19OD_InputVoltage_setf+0x34>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <_Z19OD_InputVoltage_setf+0x30>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f00b fb12 	bl	8010708 <osMutexRelease>
}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	2000084c 	.word	0x2000084c
 80050f0:	200007bc 	.word	0x200007bc

080050f4 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <_Z14OD_runtime_getv+0x30>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005102:	4618      	mov	r0, r3
 8005104:	f00b fab5 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <_Z14OD_runtime_getv+0x34>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <_Z14OD_runtime_getv+0x30>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4618      	mov	r0, r3
 8005114:	f00b faf8 	bl	8010708 <osMutexRelease>
    return value;
 8005118:	687b      	ldr	r3, [r7, #4]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000850 	.word	0x20000850
 8005128:	200007c0 	.word	0x200007c0

0800512c <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <_Z12OD_SdcIn_getv+0x30>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f04f 31ff 	mov.w	r1, #4294967295
 800513a:	4618      	mov	r0, r3
 800513c:	f00b fa99 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8005140:	4b07      	ldr	r3, [pc, #28]	; (8005160 <_Z12OD_SdcIn_getv+0x34>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <_Z12OD_SdcIn_getv+0x30>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f00b fadc 	bl	8010708 <osMutexRelease>
    return value;
 8005150:	79fb      	ldrb	r3, [r7, #7]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000854 	.word	0x20000854
 8005160:	200007c4 	.word	0x200007c4

08005164 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <_Z13OD_SdcOut_getv+0x30>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f04f 31ff 	mov.w	r1, #4294967295
 8005172:	4618      	mov	r0, r3
 8005174:	f00b fa7d 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <_Z13OD_SdcOut_getv+0x34>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 800517e:	4b05      	ldr	r3, [pc, #20]	; (8005194 <_Z13OD_SdcOut_getv+0x30>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f00b fac0 	bl	8010708 <osMutexRelease>
    return value;
 8005188:	79fb      	ldrb	r3, [r7, #7]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000858 	.word	0x20000858
 8005198:	200007c5 	.word	0x200007c5

0800519c <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <_Z15OD_ChipUID1_getv+0x38>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f04f 31ff 	mov.w	r1, #4294967295
 80051aa:	4618      	mov	r0, r3
 80051ac:	f00b fa61 	bl	8010672 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 80051b0:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <_Z15OD_ChipUID1_getv+0x3c>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <_Z15OD_ChipUID1_getv+0x38>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f00b faa2 	bl	8010708 <osMutexRelease>
    return value;
 80051c4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	2000085c 	.word	0x2000085c
 80051d8:	200007c8 	.word	0x200007c8

080051dc <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <_Z15OD_ChipUID2_getv+0x38>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f04f 31ff 	mov.w	r1, #4294967295
 80051ea:	4618      	mov	r0, r3
 80051ec:	f00b fa41 	bl	8010672 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <_Z15OD_ChipUID2_getv+0x3c>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <_Z15OD_ChipUID2_getv+0x38>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f00b fa82 	bl	8010708 <osMutexRelease>
    return value;
 8005204:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000860 	.word	0x20000860
 8005218:	200007d0 	.word	0x200007d0

0800521c <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <_Z16OD_BuildDate_getv+0x30>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f04f 31ff 	mov.w	r1, #4294967295
 800522a:	4618      	mov	r0, r3
 800522c:	f00b fa21 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <_Z16OD_BuildDate_getv+0x34>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <_Z16OD_BuildDate_getv+0x30>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f00b fa64 	bl	8010708 <osMutexRelease>
    return value;
 8005240:	687b      	ldr	r3, [r7, #4]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000864 	.word	0x20000864
 8005250:	200007d8 	.word	0x200007d8

08005254 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <_Z16OD_BuildTime_getv+0x30>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f04f 31ff 	mov.w	r1, #4294967295
 8005262:	4618      	mov	r0, r3
 8005264:	f00b fa05 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8005268:	4b07      	ldr	r3, [pc, #28]	; (8005288 <_Z16OD_BuildTime_getv+0x34>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <_Z16OD_BuildTime_getv+0x30>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f00b fa48 	bl	8010708 <osMutexRelease>
    return value;
 8005278:	687b      	ldr	r3, [r7, #4]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000868 	.word	0x20000868
 8005288:	200007dc 	.word	0x200007dc

0800528c <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f04f 31ff 	mov.w	r1, #4294967295
 800529a:	4618      	mov	r0, r3
 800529c:	f00b f9e9 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f00b fa2c 	bl	8010708 <osMutexRelease>
    return value;
 80052b0:	79fb      	ldrb	r3, [r7, #7]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000086c 	.word	0x2000086c
 80052c0:	200007e0 	.word	0x200007e0

080052c4 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f04f 31ff 	mov.w	r1, #4294967295
 80052d2:	4618      	mov	r0, r3
 80052d4:	f00b f9cd 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f00b fa10 	bl	8010708 <osMutexRelease>
    return value;
 80052e8:	79fb      	ldrb	r3, [r7, #7]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000870 	.word	0x20000870
 80052f8:	200007e1 	.word	0x200007e1

080052fc <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8005302:	4b0a      	ldr	r3, [pc, #40]	; (800532c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f04f 31ff 	mov.w	r1, #4294967295
 800530a:	4618      	mov	r0, r3
 800530c:	f00b f9b1 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8005310:	4b07      	ldr	r3, [pc, #28]	; (8005330 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f00b f9f4 	bl	8010708 <osMutexRelease>
    return value;
 8005320:	687b      	ldr	r3, [r7, #4]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000874 	.word	0x20000874
 8005330:	200007e4 	.word	0x200007e4

08005334 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f04f 31ff 	mov.w	r1, #4294967295
 8005342:	4618      	mov	r0, r3
 8005344:	f00b f995 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f00b f9d8 	bl	8010708 <osMutexRelease>
    return value;
 8005358:	79fb      	ldrb	r3, [r7, #7]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000878 	.word	0x20000878
 8005368:	20000006 	.word	0x20000006

0800536c <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f04f 31ff 	mov.w	r1, #4294967295
 800537e:	4618      	mov	r0, r3
 8005380:	f00b f977 	bl	8010672 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8005384:	4a06      	ldr	r2, [pc, #24]	; (80053a0 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f00b f9ba 	bl	8010708 <osMutexRelease>
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000878 	.word	0x20000878
 80053a0:	20000006 	.word	0x20000006

080053a4 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f04f 31ff 	mov.w	r1, #4294967295
 80053b2:	4618      	mov	r0, r3
 80053b4:	f00b f95d 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f00b f9a0 	bl	8010708 <osMutexRelease>
    return value;
 80053c8:	88fb      	ldrh	r3, [r7, #6]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	2000087c 	.word	0x2000087c
 80053d8:	20000008 	.word	0x20000008

080053dc <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 80053e6:	4b09      	ldr	r3, [pc, #36]	; (800540c <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f04f 31ff 	mov.w	r1, #4294967295
 80053ee:	4618      	mov	r0, r3
 80053f0:	f00b f93f 	bl	8010672 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 80053f4:	4a06      	ldr	r2, [pc, #24]	; (8005410 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 80053fa:	4b04      	ldr	r3, [pc, #16]	; (800540c <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f00b f982 	bl	8010708 <osMutexRelease>
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	2000087c 	.word	0x2000087c
 8005410:	20000008 	.word	0x20000008

08005414 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <_Z18OD_CAN1_Status_getv+0x30>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f04f 31ff 	mov.w	r1, #4294967295
 8005422:	4618      	mov	r0, r3
 8005424:	f00b f925 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <_Z18OD_CAN1_Status_getv+0x34>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <_Z18OD_CAN1_Status_getv+0x30>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f00b f968 	bl	8010708 <osMutexRelease>
    return value;
 8005438:	79fb      	ldrb	r3, [r7, #7]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000880 	.word	0x20000880
 8005448:	200007e8 	.word	0x200007e8

0800544c <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f04f 31ff 	mov.w	r1, #4294967295
 800545a:	4618      	mov	r0, r3
 800545c:	f00b f909 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f00b f94c 	bl	8010708 <osMutexRelease>
    return value;
 8005470:	687b      	ldr	r3, [r7, #4]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000884 	.word	0x20000884
 8005480:	200007ec 	.word	0x200007ec

08005484 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f04f 31ff 	mov.w	r1, #4294967295
 8005492:	4618      	mov	r0, r3
 8005494:	f00b f8ed 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8005498:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f00b f930 	bl	8010708 <osMutexRelease>
    return value;
 80054a8:	79fb      	ldrb	r3, [r7, #7]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000888 	.word	0x20000888
 80054b8:	200007f0 	.word	0x200007f0

080054bc <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 80054c2:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f04f 31ff 	mov.w	r1, #4294967295
 80054ca:	4618      	mov	r0, r3
 80054cc:	f00b f8d1 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f00b f914 	bl	8010708 <osMutexRelease>
    return value;
 80054e0:	687b      	ldr	r3, [r7, #4]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000088c 	.word	0x2000088c
 80054f0:	200007f4 	.word	0x200007f4

080054f4 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005502:	4618      	mov	r0, r3
 8005504:	f00b f8b5 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8005508:	4b07      	ldr	r3, [pc, #28]	; (8005528 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f00b f8f8 	bl	8010708 <osMutexRelease>
    return value;
 8005518:	79fb      	ldrb	r3, [r7, #7]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000890 	.word	0x20000890
 8005528:	200007f8 	.word	0x200007f8

0800552c <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f04f 31ff 	mov.w	r1, #4294967295
 800553a:	4618      	mov	r0, r3
 800553c:	f00b f899 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f00b f8dc 	bl	8010708 <osMutexRelease>
    return value;
 8005550:	79fb      	ldrb	r3, [r7, #7]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000894 	.word	0x20000894
 8005560:	200007f9 	.word	0x200007f9

08005564 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f04f 31ff 	mov.w	r1, #4294967295
 8005572:	4618      	mov	r0, r3
 8005574:	f00b f87d 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f00b f8c0 	bl	8010708 <osMutexRelease>
    return value;
 8005588:	687b      	ldr	r3, [r7, #4]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000898 	.word	0x20000898
 8005598:	200007fc 	.word	0x200007fc

0800559c <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f04f 31ff 	mov.w	r1, #4294967295
 80055aa:	4618      	mov	r0, r3
 80055ac:	f00b f861 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f00b f8a4 	bl	8010708 <osMutexRelease>
    return value;
 80055c0:	79fb      	ldrb	r3, [r7, #7]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	2000089c 	.word	0x2000089c
 80055d0:	2000000a 	.word	0x2000000a

080055d4 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80055de:	4b09      	ldr	r3, [pc, #36]	; (8005604 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f04f 31ff 	mov.w	r1, #4294967295
 80055e6:	4618      	mov	r0, r3
 80055e8:	f00b f843 	bl	8010672 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80055ec:	4a06      	ldr	r2, [pc, #24]	; (8005608 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80055f2:	4b04      	ldr	r3, [pc, #16]	; (8005604 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f00b f886 	bl	8010708 <osMutexRelease>
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	2000089c 	.word	0x2000089c
 8005608:	2000000a 	.word	0x2000000a

0800560c <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f04f 31ff 	mov.w	r1, #4294967295
 800561a:	4618      	mov	r0, r3
 800561c:	f00b f829 	bl	8010672 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f00b f86c 	bl	8010708 <osMutexRelease>
    return value;
 8005630:	88fb      	ldrh	r3, [r7, #6]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	200008a0 	.word	0x200008a0
 8005640:	2000000c 	.word	0x2000000c

08005644 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f04f 31ff 	mov.w	r1, #4294967295
 8005656:	4618      	mov	r0, r3
 8005658:	f00b f80b 	bl	8010672 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 800565c:	4a06      	ldr	r2, [pc, #24]	; (8005678 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 800565e:	88fb      	ldrh	r3, [r7, #6]
 8005660:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8005662:	4b04      	ldr	r3, [pc, #16]	; (8005674 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f00b f84e 	bl	8010708 <osMutexRelease>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	200008a0 	.word	0x200008a0
 8005678:	2000000c 	.word	0x2000000c

0800567c <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <_Z18OD_CAN2_Status_getv+0x30>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f04f 31ff 	mov.w	r1, #4294967295
 800568a:	4618      	mov	r0, r3
 800568c:	f00a fff1 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <_Z18OD_CAN2_Status_getv+0x34>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <_Z18OD_CAN2_Status_getv+0x30>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f00b f834 	bl	8010708 <osMutexRelease>
    return value;
 80056a0:	79fb      	ldrb	r3, [r7, #7]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	200008a4 	.word	0x200008a4
 80056b0:	20000800 	.word	0x20000800

080056b4 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f04f 31ff 	mov.w	r1, #4294967295
 80056c2:	4618      	mov	r0, r3
 80056c4:	f00a ffd5 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f00b f818 	bl	8010708 <osMutexRelease>
    return value;
 80056d8:	687b      	ldr	r3, [r7, #4]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200008a8 	.word	0x200008a8
 80056e8:	20000804 	.word	0x20000804

080056ec <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f04f 31ff 	mov.w	r1, #4294967295
 80056fa:	4618      	mov	r0, r3
 80056fc:	f00a ffb9 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f00a fffc 	bl	8010708 <osMutexRelease>
    return value;
 8005710:	79fb      	ldrb	r3, [r7, #7]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200008ac 	.word	0x200008ac
 8005720:	20000808 	.word	0x20000808

08005724 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 800572a:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f04f 31ff 	mov.w	r1, #4294967295
 8005732:	4618      	mov	r0, r3
 8005734:	f00a ff9d 	bl	8010672 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f00a ffe0 	bl	8010708 <osMutexRelease>
    return value;
 8005748:	687b      	ldr	r3, [r7, #4]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	200008b0 	.word	0x200008b0
 8005758:	2000080c 	.word	0x2000080c

0800575c <_Z17OD_IMU_number_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <_Z17OD_IMU_number_getv+0x30>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f04f 31ff 	mov.w	r1, #4294967295
 800576a:	4618      	mov	r0, r3
 800576c:	f00a ff81 	bl	8010672 <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8005770:	4b07      	ldr	r3, [pc, #28]	; (8005790 <_Z17OD_IMU_number_getv+0x34>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <_Z17OD_IMU_number_getv+0x30>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f00a ffc4 	bl	8010708 <osMutexRelease>
    return value;
 8005780:	79fb      	ldrb	r3, [r7, #7]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200008b4 	.word	0x200008b4
 8005790:	20000810 	.word	0x20000810

08005794 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 800579a:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <_Z23OD_IMU1_Temperature_getv+0x34>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f04f 31ff 	mov.w	r1, #4294967295
 80057a2:	4618      	mov	r0, r3
 80057a4:	f00a ff65 	bl	8010672 <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 80057a8:	4b08      	ldr	r3, [pc, #32]	; (80057cc <_Z23OD_IMU1_Temperature_getv+0x38>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <_Z23OD_IMU1_Temperature_getv+0x34>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f00a ffa8 	bl	8010708 <osMutexRelease>
    return value;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	ee07 3a90 	vmov	s15, r3
}
 80057be:	eeb0 0a67 	vmov.f32	s0, s15
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200008b8 	.word	0x200008b8
 80057cc:	20000814 	.word	0x20000814

080057d0 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <_Z23OD_IMU2_Temperature_getv+0x34>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f04f 31ff 	mov.w	r1, #4294967295
 80057de:	4618      	mov	r0, r3
 80057e0:	f00a ff47 	bl	8010672 <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <_Z23OD_IMU2_Temperature_getv+0x38>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <_Z23OD_IMU2_Temperature_getv+0x34>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f00a ff8a 	bl	8010708 <osMutexRelease>
    return value;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	ee07 3a90 	vmov	s15, r3
}
 80057fa:	eeb0 0a67 	vmov.f32	s0, s15
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	200008bc 	.word	0x200008bc
 8005808:	20000818 	.word	0x20000818

0800580c <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f04f 31ff 	mov.w	r1, #4294967295
 800581a:	4618      	mov	r0, r3
 800581c:	f00a ff29 	bl	8010672 <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <_Z23OD_IMU3_Temperature_getv+0x38>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f00a ff6c 	bl	8010708 <osMutexRelease>
    return value;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	ee07 3a90 	vmov	s15, r3
}
 8005836:	eeb0 0a67 	vmov.f32	s0, s15
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200008c0 	.word	0x200008c0
 8005844:	2000081c 	.word	0x2000081c

08005848 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f103 0208 	add.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3310      	adds	r3, #16
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fc ff07 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005862:	4603      	mov	r3, r0
        }
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f103 0008 	add.w	r0, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f103 0110 	add.w	r1, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f7fe f999 	bl	8003bc0 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 0008 	add.w	r0, r3, #8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0110 	add.w	r1, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	f7fe f951 	bl	8003b5a <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 0008 	add.w	r0, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f103 0110 	add.w	r1, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	f7fe f90e 	bl	8003afe <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f103 0008 	add.w	r0, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f103 0110 	add.w	r1, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	f7fe f8cb 	bl	8003aa2 <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 0008 	add.w	r0, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f103 0110 	add.w	r1, r3, #16
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	f7fe f888 	bl	8003a46 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f103 0008 	add.w	r0, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f103 0110 	add.w	r1, r3, #16
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	1d1a      	adds	r2, r3, #4
 800595a:	887b      	ldrh	r3, [r7, #2]
 800595c:	f7fe f821 	bl	80039a2 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f103 0008 	add.w	r0, r3, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f103 0110 	add.w	r1, r3, #16
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f7fd ffb5 	bl	80038f4 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f103 0008 	add.w	r0, r3, #8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0110 	add.w	r1, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	1d1a      	adds	r2, r3, #4
 80059ae:	887b      	ldrh	r3, [r7, #2]
 80059b0:	f7fd ff4e 	bl	8003850 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f103 0008 	add.w	r0, r3, #8
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 0110 	add.w	r1, r3, #16
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	ed97 0a00 	vldr	s0, [r7]
 80059dc:	461a      	mov	r2, r3
 80059de:	f7fd fed9 	bl	8003794 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f103 0008 	add.w	r0, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 0110 	add.w	r1, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f7fd fe8d 	bl	8003724 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f103 0008 	add.w	r0, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f103 0110 	add.w	r1, r3, #16
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	ed97 0a00 	vldr	s0, [r7]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fd fe14 	bl	8003660 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f103 0008 	add.w	r0, r3, #8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f103 0110 	add.w	r1, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	ed97 0a00 	vldr	s0, [r7]
 8005a60:	461a      	mov	r2, r3
 8005a62:	f7fd fda3 	bl	80035ac <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f103 0008 	add.w	r0, r3, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0110 	add.w	r1, r3, #16
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f7fd fd55 	bl	8003538 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f103 0008 	add.w	r0, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 0110 	add.w	r1, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	78fb      	ldrb	r3, [r7, #3]
 8005ab4:	f7fd fd0c 	bl	80034d0 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f103 0008 	add.w	r0, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f103 0110 	add.w	r1, r3, #16
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f7fd fcc3 	bl	8003468 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005aea:	b590      	push	{r4, r7, lr}
 8005aec:	b087      	sub	sp, #28
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 0008 	add.w	r0, r3, #8
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f103 0110 	add.w	r1, r3, #16
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1d1c      	adds	r4, r3, #4
 8005b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0a:	e9cd 2300 	strd	r2, r3, [sp]
 8005b0e:	4622      	mov	r2, r4
 8005b10:	f7fd fc71 	bl	80033f6 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd90      	pop	{r4, r7, pc}

08005b1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b1c:	b590      	push	{r4, r7, lr}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f103 0008 	add.w	r0, r3, #8
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f103 0110 	add.w	r1, r3, #16
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1d1c      	adds	r4, r3, #4
 8005b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b3c:	e9cd 2300 	strd	r2, r3, [sp]
 8005b40:	4622      	mov	r2, r4
 8005b42:	f7fd fc1f 	bl	8003384 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd90      	pop	{r4, r7, pc}

08005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f103 0008 	add.w	r0, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f103 0110 	add.w	r1, r3, #16
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f7fd fbd3 	bl	8003314 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0008 	add.w	r0, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f103 0110 	add.w	r1, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1d1a      	adds	r2, r3, #4
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f7fd fb85 	bl	80032a0 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f103 0008 	add.w	r0, r3, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f103 0110 	add.w	r1, r3, #16
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1d1a      	adds	r2, r3, #4
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	f7fd fb3c 	bl	8003238 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f103 0008 	add.w	r0, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f103 0110 	add.w	r1, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	f7fd faf3 	bl	80031d0 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f103 0008 	add.w	r0, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f103 0110 	add.w	r1, r3, #16
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f7fd faa7 	bl	8003160 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f103 0008 	add.w	r0, r3, #8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f103 0110 	add.w	r1, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1d1a      	adds	r2, r3, #4
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	f7fd fa36 	bl	80030a8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f103 0008 	add.w	r0, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f103 0110 	add.w	r1, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	f7fd f9bf 	bl	8002fe4 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f103 0008 	add.w	r0, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f103 0110 	add.w	r1, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	1d1a      	adds	r2, r3, #4
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	f7fd f976 	bl	8002f7c <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f103 0008 	add.w	r0, r3, #8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f103 0110 	add.w	r1, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	1d1a      	adds	r2, r3, #4
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f7fd f928 	bl	8002f08 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 0008 	add.w	r0, r3, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f103 0110 	add.w	r1, r3, #16
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f7fd f8df 	bl	8002ea0 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8005ce2:	bf00      	nop
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f103 0008 	add.w	r0, r3, #8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f103 0110 	add.w	r1, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	1d1a      	adds	r2, r3, #4
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f7fd f891 	bl	8002e2c <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f103 0008 	add.w	r0, r3, #8
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 0110 	add.w	r1, r3, #16
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	f7fd f848 	bl	8002dc4 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f103 0008 	add.w	r0, r3, #8
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f103 0110 	add.w	r1, r3, #16
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	f7fc ffff 	bl	8002d5c <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0008 	add.w	r0, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f103 0110 	add.w	r1, r3, #16
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1d1a      	adds	r2, r3, #4
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f7fc ffb3 	bl	8002cec <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f103 0008 	add.w	r0, r3, #8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f103 0110 	add.w	r1, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f7fc ff42 	bl	8002c34 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8005db0:	bf00      	nop
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f103 0008 	add.w	r0, r3, #8
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f103 0110 	add.w	r1, r3, #16
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	887b      	ldrh	r3, [r7, #2]
 8005dd6:	f7fc fecb 	bl	8002b70 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f103 0008 	add.w	r0, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f103 0110 	add.w	r1, r3, #16
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	f7fc fe82 	bl	8002b08 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f103 0008 	add.w	r0, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0110 	add.w	r1, r3, #16
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	1d1a      	adds	r2, r3, #4
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f7fc fe34 	bl	8002a94 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f103 0008 	add.w	r0, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f103 0110 	add.w	r1, r3, #16
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1d1a      	adds	r2, r3, #4
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	f7fc fdeb 	bl	8002a2c <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f103 0008 	add.w	r0, r3, #8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f103 0110 	add.w	r1, r3, #16
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f7fc fd9d 	bl	80029b8 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f103 0008 	add.w	r0, r3, #8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f103 0110 	add.w	r1, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	f7fc fd54 	bl	8002950 <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>
        }
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0008 	add.w	r0, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f103 0110 	add.w	r1, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	ed97 0a00 	vldr	s0, [r7]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f7fc fcd7 	bl	8002884 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f103 0008 	add.w	r0, r3, #8
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f103 0110 	add.w	r1, r3, #16
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	ed97 0a00 	vldr	s0, [r7]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f7fc fc5a 	bl	80027b8 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f103 0008 	add.w	r0, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f103 0110 	add.w	r1, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	ed97 0a00 	vldr	s0, [r7]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f7fc fbdd 	bl	80026ec <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f103 0008 	add.w	r0, r3, #8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f103 0110 	add.w	r1, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	f7fc fb62 	bl	8002620 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0008 	add.w	r0, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0110 	add.w	r1, r3, #16
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	78fb      	ldrb	r3, [r7, #3]
 8005f82:	f7fc fb88 	bl	8002696 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f103 0208 	add.w	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3310      	adds	r3, #16
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f7fc fb64 	bl	8002670 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005fa8:	4603      	mov	r3, r0
        }
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f103 0208 	add.w	r2, r3, #8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3310      	adds	r3, #16
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	f7fd fd19 	bl	80039fe <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8005fcc:	4603      	mov	r3, r0
        }
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f103 0208 	add.w	r2, r3, #8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fd fcb5 	bl	800395a <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8005ff0:	4603      	mov	r3, r0
        }
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3310      	adds	r3, #16
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f7fd fc4c 	bl	80038ac <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 8006014:	4603      	mov	r3, r0
        }
 8006016:	4618      	mov	r0, r3
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800601e:	b580      	push	{r7, lr}
 8006020:	b082      	sub	sp, #8
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 0208 	add.w	r2, r3, #8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3310      	adds	r3, #16
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f7fd f86c 	bl	8003110 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 8006038:	4603      	mov	r3, r0
        }
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f103 0208 	add.w	r2, r3, #8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3310      	adds	r3, #16
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fc ffff 	bl	800305a <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 800605c:	4603      	mov	r3, r0
        }
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f103 0208 	add.w	r2, r3, #8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3310      	adds	r3, #16
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f7fc fe0e 	bl	8002c9c <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8006080:	4603      	mov	r3, r0
        }
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f103 0208 	add.w	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3310      	adds	r3, #16
 800609c:	4619      	mov	r1, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	f7fc fda1 	bl	8002be6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 80060a4:	4603      	mov	r3, r0
        }
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f040 80fc 	bne.w	80062ba <_Z41__static_initialization_and_destruction_0ii+0x20a>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060c8:	4293      	cmp	r3, r2
 80060ca:	f040 80f6 	bne.w	80062ba <_Z41__static_initialization_and_destruction_0ii+0x20a>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80060ce:	2000      	movs	r0, #0
 80060d0:	f00a fa49 	bl	8010566 <osMutexNew>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4a7b      	ldr	r2, [pc, #492]	; (80062c4 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80060d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80060da:	2000      	movs	r0, #0
 80060dc:	f00a fa43 	bl	8010566 <osMutexNew>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4a79      	ldr	r2, [pc, #484]	; (80062c8 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80060e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80060e6:	2000      	movs	r0, #0
 80060e8:	f00a fa3d 	bl	8010566 <osMutexNew>
 80060ec:	4603      	mov	r3, r0
 80060ee:	4a77      	ldr	r2, [pc, #476]	; (80062cc <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80060f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 80060f2:	2000      	movs	r0, #0
 80060f4:	f00a fa37 	bl	8010566 <osMutexNew>
 80060f8:	4603      	mov	r3, r0
 80060fa:	4a75      	ldr	r2, [pc, #468]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80060fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80060fe:	2000      	movs	r0, #0
 8006100:	f00a fa31 	bl	8010566 <osMutexNew>
 8006104:	4603      	mov	r3, r0
 8006106:	4a73      	ldr	r2, [pc, #460]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8006108:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 800610a:	2000      	movs	r0, #0
 800610c:	f00a fa2b 	bl	8010566 <osMutexNew>
 8006110:	4603      	mov	r3, r0
 8006112:	4a71      	ldr	r2, [pc, #452]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8006114:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8006116:	2000      	movs	r0, #0
 8006118:	f00a fa25 	bl	8010566 <osMutexNew>
 800611c:	4603      	mov	r3, r0
 800611e:	4a6f      	ldr	r2, [pc, #444]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8006120:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8006122:	2000      	movs	r0, #0
 8006124:	f00a fa1f 	bl	8010566 <osMutexNew>
 8006128:	4603      	mov	r3, r0
 800612a:	4a6d      	ldr	r2, [pc, #436]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800612c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 800612e:	2000      	movs	r0, #0
 8006130:	f00a fa19 	bl	8010566 <osMutexNew>
 8006134:	4603      	mov	r3, r0
 8006136:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8006138:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 800613a:	2000      	movs	r0, #0
 800613c:	f00a fa13 	bl	8010566 <osMutexNew>
 8006140:	4603      	mov	r3, r0
 8006142:	4a69      	ldr	r2, [pc, #420]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8006144:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8006146:	2000      	movs	r0, #0
 8006148:	f00a fa0d 	bl	8010566 <osMutexNew>
 800614c:	4603      	mov	r3, r0
 800614e:	4a67      	ldr	r2, [pc, #412]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8006150:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8006152:	2000      	movs	r0, #0
 8006154:	f00a fa07 	bl	8010566 <osMutexNew>
 8006158:	4603      	mov	r3, r0
 800615a:	4a65      	ldr	r2, [pc, #404]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 800615c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800615e:	2000      	movs	r0, #0
 8006160:	f00a fa01 	bl	8010566 <osMutexNew>
 8006164:	4603      	mov	r3, r0
 8006166:	4a63      	ldr	r2, [pc, #396]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8006168:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800616a:	2000      	movs	r0, #0
 800616c:	f00a f9fb 	bl	8010566 <osMutexNew>
 8006170:	4603      	mov	r3, r0
 8006172:	4a61      	ldr	r2, [pc, #388]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8006174:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8006176:	2000      	movs	r0, #0
 8006178:	f00a f9f5 	bl	8010566 <osMutexNew>
 800617c:	4603      	mov	r3, r0
 800617e:	4a5f      	ldr	r2, [pc, #380]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8006180:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8006182:	2000      	movs	r0, #0
 8006184:	f00a f9ef 	bl	8010566 <osMutexNew>
 8006188:	4603      	mov	r3, r0
 800618a:	4a5d      	ldr	r2, [pc, #372]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800618c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 800618e:	2000      	movs	r0, #0
 8006190:	f00a f9e9 	bl	8010566 <osMutexNew>
 8006194:	4603      	mov	r3, r0
 8006196:	4a5b      	ldr	r2, [pc, #364]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8006198:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800619a:	2000      	movs	r0, #0
 800619c:	f00a f9e3 	bl	8010566 <osMutexNew>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4a59      	ldr	r2, [pc, #356]	; (8006308 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80061a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 80061a6:	2000      	movs	r0, #0
 80061a8:	f00a f9dd 	bl	8010566 <osMutexNew>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4a57      	ldr	r2, [pc, #348]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80061b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 80061b2:	2000      	movs	r0, #0
 80061b4:	f00a f9d7 	bl	8010566 <osMutexNew>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4a55      	ldr	r2, [pc, #340]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80061bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 80061be:	2000      	movs	r0, #0
 80061c0:	f00a f9d1 	bl	8010566 <osMutexNew>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4a53      	ldr	r2, [pc, #332]	; (8006314 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80061c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 80061ca:	2000      	movs	r0, #0
 80061cc:	f00a f9cb 	bl	8010566 <osMutexNew>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4a51      	ldr	r2, [pc, #324]	; (8006318 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80061d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80061d6:	2000      	movs	r0, #0
 80061d8:	f00a f9c5 	bl	8010566 <osMutexNew>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a4f      	ldr	r2, [pc, #316]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80061e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80061e2:	2000      	movs	r0, #0
 80061e4:	f00a f9bf 	bl	8010566 <osMutexNew>
 80061e8:	4603      	mov	r3, r0
 80061ea:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 80061ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 80061ee:	2000      	movs	r0, #0
 80061f0:	f00a f9b9 	bl	8010566 <osMutexNew>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4a4b      	ldr	r2, [pc, #300]	; (8006324 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80061f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80061fa:	2000      	movs	r0, #0
 80061fc:	f00a f9b3 	bl	8010566 <osMutexNew>
 8006200:	4603      	mov	r3, r0
 8006202:	4a49      	ldr	r2, [pc, #292]	; (8006328 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8006204:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8006206:	2000      	movs	r0, #0
 8006208:	f00a f9ad 	bl	8010566 <osMutexNew>
 800620c:	4603      	mov	r3, r0
 800620e:	4a47      	ldr	r2, [pc, #284]	; (800632c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8006210:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8006212:	2000      	movs	r0, #0
 8006214:	f00a f9a7 	bl	8010566 <osMutexNew>
 8006218:	4603      	mov	r3, r0
 800621a:	4a45      	ldr	r2, [pc, #276]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 800621c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 800621e:	2000      	movs	r0, #0
 8006220:	f00a f9a1 	bl	8010566 <osMutexNew>
 8006224:	4603      	mov	r3, r0
 8006226:	4a43      	ldr	r2, [pc, #268]	; (8006334 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8006228:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 800622a:	2000      	movs	r0, #0
 800622c:	f00a f99b 	bl	8010566 <osMutexNew>
 8006230:	4603      	mov	r3, r0
 8006232:	4a41      	ldr	r2, [pc, #260]	; (8006338 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8006234:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8006236:	2000      	movs	r0, #0
 8006238:	f00a f995 	bl	8010566 <osMutexNew>
 800623c:	4603      	mov	r3, r0
 800623e:	4a3f      	ldr	r2, [pc, #252]	; (800633c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8006240:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8006242:	2000      	movs	r0, #0
 8006244:	f00a f98f 	bl	8010566 <osMutexNew>
 8006248:	4603      	mov	r3, r0
 800624a:	4a3d      	ldr	r2, [pc, #244]	; (8006340 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 800624c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 800624e:	2000      	movs	r0, #0
 8006250:	f00a f989 	bl	8010566 <osMutexNew>
 8006254:	4603      	mov	r3, r0
 8006256:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8006258:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 800625a:	2000      	movs	r0, #0
 800625c:	f00a f983 	bl	8010566 <osMutexNew>
 8006260:	4603      	mov	r3, r0
 8006262:	4a39      	ldr	r2, [pc, #228]	; (8006348 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8006264:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8006266:	2000      	movs	r0, #0
 8006268:	f00a f97d 	bl	8010566 <osMutexNew>
 800626c:	4603      	mov	r3, r0
 800626e:	4a37      	ldr	r2, [pc, #220]	; (800634c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8006270:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8006272:	2000      	movs	r0, #0
 8006274:	f00a f977 	bl	8010566 <osMutexNew>
 8006278:	4603      	mov	r3, r0
 800627a:	4a35      	ldr	r2, [pc, #212]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800627c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800627e:	2000      	movs	r0, #0
 8006280:	f00a f971 	bl	8010566 <osMutexNew>
 8006284:	4603      	mov	r3, r0
 8006286:	4a33      	ldr	r2, [pc, #204]	; (8006354 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8006288:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 800628a:	2000      	movs	r0, #0
 800628c:	f00a f96b 	bl	8010566 <osMutexNew>
 8006290:	4603      	mov	r3, r0
 8006292:	4a31      	ldr	r2, [pc, #196]	; (8006358 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006294:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8006296:	2000      	movs	r0, #0
 8006298:	f00a f965 	bl	8010566 <osMutexNew>
 800629c:	4603      	mov	r3, r0
 800629e:	4a2f      	ldr	r2, [pc, #188]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80062a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 80062a2:	2000      	movs	r0, #0
 80062a4:	f00a f95f 	bl	8010566 <osMutexNew>
 80062a8:	4603      	mov	r3, r0
 80062aa:	4a2d      	ldr	r2, [pc, #180]	; (8006360 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80062ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 80062ae:	2000      	movs	r0, #0
 80062b0:	f00a f959 	bl	8010566 <osMutexNew>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4a2b      	ldr	r2, [pc, #172]	; (8006364 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000820 	.word	0x20000820
 80062c8:	20000824 	.word	0x20000824
 80062cc:	20000828 	.word	0x20000828
 80062d0:	2000082c 	.word	0x2000082c
 80062d4:	20000830 	.word	0x20000830
 80062d8:	20000834 	.word	0x20000834
 80062dc:	20000838 	.word	0x20000838
 80062e0:	2000083c 	.word	0x2000083c
 80062e4:	20000840 	.word	0x20000840
 80062e8:	20000844 	.word	0x20000844
 80062ec:	20000848 	.word	0x20000848
 80062f0:	2000084c 	.word	0x2000084c
 80062f4:	20000850 	.word	0x20000850
 80062f8:	20000854 	.word	0x20000854
 80062fc:	20000858 	.word	0x20000858
 8006300:	2000085c 	.word	0x2000085c
 8006304:	20000860 	.word	0x20000860
 8006308:	20000864 	.word	0x20000864
 800630c:	20000868 	.word	0x20000868
 8006310:	2000086c 	.word	0x2000086c
 8006314:	20000870 	.word	0x20000870
 8006318:	20000874 	.word	0x20000874
 800631c:	20000878 	.word	0x20000878
 8006320:	2000087c 	.word	0x2000087c
 8006324:	20000880 	.word	0x20000880
 8006328:	20000884 	.word	0x20000884
 800632c:	20000888 	.word	0x20000888
 8006330:	2000088c 	.word	0x2000088c
 8006334:	20000890 	.word	0x20000890
 8006338:	20000894 	.word	0x20000894
 800633c:	20000898 	.word	0x20000898
 8006340:	2000089c 	.word	0x2000089c
 8006344:	200008a0 	.word	0x200008a0
 8006348:	200008a4 	.word	0x200008a4
 800634c:	200008a8 	.word	0x200008a8
 8006350:	200008ac 	.word	0x200008ac
 8006354:	200008b0 	.word	0x200008b0
 8006358:	200008b4 	.word	0x200008b4
 800635c:	200008b8 	.word	0x200008b8
 8006360:	200008bc 	.word	0x200008bc
 8006364:	200008c0 	.word	0x200008c0

08006368 <_GLOBAL__sub_I_OD_NodeID>:
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
 800636c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006370:	2001      	movs	r0, #1
 8006372:	f7ff fe9d 	bl	80060b0 <_Z41__static_initialization_and_destruction_0ii>
 8006376:	bd80      	pop	{r7, pc}

08006378 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fb f836 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 80063d6:	b5b0      	push	{r4, r5, r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	240f      	movs	r4, #15
 80063e2:	461d      	mov	r5, r3
 80063e4:	2c00      	cmp	r4, #0
 80063e6:	db05      	blt.n	80063f4 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 f8cb 	bl	8006584 <_ZNSt8functionIFvtEEC1Ev>
 80063ee:	3510      	adds	r5, #16
 80063f0:	3c01      	subs	r4, #1
 80063f2:	e7f7      	b.n	80063e4 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bdb0      	pop	{r4, r5, r7, pc}

08006406 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8006406:	b590      	push	{r4, r7, lr}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	429c      	cmp	r4, r3
 800641e:	d004      	beq.n	800642a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8006420:	3c10      	subs	r4, #16
 8006422:	4620      	mov	r0, r4
 8006424:	f7ff ffca 	bl	80063bc <_ZNSt8functionIFvtEED1Ev>
 8006428:	e7f7      	b.n	800641a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bd90      	pop	{r4, r7, pc}

08006434 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
 8006438:	4801      	ldr	r0, [pc, #4]	; (8006440 <__tcf_0+0xc>)
 800643a:	f7ff ffe4 	bl	8006406 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200008c4 	.word	0x200008c4

08006444 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f3bf 8f5b 	dmb	ish
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d013      	beq.n	800648c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8006464:	480b      	ldr	r0, [pc, #44]	; (8006494 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8006466:	f00e fafd 	bl	8014a64 <__cxa_guard_acquire>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800647a:	4807      	ldr	r0, [pc, #28]	; (8006498 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 800647c:	f7ff ffab 	bl	80063d6 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8006480:	4806      	ldr	r0, [pc, #24]	; (800649c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8006482:	f00e fd64 	bl	8014f4e <atexit>
 8006486:	4803      	ldr	r0, [pc, #12]	; (8006494 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8006488:	f00e faf8 	bl	8014a7c <__cxa_guard_release>
		return instance;
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 800648e:	4618      	mov	r0, r3
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200009c8 	.word	0x200009c8
 8006498:	200008c4 	.word	0x200008c4
 800649c:	08006435 	.word	0x08006435

080064a0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fa ffc4 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 80064ba:	b5b0      	push	{r4, r5, r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	240f      	movs	r4, #15
 80064c6:	461d      	mov	r5, r3
 80064c8:	2c00      	cmp	r4, #0
 80064ca:	db05      	blt.n	80064d8 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 f866 	bl	800659e <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 80064d2:	3510      	adds	r5, #16
 80064d4:	3c01      	subs	r4, #1
 80064d6:	e7f7      	b.n	80064c8 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bdb0      	pop	{r4, r5, r7, pc}

080064ea <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 80064ea:	b590      	push	{r4, r7, lr}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	429c      	cmp	r4, r3
 8006502:	d004      	beq.n	800650e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8006504:	3c10      	subs	r4, #16
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff ffca 	bl	80064a0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 800650c:	e7f7      	b.n	80064fe <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	bd90      	pop	{r4, r7, pc}

08006518 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
 800651c:	4801      	ldr	r0, [pc, #4]	; (8006524 <__tcf_1+0xc>)
 800651e:	f7ff ffe4 	bl	80064ea <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8006522:	bd80      	pop	{r7, pc}
 8006524:	200009cc 	.word	0x200009cc

08006528 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f3bf 8f5b 	dmb	ish
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d013      	beq.n	8006570 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8006548:	480b      	ldr	r0, [pc, #44]	; (8006578 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 800654a:	f00e fa8b 	bl	8014a64 <__cxa_guard_acquire>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d008      	beq.n	8006570 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8006560:	f7ff ffab 	bl	80064ba <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8006564:	4806      	ldr	r0, [pc, #24]	; (8006580 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8006566:	f00e fcf2 	bl	8014f4e <atexit>
 800656a:	4803      	ldr	r0, [pc, #12]	; (8006578 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 800656c:	f00e fa86 	bl	8014a7c <__cxa_guard_release>
		return instance;
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8006572:	4618      	mov	r0, r3
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000ad0 	.word	0x20000ad0
 800657c:	200009cc 	.word	0x200009cc
 8006580:	08006519 	.word	0x08006519

08006584 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fa ff44 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fa ff37 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include <ICM20602.hpp>
#include "FreeRTOS.h"
#include "cmsis_os2.h"

ICM20602::ICM20602(const config_t& cfg, SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin) : m_cfg{cfg}, m_hspi{hspi}, m_csPort{csPort}, m_csPin{csPin} {
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0xc0>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	3304      	adds	r3, #4
 80065fe:	6810      	ldr	r0, [r2, #0]
 8006600:	6018      	str	r0, [r3, #0]
 8006602:	7912      	ldrb	r2, [r2, #4]
 8006604:	711a      	strb	r2, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	60da      	str	r2, [r3, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	611a      	str	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8b3a      	ldrh	r2, [r7, #24]
 8006616:	829a      	strh	r2, [r3, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	759a      	strb	r2, [r3, #22]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	635a      	str	r2, [r3, #52]	; 0x34
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	649a      	str	r2, [r3, #72]	; 0x48
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	64da      	str	r2, [r3, #76]	; 0x4c
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	659a      	str	r2, [r3, #88]	; 0x58
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	65da      	str	r2, [r3, #92]	; 0x5c
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	661a      	str	r2, [r3, #96]	; 0x60

}
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	08017ef0 	.word	0x08017ef0

080066a8 <_ZN8ICM20602D1Ev>:

ICM20602::~ICM20602() {
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <_ZN8ICM20602D1Ev+0x1c>)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]

}
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	08017ef0 	.word	0x08017ef0

080066c8 <_ZN8ICM20602D0Ev>:
ICM20602::~ICM20602() {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
}
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ffe9 	bl	80066a8 <_ZN8ICM20602D1Ev>
 80066d6:	2164      	movs	r1, #100	; 0x64
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f00e f9bf 	bl	8014a5c <_ZdlPvj>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <_ZN9ImuMasterC1Ev>:
#include "cmsis_os2.h"
#include "canzero.hpp"
#include "estdio.hpp"


ImuMaster::ImuMaster() {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <_ZN9ImuMasterC1Ev+0xd8>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a32      	ldr	r2, [pc, #200]	; (80067c4 <_ZN9ImuMasterC1Ev+0xdc>)
 80066fa:	3304      	adds	r3, #4
 80066fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006700:	6018      	str	r0, [r3, #0]
 8006702:	3304      	adds	r3, #4
 8006704:	7019      	strb	r1, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f103 000c 	add.w	r0, r3, #12
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	1d19      	adds	r1, r3, #4
 8006710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	4b2c      	ldr	r3, [pc, #176]	; (80067c8 <_ZN9ImuMasterC1Ev+0xe0>)
 8006718:	4a2c      	ldr	r2, [pc, #176]	; (80067cc <_ZN9ImuMasterC1Ev+0xe4>)
 800671a:	f7ff ff63 	bl	80065e4 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	1d19      	adds	r1, r3, #4
 8006728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	4b26      	ldr	r3, [pc, #152]	; (80067c8 <_ZN9ImuMasterC1Ev+0xe0>)
 8006730:	4a26      	ldr	r2, [pc, #152]	; (80067cc <_ZN9ImuMasterC1Ev+0xe4>)
 8006732:	f7ff ff57 	bl	80065e4 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	1d19      	adds	r1, r3, #4
 8006740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <_ZN9ImuMasterC1Ev+0xe0>)
 8006748:	4a20      	ldr	r2, [pc, #128]	; (80067cc <_ZN9ImuMasterC1Ev+0xe4>)
 800674a:	f7ff ff4b 	bl	80065e4 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	// TODO Auto-generated constructor stub

}
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	08017f00 	.word	0x08017f00
 80067c4:	08017dac 	.word	0x08017dac
 80067c8:	40020400 	.word	0x40020400
 80067cc:	20001150 	.word	0x20001150

080067d0 <_ZN9ImuMasterD1Ev>:

ImuMaster::~ImuMaster() {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	4a0b      	ldr	r2, [pc, #44]	; (8006808 <_ZN9ImuMasterD1Ev+0x38>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	33d4      	adds	r3, #212	; 0xd4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7ff ff60 	bl	80066a8 <_ZN8ICM20602D1Ev>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3370      	adds	r3, #112	; 0x70
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff5b 	bl	80066a8 <_ZN8ICM20602D1Ev>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	330c      	adds	r3, #12
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff56 	bl	80066a8 <_ZN8ICM20602D1Ev>
	// TODO Auto-generated destructor stub
}
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	08017f00 	.word	0x08017f00

0800680c <_ZN9ImuMasterD0Ev>:
ImuMaster::~ImuMaster() {
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
}
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ffdb 	bl	80067d0 <_ZN9ImuMasterD1Ev>
 800681a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f00e f91c 	bl	8014a5c <_ZdlPvj>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	switch (module) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d002      	beq.n	800684a <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 8006844:	e003      	b.n	800684e <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 8006848:	e004      	b.n	8006854 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 800684c:	e002      	b.n	8006854 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 800684e:	f002 fda1 	bl	8009394 <Error_Handler>
		return nullptr;
 8006852:	2300      	movs	r3, #0
	}
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000c68 	.word	0x20000c68
 8006860:	20000cb0 	.word	0x20000cb0

08006864 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

	}
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
		return m_value;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	881b      	ldrh	r3, [r3, #0]
	}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	807b      	strh	r3, [r7, #2]
		m_value = value;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	887a      	ldrh	r2, [r7, #2]
 80068a2:	801a      	strh	r2, [r3, #0]
	}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fa fdbc 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 80068ca:	b5b0      	push	{r4, r5, r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	240f      	movs	r4, #15
 80068d6:	461d      	mov	r5, r3
 80068d8:	2c00      	cmp	r4, #0
 80068da:	db05      	blt.n	80068e8 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 80068dc:	4628      	mov	r0, r5
 80068de:	f000 fa2a 	bl	8006d36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80068e2:	3510      	adds	r5, #16
 80068e4:	3c01      	subs	r4, #1
 80068e6:	e7f7      	b.n	80068d8 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bdb0      	pop	{r4, r5, r7, pc}

080068fa <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 80068fa:	b590      	push	{r4, r7, lr}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	429c      	cmp	r4, r3
 8006912:	d004      	beq.n	800691e <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8006914:	3c10      	subs	r4, #16
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff ffca 	bl	80068b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800691c:	e7f7      	b.n	800690e <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}

08006928 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__tcf_0+0xc>)
 800692e:	f7ff ffe4 	bl	80068fa <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000ad4 	.word	0x20000ad4

08006938 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 800693c:	4b12      	ldr	r3, [pc, #72]	; (8006988 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f3bf 8f5b 	dmb	ish
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d013      	beq.n	8006980 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8006958:	480b      	ldr	r0, [pc, #44]	; (8006988 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800695a:	f00e f883 	bl	8014a64 <__cxa_guard_acquire>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800696e:	4807      	ldr	r0, [pc, #28]	; (800698c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8006970:	f7ff ffab 	bl	80068ca <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8006974:	4806      	ldr	r0, [pc, #24]	; (8006990 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8006976:	f00e faea 	bl	8014f4e <atexit>
 800697a:	4803      	ldr	r0, [pc, #12]	; (8006988 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800697c:	f00e f87e 	bl	8014a7c <__cxa_guard_release>
		return instance;
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8006982:	4618      	mov	r0, r3
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20000bd8 	.word	0x20000bd8
 800698c:	20000ad4 	.word	0x20000ad4
 8006990:	08006929 	.word	0x08006929

08006994 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80069a4:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f9c7 	bl	8006d50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 80069c2:	68fb      	ldr	r3, [r7, #12]
	}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	18d0      	adds	r0, r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	f000 f9b0 	bl	8006d50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f9c1 	bl	8006d86 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d104      	bne.n	8006a3a <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f90a 	bl	8006c4e <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8006a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 8006a4e:	6838      	ldr	r0, [r7, #0]
 8006a50:	f7ff feee 	bl	8006830 <_ZL17AdcModuleToHandle9AdcModule>
 8006a54:	4602      	mov	r2, r0
					)) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
					)) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685c      	ldr	r4, [r3, #4]
 8006a68:	4b2f      	ldr	r3, [pc, #188]	; (8006b28 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d801      	bhi.n	8006a72 <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 8006a6e:	0063      	lsls	r3, r4, #1
 8006a70:	e001      	b.n	8006a76 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8006a72:	f04f 33ff 	mov.w	r3, #4294967295
 8006a76:	4618      	mov	r0, r3
 8006a78:	f00e f803 	bl	8014a82 <_Znaj>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461e      	mov	r6, r3
 8006a80:	4635      	mov	r5, r6
 8006a82:	1e63      	subs	r3, r4, #1
 8006a84:	461c      	mov	r4, r3
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	db05      	blt.n	8006a96 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7ff feea 	bl	8006864 <_ZN10AdcChannelC1Ev>
 8006a90:	3502      	adds	r5, #2
 8006a92:	3c01      	subs	r4, #1
 8006a94:	e7f7      	b.n	8006a86 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	4a22      	ldr	r2, [pc, #136]	; (8006b28 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d801      	bhi.n	8006aa8 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	e001      	b.n	8006aac <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8006aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aac:	4618      	mov	r0, r3
 8006aae:	f00d ffe8 	bl	8014a82 <_Znaj>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
					)) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8006ac0:	f7ff ff3a 	bl	8006938 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	f107 0308 	add.w	r3, r7, #8
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f974 	bl	8006dbc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff5a 	bl	8006994 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8006ae0:	4602      	mov	r2, r0
					)) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff fee0 	bl	80068b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	2001      	movs	r0, #1
 8006af6:	f009 fe44 	bl	8010782 <osSemaphoreNew>
 8006afa:	4602      	mov	r2, r0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006b12:	461a      	mov	r2, r3
 8006b14:	f003 fbda 	bl	800a2cc <HAL_ADC_Start_DMA>
		update();
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f854 	bl	8006bc6 <_ZN19AdcModuleController6updateEv>
	}
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b28:	3ffffffc 	.word	0x3ffffffc

08006b2c <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8006b34:	f7ff ff00 	bl	8006938 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f7ff ff43 	bl	80069cc <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f009 ff38 	bl	80109c0 <osSemaphoreGetCount>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf14      	ite	ne
 8006b56:	2301      	movne	r3, #1
 8006b58:	2300      	moveq	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d006      	beq.n	8006b6e <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f04f 31ff 	mov.w	r1, #4294967295
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f009 fe93 	bl	8010894 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <_ZN19AdcModuleControllerD1Ev+0x54>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f00d ff70 	bl	8014a60 <_ZdaPv>
		delete[] m_buffer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <_ZN19AdcModuleControllerD1Ev+0x66>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f00d ff67 	bl	8014a60 <_ZdaPv>
	}
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d301      	bcc.n	8006bb4 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 8006bb0:	f002 fbf0 	bl	8009394 <Error_Handler>
		}
		return m_channels + rank;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
	}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <_ZN19AdcModuleController6updateEv>:

	void update() {
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f009 fe5c 	bl	8010894 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d211      	bcs.n	8006c0e <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	18d0      	adds	r0, r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7ff fe46 	bl	8006892 <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e7e8      	b.n	8006be0 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006c20:	461a      	mov	r2, r3
 8006c22:	f003 fb53 	bl	800a2cc <HAL_ADC_Start_DMA>
	}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7c1b      	ldrb	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff ffc1 	bl	8006bc6 <_ZN19AdcModuleController6updateEv>
 8006c44:	e000      	b.n	8006c48 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 8006c46:	bf00      	nop
	}
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f009 fe69 	bl	8010938 <osSemaphoreRelease>
	}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b082      	sub	sp, #8
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
	switch(module){
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d004      	beq.n	8006c8c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 8006c82:	e007      	b.n	8006c94 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8006c84:	f000 f8cc 	bl	8006e20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	e008      	b.n	8006c9e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8006c8c:	f000 f8fe 	bl	8006e8c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8006c90:	4603      	mov	r3, r0
 8006c92:	e004      	b.n	8006c9e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8006c94:	f002 fb7e 	bl	8009394 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8006c98:	f000 f8c2 	bl	8006e20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8006c9c:	4603      	mov	r3, r0
	}
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 8006cb2:	68b8      	ldr	r0, [r7, #8]
 8006cb4:	f7ff ffdb 	bl	8006c6e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8006cb8:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff ff69 	bl	8006b9c <_ZN19AdcModuleController16getChannelByRankEj>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	605a      	str	r2, [r3, #4]
	}
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff ffa1 	bl	8006c2e <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fdc2 	bl	800687a <_ZN10AdcChannel3getEv>
 8006cf6:	4603      	mov	r3, r0
	}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>:
 */

#include "NTCSensor.hpp"
#include <cmath>

NTCSensor::NTCSensor(NTCTemperaturSensorConfig config) :
 8006d00:	b084      	sub	sp, #16
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	f107 0014 	add.w	r0, r7, #20
 8006d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		m_analogInput(config.m_adc.m_module, config.m_adc.m_rank), m_config(config) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6979      	ldr	r1, [r7, #20]
 8006d16:	8b3a      	ldrh	r2, [r7, #24]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff ffc4 	bl	8006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f107 0214 	add.w	r2, r7, #20
 8006d24:	609a      	str	r2, [r3, #8]
}
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d32:	b004      	add	sp, #16
 8006d34:	4770      	bx	lr

08006d36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fa fb6b 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f8c1 	bl	8006ee8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f8dd 	bl	8006f2c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff fd9a 	bl	80068b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8006d7c:	687b      	ldr	r3, [r7, #4]
      }
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	2203      	movs	r2, #3
 8006da2:	4798      	blx	r3
	    _M_manager = nullptr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
	return *this;
 8006db0:	687b      	ldr	r3, [r7, #4]
      }
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fa fb27 	bl	800141c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8006dce:	463b      	mov	r3, r7
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 f8d7 	bl	8006f84 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00f      	beq.n	8006dfc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8006ddc:	687c      	ldr	r4, [r7, #4]
 8006dde:	463b      	mov	r3, r7
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 f8da 	bl	8006f9a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006de6:	4603      	mov	r3, r0
 8006de8:	4619      	mov	r1, r3
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f8e0 	bl	8006fb0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a05      	ldr	r2, [pc, #20]	; (8006e08 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 8006df4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 8006dfa:	609a      	str	r2, [r3, #8]
      }
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd90      	pop	{r4, r7, pc}
 8006e06:	bf00      	nop
 8006e08:	08006fd5 	.word	0x08006fd5
 8006e0c:	08006fff 	.word	0x08006fff

08006e10 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__tcf_1+0xc>)
 8006e16:	f7ff fe89 	bl	8006b2c <_ZN19AdcModuleControllerD1Ev>
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000bdc 	.word	0x20000bdc

08006e20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f3bf 8f5b 	dmb	ish
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf0c      	ite	eq
 8006e36:	2301      	moveq	r3, #1
 8006e38:	2300      	movne	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d014      	beq.n	8006e6a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006e40:	480b      	ldr	r0, [pc, #44]	; (8006e70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006e42:	f00d fe0f 	bl	8014a64 <__cxa_guard_acquire>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bf14      	ite	ne
 8006e4c:	2301      	movne	r3, #1
 8006e4e:	2300      	moveq	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006e56:	2100      	movs	r1, #0
 8006e58:	4806      	ldr	r0, [pc, #24]	; (8006e74 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 8006e5a:	f7ff fdf3 	bl	8006a44 <_ZN19AdcModuleControllerC1E9AdcModule>
 8006e5e:	4806      	ldr	r0, [pc, #24]	; (8006e78 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8006e60:	f00e f875 	bl	8014f4e <atexit>
 8006e64:	4802      	ldr	r0, [pc, #8]	; (8006e70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006e66:	f00d fe09 	bl	8014a7c <__cxa_guard_release>
	return instance;
 8006e6a:	4b02      	ldr	r3, [pc, #8]	; (8006e74 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000bf8 	.word	0x20000bf8
 8006e74:	20000bdc 	.word	0x20000bdc
 8006e78:	08006e11 	.word	0x08006e11

08006e7c <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	4801      	ldr	r0, [pc, #4]	; (8006e88 <__tcf_2+0xc>)
 8006e82:	f7ff fe53 	bl	8006b2c <_ZN19AdcModuleControllerD1Ev>
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000bfc 	.word	0x20000bfc

08006e8c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8006e90:	4b12      	ldr	r3, [pc, #72]	; (8006edc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f3bf 8f5b 	dmb	ish
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf0c      	ite	eq
 8006ea2:	2301      	moveq	r3, #1
 8006ea4:	2300      	movne	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d014      	beq.n	8006ed6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8006eac:	480b      	ldr	r0, [pc, #44]	; (8006edc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006eae:	f00d fdd9 	bl	8014a64 <__cxa_guard_acquire>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4806      	ldr	r0, [pc, #24]	; (8006ee0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8006ec6:	f7ff fdbd 	bl	8006a44 <_ZN19AdcModuleControllerC1E9AdcModule>
 8006eca:	4806      	ldr	r0, [pc, #24]	; (8006ee4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 8006ecc:	f00e f83f 	bl	8014f4e <atexit>
 8006ed0:	4802      	ldr	r0, [pc, #8]	; (8006edc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006ed2:	f00d fdd3 	bl	8014a7c <__cxa_guard_release>
	return instance;
 8006ed6:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000c18 	.word	0x20000c18
 8006ee0:	20000bfc 	.word	0x20000bfc
 8006ee4:	08006e7d 	.word	0x08006e7d

08006ee8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fa fa91 	bl	800141c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8006efa:	6838      	ldr	r0, [r7, #0]
 8006efc:	f000 f89e 	bl	800703c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00d      	beq.n	8006f22 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
    }
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fa fc42 	bl	80017c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f103 0208 	add.w	r2, r3, #8
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fa fc6b 	bl	800182a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f103 020c 	add.w	r2, r3, #12
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 f886 	bl	8007072 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	  { return true; }
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006fb0:	b590      	push	{r4, r7, lr}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8006fba:	6838      	ldr	r0, [r7, #0]
 8006fbc:	f7ff ffed 	bl	8006f9a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f872 	bl	80070b0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd90      	pop	{r4, r7, pc}

08006fd4 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006fd4:	b590      	push	{r4, r7, lr}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f87f 	bl	80070e2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f7ff ffc1 	bl	8006f6e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006fec:	4603      	mov	r3, r0
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 f887 	bl	8007104 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8006ff6:	bf00      	nop
      }
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd90      	pop	{r4, r7, pc}

08006ffe <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006ffe:	b590      	push	{r4, r7, lr}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	4613      	mov	r3, r2
 800700a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d109      	bne.n	8007026 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f88c 	bl	8007130 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8007018:	4604      	mov	r4, r0
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f000 f861 	bl	80070e2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8007020:	4603      	mov	r3, r0
 8007022:	6023      	str	r3, [r4, #0]
	    break;
 8007024:	e005      	b.n	8007032 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	461a      	mov	r2, r3
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f88b 	bl	8007148 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8007032:	2300      	movs	r3, #0
      }
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	bd90      	pop	{r4, r7, pc}

0800703c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa fa09 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800704c:	4603      	mov	r3, r0
 800704e:	f083 0301 	eor.w	r3, r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ffed 	bl	800705c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8007082:	4603      	mov	r3, r0
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8007088:	6838      	ldr	r0, [r7, #0]
 800708a:	f7ff ffe7 	bl	800705c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800708e:	4603      	mov	r3, r0
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff ffde 	bl	800705c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80070a0:	4603      	mov	r3, r0
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	601a      	str	r2, [r3, #0]
    }
 80070a8:	bf00      	nop
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80070bc:	68b8      	ldr	r0, [r7, #8]
 80070be:	f7ff ff6c 	bl	8006f9a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80070c2:	4604      	mov	r4, r0
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff f963 	bl	8006390 <_ZNSt9_Any_data9_M_accessEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4619      	mov	r1, r3
 80070ce:	2004      	movs	r0, #4
 80070d0:	f7ff f952 	bl	8006378 <_ZnwjPv>
 80070d4:	4602      	mov	r2, r0
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	bf00      	nop
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd90      	pop	{r4, r7, pc}

080070e2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f857 	bl	800719e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80070f0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f85f 	bl	80071b6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 80070f8:	4603      	mov	r3, r0
 80070fa:	bf00      	nop
	}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8007104:	b5b0      	push	{r4, r5, r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f85c 	bl	80071cc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8007114:	4604      	mov	r4, r0
 8007116:	6838      	ldr	r0, [r7, #0]
 8007118:	f7ff ff29 	bl	8006f6e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f85d 	bl	80071e2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bdb0      	pop	{r4, r5, r7, pc}

08007130 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff f929 	bl	8006390 <_ZNSt9_Any_data9_M_accessEv>
 800713e:	4603      	mov	r3, r0
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8007148:	b5b0      	push	{r4, r5, r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d016      	beq.n	800718a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 800715c:	2b03      	cmp	r3, #3
 800715e:	dc19      	bgt.n	8007194 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8007160:	2b01      	cmp	r3, #1
 8007162:	d002      	beq.n	800716a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d00a      	beq.n	800717e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8007168:	e014      	b.n	8007194 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7ff ffe0 	bl	8007130 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8007170:	4604      	mov	r4, r0
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f7ff ffb5 	bl	80070e2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8007178:	4603      	mov	r3, r0
 800717a:	6023      	str	r3, [r4, #0]
	      break;
 800717c:	e00a      	b.n	8007194 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800717e:	462a      	mov	r2, r5
 8007180:	68b9      	ldr	r1, [r7, #8]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f844 	bl	8007210 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8007188:	e004      	b.n	8007194 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800718a:	4621      	mov	r1, r4
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f858 	bl	8007242 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8007192:	bf00      	nop
	  return false;
 8007194:	2300      	movs	r3, #0
	}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bdb0      	pop	{r4, r5, r7, pc}

0800719e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff f8fd 	bl	80063a6 <_ZNKSt9_Any_data9_M_accessEv>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80071e2:	b590      	push	{r4, r7, lr}
 80071e4:	b085      	sub	sp, #20
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	7338      	strb	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80071ee:	68b8      	ldr	r0, [r7, #8]
 80071f0:	f7ff ffec 	bl	80071cc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80071f4:	4604      	mov	r4, r0
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff feb9 	bl	8006f6e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80071fc:	4603      	mov	r3, r0
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	4620      	mov	r0, r4
 8007204:	f7ff fc09 	bl	8006a1a <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8007208:	bf00      	nop
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bd90      	pop	{r4, r7, pc}

08007210 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800721c:	68b8      	ldr	r0, [r7, #8]
 800721e:	f7ff ffbe 	bl	800719e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8007222:	4604      	mov	r4, r0
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff f8b3 	bl	8006390 <_ZNSt9_Any_data9_M_accessEv>
 800722a:	4603      	mov	r3, r0
 800722c:	4619      	mov	r1, r3
 800722e:	2004      	movs	r0, #4
 8007230:	f7ff f8a2 	bl	8006378 <_ZnwjPv>
 8007234:	4602      	mov	r2, r0
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	6013      	str	r3, [r2, #0]
	}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bd90      	pop	{r4, r7, pc}

08007242 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f804 	bl	800725a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff f894 	bl	8006390 <_ZNSt9_Any_data9_M_accessEv>
 8007268:	4603      	mov	r3, r0
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <_ZN5StateC1Ev>:
#define INC_STATE_HPP_
#include <type_traits>

class StateMaschine;

class State{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	4a07      	ldr	r2, [pc, #28]	; (800729c <_ZN5StateC1Ev+0x28>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	721a      	strb	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	08017f2c 	.word	0x08017f2c

080072a0 <_ZN5StateD1Ev>:
		static_assert(std::is_base_of<State, StateImplementation>());
		static unsigned int id = getNextId();
		return id;
	}

	virtual ~State() = default;
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	4a04      	ldr	r2, [pc, #16]	; (80072bc <_ZN5StateD1Ev+0x1c>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	08017f2c 	.word	0x08017f2c

080072c0 <_ZN5StateD0Ev>:
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ffe9 	bl	80072a0 <_ZN5StateD1Ev>
 80072ce:	210c      	movs	r1, #12
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f00d fbc3 	bl	8014a5c <_ZdlPvj>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <_ZN17PodEmergencyStateC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodEmergencyState.hpp>

PodEmergencyState::PodEmergencyState() {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff ffc2 	bl	8007274 <_ZN5StateC1Ev>
 80072f0:	4a03      	ldr	r2, [pc, #12]	; (8007300 <_ZN17PodEmergencyStateC1Ev+0x20>)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	08017f10 	.word	0x08017f10

08007304 <_ZN17PodEmergencyState5setupEv>:


void PodEmergencyState::setup() {
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]

}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <_ZN17PodEmergencyState6updateEv>:

void PodEmergencyState::update() {
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <_ZN17PodEmergencyState7disposeEv>:

void PodEmergencyState::dispose() {
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <_ZN17PodEmergencyStateD1Ev>:
#ifndef CANZERO_STATIC_INC_PODEMERGENCYSTATE_HPP_
#define CANZERO_STATIC_INC_PODEMERGENCYSTATE_HPP_

#include "State.hpp"

class PodEmergencyState : public State {
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	4a05      	ldr	r2, [pc, #20]	; (8007360 <_ZN17PodEmergencyStateD1Ev+0x20>)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ffa5 	bl	80072a0 <_ZN5StateD1Ev>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	08017f10 	.word	0x08017f10

08007364 <_ZN17PodEmergencyStateD0Ev>:
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ffe7 	bl	8007340 <_ZN17PodEmergencyStateD1Ev>
 8007372:	210c      	movs	r1, #12
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f00d fb71 	bl	8014a5c <_ZdlPvj>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <_ZN5State9getNextIdEv>:
protected:
	StateMaschine* m_stateMaschine = nullptr;
	bool m_active = false;

private:
	static unsigned int getNextId(){
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
		static unsigned int stateIdAcc;
		return stateIdAcc++;
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <_ZN5State9getNextIdEv+0x18>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	4903      	ldr	r1, [pc, #12]	; (800739c <_ZN5State9getNextIdEv+0x18>)
 8007390:	600a      	str	r2, [r1, #0]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000c1c 	.word	0x20000c1c

080073a0 <_ZN12PodIdleStateC1Ev>:

#include "PodIdleState.hpp"
#include "PodLaunchPreparationState.hpp"
#include "StateMaschine.hpp"

PodIdleState::PodIdleState() {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7ff ff62 	bl	8007274 <_ZN5StateC1Ev>
 80073b0:	4a06      	ldr	r2, [pc, #24]	; (80073cc <_ZN12PodIdleStateC1Ev+0x2c>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	330c      	adds	r3, #12
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 f83a 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
	// TODO Auto-generated constructor stub

}
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	08017f48 	.word	0x08017f48

080073d0 <_ZN12PodIdleState5setupEv>:

void PodIdleState::setup(){
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <_ZN12PodIdleState6updateEv>:

void PodIdleState::update(){
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	if(m_startupMessageQueue.hasAny()){
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	330c      	adds	r3, #12
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f83a 	bl	800746a <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE6hasAnyEv>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00d      	beq.n	8007418 <_ZN12PodIdleState6updateEv+0x34>
		auto msg = m_startupMessageQueue.dequeue();
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f103 020c 	add.w	r2, r3, #12
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f83d 	bl	8007488 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7dequeueEv>
		//TODO parse msg.
		m_stateMaschine->setState<PodLaunchPreparationState>();
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f853 	bl	80074be <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>
	}
}
 8007418:	bf00      	nop
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <_ZN12PodIdleState7disposeEv>:

void PodIdleState::dispose(){
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>:
template<typename MESSAGE>
class RxMessageQueue {
private:
	static constexpr unsigned int INVALID_ID = std::numeric_limits<unsigned int>::max();
public:
	RxMessageQueue() {
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f04f 32ff 	mov.w	r2, #4294967295
 8007442:	605a      	str	r2, [r3, #4]

	}
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>:
	~RxMessageQueue() {
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
		disable();
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f858 	bl	8007510 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7disableEv>
	}
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE6hasAnyEv>:

	inline bool isFull(){
		return xMessageBufferIsFull(m_messageBuffer) == pdTRUE;
	}

	inline bool hasAny(){
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
		return not isEmpty();
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f85e 	bl	8007534 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7isEmptyEv>
 8007478:	4603      	mov	r3, r0
 800747a:	f083 0301 	eor.w	r3, r3, #1
 800747e:	b2db      	uxtb	r3, r3
	}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7dequeueEv>:

	inline can::Message<MESSAGE> dequeue(){
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	; 0x30
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
		RxMessage rxMsg;
		xMessageBufferReceive(m_messageBuffer, &rxMsg, sizeof(RxMessage), 0);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f107 010c 	add.w	r1, r7, #12
 800749a:	2300      	movs	r3, #0
 800749c:	2224      	movs	r2, #36	; 0x24
 800749e:	f00a ff49 	bl	8012334 <xStreamBufferReceive>
		return can::Message<MESSAGE>(std::move(rxMsg));
 80074a2:	f107 030c 	add.w	r3, r7, #12
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f857 	bl	800755a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f875 	bl	80075a0 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK9RxMessage>
	}
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	3730      	adds	r7, #48	; 0x30
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>:
		state.m_stateMaschine = this;
		m_states[id] = &state;
	}

	template<typename DestState>
	void setState() {
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
		static_assert(std::is_base_of<State, DestState>::value);
		taskENTER_CRITICAL();
 80074c6:	f00c ffad 	bl	8014424 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2200      	movs	r2, #0
 80074da:	721a      	strb	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 80074dc:	f000 f872 	bl	80075c4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 80074e0:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7c1b      	ldrb	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv+0x30>
			Error_Handler();
 80074ea:	f001 ff53 	bl	8009394 <Error_Handler>
		}
		m_states[id]->m_active = true;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	60da      	str	r2, [r3, #12]
		taskEXIT_CRITICAL();
 8007504:	f00c ffbe 	bl	8014484 <vPortExitCritical>
	}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7disableEv>:
	void disable(){
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
		if(m_receiverId != INVALID_ID){
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d004      	beq.n	800752c <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7disableEv+0x1c>
			unregisterMessageReceiver(m_receiverId);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fa f862 	bl	80015f0 <_ZN3can25unregisterMessageReceiverEj>
	}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEE7isEmptyEv>:
	inline bool isEmpty(){
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
		return xMessageBufferIsEmpty(m_messageBuffer) == pdTRUE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f00a ffbe 	bl	80124c2 <xStreamBufferIsEmpty>
 8007546:	4603      	mov	r3, r0
 8007548:	2b01      	cmp	r3, #1
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
	}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <_ZSt4moveIR9RxMessageEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	2300      	movs	r3, #0
 8007584:	2201      	movs	r2, #1
 8007586:	2100      	movs	r1, #0
 8007588:	f7fa ff18 	bl	80023bc <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d000      	beq.n	8007596 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK19CAN_RxHeaderTypeDefPKh+0x26>
                    while(1);
 8007594:	e7fe      	b.n	8007594 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK19CAN_RxHeaderTypeDefPKh+0x24>
        };
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	331c      	adds	r3, #28
 80075b0:	461a      	mov	r2, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff ffdc 	bl	8007570 <_ZN3can7MessageINS_8messages18SENSOR_HELLO_WORLDEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>:
	static unsigned int getId(){
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80075c8:	4b12      	ldr	r3, [pc, #72]	; (8007614 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f3bf 8f5b 	dmb	ish
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bf0c      	ite	eq
 80075da:	2301      	moveq	r3, #1
 80075dc:	2300      	movne	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d012      	beq.n	800760a <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 80075e4:	480b      	ldr	r0, [pc, #44]	; (8007614 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 80075e6:	f00d fa3d 	bl	8014a64 <__cxa_guard_acquire>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bf14      	ite	ne
 80075f0:	2301      	movne	r3, #1
 80075f2:	2300      	moveq	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d007      	beq.n	800760a <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 80075fa:	f7ff fec3 	bl	8007384 <_ZN5State9getNextIdEv>
 80075fe:	4603      	mov	r3, r0
 8007600:	4a05      	ldr	r2, [pc, #20]	; (8007618 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	4803      	ldr	r0, [pc, #12]	; (8007614 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 8007606:	f00d fa39 	bl	8014a7c <__cxa_guard_release>
		return id;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 800760c:	681b      	ldr	r3, [r3, #0]
	}
 800760e:	4618      	mov	r0, r3
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000c24 	.word	0x20000c24
 8007618:	20000c20 	.word	0x20000c20

0800761c <_ZN12PodIdleStateD1Ev>:
#define INC_PODIDLESTATE_HPP_

#include "State.hpp"
#include "canzero.hpp"

class PodIdleState : public State{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	4a08      	ldr	r2, [pc, #32]	; (8007648 <_ZN12PodIdleStateD1Ev+0x2c>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	330c      	adds	r3, #12
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff ff0f 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff fe32 	bl	80072a0 <_ZN5StateD1Ev>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	08017f48 	.word	0x08017f48

0800764c <_ZN12PodIdleStateD0Ev>:
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff ffe1 	bl	800761c <_ZN12PodIdleStateD1Ev>
 800765a:	2114      	movs	r1, #20
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f00d f9fd 	bl	8014a5c <_ZdlPvj>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <_ZN25PodLaunchPreparationStateC1Ev>:
 */

#include <PodLaunchPreparationState.hpp>
#include "peripheral_config.hpp"

PodLaunchPreparationState::PodLaunchPreparationState() :
 800766c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766e:	b087      	sub	sp, #28
 8007670:	af04      	add	r7, sp, #16
 8007672:	6078      	str	r0, [r7, #4]
		m_coolingPressure(g_peripherals.m_pressureConfig.m_module, g_peripherals.m_pressureConfig.m_rank),
		m_coolingTemperatur( g_peripherals.m_coolingReservoirTemperaturSensorConfig),
		m_sdc(g_peripherals.m_sdcConfig) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fdfc 	bl	8007274 <_ZN5StateC1Ev>
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <_ZN25PodLaunchPreparationStateC1Ev+0x80>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	330c      	adds	r3, #12
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fed4 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3314      	adds	r3, #20
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fecf 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	331c      	adds	r3, #28
		m_coolingPressure(g_peripherals.m_pressureConfig.m_module, g_peripherals.m_pressureConfig.m_rank),
 800769a:	2101      	movs	r1, #1
 800769c:	2202      	movs	r2, #2
		m_sdc(g_peripherals.m_sdcConfig) {
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fb01 	bl	8006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f103 0624 	add.w	r6, r3, #36	; 0x24
 80076aa:	4d11      	ldr	r5, [pc, #68]	; (80076f0 <_ZN25PodLaunchPreparationStateC1Ev+0x84>)
 80076ac:	466c      	mov	r4, sp
 80076ae:	f105 0334 	add.w	r3, r5, #52	; 0x34
 80076b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076ba:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80076be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff fb1d 	bl	8006d00 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3330      	adds	r3, #48	; 0x30
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff f80c 	bl	80066e8 <_ZN9ImuMasterC1Ev>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80076d6:	2201      	movs	r2, #1
 80076d8:	4906      	ldr	r1, [pc, #24]	; (80076f4 <_ZN25PodLaunchPreparationStateC1Ev+0x88>)
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fab2 	bl	8007c44 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>
}
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4618      	mov	r0, r3
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ea:	bf00      	nop
 80076ec:	08017ffc 	.word	0x08017ffc
 80076f0:	08017f5c 	.word	0x08017f5c
 80076f4:	08017f7c 	.word	0x08017f7c

080076f8 <_ZN25PodLaunchPreparationState5setupEv>:

void PodLaunchPreparationState::setup() {
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <_ZN25PodLaunchPreparationState6updateEv>:

void PodLaunchPreparationState::update() {
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
	//TODO implement sensor value checking
	//TODO implement checking of received messages
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <_ZN25PodLaunchPreparationState7disposeEv>:

void PodLaunchPreparationState::dispose() {
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <_ZN25PodLaunchPreparationStateD1Ev>:
#include "NTCSensor.hpp"
#include "ImuMaster.hpp"
#include "State.hpp"
#include "SDC.hpp"

class PodLaunchPreparationState : public State{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	4a0d      	ldr	r2, [pc, #52]	; (8007774 <_ZN25PodLaunchPreparationStateD1Ev+0x40>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3330      	adds	r3, #48	; 0x30
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f842 	bl	80067d0 <_ZN9ImuMasterD1Ev>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3314      	adds	r3, #20
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fe7e 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	330c      	adds	r3, #12
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fe79 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fd9c 	bl	80072a0 <_ZN5StateD1Ev>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	08017ffc 	.word	0x08017ffc

08007778 <_ZN25PodLaunchPreparationStateD0Ev>:
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff ffd7 	bl	8007734 <_ZN25PodLaunchPreparationStateD1Ev>
 8007786:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f00d f966 	bl	8014a5c <_ZdlPvj>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <_ZN17PodLaunchingStateC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodLaunchingState.hpp>

PodLaunchingState::PodLaunchingState() {
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fd64 	bl	8007274 <_ZN5StateC1Ev>
 80077ac:	4a03      	ldr	r2, [pc, #12]	; (80077bc <_ZN17PodLaunchingStateC1Ev+0x20>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]

}
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	08018018 	.word	0x08018018

080077c0 <_ZN17PodLaunchingState5setupEv>:

void PodLaunchingState::setup() {
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <_ZN17PodLaunchingState6updateEv>:

void PodLaunchingState::update() {
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]

}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <_ZN17PodLaunchingState7disposeEv>:

void PodLaunchingState::dispose() {
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <_ZN17PodLaunchingStateD1Ev>:
#ifndef INC_PODLAUNCHINGSTATE_HPP_
#define INC_PODLAUNCHINGSTATE_HPP_

#include "State.hpp"

class PodLaunchingState : public State{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	4a05      	ldr	r2, [pc, #20]	; (800781c <_ZN17PodLaunchingStateD1Ev+0x20>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fd47 	bl	80072a0 <_ZN5StateD1Ev>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	08018018 	.word	0x08018018

08007820 <_ZN17PodLaunchingStateD0Ev>:
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7ff ffe7 	bl	80077fc <_ZN17PodLaunchingStateD1Ev>
 800782e:	210c      	movs	r1, #12
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f00d f913 	bl	8014a5c <_ZdlPvj>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <_ZN16PodPushableStateC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodPushableState.h>

PodPushableState::PodPushableState() {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fd12 	bl	8007274 <_ZN5StateC1Ev>
 8007850:	4a03      	ldr	r2, [pc, #12]	; (8007860 <_ZN16PodPushableStateC1Ev+0x20>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	08018034 	.word	0x08018034

08007864 <_ZN16PodPushableState5setupEv>:

void PodPushableState::setup() {
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]

}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <_ZN16PodPushableState6updateEv>:

void PodPushableState::update() {
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	//TODO implement sensor value checking
	//TODO implement checking of received messages
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <_ZN16PodPushableState7disposeEv>:

void PodPushableState::dispose() {
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <_ZN16PodPushableStateD1Ev>:
#ifndef INC_PODPUSHABLESTATE_H_
#define INC_PODPUSHABLESTATE_H_

#include <State.hpp>

class PodPushableState: public State {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	4a05      	ldr	r2, [pc, #20]	; (80078c0 <_ZN16PodPushableStateD1Ev+0x20>)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fcf5 	bl	80072a0 <_ZN5StateD1Ev>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08018034 	.word	0x08018034

080078c4 <_ZN16PodPushableStateD0Ev>:
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff ffe7 	bl	80078a0 <_ZN16PodPushableStateD1Ev>
 80078d2:	210c      	movs	r1, #12
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f00d f8c1 	bl	8014a5c <_ZdlPvj>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <_ZN21PodReadyToLaunchStateC1Ev>:

#include <PodReadyToLaunchState.hpp>
#include "StateMaschine.hpp"
#include "peripheral_config.hpp"

PodReadyToLaunchState::PodReadyToLaunchState() :
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]
	m_coolingTemperatur(g_peripherals.m_coolingReservoirTemperaturSensorConfig),
	m_eboxTemperatur(g_peripherals.m_eboxTemperaturConfig){
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff fcc0 	bl	8007274 <_ZN5StateC1Ev>
 80078f4:	4a1c      	ldr	r2, [pc, #112]	; (8007968 <_ZN21PodReadyToLaunchStateC1Ev+0x84>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	330c      	adds	r3, #12
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fd98 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3314      	adds	r3, #20
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fd93 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	331c      	adds	r3, #28
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fd8e 	bl	8007434 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEEC1Ev>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0624 	add.w	r6, r3, #36	; 0x24
 800791e:	4d13      	ldr	r5, [pc, #76]	; (800796c <_ZN21PodReadyToLaunchStateC1Ev+0x88>)
 8007920:	466c      	mov	r4, sp
 8007922:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8007926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800792a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800792e:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8007932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff f9e3 	bl	8006d00 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8007940:	4d0a      	ldr	r5, [pc, #40]	; (800796c <_ZN21PodReadyToLaunchStateC1Ev+0x88>)
 8007942:	466c      	mov	r4, sp
 8007944:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 8007948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800794c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007950:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007956:	4630      	mov	r0, r6
 8007958:	f7ff f9d2 	bl	8006d00 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>
	// TODO Auto-generated constructor stub

}
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	bf00      	nop
 8007968:	080180e8 	.word	0x080180e8
 800796c:	08018048 	.word	0x08018048

08007970 <_ZN21PodReadyToLaunchState5setupEv>:


void PodReadyToLaunchState::setup() {
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <_ZN21PodReadyToLaunchState6updateEv>:

void PodReadyToLaunchState::update() {
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <_ZN21PodReadyToLaunchState7disposeEv>:

void PodReadyToLaunchState::dispose() {
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <_ZN21PodReadyToLaunchStateD1Ev>:
#include "canzero.hpp"
#include "NTCSensor.hpp"
#include "State.hpp"


class PodReadyToLaunchState : public State{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	4a0d      	ldr	r2, [pc, #52]	; (80079ec <_ZN21PodReadyToLaunchStateD1Ev+0x40>)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	331c      	adds	r3, #28
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fd47 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3314      	adds	r3, #20
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fd42 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	330c      	adds	r3, #12
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fd3d 	bl	8007452 <_ZN3can14RxMessageQueueINS_8messages18SENSOR_HELLO_WORLDEED1Ev>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fc60 	bl	80072a0 <_ZN5StateD1Ev>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	080180e8 	.word	0x080180e8

080079f0 <_ZN21PodReadyToLaunchStateD0Ev>:
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff ffd7 	bl	80079ac <_ZN21PodReadyToLaunchStateD1Ev>
 80079fe:	213c      	movs	r1, #60	; 0x3c
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f00d f82b 	bl	8014a5c <_ZdlPvj>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <_ZN15PodRunStopStateC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodRunStopState.hpp>

PodRunStopState::PodRunStopState() {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fc2a 	bl	8007274 <_ZN5StateC1Ev>
 8007a20:	4a03      	ldr	r2, [pc, #12]	; (8007a30 <_ZN15PodRunStopStateC1Ev+0x20>)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	08018104 	.word	0x08018104

08007a34 <_ZN15PodRunStopState5setupEv>:

void PodRunStopState::setup() {
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <_ZN15PodRunStopState6updateEv>:

void PodRunStopState::update() {
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <_ZN15PodRunStopState7disposeEv>:

void PodRunStopState::dispose() {
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]

}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <_ZN15PodRunStopStateD1Ev>:
#ifndef INC_PODRUNSTOPSTATE_HPP_
#define INC_PODRUNSTOPSTATE_HPP_

#include <State.hpp>

class PodRunStopState: public State {
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	4a05      	ldr	r2, [pc, #20]	; (8007a90 <_ZN15PodRunStopStateD1Ev+0x20>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff fc0d 	bl	80072a0 <_ZN5StateD1Ev>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08018104 	.word	0x08018104

08007a94 <_ZN15PodRunStopStateD0Ev>:
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ffe7 	bl	8007a70 <_ZN15PodRunStopStateD1Ev>
 8007aa2:	210c      	movs	r1, #12
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f00c ffd9 	bl	8014a5c <_ZdlPvj>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <_ZN17PodSafeToApproachC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodSafeToApproach.hpp>

PodSafeToApproach::PodSafeToApproach() {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fbd8 	bl	8007274 <_ZN5StateC1Ev>
 8007ac4:	4a03      	ldr	r2, [pc, #12]	; (8007ad4 <_ZN17PodSafeToApproachC1Ev+0x20>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	08018120 	.word	0x08018120

08007ad8 <_ZN17PodSafeToApproach5setupEv>:

void PodSafeToApproach::setup() {
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <_ZN17PodSafeToApproach6updateEv>:

void PodSafeToApproach::update() {
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <_ZN17PodSafeToApproach7disposeEv>:

void PodSafeToApproach::dispose() {
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <_ZN17PodSafeToApproachD1Ev>:
#ifndef INC_PODSAFETOAPPROACH_HPP_
#define INC_PODSAFETOAPPROACH_HPP_

#include <State.hpp>

class PodSafeToApproach: public State {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	4a05      	ldr	r2, [pc, #20]	; (8007b34 <_ZN17PodSafeToApproachD1Ev+0x20>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff fbbb 	bl	80072a0 <_ZN5StateD1Ev>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	08018120 	.word	0x08018120

08007b38 <_ZN17PodSafeToApproachD0Ev>:
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f7ff ffe7 	bl	8007b14 <_ZN17PodSafeToApproachD1Ev>
 8007b46:	210c      	movs	r1, #12
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f00c ff87 	bl	8014a5c <_ZdlPvj>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <_ZN15PodStartupStateC1Ev>:
 *      Author: OfficeLaptop
 */

#include <PodStartupState.hpp>

PodStartupState::PodStartupState() {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff fb86 	bl	8007274 <_ZN5StateC1Ev>
 8007b68:	4a03      	ldr	r2, [pc, #12]	; (8007b78 <_ZN15PodStartupStateC1Ev+0x20>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]

}
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	0801813c 	.word	0x0801813c

08007b7c <_ZN15PodStartupState5setupEv>:

void PodStartupState::setup() {
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <_ZN15PodStartupState6updateEv>:

void PodStartupState::update() {
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <_ZN15PodStartupState7disposeEv>:

void PodStartupState::dispose() {
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <_ZN15PodStartupStateD1Ev>:
#ifndef INC_PODSTARTUPSTATE_HPP_
#define INC_PODSTARTUPSTATE_HPP_

#include <State.hpp>

class PodStartupState: public State {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	4a05      	ldr	r2, [pc, #20]	; (8007bd8 <_ZN15PodStartupStateD1Ev+0x20>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fb69 	bl	80072a0 <_ZN5StateD1Ev>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	0801813c 	.word	0x0801813c

08007bdc <_ZN15PodStartupStateD0Ev>:
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffe7 	bl	8007bb8 <_ZN15PodStartupStateD1Ev>
 8007bea:	210c      	movs	r1, #12
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f00c ff35 	bl	8014a5c <_ZdlPvj>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	809a      	strh	r2, [r3, #4]
	}
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <_ZN19GPIOWriteController5resetEv>:
		if (value)
			set();
		else
			reset();
	}
	void reset() {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6818      	ldr	r0, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	889b      	ldrh	r3, [r3, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	4619      	mov	r1, r3
 8007c38:	f004 fba8 	bl	800c38c <HAL_GPIO_WritePin>
	}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>:
 *  Created on: Apr 26, 2023
 *      Author: OfficeLaptop
 */
#include "SDC.hpp"

SDC::SDC(const SDCConfig& config, SDCStatus initalStatus) : m_gpio(config.m_gpio.m_port, config.m_gpio.m_pin), m_status(initalStatus) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	889b      	ldrh	r3, [r3, #4]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f7ff ffcd 	bl	8007bfc <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	721a      	strb	r2, [r3, #8]
	open();
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 f805 	bl	8007c78 <_ZN3SDC4openEv>
}
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <_ZN3SDC4openEv>:

void SDC::open(){
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	m_gpio.reset();
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff ffce 	bl	8007c24 <_ZN19GPIOWriteController5resetEv>
	m_status = SDC_OPEN;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	721a      	strb	r2, [r3, #8]
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 8007caa:	b084      	sub	sp, #16
 8007cac:	b5b0      	push	{r4, r5, r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	f107 001c 	add.w	r0, r7, #28
 8007cb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 8007cc0:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe ffef 	bl	8006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 8007cce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe ffe8 	bl	8006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3310      	adds	r3, #16
 8007cda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 8007cdc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe ffe0 	bl	8006ca6 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f103 0418 	add.w	r4, r3, #24
 8007cec:	f107 051c 	add.w	r5, r7, #28
 8007cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007d00:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007d10:	b004      	add	sp, #16
 8007d12:	4770      	bx	lr

08007d14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe ffdb 	bl	8006cda <_ZN20AdcChannelController3getEv>
 8007d24:	4603      	mov	r3, r0
 8007d26:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 8007d28:	89fb      	ldrh	r3, [r7, #14]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007d70 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 8007d36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d3a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007d74 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 8007d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d42:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007d78 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 8007d46:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007d4a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8007d7c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 8007d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d52:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d5a:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	ee07 3a90 	vmov	s15, r3
	}
 8007d64:	eeb0 0a67 	vmov.f32	s0, s15
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	40533333 	.word	0x40533333
 8007d74:	457ff000 	.word	0x457ff000
 8007d78:	3f428f5c 	.word	0x3f428f5c
 8007d7c:	3b23d70a 	.word	0x3b23d70a

08007d80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe ffa4 	bl	8006cda <_ZN20AdcChannelController3getEv>
 8007d92:	4603      	mov	r3, r0
 8007d94:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 8007d96:	89fb      	ldrh	r3, [r7, #14]
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007da0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007e48 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 8007da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007db8:	ee16 0a90 	vmov	r0, s13
 8007dbc:	f7f8 fbc4 	bl	8000548 <__aeabi_f2d>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	ec43 2b10 	vmov	d0, r2, r3
 8007dc8:	f00c feb6 	bl	8014b38 <log>
 8007dcc:	ec51 0b10 	vmov	r0, r1, d0
 8007dd0:	a317      	add	r3, pc, #92	; (adr r3, 8007e30 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc0f 	bl	80005f8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	a315      	add	r3, pc, #84	; (adr r3, 8007e38 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fa50 	bl	800028c <__adddf3>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	f04f 0000 	mov.w	r0, #0
 8007df4:	4915      	ldr	r1, [pc, #84]	; (8007e4c <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 8007df6:	f7f8 fd29 	bl	800084c <__aeabi_ddiv>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	a30f      	add	r3, pc, #60	; (adr r3, 8007e40 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fa3e 	bl	8000288 <__aeabi_dsub>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4610      	mov	r0, r2
 8007e12:	4619      	mov	r1, r3
 8007e14:	f7f8 fee8 	bl	8000be8 <__aeabi_d2f>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	ee07 3a90 	vmov	s15, r3
	}
 8007e22:	eeb0 0a67 	vmov.f32	s0, s15
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	f3af 8000 	nop.w
 8007e30:	60000000 	.word	0x60000000
 8007e34:	3f3363ac 	.word	0x3f3363ac
 8007e38:	e0000000 	.word	0xe0000000
 8007e3c:	3f6b79e1 	.word	0x3f6b79e1
 8007e40:	60000000 	.word	0x60000000
 8007e44:	40711266 	.word	0x40711266
 8007e48:	457ff000 	.word	0x457ff000
 8007e4c:	3ff00000 	.word	0x3ff00000

08007e50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 8007e50:	b580      	push	{r7, lr}
 8007e52:	ed2d 8b02 	vpush	{d8}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ff8f 	bl	8007d80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8007e62:	eeb0 8a40 	vmov.f32	s16, s0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ff54 	bl	8007d14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8007e6c:	eef0 7a40 	vmov.f32	s15, s0
 8007e70:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007e74:	ee17 0a90 	vmov	r0, s15
 8007e78:	f7f8 fb66 	bl	8000548 <__aeabi_f2d>
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e84:	f7f8 fce2 	bl	800084c <__aeabi_ddiv>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f7f8 feaa 	bl	8000be8 <__aeabi_d2f>
 8007e94:	4603      	mov	r3, r0
 8007e96:	60fb      	str	r3, [r7, #12]
		return average;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	ee07 3a90 	vmov	s15, r3
	}
 8007e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	ecbd 8b02 	vpop	{d8}
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3310      	adds	r3, #16
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fe ff0e 	bl	8006cda <_ZN20AdcChannelController3getEv>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 8007ec2:	89fb      	ldrh	r3, [r7, #14]
 8007ec4:	ee07 3a90 	vmov	s15, r3
 8007ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ecc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8007f00 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 8007ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ed4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007f04 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 8007ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007edc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007f08 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 8007ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ee4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007f0c <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 8007ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eec:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	ee07 3a90 	vmov	s15, r3
	}
 8007ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	457ff000 	.word	0x457ff000
 8007f04:	40533333 	.word	0x40533333
 8007f08:	3dda09cc 	.word	0x3dda09cc
 8007f0c:	3f19999a 	.word	0x3f19999a

08007f10 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff99 	bl	8007e50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 8007f1e:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff ffc2 	bl	8007eac <_ZN14OnBoardSensors15getInputVoltageEv>
 8007f28:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 8007f2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007f30:	f7fd f88a 	bl	8005048 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 8007f34:	ed97 0a02 	vldr	s0, [r7, #8]
 8007f38:	f7fd f8c0 	bl	80050bc <_Z19OD_InputVoltage_setf>
	}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 8007f48:	f00c fcc0 	bl	80148cc <xPortGetFreeHeapSize>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <_ZL16estimateCPUusagev>:

static float g_oldIdleTick;
static float g_oldTotalTick;

static inline float estimateCPUusage() {
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 100.0;
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <_ZL16estimateCPUusagev+0x18>)
 8007f5a:	ee07 3a90 	vmov	s15, r3
}
 8007f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	42c80000 	.word	0x42c80000

08007f70 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 8007f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f72:	b0a7      	sub	sp, #156	; 0x9c
 8007f74:	af0c      	add	r7, sp, #48	; 0x30
 8007f76:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 8007f78:	4e19      	ldr	r6, [pc, #100]	; (8007fe0 <microcontroller_info_entry+0x70>)
 8007f7a:	f107 0c0c 	add.w	ip, r7, #12
 8007f7e:	466d      	mov	r5, sp
 8007f80:	f106 0464 	add.w	r4, r6, #100	; 0x64
 8007f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007f94:	f106 0358 	add.w	r3, r6, #88	; 0x58
 8007f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f9a:	4660      	mov	r0, ip
 8007f9c:	f7ff fe85 	bl	8007caa <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 8007fa0:	f107 030c 	add.w	r3, r7, #12
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff ffb3 	bl	8007f10 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 8007faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fac:	2b14      	cmp	r3, #20
 8007fae:	d90f      	bls.n	8007fd0 <microcontroller_info_entry+0x60>
			float cpuUsage = estimateCPUusage();
 8007fb0:	f7ff ffd0 	bl	8007f54 <_ZL16estimateCPUusagev>
 8007fb4:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 8007fb8:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8007fbc:	f7fc ffd2 	bl	8004f64 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 8007fc0:	f7ff ffc0 	bl	8007f44 <_ZL18estimateFreeMemoryv>
 8007fc4:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 8007fc6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007fc8:	f7fd f804 	bl	8004fd4 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 8007fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 8007fd6:	2032      	movs	r0, #50	; 0x32
 8007fd8:	f008 faaa 	bl	8010530 <osDelay>
	}
 8007fdc:	e7e0      	b.n	8007fa0 <microcontroller_info_entry+0x30>
 8007fde:	bf00      	nop
 8007fe0:	08018150 	.word	0x08018150

08007fe4 <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8007ff0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8007ff4:	6018      	str	r0, [r3, #0]
	StateMaschineMemory<8> fmsMemory;
 8007ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f8b4 	bl	8008168 <_ZN19StateMaschineMemoryILj8EEC1Ev>
	StateMaschine fms(&fmsMemory);
 8008000:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008004:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f8b7 	bl	800817e <_ZN13StateMaschineC1I19StateMaschineMemoryILj8EEEEPT_>

	PodEmergencyState emergenyState;
 8008010:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f963 	bl	80072e0 <_ZN17PodEmergencyStateC1Ev>
	fms.registerState(emergenyState);
 800801a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800801e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f8cc 	bl	80081c2 <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>

	PodIdleState idleState;
 800802a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff f9b6 	bl	80073a0 <_ZN12PodIdleStateC1Ev>
	fms.registerState(idleState);
 8008034:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8008038:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f8d5 	bl	80081ee <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>

	PodLaunchingState launchingState;
 8008044:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fba7 	bl	800779c <_ZN17PodLaunchingStateC1Ev>
	fms.registerState(launchingState);
 800804e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008052:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8008056:	4611      	mov	r1, r2
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f8de 	bl	800821a <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>

	PodLaunchPreparationState launchPrepState;
 800805e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008062:	4618      	mov	r0, r3
 8008064:	f7ff fb02 	bl	800766c <_ZN25PodLaunchPreparationStateC1Ev>
	fms.registerState(launchPrepState);
 8008068:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800806c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f000 f8e7 	bl	8008246 <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>

	PodPushableState pushableState;
 8008078:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fbdf 	bl	8007840 <_ZN16PodPushableStateC1Ev>
	fms.registerState(pushableState);
 8008082:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008086:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f8f0 	bl	8008272 <_ZN13StateMaschine13registerStateI16PodPushableStateEEvRT_>

	PodReadyToLaunchState readyToLaunchState;
 8008092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fc24 	bl	80078e4 <_ZN21PodReadyToLaunchStateC1Ev>
	fms.registerState(readyToLaunchState);
 800809c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80080a0:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f8f9 	bl	800829e <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>

	PodRunStopState runStopState;
 80080ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fcad 	bl	8007a10 <_ZN15PodRunStopStateC1Ev>
	fms.registerState(runStopState);
 80080b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80080ba:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f902 	bl	80082ca <_ZN13StateMaschine13registerStateI15PodRunStopStateEEvRT_>

	PodSafeToApproach safeToApprochState;
 80080c6:	f107 0318 	add.w	r3, r7, #24
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fcf2 	bl	8007ab4 <_ZN17PodSafeToApproachC1Ev>
	fms.registerState(safeToApprochState);
 80080d0:	f107 0218 	add.w	r2, r7, #24
 80080d4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f90b 	bl	80082f6 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>

	PodStartupState startupState;
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fd37 	bl	8007b58 <_ZN15PodStartupStateC1Ev>
	fms.registerState(startupState);
 80080ea:	f107 020c 	add.w	r2, r7, #12
 80080ee:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 f914 	bl	8008322 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>

	fms.start<PodStartupState>();
 80080fa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f925 	bl	800834e <_ZN13StateMaschine5startI15PodStartupStateEEvv>
	PodStartupState startupState;
 8008104:	f107 030c 	add.w	r3, r7, #12
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fd55 	bl	8007bb8 <_ZN15PodStartupStateD1Ev>
	PodSafeToApproach safeToApprochState;
 800810e:	f107 0318 	add.w	r3, r7, #24
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fcfe 	bl	8007b14 <_ZN17PodSafeToApproachD1Ev>
	PodRunStopState runStopState;
 8008118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fca7 	bl	8007a70 <_ZN15PodRunStopStateD1Ev>
	PodReadyToLaunchState readyToLaunchState;
 8008122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008126:	4618      	mov	r0, r3
 8008128:	f7ff fc40 	bl	80079ac <_ZN21PodReadyToLaunchStateD1Ev>
	PodPushableState pushableState;
 800812c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fbb5 	bl	80078a0 <_ZN16PodPushableStateD1Ev>
	PodLaunchPreparationState launchPrepState;
 8008136:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800813a:	4618      	mov	r0, r3
 800813c:	f7ff fafa 	bl	8007734 <_ZN25PodLaunchPreparationStateD1Ev>
	PodLaunchingState launchingState;
 8008140:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fb59 	bl	80077fc <_ZN17PodLaunchingStateD1Ev>
	PodIdleState idleState;
 800814a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff fa64 	bl	800761c <_ZN12PodIdleStateD1Ev>
	PodEmergencyState emergenyState;
 8008154:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff f8f1 	bl	8007340 <_ZN17PodEmergencyStateD1Ev>
}
 800815e:	bf00      	nop
 8008160:	f507 771c 	add.w	r7, r7, #624	; 0x270
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <_ZN19StateMaschineMemoryILj8EEC1Ev>:

template<size_t NUMBER_OF_STATES>
class StateMaschineMemory {
public:
	friend class StateMaschine;
	explicit StateMaschineMemory(){ }
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <_ZN13StateMaschineC1I19StateMaschineMemoryILj8EEEEPT_>:
	explicit StateMaschine(StateMaschineMemory_t* memory) {
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	6039      	str	r1, [r7, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	609a      	str	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	741a      	strb	r2, [r3, #16]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	745a      	strb	r2, [r3, #17]
		m_states = memory->m_states;
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	601a      	str	r2, [r3, #0]
		m_statesSize = memory->size();
 80081ac:	6838      	ldr	r0, [r7, #0]
 80081ae:	f000 f950 	bl	8008452 <_ZNK19StateMaschineMemoryILj8EE4sizeEv>
 80081b2:	4602      	mov	r2, r0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	605a      	str	r2, [r3, #4]
	}
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>:
	void registerState(StateImplementation &state) {
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80081cc:	f000 f94c 	bl	8008468 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 80081d0:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	601a      	str	r2, [r3, #0]
	}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>:
	void registerState(StateImplementation &state) {
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80081f8:	f000 f962 	bl	80084c0 <_ZN5State5getIdI12PodIdleStateEEjv>
 80081fc:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	601a      	str	r2, [r3, #0]
	}
 8008212:	bf00      	nop
 8008214:	3710      	adds	r7, #16
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8008224:	f000 f978 	bl	8008518 <_ZN5State5getIdI17PodLaunchingStateEEjv>
 8008228:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	601a      	str	r2, [r3, #0]
	}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>:
	void registerState(StateImplementation &state) {
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8008250:	f7ff f9b8 	bl	80075c4 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 8008254:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	601a      	str	r2, [r3, #0]
	}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <_ZN13StateMaschine13registerStateI16PodPushableStateEEvRT_>:
	void registerState(StateImplementation &state) {
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800827c:	f000 f978 	bl	8008570 <_ZN5State5getIdI16PodPushableStateEEjv>
 8008280:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	601a      	str	r2, [r3, #0]
	}
 8008296:	bf00      	nop
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80082a8:	f000 f98e 	bl	80085c8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 80082ac:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	601a      	str	r2, [r3, #0]
	}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <_ZN13StateMaschine13registerStateI15PodRunStopStateEEvRT_>:
	void registerState(StateImplementation &state) {
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80082d4:	f000 f9a4 	bl	8008620 <_ZN5State5getIdI15PodRunStopStateEEjv>
 80082d8:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	601a      	str	r2, [r3, #0]
	}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>:
	void registerState(StateImplementation &state) {
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8008300:	f000 f9ba 	bl	8008678 <_ZN5State5getIdI17PodSafeToApproachEEjv>
 8008304:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	601a      	str	r2, [r3, #0]
	}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>:
	void registerState(StateImplementation &state) {
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800832c:	f000 f9d0 	bl	80086d0 <_ZN5State5getIdI15PodStartupStateEEjv>
 8008330:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
	}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <_ZN13StateMaschine5startI15PodStartupStateEEvv>:

	template<typename StartState>
	void start() {
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
		static_assert(std::is_base_of<State, StartState>::value);
		if(m_running == true) Error_Handler();
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7c1b      	ldrb	r3, [r3, #16]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <_ZN13StateMaschine5startI15PodStartupStateEEvv+0x14>
 800835e:	f001 f819 	bl	8009394 <Error_Handler>
		m_currentState = State::getId<StartState>();
 8008362:	f000 f9b5 	bl	80086d0 <_ZN5State5getIdI15PodStartupStateEEjv>
 8008366:	4602      	mov	r2, r0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	609a      	str	r2, [r3, #8]
		m_nextState = m_currentState;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	60da      	str	r2, [r3, #12]
		m_states[m_nextState]->m_active = true;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	721a      	strb	r2, [r3, #8]
		m_running = true;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	741a      	strb	r2, [r3, #16]
		m_states[m_currentState]->setup();
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4608      	mov	r0, r1
 80083b0:	4798      	blx	r3
		while (m_running) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7c1b      	ldrb	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d047      	beq.n	800844a <_ZN13StateMaschine5startI15PodStartupStateEEvv+0xfc>
			if (m_currentState != m_nextState) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d02d      	beq.n	8008422 <_ZN13StateMaschine5startI15PodStartupStateEEvv+0xd4>
				taskENTER_CRITICAL();
 80083c6:	f00c f82d 	bl	8014424 <vPortEnterCritical>
				m_states[m_currentState]->dispose();
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	6819      	ldr	r1, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3310      	adds	r3, #16
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4608      	mov	r0, r1
 80083ee:	4798      	blx	r3
				m_states[m_nextState]->setup();
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	6819      	ldr	r1, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4608      	mov	r0, r1
 8008414:	4798      	blx	r3
				m_currentState = m_nextState;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	609a      	str	r2, [r3, #8]
				taskEXIT_CRITICAL();
 800841e:	f00c f831 	bl	8014484 <vPortExitCritical>
			}
			m_states[m_currentState]->update();
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	330c      	adds	r3, #12
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4608      	mov	r0, r1
 8008446:	4798      	blx	r3
		while (m_running) {
 8008448:	e7b3      	b.n	80083b2 <_ZN13StateMaschine5startI15PodStartupStateEEvv+0x64>
		}
	}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_ZNK19StateMaschineMemoryILj8EE4sizeEv>:
private:
	constexpr size_t size() const {return NUMBER_OF_STATES;}
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	2308      	movs	r3, #8
 800845c:	4618      	mov	r0, r3
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <_ZN5State5getIdI17PodEmergencyStateEEjv>:
	static unsigned int getId(){
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f3bf 8f5b 	dmb	ish
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d012      	beq.n	80084ae <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 8008488:	480b      	ldr	r0, [pc, #44]	; (80084b8 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 800848a:	f00c faeb 	bl	8014a64 <__cxa_guard_acquire>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	bf14      	ite	ne
 8008494:	2301      	movne	r3, #1
 8008496:	2300      	moveq	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 800849e:	f7fe ff71 	bl	8007384 <_ZN5State9getNextIdEv>
 80084a2:	4603      	mov	r3, r0
 80084a4:	4a05      	ldr	r2, [pc, #20]	; (80084bc <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	4803      	ldr	r0, [pc, #12]	; (80084b8 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 80084aa:	f00c fae7 	bl	8014a7c <__cxa_guard_release>
		return id;
 80084ae:	4b03      	ldr	r3, [pc, #12]	; (80084bc <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 80084b0:	681b      	ldr	r3, [r3, #0]
	}
 80084b2:	4618      	mov	r0, r3
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20000c2c 	.word	0x20000c2c
 80084bc:	20000c28 	.word	0x20000c28

080084c0 <_ZN5State5getIdI12PodIdleStateEEjv>:
	static unsigned int getId(){
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80084c4:	4b12      	ldr	r3, [pc, #72]	; (8008510 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f3bf 8f5b 	dmb	ish
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf0c      	ite	eq
 80084d6:	2301      	moveq	r3, #1
 80084d8:	2300      	movne	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d012      	beq.n	8008506 <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 80084e0:	480b      	ldr	r0, [pc, #44]	; (8008510 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 80084e2:	f00c fabf 	bl	8014a64 <__cxa_guard_acquire>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	bf14      	ite	ne
 80084ec:	2301      	movne	r3, #1
 80084ee:	2300      	moveq	r3, #0
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 80084f6:	f7fe ff45 	bl	8007384 <_ZN5State9getNextIdEv>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	4803      	ldr	r0, [pc, #12]	; (8008510 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 8008502:	f00c fabb 	bl	8014a7c <__cxa_guard_release>
		return id;
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
	}
 800850a:	4618      	mov	r0, r3
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000c34 	.word	0x20000c34
 8008514:	20000c30 	.word	0x20000c30

08008518 <_ZN5State5getIdI17PodLaunchingStateEEjv>:
	static unsigned int getId(){
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f3bf 8f5b 	dmb	ish
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	bf0c      	ite	eq
 800852e:	2301      	moveq	r3, #1
 8008530:	2300      	movne	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d012      	beq.n	800855e <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 8008538:	480b      	ldr	r0, [pc, #44]	; (8008568 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800853a:	f00c fa93 	bl	8014a64 <__cxa_guard_acquire>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf14      	ite	ne
 8008544:	2301      	movne	r3, #1
 8008546:	2300      	moveq	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 800854e:	f7fe ff19 	bl	8007384 <_ZN5State9getNextIdEv>
 8008552:	4603      	mov	r3, r0
 8008554:	4a05      	ldr	r2, [pc, #20]	; (800856c <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	4803      	ldr	r0, [pc, #12]	; (8008568 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 800855a:	f00c fa8f 	bl	8014a7c <__cxa_guard_release>
		return id;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 8008560:	681b      	ldr	r3, [r3, #0]
	}
 8008562:	4618      	mov	r0, r3
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000c3c 	.word	0x20000c3c
 800856c:	20000c38 	.word	0x20000c38

08008570 <_ZN5State5getIdI16PodPushableStateEEjv>:
	static unsigned int getId(){
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8008574:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <_ZN5State5getIdI16PodPushableStateEEjv+0x50>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	f3bf 8f5b 	dmb	ish
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d012      	beq.n	80085b6 <_ZN5State5getIdI16PodPushableStateEEjv+0x46>
 8008590:	480b      	ldr	r0, [pc, #44]	; (80085c0 <_ZN5State5getIdI16PodPushableStateEEjv+0x50>)
 8008592:	f00c fa67 	bl	8014a64 <__cxa_guard_acquire>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	bf14      	ite	ne
 800859c:	2301      	movne	r3, #1
 800859e:	2300      	moveq	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <_ZN5State5getIdI16PodPushableStateEEjv+0x46>
 80085a6:	f7fe feed 	bl	8007384 <_ZN5State9getNextIdEv>
 80085aa:	4603      	mov	r3, r0
 80085ac:	4a05      	ldr	r2, [pc, #20]	; (80085c4 <_ZN5State5getIdI16PodPushableStateEEjv+0x54>)
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4803      	ldr	r0, [pc, #12]	; (80085c0 <_ZN5State5getIdI16PodPushableStateEEjv+0x50>)
 80085b2:	f00c fa63 	bl	8014a7c <__cxa_guard_release>
		return id;
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <_ZN5State5getIdI16PodPushableStateEEjv+0x54>)
 80085b8:	681b      	ldr	r3, [r3, #0]
	}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000c44 	.word	0x20000c44
 80085c4:	20000c40 	.word	0x20000c40

080085c8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>:
	static unsigned int getId(){
 80085c8:	b580      	push	{r7, lr}
 80085ca:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80085cc:	4b12      	ldr	r3, [pc, #72]	; (8008618 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f3bf 8f5b 	dmb	ish
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf0c      	ite	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	2300      	movne	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 80085e8:	480b      	ldr	r0, [pc, #44]	; (8008618 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 80085ea:	f00c fa3b 	bl	8014a64 <__cxa_guard_acquire>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf14      	ite	ne
 80085f4:	2301      	movne	r3, #1
 80085f6:	2300      	moveq	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 80085fe:	f7fe fec1 	bl	8007384 <_ZN5State9getNextIdEv>
 8008602:	4603      	mov	r3, r0
 8008604:	4a05      	ldr	r2, [pc, #20]	; (800861c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	4803      	ldr	r0, [pc, #12]	; (8008618 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 800860a:	f00c fa37 	bl	8014a7c <__cxa_guard_release>
		return id;
 800860e:	4b03      	ldr	r3, [pc, #12]	; (800861c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 8008610:	681b      	ldr	r3, [r3, #0]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000c4c 	.word	0x20000c4c
 800861c:	20000c48 	.word	0x20000c48

08008620 <_ZN5State5getIdI15PodRunStopStateEEjv>:
	static unsigned int getId(){
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8008624:	4b12      	ldr	r3, [pc, #72]	; (8008670 <_ZN5State5getIdI15PodRunStopStateEEjv+0x50>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f3bf 8f5b 	dmb	ish
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d012      	beq.n	8008666 <_ZN5State5getIdI15PodRunStopStateEEjv+0x46>
 8008640:	480b      	ldr	r0, [pc, #44]	; (8008670 <_ZN5State5getIdI15PodRunStopStateEEjv+0x50>)
 8008642:	f00c fa0f 	bl	8014a64 <__cxa_guard_acquire>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf14      	ite	ne
 800864c:	2301      	movne	r3, #1
 800864e:	2300      	moveq	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <_ZN5State5getIdI15PodRunStopStateEEjv+0x46>
 8008656:	f7fe fe95 	bl	8007384 <_ZN5State9getNextIdEv>
 800865a:	4603      	mov	r3, r0
 800865c:	4a05      	ldr	r2, [pc, #20]	; (8008674 <_ZN5State5getIdI15PodRunStopStateEEjv+0x54>)
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	4803      	ldr	r0, [pc, #12]	; (8008670 <_ZN5State5getIdI15PodRunStopStateEEjv+0x50>)
 8008662:	f00c fa0b 	bl	8014a7c <__cxa_guard_release>
		return id;
 8008666:	4b03      	ldr	r3, [pc, #12]	; (8008674 <_ZN5State5getIdI15PodRunStopStateEEjv+0x54>)
 8008668:	681b      	ldr	r3, [r3, #0]
	}
 800866a:	4618      	mov	r0, r3
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000c54 	.word	0x20000c54
 8008674:	20000c50 	.word	0x20000c50

08008678 <_ZN5State5getIdI17PodSafeToApproachEEjv>:
	static unsigned int getId(){
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800867c:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f3bf 8f5b 	dmb	ish
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	bf0c      	ite	eq
 800868e:	2301      	moveq	r3, #1
 8008690:	2300      	movne	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d012      	beq.n	80086be <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 8008698:	480b      	ldr	r0, [pc, #44]	; (80086c8 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 800869a:	f00c f9e3 	bl	8014a64 <__cxa_guard_acquire>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bf14      	ite	ne
 80086a4:	2301      	movne	r3, #1
 80086a6:	2300      	moveq	r3, #0
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 80086ae:	f7fe fe69 	bl	8007384 <_ZN5State9getNextIdEv>
 80086b2:	4603      	mov	r3, r0
 80086b4:	4a05      	ldr	r2, [pc, #20]	; (80086cc <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	4803      	ldr	r0, [pc, #12]	; (80086c8 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 80086ba:	f00c f9df 	bl	8014a7c <__cxa_guard_release>
		return id;
 80086be:	4b03      	ldr	r3, [pc, #12]	; (80086cc <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 80086c0:	681b      	ldr	r3, [r3, #0]
	}
 80086c2:	4618      	mov	r0, r3
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000c5c 	.word	0x20000c5c
 80086cc:	20000c58 	.word	0x20000c58

080086d0 <_ZN5State5getIdI15PodStartupStateEEjv>:
	static unsigned int getId(){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80086d4:	4b12      	ldr	r3, [pc, #72]	; (8008720 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f3bf 8f5b 	dmb	ish
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d012      	beq.n	8008716 <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 80086f0:	480b      	ldr	r0, [pc, #44]	; (8008720 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 80086f2:	f00c f9b7 	bl	8014a64 <__cxa_guard_acquire>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf14      	ite	ne
 80086fc:	2301      	movne	r3, #1
 80086fe:	2300      	moveq	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 8008706:	f7fe fe3d 	bl	8007384 <_ZN5State9getNextIdEv>
 800870a:	4603      	mov	r3, r0
 800870c:	4a05      	ldr	r2, [pc, #20]	; (8008724 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	4803      	ldr	r0, [pc, #12]	; (8008720 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 8008712:	f00c f9b3 	bl	8014a7c <__cxa_guard_release>
		return id;
 8008716:	4b03      	ldr	r3, [pc, #12]	; (8008724 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 8008718:	681b      	ldr	r3, [r3, #0]
	}
 800871a:	4618      	mov	r0, r3
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000c64 	.word	0x20000c64
 8008724:	20000c60 	.word	0x20000c60

08008728 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800872e:	463b      	mov	r3, r7
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	609a      	str	r2, [r3, #8]
 8008738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800873a:	4b36      	ldr	r3, [pc, #216]	; (8008814 <MX_ADC1_Init+0xec>)
 800873c:	4a36      	ldr	r2, [pc, #216]	; (8008818 <MX_ADC1_Init+0xf0>)
 800873e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008740:	4b34      	ldr	r3, [pc, #208]	; (8008814 <MX_ADC1_Init+0xec>)
 8008742:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008748:	4b32      	ldr	r3, [pc, #200]	; (8008814 <MX_ADC1_Init+0xec>)
 800874a:	2200      	movs	r2, #0
 800874c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800874e:	4b31      	ldr	r3, [pc, #196]	; (8008814 <MX_ADC1_Init+0xec>)
 8008750:	2201      	movs	r2, #1
 8008752:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008754:	4b2f      	ldr	r3, [pc, #188]	; (8008814 <MX_ADC1_Init+0xec>)
 8008756:	2200      	movs	r2, #0
 8008758:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800875a:	4b2e      	ldr	r3, [pc, #184]	; (8008814 <MX_ADC1_Init+0xec>)
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008762:	4b2c      	ldr	r3, [pc, #176]	; (8008814 <MX_ADC1_Init+0xec>)
 8008764:	2200      	movs	r2, #0
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008768:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <MX_ADC1_Init+0xec>)
 800876a:	4a2c      	ldr	r2, [pc, #176]	; (800881c <MX_ADC1_Init+0xf4>)
 800876c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800876e:	4b29      	ldr	r3, [pc, #164]	; (8008814 <MX_ADC1_Init+0xec>)
 8008770:	2200      	movs	r2, #0
 8008772:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8008774:	4b27      	ldr	r3, [pc, #156]	; (8008814 <MX_ADC1_Init+0xec>)
 8008776:	2204      	movs	r2, #4
 8008778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <MX_ADC1_Init+0xec>)
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <MX_ADC1_Init+0xec>)
 8008784:	2200      	movs	r2, #0
 8008786:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008788:	4822      	ldr	r0, [pc, #136]	; (8008814 <MX_ADC1_Init+0xec>)
 800878a:	f001 fd5b 	bl	800a244 <HAL_ADC_Init>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008794:	f000 fdfe 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008798:	230a      	movs	r3, #10
 800879a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800879c:	2301      	movs	r3, #1
 800879e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80087a0:	2305      	movs	r3, #5
 80087a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087a4:	463b      	mov	r3, r7
 80087a6:	4619      	mov	r1, r3
 80087a8:	481a      	ldr	r0, [pc, #104]	; (8008814 <MX_ADC1_Init+0xec>)
 80087aa:	f001 fea9 	bl	800a500 <HAL_ADC_ConfigChannel>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80087b4:	f000 fdee 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80087b8:	230c      	movs	r3, #12
 80087ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80087bc:	2302      	movs	r3, #2
 80087be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087c0:	463b      	mov	r3, r7
 80087c2:	4619      	mov	r1, r3
 80087c4:	4813      	ldr	r0, [pc, #76]	; (8008814 <MX_ADC1_Init+0xec>)
 80087c6:	f001 fe9b 	bl	800a500 <HAL_ADC_ConfigChannel>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80087d0:	f000 fde0 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087d4:	2310      	movs	r3, #16
 80087d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80087d8:	2303      	movs	r3, #3
 80087da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087dc:	463b      	mov	r3, r7
 80087de:	4619      	mov	r1, r3
 80087e0:	480c      	ldr	r0, [pc, #48]	; (8008814 <MX_ADC1_Init+0xec>)
 80087e2:	f001 fe8d 	bl	800a500 <HAL_ADC_ConfigChannel>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80087ec:	f000 fdd2 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80087f0:	2311      	movs	r3, #17
 80087f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80087f4:	2304      	movs	r3, #4
 80087f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80087f8:	463b      	mov	r3, r7
 80087fa:	4619      	mov	r1, r3
 80087fc:	4805      	ldr	r0, [pc, #20]	; (8008814 <MX_ADC1_Init+0xec>)
 80087fe:	f001 fe7f 	bl	800a500 <HAL_ADC_ConfigChannel>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8008808:	f000 fdc4 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000c68 	.word	0x20000c68
 8008818:	40012000 	.word	0x40012000
 800881c:	0f000001 	.word	0x0f000001

08008820 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008826:	463b      	mov	r3, r7
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008832:	4b52      	ldr	r3, [pc, #328]	; (800897c <MX_ADC2_Init+0x15c>)
 8008834:	4a52      	ldr	r2, [pc, #328]	; (8008980 <MX_ADC2_Init+0x160>)
 8008836:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008838:	4b50      	ldr	r3, [pc, #320]	; (800897c <MX_ADC2_Init+0x15c>)
 800883a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800883e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008840:	4b4e      	ldr	r3, [pc, #312]	; (800897c <MX_ADC2_Init+0x15c>)
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8008846:	4b4d      	ldr	r3, [pc, #308]	; (800897c <MX_ADC2_Init+0x15c>)
 8008848:	2201      	movs	r2, #1
 800884a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800884c:	4b4b      	ldr	r3, [pc, #300]	; (800897c <MX_ADC2_Init+0x15c>)
 800884e:	2200      	movs	r2, #0
 8008850:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008852:	4b4a      	ldr	r3, [pc, #296]	; (800897c <MX_ADC2_Init+0x15c>)
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800885a:	4b48      	ldr	r3, [pc, #288]	; (800897c <MX_ADC2_Init+0x15c>)
 800885c:	2200      	movs	r2, #0
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008860:	4b46      	ldr	r3, [pc, #280]	; (800897c <MX_ADC2_Init+0x15c>)
 8008862:	4a48      	ldr	r2, [pc, #288]	; (8008984 <MX_ADC2_Init+0x164>)
 8008864:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008866:	4b45      	ldr	r3, [pc, #276]	; (800897c <MX_ADC2_Init+0x15c>)
 8008868:	2200      	movs	r2, #0
 800886a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 800886c:	4b43      	ldr	r3, [pc, #268]	; (800897c <MX_ADC2_Init+0x15c>)
 800886e:	2208      	movs	r2, #8
 8008870:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8008872:	4b42      	ldr	r3, [pc, #264]	; (800897c <MX_ADC2_Init+0x15c>)
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800887a:	4b40      	ldr	r3, [pc, #256]	; (800897c <MX_ADC2_Init+0x15c>)
 800887c:	2200      	movs	r2, #0
 800887e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008880:	483e      	ldr	r0, [pc, #248]	; (800897c <MX_ADC2_Init+0x15c>)
 8008882:	f001 fcdf 	bl	800a244 <HAL_ADC_Init>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800888c:	f000 fd82 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008890:	230f      	movs	r3, #15
 8008892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008894:	2301      	movs	r3, #1
 8008896:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8008898:	2304      	movs	r3, #4
 800889a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800889c:	463b      	mov	r3, r7
 800889e:	4619      	mov	r1, r3
 80088a0:	4836      	ldr	r0, [pc, #216]	; (800897c <MX_ADC2_Init+0x15c>)
 80088a2:	f001 fe2d 	bl	800a500 <HAL_ADC_ConfigChannel>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80088ac:	f000 fd72 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80088b0:	230e      	movs	r3, #14
 80088b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80088b4:	2302      	movs	r3, #2
 80088b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80088b8:	463b      	mov	r3, r7
 80088ba:	4619      	mov	r1, r3
 80088bc:	482f      	ldr	r0, [pc, #188]	; (800897c <MX_ADC2_Init+0x15c>)
 80088be:	f001 fe1f 	bl	800a500 <HAL_ADC_ConfigChannel>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80088c8:	f000 fd64 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80088cc:	2303      	movs	r3, #3
 80088ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80088d0:	2303      	movs	r3, #3
 80088d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80088d4:	463b      	mov	r3, r7
 80088d6:	4619      	mov	r1, r3
 80088d8:	4828      	ldr	r0, [pc, #160]	; (800897c <MX_ADC2_Init+0x15c>)
 80088da:	f001 fe11 	bl	800a500 <HAL_ADC_ConfigChannel>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80088e4:	f000 fd56 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80088e8:	2302      	movs	r3, #2
 80088ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80088ec:	2304      	movs	r3, #4
 80088ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80088f0:	463b      	mov	r3, r7
 80088f2:	4619      	mov	r1, r3
 80088f4:	4821      	ldr	r0, [pc, #132]	; (800897c <MX_ADC2_Init+0x15c>)
 80088f6:	f001 fe03 	bl	800a500 <HAL_ADC_ConfigChannel>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8008900:	f000 fd48 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008904:	2304      	movs	r3, #4
 8008906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8008908:	2305      	movs	r3, #5
 800890a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800890c:	463b      	mov	r3, r7
 800890e:	4619      	mov	r1, r3
 8008910:	481a      	ldr	r0, [pc, #104]	; (800897c <MX_ADC2_Init+0x15c>)
 8008912:	f001 fdf5 	bl	800a500 <HAL_ADC_ConfigChannel>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800891c:	f000 fd3a 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008920:	2305      	movs	r3, #5
 8008922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8008924:	2306      	movs	r3, #6
 8008926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008928:	463b      	mov	r3, r7
 800892a:	4619      	mov	r1, r3
 800892c:	4813      	ldr	r0, [pc, #76]	; (800897c <MX_ADC2_Init+0x15c>)
 800892e:	f001 fde7 	bl	800a500 <HAL_ADC_ConfigChannel>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8008938:	f000 fd2c 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800893c:	2306      	movs	r3, #6
 800893e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8008940:	2307      	movs	r3, #7
 8008942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008944:	463b      	mov	r3, r7
 8008946:	4619      	mov	r1, r3
 8008948:	480c      	ldr	r0, [pc, #48]	; (800897c <MX_ADC2_Init+0x15c>)
 800894a:	f001 fdd9 	bl	800a500 <HAL_ADC_ConfigChannel>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8008954:	f000 fd1e 	bl	8009394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8008958:	2307      	movs	r3, #7
 800895a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800895c:	2308      	movs	r3, #8
 800895e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008960:	463b      	mov	r3, r7
 8008962:	4619      	mov	r1, r3
 8008964:	4805      	ldr	r0, [pc, #20]	; (800897c <MX_ADC2_Init+0x15c>)
 8008966:	f001 fdcb 	bl	800a500 <HAL_ADC_ConfigChannel>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8008970:	f000 fd10 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000cb0 	.word	0x20000cb0
 8008980:	40012100 	.word	0x40012100
 8008984:	0f000001 	.word	0x0f000001

08008988 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	; 0x30
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008990:	f107 031c 	add.w	r3, r7, #28
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	605a      	str	r2, [r3, #4]
 800899a:	609a      	str	r2, [r3, #8]
 800899c:	60da      	str	r2, [r3, #12]
 800899e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a6b      	ldr	r2, [pc, #428]	; (8008b54 <HAL_ADC_MspInit+0x1cc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d157      	bne.n	8008a5a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	4a69      	ldr	r2, [pc, #420]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089b8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ba:	4b67      	ldr	r3, [pc, #412]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c2:	61bb      	str	r3, [r7, #24]
 80089c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]
 80089ca:	4b63      	ldr	r3, [pc, #396]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4a62      	ldr	r2, [pc, #392]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089d0:	f043 0304 	orr.w	r3, r3, #4
 80089d4:	6313      	str	r3, [r2, #48]	; 0x30
 80089d6:	4b60      	ldr	r3, [pc, #384]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 80089d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80089e2:	2305      	movs	r3, #5
 80089e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089e6:	2303      	movs	r3, #3
 80089e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ee:	f107 031c 	add.w	r3, r7, #28
 80089f2:	4619      	mov	r1, r3
 80089f4:	4859      	ldr	r0, [pc, #356]	; (8008b5c <HAL_ADC_MspInit+0x1d4>)
 80089f6:	f003 fb2d 	bl	800c054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80089fa:	4b59      	ldr	r3, [pc, #356]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 80089fc:	4a59      	ldr	r2, [pc, #356]	; (8008b64 <HAL_ADC_MspInit+0x1dc>)
 80089fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008a00:	4b57      	ldr	r3, [pc, #348]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a06:	4b56      	ldr	r3, [pc, #344]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a0c:	4b54      	ldr	r3, [pc, #336]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008a12:	4b53      	ldr	r3, [pc, #332]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a1a:	4b51      	ldr	r3, [pc, #324]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a22:	4b4f      	ldr	r3, [pc, #316]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008a2a:	4b4d      	ldr	r3, [pc, #308]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008a30:	4b4b      	ldr	r3, [pc, #300]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a36:	4b4a      	ldr	r3, [pc, #296]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008a3c:	4848      	ldr	r0, [pc, #288]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a3e:	f002 ff99 	bl	800b974 <HAL_DMA_Init>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008a48:	f000 fca4 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a44      	ldr	r2, [pc, #272]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
 8008a52:	4a43      	ldr	r2, [pc, #268]	; (8008b60 <HAL_ADC_MspInit+0x1d8>)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8008a58:	e077      	b.n	8008b4a <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a42      	ldr	r2, [pc, #264]	; (8008b68 <HAL_ADC_MspInit+0x1e0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d172      	bne.n	8008b4a <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
 8008a68:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6c:	4a3a      	ldr	r2, [pc, #232]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a72:	6453      	str	r3, [r2, #68]	; 0x44
 8008a74:	4b38      	ldr	r3, [pc, #224]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	4b34      	ldr	r3, [pc, #208]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	4a33      	ldr	r2, [pc, #204]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a8a:	f043 0304 	orr.w	r3, r3, #4
 8008a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8008a90:	4b31      	ldr	r3, [pc, #196]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60bb      	str	r3, [r7, #8]
 8008aa0:	4b2d      	ldr	r3, [pc, #180]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	4a2c      	ldr	r2, [pc, #176]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8008aac:	4b2a      	ldr	r3, [pc, #168]	; (8008b58 <HAL_ADC_MspInit+0x1d0>)
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	f003 0301 	and.w	r3, r3, #1
 8008ab4:	60bb      	str	r3, [r7, #8]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8008ab8:	2335      	movs	r3, #53	; 0x35
 8008aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008abc:	2303      	movs	r3, #3
 8008abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ac4:	f107 031c 	add.w	r3, r7, #28
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4824      	ldr	r0, [pc, #144]	; (8008b5c <HAL_ADC_MspInit+0x1d4>)
 8008acc:	f003 fac2 	bl	800c054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8008ad0:	23fc      	movs	r3, #252	; 0xfc
 8008ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008adc:	f107 031c 	add.w	r3, r7, #28
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4822      	ldr	r0, [pc, #136]	; (8008b6c <HAL_ADC_MspInit+0x1e4>)
 8008ae4:	f003 fab6 	bl	800c054 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008ae8:	4b21      	ldr	r3, [pc, #132]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008aea:	4a22      	ldr	r2, [pc, #136]	; (8008b74 <HAL_ADC_MspInit+0x1ec>)
 8008aec:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8008aee:	4b20      	ldr	r3, [pc, #128]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008af0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008af4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008af6:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008afc:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008b02:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b0a:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b12:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b26:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b28:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008b2e:	4810      	ldr	r0, [pc, #64]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b30:	f002 ff20 	bl	800b974 <HAL_DMA_Init>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8008b3a:	f000 fc2b 	bl	8009394 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a0b      	ldr	r2, [pc, #44]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38
 8008b44:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <HAL_ADC_MspInit+0x1e8>)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008b4a:	bf00      	nop
 8008b4c:	3730      	adds	r7, #48	; 0x30
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40012000 	.word	0x40012000
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	40020800 	.word	0x40020800
 8008b60:	20000cf8 	.word	0x20000cf8
 8008b64:	40026410 	.word	0x40026410
 8008b68:	40012100 	.word	0x40012100
 8008b6c:	40020000 	.word	0x40020000
 8008b70:	20000d58 	.word	0x20000d58
 8008b74:	40026440 	.word	0x40026440

08008b78 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008b7c:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b7e:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <MX_CAN1_Init+0x68>)
 8008b80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8008b82:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b84:	2203      	movs	r2, #3
 8008b86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008b88:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008b8e:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008b94:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b96:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008b9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008b9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008ba2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008ba4:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bac:	2201      	movs	r2, #1
 8008bae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008bbc:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008bc2:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008bc8:	4804      	ldr	r0, [pc, #16]	; (8008bdc <MX_CAN1_Init+0x64>)
 8008bca:	f001 ff39 	bl	800aa40 <HAL_CAN_Init>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8008bd4:	f000 fbde 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008bd8:	bf00      	nop
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000db8 	.word	0x20000db8
 8008be0:	40006400 	.word	0x40006400

08008be4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8008be8:	4b17      	ldr	r3, [pc, #92]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008bea:	4a18      	ldr	r2, [pc, #96]	; (8008c4c <MX_CAN2_Init+0x68>)
 8008bec:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008bf4:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008c00:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c02:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008c06:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008c08:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c0e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8008c22:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8008c2e:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008c34:	4804      	ldr	r0, [pc, #16]	; (8008c48 <MX_CAN2_Init+0x64>)
 8008c36:	f001 ff03 	bl	800aa40 <HAL_CAN_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8008c40:	f000 fba8 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8008c44:	bf00      	nop
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000de0 	.word	0x20000de0
 8008c4c:	40006800 	.word	0x40006800

08008c50 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08c      	sub	sp, #48	; 0x30
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c58:	f107 031c 	add.w	r3, r7, #28
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a5a      	ldr	r2, [pc, #360]	; (8008dd8 <HAL_CAN_MspInit+0x188>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d14d      	bne.n	8008d0e <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008c72:	4b5a      	ldr	r3, [pc, #360]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3301      	adds	r3, #1
 8008c78:	4a58      	ldr	r2, [pc, #352]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008c7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008c7c:	4b57      	ldr	r3, [pc, #348]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d10d      	bne.n	8008ca0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	4b55      	ldr	r3, [pc, #340]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	4a54      	ldr	r2, [pc, #336]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c92:	6413      	str	r3, [r2, #64]	; 0x40
 8008c94:	4b52      	ldr	r3, [pc, #328]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	4b4e      	ldr	r3, [pc, #312]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	4a4d      	ldr	r2, [pc, #308]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008caa:	f043 0308 	orr.w	r3, r3, #8
 8008cae:	6313      	str	r3, [r2, #48]	; 0x30
 8008cb0:	4b4b      	ldr	r3, [pc, #300]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008ccc:	2309      	movs	r3, #9
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cd0:	f107 031c 	add.w	r3, r7, #28
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4843      	ldr	r0, [pc, #268]	; (8008de4 <HAL_CAN_MspInit+0x194>)
 8008cd8:	f003 f9bc 	bl	800c054 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2105      	movs	r1, #5
 8008ce0:	2013      	movs	r0, #19
 8008ce2:	f002 fe01 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8008ce6:	2013      	movs	r0, #19
 8008ce8:	f002 fe1a 	bl	800b920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008cec:	2200      	movs	r2, #0
 8008cee:	2105      	movs	r1, #5
 8008cf0:	2014      	movs	r0, #20
 8008cf2:	f002 fdf9 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008cf6:	2014      	movs	r0, #20
 8008cf8:	f002 fe12 	bl	800b920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2105      	movs	r1, #5
 8008d00:	2015      	movs	r0, #21
 8008d02:	f002 fdf1 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008d06:	2015      	movs	r0, #21
 8008d08:	f002 fe0a 	bl	800b920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8008d0c:	e05f      	b.n	8008dce <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a35      	ldr	r2, [pc, #212]	; (8008de8 <HAL_CAN_MspInit+0x198>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d15a      	bne.n	8008dce <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	4b30      	ldr	r3, [pc, #192]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	4a2f      	ldr	r2, [pc, #188]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d26:	6413      	str	r3, [r2, #64]	; 0x40
 8008d28:	4b2d      	ldr	r3, [pc, #180]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008d34:	4b29      	ldr	r3, [pc, #164]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a28      	ldr	r2, [pc, #160]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008d3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008d3e:	4b27      	ldr	r3, [pc, #156]	; (8008ddc <HAL_CAN_MspInit+0x18c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d10d      	bne.n	8008d62 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d54:	6413      	str	r3, [r2, #64]	; 0x40
 8008d56:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
 8008d66:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6a:	4a1d      	ldr	r2, [pc, #116]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	6313      	str	r3, [r2, #48]	; 0x30
 8008d72:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <HAL_CAN_MspInit+0x190>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	60bb      	str	r3, [r7, #8]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008d7e:	2360      	movs	r3, #96	; 0x60
 8008d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d82:	2302      	movs	r3, #2
 8008d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8008d8e:	2309      	movs	r3, #9
 8008d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d92:	f107 031c 	add.w	r3, r7, #28
 8008d96:	4619      	mov	r1, r3
 8008d98:	4814      	ldr	r0, [pc, #80]	; (8008dec <HAL_CAN_MspInit+0x19c>)
 8008d9a:	f003 f95b 	bl	800c054 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2105      	movs	r1, #5
 8008da2:	203f      	movs	r0, #63	; 0x3f
 8008da4:	f002 fda0 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8008da8:	203f      	movs	r0, #63	; 0x3f
 8008daa:	f002 fdb9 	bl	800b920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8008dae:	2200      	movs	r2, #0
 8008db0:	2105      	movs	r1, #5
 8008db2:	2040      	movs	r0, #64	; 0x40
 8008db4:	f002 fd98 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8008db8:	2040      	movs	r0, #64	; 0x40
 8008dba:	f002 fdb1 	bl	800b920 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2105      	movs	r1, #5
 8008dc2:	2041      	movs	r0, #65	; 0x41
 8008dc4:	f002 fd90 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8008dc8:	2041      	movs	r0, #65	; 0x41
 8008dca:	f002 fda9 	bl	800b920 <HAL_NVIC_EnableIRQ>
}
 8008dce:	bf00      	nop
 8008dd0:	3730      	adds	r7, #48	; 0x30
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	40006400 	.word	0x40006400
 8008ddc:	20000e08 	.word	0x20000e08
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40020c00 	.word	0x40020c00
 8008de8:	40006800 	.word	0x40006800
 8008dec:	40020400 	.word	0x40020400

08008df0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <MX_CRC_Init+0x20>)
 8008df6:	4a07      	ldr	r2, [pc, #28]	; (8008e14 <MX_CRC_Init+0x24>)
 8008df8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008dfa:	4805      	ldr	r0, [pc, #20]	; (8008e10 <MX_CRC_Init+0x20>)
 8008dfc:	f002 fd9e 	bl	800b93c <HAL_CRC_Init>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008e06:	f000 fac5 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000e0c 	.word	0x20000e0c
 8008e14:	40023000 	.word	0x40023000

08008e18 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <HAL_CRC_MspInit+0x3c>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d10d      	bne.n	8008e46 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <HAL_CRC_MspInit+0x40>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <HAL_CRC_MspInit+0x40>)
 8008e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e38:	6313      	str	r3, [r2, #48]	; 0x30
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <HAL_CRC_MspInit+0x40>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008e46:	bf00      	nop
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40023000 	.word	0x40023000
 8008e58:	40023800 	.word	0x40023800

08008e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008e62:	2300      	movs	r3, #0
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	4b18      	ldr	r3, [pc, #96]	; (8008ec8 <MX_DMA_Init+0x6c>)
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <MX_DMA_Init+0x6c>)
 8008e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e70:	6313      	str	r3, [r2, #48]	; 0x30
 8008e72:	4b15      	ldr	r3, [pc, #84]	; (8008ec8 <MX_DMA_Init+0x6c>)
 8008e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e7a:	607b      	str	r3, [r7, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2105      	movs	r1, #5
 8008e82:	2038      	movs	r0, #56	; 0x38
 8008e84:	f002 fd30 	bl	800b8e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008e88:	2038      	movs	r0, #56	; 0x38
 8008e8a:	f002 fd49 	bl	800b920 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2105      	movs	r1, #5
 8008e92:	203a      	movs	r0, #58	; 0x3a
 8008e94:	f002 fd28 	bl	800b8e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008e98:	203a      	movs	r0, #58	; 0x3a
 8008e9a:	f002 fd41 	bl	800b920 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2105      	movs	r1, #5
 8008ea2:	2044      	movs	r0, #68	; 0x44
 8008ea4:	f002 fd20 	bl	800b8e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008ea8:	2044      	movs	r0, #68	; 0x44
 8008eaa:	f002 fd39 	bl	800b920 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2105      	movs	r1, #5
 8008eb2:	2046      	movs	r0, #70	; 0x46
 8008eb4:	f002 fd18 	bl	800b8e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008eb8:	2046      	movs	r0, #70	; 0x46
 8008eba:	f002 fd31 	bl	800b920 <HAL_NVIC_EnableIRQ>

}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40023800 	.word	0x40023800

08008ecc <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0

}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8008eda:	b480      	push	{r7}
 8008edc:	af00      	add	r7, sp, #0
return 0;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
	...

08008f10 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8008f14:	4a18      	ldr	r2, [pc, #96]	; (8008f78 <MX_FREERTOS_Init+0x68>)
 8008f16:	2101      	movs	r1, #1
 8008f18:	2010      	movs	r0, #16
 8008f1a:	f007 fd71 	bl	8010a00 <osMessageQueueNew>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4a16      	ldr	r2, [pc, #88]	; (8008f7c <MX_FREERTOS_Init+0x6c>)
 8008f22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008f24:	4a16      	ldr	r2, [pc, #88]	; (8008f80 <MX_FREERTOS_Init+0x70>)
 8008f26:	2100      	movs	r1, #0
 8008f28:	4816      	ldr	r0, [pc, #88]	; (8008f84 <MX_FREERTOS_Init+0x74>)
 8008f2a:	f007 fa6f 	bl	801040c <osThreadNew>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <MX_FREERTOS_Init+0x78>)
 8008f32:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 8008f34:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <MX_FREERTOS_Init+0x7c>)
 8008f36:	2100      	movs	r1, #0
 8008f38:	4815      	ldr	r0, [pc, #84]	; (8008f90 <MX_FREERTOS_Init+0x80>)
 8008f3a:	f007 fa67 	bl	801040c <osThreadNew>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4a14      	ldr	r2, [pc, #80]	; (8008f94 <MX_FREERTOS_Init+0x84>)
 8008f42:	6013      	str	r3, [r2, #0]

  /* creation of fms */
  fmsHandle = osThreadNew(state_maschine_entry, NULL, &fms_attributes);
 8008f44:	4a14      	ldr	r2, [pc, #80]	; (8008f98 <MX_FREERTOS_Init+0x88>)
 8008f46:	2100      	movs	r1, #0
 8008f48:	4814      	ldr	r0, [pc, #80]	; (8008f9c <MX_FREERTOS_Init+0x8c>)
 8008f4a:	f007 fa5f 	bl	801040c <osThreadNew>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4a13      	ldr	r2, [pc, #76]	; (8008fa0 <MX_FREERTOS_Init+0x90>)
 8008f52:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 8008f54:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <MX_FREERTOS_Init+0x94>)
 8008f56:	2100      	movs	r1, #0
 8008f58:	4813      	ldr	r0, [pc, #76]	; (8008fa8 <MX_FREERTOS_Init+0x98>)
 8008f5a:	f007 fa57 	bl	801040c <osThreadNew>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4a12      	ldr	r2, [pc, #72]	; (8008fac <MX_FREERTOS_Init+0x9c>)
 8008f62:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 8008f64:	4a12      	ldr	r2, [pc, #72]	; (8008fb0 <MX_FREERTOS_Init+0xa0>)
 8008f66:	2100      	movs	r1, #0
 8008f68:	4812      	ldr	r0, [pc, #72]	; (8008fb4 <MX_FREERTOS_Init+0xa4>)
 8008f6a:	f007 fa4f 	bl	801040c <osThreadNew>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4a11      	ldr	r2, [pc, #68]	; (8008fb8 <MX_FREERTOS_Init+0xa8>)
 8008f72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8008f74:	bf00      	nop
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	0801829c 	.word	0x0801829c
 8008f7c:	200010e8 	.word	0x200010e8
 8008f80:	080181e8 	.word	0x080181e8
 8008f84:	08008fbd 	.word	0x08008fbd
 8008f88:	20000e14 	.word	0x20000e14
 8008f8c:	0801820c 	.word	0x0801820c
 8008f90:	0800222d 	.word	0x0800222d
 8008f94:	200010d8 	.word	0x200010d8
 8008f98:	08018230 	.word	0x08018230
 8008f9c:	08007fe5 	.word	0x08007fe5
 8008fa0:	200010dc 	.word	0x200010dc
 8008fa4:	08018254 	.word	0x08018254
 8008fa8:	08007c97 	.word	0x08007c97
 8008fac:	200010e0 	.word	0x200010e0
 8008fb0:	08018278 	.word	0x08018278
 8008fb4:	08007f71 	.word	0x08007f71
 8008fb8:	200010e4 	.word	0x200010e4

08008fbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	f007 fab3 	bl	8010530 <osDelay>
 8008fca:	e7fb      	b.n	8008fc4 <StartDefaultTask+0x8>

08008fcc <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08a      	sub	sp, #40	; 0x28
 8008fd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fd2:	f107 0314 	add.w	r3, r7, #20
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	605a      	str	r2, [r3, #4]
 8008fdc:	609a      	str	r2, [r3, #8]
 8008fde:	60da      	str	r2, [r3, #12]
 8008fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	613b      	str	r3, [r7, #16]
 8008fe6:	4b54      	ldr	r3, [pc, #336]	; (8009138 <MX_GPIO_Init+0x16c>)
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	4a53      	ldr	r2, [pc, #332]	; (8009138 <MX_GPIO_Init+0x16c>)
 8008fec:	f043 0304 	orr.w	r3, r3, #4
 8008ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff2:	4b51      	ldr	r3, [pc, #324]	; (8009138 <MX_GPIO_Init+0x16c>)
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	613b      	str	r3, [r7, #16]
 8008ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	4b4d      	ldr	r3, [pc, #308]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009006:	4a4c      	ldr	r2, [pc, #304]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900c:	6313      	str	r3, [r2, #48]	; 0x30
 800900e:	4b4a      	ldr	r3, [pc, #296]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800901a:	2300      	movs	r3, #0
 800901c:	60bb      	str	r3, [r7, #8]
 800901e:	4b46      	ldr	r3, [pc, #280]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009022:	4a45      	ldr	r2, [pc, #276]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009024:	f043 0301 	orr.w	r3, r3, #1
 8009028:	6313      	str	r3, [r2, #48]	; 0x30
 800902a:	4b43      	ldr	r3, [pc, #268]	; (8009138 <MX_GPIO_Init+0x16c>)
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
 800903a:	4b3f      	ldr	r3, [pc, #252]	; (8009138 <MX_GPIO_Init+0x16c>)
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	4a3e      	ldr	r2, [pc, #248]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009040:	f043 0302 	orr.w	r3, r3, #2
 8009044:	6313      	str	r3, [r2, #48]	; 0x30
 8009046:	4b3c      	ldr	r3, [pc, #240]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009052:	2300      	movs	r3, #0
 8009054:	603b      	str	r3, [r7, #0]
 8009056:	4b38      	ldr	r3, [pc, #224]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	4a37      	ldr	r2, [pc, #220]	; (8009138 <MX_GPIO_Init+0x16c>)
 800905c:	f043 0308 	orr.w	r3, r3, #8
 8009060:	6313      	str	r3, [r2, #48]	; 0x30
 8009062:	4b35      	ldr	r3, [pc, #212]	; (8009138 <MX_GPIO_Init+0x16c>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f003 0308 	and.w	r3, r3, #8
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800906e:	2200      	movs	r2, #0
 8009070:	f641 4102 	movw	r1, #7170	; 0x1c02
 8009074:	4831      	ldr	r0, [pc, #196]	; (800913c <MX_GPIO_Init+0x170>)
 8009076:	f003 f989 	bl	800c38c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 800907a:	2201      	movs	r2, #1
 800907c:	2180      	movs	r1, #128	; 0x80
 800907e:	482f      	ldr	r0, [pc, #188]	; (800913c <MX_GPIO_Init+0x170>)
 8009080:	f003 f984 	bl	800c38c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8009084:	2305      	movs	r3, #5
 8009086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009088:	2303      	movs	r3, #3
 800908a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908c:	2300      	movs	r3, #0
 800908e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009090:	f107 0314 	add.w	r3, r7, #20
 8009094:	4619      	mov	r1, r3
 8009096:	482a      	ldr	r0, [pc, #168]	; (8009140 <MX_GPIO_Init+0x174>)
 8009098:	f002 ffdc 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 800909c:	230a      	movs	r3, #10
 800909e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80090a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80090a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090aa:	f107 0314 	add.w	r3, r7, #20
 80090ae:	4619      	mov	r1, r3
 80090b0:	4823      	ldr	r0, [pc, #140]	; (8009140 <MX_GPIO_Init+0x174>)
 80090b2:	f002 ffcf 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 80090b6:	f641 4302 	movw	r3, #7170	; 0x1c02
 80090ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090bc:	2301      	movs	r3, #1
 80090be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090c4:	2300      	movs	r3, #0
 80090c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090c8:	f107 0314 	add.w	r3, r7, #20
 80090cc:	4619      	mov	r1, r3
 80090ce:	481b      	ldr	r0, [pc, #108]	; (800913c <MX_GPIO_Init+0x170>)
 80090d0:	f002 ffc0 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 80090d4:	2318      	movs	r3, #24
 80090d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090d8:	2300      	movs	r3, #0
 80090da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	4619      	mov	r1, r3
 80090e6:	4817      	ldr	r0, [pc, #92]	; (8009144 <MX_GPIO_Init+0x178>)
 80090e8:	f002 ffb4 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 80090ec:	2310      	movs	r3, #16
 80090ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 80090f8:	f107 0314 	add.w	r3, r7, #20
 80090fc:	4619      	mov	r1, r3
 80090fe:	480f      	ldr	r0, [pc, #60]	; (800913c <MX_GPIO_Init+0x170>)
 8009100:	f002 ffa8 	bl	800c054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009108:	2301      	movs	r3, #1
 800910a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800910c:	2302      	movs	r3, #2
 800910e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009110:	2300      	movs	r3, #0
 8009112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4619      	mov	r1, r3
 800911a:	4808      	ldr	r0, [pc, #32]	; (800913c <MX_GPIO_Init+0x170>)
 800911c:	f002 ff9a 	bl	800c054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	2105      	movs	r1, #5
 8009124:	2009      	movs	r0, #9
 8009126:	f002 fbdf 	bl	800b8e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800912a:	2009      	movs	r0, #9
 800912c:	f002 fbf8 	bl	800b920 <HAL_NVIC_EnableIRQ>

}
 8009130:	bf00      	nop
 8009132:	3728      	adds	r7, #40	; 0x28
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	40023800 	.word	0x40023800
 800913c:	40020400 	.word	0x40020400
 8009140:	40020800 	.word	0x40020800
 8009144:	40020c00 	.word	0x40020c00

08009148 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <MX_I2C1_Init+0x50>)
 800914e:	4a13      	ldr	r2, [pc, #76]	; (800919c <MX_I2C1_Init+0x54>)
 8009150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009152:	4b11      	ldr	r3, [pc, #68]	; (8009198 <MX_I2C1_Init+0x50>)
 8009154:	4a12      	ldr	r2, [pc, #72]	; (80091a0 <MX_I2C1_Init+0x58>)
 8009156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <MX_I2C1_Init+0x50>)
 800915a:	2200      	movs	r2, #0
 800915c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800915e:	4b0e      	ldr	r3, [pc, #56]	; (8009198 <MX_I2C1_Init+0x50>)
 8009160:	2200      	movs	r2, #0
 8009162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009164:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <MX_I2C1_Init+0x50>)
 8009166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800916a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <MX_I2C1_Init+0x50>)
 800916e:	2200      	movs	r2, #0
 8009170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <MX_I2C1_Init+0x50>)
 8009174:	2200      	movs	r2, #0
 8009176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009178:	4b07      	ldr	r3, [pc, #28]	; (8009198 <MX_I2C1_Init+0x50>)
 800917a:	2200      	movs	r2, #0
 800917c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <MX_I2C1_Init+0x50>)
 8009180:	2200      	movs	r2, #0
 8009182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009184:	4804      	ldr	r0, [pc, #16]	; (8009198 <MX_I2C1_Init+0x50>)
 8009186:	f003 f933 	bl	800c3f0 <HAL_I2C_Init>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009190:	f000 f900 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009194:	bf00      	nop
 8009196:	bd80      	pop	{r7, pc}
 8009198:	200010ec 	.word	0x200010ec
 800919c:	40005400 	.word	0x40005400
 80091a0:	000186a0 	.word	0x000186a0

080091a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	609a      	str	r2, [r3, #8]
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a19      	ldr	r2, [pc, #100]	; (8009228 <HAL_I2C_MspInit+0x84>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d12c      	bne.n	8009220 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091c6:	2300      	movs	r3, #0
 80091c8:	613b      	str	r3, [r7, #16]
 80091ca:	4b18      	ldr	r3, [pc, #96]	; (800922c <HAL_I2C_MspInit+0x88>)
 80091cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ce:	4a17      	ldr	r2, [pc, #92]	; (800922c <HAL_I2C_MspInit+0x88>)
 80091d0:	f043 0302 	orr.w	r3, r3, #2
 80091d4:	6313      	str	r3, [r2, #48]	; 0x30
 80091d6:	4b15      	ldr	r3, [pc, #84]	; (800922c <HAL_I2C_MspInit+0x88>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	613b      	str	r3, [r7, #16]
 80091e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 80091e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80091e8:	2312      	movs	r3, #18
 80091ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091ec:	2301      	movs	r3, #1
 80091ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f0:	2303      	movs	r3, #3
 80091f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80091f4:	2304      	movs	r3, #4
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	4619      	mov	r1, r3
 80091fe:	480c      	ldr	r0, [pc, #48]	; (8009230 <HAL_I2C_MspInit+0x8c>)
 8009200:	f002 ff28 	bl	800c054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009204:	2300      	movs	r3, #0
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	4b08      	ldr	r3, [pc, #32]	; (800922c <HAL_I2C_MspInit+0x88>)
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	4a07      	ldr	r2, [pc, #28]	; (800922c <HAL_I2C_MspInit+0x88>)
 800920e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009212:	6413      	str	r3, [r2, #64]	; 0x40
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <HAL_I2C_MspInit+0x88>)
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8009220:	bf00      	nop
 8009222:	3728      	adds	r7, #40	; 0x28
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40005400 	.word	0x40005400
 800922c:	40023800 	.word	0x40023800
 8009230:	40020400 	.word	0x40020400

08009234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009238:	f000 ffc2 	bl	800a1c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800923c:	f000 f82c 	bl	8009298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009240:	f7ff fec4 	bl	8008fcc <MX_GPIO_Init>
  MX_DMA_Init();
 8009244:	f7ff fe0a 	bl	8008e5c <MX_DMA_Init>
  MX_ADC1_Init();
 8009248:	f7ff fa6e 	bl	8008728 <MX_ADC1_Init>
  MX_CAN1_Init();
 800924c:	f7ff fc94 	bl	8008b78 <MX_CAN1_Init>
  MX_CAN2_Init();
 8009250:	f7ff fcc8 	bl	8008be4 <MX_CAN2_Init>
  MX_CRC_Init();
 8009254:	f7ff fdcc 	bl	8008df0 <MX_CRC_Init>
  MX_RNG_Init();
 8009258:	f000 f8a2 	bl	80093a0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800925c:	f000 fe78 	bl	8009f50 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8009260:	f000 fc06 	bl	8009a70 <MX_TIM4_Init>
  MX_ADC2_Init();
 8009264:	f7ff fadc 	bl	8008820 <MX_ADC2_Init>
  MX_I2C1_Init();
 8009268:	f7ff ff6e 	bl	8009148 <MX_I2C1_Init>
  MX_SPI2_Init();
 800926c:	f000 f8ce 	bl	800940c <MX_SPI2_Init>
  MX_TIM5_Init();
 8009270:	f000 fc8a 	bl	8009b88 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8009274:	f000 fe42 	bl	8009efc <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8009278:	f000 fd14 	bl	8009ca4 <MX_TIM14_Init>
  MX_TIM2_Init();
 800927c:	f000 fb5c 	bl	8009938 <MX_TIM2_Init>
  MX_TIM9_Init();
 8009280:	f000 fcd6 	bl	8009c30 <MX_TIM9_Init>
  MX_TIM3_Init();
 8009284:	f000 fba6 	bl	80099d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009288:	f007 f876 	bl	8010378 <osKernelInitialize>
  MX_FREERTOS_Init();
 800928c:	f7ff fe40 	bl	8008f10 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8009290:	f007 f896 	bl	80103c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009294:	e7fe      	b.n	8009294 <main+0x60>
	...

08009298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b094      	sub	sp, #80	; 0x50
 800929c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800929e:	f107 0320 	add.w	r3, r7, #32
 80092a2:	2230      	movs	r2, #48	; 0x30
 80092a4:	2100      	movs	r1, #0
 80092a6:	4618      	mov	r0, r3
 80092a8:	f00b ff9a 	bl	80151e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80092ac:	f107 030c 	add.w	r3, r7, #12
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	605a      	str	r2, [r3, #4]
 80092b6:	609a      	str	r2, [r3, #8]
 80092b8:	60da      	str	r2, [r3, #12]
 80092ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80092bc:	2300      	movs	r3, #0
 80092be:	60bb      	str	r3, [r7, #8]
 80092c0:	4b28      	ldr	r3, [pc, #160]	; (8009364 <SystemClock_Config+0xcc>)
 80092c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c4:	4a27      	ldr	r2, [pc, #156]	; (8009364 <SystemClock_Config+0xcc>)
 80092c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ca:	6413      	str	r3, [r2, #64]	; 0x40
 80092cc:	4b25      	ldr	r3, [pc, #148]	; (8009364 <SystemClock_Config+0xcc>)
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80092d8:	2300      	movs	r3, #0
 80092da:	607b      	str	r3, [r7, #4]
 80092dc:	4b22      	ldr	r3, [pc, #136]	; (8009368 <SystemClock_Config+0xd0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a21      	ldr	r2, [pc, #132]	; (8009368 <SystemClock_Config+0xd0>)
 80092e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	4b1f      	ldr	r3, [pc, #124]	; (8009368 <SystemClock_Config+0xd0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80092f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80092fe:	2302      	movs	r3, #2
 8009300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009308:	2308      	movs	r3, #8
 800930a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800930c:	23a8      	movs	r3, #168	; 0xa8
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009310:	2302      	movs	r3, #2
 8009312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009314:	2307      	movs	r3, #7
 8009316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009318:	f107 0320 	add.w	r3, r7, #32
 800931c:	4618      	mov	r0, r3
 800931e:	f003 f9ab 	bl	800c678 <HAL_RCC_OscConfig>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009328:	f000 f834 	bl	8009394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800932c:	230f      	movs	r3, #15
 800932e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009330:	2302      	movs	r3, #2
 8009332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800933c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800933e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009344:	f107 030c 	add.w	r3, r7, #12
 8009348:	2105      	movs	r1, #5
 800934a:	4618      	mov	r0, r3
 800934c:	f003 fc0c 	bl	800cb68 <HAL_RCC_ClockConfig>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009356:	f000 f81d 	bl	8009394 <Error_Handler>
  }
}
 800935a:	bf00      	nop
 800935c:	3750      	adds	r7, #80	; 0x50
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40023800 	.word	0x40023800
 8009368:	40007000 	.word	0x40007000

0800936c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a05      	ldr	r2, [pc, #20]	; (8009390 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d101      	bne.n	8009382 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800937e:	f000 ff41 	bl	800a204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f005 faed 	bl	800e962 <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40010000 	.word	0x40010000

08009394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009398:	b672      	cpsid	i
}
 800939a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800939c:	e7fe      	b.n	800939c <Error_Handler+0x8>
	...

080093a0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80093a4:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <MX_RNG_Init+0x20>)
 80093a6:	4a07      	ldr	r2, [pc, #28]	; (80093c4 <MX_RNG_Init+0x24>)
 80093a8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <MX_RNG_Init+0x20>)
 80093ac:	f003 fe2c 	bl	800d008 <HAL_RNG_Init>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80093b6:	f7ff ffed 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20001140 	.word	0x20001140
 80093c4:	50060800 	.word	0x50060800

080093c8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a0b      	ldr	r2, [pc, #44]	; (8009404 <HAL_RNG_MspInit+0x3c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d10d      	bne.n	80093f6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80093da:	2300      	movs	r3, #0
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <HAL_RNG_MspInit+0x40>)
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	4a09      	ldr	r2, [pc, #36]	; (8009408 <HAL_RNG_MspInit+0x40>)
 80093e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e8:	6353      	str	r3, [r2, #52]	; 0x34
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <HAL_RNG_MspInit+0x40>)
 80093ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	50060800 	.word	0x50060800
 8009408:	40023800 	.word	0x40023800

0800940c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <MX_SPI2_Init+0x64>)
 8009412:	4a18      	ldr	r2, [pc, #96]	; (8009474 <MX_SPI2_Init+0x68>)
 8009414:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <MX_SPI2_Init+0x64>)
 8009418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800941c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <MX_SPI2_Init+0x64>)
 8009420:	2200      	movs	r2, #0
 8009422:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <MX_SPI2_Init+0x64>)
 8009426:	2200      	movs	r2, #0
 8009428:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800942a:	4b11      	ldr	r3, [pc, #68]	; (8009470 <MX_SPI2_Init+0x64>)
 800942c:	2200      	movs	r2, #0
 800942e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <MX_SPI2_Init+0x64>)
 8009432:	2200      	movs	r2, #0
 8009434:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <MX_SPI2_Init+0x64>)
 8009438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800943c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800943e:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <MX_SPI2_Init+0x64>)
 8009440:	2200      	movs	r2, #0
 8009442:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009444:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <MX_SPI2_Init+0x64>)
 8009446:	2200      	movs	r2, #0
 8009448:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800944a:	4b09      	ldr	r3, [pc, #36]	; (8009470 <MX_SPI2_Init+0x64>)
 800944c:	2200      	movs	r2, #0
 800944e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009450:	4b07      	ldr	r3, [pc, #28]	; (8009470 <MX_SPI2_Init+0x64>)
 8009452:	2200      	movs	r2, #0
 8009454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <MX_SPI2_Init+0x64>)
 8009458:	220a      	movs	r2, #10
 800945a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800945c:	4804      	ldr	r0, [pc, #16]	; (8009470 <MX_SPI2_Init+0x64>)
 800945e:	f003 fdfd 	bl	800d05c <HAL_SPI_Init>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8009468:	f7ff ff94 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800946c:	bf00      	nop
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20001150 	.word	0x20001150
 8009474:	40003800 	.word	0x40003800

08009478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a19      	ldr	r2, [pc, #100]	; (80094fc <HAL_SPI_MspInit+0x84>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d12c      	bne.n	80094f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	4b18      	ldr	r3, [pc, #96]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a2:	4a17      	ldr	r2, [pc, #92]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094a8:	6413      	str	r3, [r2, #64]	; 0x40
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a10      	ldr	r2, [pc, #64]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <HAL_SPI_MspInit+0x88>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80094d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80094d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d8:	2302      	movs	r3, #2
 80094da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e0:	2303      	movs	r3, #3
 80094e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80094e4:	2305      	movs	r3, #5
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4619      	mov	r1, r3
 80094ee:	4805      	ldr	r0, [pc, #20]	; (8009504 <HAL_SPI_MspInit+0x8c>)
 80094f0:	f002 fdb0 	bl	800c054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80094f4:	bf00      	nop
 80094f6:	3728      	adds	r7, #40	; 0x28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40003800 	.word	0x40003800
 8009500:	40023800 	.word	0x40023800
 8009504:	40020400 	.word	0x40020400

08009508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <HAL_MspInit+0x54>)
 8009514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009516:	4a11      	ldr	r2, [pc, #68]	; (800955c <HAL_MspInit+0x54>)
 8009518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800951c:	6453      	str	r3, [r2, #68]	; 0x44
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <HAL_MspInit+0x54>)
 8009520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009526:	607b      	str	r3, [r7, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800952a:	2300      	movs	r3, #0
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	4b0b      	ldr	r3, [pc, #44]	; (800955c <HAL_MspInit+0x54>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	4a0a      	ldr	r2, [pc, #40]	; (800955c <HAL_MspInit+0x54>)
 8009534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009538:	6413      	str	r3, [r2, #64]	; 0x40
 800953a:	4b08      	ldr	r3, [pc, #32]	; (800955c <HAL_MspInit+0x54>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009546:	2200      	movs	r2, #0
 8009548:	210f      	movs	r1, #15
 800954a:	f06f 0001 	mvn.w	r0, #1
 800954e:	f002 f9cb 	bl	800b8e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	40023800 	.word	0x40023800

08009560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08c      	sub	sp, #48	; 0x30
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009570:	2300      	movs	r3, #0
 8009572:	60bb      	str	r3, [r7, #8]
 8009574:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <HAL_InitTick+0xd4>)
 8009576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009578:	4a2e      	ldr	r2, [pc, #184]	; (8009634 <HAL_InitTick+0xd4>)
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	6453      	str	r3, [r2, #68]	; 0x44
 8009580:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <HAL_InitTick+0xd4>)
 8009582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	60bb      	str	r3, [r7, #8]
 800958a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800958c:	f107 020c 	add.w	r2, r7, #12
 8009590:	f107 0310 	add.w	r3, r7, #16
 8009594:	4611      	mov	r1, r2
 8009596:	4618      	mov	r0, r3
 8009598:	f003 fd04 	bl	800cfa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800959c:	f003 fcee 	bl	800cf7c <HAL_RCC_GetPCLK2Freq>
 80095a0:	4603      	mov	r3, r0
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	4a23      	ldr	r2, [pc, #140]	; (8009638 <HAL_InitTick+0xd8>)
 80095aa:	fba2 2303 	umull	r2, r3, r2, r3
 80095ae:	0c9b      	lsrs	r3, r3, #18
 80095b0:	3b01      	subs	r3, #1
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80095b4:	4b21      	ldr	r3, [pc, #132]	; (800963c <HAL_InitTick+0xdc>)
 80095b6:	4a22      	ldr	r2, [pc, #136]	; (8009640 <HAL_InitTick+0xe0>)
 80095b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80095ba:	4b20      	ldr	r3, [pc, #128]	; (800963c <HAL_InitTick+0xdc>)
 80095bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095c0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80095c2:	4a1e      	ldr	r2, [pc, #120]	; (800963c <HAL_InitTick+0xdc>)
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80095c8:	4b1c      	ldr	r3, [pc, #112]	; (800963c <HAL_InitTick+0xdc>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095ce:	4b1b      	ldr	r3, [pc, #108]	; (800963c <HAL_InitTick+0xdc>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d4:	4b19      	ldr	r3, [pc, #100]	; (800963c <HAL_InitTick+0xdc>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80095da:	4818      	ldr	r0, [pc, #96]	; (800963c <HAL_InitTick+0xdc>)
 80095dc:	f003 fdc7 	bl	800d16e <HAL_TIM_Base_Init>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80095e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d11b      	bne.n	8009626 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80095ee:	4813      	ldr	r0, [pc, #76]	; (800963c <HAL_InitTick+0xdc>)
 80095f0:	f003 fe0c 	bl	800d20c <HAL_TIM_Base_Start_IT>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80095fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d111      	bne.n	8009626 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009602:	2019      	movs	r0, #25
 8009604:	f002 f98c 	bl	800b920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b0f      	cmp	r3, #15
 800960c:	d808      	bhi.n	8009620 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800960e:	2200      	movs	r2, #0
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	2019      	movs	r0, #25
 8009614:	f002 f968 	bl	800b8e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009618:	4a0a      	ldr	r2, [pc, #40]	; (8009644 <HAL_InitTick+0xe4>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e002      	b.n	8009626 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8009626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800962a:	4618      	mov	r0, r3
 800962c:	3730      	adds	r7, #48	; 0x30
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40023800 	.word	0x40023800
 8009638:	431bde83 	.word	0x431bde83
 800963c:	200011a8 	.word	0x200011a8
 8009640:	40010000 	.word	0x40010000
 8009644:	20000014 	.word	0x20000014

08009648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009648:	b480      	push	{r7}
 800964a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800964c:	e7fe      	b.n	800964c <NMI_Handler+0x4>

0800964e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800964e:	b480      	push	{r7}
 8009650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009652:	e7fe      	b.n	8009652 <HardFault_Handler+0x4>

08009654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009658:	e7fe      	b.n	8009658 <MemManage_Handler+0x4>

0800965a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800965a:	b480      	push	{r7}
 800965c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800965e:	e7fe      	b.n	800965e <BusFault_Handler+0x4>

08009660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009664:	e7fe      	b.n	8009664 <UsageFault_Handler+0x4>

08009666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009666:	b480      	push	{r7}
 8009668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800966a:	bf00      	nop
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8009678:	2008      	movs	r0, #8
 800967a:	f002 fea1 	bl	800c3c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009688:	4802      	ldr	r0, [pc, #8]	; (8009694 <CAN1_TX_IRQHandler+0x10>)
 800968a:	f001 fe41 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800968e:	bf00      	nop
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000db8 	.word	0x20000db8

08009698 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800969c:	4802      	ldr	r0, [pc, #8]	; (80096a8 <CAN1_RX0_IRQHandler+0x10>)
 800969e:	f001 fe37 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80096a2:	bf00      	nop
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000db8 	.word	0x20000db8

080096ac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80096b0:	4802      	ldr	r0, [pc, #8]	; (80096bc <CAN1_RX1_IRQHandler+0x10>)
 80096b2:	f001 fe2d 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80096b6:	bf00      	nop
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000db8 	.word	0x20000db8

080096c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80096c4:	4802      	ldr	r0, [pc, #8]	; (80096d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80096c6:	f003 ff10 	bl	800d4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001314 	.word	0x20001314

080096d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80096d8:	4802      	ldr	r0, [pc, #8]	; (80096e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80096da:	f003 ff06 	bl	800d4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80096de:	bf00      	nop
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200011a8 	.word	0x200011a8

080096e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80096ec:	4802      	ldr	r0, [pc, #8]	; (80096f8 <TIM3_IRQHandler+0x10>)
 80096ee:	f003 fefc 	bl	800d4ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80096f2:	bf00      	nop
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	2000123c 	.word	0x2000123c

080096fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009700:	4802      	ldr	r0, [pc, #8]	; (800970c <DMA2_Stream0_IRQHandler+0x10>)
 8009702:	f002 fa3d 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009706:	bf00      	nop
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000cf8 	.word	0x20000cf8

08009710 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8009714:	4802      	ldr	r0, [pc, #8]	; (8009720 <DMA2_Stream2_IRQHandler+0x10>)
 8009716:	f002 fa33 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800971a:	bf00      	nop
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000d58 	.word	0x20000d58

08009724 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009728:	4802      	ldr	r0, [pc, #8]	; (8009734 <CAN2_TX_IRQHandler+0x10>)
 800972a:	f001 fdf1 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800972e:	bf00      	nop
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000de0 	.word	0x20000de0

08009738 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800973c:	4802      	ldr	r0, [pc, #8]	; (8009748 <CAN2_RX0_IRQHandler+0x10>)
 800973e:	f001 fde7 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8009742:	bf00      	nop
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000de0 	.word	0x20000de0

0800974c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009750:	4802      	ldr	r0, [pc, #8]	; (800975c <CAN2_RX1_IRQHandler+0x10>)
 8009752:	f001 fddd 	bl	800b310 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8009756:	bf00      	nop
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000de0 	.word	0x20000de0

08009760 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009764:	4802      	ldr	r0, [pc, #8]	; (8009770 <DMA2_Stream5_IRQHandler+0x10>)
 8009766:	f002 fa0b 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800976a:	bf00      	nop
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	2000148c 	.word	0x2000148c

08009774 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009778:	4802      	ldr	r0, [pc, #8]	; (8009784 <DMA2_Stream7_IRQHandler+0x10>)
 800977a:	f002 fa01 	bl	800bb80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800977e:	bf00      	nop
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	2000142c 	.word	0x2000142c

08009788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  return 1;
 800978c:	2301      	movs	r3, #1
}
 800978e:	4618      	mov	r0, r3
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <_kill>:

int _kill(int pid, int sig)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80097a2:	f00b fbdb 	bl	8014f5c <__errno>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2216      	movs	r2, #22
 80097aa:	601a      	str	r2, [r3, #0]
  return -1;
 80097ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <_exit>:

void _exit (int status)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80097c0:	f04f 31ff 	mov.w	r1, #4294967295
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ffe7 	bl	8009798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80097ca:	e7fe      	b.n	80097ca <_exit+0x12>

080097cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	e00a      	b.n	80097f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80097de:	f3af 8000 	nop.w
 80097e2:	4601      	mov	r1, r0
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	60ba      	str	r2, [r7, #8]
 80097ea:	b2ca      	uxtb	r2, r1
 80097ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	3301      	adds	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	dbf0      	blt.n	80097de <_read+0x12>
  }

  return len;
 80097fc:	687b      	ldr	r3, [r7, #4]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009812:	2300      	movs	r3, #0
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	e009      	b.n	800982c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	60ba      	str	r2, [r7, #8]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	3301      	adds	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	dbf1      	blt.n	8009818 <_write+0x12>
  }
  return len;
 8009834:	687b      	ldr	r3, [r7, #4]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <_close>:

int _close(int file)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800984a:	4618      	mov	r0, r3
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009866:	605a      	str	r2, [r3, #4]
  return 0;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <_isatty>:

int _isatty(int file)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800987e:	2301      	movs	r3, #1
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80098b0:	4a14      	ldr	r2, [pc, #80]	; (8009904 <_sbrk+0x5c>)
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <_sbrk+0x60>)
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80098bc:	4b13      	ldr	r3, [pc, #76]	; (800990c <_sbrk+0x64>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80098c4:	4b11      	ldr	r3, [pc, #68]	; (800990c <_sbrk+0x64>)
 80098c6:	4a12      	ldr	r2, [pc, #72]	; (8009910 <_sbrk+0x68>)
 80098c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098ca:	4b10      	ldr	r3, [pc, #64]	; (800990c <_sbrk+0x64>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	693a      	ldr	r2, [r7, #16]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d207      	bcs.n	80098e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098d8:	f00b fb40 	bl	8014f5c <__errno>
 80098dc:	4603      	mov	r3, r0
 80098de:	220c      	movs	r2, #12
 80098e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098e2:	f04f 33ff 	mov.w	r3, #4294967295
 80098e6:	e009      	b.n	80098fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098e8:	4b08      	ldr	r3, [pc, #32]	; (800990c <_sbrk+0x64>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098ee:	4b07      	ldr	r3, [pc, #28]	; (800990c <_sbrk+0x64>)
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	4a05      	ldr	r2, [pc, #20]	; (800990c <_sbrk+0x64>)
 80098f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098fa:	68fb      	ldr	r3, [r7, #12]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20020000 	.word	0x20020000
 8009908:	00000800 	.word	0x00000800
 800990c:	200011f0 	.word	0x200011f0
 8009910:	2000a4c0 	.word	0x2000a4c0

08009914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009918:	4b06      	ldr	r3, [pc, #24]	; (8009934 <SystemInit+0x20>)
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	4a05      	ldr	r2, [pc, #20]	; (8009934 <SystemInit+0x20>)
 8009920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009928:	bf00      	nop
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	e000ed00 	.word	0xe000ed00

08009938 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800993e:	f107 0308 	add.w	r3, r7, #8
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	605a      	str	r2, [r3, #4]
 8009948:	609a      	str	r2, [r3, #8]
 800994a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800994c:	463b      	mov	r3, r7
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009954:	4b1e      	ldr	r3, [pc, #120]	; (80099d0 <MX_TIM2_Init+0x98>)
 8009956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800995a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800995c:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <MX_TIM2_Init+0x98>)
 800995e:	f240 3247 	movw	r2, #839	; 0x347
 8009962:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009964:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <MX_TIM2_Init+0x98>)
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800996a:	4b19      	ldr	r3, [pc, #100]	; (80099d0 <MX_TIM2_Init+0x98>)
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009972:	4b17      	ldr	r3, [pc, #92]	; (80099d0 <MX_TIM2_Init+0x98>)
 8009974:	2200      	movs	r2, #0
 8009976:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <MX_TIM2_Init+0x98>)
 800997a:	2200      	movs	r2, #0
 800997c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800997e:	4814      	ldr	r0, [pc, #80]	; (80099d0 <MX_TIM2_Init+0x98>)
 8009980:	f003 fbf5 	bl	800d16e <HAL_TIM_Base_Init>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800998a:	f7ff fd03 	bl	8009394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800998e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009992:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	4619      	mov	r1, r3
 800999a:	480d      	ldr	r0, [pc, #52]	; (80099d0 <MX_TIM2_Init+0x98>)
 800999c:	f003 ff70 	bl	800d880 <HAL_TIM_ConfigClockSource>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80099a6:	f7ff fcf5 	bl	8009394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099aa:	2300      	movs	r3, #0
 80099ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80099b2:	463b      	mov	r3, r7
 80099b4:	4619      	mov	r1, r3
 80099b6:	4806      	ldr	r0, [pc, #24]	; (80099d0 <MX_TIM2_Init+0x98>)
 80099b8:	f004 fb3c 	bl	800e034 <HAL_TIMEx_MasterConfigSynchronization>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80099c2:	f7ff fce7 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80099c6:	bf00      	nop
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200011f4 	.word	0x200011f4

080099d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099da:	f107 0308 	add.w	r3, r7, #8
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	605a      	str	r2, [r3, #4]
 80099e4:	609a      	str	r2, [r3, #8]
 80099e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099e8:	463b      	mov	r3, r7
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80099f0:	4b1d      	ldr	r3, [pc, #116]	; (8009a68 <MX_TIM3_Init+0x94>)
 80099f2:	4a1e      	ldr	r2, [pc, #120]	; (8009a6c <MX_TIM3_Init+0x98>)
 80099f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 80099f6:	4b1c      	ldr	r3, [pc, #112]	; (8009a68 <MX_TIM3_Init+0x94>)
 80099f8:	f244 129f 	movw	r2, #16799	; 0x419f
 80099fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099fe:	4b1a      	ldr	r3, [pc, #104]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009a04:	4b18      	ldr	r3, [pc, #96]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a0c:	4b16      	ldr	r3, [pc, #88]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a12:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009a18:	4813      	ldr	r0, [pc, #76]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a1a:	f003 fba8 	bl	800d16e <HAL_TIM_Base_Init>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8009a24:	f7ff fcb6 	bl	8009394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4619      	mov	r1, r3
 8009a34:	480c      	ldr	r0, [pc, #48]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a36:	f003 ff23 	bl	800d880 <HAL_TIM_ConfigClockSource>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8009a40:	f7ff fca8 	bl	8009394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4805      	ldr	r0, [pc, #20]	; (8009a68 <MX_TIM3_Init+0x94>)
 8009a52:	f004 faef 	bl	800e034 <HAL_TIMEx_MasterConfigSynchronization>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8009a5c:	f7ff fc9a 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009a60:	bf00      	nop
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	2000123c 	.word	0x2000123c
 8009a6c:	40000400 	.word	0x40000400

08009a70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08e      	sub	sp, #56	; 0x38
 8009a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	605a      	str	r2, [r3, #4]
 8009a80:	609a      	str	r2, [r3, #8]
 8009a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a84:	f107 0320 	add.w	r3, r7, #32
 8009a88:	2200      	movs	r2, #0
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	605a      	str	r2, [r3, #4]
 8009a96:	609a      	str	r2, [r3, #8]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	611a      	str	r2, [r3, #16]
 8009a9c:	615a      	str	r2, [r3, #20]
 8009a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009aa0:	4b37      	ldr	r3, [pc, #220]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009aa2:	4a38      	ldr	r2, [pc, #224]	; (8009b84 <MX_TIM4_Init+0x114>)
 8009aa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8009aa6:	4b36      	ldr	r3, [pc, #216]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009aa8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009aac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009aae:	4b34      	ldr	r3, [pc, #208]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8009ab4:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009ab6:	22fe      	movs	r2, #254	; 0xfe
 8009ab8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009aba:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ac0:	4b2f      	ldr	r3, [pc, #188]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009ac6:	482e      	ldr	r0, [pc, #184]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009ac8:	f003 fb51 	bl	800d16e <HAL_TIM_Base_Init>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8009ad2:	f7ff fc5f 	bl	8009394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4827      	ldr	r0, [pc, #156]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009ae4:	f003 fecc 	bl	800d880 <HAL_TIM_ConfigClockSource>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8009aee:	f7ff fc51 	bl	8009394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009af2:	4823      	ldr	r0, [pc, #140]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009af4:	f003 fbfa 	bl	800d2ec <HAL_TIM_PWM_Init>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8009afe:	f7ff fc49 	bl	8009394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b02:	2300      	movs	r3, #0
 8009b04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009b0a:	f107 0320 	add.w	r3, r7, #32
 8009b0e:	4619      	mov	r1, r3
 8009b10:	481b      	ldr	r0, [pc, #108]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009b12:	f004 fa8f 	bl	800e034 <HAL_TIMEx_MasterConfigSynchronization>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8009b1c:	f7ff fc3a 	bl	8009394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b20:	2360      	movs	r3, #96	; 0x60
 8009b22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b30:	1d3b      	adds	r3, r7, #4
 8009b32:	2200      	movs	r2, #0
 8009b34:	4619      	mov	r1, r3
 8009b36:	4812      	ldr	r0, [pc, #72]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009b38:	f003 fde0 	bl	800d6fc <HAL_TIM_PWM_ConfigChannel>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8009b42:	f7ff fc27 	bl	8009394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b46:	1d3b      	adds	r3, r7, #4
 8009b48:	2204      	movs	r2, #4
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	480c      	ldr	r0, [pc, #48]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009b4e:	f003 fdd5 	bl	800d6fc <HAL_TIM_PWM_ConfigChannel>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8009b58:	f7ff fc1c 	bl	8009394 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009b5c:	1d3b      	adds	r3, r7, #4
 8009b5e:	2208      	movs	r2, #8
 8009b60:	4619      	mov	r1, r3
 8009b62:	4807      	ldr	r0, [pc, #28]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009b64:	f003 fdca 	bl	800d6fc <HAL_TIM_PWM_ConfigChannel>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8009b6e:	f7ff fc11 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009b72:	4803      	ldr	r0, [pc, #12]	; (8009b80 <MX_TIM4_Init+0x110>)
 8009b74:	f000 f988 	bl	8009e88 <HAL_TIM_MspPostInit>

}
 8009b78:	bf00      	nop
 8009b7a:	3738      	adds	r7, #56	; 0x38
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20001284 	.word	0x20001284
 8009b84:	40000800 	.word	0x40000800

08009b88 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08c      	sub	sp, #48	; 0x30
 8009b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009b8e:	f107 030c 	add.w	r3, r7, #12
 8009b92:	2224      	movs	r2, #36	; 0x24
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f00b fb22 	bl	80151e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009ba4:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009ba6:	4a21      	ldr	r2, [pc, #132]	; (8009c2c <MX_TIM5_Init+0xa4>)
 8009ba8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009baa:	4b1f      	ldr	r3, [pc, #124]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bc4:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009bde:	2300      	movs	r3, #0
 8009be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009be2:	2301      	movs	r3, #1
 8009be4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009be6:	2300      	movs	r3, #0
 8009be8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009bee:	f107 030c 	add.w	r3, r7, #12
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	480c      	ldr	r0, [pc, #48]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009bf6:	f003 fbd2 	bl	800d39e <HAL_TIM_Encoder_Init>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8009c00:	f7ff fbc8 	bl	8009394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c04:	2300      	movs	r3, #0
 8009c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009c0c:	1d3b      	adds	r3, r7, #4
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4805      	ldr	r0, [pc, #20]	; (8009c28 <MX_TIM5_Init+0xa0>)
 8009c12:	f004 fa0f 	bl	800e034 <HAL_TIMEx_MasterConfigSynchronization>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8009c1c:	f7ff fbba 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009c20:	bf00      	nop
 8009c22:	3730      	adds	r7, #48	; 0x30
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	200012cc 	.word	0x200012cc
 8009c2c:	40000c00 	.word	0x40000c00

08009c30 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c36:	463b      	mov	r3, r7
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	609a      	str	r2, [r3, #8]
 8009c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8009c42:	4b16      	ldr	r3, [pc, #88]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c44:	4a16      	ldr	r2, [pc, #88]	; (8009ca0 <MX_TIM9_Init+0x70>)
 8009c46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8009c48:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c4a:	f244 129f 	movw	r2, #16799	; 0x419f
 8009c4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c50:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8009c56:	4b11      	ldr	r3, [pc, #68]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c5e:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c64:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009c6a:	480c      	ldr	r0, [pc, #48]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c6c:	f003 fa7f 	bl	800d16e <HAL_TIM_Base_Init>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8009c76:	f7ff fb8d 	bl	8009394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c7e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009c80:	463b      	mov	r3, r7
 8009c82:	4619      	mov	r1, r3
 8009c84:	4805      	ldr	r0, [pc, #20]	; (8009c9c <MX_TIM9_Init+0x6c>)
 8009c86:	f003 fdfb 	bl	800d880 <HAL_TIM_ConfigClockSource>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8009c90:	f7ff fb80 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20001314 	.word	0x20001314
 8009ca0:	40014000 	.word	0x40014000

08009ca4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009caa:	4a0f      	ldr	r2, [pc, #60]	; (8009ce8 <MX_TIM14_Init+0x44>)
 8009cac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8009cae:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009cb0:	f240 3247 	movw	r2, #839	; 0x347
 8009cb4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cc2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cc4:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009cd0:	4804      	ldr	r0, [pc, #16]	; (8009ce4 <MX_TIM14_Init+0x40>)
 8009cd2:	f003 fa4c 	bl	800d16e <HAL_TIM_Base_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8009cdc:	f7ff fb5a 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8009ce0:	bf00      	nop
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2000135c 	.word	0x2000135c
 8009ce8:	40002000 	.word	0x40002000

08009cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfc:	d10e      	bne.n	8009d1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	4b38      	ldr	r3, [pc, #224]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	4a37      	ldr	r2, [pc, #220]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d08:	f043 0301 	orr.w	r3, r3, #1
 8009d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8009d0e:	4b35      	ldr	r3, [pc, #212]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8009d1a:	e05e      	b.n	8009dda <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a31      	ldr	r2, [pc, #196]	; (8009de8 <HAL_TIM_Base_MspInit+0xfc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d116      	bne.n	8009d54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009d26:	2300      	movs	r3, #0
 8009d28:	61bb      	str	r3, [r7, #24]
 8009d2a:	4b2e      	ldr	r3, [pc, #184]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	4a2d      	ldr	r2, [pc, #180]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d30:	f043 0302 	orr.w	r3, r3, #2
 8009d34:	6413      	str	r3, [r2, #64]	; 0x40
 8009d36:	4b2b      	ldr	r3, [pc, #172]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	61bb      	str	r3, [r7, #24]
 8009d40:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8009d42:	2200      	movs	r2, #0
 8009d44:	2105      	movs	r1, #5
 8009d46:	201d      	movs	r0, #29
 8009d48:	f001 fdce 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009d4c:	201d      	movs	r0, #29
 8009d4e:	f001 fde7 	bl	800b920 <HAL_NVIC_EnableIRQ>
}
 8009d52:	e042      	b.n	8009dda <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a24      	ldr	r2, [pc, #144]	; (8009dec <HAL_TIM_Base_MspInit+0x100>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d10e      	bne.n	8009d7c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	4a1f      	ldr	r2, [pc, #124]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d68:	f043 0304 	orr.w	r3, r3, #4
 8009d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8009d6e:	4b1d      	ldr	r3, [pc, #116]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	697b      	ldr	r3, [r7, #20]
}
 8009d7a:	e02e      	b.n	8009dda <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a1b      	ldr	r2, [pc, #108]	; (8009df0 <HAL_TIM_Base_MspInit+0x104>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d116      	bne.n	8009db4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8009d86:	2300      	movs	r3, #0
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	4b16      	ldr	r3, [pc, #88]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8e:	4a15      	ldr	r2, [pc, #84]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d94:	6453      	str	r3, [r2, #68]	; 0x44
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8009da2:	2200      	movs	r2, #0
 8009da4:	2105      	movs	r1, #5
 8009da6:	2018      	movs	r0, #24
 8009da8:	f001 fd9e 	bl	800b8e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009dac:	2018      	movs	r0, #24
 8009dae:	f001 fdb7 	bl	800b920 <HAL_NVIC_EnableIRQ>
}
 8009db2:	e012      	b.n	8009dda <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a0e      	ldr	r2, [pc, #56]	; (8009df4 <HAL_TIM_Base_MspInit+0x108>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d10d      	bne.n	8009dda <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	4a07      	ldr	r2, [pc, #28]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <HAL_TIM_Base_MspInit+0xf8>)
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	3720      	adds	r7, #32
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40023800 	.word	0x40023800
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40002000 	.word	0x40002000

08009df8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e00:	f107 0314 	add.w	r3, r7, #20
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	609a      	str	r2, [r3, #8]
 8009e0c:	60da      	str	r2, [r3, #12]
 8009e0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d12b      	bne.n	8009e72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	613b      	str	r3, [r7, #16]
 8009e1e:	4b18      	ldr	r3, [pc, #96]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	4a17      	ldr	r2, [pc, #92]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e24:	f043 0308 	orr.w	r3, r3, #8
 8009e28:	6413      	str	r3, [r2, #64]	; 0x40
 8009e2a:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	613b      	str	r3, [r7, #16]
 8009e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3e:	4a10      	ldr	r2, [pc, #64]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e40:	f043 0301 	orr.w	r3, r3, #1
 8009e44:	6313      	str	r3, [r2, #48]	; 0x30
 8009e46:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 8009e52:	2303      	movs	r3, #3
 8009e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e56:	2302      	movs	r3, #2
 8009e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009e62:	2302      	movs	r3, #2
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4805      	ldr	r0, [pc, #20]	; (8009e84 <HAL_TIM_Encoder_MspInit+0x8c>)
 8009e6e:	f002 f8f1 	bl	800c054 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009e72:	bf00      	nop
 8009e74:	3728      	adds	r7, #40	; 0x28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40023800 	.word	0x40023800
 8009e84:	40020000 	.word	0x40020000

08009e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b088      	sub	sp, #32
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e90:	f107 030c 	add.w	r3, r7, #12
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	605a      	str	r2, [r3, #4]
 8009e9a:	609a      	str	r2, [r3, #8]
 8009e9c:	60da      	str	r2, [r3, #12]
 8009e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a12      	ldr	r2, [pc, #72]	; (8009ef0 <HAL_TIM_MspPostInit+0x68>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d11e      	bne.n	8009ee8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <HAL_TIM_MspPostInit+0x6c>)
 8009eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb2:	4a10      	ldr	r2, [pc, #64]	; (8009ef4 <HAL_TIM_MspPostInit+0x6c>)
 8009eb4:	f043 0308 	orr.w	r3, r3, #8
 8009eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eba:	4b0e      	ldr	r3, [pc, #56]	; (8009ef4 <HAL_TIM_MspPostInit+0x6c>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	60bb      	str	r3, [r7, #8]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8009ec6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009edc:	f107 030c 	add.w	r3, r7, #12
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <HAL_TIM_MspPostInit+0x70>)
 8009ee4:	f002 f8b6 	bl	800c054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8009ee8:	bf00      	nop
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40000800 	.word	0x40000800
 8009ef4:	40023800 	.word	0x40023800
 8009ef8:	40020c00 	.word	0x40020c00

08009efc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f02:	4a12      	ldr	r2, [pc, #72]	; (8009f4c <MX_USART1_UART_Init+0x50>)
 8009f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009f06:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f0e:	4b0e      	ldr	r3, [pc, #56]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009f14:	4b0c      	ldr	r3, [pc, #48]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f22:	220c      	movs	r2, #12
 8009f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8009f26:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f28:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009f2c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f34:	4804      	ldr	r0, [pc, #16]	; (8009f48 <MX_USART1_UART_Init+0x4c>)
 8009f36:	f004 f90d 	bl	800e154 <HAL_UART_Init>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8009f40:	f7ff fa28 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009f44:	bf00      	nop
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	200013a4 	.word	0x200013a4
 8009f4c:	40011000 	.word	0x40011000

08009f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f54:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f56:	4a12      	ldr	r2, [pc, #72]	; (8009fa0 <MX_USART2_UART_Init+0x50>)
 8009f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8009f5a:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f5c:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8009f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f62:	4b0e      	ldr	r3, [pc, #56]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f68:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f6e:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f74:	4b09      	ldr	r3, [pc, #36]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f76:	220c      	movs	r2, #12
 8009f78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f7a:	4b08      	ldr	r3, [pc, #32]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f80:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009f86:	4805      	ldr	r0, [pc, #20]	; (8009f9c <MX_USART2_UART_Init+0x4c>)
 8009f88:	f004 f8e4 	bl	800e154 <HAL_UART_Init>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009f92:	f7ff f9ff 	bl	8009394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f96:	bf00      	nop
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200013e8 	.word	0x200013e8
 8009fa0:	40004400 	.word	0x40004400

08009fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08c      	sub	sp, #48	; 0x30
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fac:	f107 031c 	add.w	r3, r7, #28
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	609a      	str	r2, [r3, #8]
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a61      	ldr	r2, [pc, #388]	; (800a148 <HAL_UART_MspInit+0x1a4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	f040 808a 	bne.w	800a0dc <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61bb      	str	r3, [r7, #24]
 8009fcc:	4b5f      	ldr	r3, [pc, #380]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd0:	4a5e      	ldr	r2, [pc, #376]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009fd2:	f043 0310 	orr.w	r3, r3, #16
 8009fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8009fd8:	4b5c      	ldr	r3, [pc, #368]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	61bb      	str	r3, [r7, #24]
 8009fe2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	4b58      	ldr	r3, [pc, #352]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fec:	4a57      	ldr	r2, [pc, #348]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009fee:	f043 0301 	orr.w	r3, r3, #1
 8009ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ff4:	4b55      	ldr	r3, [pc, #340]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a000:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800a004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a006:	2302      	movs	r3, #2
 800a008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a00e:	2303      	movs	r3, #3
 800a010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a012:	2307      	movs	r3, #7
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a016:	f107 031c 	add.w	r3, r7, #28
 800a01a:	4619      	mov	r1, r3
 800a01c:	484c      	ldr	r0, [pc, #304]	; (800a150 <HAL_UART_MspInit+0x1ac>)
 800a01e:	f002 f819 	bl	800c054 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a022:	4b4c      	ldr	r3, [pc, #304]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a024:	4a4c      	ldr	r2, [pc, #304]	; (800a158 <HAL_UART_MspInit+0x1b4>)
 800a026:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a028:	4b4a      	ldr	r3, [pc, #296]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a02a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a02e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a030:	4b48      	ldr	r3, [pc, #288]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a032:	2240      	movs	r2, #64	; 0x40
 800a034:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a036:	4b47      	ldr	r3, [pc, #284]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a038:	2200      	movs	r2, #0
 800a03a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a03c:	4b45      	ldr	r3, [pc, #276]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a03e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a042:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a044:	4b43      	ldr	r3, [pc, #268]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a046:	2200      	movs	r2, #0
 800a048:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a04a:	4b42      	ldr	r3, [pc, #264]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a050:	4b40      	ldr	r3, [pc, #256]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a052:	2200      	movs	r2, #0
 800a054:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a056:	4b3f      	ldr	r3, [pc, #252]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a058:	2200      	movs	r2, #0
 800a05a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a05c:	4b3d      	ldr	r3, [pc, #244]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a05e:	2200      	movs	r2, #0
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a062:	483c      	ldr	r0, [pc, #240]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a064:	f001 fc86 	bl	800b974 <HAL_DMA_Init>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800a06e:	f7ff f991 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a37      	ldr	r2, [pc, #220]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a076:	635a      	str	r2, [r3, #52]	; 0x34
 800a078:	4a36      	ldr	r2, [pc, #216]	; (800a154 <HAL_UART_MspInit+0x1b0>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a07e:	4b37      	ldr	r3, [pc, #220]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a080:	4a37      	ldr	r2, [pc, #220]	; (800a160 <HAL_UART_MspInit+0x1bc>)
 800a082:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a084:	4b35      	ldr	r3, [pc, #212]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a086:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a08a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a08c:	4b33      	ldr	r3, [pc, #204]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a092:	4b32      	ldr	r3, [pc, #200]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a094:	2200      	movs	r2, #0
 800a096:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a098:	4b30      	ldr	r3, [pc, #192]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a09a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a09e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0a0:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0a6:	4b2d      	ldr	r3, [pc, #180]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a0ac:	4b2b      	ldr	r3, [pc, #172]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a0b2:	4b2a      	ldr	r3, [pc, #168]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a0b8:	4b28      	ldr	r3, [pc, #160]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a0be:	4827      	ldr	r0, [pc, #156]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0c0:	f001 fc58 	bl	800b974 <HAL_DMA_Init>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800a0ca:	f7ff f963 	bl	8009394 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a22      	ldr	r2, [pc, #136]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0d2:	639a      	str	r2, [r3, #56]	; 0x38
 800a0d4:	4a21      	ldr	r2, [pc, #132]	; (800a15c <HAL_UART_MspInit+0x1b8>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a0da:	e030      	b.n	800a13e <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a20      	ldr	r2, [pc, #128]	; (800a164 <HAL_UART_MspInit+0x1c0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d12b      	bne.n	800a13e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	4b18      	ldr	r3, [pc, #96]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	4a17      	ldr	r2, [pc, #92]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a0f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	4b11      	ldr	r3, [pc, #68]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10a:	4a10      	ldr	r2, [pc, #64]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a10c:	f043 0308 	orr.w	r3, r3, #8
 800a110:	6313      	str	r3, [r2, #48]	; 0x30
 800a112:	4b0e      	ldr	r3, [pc, #56]	; (800a14c <HAL_UART_MspInit+0x1a8>)
 800a114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a116:	f003 0308 	and.w	r3, r3, #8
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800a11e:	2360      	movs	r3, #96	; 0x60
 800a120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a122:	2302      	movs	r3, #2
 800a124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a12a:	2303      	movs	r3, #3
 800a12c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a12e:	2307      	movs	r3, #7
 800a130:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a132:	f107 031c 	add.w	r3, r7, #28
 800a136:	4619      	mov	r1, r3
 800a138:	480b      	ldr	r0, [pc, #44]	; (800a168 <HAL_UART_MspInit+0x1c4>)
 800a13a:	f001 ff8b 	bl	800c054 <HAL_GPIO_Init>
}
 800a13e:	bf00      	nop
 800a140:	3730      	adds	r7, #48	; 0x30
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	40011000 	.word	0x40011000
 800a14c:	40023800 	.word	0x40023800
 800a150:	40020000 	.word	0x40020000
 800a154:	2000142c 	.word	0x2000142c
 800a158:	400264b8 	.word	0x400264b8
 800a15c:	2000148c 	.word	0x2000148c
 800a160:	40026488 	.word	0x40026488
 800a164:	40004400 	.word	0x40004400
 800a168:	40020c00 	.word	0x40020c00

0800a16c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a16c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a1a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a170:	480d      	ldr	r0, [pc, #52]	; (800a1a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a172:	490e      	ldr	r1, [pc, #56]	; (800a1ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a174:	4a0e      	ldr	r2, [pc, #56]	; (800a1b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a178:	e002      	b.n	800a180 <LoopCopyDataInit>

0800a17a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a17a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a17c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a17e:	3304      	adds	r3, #4

0800a180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a184:	d3f9      	bcc.n	800a17a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a186:	4a0b      	ldr	r2, [pc, #44]	; (800a1b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a188:	4c0b      	ldr	r4, [pc, #44]	; (800a1b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a18a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a18c:	e001      	b.n	800a192 <LoopFillZerobss>

0800a18e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a18e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a190:	3204      	adds	r2, #4

0800a192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a194:	d3fb      	bcc.n	800a18e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a196:	f7ff fbbd 	bl	8009914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a19a:	f00a ffdb 	bl	8015154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a19e:	f7ff f849 	bl	8009234 <main>
  bx  lr    
 800a1a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a1a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a1a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a1ac:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800a1b0:	08018734 	.word	0x08018734
  ldr r2, =_sbss
 800a1b4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800a1b8:	2000a4bc 	.word	0x2000a4bc

0800a1bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a1bc:	e7fe      	b.n	800a1bc <ADC_IRQHandler>
	...

0800a1c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a1c4:	4b0e      	ldr	r3, [pc, #56]	; (800a200 <HAL_Init+0x40>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a0d      	ldr	r2, [pc, #52]	; (800a200 <HAL_Init+0x40>)
 800a1ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a1d0:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <HAL_Init+0x40>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a0a      	ldr	r2, [pc, #40]	; (800a200 <HAL_Init+0x40>)
 800a1d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a1dc:	4b08      	ldr	r3, [pc, #32]	; (800a200 <HAL_Init+0x40>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a07      	ldr	r2, [pc, #28]	; (800a200 <HAL_Init+0x40>)
 800a1e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1e8:	2003      	movs	r0, #3
 800a1ea:	f001 fb72 	bl	800b8d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a1ee:	2005      	movs	r0, #5
 800a1f0:	f7ff f9b6 	bl	8009560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a1f4:	f7ff f988 	bl	8009508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	40023c00 	.word	0x40023c00

0800a204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a208:	4b06      	ldr	r3, [pc, #24]	; (800a224 <HAL_IncTick+0x20>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b06      	ldr	r3, [pc, #24]	; (800a228 <HAL_IncTick+0x24>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4413      	add	r3, r2
 800a214:	4a04      	ldr	r2, [pc, #16]	; (800a228 <HAL_IncTick+0x24>)
 800a216:	6013      	str	r3, [r2, #0]
}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000018 	.word	0x20000018
 800a228:	200014ec 	.word	0x200014ec

0800a22c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
  return uwTick;
 800a230:	4b03      	ldr	r3, [pc, #12]	; (800a240 <HAL_GetTick+0x14>)
 800a232:	681b      	ldr	r3, [r3, #0]
}
 800a234:	4618      	mov	r0, r3
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	200014ec 	.word	0x200014ec

0800a244 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e033      	b.n	800a2c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7fe fb90 	bl	8008988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	f003 0310 	and.w	r3, r3, #16
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d118      	bne.n	800a2b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a28a:	f023 0302 	bic.w	r3, r3, #2
 800a28e:	f043 0202 	orr.w	r2, r3, #2
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa54 	bl	800a744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	f043 0201 	orr.w	r2, r3, #1
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	641a      	str	r2, [r3, #64]	; 0x40
 800a2b2:	e001      	b.n	800a2b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_ADC_Start_DMA+0x1e>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e0e9      	b.n	800a4be <HAL_ADC_Start_DMA+0x1f2>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d018      	beq.n	800a332 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689a      	ldr	r2, [r3, #8]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a310:	4b6d      	ldr	r3, [pc, #436]	; (800a4c8 <HAL_ADC_Start_DMA+0x1fc>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a6d      	ldr	r2, [pc, #436]	; (800a4cc <HAL_ADC_Start_DMA+0x200>)
 800a316:	fba2 2303 	umull	r2, r3, r2, r3
 800a31a:	0c9a      	lsrs	r2, r3, #18
 800a31c:	4613      	mov	r3, r2
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	4413      	add	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a324:	e002      	b.n	800a32c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3b01      	subs	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1f9      	bne.n	800a326 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a340:	d107      	bne.n	800a352 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a350:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	f040 80a1 	bne.w	800a4a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a36a:	f023 0301 	bic.w	r3, r3, #1
 800a36e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a38c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a0:	d106      	bne.n	800a3b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a6:	f023 0206 	bic.w	r2, r3, #6
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	645a      	str	r2, [r3, #68]	; 0x44
 800a3ae:	e002      	b.n	800a3b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a3be:	4b44      	ldr	r3, [pc, #272]	; (800a4d0 <HAL_ADC_Start_DMA+0x204>)
 800a3c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	4a43      	ldr	r2, [pc, #268]	; (800a4d4 <HAL_ADC_Start_DMA+0x208>)
 800a3c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	4a42      	ldr	r2, [pc, #264]	; (800a4d8 <HAL_ADC_Start_DMA+0x20c>)
 800a3d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	4a41      	ldr	r2, [pc, #260]	; (800a4dc <HAL_ADC_Start_DMA+0x210>)
 800a3d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a3e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a3f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a402:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	334c      	adds	r3, #76	; 0x4c
 800a40e:	4619      	mov	r1, r3
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f001 fb5c 	bl	800bad0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	2b00      	cmp	r3, #0
 800a422:	d12a      	bne.n	800a47a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a2d      	ldr	r2, [pc, #180]	; (800a4e0 <HAL_ADC_Start_DMA+0x214>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d015      	beq.n	800a45a <HAL_ADC_Start_DMA+0x18e>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a2c      	ldr	r2, [pc, #176]	; (800a4e4 <HAL_ADC_Start_DMA+0x218>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d105      	bne.n	800a444 <HAL_ADC_Start_DMA+0x178>
 800a438:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <HAL_ADC_Start_DMA+0x204>)
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a27      	ldr	r2, [pc, #156]	; (800a4e8 <HAL_ADC_Start_DMA+0x21c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d136      	bne.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
 800a44e:	4b20      	ldr	r3, [pc, #128]	; (800a4d0 <HAL_ADC_Start_DMA+0x204>)
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f003 0310 	and.w	r3, r3, #16
 800a456:	2b00      	cmp	r3, #0
 800a458:	d130      	bne.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d129      	bne.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a476:	609a      	str	r2, [r3, #8]
 800a478:	e020      	b.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a18      	ldr	r2, [pc, #96]	; (800a4e0 <HAL_ADC_Start_DMA+0x214>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d11b      	bne.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d114      	bne.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a4a0:	609a      	str	r2, [r3, #8]
 800a4a2:	e00b      	b.n	800a4bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	f043 0210 	orr.w	r2, r3, #16
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b4:	f043 0201 	orr.w	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000010 	.word	0x20000010
 800a4cc:	431bde83 	.word	0x431bde83
 800a4d0:	40012300 	.word	0x40012300
 800a4d4:	0800a93d 	.word	0x0800a93d
 800a4d8:	0800a9f7 	.word	0x0800a9f7
 800a4dc:	0800aa13 	.word	0x0800aa13
 800a4e0:	40012000 	.word	0x40012000
 800a4e4:	40012100 	.word	0x40012100
 800a4e8:	40012200 	.word	0x40012200

0800a4ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a514:	2b01      	cmp	r3, #1
 800a516:	d101      	bne.n	800a51c <HAL_ADC_ConfigChannel+0x1c>
 800a518:	2302      	movs	r3, #2
 800a51a:	e105      	b.n	800a728 <HAL_ADC_ConfigChannel+0x228>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b09      	cmp	r3, #9
 800a52a:	d925      	bls.n	800a578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68d9      	ldr	r1, [r3, #12]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	461a      	mov	r2, r3
 800a53a:	4613      	mov	r3, r2
 800a53c:	005b      	lsls	r3, r3, #1
 800a53e:	4413      	add	r3, r2
 800a540:	3b1e      	subs	r3, #30
 800a542:	2207      	movs	r2, #7
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	43da      	mvns	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	400a      	ands	r2, r1
 800a550:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68d9      	ldr	r1, [r3, #12]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	4618      	mov	r0, r3
 800a564:	4603      	mov	r3, r0
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	4403      	add	r3, r0
 800a56a:	3b1e      	subs	r3, #30
 800a56c:	409a      	lsls	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e022      	b.n	800a5be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	6919      	ldr	r1, [r3, #16]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	4613      	mov	r3, r2
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	4413      	add	r3, r2
 800a58c:	2207      	movs	r2, #7
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	43da      	mvns	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	400a      	ands	r2, r1
 800a59a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6919      	ldr	r1, [r3, #16]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	689a      	ldr	r2, [r3, #8]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	4403      	add	r3, r0
 800a5b4:	409a      	lsls	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b06      	cmp	r3, #6
 800a5c4:	d824      	bhi.n	800a610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	3b05      	subs	r3, #5
 800a5d8:	221f      	movs	r2, #31
 800a5da:	fa02 f303 	lsl.w	r3, r2, r3
 800a5de:	43da      	mvns	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	400a      	ands	r2, r1
 800a5e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	3b05      	subs	r3, #5
 800a602:	fa00 f203 	lsl.w	r2, r0, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	635a      	str	r2, [r3, #52]	; 0x34
 800a60e:	e04c      	b.n	800a6aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2b0c      	cmp	r3, #12
 800a616:	d824      	bhi.n	800a662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	685a      	ldr	r2, [r3, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	3b23      	subs	r3, #35	; 0x23
 800a62a:	221f      	movs	r2, #31
 800a62c:	fa02 f303 	lsl.w	r3, r2, r3
 800a630:	43da      	mvns	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	400a      	ands	r2, r1
 800a638:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	4618      	mov	r0, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	3b23      	subs	r3, #35	; 0x23
 800a654:	fa00 f203 	lsl.w	r2, r0, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	631a      	str	r2, [r3, #48]	; 0x30
 800a660:	e023      	b.n	800a6aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	3b41      	subs	r3, #65	; 0x41
 800a674:	221f      	movs	r2, #31
 800a676:	fa02 f303 	lsl.w	r3, r2, r3
 800a67a:	43da      	mvns	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	400a      	ands	r2, r1
 800a682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	4618      	mov	r0, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	3b41      	subs	r3, #65	; 0x41
 800a69e:	fa00 f203 	lsl.w	r2, r0, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a6aa:	4b22      	ldr	r3, [pc, #136]	; (800a734 <HAL_ADC_ConfigChannel+0x234>)
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a21      	ldr	r2, [pc, #132]	; (800a738 <HAL_ADC_ConfigChannel+0x238>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d109      	bne.n	800a6cc <HAL_ADC_ConfigChannel+0x1cc>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b12      	cmp	r3, #18
 800a6be:	d105      	bne.n	800a6cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a19      	ldr	r2, [pc, #100]	; (800a738 <HAL_ADC_ConfigChannel+0x238>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d123      	bne.n	800a71e <HAL_ADC_ConfigChannel+0x21e>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b10      	cmp	r3, #16
 800a6dc:	d003      	beq.n	800a6e6 <HAL_ADC_ConfigChannel+0x1e6>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b11      	cmp	r3, #17
 800a6e4:	d11b      	bne.n	800a71e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d111      	bne.n	800a71e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a6fa:	4b10      	ldr	r3, [pc, #64]	; (800a73c <HAL_ADC_ConfigChannel+0x23c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a10      	ldr	r2, [pc, #64]	; (800a740 <HAL_ADC_ConfigChannel+0x240>)
 800a700:	fba2 2303 	umull	r2, r3, r2, r3
 800a704:	0c9a      	lsrs	r2, r3, #18
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	005b      	lsls	r3, r3, #1
 800a70e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a710:	e002      	b.n	800a718 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	3b01      	subs	r3, #1
 800a716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1f9      	bne.n	800a712 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	40012300 	.word	0x40012300
 800a738:	40012000 	.word	0x40012000
 800a73c:	20000010 	.word	0x20000010
 800a740:	431bde83 	.word	0x431bde83

0800a744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a74c:	4b79      	ldr	r3, [pc, #484]	; (800a934 <ADC_Init+0x1f0>)
 800a74e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	431a      	orrs	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6859      	ldr	r1, [r3, #4]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	021a      	lsls	r2, r3, #8
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a79c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6859      	ldr	r1, [r3, #4]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6899      	ldr	r1, [r3, #8]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d6:	4a58      	ldr	r2, [pc, #352]	; (800a938 <ADC_Init+0x1f4>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d022      	beq.n	800a822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a7ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6899      	ldr	r1, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a80c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6899      	ldr	r1, [r3, #8]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	609a      	str	r2, [r3, #8]
 800a820:	e00f      	b.n	800a842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0202 	bic.w	r2, r2, #2
 800a850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6899      	ldr	r1, [r3, #8]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7e1b      	ldrb	r3, [r3, #24]
 800a85c:	005a      	lsls	r2, r3, #1
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01b      	beq.n	800a8a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a87e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a88e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6859      	ldr	r1, [r3, #4]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	3b01      	subs	r3, #1
 800a89c:	035a      	lsls	r2, r3, #13
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	605a      	str	r2, [r3, #4]
 800a8a6:	e007      	b.n	800a8b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a8c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	051a      	lsls	r2, r3, #20
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a8ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6899      	ldr	r1, [r3, #8]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8fa:	025a      	lsls	r2, r3, #9
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	6899      	ldr	r1, [r3, #8]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	029a      	lsls	r2, r3, #10
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]
}
 800a928:	bf00      	nop
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40012300 	.word	0x40012300
 800a938:	0f000001 	.word	0x0f000001

0800a93c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a952:	2b00      	cmp	r3, #0
 800a954:	d13c      	bne.n	800a9d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d12b      	bne.n	800a9c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a974:	2b00      	cmp	r3, #0
 800a976:	d127      	bne.n	800a9c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a982:	2b00      	cmp	r3, #0
 800a984:	d006      	beq.n	800a994 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a990:	2b00      	cmp	r3, #0
 800a992:	d119      	bne.n	800a9c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 0220 	bic.w	r2, r2, #32
 800a9a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d105      	bne.n	800a9c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9c0:	f043 0201 	orr.w	r2, r3, #1
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f003 fea2 	bl	800e712 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a9ce:	e00e      	b.n	800a9ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d4:	f003 0310 	and.w	r3, r3, #16
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff fd85 	bl	800a4ec <HAL_ADC_ErrorCallback>
}
 800a9e2:	e004      	b.n	800a9ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f003 ff32 	bl	800e86e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2240      	movs	r2, #64	; 0x40
 800aa24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	f043 0204 	orr.w	r2, r3, #4
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff fd5a 	bl	800a4ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aa38:	bf00      	nop
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e0ed      	b.n	800ac2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7fe f8f6 	bl	8008c50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa74:	f7ff fbda 	bl	800a22c <HAL_GetTick>
 800aa78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aa7a:	e012      	b.n	800aaa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aa7c:	f7ff fbd6 	bl	800a22c <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	2b0a      	cmp	r3, #10
 800aa88:	d90b      	bls.n	800aaa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2205      	movs	r2, #5
 800aa9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e0c5      	b.n	800ac2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0e5      	beq.n	800aa7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 0202 	bic.w	r2, r2, #2
 800aabe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aac0:	f7ff fbb4 	bl	800a22c <HAL_GetTick>
 800aac4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aac6:	e012      	b.n	800aaee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aac8:	f7ff fbb0 	bl	800a22c <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b0a      	cmp	r3, #10
 800aad4:	d90b      	bls.n	800aaee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2205      	movs	r2, #5
 800aae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e09f      	b.n	800ac2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	f003 0302 	and.w	r3, r3, #2
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e5      	bne.n	800aac8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7e1b      	ldrb	r3, [r3, #24]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d108      	bne.n	800ab16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e007      	b.n	800ab26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7e5b      	ldrb	r3, [r3, #25]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d108      	bne.n	800ab40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	e007      	b.n	800ab50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7e9b      	ldrb	r3, [r3, #26]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d108      	bne.n	800ab6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0220 	orr.w	r2, r2, #32
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e007      	b.n	800ab7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0220 	bic.w	r2, r2, #32
 800ab78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	7edb      	ldrb	r3, [r3, #27]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d108      	bne.n	800ab94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0210 	bic.w	r2, r2, #16
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e007      	b.n	800aba4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f042 0210 	orr.w	r2, r2, #16
 800aba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7f1b      	ldrb	r3, [r3, #28]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d108      	bne.n	800abbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0208 	orr.w	r2, r2, #8
 800abba:	601a      	str	r2, [r3, #0]
 800abbc:	e007      	b.n	800abce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0208 	bic.w	r2, r2, #8
 800abcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	7f5b      	ldrb	r3, [r3, #29]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d108      	bne.n	800abe8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f042 0204 	orr.w	r2, r2, #4
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	e007      	b.n	800abf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0204 	bic.w	r2, r2, #4
 800abf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	ea42 0103 	orr.w	r1, r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	1e5a      	subs	r2, r3, #1
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800ac50:	7cfb      	ldrb	r3, [r7, #19]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d003      	beq.n	800ac5e <HAL_CAN_ConfigFilter+0x26>
 800ac56:	7cfb      	ldrb	r3, [r7, #19]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	f040 80be 	bne.w	800adda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800ac5e:	4b65      	ldr	r3, [pc, #404]	; (800adf4 <HAL_CAN_ConfigFilter+0x1bc>)
 800ac60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac68:	f043 0201 	orr.w	r2, r3, #1
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	f003 031f 	and.w	r3, r3, #31
 800ac9e:	2201      	movs	r2, #1
 800aca0:	fa02 f303 	lsl.w	r3, r2, r3
 800aca4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	43db      	mvns	r3, r3
 800acb0:	401a      	ands	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d123      	bne.n	800ad08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	43db      	mvns	r3, r3
 800acca:	401a      	ands	r2, r3
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ace2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	3248      	adds	r2, #72	; 0x48
 800ace8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800acfc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800acfe:	6979      	ldr	r1, [r7, #20]
 800ad00:	3348      	adds	r3, #72	; 0x48
 800ad02:	00db      	lsls	r3, r3, #3
 800ad04:	440b      	add	r3, r1
 800ad06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d122      	bne.n	800ad56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	431a      	orrs	r2, r3
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ad30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	3248      	adds	r2, #72	; 0x48
 800ad36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ad4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ad4c:	6979      	ldr	r1, [r7, #20]
 800ad4e:	3348      	adds	r3, #72	; 0x48
 800ad50:	00db      	lsls	r3, r3, #3
 800ad52:	440b      	add	r3, r1
 800ad54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	43db      	mvns	r3, r3
 800ad68:	401a      	ands	r2, r3
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ad70:	e007      	b.n	800ad82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	43db      	mvns	r3, r3
 800ad94:	401a      	ands	r2, r3
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800ad9c:	e007      	b.n	800adae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d107      	bne.n	800adc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	431a      	orrs	r2, r3
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adcc:	f023 0201 	bic.w	r2, r3, #1
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	e006      	b.n	800ade8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
  }
}
 800ade8:	4618      	mov	r0, r3
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40006400 	.word	0x40006400

0800adf8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d12e      	bne.n	800ae6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2202      	movs	r2, #2
 800ae10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0201 	bic.w	r2, r2, #1
 800ae22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae24:	f7ff fa02 	bl	800a22c <HAL_GetTick>
 800ae28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ae2a:	e012      	b.n	800ae52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ae2c:	f7ff f9fe 	bl	800a22c <HAL_GetTick>
 800ae30:	4602      	mov	r2, r0
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b0a      	cmp	r3, #10
 800ae38:	d90b      	bls.n	800ae52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2205      	movs	r2, #5
 800ae4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e012      	b.n	800ae78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e5      	bne.n	800ae2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e006      	b.n	800ae78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
  }
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b089      	sub	sp, #36	; 0x24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ae9e:	7ffb      	ldrb	r3, [r7, #31]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d003      	beq.n	800aeac <HAL_CAN_AddTxMessage+0x2c>
 800aea4:	7ffb      	ldrb	r3, [r7, #31]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	f040 80b8 	bne.w	800b01c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10a      	bne.n	800aecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d105      	bne.n	800aecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80a0 	beq.w	800b00c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	0e1b      	lsrs	r3, r3, #24
 800aed0:	f003 0303 	and.w	r3, r3, #3
 800aed4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d907      	bls.n	800aeec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e09e      	b.n	800b02a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800aeec:	2201      	movs	r2, #1
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	409a      	lsls	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10d      	bne.n	800af1a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800af08:	68f9      	ldr	r1, [r7, #12]
 800af0a:	6809      	ldr	r1, [r1, #0]
 800af0c:	431a      	orrs	r2, r3
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	3318      	adds	r3, #24
 800af12:	011b      	lsls	r3, r3, #4
 800af14:	440b      	add	r3, r1
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	e00f      	b.n	800af3a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800af24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800af2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	3318      	adds	r3, #24
 800af34:	011b      	lsls	r3, r3, #4
 800af36:	440b      	add	r3, r1
 800af38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	691a      	ldr	r2, [r3, #16]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	3318      	adds	r3, #24
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	440b      	add	r3, r1
 800af4a:	3304      	adds	r3, #4
 800af4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d111      	bne.n	800af7a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	3318      	adds	r3, #24
 800af5e:	011b      	lsls	r3, r3, #4
 800af60:	4413      	add	r3, r2
 800af62:	3304      	adds	r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	6811      	ldr	r1, [r2, #0]
 800af6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	3318      	adds	r3, #24
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	440b      	add	r3, r1
 800af76:	3304      	adds	r3, #4
 800af78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3307      	adds	r3, #7
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	061a      	lsls	r2, r3, #24
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3306      	adds	r3, #6
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	041b      	lsls	r3, r3, #16
 800af8a:	431a      	orrs	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3305      	adds	r3, #5
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	4313      	orrs	r3, r2
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	3204      	adds	r2, #4
 800af9a:	7812      	ldrb	r2, [r2, #0]
 800af9c:	4610      	mov	r0, r2
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	6811      	ldr	r1, [r2, #0]
 800afa2:	ea43 0200 	orr.w	r2, r3, r0
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	011b      	lsls	r3, r3, #4
 800afaa:	440b      	add	r3, r1
 800afac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800afb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3303      	adds	r3, #3
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	061a      	lsls	r2, r3, #24
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3302      	adds	r3, #2
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	041b      	lsls	r3, r3, #16
 800afc2:	431a      	orrs	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3301      	adds	r3, #1
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	021b      	lsls	r3, r3, #8
 800afcc:	4313      	orrs	r3, r2
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	7812      	ldrb	r2, [r2, #0]
 800afd2:	4610      	mov	r0, r2
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	6811      	ldr	r1, [r2, #0]
 800afd8:	ea43 0200 	orr.w	r2, r3, r0
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	440b      	add	r3, r1
 800afe2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800afe6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	3318      	adds	r3, #24
 800aff0:	011b      	lsls	r3, r3, #4
 800aff2:	4413      	add	r3, r2
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	6811      	ldr	r1, [r2, #0]
 800affa:	f043 0201 	orr.w	r2, r3, #1
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	3318      	adds	r3, #24
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	440b      	add	r3, r1
 800b006:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	e00e      	b.n	800b02a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e006      	b.n	800b02a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
  }
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3724      	adds	r7, #36	; 0x24
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b048:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800b04a:	7afb      	ldrb	r3, [r7, #11]
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d002      	beq.n	800b056 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d11d      	bne.n	800b092 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800b092:	68fb      	ldr	r3, [r7, #12]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d003      	beq.n	800b0c4 <HAL_CAN_GetRxMessage+0x24>
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	f040 80f3 	bne.w	800b2aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d10e      	bne.n	800b0e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d116      	bne.n	800b106 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e0e7      	b.n	800b2b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d107      	bne.n	800b106 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e0d8      	b.n	800b2b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	331b      	adds	r3, #27
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	4413      	add	r3, r2
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0204 	and.w	r2, r3, #4
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10c      	bne.n	800b13e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	331b      	adds	r3, #27
 800b12c:	011b      	lsls	r3, r3, #4
 800b12e:	4413      	add	r3, r2
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	0d5b      	lsrs	r3, r3, #21
 800b134:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	e00b      	b.n	800b156 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	331b      	adds	r3, #27
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	4413      	add	r3, r2
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	08db      	lsrs	r3, r3, #3
 800b14e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	331b      	adds	r3, #27
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	4413      	add	r3, r2
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0202 	and.w	r2, r3, #2
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	331b      	adds	r3, #27
 800b174:	011b      	lsls	r3, r3, #4
 800b176:	4413      	add	r3, r2
 800b178:	3304      	adds	r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 020f 	and.w	r2, r3, #15
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	331b      	adds	r3, #27
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	4413      	add	r3, r2
 800b190:	3304      	adds	r3, #4
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	331b      	adds	r3, #27
 800b1a4:	011b      	lsls	r3, r3, #4
 800b1a6:	4413      	add	r3, r2
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	0c1b      	lsrs	r3, r3, #16
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	4413      	add	r3, r2
 800b1be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	011b      	lsls	r3, r3, #4
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	0a1a      	lsrs	r2, r3, #8
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	011b      	lsls	r3, r3, #4
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	0c1a      	lsrs	r2, r3, #16
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	b2d2      	uxtb	r2, r2
 800b1fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	011b      	lsls	r3, r3, #4
 800b206:	4413      	add	r3, r2
 800b208:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	0e1a      	lsrs	r2, r3, #24
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	3303      	adds	r3, #3
 800b214:	b2d2      	uxtb	r2, r2
 800b216:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	011b      	lsls	r3, r3, #4
 800b220:	4413      	add	r3, r2
 800b222:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	3304      	adds	r3, #4
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	011b      	lsls	r3, r3, #4
 800b238:	4413      	add	r3, r2
 800b23a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	0a1a      	lsrs	r2, r3, #8
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	3305      	adds	r3, #5
 800b246:	b2d2      	uxtb	r2, r2
 800b248:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	011b      	lsls	r3, r3, #4
 800b252:	4413      	add	r3, r2
 800b254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	0c1a      	lsrs	r2, r3, #16
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	3306      	adds	r3, #6
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	011b      	lsls	r3, r3, #4
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	0e1a      	lsrs	r2, r3, #24
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	3307      	adds	r3, #7
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d108      	bne.n	800b296 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0220 	orr.w	r2, r2, #32
 800b292:	60da      	str	r2, [r3, #12]
 800b294:	e007      	b.n	800b2a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f042 0220 	orr.w	r2, r2, #32
 800b2a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e006      	b.n	800b2b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
  }
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d002      	beq.n	800b2e2 <HAL_CAN_ActivateNotification+0x1e>
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d109      	bne.n	800b2f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6959      	ldr	r1, [r3, #20]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e006      	b.n	800b304 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b302:	2301      	movs	r3, #1
  }
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	; 0x28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b318:	2300      	movs	r3, #0
 800b31a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d07c      	beq.n	800b450 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d023      	beq.n	800b3a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2201      	movs	r2, #1
 800b366:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7f6 fc8c 	bl	8001c90 <HAL_CAN_TxMailbox0CompleteCallback>
 800b378:	e016      	b.n	800b3a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24
 800b38c:	e00c      	b.n	800b3a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	f003 0308 	and.w	r3, r3, #8
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a0:	e002      	b.n	800b3a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f97f 	bl	800b6a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d024      	beq.n	800b3fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f959 	bl	800b67e <HAL_CAN_TxMailbox1CompleteCallback>
 800b3cc:	e016      	b.n	800b3fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d004      	beq.n	800b3e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e0:	e00c      	b.n	800b3fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d004      	beq.n	800b3f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b3f4:	e002      	b.n	800b3fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f95f 	bl	800b6ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b402:	2b00      	cmp	r3, #0
 800b404:	d024      	beq.n	800b450 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b40e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f939 	bl	800b692 <HAL_CAN_TxMailbox2CompleteCallback>
 800b420:	e016      	b.n	800b450 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b432:	627b      	str	r3, [r7, #36]	; 0x24
 800b434:	e00c      	b.n	800b450 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b446:	627b      	str	r3, [r7, #36]	; 0x24
 800b448:	e002      	b.n	800b450 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f93f 	bl	800b6ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	f003 0308 	and.w	r3, r3, #8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00c      	beq.n	800b474 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f003 0310 	and.w	r3, r3, #16
 800b460:	2b00      	cmp	r3, #0
 800b462:	d007      	beq.n	800b474 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b46a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2210      	movs	r2, #16
 800b472:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	f003 0304 	and.w	r3, r3, #4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00b      	beq.n	800b496 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f003 0308 	and.w	r3, r3, #8
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2208      	movs	r2, #8
 800b48e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f926 	bl	800b6e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d009      	beq.n	800b4b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7f6 fb56 	bl	8001b60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00c      	beq.n	800b4d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f003 0310 	and.w	r3, r3, #16
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2210      	movs	r2, #16
 800b4d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f003 0308 	and.w	r3, r3, #8
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f8fe 	bl	800b6f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b00      	cmp	r3, #0
 800b502:	d009      	beq.n	800b518 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7f6 fb5e 	bl	8001bd4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00b      	beq.n	800b53a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2210      	movs	r2, #16
 800b532:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f8e8 	bl	800b70a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d006      	beq.n	800b55c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2208      	movs	r2, #8
 800b554:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f8e1 	bl	800b71e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d07b      	beq.n	800b65e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	f003 0304 	and.w	r3, r3, #4
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d072      	beq.n	800b656 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b576:	2b00      	cmp	r3, #0
 800b578:	d008      	beq.n	800b58c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	f043 0301 	orr.w	r3, r3, #1
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	f043 0302 	orr.w	r3, r3, #2
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d008      	beq.n	800b5c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	f043 0304 	orr.w	r3, r3, #4
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d043      	beq.n	800b656 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d03e      	beq.n	800b656 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b5de:	2b60      	cmp	r3, #96	; 0x60
 800b5e0:	d02b      	beq.n	800b63a <HAL_CAN_IRQHandler+0x32a>
 800b5e2:	2b60      	cmp	r3, #96	; 0x60
 800b5e4:	d82e      	bhi.n	800b644 <HAL_CAN_IRQHandler+0x334>
 800b5e6:	2b50      	cmp	r3, #80	; 0x50
 800b5e8:	d022      	beq.n	800b630 <HAL_CAN_IRQHandler+0x320>
 800b5ea:	2b50      	cmp	r3, #80	; 0x50
 800b5ec:	d82a      	bhi.n	800b644 <HAL_CAN_IRQHandler+0x334>
 800b5ee:	2b40      	cmp	r3, #64	; 0x40
 800b5f0:	d019      	beq.n	800b626 <HAL_CAN_IRQHandler+0x316>
 800b5f2:	2b40      	cmp	r3, #64	; 0x40
 800b5f4:	d826      	bhi.n	800b644 <HAL_CAN_IRQHandler+0x334>
 800b5f6:	2b30      	cmp	r3, #48	; 0x30
 800b5f8:	d010      	beq.n	800b61c <HAL_CAN_IRQHandler+0x30c>
 800b5fa:	2b30      	cmp	r3, #48	; 0x30
 800b5fc:	d822      	bhi.n	800b644 <HAL_CAN_IRQHandler+0x334>
 800b5fe:	2b10      	cmp	r3, #16
 800b600:	d002      	beq.n	800b608 <HAL_CAN_IRQHandler+0x2f8>
 800b602:	2b20      	cmp	r3, #32
 800b604:	d005      	beq.n	800b612 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b606:	e01d      	b.n	800b644 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	f043 0308 	orr.w	r3, r3, #8
 800b60e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b610:	e019      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	f043 0310 	orr.w	r3, r3, #16
 800b618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b61a:	e014      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	f043 0320 	orr.w	r3, r3, #32
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b624:	e00f      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b62e:	e00a      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b638:	e005      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b642:	e000      	b.n	800b646 <HAL_CAN_IRQHandler+0x336>
            break;
 800b644:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	699a      	ldr	r2, [r3, #24]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b654:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2204      	movs	r2, #4
 800b65c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7f6 fae9 	bl	8001c48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b676:	bf00      	nop
 800b678:	3728      	adds	r7, #40	; 0x28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b6c2:	bf00      	nop
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b083      	sub	sp, #12
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b6fe:	bf00      	nop
 800b700:	370c      	adds	r7, #12
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b744:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800b746:	7bbb      	ldrb	r3, [r7, #14]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d002      	beq.n	800b752 <HAL_CAN_ResetError+0x20>
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d103      	bne.n	800b75a <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	625a      	str	r2, [r3, #36]	; 0x24
 800b758:	e007      	b.n	800b76a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3714      	adds	r7, #20
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <__NVIC_SetPriorityGrouping>:
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b788:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <__NVIC_SetPriorityGrouping+0x44>)
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b794:	4013      	ands	r3, r2
 800b796:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b7a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b7a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b7aa:	4a04      	ldr	r2, [pc, #16]	; (800b7bc <__NVIC_SetPriorityGrouping+0x44>)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	60d3      	str	r3, [r2, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	e000ed00 	.word	0xe000ed00

0800b7c0 <__NVIC_GetPriorityGrouping>:
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <__NVIC_GetPriorityGrouping+0x18>)
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	0a1b      	lsrs	r3, r3, #8
 800b7ca:	f003 0307 	and.w	r3, r3, #7
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	e000ed00 	.word	0xe000ed00

0800b7dc <__NVIC_EnableIRQ>:
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	db0b      	blt.n	800b806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	f003 021f 	and.w	r2, r3, #31
 800b7f4:	4907      	ldr	r1, [pc, #28]	; (800b814 <__NVIC_EnableIRQ+0x38>)
 800b7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fa:	095b      	lsrs	r3, r3, #5
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	fa00 f202 	lsl.w	r2, r0, r2
 800b802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	e000e100 	.word	0xe000e100

0800b818 <__NVIC_SetPriority>:
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	db0a      	blt.n	800b842 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	490c      	ldr	r1, [pc, #48]	; (800b864 <__NVIC_SetPriority+0x4c>)
 800b832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b836:	0112      	lsls	r2, r2, #4
 800b838:	b2d2      	uxtb	r2, r2
 800b83a:	440b      	add	r3, r1
 800b83c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b840:	e00a      	b.n	800b858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	b2da      	uxtb	r2, r3
 800b846:	4908      	ldr	r1, [pc, #32]	; (800b868 <__NVIC_SetPriority+0x50>)
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	3b04      	subs	r3, #4
 800b850:	0112      	lsls	r2, r2, #4
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	440b      	add	r3, r1
 800b856:	761a      	strb	r2, [r3, #24]
}
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	e000e100 	.word	0xe000e100
 800b868:	e000ed00 	.word	0xe000ed00

0800b86c <NVIC_EncodePriority>:
{
 800b86c:	b480      	push	{r7}
 800b86e:	b089      	sub	sp, #36	; 0x24
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	f1c3 0307 	rsb	r3, r3, #7
 800b886:	2b04      	cmp	r3, #4
 800b888:	bf28      	it	cs
 800b88a:	2304      	movcs	r3, #4
 800b88c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	3304      	adds	r3, #4
 800b892:	2b06      	cmp	r3, #6
 800b894:	d902      	bls.n	800b89c <NVIC_EncodePriority+0x30>
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	3b03      	subs	r3, #3
 800b89a:	e000      	b.n	800b89e <NVIC_EncodePriority+0x32>
 800b89c:	2300      	movs	r3, #0
 800b89e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8aa:	43da      	mvns	r2, r3
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	401a      	ands	r2, r3
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8b4:	f04f 31ff 	mov.w	r1, #4294967295
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b8be:	43d9      	mvns	r1, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8c4:	4313      	orrs	r3, r2
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3724      	adds	r7, #36	; 0x24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ff4c 	bl	800b778 <__NVIC_SetPriorityGrouping>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b8fa:	f7ff ff61 	bl	800b7c0 <__NVIC_GetPriorityGrouping>
 800b8fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	6978      	ldr	r0, [r7, #20]
 800b906:	f7ff ffb1 	bl	800b86c <NVIC_EncodePriority>
 800b90a:	4602      	mov	r2, r0
 800b90c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff ff80 	bl	800b818 <__NVIC_SetPriority>
}
 800b918:	bf00      	nop
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b92a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7ff ff54 	bl	800b7dc <__NVIC_EnableIRQ>
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e00e      	b.n	800b96c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	795b      	ldrb	r3, [r3, #5]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d105      	bne.n	800b964 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7fd fa5a 	bl	8008e18 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b980:	f7fe fc54 	bl	800a22c <HAL_GetTick>
 800b984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e099      	b.n	800bac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2202      	movs	r2, #2
 800b994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f022 0201 	bic.w	r2, r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9b0:	e00f      	b.n	800b9d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9b2:	f7fe fc3b 	bl	800a22c <HAL_GetTick>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d908      	bls.n	800b9d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2203      	movs	r2, #3
 800b9ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e078      	b.n	800bac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e8      	bne.n	800b9b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	4b38      	ldr	r3, [pc, #224]	; (800bacc <HAL_DMA_Init+0x158>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b9fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d107      	bne.n	800ba3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba34:	4313      	orrs	r3, r2
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	d117      	bne.n	800ba96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00e      	beq.n	800ba96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fa6f 	bl	800bf5c <DMA_CheckFifoParam>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d008      	beq.n	800ba96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2240      	movs	r2, #64	; 0x40
 800ba88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800ba92:	2301      	movs	r3, #1
 800ba94:	e016      	b.n	800bac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fa26 	bl	800bef0 <DMA_CalcBaseAndBitshift>
 800baa4:	4603      	mov	r3, r0
 800baa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baac:	223f      	movs	r2, #63	; 0x3f
 800baae:	409a      	lsls	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	f010803f 	.word	0xf010803f

0800bad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <HAL_DMA_Start_IT+0x26>
 800baf2:	2302      	movs	r3, #2
 800baf4:	e040      	b.n	800bb78 <HAL_DMA_Start_IT+0xa8>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d12f      	bne.n	800bb6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2202      	movs	r2, #2
 800bb0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	68b9      	ldr	r1, [r7, #8]
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 f9b8 	bl	800be94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb28:	223f      	movs	r2, #63	; 0x3f
 800bb2a:	409a      	lsls	r2, r3
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0216 	orr.w	r2, r2, #22
 800bb3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d007      	beq.n	800bb58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 0208 	orr.w	r2, r2, #8
 800bb56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0201 	orr.w	r2, r2, #1
 800bb66:	601a      	str	r2, [r3, #0]
 800bb68:	e005      	b.n	800bb76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bb72:	2302      	movs	r3, #2
 800bb74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bb76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bb8c:	4b8e      	ldr	r3, [pc, #568]	; (800bdc8 <HAL_DMA_IRQHandler+0x248>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a8e      	ldr	r2, [pc, #568]	; (800bdcc <HAL_DMA_IRQHandler+0x24c>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	0a9b      	lsrs	r3, r3, #10
 800bb98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbaa:	2208      	movs	r2, #8
 800bbac:	409a      	lsls	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01a      	beq.n	800bbec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d013      	beq.n	800bbec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f022 0204 	bic.w	r2, r2, #4
 800bbd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbd8:	2208      	movs	r2, #8
 800bbda:	409a      	lsls	r2, r3
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe4:	f043 0201 	orr.w	r2, r3, #1
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	409a      	lsls	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d012      	beq.n	800bc22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00b      	beq.n	800bc22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc0e:	2201      	movs	r2, #1
 800bc10:	409a      	lsls	r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1a:	f043 0202 	orr.w	r2, r3, #2
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc26:	2204      	movs	r2, #4
 800bc28:	409a      	lsls	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d012      	beq.n	800bc58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc44:	2204      	movs	r2, #4
 800bc46:	409a      	lsls	r2, r3
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc50:	f043 0204 	orr.w	r2, r3, #4
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	409a      	lsls	r2, r3
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4013      	ands	r3, r2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d043      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d03c      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc7a:	2210      	movs	r2, #16
 800bc7c:	409a      	lsls	r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d018      	beq.n	800bcc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d108      	bne.n	800bcb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d024      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
 800bcae:	e01f      	b.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01b      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	4798      	blx	r3
 800bcc0:	e016      	b.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d107      	bne.n	800bce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 0208 	bic.w	r2, r2, #8
 800bcde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcf4:	2220      	movs	r2, #32
 800bcf6:	409a      	lsls	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 808f 	beq.w	800be20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0310 	and.w	r3, r3, #16
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 8087 	beq.w	800be20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd16:	2220      	movs	r2, #32
 800bd18:	409a      	lsls	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d136      	bne.n	800bd98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f022 0216 	bic.w	r2, r2, #22
 800bd38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	695a      	ldr	r2, [r3, #20]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d103      	bne.n	800bd5a <HAL_DMA_IRQHandler+0x1da>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d007      	beq.n	800bd6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0208 	bic.w	r2, r2, #8
 800bd68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd6e:	223f      	movs	r2, #63	; 0x3f
 800bd70:	409a      	lsls	r2, r3
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d07e      	beq.n	800be8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
        }
        return;
 800bd96:	e079      	b.n	800be8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d01d      	beq.n	800bde2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10d      	bne.n	800bdd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d031      	beq.n	800be20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4798      	blx	r3
 800bdc4:	e02c      	b.n	800be20 <HAL_DMA_IRQHandler+0x2a0>
 800bdc6:	bf00      	nop
 800bdc8:	20000010 	.word	0x20000010
 800bdcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d023      	beq.n	800be20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	4798      	blx	r3
 800bde0:	e01e      	b.n	800be20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10f      	bne.n	800be10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 0210 	bic.w	r2, r2, #16
 800bdfe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be24:	2b00      	cmp	r3, #0
 800be26:	d032      	beq.n	800be8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	d022      	beq.n	800be7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2205      	movs	r2, #5
 800be38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0201 	bic.w	r2, r2, #1
 800be4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	3301      	adds	r3, #1
 800be50:	60bb      	str	r3, [r7, #8]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	429a      	cmp	r2, r3
 800be56:	d307      	bcc.n	800be68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 0301 	and.w	r3, r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1f2      	bne.n	800be4c <HAL_DMA_IRQHandler+0x2cc>
 800be66:	e000      	b.n	800be6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800be68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d005      	beq.n	800be8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	4798      	blx	r3
 800be8a:	e000      	b.n	800be8e <HAL_DMA_IRQHandler+0x30e>
        return;
 800be8c:	bf00      	nop
    }
  }
}
 800be8e:	3718      	adds	r7, #24
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800beb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	2b40      	cmp	r3, #64	; 0x40
 800bec0:	d108      	bne.n	800bed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bed2:	e007      	b.n	800bee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	60da      	str	r2, [r3, #12]
}
 800bee4:	bf00      	nop
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	3b10      	subs	r3, #16
 800bf00:	4a14      	ldr	r2, [pc, #80]	; (800bf54 <DMA_CalcBaseAndBitshift+0x64>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	091b      	lsrs	r3, r3, #4
 800bf08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bf0a:	4a13      	ldr	r2, [pc, #76]	; (800bf58 <DMA_CalcBaseAndBitshift+0x68>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b03      	cmp	r3, #3
 800bf1c:	d909      	bls.n	800bf32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	1d1a      	adds	r2, r3, #4
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	659a      	str	r2, [r3, #88]	; 0x58
 800bf30:	e007      	b.n	800bf42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf3a:	f023 0303 	bic.w	r3, r3, #3
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
 800bf52:	bf00      	nop
 800bf54:	aaaaaaab 	.word	0xaaaaaaab
 800bf58:	080182cc 	.word	0x080182cc

0800bf5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf64:	2300      	movs	r3, #0
 800bf66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d11f      	bne.n	800bfb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d856      	bhi.n	800c02a <DMA_CheckFifoParam+0xce>
 800bf7c:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <DMA_CheckFifoParam+0x28>)
 800bf7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf82:	bf00      	nop
 800bf84:	0800bf95 	.word	0x0800bf95
 800bf88:	0800bfa7 	.word	0x0800bfa7
 800bf8c:	0800bf95 	.word	0x0800bf95
 800bf90:	0800c02b 	.word	0x0800c02b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d046      	beq.n	800c02e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfa4:	e043      	b.n	800c02e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bfae:	d140      	bne.n	800c032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bfb4:	e03d      	b.n	800c032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfbe:	d121      	bne.n	800c004 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d837      	bhi.n	800c036 <DMA_CheckFifoParam+0xda>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <DMA_CheckFifoParam+0x70>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800bfe3 	.word	0x0800bfe3
 800bfd4:	0800bfdd 	.word	0x0800bfdd
 800bfd8:	0800bff5 	.word	0x0800bff5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe0:	e030      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d025      	beq.n	800c03a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bff2:	e022      	b.n	800c03a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bffc:	d11f      	bne.n	800c03e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bffe:	2301      	movs	r3, #1
 800c000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c002:	e01c      	b.n	800c03e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d903      	bls.n	800c012 <DMA_CheckFifoParam+0xb6>
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d003      	beq.n	800c018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c010:	e018      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	73fb      	strb	r3, [r7, #15]
      break;
 800c016:	e015      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00e      	beq.n	800c042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	73fb      	strb	r3, [r7, #15]
      break;
 800c028:	e00b      	b.n	800c042 <DMA_CheckFifoParam+0xe6>
      break;
 800c02a:	bf00      	nop
 800c02c:	e00a      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c02e:	bf00      	nop
 800c030:	e008      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c032:	bf00      	nop
 800c034:	e006      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c036:	bf00      	nop
 800c038:	e004      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c03a:	bf00      	nop
 800c03c:	e002      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;   
 800c03e:	bf00      	nop
 800c040:	e000      	b.n	800c044 <DMA_CheckFifoParam+0xe8>
      break;
 800c042:	bf00      	nop
    }
  } 
  
  return status; 
 800c044:	7bfb      	ldrb	r3, [r7, #15]
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop

0800c054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c054:	b480      	push	{r7}
 800c056:	b089      	sub	sp, #36	; 0x24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c05e:	2300      	movs	r3, #0
 800c060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c066:	2300      	movs	r3, #0
 800c068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c06a:	2300      	movs	r3, #0
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	e16b      	b.n	800c348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c070:	2201      	movs	r2, #1
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	fa02 f303 	lsl.w	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	697a      	ldr	r2, [r7, #20]
 800c080:	4013      	ands	r3, r2
 800c082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	f040 815a 	bne.w	800c342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f003 0303 	and.w	r3, r3, #3
 800c096:	2b01      	cmp	r3, #1
 800c098:	d005      	beq.n	800c0a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d130      	bne.n	800c108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b6:	43db      	mvns	r3, r3
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c0dc:	2201      	movs	r2, #1
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e4:	43db      	mvns	r3, r3
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	091b      	lsrs	r3, r3, #4
 800c0f2:	f003 0201 	and.w	r2, r3, #1
 800c0f6:	69fb      	ldr	r3, [r7, #28]
 800c0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f003 0303 	and.w	r3, r3, #3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d017      	beq.n	800c144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	2203      	movs	r2, #3
 800c120:	fa02 f303 	lsl.w	r3, r2, r3
 800c124:	43db      	mvns	r3, r3
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	4013      	ands	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	689a      	ldr	r2, [r3, #8]
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	fa02 f303 	lsl.w	r3, r2, r3
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	69ba      	ldr	r2, [r7, #24]
 800c142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d123      	bne.n	800c198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	08da      	lsrs	r2, r3, #3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3208      	adds	r2, #8
 800c158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	f003 0307 	and.w	r3, r3, #7
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	220f      	movs	r2, #15
 800c168:	fa02 f303 	lsl.w	r3, r2, r3
 800c16c:	43db      	mvns	r3, r3
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	4013      	ands	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	691a      	ldr	r2, [r3, #16]
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f003 0307 	and.w	r3, r3, #7
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	fa02 f303 	lsl.w	r3, r2, r3
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	4313      	orrs	r3, r2
 800c188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	08da      	lsrs	r2, r3, #3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	3208      	adds	r2, #8
 800c192:	69b9      	ldr	r1, [r7, #24]
 800c194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	2203      	movs	r2, #3
 800c1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a8:	43db      	mvns	r3, r3
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f003 0203 	and.w	r2, r3, #3
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c0:	69ba      	ldr	r2, [r7, #24]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	69ba      	ldr	r2, [r7, #24]
 800c1ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80b4 	beq.w	800c342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	4b60      	ldr	r3, [pc, #384]	; (800c360 <HAL_GPIO_Init+0x30c>)
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e2:	4a5f      	ldr	r2, [pc, #380]	; (800c360 <HAL_GPIO_Init+0x30c>)
 800c1e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1e8:	6453      	str	r3, [r2, #68]	; 0x44
 800c1ea:	4b5d      	ldr	r3, [pc, #372]	; (800c360 <HAL_GPIO_Init+0x30c>)
 800c1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c1f6:	4a5b      	ldr	r2, [pc, #364]	; (800c364 <HAL_GPIO_Init+0x310>)
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	089b      	lsrs	r3, r3, #2
 800c1fc:	3302      	adds	r3, #2
 800c1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	220f      	movs	r2, #15
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	43db      	mvns	r3, r3
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	4013      	ands	r3, r2
 800c218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a52      	ldr	r2, [pc, #328]	; (800c368 <HAL_GPIO_Init+0x314>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d02b      	beq.n	800c27a <HAL_GPIO_Init+0x226>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a51      	ldr	r2, [pc, #324]	; (800c36c <HAL_GPIO_Init+0x318>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d025      	beq.n	800c276 <HAL_GPIO_Init+0x222>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a50      	ldr	r2, [pc, #320]	; (800c370 <HAL_GPIO_Init+0x31c>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d01f      	beq.n	800c272 <HAL_GPIO_Init+0x21e>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a4f      	ldr	r2, [pc, #316]	; (800c374 <HAL_GPIO_Init+0x320>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d019      	beq.n	800c26e <HAL_GPIO_Init+0x21a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a4e      	ldr	r2, [pc, #312]	; (800c378 <HAL_GPIO_Init+0x324>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d013      	beq.n	800c26a <HAL_GPIO_Init+0x216>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a4d      	ldr	r2, [pc, #308]	; (800c37c <HAL_GPIO_Init+0x328>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d00d      	beq.n	800c266 <HAL_GPIO_Init+0x212>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a4c      	ldr	r2, [pc, #304]	; (800c380 <HAL_GPIO_Init+0x32c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d007      	beq.n	800c262 <HAL_GPIO_Init+0x20e>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a4b      	ldr	r2, [pc, #300]	; (800c384 <HAL_GPIO_Init+0x330>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d101      	bne.n	800c25e <HAL_GPIO_Init+0x20a>
 800c25a:	2307      	movs	r3, #7
 800c25c:	e00e      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c25e:	2308      	movs	r3, #8
 800c260:	e00c      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c262:	2306      	movs	r3, #6
 800c264:	e00a      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c266:	2305      	movs	r3, #5
 800c268:	e008      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c26a:	2304      	movs	r3, #4
 800c26c:	e006      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c26e:	2303      	movs	r3, #3
 800c270:	e004      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c272:	2302      	movs	r3, #2
 800c274:	e002      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c276:	2301      	movs	r3, #1
 800c278:	e000      	b.n	800c27c <HAL_GPIO_Init+0x228>
 800c27a:	2300      	movs	r3, #0
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	f002 0203 	and.w	r2, r2, #3
 800c282:	0092      	lsls	r2, r2, #2
 800c284:	4093      	lsls	r3, r2
 800c286:	69ba      	ldr	r2, [r7, #24]
 800c288:	4313      	orrs	r3, r2
 800c28a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c28c:	4935      	ldr	r1, [pc, #212]	; (800c364 <HAL_GPIO_Init+0x310>)
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	089b      	lsrs	r3, r3, #2
 800c292:	3302      	adds	r3, #2
 800c294:	69ba      	ldr	r2, [r7, #24]
 800c296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c29a:	4b3b      	ldr	r3, [pc, #236]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	43db      	mvns	r3, r3
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c2be:	4a32      	ldr	r2, [pc, #200]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c2c4:	4b30      	ldr	r3, [pc, #192]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	43db      	mvns	r3, r3
 800c2ce:	69ba      	ldr	r2, [r7, #24]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d003      	beq.n	800c2e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c2e0:	69ba      	ldr	r2, [r7, #24]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c2e8:	4a27      	ldr	r2, [pc, #156]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c2ee:	4b26      	ldr	r3, [pc, #152]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d003      	beq.n	800c312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c30a:	69ba      	ldr	r2, [r7, #24]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	4313      	orrs	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c312:	4a1d      	ldr	r2, [pc, #116]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c318:	4b1b      	ldr	r3, [pc, #108]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	43db      	mvns	r3, r3
 800c322:	69ba      	ldr	r2, [r7, #24]
 800c324:	4013      	ands	r3, r2
 800c326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c33c:	4a12      	ldr	r2, [pc, #72]	; (800c388 <HAL_GPIO_Init+0x334>)
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	3301      	adds	r3, #1
 800c346:	61fb      	str	r3, [r7, #28]
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	2b0f      	cmp	r3, #15
 800c34c:	f67f ae90 	bls.w	800c070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	3724      	adds	r7, #36	; 0x24
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40023800 	.word	0x40023800
 800c364:	40013800 	.word	0x40013800
 800c368:	40020000 	.word	0x40020000
 800c36c:	40020400 	.word	0x40020400
 800c370:	40020800 	.word	0x40020800
 800c374:	40020c00 	.word	0x40020c00
 800c378:	40021000 	.word	0x40021000
 800c37c:	40021400 	.word	0x40021400
 800c380:	40021800 	.word	0x40021800
 800c384:	40021c00 	.word	0x40021c00
 800c388:	40013c00 	.word	0x40013c00

0800c38c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	460b      	mov	r3, r1
 800c396:	807b      	strh	r3, [r7, #2]
 800c398:	4613      	mov	r3, r2
 800c39a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c39c:	787b      	ldrb	r3, [r7, #1]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c3a2:	887a      	ldrh	r2, [r7, #2]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c3a8:	e003      	b.n	800c3b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c3aa:	887b      	ldrh	r3, [r7, #2]
 800c3ac:	041a      	lsls	r2, r3, #16
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	619a      	str	r2, [r3, #24]
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
	...

0800c3c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c3ca:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c3cc:	695a      	ldr	r2, [r3, #20]
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d006      	beq.n	800c3e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c3d6:	4a05      	ldr	r2, [pc, #20]	; (800c3ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c3d8:	88fb      	ldrh	r3, [r7, #6]
 800c3da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c3dc:	88fb      	ldrh	r3, [r7, #6]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f002 fa73 	bl	800e8ca <HAL_GPIO_EXTI_Callback>
  }
}
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	40013c00 	.word	0x40013c00

0800c3f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e12b      	b.n	800c65a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7fc fec4 	bl	80091a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2224      	movs	r2, #36	; 0x24
 800c420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0201 	bic.w	r2, r2, #1
 800c432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c454:	f000 fd7e 	bl	800cf54 <HAL_RCC_GetPCLK1Freq>
 800c458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	4a81      	ldr	r2, [pc, #516]	; (800c664 <HAL_I2C_Init+0x274>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d807      	bhi.n	800c474 <HAL_I2C_Init+0x84>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4a80      	ldr	r2, [pc, #512]	; (800c668 <HAL_I2C_Init+0x278>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	bf94      	ite	ls
 800c46c:	2301      	movls	r3, #1
 800c46e:	2300      	movhi	r3, #0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	e006      	b.n	800c482 <HAL_I2C_Init+0x92>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4a7d      	ldr	r2, [pc, #500]	; (800c66c <HAL_I2C_Init+0x27c>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	bf94      	ite	ls
 800c47c:	2301      	movls	r3, #1
 800c47e:	2300      	movhi	r3, #0
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	e0e7      	b.n	800c65a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	4a78      	ldr	r2, [pc, #480]	; (800c670 <HAL_I2C_Init+0x280>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	0c9b      	lsrs	r3, r3, #18
 800c494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	4a6a      	ldr	r2, [pc, #424]	; (800c664 <HAL_I2C_Init+0x274>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d802      	bhi.n	800c4c4 <HAL_I2C_Init+0xd4>
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	e009      	b.n	800c4d8 <HAL_I2C_Init+0xe8>
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c4ca:	fb02 f303 	mul.w	r3, r2, r3
 800c4ce:	4a69      	ldr	r2, [pc, #420]	; (800c674 <HAL_I2C_Init+0x284>)
 800c4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d4:	099b      	lsrs	r3, r3, #6
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6812      	ldr	r2, [r2, #0]
 800c4dc:	430b      	orrs	r3, r1
 800c4de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	69db      	ldr	r3, [r3, #28]
 800c4e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c4ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	495c      	ldr	r1, [pc, #368]	; (800c664 <HAL_I2C_Init+0x274>)
 800c4f4:	428b      	cmp	r3, r1
 800c4f6:	d819      	bhi.n	800c52c <HAL_I2C_Init+0x13c>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	1e59      	subs	r1, r3, #1
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	fbb1 f3f3 	udiv	r3, r1, r3
 800c506:	1c59      	adds	r1, r3, #1
 800c508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c50c:	400b      	ands	r3, r1
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <HAL_I2C_Init+0x138>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1e59      	subs	r1, r3, #1
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c520:	3301      	adds	r3, #1
 800c522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c526:	e051      	b.n	800c5cc <HAL_I2C_Init+0x1dc>
 800c528:	2304      	movs	r3, #4
 800c52a:	e04f      	b.n	800c5cc <HAL_I2C_Init+0x1dc>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d111      	bne.n	800c558 <HAL_I2C_Init+0x168>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	1e58      	subs	r0, r3, #1
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6859      	ldr	r1, [r3, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	440b      	add	r3, r1
 800c542:	fbb0 f3f3 	udiv	r3, r0, r3
 800c546:	3301      	adds	r3, #1
 800c548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bf0c      	ite	eq
 800c550:	2301      	moveq	r3, #1
 800c552:	2300      	movne	r3, #0
 800c554:	b2db      	uxtb	r3, r3
 800c556:	e012      	b.n	800c57e <HAL_I2C_Init+0x18e>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	1e58      	subs	r0, r3, #1
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6859      	ldr	r1, [r3, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	0099      	lsls	r1, r3, #2
 800c568:	440b      	add	r3, r1
 800c56a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c56e:	3301      	adds	r3, #1
 800c570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c574:	2b00      	cmp	r3, #0
 800c576:	bf0c      	ite	eq
 800c578:	2301      	moveq	r3, #1
 800c57a:	2300      	movne	r3, #0
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <HAL_I2C_Init+0x196>
 800c582:	2301      	movs	r3, #1
 800c584:	e022      	b.n	800c5cc <HAL_I2C_Init+0x1dc>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10e      	bne.n	800c5ac <HAL_I2C_Init+0x1bc>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1e58      	subs	r0, r3, #1
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6859      	ldr	r1, [r3, #4]
 800c596:	460b      	mov	r3, r1
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	440b      	add	r3, r1
 800c59c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5aa:	e00f      	b.n	800c5cc <HAL_I2C_Init+0x1dc>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	1e58      	subs	r0, r3, #1
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6859      	ldr	r1, [r3, #4]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	440b      	add	r3, r1
 800c5ba:	0099      	lsls	r1, r3, #2
 800c5bc:	440b      	add	r3, r1
 800c5be:	fbb0 f3f3 	udiv	r3, r0, r3
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	6809      	ldr	r1, [r1, #0]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	69da      	ldr	r2, [r3, #28]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a1b      	ldr	r3, [r3, #32]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c5fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	6911      	ldr	r1, [r2, #16]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	68d2      	ldr	r2, [r2, #12]
 800c606:	4311      	orrs	r1, r2
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	430b      	orrs	r3, r1
 800c60e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	695a      	ldr	r2, [r3, #20]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	431a      	orrs	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	430a      	orrs	r2, r1
 800c62a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f042 0201 	orr.w	r2, r2, #1
 800c63a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2220      	movs	r2, #32
 800c646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	000186a0 	.word	0x000186a0
 800c668:	001e847f 	.word	0x001e847f
 800c66c:	003d08ff 	.word	0x003d08ff
 800c670:	431bde83 	.word	0x431bde83
 800c674:	10624dd3 	.word	0x10624dd3

0800c678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e267      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f003 0301 	and.w	r3, r3, #1
 800c692:	2b00      	cmp	r3, #0
 800c694:	d075      	beq.n	800c782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c696:	4b88      	ldr	r3, [pc, #544]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	f003 030c 	and.w	r3, r3, #12
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d00c      	beq.n	800c6bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6a2:	4b85      	ldr	r3, [pc, #532]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c6aa:	2b08      	cmp	r3, #8
 800c6ac:	d112      	bne.n	800c6d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6ae:	4b82      	ldr	r3, [pc, #520]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6ba:	d10b      	bne.n	800c6d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6bc:	4b7e      	ldr	r3, [pc, #504]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d05b      	beq.n	800c780 <HAL_RCC_OscConfig+0x108>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d157      	bne.n	800c780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e242      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6dc:	d106      	bne.n	800c6ec <HAL_RCC_OscConfig+0x74>
 800c6de:	4b76      	ldr	r3, [pc, #472]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a75      	ldr	r2, [pc, #468]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6e8:	6013      	str	r3, [r2, #0]
 800c6ea:	e01d      	b.n	800c728 <HAL_RCC_OscConfig+0xb0>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6f4:	d10c      	bne.n	800c710 <HAL_RCC_OscConfig+0x98>
 800c6f6:	4b70      	ldr	r3, [pc, #448]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a6f      	ldr	r2, [pc, #444]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c6fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c700:	6013      	str	r3, [r2, #0]
 800c702:	4b6d      	ldr	r3, [pc, #436]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a6c      	ldr	r2, [pc, #432]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	e00b      	b.n	800c728 <HAL_RCC_OscConfig+0xb0>
 800c710:	4b69      	ldr	r3, [pc, #420]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a68      	ldr	r2, [pc, #416]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c71a:	6013      	str	r3, [r2, #0]
 800c71c:	4b66      	ldr	r3, [pc, #408]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a65      	ldr	r2, [pc, #404]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d013      	beq.n	800c758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c730:	f7fd fd7c 	bl	800a22c <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c738:	f7fd fd78 	bl	800a22c <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b64      	cmp	r3, #100	; 0x64
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e207      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c74a:	4b5b      	ldr	r3, [pc, #364]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f0      	beq.n	800c738 <HAL_RCC_OscConfig+0xc0>
 800c756:	e014      	b.n	800c782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c758:	f7fd fd68 	bl	800a22c <HAL_GetTick>
 800c75c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c75e:	e008      	b.n	800c772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c760:	f7fd fd64 	bl	800a22c <HAL_GetTick>
 800c764:	4602      	mov	r2, r0
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	2b64      	cmp	r3, #100	; 0x64
 800c76c:	d901      	bls.n	800c772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c76e:	2303      	movs	r3, #3
 800c770:	e1f3      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c772:	4b51      	ldr	r3, [pc, #324]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1f0      	bne.n	800c760 <HAL_RCC_OscConfig+0xe8>
 800c77e:	e000      	b.n	800c782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f003 0302 	and.w	r3, r3, #2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d063      	beq.n	800c856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c78e:	4b4a      	ldr	r3, [pc, #296]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f003 030c 	and.w	r3, r3, #12
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00b      	beq.n	800c7b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c79a:	4b47      	ldr	r3, [pc, #284]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c7a2:	2b08      	cmp	r3, #8
 800c7a4:	d11c      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7a6:	4b44      	ldr	r3, [pc, #272]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d116      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7b2:	4b41      	ldr	r3, [pc, #260]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0302 	and.w	r3, r3, #2
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d005      	beq.n	800c7ca <HAL_RCC_OscConfig+0x152>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d001      	beq.n	800c7ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e1c7      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7ca:	4b3b      	ldr	r3, [pc, #236]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	4937      	ldr	r1, [pc, #220]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7de:	e03a      	b.n	800c856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d020      	beq.n	800c82a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7e8:	4b34      	ldr	r3, [pc, #208]	; (800c8bc <HAL_RCC_OscConfig+0x244>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ee:	f7fd fd1d 	bl	800a22c <HAL_GetTick>
 800c7f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7f4:	e008      	b.n	800c808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7f6:	f7fd fd19 	bl	800a22c <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	2b02      	cmp	r3, #2
 800c802:	d901      	bls.n	800c808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e1a8      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c808:	4b2b      	ldr	r3, [pc, #172]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f003 0302 	and.w	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0f0      	beq.n	800c7f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c814:	4b28      	ldr	r3, [pc, #160]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	4925      	ldr	r1, [pc, #148]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c824:	4313      	orrs	r3, r2
 800c826:	600b      	str	r3, [r1, #0]
 800c828:	e015      	b.n	800c856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c82a:	4b24      	ldr	r3, [pc, #144]	; (800c8bc <HAL_RCC_OscConfig+0x244>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c830:	f7fd fcfc 	bl	800a22c <HAL_GetTick>
 800c834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c836:	e008      	b.n	800c84a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c838:	f7fd fcf8 	bl	800a22c <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b02      	cmp	r3, #2
 800c844:	d901      	bls.n	800c84a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e187      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c84a:	4b1b      	ldr	r3, [pc, #108]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0302 	and.w	r3, r3, #2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1f0      	bne.n	800c838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0308 	and.w	r3, r3, #8
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d036      	beq.n	800c8d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d016      	beq.n	800c898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c86a:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <HAL_RCC_OscConfig+0x248>)
 800c86c:	2201      	movs	r2, #1
 800c86e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c870:	f7fd fcdc 	bl	800a22c <HAL_GetTick>
 800c874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c876:	e008      	b.n	800c88a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c878:	f7fd fcd8 	bl	800a22c <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b02      	cmp	r3, #2
 800c884:	d901      	bls.n	800c88a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e167      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c88a:	4b0b      	ldr	r3, [pc, #44]	; (800c8b8 <HAL_RCC_OscConfig+0x240>)
 800c88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0f0      	beq.n	800c878 <HAL_RCC_OscConfig+0x200>
 800c896:	e01b      	b.n	800c8d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c898:	4b09      	ldr	r3, [pc, #36]	; (800c8c0 <HAL_RCC_OscConfig+0x248>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c89e:	f7fd fcc5 	bl	800a22c <HAL_GetTick>
 800c8a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8a4:	e00e      	b.n	800c8c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8a6:	f7fd fcc1 	bl	800a22c <HAL_GetTick>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d907      	bls.n	800c8c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e150      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
 800c8b8:	40023800 	.word	0x40023800
 800c8bc:	42470000 	.word	0x42470000
 800c8c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8c4:	4b88      	ldr	r3, [pc, #544]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1ea      	bne.n	800c8a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 8097 	beq.w	800ca0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8e2:	4b81      	ldr	r3, [pc, #516]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10f      	bne.n	800c90e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60bb      	str	r3, [r7, #8]
 800c8f2:	4b7d      	ldr	r3, [pc, #500]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f6:	4a7c      	ldr	r2, [pc, #496]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c8f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c8fe:	4b7a      	ldr	r3, [pc, #488]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c906:	60bb      	str	r3, [r7, #8]
 800c908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c90a:	2301      	movs	r3, #1
 800c90c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c90e:	4b77      	ldr	r3, [pc, #476]	; (800caec <HAL_RCC_OscConfig+0x474>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c916:	2b00      	cmp	r3, #0
 800c918:	d118      	bne.n	800c94c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c91a:	4b74      	ldr	r3, [pc, #464]	; (800caec <HAL_RCC_OscConfig+0x474>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a73      	ldr	r2, [pc, #460]	; (800caec <HAL_RCC_OscConfig+0x474>)
 800c920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c926:	f7fd fc81 	bl	800a22c <HAL_GetTick>
 800c92a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c92c:	e008      	b.n	800c940 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c92e:	f7fd fc7d 	bl	800a22c <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d901      	bls.n	800c940 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e10c      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c940:	4b6a      	ldr	r3, [pc, #424]	; (800caec <HAL_RCC_OscConfig+0x474>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0f0      	beq.n	800c92e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d106      	bne.n	800c962 <HAL_RCC_OscConfig+0x2ea>
 800c954:	4b64      	ldr	r3, [pc, #400]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c958:	4a63      	ldr	r2, [pc, #396]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c95a:	f043 0301 	orr.w	r3, r3, #1
 800c95e:	6713      	str	r3, [r2, #112]	; 0x70
 800c960:	e01c      	b.n	800c99c <HAL_RCC_OscConfig+0x324>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	2b05      	cmp	r3, #5
 800c968:	d10c      	bne.n	800c984 <HAL_RCC_OscConfig+0x30c>
 800c96a:	4b5f      	ldr	r3, [pc, #380]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c96e:	4a5e      	ldr	r2, [pc, #376]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c970:	f043 0304 	orr.w	r3, r3, #4
 800c974:	6713      	str	r3, [r2, #112]	; 0x70
 800c976:	4b5c      	ldr	r3, [pc, #368]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97a:	4a5b      	ldr	r2, [pc, #364]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c97c:	f043 0301 	orr.w	r3, r3, #1
 800c980:	6713      	str	r3, [r2, #112]	; 0x70
 800c982:	e00b      	b.n	800c99c <HAL_RCC_OscConfig+0x324>
 800c984:	4b58      	ldr	r3, [pc, #352]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c988:	4a57      	ldr	r2, [pc, #348]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	6713      	str	r3, [r2, #112]	; 0x70
 800c990:	4b55      	ldr	r3, [pc, #340]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c994:	4a54      	ldr	r2, [pc, #336]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c996:	f023 0304 	bic.w	r3, r3, #4
 800c99a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d015      	beq.n	800c9d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9a4:	f7fd fc42 	bl	800a22c <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9aa:	e00a      	b.n	800c9c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9ac:	f7fd fc3e 	bl	800a22c <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d901      	bls.n	800c9c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e0cb      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9c2:	4b49      	ldr	r3, [pc, #292]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	f003 0302 	and.w	r3, r3, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0ee      	beq.n	800c9ac <HAL_RCC_OscConfig+0x334>
 800c9ce:	e014      	b.n	800c9fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9d0:	f7fd fc2c 	bl	800a22c <HAL_GetTick>
 800c9d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9d6:	e00a      	b.n	800c9ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9d8:	f7fd fc28 	bl	800a22c <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d901      	bls.n	800c9ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e0b5      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9ee:	4b3e      	ldr	r3, [pc, #248]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800c9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f2:	f003 0302 	and.w	r3, r3, #2
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1ee      	bne.n	800c9d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d105      	bne.n	800ca0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca00:	4b39      	ldr	r3, [pc, #228]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800ca02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca04:	4a38      	ldr	r2, [pc, #224]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800ca06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 80a1 	beq.w	800cb58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca16:	4b34      	ldr	r3, [pc, #208]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f003 030c 	and.w	r3, r3, #12
 800ca1e:	2b08      	cmp	r3, #8
 800ca20:	d05c      	beq.n	800cadc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d141      	bne.n	800caae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca2a:	4b31      	ldr	r3, [pc, #196]	; (800caf0 <HAL_RCC_OscConfig+0x478>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca30:	f7fd fbfc 	bl	800a22c <HAL_GetTick>
 800ca34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca36:	e008      	b.n	800ca4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca38:	f7fd fbf8 	bl	800a22c <HAL_GetTick>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d901      	bls.n	800ca4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e087      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca4a:	4b27      	ldr	r3, [pc, #156]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1f0      	bne.n	800ca38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	69da      	ldr	r2, [r3, #28]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	431a      	orrs	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	019b      	lsls	r3, r3, #6
 800ca66:	431a      	orrs	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6c:	085b      	lsrs	r3, r3, #1
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	041b      	lsls	r3, r3, #16
 800ca72:	431a      	orrs	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	061b      	lsls	r3, r3, #24
 800ca7a:	491b      	ldr	r1, [pc, #108]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca80:	4b1b      	ldr	r3, [pc, #108]	; (800caf0 <HAL_RCC_OscConfig+0x478>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca86:	f7fd fbd1 	bl	800a22c <HAL_GetTick>
 800ca8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca8c:	e008      	b.n	800caa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca8e:	f7fd fbcd 	bl	800a22c <HAL_GetTick>
 800ca92:	4602      	mov	r2, r0
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	1ad3      	subs	r3, r2, r3
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d901      	bls.n	800caa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e05c      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caa0:	4b11      	ldr	r3, [pc, #68]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0f0      	beq.n	800ca8e <HAL_RCC_OscConfig+0x416>
 800caac:	e054      	b.n	800cb58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caae:	4b10      	ldr	r3, [pc, #64]	; (800caf0 <HAL_RCC_OscConfig+0x478>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cab4:	f7fd fbba 	bl	800a22c <HAL_GetTick>
 800cab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800caba:	e008      	b.n	800cace <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cabc:	f7fd fbb6 	bl	800a22c <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d901      	bls.n	800cace <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e045      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cace:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <HAL_RCC_OscConfig+0x470>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f0      	bne.n	800cabc <HAL_RCC_OscConfig+0x444>
 800cada:	e03d      	b.n	800cb58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d107      	bne.n	800caf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e038      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
 800cae8:	40023800 	.word	0x40023800
 800caec:	40007000 	.word	0x40007000
 800caf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800caf4:	4b1b      	ldr	r3, [pc, #108]	; (800cb64 <HAL_RCC_OscConfig+0x4ec>)
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d028      	beq.n	800cb54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d121      	bne.n	800cb54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d11a      	bne.n	800cb54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cb24:	4013      	ands	r3, r2
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cb2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d111      	bne.n	800cb54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3a:	085b      	lsrs	r3, r3, #1
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d107      	bne.n	800cb54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d001      	beq.n	800cb58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cb54:	2301      	movs	r3, #1
 800cb56:	e000      	b.n	800cb5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	40023800 	.word	0x40023800

0800cb68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e0cc      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb7c:	4b68      	ldr	r3, [pc, #416]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0307 	and.w	r3, r3, #7
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d90c      	bls.n	800cba4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb8a:	4b65      	ldr	r3, [pc, #404]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cb8c:	683a      	ldr	r2, [r7, #0]
 800cb8e:	b2d2      	uxtb	r2, r2
 800cb90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb92:	4b63      	ldr	r3, [pc, #396]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0307 	and.w	r3, r3, #7
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d001      	beq.n	800cba4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e0b8      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d020      	beq.n	800cbf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cbbc:	4b59      	ldr	r3, [pc, #356]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	4a58      	ldr	r2, [pc, #352]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cbc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f003 0308 	and.w	r3, r3, #8
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cbd4:	4b53      	ldr	r3, [pc, #332]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	4a52      	ldr	r2, [pc, #328]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cbde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbe0:	4b50      	ldr	r3, [pc, #320]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	494d      	ldr	r1, [pc, #308]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d044      	beq.n	800cc88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d107      	bne.n	800cc16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc06:	4b47      	ldr	r3, [pc, #284]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d119      	bne.n	800cc46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e07f      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d003      	beq.n	800cc26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d107      	bne.n	800cc36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc26:	4b3f      	ldr	r3, [pc, #252]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d109      	bne.n	800cc46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e06f      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc36:	4b3b      	ldr	r3, [pc, #236]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 0302 	and.w	r3, r3, #2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d101      	bne.n	800cc46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e067      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc46:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f023 0203 	bic.w	r2, r3, #3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	4934      	ldr	r1, [pc, #208]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc54:	4313      	orrs	r3, r2
 800cc56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc58:	f7fd fae8 	bl	800a22c <HAL_GetTick>
 800cc5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc5e:	e00a      	b.n	800cc76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc60:	f7fd fae4 	bl	800a22c <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e04f      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc76:	4b2b      	ldr	r3, [pc, #172]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f003 020c 	and.w	r2, r3, #12
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d1eb      	bne.n	800cc60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc88:	4b25      	ldr	r3, [pc, #148]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 0307 	and.w	r3, r3, #7
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d20c      	bcs.n	800ccb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc96:	4b22      	ldr	r3, [pc, #136]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	b2d2      	uxtb	r2, r2
 800cc9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc9e:	4b20      	ldr	r3, [pc, #128]	; (800cd20 <HAL_RCC_ClockConfig+0x1b8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d001      	beq.n	800ccb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e032      	b.n	800cd16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d008      	beq.n	800ccce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ccbc:	4b19      	ldr	r3, [pc, #100]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4916      	ldr	r1, [pc, #88]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0308 	and.w	r3, r3, #8
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ccda:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	00db      	lsls	r3, r3, #3
 800cce8:	490e      	ldr	r1, [pc, #56]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800ccea:	4313      	orrs	r3, r2
 800ccec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ccee:	f000 f821 	bl	800cd34 <HAL_RCC_GetSysClockFreq>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <HAL_RCC_ClockConfig+0x1bc>)
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	091b      	lsrs	r3, r3, #4
 800ccfa:	f003 030f 	and.w	r3, r3, #15
 800ccfe:	490a      	ldr	r1, [pc, #40]	; (800cd28 <HAL_RCC_ClockConfig+0x1c0>)
 800cd00:	5ccb      	ldrb	r3, [r1, r3]
 800cd02:	fa22 f303 	lsr.w	r3, r2, r3
 800cd06:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <HAL_RCC_ClockConfig+0x1c4>)
 800cd08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cd0a:	4b09      	ldr	r3, [pc, #36]	; (800cd30 <HAL_RCC_ClockConfig+0x1c8>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fc fc26 	bl	8009560 <HAL_InitTick>

  return HAL_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	40023c00 	.word	0x40023c00
 800cd24:	40023800 	.word	0x40023800
 800cd28:	080182b4 	.word	0x080182b4
 800cd2c:	20000010 	.word	0x20000010
 800cd30:	20000014 	.word	0x20000014

0800cd34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd38:	b094      	sub	sp, #80	; 0x50
 800cd3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	647b      	str	r3, [r7, #68]	; 0x44
 800cd40:	2300      	movs	r3, #0
 800cd42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd44:	2300      	movs	r3, #0
 800cd46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd4c:	4b79      	ldr	r3, [pc, #484]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f003 030c 	and.w	r3, r3, #12
 800cd54:	2b08      	cmp	r3, #8
 800cd56:	d00d      	beq.n	800cd74 <HAL_RCC_GetSysClockFreq+0x40>
 800cd58:	2b08      	cmp	r3, #8
 800cd5a:	f200 80e1 	bhi.w	800cf20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <HAL_RCC_GetSysClockFreq+0x34>
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	d003      	beq.n	800cd6e <HAL_RCC_GetSysClockFreq+0x3a>
 800cd66:	e0db      	b.n	800cf20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd68:	4b73      	ldr	r3, [pc, #460]	; (800cf38 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800cd6c:	e0db      	b.n	800cf26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd6e:	4b72      	ldr	r3, [pc, #456]	; (800cf38 <HAL_RCC_GetSysClockFreq+0x204>)
 800cd70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cd72:	e0d8      	b.n	800cf26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd74:	4b6f      	ldr	r3, [pc, #444]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd7e:	4b6d      	ldr	r3, [pc, #436]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d063      	beq.n	800ce52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd8a:	4b6a      	ldr	r3, [pc, #424]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	099b      	lsrs	r3, r3, #6
 800cd90:	2200      	movs	r2, #0
 800cd92:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd94:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd9c:	633b      	str	r3, [r7, #48]	; 0x30
 800cd9e:	2300      	movs	r3, #0
 800cda0:	637b      	str	r3, [r7, #52]	; 0x34
 800cda2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cda6:	4622      	mov	r2, r4
 800cda8:	462b      	mov	r3, r5
 800cdaa:	f04f 0000 	mov.w	r0, #0
 800cdae:	f04f 0100 	mov.w	r1, #0
 800cdb2:	0159      	lsls	r1, r3, #5
 800cdb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cdb8:	0150      	lsls	r0, r2, #5
 800cdba:	4602      	mov	r2, r0
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	4621      	mov	r1, r4
 800cdc0:	1a51      	subs	r1, r2, r1
 800cdc2:	6139      	str	r1, [r7, #16]
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	eb63 0301 	sbc.w	r3, r3, r1
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cdd8:	4659      	mov	r1, fp
 800cdda:	018b      	lsls	r3, r1, #6
 800cddc:	4651      	mov	r1, sl
 800cdde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cde2:	4651      	mov	r1, sl
 800cde4:	018a      	lsls	r2, r1, #6
 800cde6:	4651      	mov	r1, sl
 800cde8:	ebb2 0801 	subs.w	r8, r2, r1
 800cdec:	4659      	mov	r1, fp
 800cdee:	eb63 0901 	sbc.w	r9, r3, r1
 800cdf2:	f04f 0200 	mov.w	r2, #0
 800cdf6:	f04f 0300 	mov.w	r3, #0
 800cdfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cdfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce06:	4690      	mov	r8, r2
 800ce08:	4699      	mov	r9, r3
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	eb18 0303 	adds.w	r3, r8, r3
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	462b      	mov	r3, r5
 800ce14:	eb49 0303 	adc.w	r3, r9, r3
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	f04f 0200 	mov.w	r2, #0
 800ce1e:	f04f 0300 	mov.w	r3, #0
 800ce22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ce26:	4629      	mov	r1, r5
 800ce28:	028b      	lsls	r3, r1, #10
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ce30:	4621      	mov	r1, r4
 800ce32:	028a      	lsls	r2, r1, #10
 800ce34:	4610      	mov	r0, r2
 800ce36:	4619      	mov	r1, r3
 800ce38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce44:	f7f3 ff20 	bl	8000c88 <__aeabi_uldivmod>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce50:	e058      	b.n	800cf04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce52:	4b38      	ldr	r3, [pc, #224]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	099b      	lsrs	r3, r3, #6
 800ce58:	2200      	movs	r2, #0
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	4611      	mov	r1, r2
 800ce5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ce62:	623b      	str	r3, [r7, #32]
 800ce64:	2300      	movs	r3, #0
 800ce66:	627b      	str	r3, [r7, #36]	; 0x24
 800ce68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ce6c:	4642      	mov	r2, r8
 800ce6e:	464b      	mov	r3, r9
 800ce70:	f04f 0000 	mov.w	r0, #0
 800ce74:	f04f 0100 	mov.w	r1, #0
 800ce78:	0159      	lsls	r1, r3, #5
 800ce7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce7e:	0150      	lsls	r0, r2, #5
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4641      	mov	r1, r8
 800ce86:	ebb2 0a01 	subs.w	sl, r2, r1
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	eb63 0b01 	sbc.w	fp, r3, r1
 800ce90:	f04f 0200 	mov.w	r2, #0
 800ce94:	f04f 0300 	mov.w	r3, #0
 800ce98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ce9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cea0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cea4:	ebb2 040a 	subs.w	r4, r2, sl
 800cea8:	eb63 050b 	sbc.w	r5, r3, fp
 800ceac:	f04f 0200 	mov.w	r2, #0
 800ceb0:	f04f 0300 	mov.w	r3, #0
 800ceb4:	00eb      	lsls	r3, r5, #3
 800ceb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ceba:	00e2      	lsls	r2, r4, #3
 800cebc:	4614      	mov	r4, r2
 800cebe:	461d      	mov	r5, r3
 800cec0:	4643      	mov	r3, r8
 800cec2:	18e3      	adds	r3, r4, r3
 800cec4:	603b      	str	r3, [r7, #0]
 800cec6:	464b      	mov	r3, r9
 800cec8:	eb45 0303 	adc.w	r3, r5, r3
 800cecc:	607b      	str	r3, [r7, #4]
 800cece:	f04f 0200 	mov.w	r2, #0
 800ced2:	f04f 0300 	mov.w	r3, #0
 800ced6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ceda:	4629      	mov	r1, r5
 800cedc:	028b      	lsls	r3, r1, #10
 800cede:	4621      	mov	r1, r4
 800cee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cee4:	4621      	mov	r1, r4
 800cee6:	028a      	lsls	r2, r1, #10
 800cee8:	4610      	mov	r0, r2
 800ceea:	4619      	mov	r1, r3
 800ceec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceee:	2200      	movs	r2, #0
 800cef0:	61bb      	str	r3, [r7, #24]
 800cef2:	61fa      	str	r2, [r7, #28]
 800cef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cef8:	f7f3 fec6 	bl	8000c88 <__aeabi_uldivmod>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	4613      	mov	r3, r2
 800cf02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cf04:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	0c1b      	lsrs	r3, r3, #16
 800cf0a:	f003 0303 	and.w	r3, r3, #3
 800cf0e:	3301      	adds	r3, #1
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cf14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf18:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cf1e:	e002      	b.n	800cf26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <HAL_RCC_GetSysClockFreq+0x204>)
 800cf22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cf24:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cf26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3750      	adds	r7, #80	; 0x50
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf32:	bf00      	nop
 800cf34:	40023800 	.word	0x40023800
 800cf38:	00f42400 	.word	0x00f42400

0800cf3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf40:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf42:	681b      	ldr	r3, [r3, #0]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	20000010 	.word	0x20000010

0800cf54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cf58:	f7ff fff0 	bl	800cf3c <HAL_RCC_GetHCLKFreq>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	0a9b      	lsrs	r3, r3, #10
 800cf64:	f003 0307 	and.w	r3, r3, #7
 800cf68:	4903      	ldr	r1, [pc, #12]	; (800cf78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf6a:	5ccb      	ldrb	r3, [r1, r3]
 800cf6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	40023800 	.word	0x40023800
 800cf78:	080182c4 	.word	0x080182c4

0800cf7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cf80:	f7ff ffdc 	bl	800cf3c <HAL_RCC_GetHCLKFreq>
 800cf84:	4602      	mov	r2, r0
 800cf86:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	0b5b      	lsrs	r3, r3, #13
 800cf8c:	f003 0307 	and.w	r3, r3, #7
 800cf90:	4903      	ldr	r1, [pc, #12]	; (800cfa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf92:	5ccb      	ldrb	r3, [r1, r3]
 800cf94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	40023800 	.word	0x40023800
 800cfa0:	080182c4 	.word	0x080182c4

0800cfa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	220f      	movs	r2, #15
 800cfb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cfb4:	4b12      	ldr	r3, [pc, #72]	; (800d000 <HAL_RCC_GetClockConfig+0x5c>)
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	f003 0203 	and.w	r2, r3, #3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <HAL_RCC_GetClockConfig+0x5c>)
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <HAL_RCC_GetClockConfig+0x5c>)
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cfd8:	4b09      	ldr	r3, [pc, #36]	; (800d000 <HAL_RCC_GetClockConfig+0x5c>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	08db      	lsrs	r3, r3, #3
 800cfde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cfe6:	4b07      	ldr	r3, [pc, #28]	; (800d004 <HAL_RCC_GetClockConfig+0x60>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0207 	and.w	r2, r3, #7
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	601a      	str	r2, [r3, #0]
}
 800cff2:	bf00      	nop
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	40023800 	.word	0x40023800
 800d004:	40023c00 	.word	0x40023c00

0800d008 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e01c      	b.n	800d054 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	795b      	ldrb	r3, [r3, #5]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d105      	bne.n	800d030 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7fc f9cc 	bl	80093c8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f042 0204 	orr.w	r2, r2, #4
 800d044:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800d052:	2300      	movs	r3, #0
}
 800d054:	4618      	mov	r0, r3
 800d056:	3708      	adds	r7, #8
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e07b      	b.n	800d166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d072:	2b00      	cmp	r3, #0
 800d074:	d108      	bne.n	800d088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d07e:	d009      	beq.n	800d094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	61da      	str	r2, [r3, #28]
 800d086:	e005      	b.n	800d094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d106      	bne.n	800d0b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7fc f9e2 	bl	8009478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	f003 0302 	and.w	r3, r3, #2
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	695b      	ldr	r3, [r3, #20]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	699b      	ldr	r3, [r3, #24]
 800d100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d104:	431a      	orrs	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	69db      	ldr	r3, [r3, #28]
 800d10a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d10e:	431a      	orrs	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d118:	ea42 0103 	orr.w	r1, r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	430a      	orrs	r2, r1
 800d12a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	0c1b      	lsrs	r3, r3, #16
 800d132:	f003 0104 	and.w	r1, r3, #4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13a:	f003 0210 	and.w	r2, r3, #16
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	69da      	ldr	r2, [r3, #28]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2200      	movs	r2, #0
 800d15a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e041      	b.n	800d204 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d106      	bne.n	800d19a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7fc fda9 	bl	8009cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2202      	movs	r2, #2
 800d19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	f000 fc57 	bl	800da60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d001      	beq.n	800d224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	e04e      	b.n	800d2c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2202      	movs	r2, #2
 800d228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68da      	ldr	r2, [r3, #12]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f042 0201 	orr.w	r2, r2, #1
 800d23a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a23      	ldr	r2, [pc, #140]	; (800d2d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d022      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d24e:	d01d      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a1f      	ldr	r2, [pc, #124]	; (800d2d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d018      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a1e      	ldr	r2, [pc, #120]	; (800d2d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d013      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a1c      	ldr	r2, [pc, #112]	; (800d2dc <HAL_TIM_Base_Start_IT+0xd0>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d00e      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a1b      	ldr	r2, [pc, #108]	; (800d2e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d009      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a19      	ldr	r2, [pc, #100]	; (800d2e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d004      	beq.n	800d28c <HAL_TIM_Base_Start_IT+0x80>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a18      	ldr	r2, [pc, #96]	; (800d2e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d111      	bne.n	800d2b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b06      	cmp	r3, #6
 800d29c:	d010      	beq.n	800d2c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f042 0201 	orr.w	r2, r2, #1
 800d2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ae:	e007      	b.n	800d2c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0201 	orr.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	40010000 	.word	0x40010000
 800d2d4:	40000400 	.word	0x40000400
 800d2d8:	40000800 	.word	0x40000800
 800d2dc:	40000c00 	.word	0x40000c00
 800d2e0:	40010400 	.word	0x40010400
 800d2e4:	40014000 	.word	0x40014000
 800d2e8:	40001800 	.word	0x40001800

0800d2ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e041      	b.n	800d382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d106      	bne.n	800d318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f839 	bl	800d38a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3304      	adds	r3, #4
 800d328:	4619      	mov	r1, r3
 800d32a:	4610      	mov	r0, r2
 800d32c:	f000 fb98 	bl	800da60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b086      	sub	sp, #24
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d101      	bne.n	800d3b2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e097      	b.n	800d4e2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7fc fd16 	bl	8009df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6812      	ldr	r2, [r2, #0]
 800d3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3e2:	f023 0307 	bic.w	r3, r3, #7
 800d3e6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f000 fb34 	bl	800da60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	4313      	orrs	r3, r2
 800d418:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d420:	f023 0303 	bic.w	r3, r3, #3
 800d424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	689a      	ldr	r2, [r3, #8]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	4313      	orrs	r3, r2
 800d432:	693a      	ldr	r2, [r7, #16]
 800d434:	4313      	orrs	r3, r2
 800d436:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d43e:	f023 030c 	bic.w	r3, r3, #12
 800d442:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d44a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d44e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	68da      	ldr	r2, [r3, #12]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	69db      	ldr	r3, [r3, #28]
 800d458:	021b      	lsls	r3, r3, #8
 800d45a:	4313      	orrs	r3, r2
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	4313      	orrs	r3, r2
 800d460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	011a      	lsls	r2, r3, #4
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	6a1b      	ldr	r3, [r3, #32]
 800d46c:	031b      	lsls	r3, r3, #12
 800d46e:	4313      	orrs	r3, r2
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	4313      	orrs	r3, r2
 800d474:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d47c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d484:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	685a      	ldr	r2, [r3, #4]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	4313      	orrs	r3, r2
 800d492:	68fa      	ldr	r2, [r7, #12]
 800d494:	4313      	orrs	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	693a      	ldr	r2, [r7, #16]
 800d4a6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3718      	adds	r7, #24
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b082      	sub	sp, #8
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	f003 0302 	and.w	r3, r3, #2
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d122      	bne.n	800d546 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d11b      	bne.n	800d546 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f06f 0202 	mvn.w	r2, #2
 800d516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2201      	movs	r2, #1
 800d51c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	f003 0303 	and.w	r3, r3, #3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fa78 	bl	800da22 <HAL_TIM_IC_CaptureCallback>
 800d532:	e005      	b.n	800d540 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fa6a 	bl	800da0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fa7b 	bl	800da36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b04      	cmp	r3, #4
 800d552:	d122      	bne.n	800d59a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	f003 0304 	and.w	r3, r3, #4
 800d55e:	2b04      	cmp	r3, #4
 800d560:	d11b      	bne.n	800d59a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f06f 0204 	mvn.w	r2, #4
 800d56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2202      	movs	r2, #2
 800d570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 fa4e 	bl	800da22 <HAL_TIM_IC_CaptureCallback>
 800d586:	e005      	b.n	800d594 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fa40 	bl	800da0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 fa51 	bl	800da36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d122      	bne.n	800d5ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	f003 0308 	and.w	r3, r3, #8
 800d5b2:	2b08      	cmp	r3, #8
 800d5b4:	d11b      	bne.n	800d5ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f06f 0208 	mvn.w	r2, #8
 800d5be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2204      	movs	r2, #4
 800d5c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	69db      	ldr	r3, [r3, #28]
 800d5cc:	f003 0303 	and.w	r3, r3, #3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d003      	beq.n	800d5dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fa24 	bl	800da22 <HAL_TIM_IC_CaptureCallback>
 800d5da:	e005      	b.n	800d5e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fa16 	bl	800da0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fa27 	bl	800da36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f003 0310 	and.w	r3, r3, #16
 800d5f8:	2b10      	cmp	r3, #16
 800d5fa:	d122      	bne.n	800d642 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	f003 0310 	and.w	r3, r3, #16
 800d606:	2b10      	cmp	r3, #16
 800d608:	d11b      	bne.n	800d642 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f06f 0210 	mvn.w	r2, #16
 800d612:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2208      	movs	r2, #8
 800d618:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	69db      	ldr	r3, [r3, #28]
 800d620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f9fa 	bl	800da22 <HAL_TIM_IC_CaptureCallback>
 800d62e:	e005      	b.n	800d63c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f9ec 	bl	800da0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f9fd 	bl	800da36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	691b      	ldr	r3, [r3, #16]
 800d648:	f003 0301 	and.w	r3, r3, #1
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d10e      	bne.n	800d66e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d107      	bne.n	800d66e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f06f 0201 	mvn.w	r2, #1
 800d666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7fb fe7f 	bl	800936c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d678:	2b80      	cmp	r3, #128	; 0x80
 800d67a:	d10e      	bne.n	800d69a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d686:	2b80      	cmp	r3, #128	; 0x80
 800d688:	d107      	bne.n	800d69a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fd53 	bl	800e140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a4:	2b40      	cmp	r3, #64	; 0x40
 800d6a6:	d10e      	bne.n	800d6c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b2:	2b40      	cmp	r3, #64	; 0x40
 800d6b4:	d107      	bne.n	800d6c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f9c2 	bl	800da4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	f003 0320 	and.w	r3, r3, #32
 800d6d0:	2b20      	cmp	r3, #32
 800d6d2:	d10e      	bne.n	800d6f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	f003 0320 	and.w	r3, r3, #32
 800d6de:	2b20      	cmp	r3, #32
 800d6e0:	d107      	bne.n	800d6f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f06f 0220 	mvn.w	r2, #32
 800d6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fd1d 	bl	800e12c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6f2:	bf00      	nop
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b086      	sub	sp, #24
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d712:	2b01      	cmp	r3, #1
 800d714:	d101      	bne.n	800d71a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d716:	2302      	movs	r3, #2
 800d718:	e0ae      	b.n	800d878 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b0c      	cmp	r3, #12
 800d726:	f200 809f 	bhi.w	800d868 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d72a:	a201      	add	r2, pc, #4	; (adr r2, 800d730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d765 	.word	0x0800d765
 800d734:	0800d869 	.word	0x0800d869
 800d738:	0800d869 	.word	0x0800d869
 800d73c:	0800d869 	.word	0x0800d869
 800d740:	0800d7a5 	.word	0x0800d7a5
 800d744:	0800d869 	.word	0x0800d869
 800d748:	0800d869 	.word	0x0800d869
 800d74c:	0800d869 	.word	0x0800d869
 800d750:	0800d7e7 	.word	0x0800d7e7
 800d754:	0800d869 	.word	0x0800d869
 800d758:	0800d869 	.word	0x0800d869
 800d75c:	0800d869 	.word	0x0800d869
 800d760:	0800d827 	.word	0x0800d827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68b9      	ldr	r1, [r7, #8]
 800d76a:	4618      	mov	r0, r3
 800d76c:	f000 fa18 	bl	800dba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f042 0208 	orr.w	r2, r2, #8
 800d77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	699a      	ldr	r2, [r3, #24]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f022 0204 	bic.w	r2, r2, #4
 800d78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6999      	ldr	r1, [r3, #24]
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	691a      	ldr	r2, [r3, #16]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	619a      	str	r2, [r3, #24]
      break;
 800d7a2:	e064      	b.n	800d86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68b9      	ldr	r1, [r7, #8]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fa68 	bl	800dc80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	699a      	ldr	r2, [r3, #24]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	699a      	ldr	r2, [r3, #24]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6999      	ldr	r1, [r3, #24]
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	691b      	ldr	r3, [r3, #16]
 800d7da:	021a      	lsls	r2, r3, #8
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	619a      	str	r2, [r3, #24]
      break;
 800d7e4:	e043      	b.n	800d86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 fabd 	bl	800dd6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	69da      	ldr	r2, [r3, #28]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f042 0208 	orr.w	r2, r2, #8
 800d800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69da      	ldr	r2, [r3, #28]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 0204 	bic.w	r2, r2, #4
 800d810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	69d9      	ldr	r1, [r3, #28]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	691a      	ldr	r2, [r3, #16]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	430a      	orrs	r2, r1
 800d822:	61da      	str	r2, [r3, #28]
      break;
 800d824:	e023      	b.n	800d86e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68b9      	ldr	r1, [r7, #8]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fb11 	bl	800de54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	69da      	ldr	r2, [r3, #28]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	69da      	ldr	r2, [r3, #28]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	69d9      	ldr	r1, [r3, #28]
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	021a      	lsls	r2, r3, #8
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	430a      	orrs	r2, r1
 800d864:	61da      	str	r2, [r3, #28]
      break;
 800d866:	e002      	b.n	800d86e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	75fb      	strb	r3, [r7, #23]
      break;
 800d86c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d876:	7dfb      	ldrb	r3, [r7, #23]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d894:	2b01      	cmp	r3, #1
 800d896:	d101      	bne.n	800d89c <HAL_TIM_ConfigClockSource+0x1c>
 800d898:	2302      	movs	r3, #2
 800d89a:	e0b4      	b.n	800da06 <HAL_TIM_ConfigClockSource+0x186>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d8ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8d4:	d03e      	beq.n	800d954 <HAL_TIM_ConfigClockSource+0xd4>
 800d8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8da:	f200 8087 	bhi.w	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8e2:	f000 8086 	beq.w	800d9f2 <HAL_TIM_ConfigClockSource+0x172>
 800d8e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8ea:	d87f      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d8ec:	2b70      	cmp	r3, #112	; 0x70
 800d8ee:	d01a      	beq.n	800d926 <HAL_TIM_ConfigClockSource+0xa6>
 800d8f0:	2b70      	cmp	r3, #112	; 0x70
 800d8f2:	d87b      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d8f4:	2b60      	cmp	r3, #96	; 0x60
 800d8f6:	d050      	beq.n	800d99a <HAL_TIM_ConfigClockSource+0x11a>
 800d8f8:	2b60      	cmp	r3, #96	; 0x60
 800d8fa:	d877      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d8fc:	2b50      	cmp	r3, #80	; 0x50
 800d8fe:	d03c      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0xfa>
 800d900:	2b50      	cmp	r3, #80	; 0x50
 800d902:	d873      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d904:	2b40      	cmp	r3, #64	; 0x40
 800d906:	d058      	beq.n	800d9ba <HAL_TIM_ConfigClockSource+0x13a>
 800d908:	2b40      	cmp	r3, #64	; 0x40
 800d90a:	d86f      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d90c:	2b30      	cmp	r3, #48	; 0x30
 800d90e:	d064      	beq.n	800d9da <HAL_TIM_ConfigClockSource+0x15a>
 800d910:	2b30      	cmp	r3, #48	; 0x30
 800d912:	d86b      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d914:	2b20      	cmp	r3, #32
 800d916:	d060      	beq.n	800d9da <HAL_TIM_ConfigClockSource+0x15a>
 800d918:	2b20      	cmp	r3, #32
 800d91a:	d867      	bhi.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d05c      	beq.n	800d9da <HAL_TIM_ConfigClockSource+0x15a>
 800d920:	2b10      	cmp	r3, #16
 800d922:	d05a      	beq.n	800d9da <HAL_TIM_ConfigClockSource+0x15a>
 800d924:	e062      	b.n	800d9ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6818      	ldr	r0, [r3, #0]
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	6899      	ldr	r1, [r3, #8]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	685a      	ldr	r2, [r3, #4]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	f000 fb5d 	bl	800dff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	609a      	str	r2, [r3, #8]
      break;
 800d952:	e04f      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	6899      	ldr	r1, [r3, #8]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685a      	ldr	r2, [r3, #4]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	f000 fb46 	bl	800dff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	689a      	ldr	r2, [r3, #8]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d976:	609a      	str	r2, [r3, #8]
      break;
 800d978:	e03c      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6818      	ldr	r0, [r3, #0]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	6859      	ldr	r1, [r3, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	461a      	mov	r2, r3
 800d988:	f000 faba 	bl	800df00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2150      	movs	r1, #80	; 0x50
 800d992:	4618      	mov	r0, r3
 800d994:	f000 fb13 	bl	800dfbe <TIM_ITRx_SetConfig>
      break;
 800d998:	e02c      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	6859      	ldr	r1, [r3, #4]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f000 fad9 	bl	800df5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2160      	movs	r1, #96	; 0x60
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fb03 	bl	800dfbe <TIM_ITRx_SetConfig>
      break;
 800d9b8:	e01c      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6818      	ldr	r0, [r3, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	6859      	ldr	r1, [r3, #4]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f000 fa9a 	bl	800df00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2140      	movs	r1, #64	; 0x40
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 faf3 	bl	800dfbe <TIM_ITRx_SetConfig>
      break;
 800d9d8:	e00c      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	f000 faea 	bl	800dfbe <TIM_ITRx_SetConfig>
      break;
 800d9ea:	e003      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f0:	e000      	b.n	800d9f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d9f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da22:	b480      	push	{r7}
 800da24:	b083      	sub	sp, #12
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da2a:	bf00      	nop
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da3e:	bf00      	nop
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b083      	sub	sp, #12
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da52:	bf00      	nop
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
	...

0800da60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a40      	ldr	r2, [pc, #256]	; (800db74 <TIM_Base_SetConfig+0x114>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d013      	beq.n	800daa0 <TIM_Base_SetConfig+0x40>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da7e:	d00f      	beq.n	800daa0 <TIM_Base_SetConfig+0x40>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a3d      	ldr	r2, [pc, #244]	; (800db78 <TIM_Base_SetConfig+0x118>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d00b      	beq.n	800daa0 <TIM_Base_SetConfig+0x40>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a3c      	ldr	r2, [pc, #240]	; (800db7c <TIM_Base_SetConfig+0x11c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d007      	beq.n	800daa0 <TIM_Base_SetConfig+0x40>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4a3b      	ldr	r2, [pc, #236]	; (800db80 <TIM_Base_SetConfig+0x120>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d003      	beq.n	800daa0 <TIM_Base_SetConfig+0x40>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	4a3a      	ldr	r2, [pc, #232]	; (800db84 <TIM_Base_SetConfig+0x124>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d108      	bne.n	800dab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	4313      	orrs	r3, r2
 800dab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2f      	ldr	r2, [pc, #188]	; (800db74 <TIM_Base_SetConfig+0x114>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d02b      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac0:	d027      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a2c      	ldr	r2, [pc, #176]	; (800db78 <TIM_Base_SetConfig+0x118>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d023      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a2b      	ldr	r2, [pc, #172]	; (800db7c <TIM_Base_SetConfig+0x11c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d01f      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a2a      	ldr	r2, [pc, #168]	; (800db80 <TIM_Base_SetConfig+0x120>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d01b      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a29      	ldr	r2, [pc, #164]	; (800db84 <TIM_Base_SetConfig+0x124>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d017      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a28      	ldr	r2, [pc, #160]	; (800db88 <TIM_Base_SetConfig+0x128>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d013      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4a27      	ldr	r2, [pc, #156]	; (800db8c <TIM_Base_SetConfig+0x12c>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d00f      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4a26      	ldr	r2, [pc, #152]	; (800db90 <TIM_Base_SetConfig+0x130>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d00b      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4a25      	ldr	r2, [pc, #148]	; (800db94 <TIM_Base_SetConfig+0x134>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d007      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a24      	ldr	r2, [pc, #144]	; (800db98 <TIM_Base_SetConfig+0x138>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d003      	beq.n	800db12 <TIM_Base_SetConfig+0xb2>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a23      	ldr	r2, [pc, #140]	; (800db9c <TIM_Base_SetConfig+0x13c>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d108      	bne.n	800db24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4313      	orrs	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	4313      	orrs	r3, r2
 800db30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	689a      	ldr	r2, [r3, #8]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a0a      	ldr	r2, [pc, #40]	; (800db74 <TIM_Base_SetConfig+0x114>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d003      	beq.n	800db58 <TIM_Base_SetConfig+0xf8>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a0c      	ldr	r2, [pc, #48]	; (800db84 <TIM_Base_SetConfig+0x124>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d103      	bne.n	800db60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	691a      	ldr	r2, [r3, #16]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2201      	movs	r2, #1
 800db64:	615a      	str	r2, [r3, #20]
}
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	40010000 	.word	0x40010000
 800db78:	40000400 	.word	0x40000400
 800db7c:	40000800 	.word	0x40000800
 800db80:	40000c00 	.word	0x40000c00
 800db84:	40010400 	.word	0x40010400
 800db88:	40014000 	.word	0x40014000
 800db8c:	40014400 	.word	0x40014400
 800db90:	40014800 	.word	0x40014800
 800db94:	40001800 	.word	0x40001800
 800db98:	40001c00 	.word	0x40001c00
 800db9c:	40002000 	.word	0x40002000

0800dba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	f023 0201 	bic.w	r2, r3, #1
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0303 	bic.w	r3, r3, #3
 800dbd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f023 0302 	bic.w	r3, r3, #2
 800dbe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a20      	ldr	r2, [pc, #128]	; (800dc78 <TIM_OC1_SetConfig+0xd8>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d003      	beq.n	800dc04 <TIM_OC1_SetConfig+0x64>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a1f      	ldr	r2, [pc, #124]	; (800dc7c <TIM_OC1_SetConfig+0xdc>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d10c      	bne.n	800dc1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f023 0308 	bic.w	r3, r3, #8
 800dc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f023 0304 	bic.w	r3, r3, #4
 800dc1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a15      	ldr	r2, [pc, #84]	; (800dc78 <TIM_OC1_SetConfig+0xd8>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d003      	beq.n	800dc2e <TIM_OC1_SetConfig+0x8e>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a14      	ldr	r2, [pc, #80]	; (800dc7c <TIM_OC1_SetConfig+0xdc>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d111      	bne.n	800dc52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	621a      	str	r2, [r3, #32]
}
 800dc6c:	bf00      	nop
 800dc6e:	371c      	adds	r7, #28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	40010000 	.word	0x40010000
 800dc7c:	40010400 	.word	0x40010400

0800dc80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b087      	sub	sp, #28
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	f023 0210 	bic.w	r2, r3, #16
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a1b      	ldr	r3, [r3, #32]
 800dc9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	699b      	ldr	r3, [r3, #24]
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	021b      	lsls	r3, r3, #8
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	f023 0320 	bic.w	r3, r3, #32
 800dcca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	011b      	lsls	r3, r3, #4
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a22      	ldr	r2, [pc, #136]	; (800dd64 <TIM_OC2_SetConfig+0xe4>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d003      	beq.n	800dce8 <TIM_OC2_SetConfig+0x68>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a21      	ldr	r2, [pc, #132]	; (800dd68 <TIM_OC2_SetConfig+0xe8>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d10d      	bne.n	800dd04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	011b      	lsls	r3, r3, #4
 800dcf6:	697a      	ldr	r2, [r7, #20]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a17      	ldr	r2, [pc, #92]	; (800dd64 <TIM_OC2_SetConfig+0xe4>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d003      	beq.n	800dd14 <TIM_OC2_SetConfig+0x94>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a16      	ldr	r2, [pc, #88]	; (800dd68 <TIM_OC2_SetConfig+0xe8>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d113      	bne.n	800dd3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dd22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	695b      	ldr	r3, [r3, #20]
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	699b      	ldr	r3, [r3, #24]
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	693a      	ldr	r2, [r7, #16]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	693a      	ldr	r2, [r7, #16]
 800dd40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	685a      	ldr	r2, [r3, #4]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	621a      	str	r2, [r3, #32]
}
 800dd56:	bf00      	nop
 800dd58:	371c      	adds	r7, #28
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	40010000 	.word	0x40010000
 800dd68:	40010400 	.word	0x40010400

0800dd6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b087      	sub	sp, #28
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	69db      	ldr	r3, [r3, #28]
 800dd92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f023 0303 	bic.w	r3, r3, #3
 800dda2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a21      	ldr	r2, [pc, #132]	; (800de4c <TIM_OC3_SetConfig+0xe0>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d003      	beq.n	800ddd2 <TIM_OC3_SetConfig+0x66>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a20      	ldr	r2, [pc, #128]	; (800de50 <TIM_OC3_SetConfig+0xe4>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d10d      	bne.n	800ddee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ddd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ddec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a16      	ldr	r2, [pc, #88]	; (800de4c <TIM_OC3_SetConfig+0xe0>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d003      	beq.n	800ddfe <TIM_OC3_SetConfig+0x92>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a15      	ldr	r2, [pc, #84]	; (800de50 <TIM_OC3_SetConfig+0xe4>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d113      	bne.n	800de26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	011b      	lsls	r3, r3, #4
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	4313      	orrs	r3, r2
 800de18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	011b      	lsls	r3, r3, #4
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	4313      	orrs	r3, r2
 800de24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	697a      	ldr	r2, [r7, #20]
 800de3e:	621a      	str	r2, [r3, #32]
}
 800de40:	bf00      	nop
 800de42:	371c      	adds	r7, #28
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	40010000 	.word	0x40010000
 800de50:	40010400 	.word	0x40010400

0800de54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de54:	b480      	push	{r7}
 800de56:	b087      	sub	sp, #28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6a1b      	ldr	r3, [r3, #32]
 800de62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	69db      	ldr	r3, [r3, #28]
 800de7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	021b      	lsls	r3, r3, #8
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	4313      	orrs	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	031b      	lsls	r3, r3, #12
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a12      	ldr	r2, [pc, #72]	; (800def8 <TIM_OC4_SetConfig+0xa4>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d003      	beq.n	800debc <TIM_OC4_SetConfig+0x68>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a11      	ldr	r2, [pc, #68]	; (800defc <TIM_OC4_SetConfig+0xa8>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d109      	bne.n	800ded0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	019b      	lsls	r3, r3, #6
 800deca:	697a      	ldr	r2, [r7, #20]
 800decc:	4313      	orrs	r3, r2
 800dece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	685a      	ldr	r2, [r3, #4]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	621a      	str	r2, [r3, #32]
}
 800deea:	bf00      	nop
 800deec:	371c      	adds	r7, #28
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	40010000 	.word	0x40010000
 800defc:	40010400 	.word	0x40010400

0800df00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df00:	b480      	push	{r7}
 800df02:	b087      	sub	sp, #28
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6a1b      	ldr	r3, [r3, #32]
 800df10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	f023 0201 	bic.w	r2, r3, #1
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	011b      	lsls	r3, r3, #4
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	4313      	orrs	r3, r2
 800df34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	f023 030a 	bic.w	r3, r3, #10
 800df3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	4313      	orrs	r3, r2
 800df44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	621a      	str	r2, [r3, #32]
}
 800df52:	bf00      	nop
 800df54:	371c      	adds	r7, #28
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df5e:	b480      	push	{r7}
 800df60:	b087      	sub	sp, #28
 800df62:	af00      	add	r7, sp, #0
 800df64:	60f8      	str	r0, [r7, #12]
 800df66:	60b9      	str	r1, [r7, #8]
 800df68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	f023 0210 	bic.w	r2, r3, #16
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a1b      	ldr	r3, [r3, #32]
 800df80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	031b      	lsls	r3, r3, #12
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	4313      	orrs	r3, r2
 800df92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	011b      	lsls	r3, r3, #4
 800dfa0:	693a      	ldr	r2, [r7, #16]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	621a      	str	r2, [r3, #32]
}
 800dfb2:	bf00      	nop
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dfbe:	b480      	push	{r7}
 800dfc0:	b085      	sub	sp, #20
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	f043 0307 	orr.w	r3, r3, #7
 800dfe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	609a      	str	r2, [r3, #8]
}
 800dfe8:	bf00      	nop
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b087      	sub	sp, #28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e00e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	021a      	lsls	r2, r3, #8
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	431a      	orrs	r2, r3
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	697a      	ldr	r2, [r7, #20]
 800e01e:	4313      	orrs	r3, r2
 800e020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	697a      	ldr	r2, [r7, #20]
 800e026:	609a      	str	r2, [r3, #8]
}
 800e028:	bf00      	nop
 800e02a:	371c      	adds	r7, #28
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e034:	b480      	push	{r7}
 800e036:	b085      	sub	sp, #20
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e044:	2b01      	cmp	r3, #1
 800e046:	d101      	bne.n	800e04c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e048:	2302      	movs	r3, #2
 800e04a:	e05a      	b.n	800e102 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2202      	movs	r2, #2
 800e058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68fa      	ldr	r2, [r7, #12]
 800e084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4a21      	ldr	r2, [pc, #132]	; (800e110 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d022      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e098:	d01d      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a1d      	ldr	r2, [pc, #116]	; (800e114 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d018      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a1b      	ldr	r2, [pc, #108]	; (800e118 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d013      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4a1a      	ldr	r2, [pc, #104]	; (800e11c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d00e      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a18      	ldr	r2, [pc, #96]	; (800e120 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d009      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a17      	ldr	r2, [pc, #92]	; (800e124 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d004      	beq.n	800e0d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a15      	ldr	r2, [pc, #84]	; (800e128 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d10c      	bne.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e0dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	40010000 	.word	0x40010000
 800e114:	40000400 	.word	0x40000400
 800e118:	40000800 	.word	0x40000800
 800e11c:	40000c00 	.word	0x40000c00
 800e120:	40010400 	.word	0x40010400
 800e124:	40014000 	.word	0x40014000
 800e128:	40001800 	.word	0x40001800

0800e12c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e134:	bf00      	nop
 800e136:	370c      	adds	r7, #12
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d101      	bne.n	800e166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e162:	2301      	movs	r3, #1
 800e164:	e03f      	b.n	800e1e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f7fb ff12 	bl	8009fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2224      	movs	r2, #36	; 0x24
 800e184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68da      	ldr	r2, [r3, #12]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f829 	bl	800e1f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	691a      	ldr	r2, [r3, #16]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	695a      	ldr	r2, [r3, #20]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	68da      	ldr	r2, [r3, #12]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e1cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800e1e4:	2300      	movs	r3, #0
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
	...

0800e1f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1f4:	b0c0      	sub	sp, #256	; 0x100
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	691b      	ldr	r3, [r3, #16]
 800e204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e20c:	68d9      	ldr	r1, [r3, #12]
 800e20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	ea40 0301 	orr.w	r3, r0, r1
 800e218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e21e:	689a      	ldr	r2, [r3, #8]
 800e220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	431a      	orrs	r2, r3
 800e228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	431a      	orrs	r2, r3
 800e230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e234:	69db      	ldr	r3, [r3, #28]
 800e236:	4313      	orrs	r3, r2
 800e238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e248:	f021 010c 	bic.w	r1, r1, #12
 800e24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e256:	430b      	orrs	r3, r1
 800e258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e26a:	6999      	ldr	r1, [r3, #24]
 800e26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	ea40 0301 	orr.w	r3, r0, r1
 800e276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	4b8f      	ldr	r3, [pc, #572]	; (800e4bc <UART_SetConfig+0x2cc>)
 800e280:	429a      	cmp	r2, r3
 800e282:	d005      	beq.n	800e290 <UART_SetConfig+0xa0>
 800e284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	4b8d      	ldr	r3, [pc, #564]	; (800e4c0 <UART_SetConfig+0x2d0>)
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d104      	bne.n	800e29a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e290:	f7fe fe74 	bl	800cf7c <HAL_RCC_GetPCLK2Freq>
 800e294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e298:	e003      	b.n	800e2a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e29a:	f7fe fe5b 	bl	800cf54 <HAL_RCC_GetPCLK1Freq>
 800e29e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ac:	f040 810c 	bne.w	800e4c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e2b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e2ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e2be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	462b      	mov	r3, r5
 800e2c6:	1891      	adds	r1, r2, r2
 800e2c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800e2ca:	415b      	adcs	r3, r3
 800e2cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e2d2:	4621      	mov	r1, r4
 800e2d4:	eb12 0801 	adds.w	r8, r2, r1
 800e2d8:	4629      	mov	r1, r5
 800e2da:	eb43 0901 	adc.w	r9, r3, r1
 800e2de:	f04f 0200 	mov.w	r2, #0
 800e2e2:	f04f 0300 	mov.w	r3, #0
 800e2e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e2ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e2ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e2f2:	4690      	mov	r8, r2
 800e2f4:	4699      	mov	r9, r3
 800e2f6:	4623      	mov	r3, r4
 800e2f8:	eb18 0303 	adds.w	r3, r8, r3
 800e2fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e300:	462b      	mov	r3, r5
 800e302:	eb49 0303 	adc.w	r3, r9, r3
 800e306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e31a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e31e:	460b      	mov	r3, r1
 800e320:	18db      	adds	r3, r3, r3
 800e322:	653b      	str	r3, [r7, #80]	; 0x50
 800e324:	4613      	mov	r3, r2
 800e326:	eb42 0303 	adc.w	r3, r2, r3
 800e32a:	657b      	str	r3, [r7, #84]	; 0x54
 800e32c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e334:	f7f2 fca8 	bl	8000c88 <__aeabi_uldivmod>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	4b61      	ldr	r3, [pc, #388]	; (800e4c4 <UART_SetConfig+0x2d4>)
 800e33e:	fba3 2302 	umull	r2, r3, r3, r2
 800e342:	095b      	lsrs	r3, r3, #5
 800e344:	011c      	lsls	r4, r3, #4
 800e346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e34a:	2200      	movs	r2, #0
 800e34c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e358:	4642      	mov	r2, r8
 800e35a:	464b      	mov	r3, r9
 800e35c:	1891      	adds	r1, r2, r2
 800e35e:	64b9      	str	r1, [r7, #72]	; 0x48
 800e360:	415b      	adcs	r3, r3
 800e362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e368:	4641      	mov	r1, r8
 800e36a:	eb12 0a01 	adds.w	sl, r2, r1
 800e36e:	4649      	mov	r1, r9
 800e370:	eb43 0b01 	adc.w	fp, r3, r1
 800e374:	f04f 0200 	mov.w	r2, #0
 800e378:	f04f 0300 	mov.w	r3, #0
 800e37c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e388:	4692      	mov	sl, r2
 800e38a:	469b      	mov	fp, r3
 800e38c:	4643      	mov	r3, r8
 800e38e:	eb1a 0303 	adds.w	r3, sl, r3
 800e392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e396:	464b      	mov	r3, r9
 800e398:	eb4b 0303 	adc.w	r3, fp, r3
 800e39c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e3b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	18db      	adds	r3, r3, r3
 800e3b8:	643b      	str	r3, [r7, #64]	; 0x40
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	eb42 0303 	adc.w	r3, r2, r3
 800e3c0:	647b      	str	r3, [r7, #68]	; 0x44
 800e3c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e3c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e3ca:	f7f2 fc5d 	bl	8000c88 <__aeabi_uldivmod>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	4b3b      	ldr	r3, [pc, #236]	; (800e4c4 <UART_SetConfig+0x2d4>)
 800e3d6:	fba3 2301 	umull	r2, r3, r3, r1
 800e3da:	095b      	lsrs	r3, r3, #5
 800e3dc:	2264      	movs	r2, #100	; 0x64
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	1acb      	subs	r3, r1, r3
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e3ea:	4b36      	ldr	r3, [pc, #216]	; (800e4c4 <UART_SetConfig+0x2d4>)
 800e3ec:	fba3 2302 	umull	r2, r3, r3, r2
 800e3f0:	095b      	lsrs	r3, r3, #5
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e3f8:	441c      	add	r4, r3
 800e3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e40c:	4642      	mov	r2, r8
 800e40e:	464b      	mov	r3, r9
 800e410:	1891      	adds	r1, r2, r2
 800e412:	63b9      	str	r1, [r7, #56]	; 0x38
 800e414:	415b      	adcs	r3, r3
 800e416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e41c:	4641      	mov	r1, r8
 800e41e:	1851      	adds	r1, r2, r1
 800e420:	6339      	str	r1, [r7, #48]	; 0x30
 800e422:	4649      	mov	r1, r9
 800e424:	414b      	adcs	r3, r1
 800e426:	637b      	str	r3, [r7, #52]	; 0x34
 800e428:	f04f 0200 	mov.w	r2, #0
 800e42c:	f04f 0300 	mov.w	r3, #0
 800e430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e434:	4659      	mov	r1, fp
 800e436:	00cb      	lsls	r3, r1, #3
 800e438:	4651      	mov	r1, sl
 800e43a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e43e:	4651      	mov	r1, sl
 800e440:	00ca      	lsls	r2, r1, #3
 800e442:	4610      	mov	r0, r2
 800e444:	4619      	mov	r1, r3
 800e446:	4603      	mov	r3, r0
 800e448:	4642      	mov	r2, r8
 800e44a:	189b      	adds	r3, r3, r2
 800e44c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e450:	464b      	mov	r3, r9
 800e452:	460a      	mov	r2, r1
 800e454:	eb42 0303 	adc.w	r3, r2, r3
 800e458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e46c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e470:	460b      	mov	r3, r1
 800e472:	18db      	adds	r3, r3, r3
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
 800e476:	4613      	mov	r3, r2
 800e478:	eb42 0303 	adc.w	r3, r2, r3
 800e47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e47e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e486:	f7f2 fbff 	bl	8000c88 <__aeabi_uldivmod>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <UART_SetConfig+0x2d4>)
 800e490:	fba3 1302 	umull	r1, r3, r3, r2
 800e494:	095b      	lsrs	r3, r3, #5
 800e496:	2164      	movs	r1, #100	; 0x64
 800e498:	fb01 f303 	mul.w	r3, r1, r3
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	3332      	adds	r3, #50	; 0x32
 800e4a2:	4a08      	ldr	r2, [pc, #32]	; (800e4c4 <UART_SetConfig+0x2d4>)
 800e4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4a8:	095b      	lsrs	r3, r3, #5
 800e4aa:	f003 0207 	and.w	r2, r3, #7
 800e4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4422      	add	r2, r4
 800e4b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e4b8:	e105      	b.n	800e6c6 <UART_SetConfig+0x4d6>
 800e4ba:	bf00      	nop
 800e4bc:	40011000 	.word	0x40011000
 800e4c0:	40011400 	.word	0x40011400
 800e4c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e4c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e4d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e4d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e4da:	4642      	mov	r2, r8
 800e4dc:	464b      	mov	r3, r9
 800e4de:	1891      	adds	r1, r2, r2
 800e4e0:	6239      	str	r1, [r7, #32]
 800e4e2:	415b      	adcs	r3, r3
 800e4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e4ea:	4641      	mov	r1, r8
 800e4ec:	1854      	adds	r4, r2, r1
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	eb43 0501 	adc.w	r5, r3, r1
 800e4f4:	f04f 0200 	mov.w	r2, #0
 800e4f8:	f04f 0300 	mov.w	r3, #0
 800e4fc:	00eb      	lsls	r3, r5, #3
 800e4fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e502:	00e2      	lsls	r2, r4, #3
 800e504:	4614      	mov	r4, r2
 800e506:	461d      	mov	r5, r3
 800e508:	4643      	mov	r3, r8
 800e50a:	18e3      	adds	r3, r4, r3
 800e50c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e510:	464b      	mov	r3, r9
 800e512:	eb45 0303 	adc.w	r3, r5, r3
 800e516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e52a:	f04f 0200 	mov.w	r2, #0
 800e52e:	f04f 0300 	mov.w	r3, #0
 800e532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e536:	4629      	mov	r1, r5
 800e538:	008b      	lsls	r3, r1, #2
 800e53a:	4621      	mov	r1, r4
 800e53c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e540:	4621      	mov	r1, r4
 800e542:	008a      	lsls	r2, r1, #2
 800e544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e548:	f7f2 fb9e 	bl	8000c88 <__aeabi_uldivmod>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	4b60      	ldr	r3, [pc, #384]	; (800e6d4 <UART_SetConfig+0x4e4>)
 800e552:	fba3 2302 	umull	r2, r3, r3, r2
 800e556:	095b      	lsrs	r3, r3, #5
 800e558:	011c      	lsls	r4, r3, #4
 800e55a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e55e:	2200      	movs	r2, #0
 800e560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e56c:	4642      	mov	r2, r8
 800e56e:	464b      	mov	r3, r9
 800e570:	1891      	adds	r1, r2, r2
 800e572:	61b9      	str	r1, [r7, #24]
 800e574:	415b      	adcs	r3, r3
 800e576:	61fb      	str	r3, [r7, #28]
 800e578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e57c:	4641      	mov	r1, r8
 800e57e:	1851      	adds	r1, r2, r1
 800e580:	6139      	str	r1, [r7, #16]
 800e582:	4649      	mov	r1, r9
 800e584:	414b      	adcs	r3, r1
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	f04f 0200 	mov.w	r2, #0
 800e58c:	f04f 0300 	mov.w	r3, #0
 800e590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e594:	4659      	mov	r1, fp
 800e596:	00cb      	lsls	r3, r1, #3
 800e598:	4651      	mov	r1, sl
 800e59a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e59e:	4651      	mov	r1, sl
 800e5a0:	00ca      	lsls	r2, r1, #3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	4642      	mov	r2, r8
 800e5aa:	189b      	adds	r3, r3, r2
 800e5ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5b0:	464b      	mov	r3, r9
 800e5b2:	460a      	mov	r2, r1
 800e5b4:	eb42 0303 	adc.w	r3, r2, r3
 800e5b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e5c8:	f04f 0200 	mov.w	r2, #0
 800e5cc:	f04f 0300 	mov.w	r3, #0
 800e5d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	008b      	lsls	r3, r1, #2
 800e5d8:	4641      	mov	r1, r8
 800e5da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e5de:	4641      	mov	r1, r8
 800e5e0:	008a      	lsls	r2, r1, #2
 800e5e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e5e6:	f7f2 fb4f 	bl	8000c88 <__aeabi_uldivmod>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4b39      	ldr	r3, [pc, #228]	; (800e6d4 <UART_SetConfig+0x4e4>)
 800e5f0:	fba3 1302 	umull	r1, r3, r3, r2
 800e5f4:	095b      	lsrs	r3, r3, #5
 800e5f6:	2164      	movs	r1, #100	; 0x64
 800e5f8:	fb01 f303 	mul.w	r3, r1, r3
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	011b      	lsls	r3, r3, #4
 800e600:	3332      	adds	r3, #50	; 0x32
 800e602:	4a34      	ldr	r2, [pc, #208]	; (800e6d4 <UART_SetConfig+0x4e4>)
 800e604:	fba2 2303 	umull	r2, r3, r2, r3
 800e608:	095b      	lsrs	r3, r3, #5
 800e60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e60e:	441c      	add	r4, r3
 800e610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e614:	2200      	movs	r2, #0
 800e616:	673b      	str	r3, [r7, #112]	; 0x70
 800e618:	677a      	str	r2, [r7, #116]	; 0x74
 800e61a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e61e:	4642      	mov	r2, r8
 800e620:	464b      	mov	r3, r9
 800e622:	1891      	adds	r1, r2, r2
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	415b      	adcs	r3, r3
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e62e:	4641      	mov	r1, r8
 800e630:	1851      	adds	r1, r2, r1
 800e632:	6039      	str	r1, [r7, #0]
 800e634:	4649      	mov	r1, r9
 800e636:	414b      	adcs	r3, r1
 800e638:	607b      	str	r3, [r7, #4]
 800e63a:	f04f 0200 	mov.w	r2, #0
 800e63e:	f04f 0300 	mov.w	r3, #0
 800e642:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e646:	4659      	mov	r1, fp
 800e648:	00cb      	lsls	r3, r1, #3
 800e64a:	4651      	mov	r1, sl
 800e64c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e650:	4651      	mov	r1, sl
 800e652:	00ca      	lsls	r2, r1, #3
 800e654:	4610      	mov	r0, r2
 800e656:	4619      	mov	r1, r3
 800e658:	4603      	mov	r3, r0
 800e65a:	4642      	mov	r2, r8
 800e65c:	189b      	adds	r3, r3, r2
 800e65e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e660:	464b      	mov	r3, r9
 800e662:	460a      	mov	r2, r1
 800e664:	eb42 0303 	adc.w	r3, r2, r3
 800e668:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	663b      	str	r3, [r7, #96]	; 0x60
 800e674:	667a      	str	r2, [r7, #100]	; 0x64
 800e676:	f04f 0200 	mov.w	r2, #0
 800e67a:	f04f 0300 	mov.w	r3, #0
 800e67e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e682:	4649      	mov	r1, r9
 800e684:	008b      	lsls	r3, r1, #2
 800e686:	4641      	mov	r1, r8
 800e688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e68c:	4641      	mov	r1, r8
 800e68e:	008a      	lsls	r2, r1, #2
 800e690:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e694:	f7f2 faf8 	bl	8000c88 <__aeabi_uldivmod>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <UART_SetConfig+0x4e4>)
 800e69e:	fba3 1302 	umull	r1, r3, r3, r2
 800e6a2:	095b      	lsrs	r3, r3, #5
 800e6a4:	2164      	movs	r1, #100	; 0x64
 800e6a6:	fb01 f303 	mul.w	r3, r1, r3
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	3332      	adds	r3, #50	; 0x32
 800e6b0:	4a08      	ldr	r2, [pc, #32]	; (800e6d4 <UART_SetConfig+0x4e4>)
 800e6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6b6:	095b      	lsrs	r3, r3, #5
 800e6b8:	f003 020f 	and.w	r2, r3, #15
 800e6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4422      	add	r2, r4
 800e6c4:	609a      	str	r2, [r3, #8]
}
 800e6c6:	bf00      	nop
 800e6c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6d2:	bf00      	nop
 800e6d4:	51eb851f 	.word	0x51eb851f

0800e6d8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	60fb      	str	r3, [r7, #12]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d20b      	bcs.n	800e70a <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	011b      	lsls	r3, r3, #4
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f000 f817 	bl	800e730 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3301      	adds	r3, #1
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	e7ed      	b.n	800e6e6 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800e70a:	bf00      	nop
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800e71a:	f7f8 f90d 	bl	8006938 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800e71e:	4603      	mov	r3, r0
 800e720:	6879      	ldr	r1, [r7, #4]
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff ffd8 	bl	800e6d8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800e730:	b5b0      	push	{r4, r5, r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7f2 fe8e 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800e748:	f006 f9a0 	bl	8014a8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	68dc      	ldr	r4, [r3, #12]
 800e750:	687d      	ldr	r5, [r7, #4]
 800e752:	463b      	mov	r3, r7
 800e754:	4618      	mov	r0, r3
 800e756:	f7f8 fc0a 	bl	8006f6e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800e75a:	4603      	mov	r3, r0
 800e75c:	4619      	mov	r1, r3
 800e75e:	4628      	mov	r0, r5
 800e760:	47a0      	blx	r4
 800e762:	bf00      	nop
    }
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bdb0      	pop	{r4, r5, r7, pc}

0800e76a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800e76a:	b5b0      	push	{r4, r5, r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	240f      	movs	r4, #15
 800e776:	461d      	mov	r5, r3
 800e778:	2c00      	cmp	r4, #0
 800e77a:	db05      	blt.n	800e788 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800e77c:	4628      	mov	r0, r5
 800e77e:	f7f8 fada 	bl	8006d36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800e782:	3510      	adds	r5, #16
 800e784:	3c01      	subs	r4, #1
 800e786:	e7f7      	b.n	800e778 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bdb0      	pop	{r4, r5, r7, pc}

0800e79a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800e79a:	b590      	push	{r4, r7, lr}
 800e79c:	b083      	sub	sp, #12
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00a      	beq.n	800e7be <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	d004      	beq.n	800e7be <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800e7b4:	3c10      	subs	r4, #16
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f7f8 f87a 	bl	80068b0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800e7bc:	e7f7      	b.n	800e7ae <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd90      	pop	{r4, r7, pc}

0800e7c8 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	4801      	ldr	r0, [pc, #4]	; (800e7d4 <__tcf_0+0xc>)
 800e7ce:	f7ff ffe4 	bl	800e79a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	200014f0 	.word	0x200014f0

0800e7d8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	f3bf 8f5b 	dmb	ish
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	bf0c      	ite	eq
 800e7ee:	2301      	moveq	r3, #1
 800e7f0:	2300      	movne	r3, #0
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d013      	beq.n	800e820 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800e7f8:	480b      	ldr	r0, [pc, #44]	; (800e828 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800e7fa:	f006 f933 	bl	8014a64 <__cxa_guard_acquire>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	bf14      	ite	ne
 800e804:	2301      	movne	r3, #1
 800e806:	2300      	moveq	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d008      	beq.n	800e820 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800e80e:	4807      	ldr	r0, [pc, #28]	; (800e82c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800e810:	f7ff ffab 	bl	800e76a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800e814:	4806      	ldr	r0, [pc, #24]	; (800e830 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800e816:	f006 fb9a 	bl	8014f4e <atexit>
 800e81a:	4803      	ldr	r0, [pc, #12]	; (800e828 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800e81c:	f006 f92e 	bl	8014a7c <__cxa_guard_release>
		return instance;
 800e820:	4b02      	ldr	r3, [pc, #8]	; (800e82c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800e822:	4618      	mov	r0, r3
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	200015f4 	.word	0x200015f4
 800e82c:	200014f0 	.word	0x200014f0
 800e830:	0800e7c9 	.word	0x0800e7c9

0800e834 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800e83e:	2300      	movs	r3, #0
 800e840:	60fb      	str	r3, [r7, #12]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e848:	68fa      	ldr	r2, [r7, #12]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d20b      	bcs.n	800e866 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4413      	add	r3, r2
 800e856:	6839      	ldr	r1, [r7, #0]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff ff69 	bl	800e730 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	e7ed      	b.n	800e842 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b082      	sub	sp, #8
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800e876:	f7ff ffaf 	bl	800e7d8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800e87a:	4603      	mov	r3, r0
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff ffd8 	bl	800e834 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800e884:	bf00      	nop
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d20c      	bcs.n	800e8c2 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	011b      	lsls	r3, r3, #4
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	887a      	ldrh	r2, [r7, #2]
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 f819 	bl	800e8ec <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e7ec      	b.n	800e89c <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800e8d4:	f7f7 fdb6 	bl	8006444 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	88fb      	ldrh	r3, [r7, #6]
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f7ff ffd4 	bl	800e88c <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800e8e4:	bf00      	nop
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800e8ec:	b5b0      	push	{r4, r5, r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f2 fdaf 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800e906:	f006 f8c1 	bl	8014a8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68dc      	ldr	r4, [r3, #12]
 800e90e:	687d      	ldr	r5, [r7, #4]
 800e910:	1cbb      	adds	r3, r7, #2
 800e912:	4618      	mov	r0, r3
 800e914:	f7f7 fe50 	bl	80065b8 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800e918:	4603      	mov	r3, r0
 800e91a:	4619      	mov	r1, r3
 800e91c:	4628      	mov	r0, r5
 800e91e:	47a0      	blx	r4
 800e920:	bf00      	nop
    }
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bdb0      	pop	{r4, r5, r7, pc}

0800e928 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800e932:	2300      	movs	r3, #0
 800e934:	60fb      	str	r3, [r7, #12]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d20b      	bcs.n	800e95a <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	011b      	lsls	r3, r3, #4
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	4413      	add	r3, r2
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 f817 	bl	800e980 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	3301      	adds	r3, #1
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	e7ed      	b.n	800e936 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 800e95a:	bf00      	nop
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800e962:	b580      	push	{r7, lr}
 800e964:	b082      	sub	sp, #8
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 800e96a:	f7f7 fddd 	bl	8006528 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800e96e:	4603      	mov	r3, r0
 800e970:	6879      	ldr	r1, [r7, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	f7ff ffd8 	bl	800e928 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 800e978:	bf00      	nop
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800e980:	b5b0      	push	{r4, r5, r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f2 fd66 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800e998:	f006 f878 	bl	8014a8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68dc      	ldr	r4, [r3, #12]
 800e9a0:	687d      	ldr	r5, [r7, #4]
 800e9a2:	463b      	mov	r3, r7
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7f7 fe12 	bl	80065ce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	47a0      	blx	r4
 800e9b2:	bf00      	nop
    }
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bdb0      	pop	{r4, r5, r7, pc}

0800e9ba <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b085      	sub	sp, #20
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
 800e9c4:	603b      	str	r3, [r7, #0]
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800e9ca:	bf00      	nop
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr

0800e9d6 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b084      	sub	sp, #16
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	603b      	str	r3, [r7, #0]
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d003      	beq.n	800e9f4 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 fc71 	bl	80102d6 <_putchar>
  }
}
 800e9f4:	bf00      	nop
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d006      	beq.n	800ea20 <_ZL10_strnlen_sPKcj+0x24>
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	1e5a      	subs	r2, r3, #1
 800ea16:	603a      	str	r2, [r7, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <_ZL10_strnlen_sPKcj+0x24>
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e000      	b.n	800ea22 <_ZL10_strnlen_sPKcj+0x26>
 800ea20:	2300      	movs	r3, #0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <_ZL10_strnlen_sPKcj+0x32>
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	60fb      	str	r3, [r7, #12]
 800ea2c:	e7ed      	b.n	800ea0a <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	1ad3      	subs	r3, r2, r3
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	4603      	mov	r3, r0
 800ea48:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800ea4a:	79fb      	ldrb	r3, [r7, #7]
 800ea4c:	2b2f      	cmp	r3, #47	; 0x2f
 800ea4e:	d904      	bls.n	800ea5a <_ZL9_is_digitc+0x1a>
 800ea50:	79fb      	ldrb	r3, [r7, #7]
 800ea52:	2b39      	cmp	r3, #57	; 0x39
 800ea54:	d801      	bhi.n	800ea5a <_ZL9_is_digitc+0x1a>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e000      	b.n	800ea5c <_ZL9_is_digitc+0x1c>
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800ea70:	2300      	movs	r3, #0
 800ea72:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff ffe0 	bl	800ea40 <_ZL9_is_digitc>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00f      	beq.n	800eaa6 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	4613      	mov	r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	4413      	add	r3, r2
 800ea8e:	005b      	lsls	r3, r3, #1
 800ea90:	4618      	mov	r0, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	1c59      	adds	r1, r3, #1
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6011      	str	r1, [r2, #0]
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	4403      	add	r3, r0
 800eaa0:	3b30      	subs	r3, #48	; 0x30
 800eaa2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800eaa4:	e7e6      	b.n	800ea74 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800eab0:	b590      	push	{r4, r7, lr}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800eac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac4:	f003 0302 	and.w	r3, r3, #2
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d116      	bne.n	800eafa <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800eacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eace:	f003 0301 	and.w	r3, r3, #1
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d111      	bne.n	800eafa <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	617b      	str	r3, [r7, #20]
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	429a      	cmp	r2, r3
 800eae0:	d20b      	bcs.n	800eafa <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	1c53      	adds	r3, r2, #1
 800eae6:	607b      	str	r3, [r7, #4]
 800eae8:	68fc      	ldr	r4, [r7, #12]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68b9      	ldr	r1, [r7, #8]
 800eaee:	2020      	movs	r0, #32
 800eaf0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	617b      	str	r3, [r7, #20]
 800eaf8:	e7ef      	b.n	800eada <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800eafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00e      	beq.n	800eb1e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800eb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb02:	3b01      	subs	r3, #1
 800eb04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	4413      	add	r3, r2
 800eb0c:	7818      	ldrb	r0, [r3, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	1c53      	adds	r3, r2, #1
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	68fc      	ldr	r4, [r7, #12]
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	68b9      	ldr	r1, [r7, #8]
 800eb1a:	47a0      	blx	r4
  while (len) {
 800eb1c:	e7ed      	b.n	800eafa <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800eb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb20:	f003 0302 	and.w	r3, r3, #2
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00e      	beq.n	800eb46 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d908      	bls.n	800eb46 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	1c53      	adds	r3, r2, #1
 800eb38:	607b      	str	r3, [r7, #4]
 800eb3a:	68fc      	ldr	r4, [r7, #12]
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	68b9      	ldr	r1, [r7, #8]
 800eb40:	2020      	movs	r0, #32
 800eb42:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800eb44:	e7f0      	b.n	800eb28 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800eb46:	687b      	ldr	r3, [r7, #4]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	371c      	adds	r7, #28
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd90      	pop	{r4, r7, pc}

0800eb50 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b088      	sub	sp, #32
 800eb54:	af04      	add	r7, sp, #16
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
 800eb5c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800eb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb60:	f003 0302 	and.w	r3, r3, #2
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d136      	bne.n	800ebd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d010      	beq.n	800eb90 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800eb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb70:	f003 0301 	and.w	r3, r3, #1
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00b      	beq.n	800eb90 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800eb78:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d104      	bne.n	800eb8a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	f003 030c 	and.w	r3, r3, #12
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800eb90:	69fa      	ldr	r2, [r7, #28]
 800eb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d20a      	bcs.n	800ebae <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	2b1f      	cmp	r3, #31
 800eb9c:	d807      	bhi.n	800ebae <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800eb9e:	69fb      	ldr	r3, [r7, #28]
 800eba0:	1c5a      	adds	r2, r3, #1
 800eba2:	61fa      	str	r2, [r7, #28]
 800eba4:	69ba      	ldr	r2, [r7, #24]
 800eba6:	4413      	add	r3, r2
 800eba8:	2230      	movs	r2, #48	; 0x30
 800ebaa:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ebac:	e7f0      	b.n	800eb90 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	f003 0301 	and.w	r3, r3, #1
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00e      	beq.n	800ebd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800ebb8:	69fa      	ldr	r2, [r7, #28]
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d20a      	bcs.n	800ebd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	2b1f      	cmp	r3, #31
 800ebc4:	d807      	bhi.n	800ebd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	1c5a      	adds	r2, r3, #1
 800ebca:	61fa      	str	r2, [r7, #28]
 800ebcc:	69ba      	ldr	r2, [r7, #24]
 800ebce:	4413      	add	r3, r2
 800ebd0:	2230      	movs	r2, #48	; 0x30
 800ebd2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ebd4:	e7eb      	b.n	800ebae <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800ebd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd8:	f003 0310 	and.w	r3, r3, #16
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d058      	beq.n	800ec92 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d116      	bne.n	800ec18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d013      	beq.n	800ec18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ebf0:	69fa      	ldr	r2, [r7, #28]
 800ebf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d003      	beq.n	800ec00 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800ebf8:	69fa      	ldr	r2, [r7, #28]
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d10b      	bne.n	800ec18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	3b01      	subs	r3, #1
 800ec04:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d005      	beq.n	800ec18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ec0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0e:	2b10      	cmp	r3, #16
 800ec10:	d102      	bne.n	800ec18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	3b01      	subs	r3, #1
 800ec16:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	2b10      	cmp	r3, #16
 800ec1c:	d10f      	bne.n	800ec3e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	f003 0320 	and.w	r3, r3, #32
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10a      	bne.n	800ec3e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	2b1f      	cmp	r3, #31
 800ec2c:	d807      	bhi.n	800ec3e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	61fa      	str	r2, [r7, #28]
 800ec34:	69ba      	ldr	r2, [r7, #24]
 800ec36:	4413      	add	r3, r2
 800ec38:	2278      	movs	r2, #120	; 0x78
 800ec3a:	701a      	strb	r2, [r3, #0]
 800ec3c:	e01f      	b.n	800ec7e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	d10f      	bne.n	800ec64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	f003 0320 	and.w	r3, r3, #32
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	2b1f      	cmp	r3, #31
 800ec52:	d807      	bhi.n	800ec64 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	61fa      	str	r2, [r7, #28]
 800ec5a:	69ba      	ldr	r2, [r7, #24]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	2258      	movs	r2, #88	; 0x58
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	e00c      	b.n	800ec7e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d109      	bne.n	800ec7e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	2b1f      	cmp	r3, #31
 800ec6e:	d806      	bhi.n	800ec7e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	61fa      	str	r2, [r7, #28]
 800ec76:	69ba      	ldr	r2, [r7, #24]
 800ec78:	4413      	add	r3, r2
 800ec7a:	2262      	movs	r2, #98	; 0x62
 800ec7c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	2b1f      	cmp	r3, #31
 800ec82:	d806      	bhi.n	800ec92 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	61fa      	str	r2, [r7, #28]
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	2230      	movs	r2, #48	; 0x30
 800ec90:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	2b1f      	cmp	r3, #31
 800ec96:	d824      	bhi.n	800ece2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800ec98:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d007      	beq.n	800ecb0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	61fa      	str	r2, [r7, #28]
 800eca6:	69ba      	ldr	r2, [r7, #24]
 800eca8:	4413      	add	r3, r2
 800ecaa:	222d      	movs	r2, #45	; 0x2d
 800ecac:	701a      	strb	r2, [r3, #0]
 800ecae:	e018      	b.n	800ece2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	f003 0304 	and.w	r3, r3, #4
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d007      	beq.n	800ecca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	61fa      	str	r2, [r7, #28]
 800ecc0:	69ba      	ldr	r2, [r7, #24]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	222b      	movs	r2, #43	; 0x2b
 800ecc6:	701a      	strb	r2, [r3, #0]
 800ecc8:	e00b      	b.n	800ece2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800ecca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eccc:	f003 0308 	and.w	r3, r3, #8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d006      	beq.n	800ece2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	61fa      	str	r2, [r7, #28]
 800ecda:	69ba      	ldr	r2, [r7, #24]
 800ecdc:	4413      	add	r3, r2
 800ecde:	2220      	movs	r2, #32
 800ece0:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	9303      	str	r3, [sp, #12]
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	9302      	str	r3, [sp, #8]
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	9301      	str	r3, [sp, #4]
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	9300      	str	r3, [sp, #0]
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	68b9      	ldr	r1, [r7, #8]
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fed9 	bl	800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ecfe:	4603      	mov	r3, r0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b096      	sub	sp, #88	; 0x58
 800ed0c:	af08      	add	r7, sp, #32
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
 800ed14:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ed16:	2300      	movs	r3, #0
 800ed18:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ed1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d103      	bne.n	800ed28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800ed20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed22:	f023 0310 	bic.w	r3, r3, #16
 800ed26:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ed28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d002      	beq.n	800ed38 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800ed32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d033      	beq.n	800eda0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800ed38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed3c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed40:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed42:	fb01 f202 	mul.w	r2, r1, r2
 800ed46:	1a9b      	subs	r3, r3, r2
 800ed48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ed4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed50:	2b09      	cmp	r3, #9
 800ed52:	d804      	bhi.n	800ed5e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800ed54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed58:	3330      	adds	r3, #48	; 0x30
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	e00d      	b.n	800ed7a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800ed5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed60:	f003 0320 	and.w	r3, r3, #32
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800ed68:	2241      	movs	r2, #65	; 0x41
 800ed6a:	e000      	b.n	800ed6e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800ed6c:	2261      	movs	r2, #97	; 0x61
 800ed6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed72:	4413      	add	r3, r2
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	3b0a      	subs	r3, #10
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed7c:	1c59      	adds	r1, r3, #1
 800ed7e:	6379      	str	r1, [r7, #52]	; 0x34
 800ed80:	3338      	adds	r3, #56	; 0x38
 800ed82:	443b      	add	r3, r7
 800ed84:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ed88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed90:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ed92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800ed98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9a:	2b1f      	cmp	r3, #31
 800ed9c:	d800      	bhi.n	800eda0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800ed9e:	e7cb      	b.n	800ed38 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800eda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda2:	9306      	str	r3, [sp, #24]
 800eda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edae:	9303      	str	r3, [sp, #12]
 800edb0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800edb4:	9302      	str	r3, [sp, #8]
 800edb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb8:	9301      	str	r3, [sp, #4]
 800edba:	f107 0310 	add.w	r3, r7, #16
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	68b9      	ldr	r1, [r7, #8]
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f7ff fec2 	bl	800eb50 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800edcc:	4603      	mov	r3, r0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3738      	adds	r7, #56	; 0x38
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b096      	sub	sp, #88	; 0x58
 800edda:	af08      	add	r7, sp, #32
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	60b9      	str	r1, [r7, #8]
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ede8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800edec:	4313      	orrs	r3, r2
 800edee:	d103      	bne.n	800edf8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800edf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edf2:	f023 0310 	bic.w	r3, r3, #16
 800edf6:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800edf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800edfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800ee02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee06:	4313      	orrs	r3, r2
 800ee08:	d038      	beq.n	800ee7c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800ee0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ee0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ee12:	f7f1 ff39 	bl	8000c88 <__aeabi_uldivmod>
 800ee16:	4613      	mov	r3, r2
 800ee18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ee1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee20:	2b09      	cmp	r3, #9
 800ee22:	d804      	bhi.n	800ee2e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800ee24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee28:	3330      	adds	r3, #48	; 0x30
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	e00d      	b.n	800ee4a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800ee2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee30:	f003 0320 	and.w	r3, r3, #32
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800ee38:	2241      	movs	r2, #65	; 0x41
 800ee3a:	e000      	b.n	800ee3e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800ee3c:	2261      	movs	r2, #97	; 0x61
 800ee3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee42:	4413      	add	r3, r2
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	3b0a      	subs	r3, #10
 800ee48:	b2da      	uxtb	r2, r3
 800ee4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4c:	1c59      	adds	r1, r3, #1
 800ee4e:	6379      	str	r1, [r7, #52]	; 0x34
 800ee50:	3338      	adds	r3, #56	; 0x38
 800ee52:	443b      	add	r3, r7
 800ee54:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800ee58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ee5c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ee60:	f7f1 ff12 	bl	8000c88 <__aeabi_uldivmod>
 800ee64:	4602      	mov	r2, r0
 800ee66:	460b      	mov	r3, r1
 800ee68:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800ee6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee70:	4313      	orrs	r3, r2
 800ee72:	d003      	beq.n	800ee7c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800ee74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee76:	2b1f      	cmp	r3, #31
 800ee78:	d800      	bhi.n	800ee7c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800ee7a:	e7c6      	b.n	800ee0a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ee7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee80:	9206      	str	r2, [sp, #24]
 800ee82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee84:	9205      	str	r2, [sp, #20]
 800ee86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee88:	9204      	str	r2, [sp, #16]
 800ee8a:	9303      	str	r3, [sp, #12]
 800ee8c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ee90:	9302      	str	r3, [sp, #8]
 800ee92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	f107 0310 	add.w	r3, r7, #16
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	68f8      	ldr	r0, [r7, #12]
 800eea4:	f7ff fe54 	bl	800eb50 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800eea8:	4603      	mov	r3, r0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3738      	adds	r7, #56	; 0x38
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	0000      	movs	r0, r0
 800eeb4:	0000      	movs	r0, r0
	...

0800eeb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b09d      	sub	sp, #116	; 0x74
 800eebc:	af04      	add	r7, sp, #16
 800eebe:	6178      	str	r0, [r7, #20]
 800eec0:	6139      	str	r1, [r7, #16]
 800eec2:	60fa      	str	r2, [r7, #12]
 800eec4:	60bb      	str	r3, [r7, #8]
 800eec6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800eece:	f04f 0200 	mov.w	r2, #0
 800eed2:	f04f 0300 	mov.w	r3, #0
 800eed6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800eeda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eede:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eee2:	f7f1 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10f      	bne.n	800ef0c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800eeec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeee:	9303      	str	r3, [sp, #12]
 800eef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eef2:	9302      	str	r3, [sp, #8]
 800eef4:	2303      	movs	r3, #3
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	4ba7      	ldr	r3, [pc, #668]	; (800f198 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	6939      	ldr	r1, [r7, #16]
 800ef02:	6978      	ldr	r0, [r7, #20]
 800ef04:	f7ff fdd4 	bl	800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	e230      	b.n	800f36e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800ef0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef10:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800ef14:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef18:	f7f1 fde0 	bl	8000adc <__aeabi_dcmplt>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00f      	beq.n	800ef42 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800ef22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef24:	9303      	str	r3, [sp, #12]
 800ef26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef28:	9302      	str	r3, [sp, #8]
 800ef2a:	2304      	movs	r3, #4
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	4b9b      	ldr	r3, [pc, #620]	; (800f19c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	6939      	ldr	r1, [r7, #16]
 800ef38:	6978      	ldr	r0, [r7, #20]
 800ef3a:	f7ff fdb9 	bl	800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	e215      	b.n	800f36e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800ef42:	f04f 32ff 	mov.w	r2, #4294967295
 800ef46:	4b96      	ldr	r3, [pc, #600]	; (800f1a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800ef48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef4c:	f7f1 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d01d      	beq.n	800ef92 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800ef56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef58:	f003 0304 	and.w	r3, r3, #4
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d001      	beq.n	800ef64 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800ef60:	4b90      	ldr	r3, [pc, #576]	; (800f1a4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800ef62:	e000      	b.n	800ef66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800ef64:	4b90      	ldr	r3, [pc, #576]	; (800f1a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800ef66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ef68:	f002 0204 	and.w	r2, r2, #4
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d001      	beq.n	800ef74 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800ef70:	2204      	movs	r2, #4
 800ef72:	e000      	b.n	800ef76 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800ef74:	2203      	movs	r2, #3
 800ef76:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ef78:	9103      	str	r1, [sp, #12]
 800ef7a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ef7c:	9102      	str	r1, [sp, #8]
 800ef7e:	9201      	str	r2, [sp, #4]
 800ef80:	9300      	str	r3, [sp, #0]
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	68fa      	ldr	r2, [r7, #12]
 800ef86:	6939      	ldr	r1, [r7, #16]
 800ef88:	6978      	ldr	r0, [r7, #20]
 800ef8a:	f7ff fd91 	bl	800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	e1ed      	b.n	800f36e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800ef92:	a37d      	add	r3, pc, #500	; (adr r3, 800f188 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef9c:	f7f1 fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d109      	bne.n	800efba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800efa6:	a37a      	add	r3, pc, #488	; (adr r3, 800f190 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800efa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efb0:	f7f1 fd94 	bl	8000adc <__aeabi_dcmplt>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00f      	beq.n	800efda <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800efba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efbc:	9302      	str	r3, [sp, #8]
 800efbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800efc0:	9301      	str	r3, [sp, #4]
 800efc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800efc4:	9300      	str	r3, [sp, #0]
 800efc6:	ed97 0b00 	vldr	d0, [r7]
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	6939      	ldr	r1, [r7, #16]
 800efd0:	6978      	ldr	r0, [r7, #20]
 800efd2:	f000 f9d5 	bl	800f380 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800efd6:	4603      	mov	r3, r0
 800efd8:	e1c9      	b.n	800f36e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800efda:	2300      	movs	r3, #0
 800efdc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800efe0:	f04f 0200 	mov.w	r2, #0
 800efe4:	f04f 0300 	mov.w	r3, #0
 800efe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efec:	f7f1 fd76 	bl	8000adc <__aeabi_dcmplt>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00e      	beq.n	800f014 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800eff6:	2301      	movs	r3, #1
 800eff8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800effc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f000:	f04f 0000 	mov.w	r0, #0
 800f004:	f04f 0100 	mov.w	r1, #0
 800f008:	f7f1 f93e 	bl	8000288 <__aeabi_dsub>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800f014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d101      	bne.n	800f022 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f01e:	2306      	movs	r3, #6
 800f020:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f024:	2b1f      	cmp	r3, #31
 800f026:	d80e      	bhi.n	800f046 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800f028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f02a:	2b09      	cmp	r3, #9
 800f02c:	d90b      	bls.n	800f046 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800f02e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f034:	3360      	adds	r3, #96	; 0x60
 800f036:	443b      	add	r3, r7
 800f038:	2230      	movs	r2, #48	; 0x30
 800f03a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800f03e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f040:	3b01      	subs	r3, #1
 800f042:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f044:	e7ed      	b.n	800f022 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800f046:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f04a:	f7f1 fd85 	bl	8000b58 <__aeabi_d2iz>
 800f04e:	4603      	mov	r3, r0
 800f050:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800f052:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f054:	f7f1 fa66 	bl	8000524 <__aeabi_i2d>
 800f058:	4602      	mov	r2, r0
 800f05a:	460b      	mov	r3, r1
 800f05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f060:	f7f1 f912 	bl	8000288 <__aeabi_dsub>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	4610      	mov	r0, r2
 800f06a:	4619      	mov	r1, r3
 800f06c:	4a4f      	ldr	r2, [pc, #316]	; (800f1ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800f06e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	4413      	add	r3, r2
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	f7f1 fabe 	bl	80005f8 <__aeabi_dmul>
 800f07c:	4602      	mov	r2, r0
 800f07e:	460b      	mov	r3, r1
 800f080:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800f084:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f088:	f7f1 fd8e 	bl	8000ba8 <__aeabi_d2uiz>
 800f08c:	4603      	mov	r3, r0
 800f08e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800f090:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f092:	f7f1 fa37 	bl	8000504 <__aeabi_ui2d>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f09e:	f7f1 f8f3 	bl	8000288 <__aeabi_dsub>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800f0aa:	f04f 0200 	mov.w	r2, #0
 800f0ae:	4b40      	ldr	r3, [pc, #256]	; (800f1b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f0b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f0b4:	f7f1 fd30 	bl	8000b18 <__aeabi_dcmpgt>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d016      	beq.n	800f0ec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800f0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800f0c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0c6:	f7f1 fa1d 	bl	8000504 <__aeabi_ui2d>
 800f0ca:	4a38      	ldr	r2, [pc, #224]	; (800f1ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800f0cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	4413      	add	r3, r2
 800f0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d6:	f7f1 fd15 	bl	8000b04 <__aeabi_dcmpge>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d01a      	beq.n	800f116 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800f0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	657b      	str	r3, [r7, #84]	; 0x54
 800f0ea:	e014      	b.n	800f116 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800f0ec:	f04f 0200 	mov.w	r2, #0
 800f0f0:	4b2f      	ldr	r3, [pc, #188]	; (800f1b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f0f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f0f6:	f7f1 fcf1 	bl	8000adc <__aeabi_dcmplt>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d10a      	bne.n	800f116 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800f100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f102:	2b00      	cmp	r3, #0
 800f104:	d004      	beq.n	800f110 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800f106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f108:	f003 0301 	and.w	r3, r3, #1
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800f110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f112:	3301      	adds	r3, #1
 800f114:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800f116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d14b      	bne.n	800f1b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800f11c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f11e:	f7f1 fa01 	bl	8000524 <__aeabi_i2d>
 800f122:	4602      	mov	r2, r0
 800f124:	460b      	mov	r3, r1
 800f126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f12a:	f7f1 f8ad 	bl	8000288 <__aeabi_dsub>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800f136:	2301      	movs	r3, #1
 800f138:	461c      	mov	r4, r3
 800f13a:	f04f 0200 	mov.w	r2, #0
 800f13e:	4b1c      	ldr	r3, [pc, #112]	; (800f1b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f140:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f144:	f7f1 fcca 	bl	8000adc <__aeabi_dcmplt>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800f14e:	2300      	movs	r3, #0
 800f150:	461c      	mov	r4, r3
 800f152:	b2e3      	uxtb	r3, r4
 800f154:	f083 0301 	eor.w	r3, r3, #1
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d109      	bne.n	800f172 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800f15e:	f04f 0200 	mov.w	r2, #0
 800f162:	4b13      	ldr	r3, [pc, #76]	; (800f1b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f164:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f168:	f7f1 fcd6 	bl	8000b18 <__aeabi_dcmpgt>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d06d      	beq.n	800f24e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800f172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d068      	beq.n	800f24e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800f17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f17e:	3301      	adds	r3, #1
 800f180:	657b      	str	r3, [r7, #84]	; 0x54
 800f182:	e064      	b.n	800f24e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800f184:	f3af 8000 	nop.w
 800f188:	00000000 	.word	0x00000000
 800f18c:	41cdcd65 	.word	0x41cdcd65
 800f190:	00000000 	.word	0x00000000
 800f194:	c1cdcd65 	.word	0xc1cdcd65
 800f198:	08017e00 	.word	0x08017e00
 800f19c:	08017e04 	.word	0x08017e04
 800f1a0:	7fefffff 	.word	0x7fefffff
 800f1a4:	08017e0c 	.word	0x08017e0c
 800f1a8:	08017e14 	.word	0x08017e14
 800f1ac:	080182d8 	.word	0x080182d8
 800f1b0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800f1b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f1b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1ba:	2b1f      	cmp	r3, #31
 800f1bc:	d826      	bhi.n	800f20c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800f1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800f1c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1c6:	4b6c      	ldr	r3, [pc, #432]	; (800f378 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800f1c8:	fba3 2301 	umull	r2, r3, r3, r1
 800f1cc:	08da      	lsrs	r2, r3, #3
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4413      	add	r3, r2
 800f1d4:	005b      	lsls	r3, r3, #1
 800f1d6:	1aca      	subs	r2, r1, r3
 800f1d8:	b2d2      	uxtb	r2, r2
 800f1da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1dc:	1c59      	adds	r1, r3, #1
 800f1de:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f1e0:	3230      	adds	r2, #48	; 0x30
 800f1e2:	b2d2      	uxtb	r2, r2
 800f1e4:	3360      	adds	r3, #96	; 0x60
 800f1e6:	443b      	add	r3, r7
 800f1e8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800f1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ee:	4a62      	ldr	r2, [pc, #392]	; (800f378 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800f1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f4:	08db      	lsrs	r3, r3, #3
 800f1f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	bf0c      	ite	eq
 800f1fe:	2301      	moveq	r3, #1
 800f200:	2300      	movne	r3, #0
 800f202:	b2db      	uxtb	r3, r3
 800f204:	2b00      	cmp	r3, #0
 800f206:	d100      	bne.n	800f20a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f208:	e7d6      	b.n	800f1b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800f20a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f20e:	2b1f      	cmp	r3, #31
 800f210:	d806      	bhi.n	800f220 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800f212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f214:	1e5a      	subs	r2, r3, #1
 800f216:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d001      	beq.n	800f220 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e000      	b.n	800f222 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800f220:	2300      	movs	r3, #0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d008      	beq.n	800f238 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800f226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f228:	1c5a      	adds	r2, r3, #1
 800f22a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f22c:	3360      	adds	r3, #96	; 0x60
 800f22e:	443b      	add	r3, r7
 800f230:	2230      	movs	r2, #48	; 0x30
 800f232:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f236:	e7e9      	b.n	800f20c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f23a:	2b1f      	cmp	r3, #31
 800f23c:	d807      	bhi.n	800f24e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800f23e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f240:	1c5a      	adds	r2, r3, #1
 800f242:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f244:	3360      	adds	r3, #96	; 0x60
 800f246:	443b      	add	r3, r7
 800f248:	222e      	movs	r2, #46	; 0x2e
 800f24a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f24e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f250:	2b1f      	cmp	r3, #31
 800f252:	d827      	bhi.n	800f2a4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800f254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f256:	4b49      	ldr	r3, [pc, #292]	; (800f37c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800f258:	fb83 1302 	smull	r1, r3, r3, r2
 800f25c:	1099      	asrs	r1, r3, #2
 800f25e:	17d3      	asrs	r3, r2, #31
 800f260:	1ac9      	subs	r1, r1, r3
 800f262:	460b      	mov	r3, r1
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	440b      	add	r3, r1
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	1ad1      	subs	r1, r2, r3
 800f26c:	b2ca      	uxtb	r2, r1
 800f26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f270:	1c59      	adds	r1, r3, #1
 800f272:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f274:	3230      	adds	r2, #48	; 0x30
 800f276:	b2d2      	uxtb	r2, r2
 800f278:	3360      	adds	r3, #96	; 0x60
 800f27a:	443b      	add	r3, r7
 800f27c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800f280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f282:	4a3e      	ldr	r2, [pc, #248]	; (800f37c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800f284:	fb82 1203 	smull	r1, r2, r2, r3
 800f288:	1092      	asrs	r2, r2, #2
 800f28a:	17db      	asrs	r3, r3, #31
 800f28c:	1ad3      	subs	r3, r2, r3
 800f28e:	657b      	str	r3, [r7, #84]	; 0x54
 800f290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f292:	2b00      	cmp	r3, #0
 800f294:	bf0c      	ite	eq
 800f296:	2301      	moveq	r3, #1
 800f298:	2300      	movne	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d100      	bne.n	800f2a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2a0:	e7d5      	b.n	800f24e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800f2a2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800f2a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d123      	bne.n	800f2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800f2ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2b0:	f003 0301 	and.w	r3, r3, #1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d01e      	beq.n	800f2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800f2b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00b      	beq.n	800f2d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800f2be:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d104      	bne.n	800f2d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800f2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2c8:	f003 030c 	and.w	r3, r3, #12
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800f2d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f2d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d20b      	bcs.n	800f2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800f2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2e0:	2b1f      	cmp	r3, #31
 800f2e2:	d808      	bhi.n	800f2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800f2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f2ea:	3360      	adds	r3, #96	; 0x60
 800f2ec:	443b      	add	r3, r7
 800f2ee:	2230      	movs	r2, #48	; 0x30
 800f2f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f2f4:	e7ef      	b.n	800f2d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2f8:	2b1f      	cmp	r3, #31
 800f2fa:	d827      	bhi.n	800f34c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800f2fc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f300:	2b00      	cmp	r3, #0
 800f302:	d008      	beq.n	800f316 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800f304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f306:	1c5a      	adds	r2, r3, #1
 800f308:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f30a:	3360      	adds	r3, #96	; 0x60
 800f30c:	443b      	add	r3, r7
 800f30e:	222d      	movs	r2, #45	; 0x2d
 800f310:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f314:	e01a      	b.n	800f34c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800f316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f318:	f003 0304 	and.w	r3, r3, #4
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d008      	beq.n	800f332 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800f320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f322:	1c5a      	adds	r2, r3, #1
 800f324:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f326:	3360      	adds	r3, #96	; 0x60
 800f328:	443b      	add	r3, r7
 800f32a:	222b      	movs	r2, #43	; 0x2b
 800f32c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f330:	e00c      	b.n	800f34c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800f332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f334:	f003 0308 	and.w	r3, r3, #8
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800f33c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f342:	3360      	adds	r3, #96	; 0x60
 800f344:	443b      	add	r3, r7
 800f346:	2220      	movs	r2, #32
 800f348:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800f34c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f34e:	9303      	str	r3, [sp, #12]
 800f350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f352:	9302      	str	r3, [sp, #8]
 800f354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f356:	9301      	str	r3, [sp, #4]
 800f358:	f107 0318 	add.w	r3, r7, #24
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	6939      	ldr	r1, [r7, #16]
 800f364:	6978      	ldr	r0, [r7, #20]
 800f366:	f7ff fba3 	bl	800eab0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800f36a:	4603      	mov	r3, r0
 800f36c:	bf00      	nop
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3764      	adds	r7, #100	; 0x64
 800f372:	46bd      	mov	sp, r7
 800f374:	bd90      	pop	{r4, r7, pc}
 800f376:	bf00      	nop
 800f378:	cccccccd 	.word	0xcccccccd
 800f37c:	66666667 	.word	0x66666667

0800f380 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f384:	b09f      	sub	sp, #124	; 0x7c
 800f386:	af06      	add	r7, sp, #24
 800f388:	6278      	str	r0, [r7, #36]	; 0x24
 800f38a:	6239      	str	r1, [r7, #32]
 800f38c:	61fa      	str	r2, [r7, #28]
 800f38e:	61bb      	str	r3, [r7, #24]
 800f390:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800f394:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f398:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f39c:	f7f1 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d014      	beq.n	800f3d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800f3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3aa:	4bc1      	ldr	r3, [pc, #772]	; (800f6b0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800f3ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f3b0:	f7f1 fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10a      	bne.n	800f3d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800f3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f3be:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f3c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f3c6:	f7f1 fb89 	bl	8000adc <__aeabi_dcmplt>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d012      	beq.n	800f3f6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f3d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3d4:	9302      	str	r3, [sp, #8]
 800f3d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3da:	9301      	str	r3, [sp, #4]
 800f3dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	ed97 0b04 	vldr	d0, [r7, #16]
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	69fa      	ldr	r2, [r7, #28]
 800f3ea:	6a39      	ldr	r1, [r7, #32]
 800f3ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ee:	f7ff fd63 	bl	800eeb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	e23f      	b.n	800f876 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	461e      	mov	r6, r3
 800f3fa:	f04f 0200 	mov.w	r2, #0
 800f3fe:	f04f 0300 	mov.w	r3, #0
 800f402:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f406:	f7f1 fb69 	bl	8000adc <__aeabi_dcmplt>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800f410:	2300      	movs	r3, #0
 800f412:	461e      	mov	r6, r3
 800f414:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800f418:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d009      	beq.n	800f434 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	603b      	str	r3, [r7, #0]
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f42a:	607b      	str	r3, [r7, #4]
 800f42c:	ed97 7b00 	vldr	d7, [r7]
 800f430:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800f434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d102      	bne.n	800f446 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f440:	2306      	movs	r3, #6
 800f442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800f446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f44a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800f44e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f452:	f04f 0200 	mov.w	r2, #0
 800f456:	f04f 0300 	mov.w	r3, #0
 800f45a:	0d0a      	lsrs	r2, r1, #20
 800f45c:	2300      	movs	r3, #0
 800f45e:	4613      	mov	r3, r2
 800f460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f464:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f468:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800f46a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f46e:	4690      	mov	r8, r2
 800f470:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800f474:	4644      	mov	r4, r8
 800f476:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800f47a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f47e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800f482:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f484:	f7f1 f84e 	bl	8000524 <__aeabi_i2d>
 800f488:	a37d      	add	r3, pc, #500	; (adr r3, 800f680 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800f48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48e:	f7f1 f8b3 	bl	80005f8 <__aeabi_dmul>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4610      	mov	r0, r2
 800f498:	4619      	mov	r1, r3
 800f49a:	a37b      	add	r3, pc, #492	; (adr r3, 800f688 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	f7f0 fef4 	bl	800028c <__adddf3>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4614      	mov	r4, r2
 800f4aa:	461d      	mov	r5, r3
 800f4ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f4b0:	f04f 0200 	mov.w	r2, #0
 800f4b4:	4b7f      	ldr	r3, [pc, #508]	; (800f6b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800f4b6:	f7f0 fee7 	bl	8000288 <__aeabi_dsub>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4610      	mov	r0, r2
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	a373      	add	r3, pc, #460	; (adr r3, 800f690 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f7f1 f896 	bl	80005f8 <__aeabi_dmul>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	4629      	mov	r1, r5
 800f4d4:	f7f0 feda 	bl	800028c <__adddf3>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	460b      	mov	r3, r1
 800f4dc:	4610      	mov	r0, r2
 800f4de:	4619      	mov	r1, r3
 800f4e0:	f7f1 fb3a 	bl	8000b58 <__aeabi_d2iz>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800f4e8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f4ea:	f7f1 f81b 	bl	8000524 <__aeabi_i2d>
 800f4ee:	a36a      	add	r3, pc, #424	; (adr r3, 800f698 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	4619      	mov	r1, r3
 800f500:	f04f 0200 	mov.w	r2, #0
 800f504:	4b6c      	ldr	r3, [pc, #432]	; (800f6b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800f506:	f7f0 fec1 	bl	800028c <__adddf3>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	4610      	mov	r0, r2
 800f510:	4619      	mov	r1, r3
 800f512:	f7f1 fb21 	bl	8000b58 <__aeabi_d2iz>
 800f516:	4603      	mov	r3, r0
 800f518:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800f51a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f51c:	f7f1 f802 	bl	8000524 <__aeabi_i2d>
 800f520:	a35f      	add	r3, pc, #380	; (adr r3, 800f6a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800f522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f526:	f7f1 f867 	bl	80005f8 <__aeabi_dmul>
 800f52a:	4602      	mov	r2, r0
 800f52c:	460b      	mov	r3, r1
 800f52e:	4614      	mov	r4, r2
 800f530:	461d      	mov	r5, r3
 800f532:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f534:	f7f0 fff6 	bl	8000524 <__aeabi_i2d>
 800f538:	a35b      	add	r3, pc, #364	; (adr r3, 800f6a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	f7f1 f85b 	bl	80005f8 <__aeabi_dmul>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	4620      	mov	r0, r4
 800f548:	4629      	mov	r1, r5
 800f54a:	f7f0 fe9d 	bl	8000288 <__aeabi_dsub>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800f556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f55a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800f56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f56c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800f570:	17da      	asrs	r2, r3, #31
 800f572:	469a      	mov	sl, r3
 800f574:	4693      	mov	fp, r2
 800f576:	f04f 0200 	mov.w	r2, #0
 800f57a:	f04f 0300 	mov.w	r3, #0
 800f57e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800f582:	2200      	movs	r2, #0
 800f584:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800f588:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f58c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f590:	4602      	mov	r2, r0
 800f592:	460b      	mov	r3, r1
 800f594:	f7f0 fe7a 	bl	800028c <__adddf3>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4690      	mov	r8, r2
 800f59e:	4699      	mov	r9, r3
 800f5a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f5a4:	f04f 0000 	mov.w	r0, #0
 800f5a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f5ac:	f7f0 fe6c 	bl	8000288 <__aeabi_dsub>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4692      	mov	sl, r2
 800f5b6:	469b      	mov	fp, r3
 800f5b8:	f04f 0200 	mov.w	r2, #0
 800f5bc:	4b3f      	ldr	r3, [pc, #252]	; (800f6bc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800f5be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f5c2:	f7f1 f943 	bl	800084c <__aeabi_ddiv>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	f04f 0200 	mov.w	r2, #0
 800f5d2:	4b3b      	ldr	r3, [pc, #236]	; (800f6c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800f5d4:	f7f0 fe5a 	bl	800028c <__adddf3>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f5e0:	f7f1 f934 	bl	800084c <__aeabi_ddiv>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	f04f 0200 	mov.w	r2, #0
 800f5f0:	4b34      	ldr	r3, [pc, #208]	; (800f6c4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800f5f2:	f7f0 fe4b 	bl	800028c <__adddf3>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f5fe:	f7f1 f925 	bl	800084c <__aeabi_ddiv>
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	4650      	mov	r0, sl
 800f608:	4659      	mov	r1, fp
 800f60a:	f7f0 fe3f 	bl	800028c <__adddf3>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4640      	mov	r0, r8
 800f614:	4649      	mov	r1, r9
 800f616:	f7f1 f919 	bl	800084c <__aeabi_ddiv>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	4610      	mov	r0, r2
 800f620:	4619      	mov	r1, r3
 800f622:	f04f 0200 	mov.w	r2, #0
 800f626:	4b28      	ldr	r3, [pc, #160]	; (800f6c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800f628:	f7f0 fe30 	bl	800028c <__adddf3>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	4620      	mov	r0, r4
 800f632:	4629      	mov	r1, r5
 800f634:	f7f0 ffe0 	bl	80005f8 <__aeabi_dmul>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800f640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f648:	f7f1 fa48 	bl	8000adc <__aeabi_dcmplt>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00d      	beq.n	800f66e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800f652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f654:	3b01      	subs	r3, #1
 800f656:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800f658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f65c:	f04f 0200 	mov.w	r2, #0
 800f660:	4b17      	ldr	r3, [pc, #92]	; (800f6c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800f662:	f7f1 f8f3 	bl	800084c <__aeabi_ddiv>
 800f666:	4602      	mov	r2, r0
 800f668:	460b      	mov	r3, r1
 800f66a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800f66e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f670:	2b63      	cmp	r3, #99	; 0x63
 800f672:	dc2b      	bgt.n	800f6cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800f674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f676:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800f67a:	db27      	blt.n	800f6cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800f67c:	2304      	movs	r3, #4
 800f67e:	e026      	b.n	800f6ce <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800f680:	509f79fb 	.word	0x509f79fb
 800f684:	3fd34413 	.word	0x3fd34413
 800f688:	8b60c8b3 	.word	0x8b60c8b3
 800f68c:	3fc68a28 	.word	0x3fc68a28
 800f690:	636f4361 	.word	0x636f4361
 800f694:	3fd287a7 	.word	0x3fd287a7
 800f698:	0979a371 	.word	0x0979a371
 800f69c:	400a934f 	.word	0x400a934f
 800f6a0:	bbb55516 	.word	0xbbb55516
 800f6a4:	40026bb1 	.word	0x40026bb1
 800f6a8:	fefa39ef 	.word	0xfefa39ef
 800f6ac:	3fe62e42 	.word	0x3fe62e42
 800f6b0:	7fefffff 	.word	0x7fefffff
 800f6b4:	3ff80000 	.word	0x3ff80000
 800f6b8:	3fe00000 	.word	0x3fe00000
 800f6bc:	402c0000 	.word	0x402c0000
 800f6c0:	40240000 	.word	0x40240000
 800f6c4:	40180000 	.word	0x40180000
 800f6c8:	3ff00000 	.word	0x3ff00000
 800f6cc:	2305      	movs	r3, #5
 800f6ce:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800f6d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d03d      	beq.n	800f758 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800f6dc:	a368      	add	r3, pc, #416	; (adr r3, 800f880 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800f6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f6e6:	f7f1 fa0d 	bl	8000b04 <__aeabi_dcmpge>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d024      	beq.n	800f73a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800f6f0:	a365      	add	r3, pc, #404	; (adr r3, 800f888 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f6fa:	f7f1 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d01a      	beq.n	800f73a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800f704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f708:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f70a:	429a      	cmp	r2, r3
 800f70c:	da07      	bge.n	800f71e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800f70e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f714:	1ad3      	subs	r3, r2, r3
 800f716:	3b01      	subs	r3, #1
 800f718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f71c:	e002      	b.n	800f724 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800f724:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f72c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800f730:	2300      	movs	r3, #0
 800f732:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f738:	e00e      	b.n	800f758 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800f73a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00a      	beq.n	800f758 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800f742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d004      	beq.n	800f758 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800f74e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f752:	3b01      	subs	r3, #1
 800f754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800f758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f75c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800f75e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f764:	429a      	cmp	r2, r3
 800f766:	d904      	bls.n	800f772 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800f768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f76a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	657b      	str	r3, [r7, #84]	; 0x54
 800f770:	e001      	b.n	800f776 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800f772:	2300      	movs	r3, #0
 800f774:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800f776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f77a:	f003 0302 	and.w	r3, r3, #2
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d004      	beq.n	800f78c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800f782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800f788:	2300      	movs	r3, #0
 800f78a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800f78c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d009      	beq.n	800f7a6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800f792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f796:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f79a:	f7f1 f857 	bl	800084c <__aeabi_ddiv>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800f7aa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d006      	beq.n	800f7c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	60bb      	str	r3, [r7, #8]
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f7bc:	60fb      	str	r3, [r7, #12]
 800f7be:	e003      	b.n	800f7c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800f7c0:	ed97 7b04 	vldr	d7, [r7, #16]
 800f7c4:	ed87 7b02 	vstr	d7, [r7, #8]
 800f7c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7d0:	9302      	str	r3, [sp, #8]
 800f7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d4:	9301      	str	r3, [sp, #4]
 800f7d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	ed97 0b02 	vldr	d0, [r7, #8]
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	69fa      	ldr	r2, [r7, #28]
 800f7e4:	6a39      	ldr	r1, [r7, #32]
 800f7e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7e8:	f7ff fb66 	bl	800eeb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800f7ec:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800f7ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d03f      	beq.n	800f874 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800f7f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7f8:	f003 0320 	and.w	r3, r3, #32
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800f800:	2045      	movs	r0, #69	; 0x45
 800f802:	e000      	b.n	800f806 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800f804:	2065      	movs	r0, #101	; 0x65
 800f806:	69fa      	ldr	r2, [r7, #28]
 800f808:	1c53      	adds	r3, r2, #1
 800f80a:	61fb      	str	r3, [r7, #28]
 800f80c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	6a39      	ldr	r1, [r7, #32]
 800f812:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800f814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f816:	2b00      	cmp	r3, #0
 800f818:	bfb8      	it	lt
 800f81a:	425b      	neglt	r3, r3
 800f81c:	4618      	mov	r0, r3
 800f81e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f820:	0fdb      	lsrs	r3, r3, #31
 800f822:	b2db      	uxtb	r3, r3
 800f824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f826:	3a01      	subs	r2, #1
 800f828:	2105      	movs	r1, #5
 800f82a:	9105      	str	r1, [sp, #20]
 800f82c:	9204      	str	r2, [sp, #16]
 800f82e:	2200      	movs	r2, #0
 800f830:	9203      	str	r2, [sp, #12]
 800f832:	220a      	movs	r2, #10
 800f834:	9202      	str	r2, [sp, #8]
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	9000      	str	r0, [sp, #0]
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	69fa      	ldr	r2, [r7, #28]
 800f83e:	6a39      	ldr	r1, [r7, #32]
 800f840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f842:	f7ff fa61 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800f846:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800f848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f84c:	f003 0302 	and.w	r3, r3, #2
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00f      	beq.n	800f874 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800f854:	69fa      	ldr	r2, [r7, #28]
 800f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f85e:	429a      	cmp	r2, r3
 800f860:	d908      	bls.n	800f874 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800f862:	69fa      	ldr	r2, [r7, #28]
 800f864:	1c53      	adds	r3, r2, #1
 800f866:	61fb      	str	r3, [r7, #28]
 800f868:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f86a:	69bb      	ldr	r3, [r7, #24]
 800f86c:	6a39      	ldr	r1, [r7, #32]
 800f86e:	2020      	movs	r0, #32
 800f870:	47a0      	blx	r4
 800f872:	e7ef      	b.n	800f854 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800f874:	69fb      	ldr	r3, [r7, #28]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3764      	adds	r7, #100	; 0x64
 800f87a:	46bd      	mov	sp, r7
 800f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f880:	eb1c432d 	.word	0xeb1c432d
 800f884:	3f1a36e2 	.word	0x3f1a36e2
 800f888:	00000000 	.word	0x00000000
 800f88c:	412e8480 	.word	0x412e8480

0800f890 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f894:	b0a1      	sub	sp, #132	; 0x84
 800f896:	af0a      	add	r7, sp, #40	; 0x28
 800f898:	60f8      	str	r0, [r7, #12]
 800f89a:	60b9      	str	r1, [r7, #8]
 800f89c:	607a      	str	r2, [r7, #4]
 800f89e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800f8aa:	4ba5      	ldr	r3, [pc, #660]	; (800fb40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800f8ac:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f000 84ae 	beq.w	8010214 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b25      	cmp	r3, #37	; 0x25
 800f8be:	d00d      	beq.n	800f8dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	7818      	ldrb	r0, [r3, #0]
 800f8c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8c6:	1c53      	adds	r3, r2, #1
 800f8c8:	647b      	str	r3, [r7, #68]	; 0x44
 800f8ca:	68fe      	ldr	r6, [r7, #12]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	47b0      	blx	r6
      format++;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	603b      	str	r3, [r7, #0]
      continue;
 800f8d8:	f000 bc9a 	b.w	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	3b20      	subs	r3, #32
 800f8ec:	2b10      	cmp	r3, #16
 800f8ee:	d857      	bhi.n	800f9a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800f8f0:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800f8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f6:	bf00      	nop
 800f8f8:	0800f979 	.word	0x0800f979
 800f8fc:	0800f9a1 	.word	0x0800f9a1
 800f900:	0800f9a1 	.word	0x0800f9a1
 800f904:	0800f98d 	.word	0x0800f98d
 800f908:	0800f9a1 	.word	0x0800f9a1
 800f90c:	0800f9a1 	.word	0x0800f9a1
 800f910:	0800f9a1 	.word	0x0800f9a1
 800f914:	0800f9a1 	.word	0x0800f9a1
 800f918:	0800f9a1 	.word	0x0800f9a1
 800f91c:	0800f9a1 	.word	0x0800f9a1
 800f920:	0800f9a1 	.word	0x0800f9a1
 800f924:	0800f965 	.word	0x0800f965
 800f928:	0800f9a1 	.word	0x0800f9a1
 800f92c:	0800f951 	.word	0x0800f951
 800f930:	0800f9a1 	.word	0x0800f9a1
 800f934:	0800f9a1 	.word	0x0800f9a1
 800f938:	0800f93d 	.word	0x0800f93d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800f93c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f93e:	f043 0301 	orr.w	r3, r3, #1
 800f942:	657b      	str	r3, [r7, #84]	; 0x54
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	3301      	adds	r3, #1
 800f948:	603b      	str	r3, [r7, #0]
 800f94a:	2301      	movs	r3, #1
 800f94c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f94e:	e02a      	b.n	800f9a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800f950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f952:	f043 0302 	orr.w	r3, r3, #2
 800f956:	657b      	str	r3, [r7, #84]	; 0x54
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	3301      	adds	r3, #1
 800f95c:	603b      	str	r3, [r7, #0]
 800f95e:	2301      	movs	r3, #1
 800f960:	64bb      	str	r3, [r7, #72]	; 0x48
 800f962:	e020      	b.n	800f9a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800f964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f966:	f043 0304 	orr.w	r3, r3, #4
 800f96a:	657b      	str	r3, [r7, #84]	; 0x54
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	3301      	adds	r3, #1
 800f970:	603b      	str	r3, [r7, #0]
 800f972:	2301      	movs	r3, #1
 800f974:	64bb      	str	r3, [r7, #72]	; 0x48
 800f976:	e016      	b.n	800f9a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800f978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97a:	f043 0308 	orr.w	r3, r3, #8
 800f97e:	657b      	str	r3, [r7, #84]	; 0x54
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	603b      	str	r3, [r7, #0]
 800f986:	2301      	movs	r3, #1
 800f988:	64bb      	str	r3, [r7, #72]	; 0x48
 800f98a:	e00c      	b.n	800f9a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800f98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f98e:	f043 0310 	orr.w	r3, r3, #16
 800f992:	657b      	str	r3, [r7, #84]	; 0x54
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	3301      	adds	r3, #1
 800f998:	603b      	str	r3, [r7, #0]
 800f99a:	2301      	movs	r3, #1
 800f99c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f99e:	e002      	b.n	800f9a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9a4:	bf00      	nop
      }
    } while (n);
 800f9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d000      	beq.n	800f9ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800f9ac:	e79b      	b.n	800f8e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7ff f842 	bl	800ea40 <_ZL9_is_digitc>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d005      	beq.n	800f9ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800f9c2:	463b      	mov	r3, r7
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7ff f84f 	bl	800ea68 <_ZL5_atoiPPKc>
 800f9ca:	6538      	str	r0, [r7, #80]	; 0x50
 800f9cc:	e01a      	b.n	800fa04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b2a      	cmp	r3, #42	; 0x2a
 800f9d4:	d116      	bne.n	800fa04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800f9d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9da:	1d1a      	adds	r2, r3, #4
 800f9dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800f9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	da07      	bge.n	800f9fa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800f9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9ec:	f043 0302 	orr.w	r3, r3, #2
 800f9f0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	425b      	negs	r3, r3
 800f9f6:	653b      	str	r3, [r7, #80]	; 0x50
 800f9f8:	e001      	b.n	800f9fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800f9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	3301      	adds	r3, #1
 800fa02:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800fa04:	2300      	movs	r3, #0
 800fa06:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b2e      	cmp	r3, #46	; 0x2e
 800fa0e:	d126      	bne.n	800fa5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800fa10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fa16:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7ff f80c 	bl	800ea40 <_ZL9_is_digitc>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d005      	beq.n	800fa3a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800fa2e:	463b      	mov	r3, r7
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff f819 	bl	800ea68 <_ZL5_atoiPPKc>
 800fa36:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fa38:	e011      	b.n	800fa5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa40:	d10d      	bne.n	800fa5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800fa42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa46:	1d1a      	adds	r2, r3, #4
 800fa48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fa56:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	3b68      	subs	r3, #104	; 0x68
 800fa64:	2b12      	cmp	r3, #18
 800fa66:	d867      	bhi.n	800fb38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800fa68:	a201      	add	r2, pc, #4	; (adr r2, 800fa70 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800fa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6e:	bf00      	nop
 800fa70:	0800fae3 	.word	0x0800fae3
 800fa74:	0800fb39 	.word	0x0800fb39
 800fa78:	0800fb19 	.word	0x0800fb19
 800fa7c:	0800fb39 	.word	0x0800fb39
 800fa80:	0800fabd 	.word	0x0800fabd
 800fa84:	0800fb39 	.word	0x0800fb39
 800fa88:	0800fb39 	.word	0x0800fb39
 800fa8c:	0800fb39 	.word	0x0800fb39
 800fa90:	0800fb39 	.word	0x0800fb39
 800fa94:	0800fb39 	.word	0x0800fb39
 800fa98:	0800fb39 	.word	0x0800fb39
 800fa9c:	0800fb39 	.word	0x0800fb39
 800faa0:	0800fb09 	.word	0x0800fb09
 800faa4:	0800fb39 	.word	0x0800fb39
 800faa8:	0800fb39 	.word	0x0800fb39
 800faac:	0800fb39 	.word	0x0800fb39
 800fab0:	0800fb39 	.word	0x0800fb39
 800fab4:	0800fb39 	.word	0x0800fb39
 800fab8:	0800fb29 	.word	0x0800fb29
      case 'l' :
        flags |= FLAGS_LONG;
 800fabc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fabe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fac2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	3301      	adds	r3, #1
 800fac8:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	2b6c      	cmp	r3, #108	; 0x6c
 800fad0:	d134      	bne.n	800fb3c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800fad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fad8:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	603b      	str	r3, [r7, #0]
        }
        break;
 800fae0:	e02c      	b.n	800fb3c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800fae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fae8:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	3301      	adds	r3, #1
 800faee:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b68      	cmp	r3, #104	; 0x68
 800faf6:	d125      	bne.n	800fb44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800faf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fafe:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	3301      	adds	r3, #1
 800fb04:	603b      	str	r3, [r7, #0]
        }
        break;
 800fb06:	e01d      	b.n	800fb44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb0e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	3301      	adds	r3, #1
 800fb14:	603b      	str	r3, [r7, #0]
        break;
 800fb16:	e016      	b.n	800fb46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb1e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	3301      	adds	r3, #1
 800fb24:	603b      	str	r3, [r7, #0]
        break;
 800fb26:	e00e      	b.n	800fb46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb2e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	3301      	adds	r3, #1
 800fb34:	603b      	str	r3, [r7, #0]
        break;
 800fb36:	e006      	b.n	800fb46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800fb38:	bf00      	nop
 800fb3a:	e004      	b.n	800fb46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800fb3c:	bf00      	nop
 800fb3e:	e002      	b.n	800fb46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800fb40:	0800e9bb 	.word	0x0800e9bb
        break;
 800fb44:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	3b25      	subs	r3, #37	; 0x25
 800fb4c:	2b53      	cmp	r3, #83	; 0x53
 800fb4e:	f200 8352 	bhi.w	80101f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800fb52:	a201      	add	r2, pc, #4	; (adr r2, 800fb58 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800fb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb58:	080101df 	.word	0x080101df
 800fb5c:	080101f7 	.word	0x080101f7
 800fb60:	080101f7 	.word	0x080101f7
 800fb64:	080101f7 	.word	0x080101f7
 800fb68:	080101f7 	.word	0x080101f7
 800fb6c:	080101f7 	.word	0x080101f7
 800fb70:	080101f7 	.word	0x080101f7
 800fb74:	080101f7 	.word	0x080101f7
 800fb78:	080101f7 	.word	0x080101f7
 800fb7c:	080101f7 	.word	0x080101f7
 800fb80:	080101f7 	.word	0x080101f7
 800fb84:	080101f7 	.word	0x080101f7
 800fb88:	080101f7 	.word	0x080101f7
 800fb8c:	080101f7 	.word	0x080101f7
 800fb90:	080101f7 	.word	0x080101f7
 800fb94:	080101f7 	.word	0x080101f7
 800fb98:	080101f7 	.word	0x080101f7
 800fb9c:	080101f7 	.word	0x080101f7
 800fba0:	080101f7 	.word	0x080101f7
 800fba4:	080101f7 	.word	0x080101f7
 800fba8:	080101f7 	.word	0x080101f7
 800fbac:	080101f7 	.word	0x080101f7
 800fbb0:	080101f7 	.word	0x080101f7
 800fbb4:	080101f7 	.word	0x080101f7
 800fbb8:	080101f7 	.word	0x080101f7
 800fbbc:	080101f7 	.word	0x080101f7
 800fbc0:	080101f7 	.word	0x080101f7
 800fbc4:	080101f7 	.word	0x080101f7
 800fbc8:	080101f7 	.word	0x080101f7
 800fbcc:	080101f7 	.word	0x080101f7
 800fbd0:	080101f7 	.word	0x080101f7
 800fbd4:	080101f7 	.word	0x080101f7
 800fbd8:	0800ffad 	.word	0x0800ffad
 800fbdc:	0800ff5d 	.word	0x0800ff5d
 800fbe0:	0800ffad 	.word	0x0800ffad
 800fbe4:	080101f7 	.word	0x080101f7
 800fbe8:	080101f7 	.word	0x080101f7
 800fbec:	080101f7 	.word	0x080101f7
 800fbf0:	080101f7 	.word	0x080101f7
 800fbf4:	080101f7 	.word	0x080101f7
 800fbf8:	080101f7 	.word	0x080101f7
 800fbfc:	080101f7 	.word	0x080101f7
 800fc00:	080101f7 	.word	0x080101f7
 800fc04:	080101f7 	.word	0x080101f7
 800fc08:	080101f7 	.word	0x080101f7
 800fc0c:	080101f7 	.word	0x080101f7
 800fc10:	080101f7 	.word	0x080101f7
 800fc14:	080101f7 	.word	0x080101f7
 800fc18:	080101f7 	.word	0x080101f7
 800fc1c:	080101f7 	.word	0x080101f7
 800fc20:	080101f7 	.word	0x080101f7
 800fc24:	0800fca9 	.word	0x0800fca9
 800fc28:	080101f7 	.word	0x080101f7
 800fc2c:	080101f7 	.word	0x080101f7
 800fc30:	080101f7 	.word	0x080101f7
 800fc34:	080101f7 	.word	0x080101f7
 800fc38:	080101f7 	.word	0x080101f7
 800fc3c:	080101f7 	.word	0x080101f7
 800fc40:	080101f7 	.word	0x080101f7
 800fc44:	080101f7 	.word	0x080101f7
 800fc48:	080101f7 	.word	0x080101f7
 800fc4c:	0800fca9 	.word	0x0800fca9
 800fc50:	0801001d 	.word	0x0801001d
 800fc54:	0800fca9 	.word	0x0800fca9
 800fc58:	0800ffad 	.word	0x0800ffad
 800fc5c:	0800ff5d 	.word	0x0800ff5d
 800fc60:	0800ffad 	.word	0x0800ffad
 800fc64:	080101f7 	.word	0x080101f7
 800fc68:	0800fca9 	.word	0x0800fca9
 800fc6c:	080101f7 	.word	0x080101f7
 800fc70:	080101f7 	.word	0x080101f7
 800fc74:	080101f7 	.word	0x080101f7
 800fc78:	080101f7 	.word	0x080101f7
 800fc7c:	080101f7 	.word	0x080101f7
 800fc80:	0800fca9 	.word	0x0800fca9
 800fc84:	08010193 	.word	0x08010193
 800fc88:	080101f7 	.word	0x080101f7
 800fc8c:	080101f7 	.word	0x080101f7
 800fc90:	080100a9 	.word	0x080100a9
 800fc94:	080101f7 	.word	0x080101f7
 800fc98:	0800fca9 	.word	0x0800fca9
 800fc9c:	080101f7 	.word	0x080101f7
 800fca0:	080101f7 	.word	0x080101f7
 800fca4:	0800fca9 	.word	0x0800fca9
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b78      	cmp	r3, #120	; 0x78
 800fcae:	d003      	beq.n	800fcb8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b58      	cmp	r3, #88	; 0x58
 800fcb6:	d102      	bne.n	800fcbe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800fcb8:	2310      	movs	r3, #16
 800fcba:	643b      	str	r3, [r7, #64]	; 0x40
 800fcbc:	e013      	b.n	800fce6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b6f      	cmp	r3, #111	; 0x6f
 800fcc4:	d102      	bne.n	800fccc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800fcc6:	2308      	movs	r3, #8
 800fcc8:	643b      	str	r3, [r7, #64]	; 0x40
 800fcca:	e00c      	b.n	800fce6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b62      	cmp	r3, #98	; 0x62
 800fcd2:	d102      	bne.n	800fcda <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800fcd4:	2302      	movs	r3, #2
 800fcd6:	643b      	str	r3, [r7, #64]	; 0x40
 800fcd8:	e005      	b.n	800fce6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800fcda:	230a      	movs	r3, #10
 800fcdc:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800fcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fce0:	f023 0310 	bic.w	r3, r3, #16
 800fce4:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	2b58      	cmp	r3, #88	; 0x58
 800fcec:	d103      	bne.n	800fcf6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800fcee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcf0:	f043 0320 	orr.w	r3, r3, #32
 800fcf4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	2b69      	cmp	r3, #105	; 0x69
 800fcfc:	d007      	beq.n	800fd0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	2b64      	cmp	r3, #100	; 0x64
 800fd04:	d003      	beq.n	800fd0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800fd06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd08:	f023 030c 	bic.w	r3, r3, #12
 800fd0c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800fd0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d003      	beq.n	800fd20 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800fd18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd1a:	f023 0301 	bic.w	r3, r3, #1
 800fd1e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	2b69      	cmp	r3, #105	; 0x69
 800fd26:	d004      	beq.n	800fd32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b64      	cmp	r3, #100	; 0x64
 800fd2e:	f040 8097 	bne.w	800fe60 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800fd32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d030      	beq.n	800fd9e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800fd3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd40:	3307      	adds	r3, #7
 800fd42:	f023 0307 	bic.w	r3, r3, #7
 800fd46:	f103 0208 	add.w	r2, r3, #8
 800fd4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fd56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	da05      	bge.n	800fd6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800fd5e:	2100      	movs	r1, #0
 800fd60:	4254      	negs	r4, r2
 800fd62:	eb61 0503 	sbc.w	r5, r1, r3
 800fd66:	4622      	mov	r2, r4
 800fd68:	462b      	mov	r3, r5
 800fd6a:	6979      	ldr	r1, [r7, #20]
 800fd6c:	0fc9      	lsrs	r1, r1, #31
 800fd6e:	b2c9      	uxtb	r1, r1
 800fd70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fd72:	2600      	movs	r6, #0
 800fd74:	4680      	mov	r8, r0
 800fd76:	46b1      	mov	r9, r6
 800fd78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd7a:	9008      	str	r0, [sp, #32]
 800fd7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fd7e:	9007      	str	r0, [sp, #28]
 800fd80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd82:	9006      	str	r0, [sp, #24]
 800fd84:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800fd88:	9102      	str	r1, [sp, #8]
 800fd8a:	e9cd 2300 	strd	r2, r3, [sp]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd92:	68b9      	ldr	r1, [r7, #8]
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f7ff f81e 	bl	800edd6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800fd9a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800fd9c:	e0da      	b.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800fd9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d020      	beq.n	800fdea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800fda8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fdac:	1d1a      	adds	r2, r3, #4
 800fdae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	bfb8      	it	lt
 800fdbc:	425b      	neglt	r3, r3
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	0fdb      	lsrs	r3, r3, #31
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fdc8:	9205      	str	r2, [sp, #20]
 800fdca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdcc:	9204      	str	r2, [sp, #16]
 800fdce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdd0:	9203      	str	r2, [sp, #12]
 800fdd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdd4:	9202      	str	r2, [sp, #8]
 800fdd6:	9301      	str	r3, [sp, #4]
 800fdd8:	9100      	str	r1, [sp, #0]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f7fe ff91 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800fde6:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800fde8:	e0b4      	b.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800fdea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d007      	beq.n	800fe04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800fdf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fdf8:	1d1a      	adds	r2, r3, #4
 800fdfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	e012      	b.n	800fe2a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800fe04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d007      	beq.n	800fe1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800fe0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe12:	1d1a      	adds	r2, r3, #4
 800fe14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	b21b      	sxth	r3, r3
 800fe1c:	e005      	b.n	800fe2a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800fe1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe22:	1d1a      	adds	r2, r3, #4
 800fe24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fe2c:	6a3b      	ldr	r3, [r7, #32]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	bfb8      	it	lt
 800fe32:	425b      	neglt	r3, r3
 800fe34:	4619      	mov	r1, r3
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	0fdb      	lsrs	r3, r3, #31
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe3e:	9205      	str	r2, [sp, #20]
 800fe40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe42:	9204      	str	r2, [sp, #16]
 800fe44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe46:	9203      	str	r2, [sp, #12]
 800fe48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe4a:	9202      	str	r2, [sp, #8]
 800fe4c:	9301      	str	r3, [sp, #4]
 800fe4e:	9100      	str	r1, [sp, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe54:	68b9      	ldr	r1, [r7, #8]
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7fe ff56 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800fe5c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800fe5e:	e079      	b.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800fe60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d022      	beq.n	800feb0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800fe6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe6e:	3307      	adds	r3, #7
 800fe70:	f023 0307 	bic.w	r3, r3, #7
 800fe74:	f103 0208 	add.w	r2, r3, #8
 800fe78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe82:	2000      	movs	r0, #0
 800fe84:	468a      	mov	sl, r1
 800fe86:	4683      	mov	fp, r0
 800fe88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe8a:	9108      	str	r1, [sp, #32]
 800fe8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe8e:	9107      	str	r1, [sp, #28]
 800fe90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe92:	9106      	str	r1, [sp, #24]
 800fe94:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800fe98:	2100      	movs	r1, #0
 800fe9a:	9102      	str	r1, [sp, #8]
 800fe9c:	e9cd 2300 	strd	r2, r3, [sp]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fea4:	68b9      	ldr	r1, [r7, #8]
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7fe ff95 	bl	800edd6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800feac:	6478      	str	r0, [r7, #68]	; 0x44
 800feae:	e051      	b.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800feb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d018      	beq.n	800feec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800feba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800febe:	1d1a      	adds	r2, r3, #4
 800fec0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fec8:	9205      	str	r2, [sp, #20]
 800feca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fecc:	9204      	str	r2, [sp, #16]
 800fece:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fed0:	9203      	str	r2, [sp, #12]
 800fed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fed4:	9202      	str	r2, [sp, #8]
 800fed6:	2200      	movs	r2, #0
 800fed8:	9201      	str	r2, [sp, #4]
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fee0:	68b9      	ldr	r1, [r7, #8]
 800fee2:	68f8      	ldr	r0, [r7, #12]
 800fee4:	f7fe ff10 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800fee8:	6478      	str	r0, [r7, #68]	; 0x44
 800feea:	e033      	b.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800feec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800fef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fefa:	1d1a      	adds	r2, r3, #4
 800fefc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	e012      	b.n	800ff2c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800ff06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d007      	beq.n	800ff20 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800ff10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff14:	1d1a      	adds	r2, r3, #4
 800ff16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	e005      	b.n	800ff2c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800ff20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff24:	1d1a      	adds	r2, r3, #4
 800ff26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ff2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff30:	9305      	str	r3, [sp, #20]
 800ff32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff34:	9304      	str	r3, [sp, #16]
 800ff36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff38:	9303      	str	r3, [sp, #12]
 800ff3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff3c:	9302      	str	r3, [sp, #8]
 800ff3e:	2300      	movs	r3, #0
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff4a:	68b9      	ldr	r1, [r7, #8]
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f7fe fedb 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ff52:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	3301      	adds	r3, #1
 800ff58:	603b      	str	r3, [r7, #0]
        break;
 800ff5a:	e159      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	2b46      	cmp	r3, #70	; 0x46
 800ff62:	d103      	bne.n	800ff6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800ff64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff66:	f043 0320 	orr.w	r3, r3, #32
 800ff6a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ff6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff70:	3307      	adds	r3, #7
 800ff72:	f023 0307 	bic.w	r3, r3, #7
 800ff76:	f103 0208 	add.w	r2, r3, #8
 800ff7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff7e:	ed93 7b00 	vldr	d7, [r3]
 800ff82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff84:	9302      	str	r3, [sp, #8]
 800ff86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff88:	9301      	str	r3, [sp, #4]
 800ff8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff8c:	9300      	str	r3, [sp, #0]
 800ff8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ff92:	eef0 0a67 	vmov.f32	s1, s15
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff9a:	68b9      	ldr	r1, [r7, #8]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f7fe ff8b 	bl	800eeb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800ffa2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	603b      	str	r3, [r7, #0]
        break;
 800ffaa:	e131      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	2b67      	cmp	r3, #103	; 0x67
 800ffb2:	d003      	beq.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	2b47      	cmp	r3, #71	; 0x47
 800ffba:	d103      	bne.n	800ffc4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800ffbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ffc2:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b45      	cmp	r3, #69	; 0x45
 800ffca:	d003      	beq.n	800ffd4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2b47      	cmp	r3, #71	; 0x47
 800ffd2:	d103      	bne.n	800ffdc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800ffd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffd6:	f043 0320 	orr.w	r3, r3, #32
 800ffda:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ffdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffe0:	3307      	adds	r3, #7
 800ffe2:	f023 0307 	bic.w	r3, r3, #7
 800ffe6:	f103 0208 	add.w	r2, r3, #8
 800ffea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ffee:	ed93 7b00 	vldr	d7, [r3]
 800fff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fff4:	9302      	str	r3, [sp, #8]
 800fff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	eeb0 0a47 	vmov.f32	s0, s14
 8010002:	eef0 0a67 	vmov.f32	s1, s15
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801000a:	68b9      	ldr	r1, [r7, #8]
 801000c:	68f8      	ldr	r0, [r7, #12]
 801000e:	f7ff f9b7 	bl	800f380 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8010012:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	3301      	adds	r3, #1
 8010018:	603b      	str	r3, [r7, #0]
        break;
 801001a:	e0f9      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 801001c:	2301      	movs	r3, #1
 801001e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8010020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010022:	f003 0302 	and.w	r3, r3, #2
 8010026:	2b00      	cmp	r3, #0
 8010028:	d113      	bne.n	8010052 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 801002a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002c:	1c5a      	adds	r2, r3, #1
 801002e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010032:	429a      	cmp	r2, r3
 8010034:	bf8c      	ite	hi
 8010036:	2301      	movhi	r3, #1
 8010038:	2300      	movls	r3, #0
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b00      	cmp	r3, #0
 801003e:	d008      	beq.n	8010052 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8010040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010042:	1c53      	adds	r3, r2, #1
 8010044:	647b      	str	r3, [r7, #68]	; 0x44
 8010046:	68fe      	ldr	r6, [r7, #12]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68b9      	ldr	r1, [r7, #8]
 801004c:	2020      	movs	r0, #32
 801004e:	47b0      	blx	r6
          while (l++ < width) {
 8010050:	e7eb      	b.n	801002a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8010052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010056:	1d1a      	adds	r2, r3, #4
 8010058:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	b2d8      	uxtb	r0, r3
 8010060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010062:	1c53      	adds	r3, r2, #1
 8010064:	647b      	str	r3, [r7, #68]	; 0x44
 8010066:	68fe      	ldr	r6, [r7, #12]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68b9      	ldr	r1, [r7, #8]
 801006c:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 801006e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010070:	f003 0302 	and.w	r3, r3, #2
 8010074:	2b00      	cmp	r3, #0
 8010076:	d013      	beq.n	80100a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8010078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007a:	1c5a      	adds	r2, r3, #1
 801007c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801007e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010080:	429a      	cmp	r2, r3
 8010082:	bf8c      	ite	hi
 8010084:	2301      	movhi	r3, #1
 8010086:	2300      	movls	r3, #0
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b00      	cmp	r3, #0
 801008c:	d008      	beq.n	80100a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 801008e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010090:	1c53      	adds	r3, r2, #1
 8010092:	647b      	str	r3, [r7, #68]	; 0x44
 8010094:	68fe      	ldr	r6, [r7, #12]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	68b9      	ldr	r1, [r7, #8]
 801009a:	2020      	movs	r0, #32
 801009c:	47b0      	blx	r6
          while (l++ < width) {
 801009e:	e7eb      	b.n	8010078 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	3301      	adds	r3, #1
 80100a4:	603b      	str	r3, [r7, #0]
        break;
 80100a6:	e0b3      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80100a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100ac:	1d1a      	adds	r2, r3, #4
 80100ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80100b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d001      	beq.n	80100c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 80100bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100be:	e001      	b.n	80100c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 80100c0:	f04f 33ff 	mov.w	r3, #4294967295
 80100c4:	4619      	mov	r1, r3
 80100c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100c8:	f7fe fc98 	bl	800e9fc <_ZL10_strnlen_sPKcj>
 80100cc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80100ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d007      	beq.n	80100e8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 80100d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100dc:	429a      	cmp	r2, r3
 80100de:	d201      	bcs.n	80100e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 80100e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e2:	e000      	b.n	80100e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 80100e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 80100e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100ea:	f003 0302 	and.w	r3, r3, #2
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d113      	bne.n	801011a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f4:	1c5a      	adds	r2, r3, #1
 80100f6:	637a      	str	r2, [r7, #52]	; 0x34
 80100f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100fa:	429a      	cmp	r2, r3
 80100fc:	bf8c      	ite	hi
 80100fe:	2301      	movhi	r3, #1
 8010100:	2300      	movls	r3, #0
 8010102:	b2db      	uxtb	r3, r3
 8010104:	2b00      	cmp	r3, #0
 8010106:	d008      	beq.n	801011a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8010108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801010a:	1c53      	adds	r3, r2, #1
 801010c:	647b      	str	r3, [r7, #68]	; 0x44
 801010e:	68fe      	ldr	r6, [r7, #12]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	68b9      	ldr	r1, [r7, #8]
 8010114:	2020      	movs	r0, #32
 8010116:	47b0      	blx	r6
          while (l++ < width) {
 8010118:	e7eb      	b.n	80100f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801011a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00b      	beq.n	801013a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8010122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010128:	2b00      	cmp	r3, #0
 801012a:	d004      	beq.n	8010136 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 801012c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801012e:	1e5a      	subs	r2, r3, #1
 8010130:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8010136:	2301      	movs	r3, #1
 8010138:	e000      	b.n	801013c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 801013a:	2300      	movs	r3, #0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d00b      	beq.n	8010158 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	1c5a      	adds	r2, r3, #1
 8010144:	63ba      	str	r2, [r7, #56]	; 0x38
 8010146:	7818      	ldrb	r0, [r3, #0]
 8010148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801014a:	1c53      	adds	r3, r2, #1
 801014c:	647b      	str	r3, [r7, #68]	; 0x44
 801014e:	68fe      	ldr	r6, [r7, #12]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	68b9      	ldr	r1, [r7, #8]
 8010154:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010156:	e7e0      	b.n	801011a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8010158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801015a:	f003 0302 	and.w	r3, r3, #2
 801015e:	2b00      	cmp	r3, #0
 8010160:	d013      	beq.n	801018a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8010162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010164:	1c5a      	adds	r2, r3, #1
 8010166:	637a      	str	r2, [r7, #52]	; 0x34
 8010168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801016a:	429a      	cmp	r2, r3
 801016c:	bf8c      	ite	hi
 801016e:	2301      	movhi	r3, #1
 8010170:	2300      	movls	r3, #0
 8010172:	b2db      	uxtb	r3, r3
 8010174:	2b00      	cmp	r3, #0
 8010176:	d008      	beq.n	801018a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8010178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801017a:	1c53      	adds	r3, r2, #1
 801017c:	647b      	str	r3, [r7, #68]	; 0x44
 801017e:	68fe      	ldr	r6, [r7, #12]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	68b9      	ldr	r1, [r7, #8]
 8010184:	2020      	movs	r0, #32
 8010186:	47b0      	blx	r6
          while (l++ < width) {
 8010188:	e7eb      	b.n	8010162 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	3301      	adds	r3, #1
 801018e:	603b      	str	r3, [r7, #0]
        break;
 8010190:	e03e      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8010192:	2308      	movs	r3, #8
 8010194:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8010196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010198:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 801019c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 801019e:	2300      	movs	r3, #0
 80101a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80101a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	461a      	mov	r2, r3
 80101b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101b4:	9305      	str	r3, [sp, #20]
 80101b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101b8:	9304      	str	r3, [sp, #16]
 80101ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101bc:	9303      	str	r3, [sp, #12]
 80101be:	2310      	movs	r3, #16
 80101c0:	9302      	str	r3, [sp, #8]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9301      	str	r3, [sp, #4]
 80101c6:	9200      	str	r2, [sp, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101cc:	68b9      	ldr	r1, [r7, #8]
 80101ce:	68f8      	ldr	r0, [r7, #12]
 80101d0:	f7fe fd9a 	bl	800ed08 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80101d4:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	3301      	adds	r3, #1
 80101da:	603b      	str	r3, [r7, #0]
        break;
 80101dc:	e018      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80101de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101e0:	1c53      	adds	r3, r2, #1
 80101e2:	647b      	str	r3, [r7, #68]	; 0x44
 80101e4:	68fe      	ldr	r6, [r7, #12]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	68b9      	ldr	r1, [r7, #8]
 80101ea:	2025      	movs	r0, #37	; 0x25
 80101ec:	47b0      	blx	r6
        format++;
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	3301      	adds	r3, #1
 80101f2:	603b      	str	r3, [r7, #0]
        break;
 80101f4:	e00c      	b.n	8010210 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	7818      	ldrb	r0, [r3, #0]
 80101fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101fc:	1c53      	adds	r3, r2, #1
 80101fe:	647b      	str	r3, [r7, #68]	; 0x44
 8010200:	68fe      	ldr	r6, [r7, #12]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68b9      	ldr	r1, [r7, #8]
 8010206:	47b0      	blx	r6
        format++;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	3301      	adds	r3, #1
 801020c:	603b      	str	r3, [r7, #0]
        break;
 801020e:	bf00      	nop
  while (*format)
 8010210:	f7ff bb4d 	b.w	800f8ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8010214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	429a      	cmp	r2, r3
 801021a:	d302      	bcc.n	8010222 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	1e5a      	subs	r2, r3, #1
 8010220:	e000      	b.n	8010224 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8010222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010224:	68fc      	ldr	r4, [r7, #12]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	68b9      	ldr	r1, [r7, #8]
 801022a:	2000      	movs	r0, #0
 801022c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 801022e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010230:	4618      	mov	r0, r3
 8010232:	375c      	adds	r7, #92	; 0x5c
 8010234:	46bd      	mov	sp, r7
 8010236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023a:	bf00      	nop

0801023c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 801023c:	b40f      	push	{r0, r1, r2, r3}
 801023e:	b580      	push	{r7, lr}
 8010240:	b086      	sub	sp, #24
 8010242:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8010244:	f107 031c 	add.w	r3, r7, #28
 8010248:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 801024a:	1d39      	adds	r1, r7, #4
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	9300      	str	r3, [sp, #0]
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	f04f 32ff 	mov.w	r2, #4294967295
 8010256:	4806      	ldr	r0, [pc, #24]	; (8010270 <printf_+0x34>)
 8010258:	f7ff fb1a 	bl	800f890 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 801025c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 801025e:	68fb      	ldr	r3, [r7, #12]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801026a:	b004      	add	sp, #16
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	0800e9d7 	.word	0x0800e9d7

08010274 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801027c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010280:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8010284:	f003 0301 	and.w	r3, r3, #1
 8010288:	2b00      	cmp	r3, #0
 801028a:	d009      	beq.n	80102a0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801028c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010290:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8010294:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <ITM_SendChar+0x2c>
 801029c:	2301      	movs	r3, #1
 801029e:	e000      	b.n	80102a2 <ITM_SendChar+0x2e>
 80102a0:	2300      	movs	r3, #0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d010      	beq.n	80102c8 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80102a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	bf0c      	ite	eq
 80102b0:	2301      	moveq	r3, #1
 80102b2:	2300      	movne	r3, #0
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d001      	beq.n	80102be <ITM_SendChar+0x4a>
    {
      __NOP();
 80102ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80102bc:	e7f3      	b.n	80102a6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80102be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	b2d2      	uxtb	r2, r2
 80102c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80102c8:	687b      	ldr	r3, [r7, #4]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr

080102d6 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b082      	sub	sp, #8
 80102da:	af00      	add	r7, sp, #0
 80102dc:	4603      	mov	r3, r0
 80102de:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff ffc6 	bl	8010274 <ITM_SendChar>
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <__NVIC_SetPriority>:
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	6039      	str	r1, [r7, #0]
 80102fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80102fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010300:	2b00      	cmp	r3, #0
 8010302:	db0a      	blt.n	801031a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	b2da      	uxtb	r2, r3
 8010308:	490c      	ldr	r1, [pc, #48]	; (801033c <__NVIC_SetPriority+0x4c>)
 801030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801030e:	0112      	lsls	r2, r2, #4
 8010310:	b2d2      	uxtb	r2, r2
 8010312:	440b      	add	r3, r1
 8010314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010318:	e00a      	b.n	8010330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	b2da      	uxtb	r2, r3
 801031e:	4908      	ldr	r1, [pc, #32]	; (8010340 <__NVIC_SetPriority+0x50>)
 8010320:	79fb      	ldrb	r3, [r7, #7]
 8010322:	f003 030f 	and.w	r3, r3, #15
 8010326:	3b04      	subs	r3, #4
 8010328:	0112      	lsls	r2, r2, #4
 801032a:	b2d2      	uxtb	r2, r2
 801032c:	440b      	add	r3, r1
 801032e:	761a      	strb	r2, [r3, #24]
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr
 801033c:	e000e100 	.word	0xe000e100
 8010340:	e000ed00 	.word	0xe000ed00

08010344 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010344:	b580      	push	{r7, lr}
 8010346:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010348:	4b05      	ldr	r3, [pc, #20]	; (8010360 <SysTick_Handler+0x1c>)
 801034a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801034c:	f003 f8d0 	bl	80134f0 <xTaskGetSchedulerState>
 8010350:	4603      	mov	r3, r0
 8010352:	2b01      	cmp	r3, #1
 8010354:	d001      	beq.n	801035a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010356:	f004 f8f7 	bl	8014548 <xPortSysTickHandler>
  }
}
 801035a:	bf00      	nop
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	e000e010 	.word	0xe000e010

08010364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010364:	b580      	push	{r7, lr}
 8010366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010368:	2100      	movs	r1, #0
 801036a:	f06f 0004 	mvn.w	r0, #4
 801036e:	f7ff ffbf 	bl	80102f0 <__NVIC_SetPriority>
#endif
}
 8010372:	bf00      	nop
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801037e:	f3ef 8305 	mrs	r3, IPSR
 8010382:	603b      	str	r3, [r7, #0]
  return(result);
 8010384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801038a:	f06f 0305 	mvn.w	r3, #5
 801038e:	607b      	str	r3, [r7, #4]
 8010390:	e00c      	b.n	80103ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010392:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <osKernelInitialize+0x44>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d105      	bne.n	80103a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801039a:	4b08      	ldr	r3, [pc, #32]	; (80103bc <osKernelInitialize+0x44>)
 801039c:	2201      	movs	r2, #1
 801039e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	607b      	str	r3, [r7, #4]
 80103a4:	e002      	b.n	80103ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80103a6:	f04f 33ff 	mov.w	r3, #4294967295
 80103aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80103ac:	687b      	ldr	r3, [r7, #4]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	200015f8 	.word	0x200015f8

080103c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103c6:	f3ef 8305 	mrs	r3, IPSR
 80103ca:	603b      	str	r3, [r7, #0]
  return(result);
 80103cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d003      	beq.n	80103da <osKernelStart+0x1a>
    stat = osErrorISR;
 80103d2:	f06f 0305 	mvn.w	r3, #5
 80103d6:	607b      	str	r3, [r7, #4]
 80103d8:	e010      	b.n	80103fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80103da:	4b0b      	ldr	r3, [pc, #44]	; (8010408 <osKernelStart+0x48>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d109      	bne.n	80103f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80103e2:	f7ff ffbf 	bl	8010364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80103e6:	4b08      	ldr	r3, [pc, #32]	; (8010408 <osKernelStart+0x48>)
 80103e8:	2202      	movs	r2, #2
 80103ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80103ec:	f002 fbc0 	bl	8012b70 <vTaskStartScheduler>
      stat = osOK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	607b      	str	r3, [r7, #4]
 80103f4:	e002      	b.n	80103fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80103f6:	f04f 33ff 	mov.w	r3, #4294967295
 80103fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80103fc:	687b      	ldr	r3, [r7, #4]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	200015f8 	.word	0x200015f8

0801040c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801040c:	b580      	push	{r7, lr}
 801040e:	b08e      	sub	sp, #56	; 0x38
 8010410:	af04      	add	r7, sp, #16
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010418:	2300      	movs	r3, #0
 801041a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801041c:	f3ef 8305 	mrs	r3, IPSR
 8010420:	617b      	str	r3, [r7, #20]
  return(result);
 8010422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010424:	2b00      	cmp	r3, #0
 8010426:	d17e      	bne.n	8010526 <osThreadNew+0x11a>
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d07b      	beq.n	8010526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801042e:	2380      	movs	r3, #128	; 0x80
 8010430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010432:	2318      	movs	r3, #24
 8010434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801043a:	f04f 33ff 	mov.w	r3, #4294967295
 801043e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d045      	beq.n	80104d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <osThreadNew+0x48>
        name = attr->name;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	699b      	ldr	r3, [r3, #24]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d008      	beq.n	801047a <osThreadNew+0x6e>
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	2b38      	cmp	r3, #56	; 0x38
 801046c:	d805      	bhi.n	801047a <osThreadNew+0x6e>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <osThreadNew+0x72>
        return (NULL);
 801047a:	2300      	movs	r3, #0
 801047c:	e054      	b.n	8010528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d003      	beq.n	801048e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	089b      	lsrs	r3, r3, #2
 801048c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d00e      	beq.n	80104b4 <osThreadNew+0xa8>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	2bbf      	cmp	r3, #191	; 0xbf
 801049c:	d90a      	bls.n	80104b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d006      	beq.n	80104b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	695b      	ldr	r3, [r3, #20]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <osThreadNew+0xa8>
        mem = 1;
 80104ae:	2301      	movs	r3, #1
 80104b0:	61bb      	str	r3, [r7, #24]
 80104b2:	e010      	b.n	80104d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	689b      	ldr	r3, [r3, #8]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d10c      	bne.n	80104d6 <osThreadNew+0xca>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d108      	bne.n	80104d6 <osThreadNew+0xca>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d104      	bne.n	80104d6 <osThreadNew+0xca>
          mem = 0;
 80104cc:	2300      	movs	r3, #0
 80104ce:	61bb      	str	r3, [r7, #24]
 80104d0:	e001      	b.n	80104d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d110      	bne.n	80104fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80104e4:	9202      	str	r2, [sp, #8]
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	6a3a      	ldr	r2, [r7, #32]
 80104f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f002 f94c 	bl	8012790 <xTaskCreateStatic>
 80104f8:	4603      	mov	r3, r0
 80104fa:	613b      	str	r3, [r7, #16]
 80104fc:	e013      	b.n	8010526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d110      	bne.n	8010526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	b29a      	uxth	r2, r3
 8010508:	f107 0310 	add.w	r3, r7, #16
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f002 f997 	bl	801284a <xTaskCreate>
 801051c:	4603      	mov	r3, r0
 801051e:	2b01      	cmp	r3, #1
 8010520:	d001      	beq.n	8010526 <osThreadNew+0x11a>
            hTask = NULL;
 8010522:	2300      	movs	r3, #0
 8010524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010526:	693b      	ldr	r3, [r7, #16]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3728      	adds	r7, #40	; 0x28
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010530:	b580      	push	{r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010538:	f3ef 8305 	mrs	r3, IPSR
 801053c:	60bb      	str	r3, [r7, #8]
  return(result);
 801053e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010540:	2b00      	cmp	r3, #0
 8010542:	d003      	beq.n	801054c <osDelay+0x1c>
    stat = osErrorISR;
 8010544:	f06f 0305 	mvn.w	r3, #5
 8010548:	60fb      	str	r3, [r7, #12]
 801054a:	e007      	b.n	801055c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801054c:	2300      	movs	r3, #0
 801054e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d002      	beq.n	801055c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f002 fad6 	bl	8012b08 <vTaskDelay>
    }
  }

  return (stat);
 801055c:	68fb      	ldr	r3, [r7, #12]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010566:	b580      	push	{r7, lr}
 8010568:	b088      	sub	sp, #32
 801056a:	af00      	add	r7, sp, #0
 801056c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801056e:	2300      	movs	r3, #0
 8010570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010572:	f3ef 8305 	mrs	r3, IPSR
 8010576:	60bb      	str	r3, [r7, #8]
  return(result);
 8010578:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801057a:	2b00      	cmp	r3, #0
 801057c:	d174      	bne.n	8010668 <osMutexNew+0x102>
    if (attr != NULL) {
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d003      	beq.n	801058c <osMutexNew+0x26>
      type = attr->attr_bits;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	61bb      	str	r3, [r7, #24]
 801058a:	e001      	b.n	8010590 <osMutexNew+0x2a>
    } else {
      type = 0U;
 801058c:	2300      	movs	r3, #0
 801058e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	f003 0301 	and.w	r3, r3, #1
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <osMutexNew+0x3a>
      rmtx = 1U;
 801059a:	2301      	movs	r3, #1
 801059c:	617b      	str	r3, [r7, #20]
 801059e:	e001      	b.n	80105a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80105a0:	2300      	movs	r3, #0
 80105a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	f003 0308 	and.w	r3, r3, #8
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d15c      	bne.n	8010668 <osMutexNew+0x102>
      mem = -1;
 80105ae:	f04f 33ff 	mov.w	r3, #4294967295
 80105b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d015      	beq.n	80105e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	689b      	ldr	r3, [r3, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d006      	beq.n	80105d0 <osMutexNew+0x6a>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	68db      	ldr	r3, [r3, #12]
 80105c6:	2b4f      	cmp	r3, #79	; 0x4f
 80105c8:	d902      	bls.n	80105d0 <osMutexNew+0x6a>
          mem = 1;
 80105ca:	2301      	movs	r3, #1
 80105cc:	613b      	str	r3, [r7, #16]
 80105ce:	e00c      	b.n	80105ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d108      	bne.n	80105ea <osMutexNew+0x84>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d104      	bne.n	80105ea <osMutexNew+0x84>
            mem = 0;
 80105e0:	2300      	movs	r3, #0
 80105e2:	613b      	str	r3, [r7, #16]
 80105e4:	e001      	b.n	80105ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80105e6:	2300      	movs	r3, #0
 80105e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d112      	bne.n	8010616 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d007      	beq.n	8010606 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	689b      	ldr	r3, [r3, #8]
 80105fa:	4619      	mov	r1, r3
 80105fc:	2004      	movs	r0, #4
 80105fe:	f000 fd88 	bl	8011112 <xQueueCreateMutexStatic>
 8010602:	61f8      	str	r0, [r7, #28]
 8010604:	e016      	b.n	8010634 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	689b      	ldr	r3, [r3, #8]
 801060a:	4619      	mov	r1, r3
 801060c:	2001      	movs	r0, #1
 801060e:	f000 fd80 	bl	8011112 <xQueueCreateMutexStatic>
 8010612:	61f8      	str	r0, [r7, #28]
 8010614:	e00e      	b.n	8010634 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10b      	bne.n	8010634 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d004      	beq.n	801062c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010622:	2004      	movs	r0, #4
 8010624:	f000 fd5d 	bl	80110e2 <xQueueCreateMutex>
 8010628:	61f8      	str	r0, [r7, #28]
 801062a:	e003      	b.n	8010634 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 801062c:	2001      	movs	r0, #1
 801062e:	f000 fd58 	bl	80110e2 <xQueueCreateMutex>
 8010632:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00c      	beq.n	8010654 <osMutexNew+0xee>
        if (attr != NULL) {
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d003      	beq.n	8010648 <osMutexNew+0xe2>
          name = attr->name;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	60fb      	str	r3, [r7, #12]
 8010646:	e001      	b.n	801064c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8010648:	2300      	movs	r3, #0
 801064a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 801064c:	68f9      	ldr	r1, [r7, #12]
 801064e:	69f8      	ldr	r0, [r7, #28]
 8010650:	f001 fc68 	bl	8011f24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d006      	beq.n	8010668 <osMutexNew+0x102>
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d003      	beq.n	8010668 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	f043 0301 	orr.w	r3, r3, #1
 8010666:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010668:	69fb      	ldr	r3, [r7, #28]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3720      	adds	r7, #32
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010672:	b580      	push	{r7, lr}
 8010674:	b086      	sub	sp, #24
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f023 0301 	bic.w	r3, r3, #1
 8010682:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801068c:	2300      	movs	r3, #0
 801068e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010690:	f3ef 8305 	mrs	r3, IPSR
 8010694:	60bb      	str	r3, [r7, #8]
  return(result);
 8010696:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8010698:	2b00      	cmp	r3, #0
 801069a:	d003      	beq.n	80106a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801069c:	f06f 0305 	mvn.w	r3, #5
 80106a0:	617b      	str	r3, [r7, #20]
 80106a2:	e02c      	b.n	80106fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d103      	bne.n	80106b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80106aa:	f06f 0303 	mvn.w	r3, #3
 80106ae:	617b      	str	r3, [r7, #20]
 80106b0:	e025      	b.n	80106fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d011      	beq.n	80106dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80106b8:	6839      	ldr	r1, [r7, #0]
 80106ba:	6938      	ldr	r0, [r7, #16]
 80106bc:	f000 fd78 	bl	80111b0 <xQueueTakeMutexRecursive>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d01b      	beq.n	80106fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d003      	beq.n	80106d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80106cc:	f06f 0301 	mvn.w	r3, #1
 80106d0:	617b      	str	r3, [r7, #20]
 80106d2:	e014      	b.n	80106fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80106d4:	f06f 0302 	mvn.w	r3, #2
 80106d8:	617b      	str	r3, [r7, #20]
 80106da:	e010      	b.n	80106fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80106dc:	6839      	ldr	r1, [r7, #0]
 80106de:	6938      	ldr	r0, [r7, #16]
 80106e0:	f001 f90c 	bl	80118fc <xQueueSemaphoreTake>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d009      	beq.n	80106fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d003      	beq.n	80106f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80106f0:	f06f 0301 	mvn.w	r3, #1
 80106f4:	617b      	str	r3, [r7, #20]
 80106f6:	e002      	b.n	80106fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80106f8:	f06f 0302 	mvn.w	r3, #2
 80106fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80106fe:	697b      	ldr	r3, [r7, #20]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3718      	adds	r7, #24
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010708:	b580      	push	{r7, lr}
 801070a:	b086      	sub	sp, #24
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f023 0301 	bic.w	r3, r3, #1
 8010716:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010720:	2300      	movs	r3, #0
 8010722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010724:	f3ef 8305 	mrs	r3, IPSR
 8010728:	60bb      	str	r3, [r7, #8]
  return(result);
 801072a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801072c:	2b00      	cmp	r3, #0
 801072e:	d003      	beq.n	8010738 <osMutexRelease+0x30>
    stat = osErrorISR;
 8010730:	f06f 0305 	mvn.w	r3, #5
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	e01f      	b.n	8010778 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d103      	bne.n	8010746 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801073e:	f06f 0303 	mvn.w	r3, #3
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e018      	b.n	8010778 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d009      	beq.n	8010760 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801074c:	6938      	ldr	r0, [r7, #16]
 801074e:	f000 fcfb 	bl	8011148 <xQueueGiveMutexRecursive>
 8010752:	4603      	mov	r3, r0
 8010754:	2b01      	cmp	r3, #1
 8010756:	d00f      	beq.n	8010778 <osMutexRelease+0x70>
        stat = osErrorResource;
 8010758:	f06f 0302 	mvn.w	r3, #2
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	e00b      	b.n	8010778 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010760:	2300      	movs	r3, #0
 8010762:	2200      	movs	r2, #0
 8010764:	2100      	movs	r1, #0
 8010766:	6938      	ldr	r0, [r7, #16]
 8010768:	f000 fdc2 	bl	80112f0 <xQueueGenericSend>
 801076c:	4603      	mov	r3, r0
 801076e:	2b01      	cmp	r3, #1
 8010770:	d002      	beq.n	8010778 <osMutexRelease+0x70>
        stat = osErrorResource;
 8010772:	f06f 0302 	mvn.w	r3, #2
 8010776:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010778:	697b      	ldr	r3, [r7, #20]
}
 801077a:	4618      	mov	r0, r3
 801077c:	3718      	adds	r7, #24
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010782:	b580      	push	{r7, lr}
 8010784:	b08a      	sub	sp, #40	; 0x28
 8010786:	af02      	add	r7, sp, #8
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801078e:	2300      	movs	r3, #0
 8010790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010792:	f3ef 8305 	mrs	r3, IPSR
 8010796:	613b      	str	r3, [r7, #16]
  return(result);
 8010798:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801079a:	2b00      	cmp	r3, #0
 801079c:	d175      	bne.n	801088a <osSemaphoreNew+0x108>
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d072      	beq.n	801088a <osSemaphoreNew+0x108>
 80107a4:	68ba      	ldr	r2, [r7, #8]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d86e      	bhi.n	801088a <osSemaphoreNew+0x108>
    mem = -1;
 80107ac:	f04f 33ff 	mov.w	r3, #4294967295
 80107b0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d015      	beq.n	80107e4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d006      	beq.n	80107ce <osSemaphoreNew+0x4c>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	2b4f      	cmp	r3, #79	; 0x4f
 80107c6:	d902      	bls.n	80107ce <osSemaphoreNew+0x4c>
        mem = 1;
 80107c8:	2301      	movs	r3, #1
 80107ca:	61bb      	str	r3, [r7, #24]
 80107cc:	e00c      	b.n	80107e8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d108      	bne.n	80107e8 <osSemaphoreNew+0x66>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d104      	bne.n	80107e8 <osSemaphoreNew+0x66>
          mem = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	61bb      	str	r3, [r7, #24]
 80107e2:	e001      	b.n	80107e8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80107e4:	2300      	movs	r3, #0
 80107e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80107e8:	69bb      	ldr	r3, [r7, #24]
 80107ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ee:	d04c      	beq.n	801088a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d128      	bne.n	8010848 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d10a      	bne.n	8010812 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	689b      	ldr	r3, [r3, #8]
 8010800:	2203      	movs	r2, #3
 8010802:	9200      	str	r2, [sp, #0]
 8010804:	2200      	movs	r2, #0
 8010806:	2100      	movs	r1, #0
 8010808:	2001      	movs	r0, #1
 801080a:	f000 fb7b 	bl	8010f04 <xQueueGenericCreateStatic>
 801080e:	61f8      	str	r0, [r7, #28]
 8010810:	e005      	b.n	801081e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010812:	2203      	movs	r2, #3
 8010814:	2100      	movs	r1, #0
 8010816:	2001      	movs	r0, #1
 8010818:	f000 fbec 	bl	8010ff4 <xQueueGenericCreate>
 801081c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d022      	beq.n	801086a <osSemaphoreNew+0xe8>
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d01f      	beq.n	801086a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801082a:	2300      	movs	r3, #0
 801082c:	2200      	movs	r2, #0
 801082e:	2100      	movs	r1, #0
 8010830:	69f8      	ldr	r0, [r7, #28]
 8010832:	f000 fd5d 	bl	80112f0 <xQueueGenericSend>
 8010836:	4603      	mov	r3, r0
 8010838:	2b01      	cmp	r3, #1
 801083a:	d016      	beq.n	801086a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801083c:	69f8      	ldr	r0, [r7, #28]
 801083e:	f001 fa25 	bl	8011c8c <vQueueDelete>
            hSemaphore = NULL;
 8010842:	2300      	movs	r3, #0
 8010844:	61fb      	str	r3, [r7, #28]
 8010846:	e010      	b.n	801086a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	2b01      	cmp	r3, #1
 801084c:	d108      	bne.n	8010860 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	461a      	mov	r2, r3
 8010854:	68b9      	ldr	r1, [r7, #8]
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f000 fce0 	bl	801121c <xQueueCreateCountingSemaphoreStatic>
 801085c:	61f8      	str	r0, [r7, #28]
 801085e:	e004      	b.n	801086a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010860:	68b9      	ldr	r1, [r7, #8]
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f000 fd11 	bl	801128a <xQueueCreateCountingSemaphore>
 8010868:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00c      	beq.n	801088a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d003      	beq.n	801087e <osSemaphoreNew+0xfc>
          name = attr->name;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	617b      	str	r3, [r7, #20]
 801087c:	e001      	b.n	8010882 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801087e:	2300      	movs	r3, #0
 8010880:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010882:	6979      	ldr	r1, [r7, #20]
 8010884:	69f8      	ldr	r0, [r7, #28]
 8010886:	f001 fb4d 	bl	8011f24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801088a:	69fb      	ldr	r3, [r7, #28]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3720      	adds	r7, #32
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}

08010894 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80108a2:	2300      	movs	r3, #0
 80108a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d103      	bne.n	80108b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80108ac:	f06f 0303 	mvn.w	r3, #3
 80108b0:	617b      	str	r3, [r7, #20]
 80108b2:	e039      	b.n	8010928 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108b4:	f3ef 8305 	mrs	r3, IPSR
 80108b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80108ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d022      	beq.n	8010906 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d003      	beq.n	80108ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80108c6:	f06f 0303 	mvn.w	r3, #3
 80108ca:	617b      	str	r3, [r7, #20]
 80108cc:	e02c      	b.n	8010928 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80108ce:	2300      	movs	r3, #0
 80108d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80108d2:	f107 0308 	add.w	r3, r7, #8
 80108d6:	461a      	mov	r2, r3
 80108d8:	2100      	movs	r1, #0
 80108da:	6938      	ldr	r0, [r7, #16]
 80108dc:	f001 f91a 	bl	8011b14 <xQueueReceiveFromISR>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b01      	cmp	r3, #1
 80108e4:	d003      	beq.n	80108ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80108e6:	f06f 0302 	mvn.w	r3, #2
 80108ea:	617b      	str	r3, [r7, #20]
 80108ec:	e01c      	b.n	8010928 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d019      	beq.n	8010928 <osSemaphoreAcquire+0x94>
 80108f4:	4b0f      	ldr	r3, [pc, #60]	; (8010934 <osSemaphoreAcquire+0xa0>)
 80108f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108fa:	601a      	str	r2, [r3, #0]
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	f3bf 8f6f 	isb	sy
 8010904:	e010      	b.n	8010928 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	6938      	ldr	r0, [r7, #16]
 801090a:	f000 fff7 	bl	80118fc <xQueueSemaphoreTake>
 801090e:	4603      	mov	r3, r0
 8010910:	2b01      	cmp	r3, #1
 8010912:	d009      	beq.n	8010928 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801091a:	f06f 0301 	mvn.w	r3, #1
 801091e:	617b      	str	r3, [r7, #20]
 8010920:	e002      	b.n	8010928 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8010922:	f06f 0302 	mvn.w	r3, #2
 8010926:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8010928:	697b      	ldr	r3, [r7, #20]
}
 801092a:	4618      	mov	r0, r3
 801092c:	3718      	adds	r7, #24
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	e000ed04 	.word	0xe000ed04

08010938 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010938:	b580      	push	{r7, lr}
 801093a:	b086      	sub	sp, #24
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010944:	2300      	movs	r3, #0
 8010946:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d103      	bne.n	8010956 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801094e:	f06f 0303 	mvn.w	r3, #3
 8010952:	617b      	str	r3, [r7, #20]
 8010954:	e02c      	b.n	80109b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010956:	f3ef 8305 	mrs	r3, IPSR
 801095a:	60fb      	str	r3, [r7, #12]
  return(result);
 801095c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801095e:	2b00      	cmp	r3, #0
 8010960:	d01a      	beq.n	8010998 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8010962:	2300      	movs	r3, #0
 8010964:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010966:	f107 0308 	add.w	r3, r7, #8
 801096a:	4619      	mov	r1, r3
 801096c:	6938      	ldr	r0, [r7, #16]
 801096e:	f000 fe58 	bl	8011622 <xQueueGiveFromISR>
 8010972:	4603      	mov	r3, r0
 8010974:	2b01      	cmp	r3, #1
 8010976:	d003      	beq.n	8010980 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010978:	f06f 0302 	mvn.w	r3, #2
 801097c:	617b      	str	r3, [r7, #20]
 801097e:	e017      	b.n	80109b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d014      	beq.n	80109b0 <osSemaphoreRelease+0x78>
 8010986:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <osSemaphoreRelease+0x84>)
 8010988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	e00b      	b.n	80109b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010998:	2300      	movs	r3, #0
 801099a:	2200      	movs	r2, #0
 801099c:	2100      	movs	r1, #0
 801099e:	6938      	ldr	r0, [r7, #16]
 80109a0:	f000 fca6 	bl	80112f0 <xQueueGenericSend>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d002      	beq.n	80109b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80109aa:	f06f 0302 	mvn.w	r3, #2
 80109ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80109b0:	697b      	ldr	r3, [r7, #20]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3718      	adds	r7, #24
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	e000ed04 	.word	0xe000ed04

080109c0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d102      	bne.n	80109d8 <osSemaphoreGetCount+0x18>
    count = 0U;
 80109d2:	2300      	movs	r3, #0
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	e00e      	b.n	80109f6 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109d8:	f3ef 8305 	mrs	r3, IPSR
 80109dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80109de:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d004      	beq.n	80109ee <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80109e4:	6938      	ldr	r0, [r7, #16]
 80109e6:	f001 f933 	bl	8011c50 <uxQueueMessagesWaitingFromISR>
 80109ea:	6178      	str	r0, [r7, #20]
 80109ec:	e003      	b.n	80109f6 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80109ee:	6938      	ldr	r0, [r7, #16]
 80109f0:	f001 f910 	bl	8011c14 <uxQueueMessagesWaiting>
 80109f4:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80109f6:	697b      	ldr	r3, [r7, #20]
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3718      	adds	r7, #24
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b08a      	sub	sp, #40	; 0x28
 8010a04:	af02      	add	r7, sp, #8
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a10:	f3ef 8305 	mrs	r3, IPSR
 8010a14:	613b      	str	r3, [r7, #16]
  return(result);
 8010a16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d15f      	bne.n	8010adc <osMessageQueueNew+0xdc>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d05c      	beq.n	8010adc <osMessageQueueNew+0xdc>
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d059      	beq.n	8010adc <osMessageQueueNew+0xdc>
    mem = -1;
 8010a28:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d029      	beq.n	8010a88 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d012      	beq.n	8010a62 <osMessageQueueNew+0x62>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	2b4f      	cmp	r3, #79	; 0x4f
 8010a42:	d90e      	bls.n	8010a62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00a      	beq.n	8010a62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	695a      	ldr	r2, [r3, #20]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	68b9      	ldr	r1, [r7, #8]
 8010a54:	fb01 f303 	mul.w	r3, r1, r3
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d302      	bcc.n	8010a62 <osMessageQueueNew+0x62>
        mem = 1;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	61bb      	str	r3, [r7, #24]
 8010a60:	e014      	b.n	8010a8c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d110      	bne.n	8010a8c <osMessageQueueNew+0x8c>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d10c      	bne.n	8010a8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d108      	bne.n	8010a8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	695b      	ldr	r3, [r3, #20]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d104      	bne.n	8010a8c <osMessageQueueNew+0x8c>
          mem = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	61bb      	str	r3, [r7, #24]
 8010a86:	e001      	b.n	8010a8c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d10b      	bne.n	8010aaa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	691a      	ldr	r2, [r3, #16]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	689b      	ldr	r3, [r3, #8]
 8010a9a:	2100      	movs	r1, #0
 8010a9c:	9100      	str	r1, [sp, #0]
 8010a9e:	68b9      	ldr	r1, [r7, #8]
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 fa2f 	bl	8010f04 <xQueueGenericCreateStatic>
 8010aa6:	61f8      	str	r0, [r7, #28]
 8010aa8:	e008      	b.n	8010abc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010aaa:	69bb      	ldr	r3, [r7, #24]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d105      	bne.n	8010abc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	68b9      	ldr	r1, [r7, #8]
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f000 fa9d 	bl	8010ff4 <xQueueGenericCreate>
 8010aba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00c      	beq.n	8010adc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	617b      	str	r3, [r7, #20]
 8010ace:	e001      	b.n	8010ad4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010ad4:	6979      	ldr	r1, [r7, #20]
 8010ad6:	69f8      	ldr	r0, [r7, #28]
 8010ad8:	f001 fa24 	bl	8011f24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010adc:	69fb      	ldr	r3, [r7, #28]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3720      	adds	r7, #32
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
	...

08010ae8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b088      	sub	sp, #32
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	603b      	str	r3, [r7, #0]
 8010af4:	4613      	mov	r3, r2
 8010af6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010afc:	2300      	movs	r3, #0
 8010afe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b00:	f3ef 8305 	mrs	r3, IPSR
 8010b04:	617b      	str	r3, [r7, #20]
  return(result);
 8010b06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d028      	beq.n	8010b5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d005      	beq.n	8010b1e <osMessageQueuePut+0x36>
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d002      	beq.n	8010b1e <osMessageQueuePut+0x36>
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d003      	beq.n	8010b26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010b1e:	f06f 0303 	mvn.w	r3, #3
 8010b22:	61fb      	str	r3, [r7, #28]
 8010b24:	e038      	b.n	8010b98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010b26:	2300      	movs	r3, #0
 8010b28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010b2a:	f107 0210 	add.w	r2, r7, #16
 8010b2e:	2300      	movs	r3, #0
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	69b8      	ldr	r0, [r7, #24]
 8010b34:	f000 fcda 	bl	80114ec <xQueueGenericSendFromISR>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d003      	beq.n	8010b46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010b3e:	f06f 0302 	mvn.w	r3, #2
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	e028      	b.n	8010b98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d025      	beq.n	8010b98 <osMessageQueuePut+0xb0>
 8010b4c:	4b15      	ldr	r3, [pc, #84]	; (8010ba4 <osMessageQueuePut+0xbc>)
 8010b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b52:	601a      	str	r2, [r3, #0]
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	e01c      	b.n	8010b98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <osMessageQueuePut+0x82>
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d103      	bne.n	8010b72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010b6a:	f06f 0303 	mvn.w	r3, #3
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	e012      	b.n	8010b98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010b72:	2300      	movs	r3, #0
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	68b9      	ldr	r1, [r7, #8]
 8010b78:	69b8      	ldr	r0, [r7, #24]
 8010b7a:	f000 fbb9 	bl	80112f0 <xQueueGenericSend>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d009      	beq.n	8010b98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010b8a:	f06f 0301 	mvn.w	r3, #1
 8010b8e:	61fb      	str	r3, [r7, #28]
 8010b90:	e002      	b.n	8010b98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010b92:	f06f 0302 	mvn.w	r3, #2
 8010b96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010b98:	69fb      	ldr	r3, [r7, #28]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3720      	adds	r7, #32
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	e000ed04 	.word	0xe000ed04

08010ba8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b088      	sub	sp, #32
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010bbe:	f3ef 8305 	mrs	r3, IPSR
 8010bc2:	617b      	str	r3, [r7, #20]
  return(result);
 8010bc4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d028      	beq.n	8010c1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010bca:	69bb      	ldr	r3, [r7, #24]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d005      	beq.n	8010bdc <osMessageQueueGet+0x34>
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d002      	beq.n	8010bdc <osMessageQueueGet+0x34>
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d003      	beq.n	8010be4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010bdc:	f06f 0303 	mvn.w	r3, #3
 8010be0:	61fb      	str	r3, [r7, #28]
 8010be2:	e037      	b.n	8010c54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010be4:	2300      	movs	r3, #0
 8010be6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010be8:	f107 0310 	add.w	r3, r7, #16
 8010bec:	461a      	mov	r2, r3
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	69b8      	ldr	r0, [r7, #24]
 8010bf2:	f000 ff8f 	bl	8011b14 <xQueueReceiveFromISR>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d003      	beq.n	8010c04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010bfc:	f06f 0302 	mvn.w	r3, #2
 8010c00:	61fb      	str	r3, [r7, #28]
 8010c02:	e027      	b.n	8010c54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d024      	beq.n	8010c54 <osMessageQueueGet+0xac>
 8010c0a:	4b15      	ldr	r3, [pc, #84]	; (8010c60 <osMessageQueueGet+0xb8>)
 8010c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c10:	601a      	str	r2, [r3, #0]
 8010c12:	f3bf 8f4f 	dsb	sy
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	e01b      	b.n	8010c54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d002      	beq.n	8010c28 <osMessageQueueGet+0x80>
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d103      	bne.n	8010c30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010c28:	f06f 0303 	mvn.w	r3, #3
 8010c2c:	61fb      	str	r3, [r7, #28]
 8010c2e:	e011      	b.n	8010c54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	68b9      	ldr	r1, [r7, #8]
 8010c34:	69b8      	ldr	r0, [r7, #24]
 8010c36:	f000 fd81 	bl	801173c <xQueueReceive>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d009      	beq.n	8010c54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d003      	beq.n	8010c4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8010c46:	f06f 0301 	mvn.w	r3, #1
 8010c4a:	61fb      	str	r3, [r7, #28]
 8010c4c:	e002      	b.n	8010c54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010c4e:	f06f 0302 	mvn.w	r3, #2
 8010c52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010c54:	69fb      	ldr	r3, [r7, #28]
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3720      	adds	r7, #32
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	e000ed04 	.word	0xe000ed04

08010c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	4a07      	ldr	r2, [pc, #28]	; (8010c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8010c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	4a06      	ldr	r2, [pc, #24]	; (8010c94 <vApplicationGetIdleTaskMemory+0x30>)
 8010c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2280      	movs	r2, #128	; 0x80
 8010c80:	601a      	str	r2, [r3, #0]
}
 8010c82:	bf00      	nop
 8010c84:	3714      	adds	r7, #20
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	200015fc 	.word	0x200015fc
 8010c94:	200016bc 	.word	0x200016bc

08010c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	4a07      	ldr	r2, [pc, #28]	; (8010cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8010ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	4a06      	ldr	r2, [pc, #24]	; (8010cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8010cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010cb6:	601a      	str	r2, [r3, #0]
}
 8010cb8:	bf00      	nop
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr
 8010cc4:	200018bc 	.word	0x200018bc
 8010cc8:	2000197c 	.word	0x2000197c

08010ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f103 0208 	add.w	r2, r3, #8
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f103 0208 	add.w	r2, r3, #8
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f103 0208 	add.w	r2, r3, #8
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010d00:	bf00      	nop
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2200      	movs	r2, #0
 8010d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010d1a:	bf00      	nop
 8010d1c:	370c      	adds	r7, #12
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr

08010d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d26:	b480      	push	{r7}
 8010d28:	b085      	sub	sp, #20
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
 8010d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	689a      	ldr	r2, [r3, #8]
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	683a      	ldr	r2, [r7, #0]
 8010d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	687a      	ldr	r2, [r7, #4]
 8010d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	1c5a      	adds	r2, r3, #1
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
}
 8010d62:	bf00      	nop
 8010d64:	3714      	adds	r7, #20
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010d6e:	b480      	push	{r7}
 8010d70:	b085      	sub	sp, #20
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d84:	d103      	bne.n	8010d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	e00c      	b.n	8010da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3308      	adds	r3, #8
 8010d92:	60fb      	str	r3, [r7, #12]
 8010d94:	e002      	b.n	8010d9c <vListInsert+0x2e>
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	60fb      	str	r3, [r7, #12]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d2f6      	bcs.n	8010d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	685a      	ldr	r2, [r3, #4]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	683a      	ldr	r2, [r7, #0]
 8010db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	683a      	ldr	r2, [r7, #0]
 8010dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	1c5a      	adds	r2, r3, #1
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	601a      	str	r2, [r3, #0]
}
 8010dd4:	bf00      	nop
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	691b      	ldr	r3, [r3, #16]
 8010dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	6892      	ldr	r2, [r2, #8]
 8010df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	689b      	ldr	r3, [r3, #8]
 8010dfc:	687a      	ldr	r2, [r7, #4]
 8010dfe:	6852      	ldr	r2, [r2, #4]
 8010e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d103      	bne.n	8010e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	689a      	ldr	r2, [r3, #8]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	1e5a      	subs	r2, r3, #1
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d10a      	bne.n	8010e5e <xQueueGenericReset+0x2a>
	__asm volatile
 8010e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e4c:	f383 8811 	msr	BASEPRI, r3
 8010e50:	f3bf 8f6f 	isb	sy
 8010e54:	f3bf 8f4f 	dsb	sy
 8010e58:	60bb      	str	r3, [r7, #8]
}
 8010e5a:	bf00      	nop
 8010e5c:	e7fe      	b.n	8010e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010e5e:	f003 fae1 	bl	8014424 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e6a:	68f9      	ldr	r1, [r7, #12]
 8010e6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010e6e:	fb01 f303 	mul.w	r3, r1, r3
 8010e72:	441a      	add	r2, r3
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681a      	ldr	r2, [r3, #0]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e8e:	3b01      	subs	r3, #1
 8010e90:	68f9      	ldr	r1, [r7, #12]
 8010e92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010e94:	fb01 f303 	mul.w	r3, r1, r3
 8010e98:	441a      	add	r2, r3
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	22ff      	movs	r2, #255	; 0xff
 8010ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	22ff      	movs	r2, #255	; 0xff
 8010eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d114      	bne.n	8010ede <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	691b      	ldr	r3, [r3, #16]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d01a      	beq.n	8010ef2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3310      	adds	r3, #16
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f002 f91d 	bl	8013100 <xTaskRemoveFromEventList>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d012      	beq.n	8010ef2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010ecc:	4b0c      	ldr	r3, [pc, #48]	; (8010f00 <xQueueGenericReset+0xcc>)
 8010ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ed2:	601a      	str	r2, [r3, #0]
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	e009      	b.n	8010ef2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	3310      	adds	r3, #16
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7ff fef2 	bl	8010ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3324      	adds	r3, #36	; 0x24
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7ff feed 	bl	8010ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ef2:	f003 fac7 	bl	8014484 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010ef6:	2301      	movs	r3, #1
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3710      	adds	r7, #16
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	e000ed04 	.word	0xe000ed04

08010f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b08e      	sub	sp, #56	; 0x38
 8010f08:	af02      	add	r7, sp, #8
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
 8010f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d10a      	bne.n	8010f2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1c:	f383 8811 	msr	BASEPRI, r3
 8010f20:	f3bf 8f6f 	isb	sy
 8010f24:	f3bf 8f4f 	dsb	sy
 8010f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f2a:	bf00      	nop
 8010f2c:	e7fe      	b.n	8010f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d002      	beq.n	8010f56 <xQueueGenericCreateStatic+0x52>
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <xQueueGenericCreateStatic+0x56>
 8010f56:	2301      	movs	r3, #1
 8010f58:	e000      	b.n	8010f5c <xQueueGenericCreateStatic+0x58>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10a      	bne.n	8010f76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f64:	f383 8811 	msr	BASEPRI, r3
 8010f68:	f3bf 8f6f 	isb	sy
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	623b      	str	r3, [r7, #32]
}
 8010f72:	bf00      	nop
 8010f74:	e7fe      	b.n	8010f74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d102      	bne.n	8010f82 <xQueueGenericCreateStatic+0x7e>
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d101      	bne.n	8010f86 <xQueueGenericCreateStatic+0x82>
 8010f82:	2301      	movs	r3, #1
 8010f84:	e000      	b.n	8010f88 <xQueueGenericCreateStatic+0x84>
 8010f86:	2300      	movs	r3, #0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10a      	bne.n	8010fa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f90:	f383 8811 	msr	BASEPRI, r3
 8010f94:	f3bf 8f6f 	isb	sy
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	61fb      	str	r3, [r7, #28]
}
 8010f9e:	bf00      	nop
 8010fa0:	e7fe      	b.n	8010fa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010fa2:	2350      	movs	r3, #80	; 0x50
 8010fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2b50      	cmp	r3, #80	; 0x50
 8010faa:	d00a      	beq.n	8010fc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	61bb      	str	r3, [r7, #24]
}
 8010fbe:	bf00      	nop
 8010fc0:	e7fe      	b.n	8010fc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010fc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00d      	beq.n	8010fea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	9300      	str	r3, [sp, #0]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	68b9      	ldr	r1, [r7, #8]
 8010fe4:	68f8      	ldr	r0, [r7, #12]
 8010fe6:	f000 f83f 	bl	8011068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3730      	adds	r7, #48	; 0x30
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08a      	sub	sp, #40	; 0x28
 8010ff8:	af02      	add	r7, sp, #8
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	4613      	mov	r3, r2
 8011000:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d10a      	bne.n	801101e <xQueueGenericCreate+0x2a>
	__asm volatile
 8011008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801100c:	f383 8811 	msr	BASEPRI, r3
 8011010:	f3bf 8f6f 	isb	sy
 8011014:	f3bf 8f4f 	dsb	sy
 8011018:	613b      	str	r3, [r7, #16]
}
 801101a:	bf00      	nop
 801101c:	e7fe      	b.n	801101c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68ba      	ldr	r2, [r7, #8]
 8011022:	fb02 f303 	mul.w	r3, r2, r3
 8011026:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	3350      	adds	r3, #80	; 0x50
 801102c:	4618      	mov	r0, r3
 801102e:	f003 fb1b 	bl	8014668 <pvPortMalloc>
 8011032:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d011      	beq.n	801105e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801103a:	69bb      	ldr	r3, [r7, #24]
 801103c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	3350      	adds	r3, #80	; 0x50
 8011042:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801104c:	79fa      	ldrb	r2, [r7, #7]
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	4613      	mov	r3, r2
 8011054:	697a      	ldr	r2, [r7, #20]
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 f805 	bl	8011068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801105e:	69bb      	ldr	r3, [r7, #24]
	}
 8011060:	4618      	mov	r0, r3
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
 8011074:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d103      	bne.n	8011084 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	69ba      	ldr	r2, [r7, #24]
 8011080:	601a      	str	r2, [r3, #0]
 8011082:	e002      	b.n	801108a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011096:	2101      	movs	r1, #1
 8011098:	69b8      	ldr	r0, [r7, #24]
 801109a:	f7ff fecb 	bl	8010e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	78fa      	ldrb	r2, [r7, #3]
 80110a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80110a6:	bf00      	nop
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b082      	sub	sp, #8
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00e      	beq.n	80110da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2200      	movs	r2, #0
 80110c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2200      	movs	r2, #0
 80110c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80110ce:	2300      	movs	r3, #0
 80110d0:	2200      	movs	r2, #0
 80110d2:	2100      	movs	r1, #0
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 f90b 	bl	80112f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80110da:	bf00      	nop
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}

080110e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80110e2:	b580      	push	{r7, lr}
 80110e4:	b086      	sub	sp, #24
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	4603      	mov	r3, r0
 80110ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80110ec:	2301      	movs	r3, #1
 80110ee:	617b      	str	r3, [r7, #20]
 80110f0:	2300      	movs	r3, #0
 80110f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80110f4:	79fb      	ldrb	r3, [r7, #7]
 80110f6:	461a      	mov	r2, r3
 80110f8:	6939      	ldr	r1, [r7, #16]
 80110fa:	6978      	ldr	r0, [r7, #20]
 80110fc:	f7ff ff7a 	bl	8010ff4 <xQueueGenericCreate>
 8011100:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f7ff ffd3 	bl	80110ae <prvInitialiseMutex>

		return xNewQueue;
 8011108:	68fb      	ldr	r3, [r7, #12]
	}
 801110a:	4618      	mov	r0, r3
 801110c:	3718      	adds	r7, #24
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}

08011112 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011112:	b580      	push	{r7, lr}
 8011114:	b088      	sub	sp, #32
 8011116:	af02      	add	r7, sp, #8
 8011118:	4603      	mov	r3, r0
 801111a:	6039      	str	r1, [r7, #0]
 801111c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801111e:	2301      	movs	r3, #1
 8011120:	617b      	str	r3, [r7, #20]
 8011122:	2300      	movs	r3, #0
 8011124:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011126:	79fb      	ldrb	r3, [r7, #7]
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	2200      	movs	r2, #0
 801112e:	6939      	ldr	r1, [r7, #16]
 8011130:	6978      	ldr	r0, [r7, #20]
 8011132:	f7ff fee7 	bl	8010f04 <xQueueGenericCreateStatic>
 8011136:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	f7ff ffb8 	bl	80110ae <prvInitialiseMutex>

		return xNewQueue;
 801113e:	68fb      	ldr	r3, [r7, #12]
	}
 8011140:	4618      	mov	r0, r3
 8011142:	3718      	adds	r7, #24
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011148:	b590      	push	{r4, r7, lr}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d10a      	bne.n	8011170 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 801115a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	60fb      	str	r3, [r7, #12]
}
 801116c:	bf00      	nop
 801116e:	e7fe      	b.n	801116e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	689c      	ldr	r4, [r3, #8]
 8011174:	f002 f9ac 	bl	80134d0 <xTaskGetCurrentTaskHandle>
 8011178:	4603      	mov	r3, r0
 801117a:	429c      	cmp	r4, r3
 801117c:	d111      	bne.n	80111a2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	68db      	ldr	r3, [r3, #12]
 8011182:	1e5a      	subs	r2, r3, #1
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d105      	bne.n	801119c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011190:	2300      	movs	r3, #0
 8011192:	2200      	movs	r2, #0
 8011194:	2100      	movs	r1, #0
 8011196:	6938      	ldr	r0, [r7, #16]
 8011198:	f000 f8aa 	bl	80112f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801119c:	2301      	movs	r3, #1
 801119e:	617b      	str	r3, [r7, #20]
 80111a0:	e001      	b.n	80111a6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80111a6:	697b      	ldr	r3, [r7, #20]
	}
 80111a8:	4618      	mov	r0, r3
 80111aa:	371c      	adds	r7, #28
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd90      	pop	{r4, r7, pc}

080111b0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80111b0:	b590      	push	{r4, r7, lr}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10a      	bne.n	80111da <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	60fb      	str	r3, [r7, #12]
}
 80111d6:	bf00      	nop
 80111d8:	e7fe      	b.n	80111d8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	689c      	ldr	r4, [r3, #8]
 80111de:	f002 f977 	bl	80134d0 <xTaskGetCurrentTaskHandle>
 80111e2:	4603      	mov	r3, r0
 80111e4:	429c      	cmp	r4, r3
 80111e6:	d107      	bne.n	80111f8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	1c5a      	adds	r2, r3, #1
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80111f2:	2301      	movs	r3, #1
 80111f4:	617b      	str	r3, [r7, #20]
 80111f6:	e00c      	b.n	8011212 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80111f8:	6839      	ldr	r1, [r7, #0]
 80111fa:	6938      	ldr	r0, [r7, #16]
 80111fc:	f000 fb7e 	bl	80118fc <xQueueSemaphoreTake>
 8011200:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d004      	beq.n	8011212 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	1c5a      	adds	r2, r3, #1
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011212:	697b      	ldr	r3, [r7, #20]
	}
 8011214:	4618      	mov	r0, r3
 8011216:	371c      	adds	r7, #28
 8011218:	46bd      	mov	sp, r7
 801121a:	bd90      	pop	{r4, r7, pc}

0801121c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08a      	sub	sp, #40	; 0x28
 8011220:	af02      	add	r7, sp, #8
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10a      	bne.n	8011244 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	61bb      	str	r3, [r7, #24]
}
 8011240:	bf00      	nop
 8011242:	e7fe      	b.n	8011242 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011244:	68ba      	ldr	r2, [r7, #8]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	429a      	cmp	r2, r3
 801124a:	d90a      	bls.n	8011262 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	f383 8811 	msr	BASEPRI, r3
 8011254:	f3bf 8f6f 	isb	sy
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	617b      	str	r3, [r7, #20]
}
 801125e:	bf00      	nop
 8011260:	e7fe      	b.n	8011260 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011262:	2302      	movs	r3, #2
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	2100      	movs	r1, #0
 801126c:	68f8      	ldr	r0, [r7, #12]
 801126e:	f7ff fe49 	bl	8010f04 <xQueueGenericCreateStatic>
 8011272:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d002      	beq.n	8011280 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801127a:	69fb      	ldr	r3, [r7, #28]
 801127c:	68ba      	ldr	r2, [r7, #8]
 801127e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011280:	69fb      	ldr	r3, [r7, #28]
	}
 8011282:	4618      	mov	r0, r3
 8011284:	3720      	adds	r7, #32
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}

0801128a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801128a:	b580      	push	{r7, lr}
 801128c:	b086      	sub	sp, #24
 801128e:	af00      	add	r7, sp, #0
 8011290:	6078      	str	r0, [r7, #4]
 8011292:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d10a      	bne.n	80112b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	613b      	str	r3, [r7, #16]
}
 80112ac:	bf00      	nop
 80112ae:	e7fe      	b.n	80112ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d90a      	bls.n	80112ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80112b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	60fb      	str	r3, [r7, #12]
}
 80112ca:	bf00      	nop
 80112cc:	e7fe      	b.n	80112cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80112ce:	2202      	movs	r2, #2
 80112d0:	2100      	movs	r1, #0
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff fe8e 	bl	8010ff4 <xQueueGenericCreate>
 80112d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	683a      	ldr	r2, [r7, #0]
 80112e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80112e6:	697b      	ldr	r3, [r7, #20]
	}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3718      	adds	r7, #24
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b08e      	sub	sp, #56	; 0x38
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	607a      	str	r2, [r7, #4]
 80112fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80112fe:	2300      	movs	r3, #0
 8011300:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	2b00      	cmp	r3, #0
 801130a:	d10a      	bne.n	8011322 <xQueueGenericSend+0x32>
	__asm volatile
 801130c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011310:	f383 8811 	msr	BASEPRI, r3
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	f3bf 8f4f 	dsb	sy
 801131c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801131e:	bf00      	nop
 8011320:	e7fe      	b.n	8011320 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d103      	bne.n	8011330 <xQueueGenericSend+0x40>
 8011328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <xQueueGenericSend+0x44>
 8011330:	2301      	movs	r3, #1
 8011332:	e000      	b.n	8011336 <xQueueGenericSend+0x46>
 8011334:	2300      	movs	r3, #0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10a      	bne.n	8011350 <xQueueGenericSend+0x60>
	__asm volatile
 801133a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801133e:	f383 8811 	msr	BASEPRI, r3
 8011342:	f3bf 8f6f 	isb	sy
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801134c:	bf00      	nop
 801134e:	e7fe      	b.n	801134e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d103      	bne.n	801135e <xQueueGenericSend+0x6e>
 8011356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135a:	2b01      	cmp	r3, #1
 801135c:	d101      	bne.n	8011362 <xQueueGenericSend+0x72>
 801135e:	2301      	movs	r3, #1
 8011360:	e000      	b.n	8011364 <xQueueGenericSend+0x74>
 8011362:	2300      	movs	r3, #0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d10a      	bne.n	801137e <xQueueGenericSend+0x8e>
	__asm volatile
 8011368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136c:	f383 8811 	msr	BASEPRI, r3
 8011370:	f3bf 8f6f 	isb	sy
 8011374:	f3bf 8f4f 	dsb	sy
 8011378:	623b      	str	r3, [r7, #32]
}
 801137a:	bf00      	nop
 801137c:	e7fe      	b.n	801137c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801137e:	f002 f8b7 	bl	80134f0 <xTaskGetSchedulerState>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d102      	bne.n	801138e <xQueueGenericSend+0x9e>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d101      	bne.n	8011392 <xQueueGenericSend+0xa2>
 801138e:	2301      	movs	r3, #1
 8011390:	e000      	b.n	8011394 <xQueueGenericSend+0xa4>
 8011392:	2300      	movs	r3, #0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d10a      	bne.n	80113ae <xQueueGenericSend+0xbe>
	__asm volatile
 8011398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	61fb      	str	r3, [r7, #28]
}
 80113aa:	bf00      	nop
 80113ac:	e7fe      	b.n	80113ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80113ae:	f003 f839 	bl	8014424 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d302      	bcc.n	80113c4 <xQueueGenericSend+0xd4>
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d129      	bne.n	8011418 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80113c4:	683a      	ldr	r2, [r7, #0]
 80113c6:	68b9      	ldr	r1, [r7, #8]
 80113c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113ca:	f000 fc9a 	bl	8011d02 <prvCopyDataToQueue>
 80113ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d010      	beq.n	80113fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113da:	3324      	adds	r3, #36	; 0x24
 80113dc:	4618      	mov	r0, r3
 80113de:	f001 fe8f 	bl	8013100 <xTaskRemoveFromEventList>
 80113e2:	4603      	mov	r3, r0
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d013      	beq.n	8011410 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80113e8:	4b3f      	ldr	r3, [pc, #252]	; (80114e8 <xQueueGenericSend+0x1f8>)
 80113ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113ee:	601a      	str	r2, [r3, #0]
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	e00a      	b.n	8011410 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80113fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d007      	beq.n	8011410 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011400:	4b39      	ldr	r3, [pc, #228]	; (80114e8 <xQueueGenericSend+0x1f8>)
 8011402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011406:	601a      	str	r2, [r3, #0]
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011410:	f003 f838 	bl	8014484 <vPortExitCritical>
				return pdPASS;
 8011414:	2301      	movs	r3, #1
 8011416:	e063      	b.n	80114e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d103      	bne.n	8011426 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801141e:	f003 f831 	bl	8014484 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011422:	2300      	movs	r3, #0
 8011424:	e05c      	b.n	80114e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801142c:	f107 0314 	add.w	r3, r7, #20
 8011430:	4618      	mov	r0, r3
 8011432:	f001 feef 	bl	8013214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011436:	2301      	movs	r3, #1
 8011438:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801143a:	f003 f823 	bl	8014484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801143e:	f001 fc09 	bl	8012c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011442:	f002 ffef 	bl	8014424 <vPortEnterCritical>
 8011446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801144c:	b25b      	sxtb	r3, r3
 801144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011452:	d103      	bne.n	801145c <xQueueGenericSend+0x16c>
 8011454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011456:	2200      	movs	r2, #0
 8011458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011462:	b25b      	sxtb	r3, r3
 8011464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011468:	d103      	bne.n	8011472 <xQueueGenericSend+0x182>
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011472:	f003 f807 	bl	8014484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011476:	1d3a      	adds	r2, r7, #4
 8011478:	f107 0314 	add.w	r3, r7, #20
 801147c:	4611      	mov	r1, r2
 801147e:	4618      	mov	r0, r3
 8011480:	f001 fede 	bl	8013240 <xTaskCheckForTimeOut>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d124      	bne.n	80114d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801148a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801148c:	f000 fd31 	bl	8011ef2 <prvIsQueueFull>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d018      	beq.n	80114c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	3310      	adds	r3, #16
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	4611      	mov	r1, r2
 801149e:	4618      	mov	r0, r3
 80114a0:	f001 fdde 	bl	8013060 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80114a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114a6:	f000 fcbc 	bl	8011e22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80114aa:	f001 fbe1 	bl	8012c70 <xTaskResumeAll>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f47f af7c 	bne.w	80113ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80114b6:	4b0c      	ldr	r3, [pc, #48]	; (80114e8 <xQueueGenericSend+0x1f8>)
 80114b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114bc:	601a      	str	r2, [r3, #0]
 80114be:	f3bf 8f4f 	dsb	sy
 80114c2:	f3bf 8f6f 	isb	sy
 80114c6:	e772      	b.n	80113ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80114c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ca:	f000 fcaa 	bl	8011e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114ce:	f001 fbcf 	bl	8012c70 <xTaskResumeAll>
 80114d2:	e76c      	b.n	80113ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80114d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114d6:	f000 fca4 	bl	8011e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80114da:	f001 fbc9 	bl	8012c70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80114de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3738      	adds	r7, #56	; 0x38
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	e000ed04 	.word	0xe000ed04

080114ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b090      	sub	sp, #64	; 0x40
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	60f8      	str	r0, [r7, #12]
 80114f4:	60b9      	str	r1, [r7, #8]
 80114f6:	607a      	str	r2, [r7, #4]
 80114f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10a      	bne.n	801151a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011516:	bf00      	nop
 8011518:	e7fe      	b.n	8011518 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d103      	bne.n	8011528 <xQueueGenericSendFromISR+0x3c>
 8011520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011524:	2b00      	cmp	r3, #0
 8011526:	d101      	bne.n	801152c <xQueueGenericSendFromISR+0x40>
 8011528:	2301      	movs	r3, #1
 801152a:	e000      	b.n	801152e <xQueueGenericSendFromISR+0x42>
 801152c:	2300      	movs	r3, #0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10a      	bne.n	8011548 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011544:	bf00      	nop
 8011546:	e7fe      	b.n	8011546 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	2b02      	cmp	r3, #2
 801154c:	d103      	bne.n	8011556 <xQueueGenericSendFromISR+0x6a>
 801154e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011552:	2b01      	cmp	r3, #1
 8011554:	d101      	bne.n	801155a <xQueueGenericSendFromISR+0x6e>
 8011556:	2301      	movs	r3, #1
 8011558:	e000      	b.n	801155c <xQueueGenericSendFromISR+0x70>
 801155a:	2300      	movs	r3, #0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d10a      	bne.n	8011576 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011564:	f383 8811 	msr	BASEPRI, r3
 8011568:	f3bf 8f6f 	isb	sy
 801156c:	f3bf 8f4f 	dsb	sy
 8011570:	623b      	str	r3, [r7, #32]
}
 8011572:	bf00      	nop
 8011574:	e7fe      	b.n	8011574 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011576:	f003 f837 	bl	80145e8 <vPortValidateInterruptPriority>
	__asm volatile
 801157a:	f3ef 8211 	mrs	r2, BASEPRI
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	61fa      	str	r2, [r7, #28]
 8011590:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8011592:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011594:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801159e:	429a      	cmp	r2, r3
 80115a0:	d302      	bcc.n	80115a8 <xQueueGenericSendFromISR+0xbc>
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	2b02      	cmp	r3, #2
 80115a6:	d12f      	bne.n	8011608 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115b8:	683a      	ldr	r2, [r7, #0]
 80115ba:	68b9      	ldr	r1, [r7, #8]
 80115bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80115be:	f000 fba0 	bl	8011d02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80115c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80115c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ca:	d112      	bne.n	80115f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d016      	beq.n	8011602 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d6:	3324      	adds	r3, #36	; 0x24
 80115d8:	4618      	mov	r0, r3
 80115da:	f001 fd91 	bl	8013100 <xTaskRemoveFromEventList>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00e      	beq.n	8011602 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00b      	beq.n	8011602 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2201      	movs	r2, #1
 80115ee:	601a      	str	r2, [r3, #0]
 80115f0:	e007      	b.n	8011602 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80115f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80115f6:	3301      	adds	r3, #1
 80115f8:	b2db      	uxtb	r3, r3
 80115fa:	b25a      	sxtb	r2, r3
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011602:	2301      	movs	r3, #1
 8011604:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011606:	e001      	b.n	801160c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011608:	2300      	movs	r3, #0
 801160a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	f383 8811 	msr	BASEPRI, r3
}
 8011616:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801161a:	4618      	mov	r0, r3
 801161c:	3740      	adds	r7, #64	; 0x40
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b08e      	sub	sp, #56	; 0x38
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10a      	bne.n	801164c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163a:	f383 8811 	msr	BASEPRI, r3
 801163e:	f3bf 8f6f 	isb	sy
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	623b      	str	r3, [r7, #32]
}
 8011648:	bf00      	nop
 801164a:	e7fe      	b.n	801164a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00a      	beq.n	801166a <xQueueGiveFromISR+0x48>
	__asm volatile
 8011654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011658:	f383 8811 	msr	BASEPRI, r3
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	61fb      	str	r3, [r7, #28]
}
 8011666:	bf00      	nop
 8011668:	e7fe      	b.n	8011668 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <xQueueGiveFromISR+0x58>
 8011672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d101      	bne.n	801167e <xQueueGiveFromISR+0x5c>
 801167a:	2301      	movs	r3, #1
 801167c:	e000      	b.n	8011680 <xQueueGiveFromISR+0x5e>
 801167e:	2300      	movs	r3, #0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d10a      	bne.n	801169a <xQueueGiveFromISR+0x78>
	__asm volatile
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	f383 8811 	msr	BASEPRI, r3
 801168c:	f3bf 8f6f 	isb	sy
 8011690:	f3bf 8f4f 	dsb	sy
 8011694:	61bb      	str	r3, [r7, #24]
}
 8011696:	bf00      	nop
 8011698:	e7fe      	b.n	8011698 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801169a:	f002 ffa5 	bl	80145e8 <vPortValidateInterruptPriority>
	__asm volatile
 801169e:	f3ef 8211 	mrs	r2, BASEPRI
 80116a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a6:	f383 8811 	msr	BASEPRI, r3
 80116aa:	f3bf 8f6f 	isb	sy
 80116ae:	f3bf 8f4f 	dsb	sy
 80116b2:	617a      	str	r2, [r7, #20]
 80116b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80116b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80116c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d22b      	bcs.n	8011722 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80116dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80116e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e4:	d112      	bne.n	801170c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d016      	beq.n	801171c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f0:	3324      	adds	r3, #36	; 0x24
 80116f2:	4618      	mov	r0, r3
 80116f4:	f001 fd04 	bl	8013100 <xTaskRemoveFromEventList>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00e      	beq.n	801171c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00b      	beq.n	801171c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	2201      	movs	r2, #1
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	e007      	b.n	801171c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801170c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011710:	3301      	adds	r3, #1
 8011712:	b2db      	uxtb	r3, r3
 8011714:	b25a      	sxtb	r2, r3
 8011716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801171c:	2301      	movs	r3, #1
 801171e:	637b      	str	r3, [r7, #52]	; 0x34
 8011720:	e001      	b.n	8011726 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011722:	2300      	movs	r3, #0
 8011724:	637b      	str	r3, [r7, #52]	; 0x34
 8011726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011728:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	f383 8811 	msr	BASEPRI, r3
}
 8011730:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011734:	4618      	mov	r0, r3
 8011736:	3738      	adds	r7, #56	; 0x38
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08c      	sub	sp, #48	; 0x30
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011748:	2300      	movs	r3, #0
 801174a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011752:	2b00      	cmp	r3, #0
 8011754:	d10a      	bne.n	801176c <xQueueReceive+0x30>
	__asm volatile
 8011756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801175a:	f383 8811 	msr	BASEPRI, r3
 801175e:	f3bf 8f6f 	isb	sy
 8011762:	f3bf 8f4f 	dsb	sy
 8011766:	623b      	str	r3, [r7, #32]
}
 8011768:	bf00      	nop
 801176a:	e7fe      	b.n	801176a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d103      	bne.n	801177a <xQueueReceive+0x3e>
 8011772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <xQueueReceive+0x42>
 801177a:	2301      	movs	r3, #1
 801177c:	e000      	b.n	8011780 <xQueueReceive+0x44>
 801177e:	2300      	movs	r3, #0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10a      	bne.n	801179a <xQueueReceive+0x5e>
	__asm volatile
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	61fb      	str	r3, [r7, #28]
}
 8011796:	bf00      	nop
 8011798:	e7fe      	b.n	8011798 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801179a:	f001 fea9 	bl	80134f0 <xTaskGetSchedulerState>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <xQueueReceive+0x6e>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <xQueueReceive+0x72>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e000      	b.n	80117b0 <xQueueReceive+0x74>
 80117ae:	2300      	movs	r3, #0
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10a      	bne.n	80117ca <xQueueReceive+0x8e>
	__asm volatile
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	f383 8811 	msr	BASEPRI, r3
 80117bc:	f3bf 8f6f 	isb	sy
 80117c0:	f3bf 8f4f 	dsb	sy
 80117c4:	61bb      	str	r3, [r7, #24]
}
 80117c6:	bf00      	nop
 80117c8:	e7fe      	b.n	80117c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117ca:	f002 fe2b 	bl	8014424 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d01f      	beq.n	801181a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80117da:	68b9      	ldr	r1, [r7, #8]
 80117dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117de:	f000 fafa 	bl	8011dd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e4:	1e5a      	subs	r2, r3, #1
 80117e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ec:	691b      	ldr	r3, [r3, #16]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00f      	beq.n	8011812 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f4:	3310      	adds	r3, #16
 80117f6:	4618      	mov	r0, r3
 80117f8:	f001 fc82 	bl	8013100 <xTaskRemoveFromEventList>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d007      	beq.n	8011812 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011802:	4b3d      	ldr	r3, [pc, #244]	; (80118f8 <xQueueReceive+0x1bc>)
 8011804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011812:	f002 fe37 	bl	8014484 <vPortExitCritical>
				return pdPASS;
 8011816:	2301      	movs	r3, #1
 8011818:	e069      	b.n	80118ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d103      	bne.n	8011828 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011820:	f002 fe30 	bl	8014484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011824:	2300      	movs	r3, #0
 8011826:	e062      	b.n	80118ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	2b00      	cmp	r3, #0
 801182c:	d106      	bne.n	801183c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801182e:	f107 0310 	add.w	r3, r7, #16
 8011832:	4618      	mov	r0, r3
 8011834:	f001 fcee 	bl	8013214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011838:	2301      	movs	r3, #1
 801183a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801183c:	f002 fe22 	bl	8014484 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011840:	f001 fa08 	bl	8012c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011844:	f002 fdee 	bl	8014424 <vPortEnterCritical>
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801184e:	b25b      	sxtb	r3, r3
 8011850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011854:	d103      	bne.n	801185e <xQueueReceive+0x122>
 8011856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011858:	2200      	movs	r2, #0
 801185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011864:	b25b      	sxtb	r3, r3
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186a:	d103      	bne.n	8011874 <xQueueReceive+0x138>
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	2200      	movs	r2, #0
 8011870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011874:	f002 fe06 	bl	8014484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011878:	1d3a      	adds	r2, r7, #4
 801187a:	f107 0310 	add.w	r3, r7, #16
 801187e:	4611      	mov	r1, r2
 8011880:	4618      	mov	r0, r3
 8011882:	f001 fcdd 	bl	8013240 <xTaskCheckForTimeOut>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	d123      	bne.n	80118d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801188c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801188e:	f000 fb1a 	bl	8011ec6 <prvIsQueueEmpty>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d017      	beq.n	80118c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189a:	3324      	adds	r3, #36	; 0x24
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	4611      	mov	r1, r2
 80118a0:	4618      	mov	r0, r3
 80118a2:	f001 fbdd 	bl	8013060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80118a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118a8:	f000 fabb 	bl	8011e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80118ac:	f001 f9e0 	bl	8012c70 <xTaskResumeAll>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d189      	bne.n	80117ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80118b6:	4b10      	ldr	r3, [pc, #64]	; (80118f8 <xQueueReceive+0x1bc>)
 80118b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	e780      	b.n	80117ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80118c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ca:	f000 faaa 	bl	8011e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118ce:	f001 f9cf 	bl	8012c70 <xTaskResumeAll>
 80118d2:	e77a      	b.n	80117ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80118d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118d6:	f000 faa4 	bl	8011e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80118da:	f001 f9c9 	bl	8012c70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118e0:	f000 faf1 	bl	8011ec6 <prvIsQueueEmpty>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f43f af6f 	beq.w	80117ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80118ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3730      	adds	r7, #48	; 0x30
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	e000ed04 	.word	0xe000ed04

080118fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b08e      	sub	sp, #56	; 0x38
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011906:	2300      	movs	r3, #0
 8011908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801190e:	2300      	movs	r3, #0
 8011910:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	623b      	str	r3, [r7, #32]
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00a      	beq.n	801194c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	61fb      	str	r3, [r7, #28]
}
 8011948:	bf00      	nop
 801194a:	e7fe      	b.n	801194a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801194c:	f001 fdd0 	bl	80134f0 <xTaskGetSchedulerState>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <xQueueSemaphoreTake+0x60>
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d101      	bne.n	8011960 <xQueueSemaphoreTake+0x64>
 801195c:	2301      	movs	r3, #1
 801195e:	e000      	b.n	8011962 <xQueueSemaphoreTake+0x66>
 8011960:	2300      	movs	r3, #0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10a      	bne.n	801197c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801196a:	f383 8811 	msr	BASEPRI, r3
 801196e:	f3bf 8f6f 	isb	sy
 8011972:	f3bf 8f4f 	dsb	sy
 8011976:	61bb      	str	r3, [r7, #24]
}
 8011978:	bf00      	nop
 801197a:	e7fe      	b.n	801197a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801197c:	f002 fd52 	bl	8014424 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011984:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011988:	2b00      	cmp	r3, #0
 801198a:	d024      	beq.n	80119d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	1e5a      	subs	r2, r3, #1
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d104      	bne.n	80119a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801199c:	f001 ff1e 	bl	80137dc <pvTaskIncrementMutexHeldCount>
 80119a0:	4602      	mov	r2, r0
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	691b      	ldr	r3, [r3, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00f      	beq.n	80119ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b0:	3310      	adds	r3, #16
 80119b2:	4618      	mov	r0, r3
 80119b4:	f001 fba4 	bl	8013100 <xTaskRemoveFromEventList>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d007      	beq.n	80119ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80119be:	4b54      	ldr	r3, [pc, #336]	; (8011b10 <xQueueSemaphoreTake+0x214>)
 80119c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80119ce:	f002 fd59 	bl	8014484 <vPortExitCritical>
				return pdPASS;
 80119d2:	2301      	movs	r3, #1
 80119d4:	e097      	b.n	8011b06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d111      	bne.n	8011a00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80119dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00a      	beq.n	80119f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80119e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e6:	f383 8811 	msr	BASEPRI, r3
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	617b      	str	r3, [r7, #20]
}
 80119f4:	bf00      	nop
 80119f6:	e7fe      	b.n	80119f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80119f8:	f002 fd44 	bl	8014484 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80119fc:	2300      	movs	r3, #0
 80119fe:	e082      	b.n	8011b06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d106      	bne.n	8011a14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a06:	f107 030c 	add.w	r3, r7, #12
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f001 fc02 	bl	8013214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a10:	2301      	movs	r3, #1
 8011a12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a14:	f002 fd36 	bl	8014484 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a18:	f001 f91c 	bl	8012c54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a1c:	f002 fd02 	bl	8014424 <vPortEnterCritical>
 8011a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a26:	b25b      	sxtb	r3, r3
 8011a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2c:	d103      	bne.n	8011a36 <xQueueSemaphoreTake+0x13a>
 8011a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a30:	2200      	movs	r2, #0
 8011a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a3c:	b25b      	sxtb	r3, r3
 8011a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a42:	d103      	bne.n	8011a4c <xQueueSemaphoreTake+0x150>
 8011a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a4c:	f002 fd1a 	bl	8014484 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a50:	463a      	mov	r2, r7
 8011a52:	f107 030c 	add.w	r3, r7, #12
 8011a56:	4611      	mov	r1, r2
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f001 fbf1 	bl	8013240 <xTaskCheckForTimeOut>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d132      	bne.n	8011aca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a66:	f000 fa2e 	bl	8011ec6 <prvIsQueueEmpty>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d026      	beq.n	8011abe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d109      	bne.n	8011a8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011a78:	f002 fcd4 	bl	8014424 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7e:	689b      	ldr	r3, [r3, #8]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f001 fd53 	bl	801352c <xTaskPriorityInherit>
 8011a86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011a88:	f002 fcfc 	bl	8014484 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8e:	3324      	adds	r3, #36	; 0x24
 8011a90:	683a      	ldr	r2, [r7, #0]
 8011a92:	4611      	mov	r1, r2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f001 fae3 	bl	8013060 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a9c:	f000 f9c1 	bl	8011e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011aa0:	f001 f8e6 	bl	8012c70 <xTaskResumeAll>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f47f af68 	bne.w	801197c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011aac:	4b18      	ldr	r3, [pc, #96]	; (8011b10 <xQueueSemaphoreTake+0x214>)
 8011aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ab2:	601a      	str	r2, [r3, #0]
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	e75e      	b.n	801197c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ac0:	f000 f9af 	bl	8011e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ac4:	f001 f8d4 	bl	8012c70 <xTaskResumeAll>
 8011ac8:	e758      	b.n	801197c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011acc:	f000 f9a9 	bl	8011e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011ad0:	f001 f8ce 	bl	8012c70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ad6:	f000 f9f6 	bl	8011ec6 <prvIsQueueEmpty>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f43f af4d 	beq.w	801197c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d00d      	beq.n	8011b04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011ae8:	f002 fc9c 	bl	8014424 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011aec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aee:	f000 f8f0 	bl	8011cd2 <prvGetDisinheritPriorityAfterTimeout>
 8011af2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af6:	689b      	ldr	r3, [r3, #8]
 8011af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011afa:	4618      	mov	r0, r3
 8011afc:	f001 fdec 	bl	80136d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011b00:	f002 fcc0 	bl	8014484 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3738      	adds	r7, #56	; 0x38
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	e000ed04 	.word	0xe000ed04

08011b14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b08e      	sub	sp, #56	; 0x38
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d10a      	bne.n	8011b40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2e:	f383 8811 	msr	BASEPRI, r3
 8011b32:	f3bf 8f6f 	isb	sy
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	623b      	str	r3, [r7, #32]
}
 8011b3c:	bf00      	nop
 8011b3e:	e7fe      	b.n	8011b3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d103      	bne.n	8011b4e <xQueueReceiveFromISR+0x3a>
 8011b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d101      	bne.n	8011b52 <xQueueReceiveFromISR+0x3e>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e000      	b.n	8011b54 <xQueueReceiveFromISR+0x40>
 8011b52:	2300      	movs	r3, #0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10a      	bne.n	8011b6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5c:	f383 8811 	msr	BASEPRI, r3
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	f3bf 8f4f 	dsb	sy
 8011b68:	61fb      	str	r3, [r7, #28]
}
 8011b6a:	bf00      	nop
 8011b6c:	e7fe      	b.n	8011b6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b6e:	f002 fd3b 	bl	80145e8 <vPortValidateInterruptPriority>
	__asm volatile
 8011b72:	f3ef 8211 	mrs	r2, BASEPRI
 8011b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b7a:	f383 8811 	msr	BASEPRI, r3
 8011b7e:	f3bf 8f6f 	isb	sy
 8011b82:	f3bf 8f4f 	dsb	sy
 8011b86:	61ba      	str	r2, [r7, #24]
 8011b88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011b8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d02f      	beq.n	8011bfa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ba4:	68b9      	ldr	r1, [r7, #8]
 8011ba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ba8:	f000 f915 	bl	8011dd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bae:	1e5a      	subs	r2, r3, #1
 8011bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bbc:	d112      	bne.n	8011be4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc0:	691b      	ldr	r3, [r3, #16]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d016      	beq.n	8011bf4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	3310      	adds	r3, #16
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f001 fa98 	bl	8013100 <xTaskRemoveFromEventList>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00e      	beq.n	8011bf4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00b      	beq.n	8011bf4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2201      	movs	r2, #1
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	e007      	b.n	8011bf4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011be8:	3301      	adds	r3, #1
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	b25a      	sxtb	r2, r3
 8011bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8011bf8:	e001      	b.n	8011bfe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8011bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	f383 8811 	msr	BASEPRI, r3
}
 8011c08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3738      	adds	r7, #56	; 0x38
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10a      	bne.n	8011c38 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8011c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	60bb      	str	r3, [r7, #8]
}
 8011c34:	bf00      	nop
 8011c36:	e7fe      	b.n	8011c36 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8011c38:	f002 fbf4 	bl	8014424 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c40:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011c42:	f002 fc1f 	bl	8014484 <vPortExitCritical>

	return uxReturn;
 8011c46:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10a      	bne.n	8011c78 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8011c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c66:	f383 8811 	msr	BASEPRI, r3
 8011c6a:	f3bf 8f6f 	isb	sy
 8011c6e:	f3bf 8f4f 	dsb	sy
 8011c72:	60fb      	str	r3, [r7, #12]
}
 8011c74:	bf00      	nop
 8011c76:	e7fe      	b.n	8011c76 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8011c7e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011c80:	4618      	mov	r0, r3
 8011c82:	371c      	adds	r7, #28
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d10a      	bne.n	8011cb4 <vQueueDelete+0x28>
	__asm volatile
 8011c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca2:	f383 8811 	msr	BASEPRI, r3
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	60bb      	str	r3, [r7, #8]
}
 8011cb0:	bf00      	nop
 8011cb2:	e7fe      	b.n	8011cb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f000 f95f 	bl	8011f78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d102      	bne.n	8011cca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f002 fd9f 	bl	8014808 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011cca:	bf00      	nop
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011cd2:	b480      	push	{r7}
 8011cd4:	b085      	sub	sp, #20
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d006      	beq.n	8011cf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011cec:	60fb      	str	r3, [r7, #12]
 8011cee:	e001      	b.n	8011cf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3714      	adds	r7, #20
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d00:	4770      	bx	lr

08011d02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b086      	sub	sp, #24
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	60f8      	str	r0, [r7, #12]
 8011d0a:	60b9      	str	r1, [r7, #8]
 8011d0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d10d      	bne.n	8011d3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d14d      	bne.n	8011dc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f001 fc65 	bl	80135fc <xTaskPriorityDisinherit>
 8011d32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2200      	movs	r2, #0
 8011d38:	609a      	str	r2, [r3, #8]
 8011d3a:	e043      	b.n	8011dc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d119      	bne.n	8011d76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	6858      	ldr	r0, [r3, #4]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	68b9      	ldr	r1, [r7, #8]
 8011d4e:	f003 fa39 	bl	80151c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	685a      	ldr	r2, [r3, #4]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5a:	441a      	add	r2, r3
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	685a      	ldr	r2, [r3, #4]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d32b      	bcc.n	8011dc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	605a      	str	r2, [r3, #4]
 8011d74:	e026      	b.n	8011dc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	68d8      	ldr	r0, [r3, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d7e:	461a      	mov	r2, r3
 8011d80:	68b9      	ldr	r1, [r7, #8]
 8011d82:	f003 fa1f 	bl	80151c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	68da      	ldr	r2, [r3, #12]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d8e:	425b      	negs	r3, r3
 8011d90:	441a      	add	r2, r3
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	68da      	ldr	r2, [r3, #12]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d207      	bcs.n	8011db2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	689a      	ldr	r2, [r3, #8]
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011daa:	425b      	negs	r3, r3
 8011dac:	441a      	add	r2, r3
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2b02      	cmp	r3, #2
 8011db6:	d105      	bne.n	8011dc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d002      	beq.n	8011dc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	1c5a      	adds	r2, r3, #1
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011dcc:	697b      	ldr	r3, [r7, #20]
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3718      	adds	r7, #24
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}

08011dd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b082      	sub	sp, #8
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
 8011dde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d018      	beq.n	8011e1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68da      	ldr	r2, [r3, #12]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011df0:	441a      	add	r2, r3
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68da      	ldr	r2, [r3, #12]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	689b      	ldr	r3, [r3, #8]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d303      	bcc.n	8011e0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	68d9      	ldr	r1, [r3, #12]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e12:	461a      	mov	r2, r3
 8011e14:	6838      	ldr	r0, [r7, #0]
 8011e16:	f003 f9d5 	bl	80151c4 <memcpy>
	}
}
 8011e1a:	bf00      	nop
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011e22:	b580      	push	{r7, lr}
 8011e24:	b084      	sub	sp, #16
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011e2a:	f002 fafb 	bl	8014424 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011e36:	e011      	b.n	8011e5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d012      	beq.n	8011e66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	3324      	adds	r3, #36	; 0x24
 8011e44:	4618      	mov	r0, r3
 8011e46:	f001 f95b 	bl	8013100 <xTaskRemoveFromEventList>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d001      	beq.n	8011e54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011e50:	f001 fa58 	bl	8013304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
 8011e56:	3b01      	subs	r3, #1
 8011e58:	b2db      	uxtb	r3, r3
 8011e5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dce9      	bgt.n	8011e38 <prvUnlockQueue+0x16>
 8011e64:	e000      	b.n	8011e68 <prvUnlockQueue+0x46>
					break;
 8011e66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	22ff      	movs	r2, #255	; 0xff
 8011e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011e70:	f002 fb08 	bl	8014484 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011e74:	f002 fad6 	bl	8014424 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e80:	e011      	b.n	8011ea6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d012      	beq.n	8011eb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3310      	adds	r3, #16
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f001 f936 	bl	8013100 <xTaskRemoveFromEventList>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d001      	beq.n	8011e9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011e9a:	f001 fa33 	bl	8013304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011e9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ea0:	3b01      	subs	r3, #1
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	dce9      	bgt.n	8011e82 <prvUnlockQueue+0x60>
 8011eae:	e000      	b.n	8011eb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011eb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	22ff      	movs	r2, #255	; 0xff
 8011eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011eba:	f002 fae3 	bl	8014484 <vPortExitCritical>
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b084      	sub	sp, #16
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ece:	f002 faa9 	bl	8014424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011eda:	2301      	movs	r3, #1
 8011edc:	60fb      	str	r3, [r7, #12]
 8011ede:	e001      	b.n	8011ee4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ee4:	f002 face 	bl	8014484 <vPortExitCritical>

	return xReturn;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3710      	adds	r7, #16
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b084      	sub	sp, #16
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011efa:	f002 fa93 	bl	8014424 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d102      	bne.n	8011f10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	60fb      	str	r3, [r7, #12]
 8011f0e:	e001      	b.n	8011f14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011f10:	2300      	movs	r3, #0
 8011f12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f14:	f002 fab6 	bl	8014484 <vPortExitCritical>

	return xReturn;
 8011f18:	68fb      	ldr	r3, [r7, #12]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
	...

08011f24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011f24:	b480      	push	{r7}
 8011f26:	b085      	sub	sp, #20
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	e014      	b.n	8011f5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011f34:	4a0f      	ldr	r2, [pc, #60]	; (8011f74 <vQueueAddToRegistry+0x50>)
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10b      	bne.n	8011f58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011f40:	490c      	ldr	r1, [pc, #48]	; (8011f74 <vQueueAddToRegistry+0x50>)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	683a      	ldr	r2, [r7, #0]
 8011f46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011f4a:	4a0a      	ldr	r2, [pc, #40]	; (8011f74 <vQueueAddToRegistry+0x50>)
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	00db      	lsls	r3, r3, #3
 8011f50:	4413      	add	r3, r2
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011f56:	e006      	b.n	8011f66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2b07      	cmp	r3, #7
 8011f62:	d9e7      	bls.n	8011f34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011f64:	bf00      	nop
 8011f66:	bf00      	nop
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	20001d7c 	.word	0x20001d7c

08011f78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011f78:	b480      	push	{r7}
 8011f7a:	b085      	sub	sp, #20
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011f80:	2300      	movs	r3, #0
 8011f82:	60fb      	str	r3, [r7, #12]
 8011f84:	e016      	b.n	8011fb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011f86:	4a10      	ldr	r2, [pc, #64]	; (8011fc8 <vQueueUnregisterQueue+0x50>)
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	00db      	lsls	r3, r3, #3
 8011f8c:	4413      	add	r3, r2
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d10b      	bne.n	8011fae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011f96:	4a0c      	ldr	r2, [pc, #48]	; (8011fc8 <vQueueUnregisterQueue+0x50>)
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011fa0:	4a09      	ldr	r2, [pc, #36]	; (8011fc8 <vQueueUnregisterQueue+0x50>)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	4413      	add	r3, r2
 8011fa8:	2200      	movs	r2, #0
 8011faa:	605a      	str	r2, [r3, #4]
				break;
 8011fac:	e006      	b.n	8011fbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2b07      	cmp	r3, #7
 8011fb8:	d9e5      	bls.n	8011f86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011fba:	bf00      	nop
 8011fbc:	bf00      	nop
 8011fbe:	3714      	adds	r7, #20
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc6:	4770      	bx	lr
 8011fc8:	20001d7c 	.word	0x20001d7c

08011fcc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b086      	sub	sp, #24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011fdc:	f002 fa22 	bl	8014424 <vPortEnterCritical>
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fe6:	b25b      	sxtb	r3, r3
 8011fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fec:	d103      	bne.n	8011ff6 <vQueueWaitForMessageRestricted+0x2a>
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ffc:	b25b      	sxtb	r3, r3
 8011ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012002:	d103      	bne.n	801200c <vQueueWaitForMessageRestricted+0x40>
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	2200      	movs	r2, #0
 8012008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801200c:	f002 fa3a 	bl	8014484 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012014:	2b00      	cmp	r3, #0
 8012016:	d106      	bne.n	8012026 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	3324      	adds	r3, #36	; 0x24
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	68b9      	ldr	r1, [r7, #8]
 8012020:	4618      	mov	r0, r3
 8012022:	f001 f841 	bl	80130a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012026:	6978      	ldr	r0, [r7, #20]
 8012028:	f7ff fefb 	bl	8011e22 <prvUnlockQueue>
	}
 801202c:	bf00      	nop
 801202e:	3718      	adds	r7, #24
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8012034:	b580      	push	{r7, lr}
 8012036:	b08c      	sub	sp, #48	; 0x30
 8012038:	af02      	add	r7, sp, #8
 801203a:	60f8      	str	r0, [r7, #12]
 801203c:	60b9      	str	r1, [r7, #8]
 801203e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b01      	cmp	r3, #1
 8012044:	d110      	bne.n	8012068 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8012046:	2301      	movs	r3, #1
 8012048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b04      	cmp	r3, #4
 8012050:	d81b      	bhi.n	801208a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8012052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	61fb      	str	r3, [r7, #28]
}
 8012064:	bf00      	nop
 8012066:	e7fe      	b.n	8012066 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d10a      	bne.n	801208a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8012074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012078:	f383 8811 	msr	BASEPRI, r3
 801207c:	f3bf 8f6f 	isb	sy
 8012080:	f3bf 8f4f 	dsb	sy
 8012084:	61bb      	str	r3, [r7, #24]
}
 8012086:	bf00      	nop
 8012088:	e7fe      	b.n	8012088 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 801208a:	68ba      	ldr	r2, [r7, #8]
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	429a      	cmp	r2, r3
 8012090:	d90a      	bls.n	80120a8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	f383 8811 	msr	BASEPRI, r3
 801209a:	f3bf 8f6f 	isb	sy
 801209e:	f3bf 8f4f 	dsb	sy
 80120a2:	617b      	str	r3, [r7, #20]
}
 80120a4:	bf00      	nop
 80120a6:	e7fe      	b.n	80120a6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d101      	bne.n	80120b2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80120ae:	2301      	movs	r3, #1
 80120b0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	3301      	adds	r3, #1
 80120b6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	3324      	adds	r3, #36	; 0x24
 80120bc:	4618      	mov	r0, r3
 80120be:	f002 fad3 	bl	8014668 <pvPortMalloc>
 80120c2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80120c4:	6a3b      	ldr	r3, [r7, #32]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00a      	beq.n	80120e0 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80120d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120d4:	9300      	str	r3, [sp, #0]
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	6a38      	ldr	r0, [r7, #32]
 80120dc:	f000 fb25 	bl	801272a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80120e0:	6a3b      	ldr	r3, [r7, #32]
	}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3728      	adds	r7, #40	; 0x28
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80120ea:	b480      	push	{r7}
 80120ec:	b087      	sub	sp, #28
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d10a      	bne.n	8012112 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80120fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012100:	f383 8811 	msr	BASEPRI, r3
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	f3bf 8f4f 	dsb	sy
 801210c:	60fb      	str	r3, [r7, #12]
}
 801210e:	bf00      	nop
 8012110:	e7fe      	b.n	8012110 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	689a      	ldr	r2, [r3, #8]
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4413      	add	r3, r2
 801211c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	697a      	ldr	r2, [r7, #20]
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	3b01      	subs	r3, #1
 801212c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	689b      	ldr	r3, [r3, #8]
 8012132:	697a      	ldr	r2, [r7, #20]
 8012134:	429a      	cmp	r2, r3
 8012136:	d304      	bcc.n	8012142 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	689b      	ldr	r3, [r3, #8]
 801213c:	697a      	ldr	r2, [r7, #20]
 801213e:	1ad3      	subs	r3, r2, r3
 8012140:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8012142:	697b      	ldr	r3, [r7, #20]
}
 8012144:	4618      	mov	r0, r3
 8012146:	371c      	adds	r7, #28
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b090      	sub	sp, #64	; 0x40
 8012154:	af02      	add	r7, sp, #8
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	607a      	str	r2, [r7, #4]
 801215c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8012162:	2300      	movs	r3, #0
 8012164:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d10a      	bne.n	8012186 <xStreamBufferSend+0x36>
	__asm volatile
 8012170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012174:	f383 8811 	msr	BASEPRI, r3
 8012178:	f3bf 8f6f 	isb	sy
 801217c:	f3bf 8f4f 	dsb	sy
 8012180:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012182:	bf00      	nop
 8012184:	e7fe      	b.n	8012184 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8012186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012188:	2b00      	cmp	r3, #0
 801218a:	d10a      	bne.n	80121a2 <xStreamBufferSend+0x52>
	__asm volatile
 801218c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012190:	f383 8811 	msr	BASEPRI, r3
 8012194:	f3bf 8f6f 	isb	sy
 8012198:	f3bf 8f4f 	dsb	sy
 801219c:	623b      	str	r3, [r7, #32]
}
 801219e:	bf00      	nop
 80121a0:	e7fe      	b.n	80121a0 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80121a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a4:	7f1b      	ldrb	r3, [r3, #28]
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d011      	beq.n	80121d2 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80121ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b0:	3304      	adds	r3, #4
 80121b2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80121b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d80a      	bhi.n	80121d2 <xStreamBufferSend+0x82>
	__asm volatile
 80121bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c0:	f383 8811 	msr	BASEPRI, r3
 80121c4:	f3bf 8f6f 	isb	sy
 80121c8:	f3bf 8f4f 	dsb	sy
 80121cc:	61fb      	str	r3, [r7, #28]
}
 80121ce:	bf00      	nop
 80121d0:	e7fe      	b.n	80121d0 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d03e      	beq.n	8012256 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80121d8:	f107 0310 	add.w	r3, r7, #16
 80121dc:	4618      	mov	r0, r3
 80121de:	f000 fff3 	bl	80131c8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80121e2:	f002 f91f 	bl	8014424 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80121e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121e8:	f7ff ff7f 	bl	80120ea <xStreamBufferSpacesAvailable>
 80121ec:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80121ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d217      	bcs.n	8012226 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80121f6:	2000      	movs	r0, #0
 80121f8:	f001 fc22 	bl	8013a40 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	695b      	ldr	r3, [r3, #20]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00a      	beq.n	801221a <xStreamBufferSend+0xca>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	61bb      	str	r3, [r7, #24]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 801221a:	f001 f959 	bl	80134d0 <xTaskGetCurrentTaskHandle>
 801221e:	4602      	mov	r2, r0
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	615a      	str	r2, [r3, #20]
 8012224:	e002      	b.n	801222c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8012226:	f002 f92d 	bl	8014484 <vPortExitCritical>
					break;
 801222a:	e014      	b.n	8012256 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 801222c:	f002 f92a 	bl	8014484 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	2200      	movs	r2, #0
 8012234:	2100      	movs	r1, #0
 8012236:	2000      	movs	r0, #0
 8012238:	f001 fae4 	bl	8013804 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 801223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223e:	2200      	movs	r2, #0
 8012240:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8012242:	463a      	mov	r2, r7
 8012244:	f107 0310 	add.w	r3, r7, #16
 8012248:	4611      	mov	r1, r2
 801224a:	4618      	mov	r0, r3
 801224c:	f000 fff8 	bl	8013240 <xTaskCheckForTimeOut>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d0c5      	beq.n	80121e2 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8012256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012258:	2b00      	cmp	r3, #0
 801225a:	d103      	bne.n	8012264 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 801225c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801225e:	f7ff ff44 	bl	80120ea <xStreamBufferSpacesAvailable>
 8012262:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8012264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801226a:	687a      	ldr	r2, [r7, #4]
 801226c:	68b9      	ldr	r1, [r7, #8]
 801226e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012270:	f000 f823 	bl	80122ba <prvWriteMessageToBuffer>
 8012274:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8012276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012278:	2b00      	cmp	r3, #0
 801227a:	d019      	beq.n	80122b0 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 801227c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801227e:	f000 fa34 	bl	80126ea <prvBytesInBuffer>
 8012282:	4602      	mov	r2, r0
 8012284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	429a      	cmp	r2, r3
 801228a:	d311      	bcc.n	80122b0 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 801228c:	f000 fce2 	bl	8012c54 <vTaskSuspendAll>
 8012290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012292:	691b      	ldr	r3, [r3, #16]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d009      	beq.n	80122ac <xStreamBufferSend+0x15c>
 8012298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229a:	6918      	ldr	r0, [r3, #16]
 801229c:	2300      	movs	r3, #0
 801229e:	2200      	movs	r2, #0
 80122a0:	2100      	movs	r1, #0
 80122a2:	f001 fb0f 	bl	80138c4 <xTaskGenericNotify>
 80122a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a8:	2200      	movs	r2, #0
 80122aa:	611a      	str	r2, [r3, #16]
 80122ac:	f000 fce0 	bl	8012c70 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80122b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3738      	adds	r7, #56	; 0x38
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b086      	sub	sp, #24
 80122be:	af00      	add	r7, sp, #0
 80122c0:	60f8      	str	r0, [r7, #12]
 80122c2:	60b9      	str	r1, [r7, #8]
 80122c4:	607a      	str	r2, [r7, #4]
 80122c6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80122ce:	2300      	movs	r3, #0
 80122d0:	617b      	str	r3, [r7, #20]
 80122d2:	e01d      	b.n	8012310 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	7f1b      	ldrb	r3, [r3, #28]
 80122d8:	f003 0301 	and.w	r3, r3, #1
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d108      	bne.n	80122f2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80122e0:	2301      	movs	r3, #1
 80122e2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	4293      	cmp	r3, r2
 80122ea:	bf28      	it	cs
 80122ec:	4613      	movcs	r3, r2
 80122ee:	607b      	str	r3, [r7, #4]
 80122f0:	e00e      	b.n	8012310 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80122f2:	683a      	ldr	r2, [r7, #0]
 80122f4:	6a3b      	ldr	r3, [r7, #32]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d308      	bcc.n	801230c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80122fa:	2301      	movs	r3, #1
 80122fc:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80122fe:	1d3b      	adds	r3, r7, #4
 8012300:	2204      	movs	r2, #4
 8012302:	4619      	mov	r1, r3
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f000 f904 	bl	8012512 <prvWriteBytesToBuffer>
 801230a:	e001      	b.n	8012310 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 801230c:	2300      	movs	r3, #0
 801230e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d007      	beq.n	8012326 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	461a      	mov	r2, r3
 801231a:	68b9      	ldr	r1, [r7, #8]
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f000 f8f8 	bl	8012512 <prvWriteBytesToBuffer>
 8012322:	6138      	str	r0, [r7, #16]
 8012324:	e001      	b.n	801232a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 801232a:	693b      	ldr	r3, [r7, #16]
}
 801232c:	4618      	mov	r0, r3
 801232e:	3718      	adds	r7, #24
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}

08012334 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b08e      	sub	sp, #56	; 0x38
 8012338:	af02      	add	r7, sp, #8
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
 8012340:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8012346:	2300      	movs	r3, #0
 8012348:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d10a      	bne.n	8012366 <xStreamBufferReceive+0x32>
	__asm volatile
 8012350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012354:	f383 8811 	msr	BASEPRI, r3
 8012358:	f3bf 8f6f 	isb	sy
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	61fb      	str	r3, [r7, #28]
}
 8012362:	bf00      	nop
 8012364:	e7fe      	b.n	8012364 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8012366:	6a3b      	ldr	r3, [r7, #32]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d10a      	bne.n	8012382 <xStreamBufferReceive+0x4e>
	__asm volatile
 801236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012370:	f383 8811 	msr	BASEPRI, r3
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	f3bf 8f4f 	dsb	sy
 801237c:	61bb      	str	r3, [r7, #24]
}
 801237e:	bf00      	nop
 8012380:	e7fe      	b.n	8012380 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	7f1b      	ldrb	r3, [r3, #28]
 8012386:	f003 0301 	and.w	r3, r3, #1
 801238a:	2b00      	cmp	r3, #0
 801238c:	d002      	beq.n	8012394 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801238e:	2304      	movs	r3, #4
 8012390:	627b      	str	r3, [r7, #36]	; 0x24
 8012392:	e001      	b.n	8012398 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8012394:	2300      	movs	r3, #0
 8012396:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d034      	beq.n	8012408 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 801239e:	f002 f841 	bl	8014424 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80123a2:	6a38      	ldr	r0, [r7, #32]
 80123a4:	f000 f9a1 	bl	80126ea <prvBytesInBuffer>
 80123a8:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80123aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d816      	bhi.n	80123e0 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80123b2:	2000      	movs	r0, #0
 80123b4:	f001 fb44 	bl	8013a40 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80123b8:	6a3b      	ldr	r3, [r7, #32]
 80123ba:	691b      	ldr	r3, [r3, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00a      	beq.n	80123d6 <xStreamBufferReceive+0xa2>
	__asm volatile
 80123c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c4:	f383 8811 	msr	BASEPRI, r3
 80123c8:	f3bf 8f6f 	isb	sy
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	617b      	str	r3, [r7, #20]
}
 80123d2:	bf00      	nop
 80123d4:	e7fe      	b.n	80123d4 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80123d6:	f001 f87b 	bl	80134d0 <xTaskGetCurrentTaskHandle>
 80123da:	4602      	mov	r2, r0
 80123dc:	6a3b      	ldr	r3, [r7, #32]
 80123de:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80123e0:	f002 f850 	bl	8014484 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80123e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d811      	bhi.n	8012410 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	2200      	movs	r2, #0
 80123f0:	2100      	movs	r1, #0
 80123f2:	2000      	movs	r0, #0
 80123f4:	f001 fa06 	bl	8013804 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	2200      	movs	r2, #0
 80123fc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80123fe:	6a38      	ldr	r0, [r7, #32]
 8012400:	f000 f973 	bl	80126ea <prvBytesInBuffer>
 8012404:	62b8      	str	r0, [r7, #40]	; 0x28
 8012406:	e003      	b.n	8012410 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8012408:	6a38      	ldr	r0, [r7, #32]
 801240a:	f000 f96e 	bl	80126ea <prvBytesInBuffer>
 801240e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8012410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	429a      	cmp	r2, r3
 8012416:	d91d      	bls.n	8012454 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8012418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241a:	9300      	str	r3, [sp, #0]
 801241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	68b9      	ldr	r1, [r7, #8]
 8012422:	6a38      	ldr	r0, [r7, #32]
 8012424:	f000 f81b 	bl	801245e <prvReadMessageFromBuffer>
 8012428:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 801242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801242c:	2b00      	cmp	r3, #0
 801242e:	d011      	beq.n	8012454 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8012430:	f000 fc10 	bl	8012c54 <vTaskSuspendAll>
 8012434:	6a3b      	ldr	r3, [r7, #32]
 8012436:	695b      	ldr	r3, [r3, #20]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d009      	beq.n	8012450 <xStreamBufferReceive+0x11c>
 801243c:	6a3b      	ldr	r3, [r7, #32]
 801243e:	6958      	ldr	r0, [r3, #20]
 8012440:	2300      	movs	r3, #0
 8012442:	2200      	movs	r2, #0
 8012444:	2100      	movs	r1, #0
 8012446:	f001 fa3d 	bl	80138c4 <xTaskGenericNotify>
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	2200      	movs	r2, #0
 801244e:	615a      	str	r2, [r3, #20]
 8012450:	f000 fc0e 	bl	8012c70 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012456:	4618      	mov	r0, r3
 8012458:	3730      	adds	r7, #48	; 0x30
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b088      	sub	sp, #32
 8012462:	af00      	add	r7, sp, #0
 8012464:	60f8      	str	r0, [r7, #12]
 8012466:	60b9      	str	r1, [r7, #8]
 8012468:	607a      	str	r2, [r7, #4]
 801246a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	2b00      	cmp	r3, #0
 8012470:	d019      	beq.n	80124a6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8012478:	f107 0110 	add.w	r1, r7, #16
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012480:	68f8      	ldr	r0, [r7, #12]
 8012482:	f000 f8b8 	bl	80125f6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8012492:	69fa      	ldr	r2, [r7, #28]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	429a      	cmp	r2, r3
 8012498:	d907      	bls.n	80124aa <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	69ba      	ldr	r2, [r7, #24]
 801249e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80124a0:	2300      	movs	r3, #0
 80124a2:	61fb      	str	r3, [r7, #28]
 80124a4:	e001      	b.n	80124aa <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	69fa      	ldr	r2, [r7, #28]
 80124ae:	68b9      	ldr	r1, [r7, #8]
 80124b0:	68f8      	ldr	r0, [r7, #12]
 80124b2:	f000 f8a0 	bl	80125f6 <prvReadBytesFromBuffer>
 80124b6:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80124b8:	697b      	ldr	r3, [r7, #20]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3720      	adds	r7, #32
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 80124c2:	b480      	push	{r7}
 80124c4:	b087      	sub	sp, #28
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10a      	bne.n	80124ea <xStreamBufferIsEmpty+0x28>
	__asm volatile
 80124d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d8:	f383 8811 	msr	BASEPRI, r3
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	f3bf 8f4f 	dsb	sy
 80124e4:	60bb      	str	r3, [r7, #8]
}
 80124e6:	bf00      	nop
 80124e8:	e7fe      	b.n	80124e8 <xStreamBufferIsEmpty+0x26>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	68fa      	ldr	r2, [r7, #12]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d102      	bne.n	8012500 <xStreamBufferIsEmpty+0x3e>
	{
		xReturn = pdTRUE;
 80124fa:	2301      	movs	r3, #1
 80124fc:	617b      	str	r3, [r7, #20]
 80124fe:	e001      	b.n	8012504 <xStreamBufferIsEmpty+0x42>
	}
	else
	{
		xReturn = pdFALSE;
 8012500:	2300      	movs	r3, #0
 8012502:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012504:	697b      	ldr	r3, [r7, #20]
}
 8012506:	4618      	mov	r0, r3
 8012508:	371c      	adds	r7, #28
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr

08012512 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8012512:	b580      	push	{r7, lr}
 8012514:	b08a      	sub	sp, #40	; 0x28
 8012516:	af00      	add	r7, sp, #0
 8012518:	60f8      	str	r0, [r7, #12]
 801251a:	60b9      	str	r1, [r7, #8]
 801251c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10a      	bne.n	801253a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8012524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012528:	f383 8811 	msr	BASEPRI, r3
 801252c:	f3bf 8f6f 	isb	sy
 8012530:	f3bf 8f4f 	dsb	sy
 8012534:	61fb      	str	r3, [r7, #28]
}
 8012536:	bf00      	nop
 8012538:	e7fe      	b.n	8012538 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	689a      	ldr	r2, [r3, #8]
 8012544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012546:	1ad3      	subs	r3, r2, r3
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	4293      	cmp	r3, r2
 801254c:	bf28      	it	cs
 801254e:	4613      	movcs	r3, r2
 8012550:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8012552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	441a      	add	r2, r3
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	429a      	cmp	r2, r3
 801255e:	d90a      	bls.n	8012576 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8012560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012564:	f383 8811 	msr	BASEPRI, r3
 8012568:	f3bf 8f6f 	isb	sy
 801256c:	f3bf 8f4f 	dsb	sy
 8012570:	61bb      	str	r3, [r7, #24]
}
 8012572:	bf00      	nop
 8012574:	e7fe      	b.n	8012574 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	699a      	ldr	r2, [r3, #24]
 801257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257c:	4413      	add	r3, r2
 801257e:	6a3a      	ldr	r2, [r7, #32]
 8012580:	68b9      	ldr	r1, [r7, #8]
 8012582:	4618      	mov	r0, r3
 8012584:	f002 fe1e 	bl	80151c4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	6a3b      	ldr	r3, [r7, #32]
 801258c:	429a      	cmp	r2, r3
 801258e:	d91c      	bls.n	80125ca <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	6a3b      	ldr	r3, [r7, #32]
 8012594:	1ad2      	subs	r2, r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	689b      	ldr	r3, [r3, #8]
 801259a:	429a      	cmp	r2, r3
 801259c:	d90a      	bls.n	80125b4 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a2:	f383 8811 	msr	BASEPRI, r3
 80125a6:	f3bf 8f6f 	isb	sy
 80125aa:	f3bf 8f4f 	dsb	sy
 80125ae:	617b      	str	r3, [r7, #20]
}
 80125b0:	bf00      	nop
 80125b2:	e7fe      	b.n	80125b2 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	6998      	ldr	r0, [r3, #24]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	6a3b      	ldr	r3, [r7, #32]
 80125bc:	18d1      	adds	r1, r2, r3
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	6a3b      	ldr	r3, [r7, #32]
 80125c2:	1ad3      	subs	r3, r2, r3
 80125c4:	461a      	mov	r2, r3
 80125c6:	f002 fdfd 	bl	80151c4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80125ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	4413      	add	r3, r2
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d8:	429a      	cmp	r2, r3
 80125da:	d304      	bcc.n	80125e6 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ea:	605a      	str	r2, [r3, #4]

	return xCount;
 80125ec:	687b      	ldr	r3, [r7, #4]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3728      	adds	r7, #40	; 0x28
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b08a      	sub	sp, #40	; 0x28
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	60f8      	str	r0, [r7, #12]
 80125fe:	60b9      	str	r1, [r7, #8]
 8012600:	607a      	str	r2, [r7, #4]
 8012602:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	4293      	cmp	r3, r2
 801260a:	bf28      	it	cs
 801260c:	4613      	movcs	r3, r2
 801260e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8012610:	6a3b      	ldr	r3, [r7, #32]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d064      	beq.n	80126e0 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	689a      	ldr	r2, [r3, #8]
 8012620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012622:	1ad3      	subs	r3, r2, r3
 8012624:	6a3a      	ldr	r2, [r7, #32]
 8012626:	4293      	cmp	r3, r2
 8012628:	bf28      	it	cs
 801262a:	4613      	movcs	r3, r2
 801262c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 801262e:	69fa      	ldr	r2, [r7, #28]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	429a      	cmp	r2, r3
 8012634:	d90a      	bls.n	801264c <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8012636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263a:	f383 8811 	msr	BASEPRI, r3
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	61bb      	str	r3, [r7, #24]
}
 8012648:	bf00      	nop
 801264a:	e7fe      	b.n	801264a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 801264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	441a      	add	r2, r3
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	429a      	cmp	r2, r3
 8012658:	d90a      	bls.n	8012670 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 801265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265e:	f383 8811 	msr	BASEPRI, r3
 8012662:	f3bf 8f6f 	isb	sy
 8012666:	f3bf 8f4f 	dsb	sy
 801266a:	617b      	str	r3, [r7, #20]
}
 801266c:	bf00      	nop
 801266e:	e7fe      	b.n	801266e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	699a      	ldr	r2, [r3, #24]
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012676:	4413      	add	r3, r2
 8012678:	69fa      	ldr	r2, [r7, #28]
 801267a:	4619      	mov	r1, r3
 801267c:	68b8      	ldr	r0, [r7, #8]
 801267e:	f002 fda1 	bl	80151c4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8012682:	6a3a      	ldr	r2, [r7, #32]
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	429a      	cmp	r2, r3
 8012688:	d919      	bls.n	80126be <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 801268a:	6a3a      	ldr	r2, [r7, #32]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	429a      	cmp	r2, r3
 8012690:	d90a      	bls.n	80126a8 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8012692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012696:	f383 8811 	msr	BASEPRI, r3
 801269a:	f3bf 8f6f 	isb	sy
 801269e:	f3bf 8f4f 	dsb	sy
 80126a2:	613b      	str	r3, [r7, #16]
}
 80126a4:	bf00      	nop
 80126a6:	e7fe      	b.n	80126a6 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80126a8:	68ba      	ldr	r2, [r7, #8]
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	18d0      	adds	r0, r2, r3
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6999      	ldr	r1, [r3, #24]
 80126b2:	6a3a      	ldr	r2, [r7, #32]
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	461a      	mov	r2, r3
 80126ba:	f002 fd83 	bl	80151c4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80126be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	4413      	add	r3, r2
 80126c4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d304      	bcc.n	80126da <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126de:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80126e0:	6a3b      	ldr	r3, [r7, #32]
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3728      	adds	r7, #40	; 0x28
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80126ea:	b480      	push	{r7}
 80126ec:	b085      	sub	sp, #20
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	689a      	ldr	r2, [r3, #8]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	4413      	add	r3, r2
 80126fc:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	68fa      	ldr	r2, [r7, #12]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	68fa      	ldr	r2, [r7, #12]
 801270e:	429a      	cmp	r2, r3
 8012710:	d304      	bcc.n	801271c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 801271c:	68fb      	ldr	r3, [r7, #12]
}
 801271e:	4618      	mov	r0, r3
 8012720:	3714      	adds	r7, #20
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr

0801272a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 801272a:	b580      	push	{r7, lr}
 801272c:	b086      	sub	sp, #24
 801272e:	af00      	add	r7, sp, #0
 8012730:	60f8      	str	r0, [r7, #12]
 8012732:	60b9      	str	r1, [r7, #8]
 8012734:	607a      	str	r2, [r7, #4]
 8012736:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8012738:	2355      	movs	r3, #85	; 0x55
 801273a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	6979      	ldr	r1, [r7, #20]
 8012740:	68b8      	ldr	r0, [r7, #8]
 8012742:	f002 fd4d 	bl	80151e0 <memset>
 8012746:	4602      	mov	r2, r0
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	4293      	cmp	r3, r2
 801274c:	d00a      	beq.n	8012764 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 801274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012752:	f383 8811 	msr	BASEPRI, r3
 8012756:	f3bf 8f6f 	isb	sy
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	613b      	str	r3, [r7, #16]
}
 8012760:	bf00      	nop
 8012762:	e7fe      	b.n	8012762 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8012764:	2224      	movs	r2, #36	; 0x24
 8012766:	2100      	movs	r1, #0
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f002 fd39 	bl	80151e0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	68ba      	ldr	r2, [r7, #8]
 8012772:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	683a      	ldr	r2, [r7, #0]
 801277e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012786:	771a      	strb	r2, [r3, #28]
}
 8012788:	bf00      	nop
 801278a:	3718      	adds	r7, #24
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012790:	b580      	push	{r7, lr}
 8012792:	b08e      	sub	sp, #56	; 0x38
 8012794:	af04      	add	r7, sp, #16
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d10a      	bne.n	80127ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80127a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a8:	f383 8811 	msr	BASEPRI, r3
 80127ac:	f3bf 8f6f 	isb	sy
 80127b0:	f3bf 8f4f 	dsb	sy
 80127b4:	623b      	str	r3, [r7, #32]
}
 80127b6:	bf00      	nop
 80127b8:	e7fe      	b.n	80127b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80127ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d10a      	bne.n	80127d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80127c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	61fb      	str	r3, [r7, #28]
}
 80127d2:	bf00      	nop
 80127d4:	e7fe      	b.n	80127d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80127d6:	23c0      	movs	r3, #192	; 0xc0
 80127d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	2bc0      	cmp	r3, #192	; 0xc0
 80127de:	d00a      	beq.n	80127f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80127e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e4:	f383 8811 	msr	BASEPRI, r3
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	61bb      	str	r3, [r7, #24]
}
 80127f2:	bf00      	nop
 80127f4:	e7fe      	b.n	80127f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80127f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d01e      	beq.n	801283c <xTaskCreateStatic+0xac>
 80127fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012800:	2b00      	cmp	r3, #0
 8012802:	d01b      	beq.n	801283c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012806:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801280c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	2202      	movs	r2, #2
 8012812:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012816:	2300      	movs	r3, #0
 8012818:	9303      	str	r3, [sp, #12]
 801281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281c:	9302      	str	r3, [sp, #8]
 801281e:	f107 0314 	add.w	r3, r7, #20
 8012822:	9301      	str	r3, [sp, #4]
 8012824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012826:	9300      	str	r3, [sp, #0]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	68b9      	ldr	r1, [r7, #8]
 801282e:	68f8      	ldr	r0, [r7, #12]
 8012830:	f000 f850 	bl	80128d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012836:	f000 f8f7 	bl	8012a28 <prvAddNewTaskToReadyList>
 801283a:	e001      	b.n	8012840 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801283c:	2300      	movs	r3, #0
 801283e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012840:	697b      	ldr	r3, [r7, #20]
	}
 8012842:	4618      	mov	r0, r3
 8012844:	3728      	adds	r7, #40	; 0x28
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801284a:	b580      	push	{r7, lr}
 801284c:	b08c      	sub	sp, #48	; 0x30
 801284e:	af04      	add	r7, sp, #16
 8012850:	60f8      	str	r0, [r7, #12]
 8012852:	60b9      	str	r1, [r7, #8]
 8012854:	603b      	str	r3, [r7, #0]
 8012856:	4613      	mov	r3, r2
 8012858:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801285a:	88fb      	ldrh	r3, [r7, #6]
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	4618      	mov	r0, r3
 8012860:	f001 ff02 	bl	8014668 <pvPortMalloc>
 8012864:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00e      	beq.n	801288a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801286c:	20c0      	movs	r0, #192	; 0xc0
 801286e:	f001 fefb 	bl	8014668 <pvPortMalloc>
 8012872:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d003      	beq.n	8012882 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	697a      	ldr	r2, [r7, #20]
 801287e:	631a      	str	r2, [r3, #48]	; 0x30
 8012880:	e005      	b.n	801288e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012882:	6978      	ldr	r0, [r7, #20]
 8012884:	f001 ffc0 	bl	8014808 <vPortFree>
 8012888:	e001      	b.n	801288e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801288a:	2300      	movs	r3, #0
 801288c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d017      	beq.n	80128c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	2200      	movs	r2, #0
 8012898:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801289c:	88fa      	ldrh	r2, [r7, #6]
 801289e:	2300      	movs	r3, #0
 80128a0:	9303      	str	r3, [sp, #12]
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	9302      	str	r3, [sp, #8]
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	68b9      	ldr	r1, [r7, #8]
 80128b2:	68f8      	ldr	r0, [r7, #12]
 80128b4:	f000 f80e 	bl	80128d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80128b8:	69f8      	ldr	r0, [r7, #28]
 80128ba:	f000 f8b5 	bl	8012a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80128be:	2301      	movs	r3, #1
 80128c0:	61bb      	str	r3, [r7, #24]
 80128c2:	e002      	b.n	80128ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80128c4:	f04f 33ff 	mov.w	r3, #4294967295
 80128c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80128ca:	69bb      	ldr	r3, [r7, #24]
	}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3720      	adds	r7, #32
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af00      	add	r7, sp, #0
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
 80128e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80128e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	009b      	lsls	r3, r3, #2
 80128ea:	461a      	mov	r2, r3
 80128ec:	21a5      	movs	r1, #165	; 0xa5
 80128ee:	f002 fc77 	bl	80151e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80128fc:	3b01      	subs	r3, #1
 80128fe:	009b      	lsls	r3, r3, #2
 8012900:	4413      	add	r3, r2
 8012902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012904:	69bb      	ldr	r3, [r7, #24]
 8012906:	f023 0307 	bic.w	r3, r3, #7
 801290a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801290c:	69bb      	ldr	r3, [r7, #24]
 801290e:	f003 0307 	and.w	r3, r3, #7
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00a      	beq.n	801292c <prvInitialiseNewTask+0x58>
	__asm volatile
 8012916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	617b      	str	r3, [r7, #20]
}
 8012928:	bf00      	nop
 801292a:	e7fe      	b.n	801292a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d01f      	beq.n	8012972 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012932:	2300      	movs	r3, #0
 8012934:	61fb      	str	r3, [r7, #28]
 8012936:	e012      	b.n	801295e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	4413      	add	r3, r2
 801293e:	7819      	ldrb	r1, [r3, #0]
 8012940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012942:	69fb      	ldr	r3, [r7, #28]
 8012944:	4413      	add	r3, r2
 8012946:	3334      	adds	r3, #52	; 0x34
 8012948:	460a      	mov	r2, r1
 801294a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801294c:	68ba      	ldr	r2, [r7, #8]
 801294e:	69fb      	ldr	r3, [r7, #28]
 8012950:	4413      	add	r3, r2
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d006      	beq.n	8012966 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	3301      	adds	r3, #1
 801295c:	61fb      	str	r3, [r7, #28]
 801295e:	69fb      	ldr	r3, [r7, #28]
 8012960:	2b0f      	cmp	r3, #15
 8012962:	d9e9      	bls.n	8012938 <prvInitialiseNewTask+0x64>
 8012964:	e000      	b.n	8012968 <prvInitialiseNewTask+0x94>
			{
				break;
 8012966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296a:	2200      	movs	r2, #0
 801296c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012970:	e003      	b.n	801297a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297c:	2b37      	cmp	r3, #55	; 0x37
 801297e:	d901      	bls.n	8012984 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012980:	2337      	movs	r3, #55	; 0x37
 8012982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801298e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012992:	2200      	movs	r2, #0
 8012994:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012998:	3304      	adds	r3, #4
 801299a:	4618      	mov	r0, r3
 801299c:	f7fe f9b6 	bl	8010d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	3318      	adds	r3, #24
 80129a4:	4618      	mov	r0, r3
 80129a6:	f7fe f9b1 	bl	8010d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80129b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80129ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80129c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c2:	2200      	movs	r2, #0
 80129c4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80129c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c8:	2200      	movs	r2, #0
 80129ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80129ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80129d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d8:	3358      	adds	r3, #88	; 0x58
 80129da:	2260      	movs	r2, #96	; 0x60
 80129dc:	2100      	movs	r1, #0
 80129de:	4618      	mov	r0, r3
 80129e0:	f002 fbfe 	bl	80151e0 <memset>
 80129e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e6:	4a0d      	ldr	r2, [pc, #52]	; (8012a1c <prvInitialiseNewTask+0x148>)
 80129e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80129ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ec:	4a0c      	ldr	r2, [pc, #48]	; (8012a20 <prvInitialiseNewTask+0x14c>)
 80129ee:	661a      	str	r2, [r3, #96]	; 0x60
 80129f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129f2:	4a0c      	ldr	r2, [pc, #48]	; (8012a24 <prvInitialiseNewTask+0x150>)
 80129f4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80129f6:	683a      	ldr	r2, [r7, #0]
 80129f8:	68f9      	ldr	r1, [r7, #12]
 80129fa:	69b8      	ldr	r0, [r7, #24]
 80129fc:	f001 fbe8 	bl	80141d0 <pxPortInitialiseStack>
 8012a00:	4602      	mov	r2, r0
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a12:	bf00      	nop
 8012a14:	3720      	adds	r7, #32
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	08018348 	.word	0x08018348
 8012a20:	08018368 	.word	0x08018368
 8012a24:	08018328 	.word	0x08018328

08012a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012a30:	f001 fcf8 	bl	8014424 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012a34:	4b2d      	ldr	r3, [pc, #180]	; (8012aec <prvAddNewTaskToReadyList+0xc4>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	4a2c      	ldr	r2, [pc, #176]	; (8012aec <prvAddNewTaskToReadyList+0xc4>)
 8012a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012a3e:	4b2c      	ldr	r3, [pc, #176]	; (8012af0 <prvAddNewTaskToReadyList+0xc8>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d109      	bne.n	8012a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012a46:	4a2a      	ldr	r2, [pc, #168]	; (8012af0 <prvAddNewTaskToReadyList+0xc8>)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012a4c:	4b27      	ldr	r3, [pc, #156]	; (8012aec <prvAddNewTaskToReadyList+0xc4>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b01      	cmp	r3, #1
 8012a52:	d110      	bne.n	8012a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012a54:	f000 fc7a 	bl	801334c <prvInitialiseTaskLists>
 8012a58:	e00d      	b.n	8012a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012a5a:	4b26      	ldr	r3, [pc, #152]	; (8012af4 <prvAddNewTaskToReadyList+0xcc>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d109      	bne.n	8012a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012a62:	4b23      	ldr	r3, [pc, #140]	; (8012af0 <prvAddNewTaskToReadyList+0xc8>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d802      	bhi.n	8012a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012a70:	4a1f      	ldr	r2, [pc, #124]	; (8012af0 <prvAddNewTaskToReadyList+0xc8>)
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012a76:	4b20      	ldr	r3, [pc, #128]	; (8012af8 <prvAddNewTaskToReadyList+0xd0>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	4a1e      	ldr	r2, [pc, #120]	; (8012af8 <prvAddNewTaskToReadyList+0xd0>)
 8012a7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012a80:	4b1d      	ldr	r3, [pc, #116]	; (8012af8 <prvAddNewTaskToReadyList+0xd0>)
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a8c:	4b1b      	ldr	r3, [pc, #108]	; (8012afc <prvAddNewTaskToReadyList+0xd4>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d903      	bls.n	8012a9c <prvAddNewTaskToReadyList+0x74>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a98:	4a18      	ldr	r2, [pc, #96]	; (8012afc <prvAddNewTaskToReadyList+0xd4>)
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	4413      	add	r3, r2
 8012aa6:	009b      	lsls	r3, r3, #2
 8012aa8:	4a15      	ldr	r2, [pc, #84]	; (8012b00 <prvAddNewTaskToReadyList+0xd8>)
 8012aaa:	441a      	add	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	3304      	adds	r3, #4
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	f7fe f937 	bl	8010d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012ab8:	f001 fce4 	bl	8014484 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012abc:	4b0d      	ldr	r3, [pc, #52]	; (8012af4 <prvAddNewTaskToReadyList+0xcc>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00e      	beq.n	8012ae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ac4:	4b0a      	ldr	r3, [pc, #40]	; (8012af0 <prvAddNewTaskToReadyList+0xc8>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d207      	bcs.n	8012ae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012ad2:	4b0c      	ldr	r3, [pc, #48]	; (8012b04 <prvAddNewTaskToReadyList+0xdc>)
 8012ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ad8:	601a      	str	r2, [r3, #0]
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ae2:	bf00      	nop
 8012ae4:	3708      	adds	r7, #8
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	20002290 	.word	0x20002290
 8012af0:	20001dbc 	.word	0x20001dbc
 8012af4:	2000229c 	.word	0x2000229c
 8012af8:	200022ac 	.word	0x200022ac
 8012afc:	20002298 	.word	0x20002298
 8012b00:	20001dc0 	.word	0x20001dc0
 8012b04:	e000ed04 	.word	0xe000ed04

08012b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012b10:	2300      	movs	r3, #0
 8012b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d017      	beq.n	8012b4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012b1a:	4b13      	ldr	r3, [pc, #76]	; (8012b68 <vTaskDelay+0x60>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00a      	beq.n	8012b38 <vTaskDelay+0x30>
	__asm volatile
 8012b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	60bb      	str	r3, [r7, #8]
}
 8012b34:	bf00      	nop
 8012b36:	e7fe      	b.n	8012b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012b38:	f000 f88c 	bl	8012c54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 ffa4 	bl	8013a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012b44:	f000 f894 	bl	8012c70 <xTaskResumeAll>
 8012b48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d107      	bne.n	8012b60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012b50:	4b06      	ldr	r3, [pc, #24]	; (8012b6c <vTaskDelay+0x64>)
 8012b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b56:	601a      	str	r2, [r3, #0]
 8012b58:	f3bf 8f4f 	dsb	sy
 8012b5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b60:	bf00      	nop
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}
 8012b68:	200022b8 	.word	0x200022b8
 8012b6c:	e000ed04 	.word	0xe000ed04

08012b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b08a      	sub	sp, #40	; 0x28
 8012b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012b7e:	463a      	mov	r2, r7
 8012b80:	1d39      	adds	r1, r7, #4
 8012b82:	f107 0308 	add.w	r3, r7, #8
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fe f86c 	bl	8010c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012b8c:	6839      	ldr	r1, [r7, #0]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	68ba      	ldr	r2, [r7, #8]
 8012b92:	9202      	str	r2, [sp, #8]
 8012b94:	9301      	str	r3, [sp, #4]
 8012b96:	2300      	movs	r3, #0
 8012b98:	9300      	str	r3, [sp, #0]
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	460a      	mov	r2, r1
 8012b9e:	4925      	ldr	r1, [pc, #148]	; (8012c34 <vTaskStartScheduler+0xc4>)
 8012ba0:	4825      	ldr	r0, [pc, #148]	; (8012c38 <vTaskStartScheduler+0xc8>)
 8012ba2:	f7ff fdf5 	bl	8012790 <xTaskCreateStatic>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4a24      	ldr	r2, [pc, #144]	; (8012c3c <vTaskStartScheduler+0xcc>)
 8012baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012bac:	4b23      	ldr	r3, [pc, #140]	; (8012c3c <vTaskStartScheduler+0xcc>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	617b      	str	r3, [r7, #20]
 8012bb8:	e001      	b.n	8012bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d102      	bne.n	8012bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012bc4:	f000 ffb6 	bl	8013b34 <xTimerCreateTimerTask>
 8012bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d11d      	bne.n	8012c0c <vTaskStartScheduler+0x9c>
	__asm volatile
 8012bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	613b      	str	r3, [r7, #16]
}
 8012be2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012be4:	4b16      	ldr	r3, [pc, #88]	; (8012c40 <vTaskStartScheduler+0xd0>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	3358      	adds	r3, #88	; 0x58
 8012bea:	4a16      	ldr	r2, [pc, #88]	; (8012c44 <vTaskStartScheduler+0xd4>)
 8012bec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012bee:	4b16      	ldr	r3, [pc, #88]	; (8012c48 <vTaskStartScheduler+0xd8>)
 8012bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8012bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012bf6:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <vTaskStartScheduler+0xdc>)
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012bfc:	4b14      	ldr	r3, [pc, #80]	; (8012c50 <vTaskStartScheduler+0xe0>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012c02:	f7f6 f963 	bl	8008ecc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c06:	f001 fb6b 	bl	80142e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c0a:	e00e      	b.n	8012c2a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c12:	d10a      	bne.n	8012c2a <vTaskStartScheduler+0xba>
	__asm volatile
 8012c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	60fb      	str	r3, [r7, #12]
}
 8012c26:	bf00      	nop
 8012c28:	e7fe      	b.n	8012c28 <vTaskStartScheduler+0xb8>
}
 8012c2a:	bf00      	nop
 8012c2c:	3718      	adds	r7, #24
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
 8012c32:	bf00      	nop
 8012c34:	08017e18 	.word	0x08017e18
 8012c38:	0801331d 	.word	0x0801331d
 8012c3c:	200022b4 	.word	0x200022b4
 8012c40:	20001dbc 	.word	0x20001dbc
 8012c44:	20000024 	.word	0x20000024
 8012c48:	200022b0 	.word	0x200022b0
 8012c4c:	2000229c 	.word	0x2000229c
 8012c50:	20002294 	.word	0x20002294

08012c54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012c54:	b480      	push	{r7}
 8012c56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012c58:	4b04      	ldr	r3, [pc, #16]	; (8012c6c <vTaskSuspendAll+0x18>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	4a03      	ldr	r2, [pc, #12]	; (8012c6c <vTaskSuspendAll+0x18>)
 8012c60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012c62:	bf00      	nop
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr
 8012c6c:	200022b8 	.word	0x200022b8

08012c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012c76:	2300      	movs	r3, #0
 8012c78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012c7e:	4b42      	ldr	r3, [pc, #264]	; (8012d88 <xTaskResumeAll+0x118>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10a      	bne.n	8012c9c <xTaskResumeAll+0x2c>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	603b      	str	r3, [r7, #0]
}
 8012c98:	bf00      	nop
 8012c9a:	e7fe      	b.n	8012c9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012c9c:	f001 fbc2 	bl	8014424 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012ca0:	4b39      	ldr	r3, [pc, #228]	; (8012d88 <xTaskResumeAll+0x118>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	4a38      	ldr	r2, [pc, #224]	; (8012d88 <xTaskResumeAll+0x118>)
 8012ca8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012caa:	4b37      	ldr	r3, [pc, #220]	; (8012d88 <xTaskResumeAll+0x118>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d162      	bne.n	8012d78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012cb2:	4b36      	ldr	r3, [pc, #216]	; (8012d8c <xTaskResumeAll+0x11c>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d05e      	beq.n	8012d78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012cba:	e02f      	b.n	8012d1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cbc:	4b34      	ldr	r3, [pc, #208]	; (8012d90 <xTaskResumeAll+0x120>)
 8012cbe:	68db      	ldr	r3, [r3, #12]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	3318      	adds	r3, #24
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7fe f889 	bl	8010de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	3304      	adds	r3, #4
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fe f884 	bl	8010de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cdc:	4b2d      	ldr	r3, [pc, #180]	; (8012d94 <xTaskResumeAll+0x124>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d903      	bls.n	8012cec <xTaskResumeAll+0x7c>
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce8:	4a2a      	ldr	r2, [pc, #168]	; (8012d94 <xTaskResumeAll+0x124>)
 8012cea:	6013      	str	r3, [r2, #0]
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf0:	4613      	mov	r3, r2
 8012cf2:	009b      	lsls	r3, r3, #2
 8012cf4:	4413      	add	r3, r2
 8012cf6:	009b      	lsls	r3, r3, #2
 8012cf8:	4a27      	ldr	r2, [pc, #156]	; (8012d98 <xTaskResumeAll+0x128>)
 8012cfa:	441a      	add	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	3304      	adds	r3, #4
 8012d00:	4619      	mov	r1, r3
 8012d02:	4610      	mov	r0, r2
 8012d04:	f7fe f80f 	bl	8010d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d0c:	4b23      	ldr	r3, [pc, #140]	; (8012d9c <xTaskResumeAll+0x12c>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d302      	bcc.n	8012d1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012d16:	4b22      	ldr	r3, [pc, #136]	; (8012da0 <xTaskResumeAll+0x130>)
 8012d18:	2201      	movs	r2, #1
 8012d1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d1c:	4b1c      	ldr	r3, [pc, #112]	; (8012d90 <xTaskResumeAll+0x120>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d1cb      	bne.n	8012cbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d001      	beq.n	8012d2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012d2a:	f000 fbb1 	bl	8013490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012d2e:	4b1d      	ldr	r3, [pc, #116]	; (8012da4 <xTaskResumeAll+0x134>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d010      	beq.n	8012d5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012d3a:	f000 f847 	bl	8012dcc <xTaskIncrementTick>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d002      	beq.n	8012d4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012d44:	4b16      	ldr	r3, [pc, #88]	; (8012da0 <xTaskResumeAll+0x130>)
 8012d46:	2201      	movs	r2, #1
 8012d48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1f1      	bne.n	8012d3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012d56:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <xTaskResumeAll+0x134>)
 8012d58:	2200      	movs	r2, #0
 8012d5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012d5c:	4b10      	ldr	r3, [pc, #64]	; (8012da0 <xTaskResumeAll+0x130>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d009      	beq.n	8012d78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012d64:	2301      	movs	r3, #1
 8012d66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012d68:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <xTaskResumeAll+0x138>)
 8012d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012d78:	f001 fb84 	bl	8014484 <vPortExitCritical>

	return xAlreadyYielded;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	200022b8 	.word	0x200022b8
 8012d8c:	20002290 	.word	0x20002290
 8012d90:	20002250 	.word	0x20002250
 8012d94:	20002298 	.word	0x20002298
 8012d98:	20001dc0 	.word	0x20001dc0
 8012d9c:	20001dbc 	.word	0x20001dbc
 8012da0:	200022a4 	.word	0x200022a4
 8012da4:	200022a0 	.word	0x200022a0
 8012da8:	e000ed04 	.word	0xe000ed04

08012dac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012dac:	b480      	push	{r7}
 8012dae:	b083      	sub	sp, #12
 8012db0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012db2:	4b05      	ldr	r3, [pc, #20]	; (8012dc8 <xTaskGetTickCount+0x1c>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012db8:	687b      	ldr	r3, [r7, #4]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	370c      	adds	r7, #12
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc4:	4770      	bx	lr
 8012dc6:	bf00      	nop
 8012dc8:	20002294 	.word	0x20002294

08012dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dd6:	4b4f      	ldr	r3, [pc, #316]	; (8012f14 <xTaskIncrementTick+0x148>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f040 808f 	bne.w	8012efe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012de0:	4b4d      	ldr	r3, [pc, #308]	; (8012f18 <xTaskIncrementTick+0x14c>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3301      	adds	r3, #1
 8012de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012de8:	4a4b      	ldr	r2, [pc, #300]	; (8012f18 <xTaskIncrementTick+0x14c>)
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d120      	bne.n	8012e36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012df4:	4b49      	ldr	r3, [pc, #292]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00a      	beq.n	8012e14 <xTaskIncrementTick+0x48>
	__asm volatile
 8012dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e02:	f383 8811 	msr	BASEPRI, r3
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	f3bf 8f4f 	dsb	sy
 8012e0e:	603b      	str	r3, [r7, #0]
}
 8012e10:	bf00      	nop
 8012e12:	e7fe      	b.n	8012e12 <xTaskIncrementTick+0x46>
 8012e14:	4b41      	ldr	r3, [pc, #260]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	60fb      	str	r3, [r7, #12]
 8012e1a:	4b41      	ldr	r3, [pc, #260]	; (8012f20 <xTaskIncrementTick+0x154>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a3f      	ldr	r2, [pc, #252]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012e20:	6013      	str	r3, [r2, #0]
 8012e22:	4a3f      	ldr	r2, [pc, #252]	; (8012f20 <xTaskIncrementTick+0x154>)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	6013      	str	r3, [r2, #0]
 8012e28:	4b3e      	ldr	r3, [pc, #248]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	4a3d      	ldr	r2, [pc, #244]	; (8012f24 <xTaskIncrementTick+0x158>)
 8012e30:	6013      	str	r3, [r2, #0]
 8012e32:	f000 fb2d 	bl	8013490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012e36:	4b3c      	ldr	r3, [pc, #240]	; (8012f28 <xTaskIncrementTick+0x15c>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	693a      	ldr	r2, [r7, #16]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d349      	bcc.n	8012ed4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e40:	4b36      	ldr	r3, [pc, #216]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d104      	bne.n	8012e54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e4a:	4b37      	ldr	r3, [pc, #220]	; (8012f28 <xTaskIncrementTick+0x15c>)
 8012e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e50:	601a      	str	r2, [r3, #0]
					break;
 8012e52:	e03f      	b.n	8012ed4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e54:	4b31      	ldr	r3, [pc, #196]	; (8012f1c <xTaskIncrementTick+0x150>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e64:	693a      	ldr	r2, [r7, #16]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d203      	bcs.n	8012e74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e6c:	4a2e      	ldr	r2, [pc, #184]	; (8012f28 <xTaskIncrementTick+0x15c>)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012e72:	e02f      	b.n	8012ed4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	3304      	adds	r3, #4
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7fd ffb1 	bl	8010de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e7e:	68bb      	ldr	r3, [r7, #8]
 8012e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d004      	beq.n	8012e90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	3318      	adds	r3, #24
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fd ffa8 	bl	8010de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e94:	4b25      	ldr	r3, [pc, #148]	; (8012f2c <xTaskIncrementTick+0x160>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d903      	bls.n	8012ea4 <xTaskIncrementTick+0xd8>
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ea0:	4a22      	ldr	r2, [pc, #136]	; (8012f2c <xTaskIncrementTick+0x160>)
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea8:	4613      	mov	r3, r2
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	4413      	add	r3, r2
 8012eae:	009b      	lsls	r3, r3, #2
 8012eb0:	4a1f      	ldr	r2, [pc, #124]	; (8012f30 <xTaskIncrementTick+0x164>)
 8012eb2:	441a      	add	r2, r3
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	3304      	adds	r3, #4
 8012eb8:	4619      	mov	r1, r3
 8012eba:	4610      	mov	r0, r2
 8012ebc:	f7fd ff33 	bl	8010d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec4:	4b1b      	ldr	r3, [pc, #108]	; (8012f34 <xTaskIncrementTick+0x168>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d3b8      	bcc.n	8012e40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ed2:	e7b5      	b.n	8012e40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ed4:	4b17      	ldr	r3, [pc, #92]	; (8012f34 <xTaskIncrementTick+0x168>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eda:	4915      	ldr	r1, [pc, #84]	; (8012f30 <xTaskIncrementTick+0x164>)
 8012edc:	4613      	mov	r3, r2
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	4413      	add	r3, r2
 8012ee2:	009b      	lsls	r3, r3, #2
 8012ee4:	440b      	add	r3, r1
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d901      	bls.n	8012ef0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012eec:	2301      	movs	r3, #1
 8012eee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012ef0:	4b11      	ldr	r3, [pc, #68]	; (8012f38 <xTaskIncrementTick+0x16c>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d007      	beq.n	8012f08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	617b      	str	r3, [r7, #20]
 8012efc:	e004      	b.n	8012f08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012efe:	4b0f      	ldr	r3, [pc, #60]	; (8012f3c <xTaskIncrementTick+0x170>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	3301      	adds	r3, #1
 8012f04:	4a0d      	ldr	r2, [pc, #52]	; (8012f3c <xTaskIncrementTick+0x170>)
 8012f06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012f08:	697b      	ldr	r3, [r7, #20]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3718      	adds	r7, #24
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	200022b8 	.word	0x200022b8
 8012f18:	20002294 	.word	0x20002294
 8012f1c:	20002248 	.word	0x20002248
 8012f20:	2000224c 	.word	0x2000224c
 8012f24:	200022a8 	.word	0x200022a8
 8012f28:	200022b0 	.word	0x200022b0
 8012f2c:	20002298 	.word	0x20002298
 8012f30:	20001dc0 	.word	0x20001dc0
 8012f34:	20001dbc 	.word	0x20001dbc
 8012f38:	200022a4 	.word	0x200022a4
 8012f3c:	200022a0 	.word	0x200022a0

08012f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012f46:	4b3e      	ldr	r3, [pc, #248]	; (8013040 <vTaskSwitchContext+0x100>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d003      	beq.n	8012f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012f4e:	4b3d      	ldr	r3, [pc, #244]	; (8013044 <vTaskSwitchContext+0x104>)
 8012f50:	2201      	movs	r2, #1
 8012f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012f54:	e070      	b.n	8013038 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8012f56:	4b3b      	ldr	r3, [pc, #236]	; (8013044 <vTaskSwitchContext+0x104>)
 8012f58:	2200      	movs	r2, #0
 8012f5a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012f5c:	f7f5 ffbd 	bl	8008eda <getRunTimeCounterValue>
 8012f60:	4603      	mov	r3, r0
 8012f62:	4a39      	ldr	r2, [pc, #228]	; (8013048 <vTaskSwitchContext+0x108>)
 8012f64:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012f66:	4b38      	ldr	r3, [pc, #224]	; (8013048 <vTaskSwitchContext+0x108>)
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	4b38      	ldr	r3, [pc, #224]	; (801304c <vTaskSwitchContext+0x10c>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d909      	bls.n	8012f86 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012f72:	4b37      	ldr	r3, [pc, #220]	; (8013050 <vTaskSwitchContext+0x110>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f78:	4a33      	ldr	r2, [pc, #204]	; (8013048 <vTaskSwitchContext+0x108>)
 8012f7a:	6810      	ldr	r0, [r2, #0]
 8012f7c:	4a33      	ldr	r2, [pc, #204]	; (801304c <vTaskSwitchContext+0x10c>)
 8012f7e:	6812      	ldr	r2, [r2, #0]
 8012f80:	1a82      	subs	r2, r0, r2
 8012f82:	440a      	add	r2, r1
 8012f84:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8012f86:	4b30      	ldr	r3, [pc, #192]	; (8013048 <vTaskSwitchContext+0x108>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a30      	ldr	r2, [pc, #192]	; (801304c <vTaskSwitchContext+0x10c>)
 8012f8c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012f8e:	4b30      	ldr	r3, [pc, #192]	; (8013050 <vTaskSwitchContext+0x110>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	681a      	ldr	r2, [r3, #0]
 8012f94:	4b2e      	ldr	r3, [pc, #184]	; (8013050 <vTaskSwitchContext+0x110>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d808      	bhi.n	8012fb0 <vTaskSwitchContext+0x70>
 8012f9e:	4b2c      	ldr	r3, [pc, #176]	; (8013050 <vTaskSwitchContext+0x110>)
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	4b2b      	ldr	r3, [pc, #172]	; (8013050 <vTaskSwitchContext+0x110>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	3334      	adds	r3, #52	; 0x34
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4610      	mov	r0, r2
 8012fac:	f7f5 ff9d 	bl	8008eea <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fb0:	4b28      	ldr	r3, [pc, #160]	; (8013054 <vTaskSwitchContext+0x114>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e010      	b.n	8012fda <vTaskSwitchContext+0x9a>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10a      	bne.n	8012fd4 <vTaskSwitchContext+0x94>
	__asm volatile
 8012fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc2:	f383 8811 	msr	BASEPRI, r3
 8012fc6:	f3bf 8f6f 	isb	sy
 8012fca:	f3bf 8f4f 	dsb	sy
 8012fce:	607b      	str	r3, [r7, #4]
}
 8012fd0:	bf00      	nop
 8012fd2:	e7fe      	b.n	8012fd2 <vTaskSwitchContext+0x92>
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	60fb      	str	r3, [r7, #12]
 8012fda:	491f      	ldr	r1, [pc, #124]	; (8013058 <vTaskSwitchContext+0x118>)
 8012fdc:	68fa      	ldr	r2, [r7, #12]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	4413      	add	r3, r2
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	440b      	add	r3, r1
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d0e4      	beq.n	8012fb8 <vTaskSwitchContext+0x78>
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	4a17      	ldr	r2, [pc, #92]	; (8013058 <vTaskSwitchContext+0x118>)
 8012ffa:	4413      	add	r3, r2
 8012ffc:	60bb      	str	r3, [r7, #8]
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	685a      	ldr	r2, [r3, #4]
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	605a      	str	r2, [r3, #4]
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	685a      	ldr	r2, [r3, #4]
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	3308      	adds	r3, #8
 8013010:	429a      	cmp	r2, r3
 8013012:	d104      	bne.n	801301e <vTaskSwitchContext+0xde>
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	685a      	ldr	r2, [r3, #4]
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	605a      	str	r2, [r3, #4]
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	68db      	ldr	r3, [r3, #12]
 8013024:	4a0a      	ldr	r2, [pc, #40]	; (8013050 <vTaskSwitchContext+0x110>)
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	4a0a      	ldr	r2, [pc, #40]	; (8013054 <vTaskSwitchContext+0x114>)
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801302e:	4b08      	ldr	r3, [pc, #32]	; (8013050 <vTaskSwitchContext+0x110>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	3358      	adds	r3, #88	; 0x58
 8013034:	4a09      	ldr	r2, [pc, #36]	; (801305c <vTaskSwitchContext+0x11c>)
 8013036:	6013      	str	r3, [r2, #0]
}
 8013038:	bf00      	nop
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	200022b8 	.word	0x200022b8
 8013044:	200022a4 	.word	0x200022a4
 8013048:	200022c0 	.word	0x200022c0
 801304c:	200022bc 	.word	0x200022bc
 8013050:	20001dbc 	.word	0x20001dbc
 8013054:	20002298 	.word	0x20002298
 8013058:	20001dc0 	.word	0x20001dc0
 801305c:	20000024 	.word	0x20000024

08013060 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d10a      	bne.n	8013086 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013074:	f383 8811 	msr	BASEPRI, r3
 8013078:	f3bf 8f6f 	isb	sy
 801307c:	f3bf 8f4f 	dsb	sy
 8013080:	60fb      	str	r3, [r7, #12]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013086:	4b07      	ldr	r3, [pc, #28]	; (80130a4 <vTaskPlaceOnEventList+0x44>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	3318      	adds	r3, #24
 801308c:	4619      	mov	r1, r3
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f7fd fe6d 	bl	8010d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013094:	2101      	movs	r1, #1
 8013096:	6838      	ldr	r0, [r7, #0]
 8013098:	f000 fcf8 	bl	8013a8c <prvAddCurrentTaskToDelayedList>
}
 801309c:	bf00      	nop
 801309e:	3710      	adds	r7, #16
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	20001dbc 	.word	0x20001dbc

080130a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b086      	sub	sp, #24
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	60f8      	str	r0, [r7, #12]
 80130b0:	60b9      	str	r1, [r7, #8]
 80130b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d10a      	bne.n	80130d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80130ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130be:	f383 8811 	msr	BASEPRI, r3
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	f3bf 8f4f 	dsb	sy
 80130ca:	617b      	str	r3, [r7, #20]
}
 80130cc:	bf00      	nop
 80130ce:	e7fe      	b.n	80130ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130d0:	4b0a      	ldr	r3, [pc, #40]	; (80130fc <vTaskPlaceOnEventListRestricted+0x54>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	3318      	adds	r3, #24
 80130d6:	4619      	mov	r1, r3
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f7fd fe24 	bl	8010d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d002      	beq.n	80130ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80130e4:	f04f 33ff 	mov.w	r3, #4294967295
 80130e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80130ea:	6879      	ldr	r1, [r7, #4]
 80130ec:	68b8      	ldr	r0, [r7, #8]
 80130ee:	f000 fccd 	bl	8013a8c <prvAddCurrentTaskToDelayedList>
	}
 80130f2:	bf00      	nop
 80130f4:	3718      	adds	r7, #24
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	20001dbc 	.word	0x20001dbc

08013100 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d10a      	bne.n	801312c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311a:	f383 8811 	msr	BASEPRI, r3
 801311e:	f3bf 8f6f 	isb	sy
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	60fb      	str	r3, [r7, #12]
}
 8013128:	bf00      	nop
 801312a:	e7fe      	b.n	801312a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	3318      	adds	r3, #24
 8013130:	4618      	mov	r0, r3
 8013132:	f7fd fe55 	bl	8010de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013136:	4b1e      	ldr	r3, [pc, #120]	; (80131b0 <xTaskRemoveFromEventList+0xb0>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d11d      	bne.n	801317a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	3304      	adds	r3, #4
 8013142:	4618      	mov	r0, r3
 8013144:	f7fd fe4c 	bl	8010de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801314c:	4b19      	ldr	r3, [pc, #100]	; (80131b4 <xTaskRemoveFromEventList+0xb4>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	429a      	cmp	r2, r3
 8013152:	d903      	bls.n	801315c <xTaskRemoveFromEventList+0x5c>
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013158:	4a16      	ldr	r2, [pc, #88]	; (80131b4 <xTaskRemoveFromEventList+0xb4>)
 801315a:	6013      	str	r3, [r2, #0]
 801315c:	693b      	ldr	r3, [r7, #16]
 801315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013160:	4613      	mov	r3, r2
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	4413      	add	r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	4a13      	ldr	r2, [pc, #76]	; (80131b8 <xTaskRemoveFromEventList+0xb8>)
 801316a:	441a      	add	r2, r3
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	3304      	adds	r3, #4
 8013170:	4619      	mov	r1, r3
 8013172:	4610      	mov	r0, r2
 8013174:	f7fd fdd7 	bl	8010d26 <vListInsertEnd>
 8013178:	e005      	b.n	8013186 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	3318      	adds	r3, #24
 801317e:	4619      	mov	r1, r3
 8013180:	480e      	ldr	r0, [pc, #56]	; (80131bc <xTaskRemoveFromEventList+0xbc>)
 8013182:	f7fd fdd0 	bl	8010d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318a:	4b0d      	ldr	r3, [pc, #52]	; (80131c0 <xTaskRemoveFromEventList+0xc0>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013190:	429a      	cmp	r2, r3
 8013192:	d905      	bls.n	80131a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013194:	2301      	movs	r3, #1
 8013196:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013198:	4b0a      	ldr	r3, [pc, #40]	; (80131c4 <xTaskRemoveFromEventList+0xc4>)
 801319a:	2201      	movs	r2, #1
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	e001      	b.n	80131a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80131a0:	2300      	movs	r3, #0
 80131a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131a4:	697b      	ldr	r3, [r7, #20]
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3718      	adds	r7, #24
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	200022b8 	.word	0x200022b8
 80131b4:	20002298 	.word	0x20002298
 80131b8:	20001dc0 	.word	0x20001dc0
 80131bc:	20002250 	.word	0x20002250
 80131c0:	20001dbc 	.word	0x20001dbc
 80131c4:	200022a4 	.word	0x200022a4

080131c8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d10a      	bne.n	80131ec <vTaskSetTimeOutState+0x24>
	__asm volatile
 80131d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131da:	f383 8811 	msr	BASEPRI, r3
 80131de:	f3bf 8f6f 	isb	sy
 80131e2:	f3bf 8f4f 	dsb	sy
 80131e6:	60fb      	str	r3, [r7, #12]
}
 80131e8:	bf00      	nop
 80131ea:	e7fe      	b.n	80131ea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80131ec:	f001 f91a 	bl	8014424 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80131f0:	4b06      	ldr	r3, [pc, #24]	; (801320c <vTaskSetTimeOutState+0x44>)
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80131f8:	4b05      	ldr	r3, [pc, #20]	; (8013210 <vTaskSetTimeOutState+0x48>)
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8013200:	f001 f940 	bl	8014484 <vPortExitCritical>
}
 8013204:	bf00      	nop
 8013206:	3710      	adds	r7, #16
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	200022a8 	.word	0x200022a8
 8013210:	20002294 	.word	0x20002294

08013214 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801321c:	4b06      	ldr	r3, [pc, #24]	; (8013238 <vTaskInternalSetTimeOutState+0x24>)
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013224:	4b05      	ldr	r3, [pc, #20]	; (801323c <vTaskInternalSetTimeOutState+0x28>)
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	605a      	str	r2, [r3, #4]
}
 801322c:	bf00      	nop
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr
 8013238:	200022a8 	.word	0x200022a8
 801323c:	20002294 	.word	0x20002294

08013240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b088      	sub	sp, #32
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d10a      	bne.n	8013266 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013254:	f383 8811 	msr	BASEPRI, r3
 8013258:	f3bf 8f6f 	isb	sy
 801325c:	f3bf 8f4f 	dsb	sy
 8013260:	613b      	str	r3, [r7, #16]
}
 8013262:	bf00      	nop
 8013264:	e7fe      	b.n	8013264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	60fb      	str	r3, [r7, #12]
}
 801327e:	bf00      	nop
 8013280:	e7fe      	b.n	8013280 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013282:	f001 f8cf 	bl	8014424 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013286:	4b1d      	ldr	r3, [pc, #116]	; (80132fc <xTaskCheckForTimeOut+0xbc>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	69ba      	ldr	r2, [r7, #24]
 8013292:	1ad3      	subs	r3, r2, r3
 8013294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801329e:	d102      	bne.n	80132a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80132a0:	2300      	movs	r3, #0
 80132a2:	61fb      	str	r3, [r7, #28]
 80132a4:	e023      	b.n	80132ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	4b15      	ldr	r3, [pc, #84]	; (8013300 <xTaskCheckForTimeOut+0xc0>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d007      	beq.n	80132c2 <xTaskCheckForTimeOut+0x82>
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	69ba      	ldr	r2, [r7, #24]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d302      	bcc.n	80132c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80132bc:	2301      	movs	r3, #1
 80132be:	61fb      	str	r3, [r7, #28]
 80132c0:	e015      	b.n	80132ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	697a      	ldr	r2, [r7, #20]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d20b      	bcs.n	80132e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	1ad2      	subs	r2, r2, r3
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7ff ff9b 	bl	8013214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132de:	2300      	movs	r3, #0
 80132e0:	61fb      	str	r3, [r7, #28]
 80132e2:	e004      	b.n	80132ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	2200      	movs	r2, #0
 80132e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132ea:	2301      	movs	r3, #1
 80132ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132ee:	f001 f8c9 	bl	8014484 <vPortExitCritical>

	return xReturn;
 80132f2:	69fb      	ldr	r3, [r7, #28]
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3720      	adds	r7, #32
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	20002294 	.word	0x20002294
 8013300:	200022a8 	.word	0x200022a8

08013304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013304:	b480      	push	{r7}
 8013306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013308:	4b03      	ldr	r3, [pc, #12]	; (8013318 <vTaskMissedYield+0x14>)
 801330a:	2201      	movs	r2, #1
 801330c:	601a      	str	r2, [r3, #0]
}
 801330e:	bf00      	nop
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	200022a4 	.word	0x200022a4

0801331c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013324:	f000 f852 	bl	80133cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013328:	4b06      	ldr	r3, [pc, #24]	; (8013344 <prvIdleTask+0x28>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d9f9      	bls.n	8013324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013330:	4b05      	ldr	r3, [pc, #20]	; (8013348 <prvIdleTask+0x2c>)
 8013332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013336:	601a      	str	r2, [r3, #0]
 8013338:	f3bf 8f4f 	dsb	sy
 801333c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013340:	e7f0      	b.n	8013324 <prvIdleTask+0x8>
 8013342:	bf00      	nop
 8013344:	20001dc0 	.word	0x20001dc0
 8013348:	e000ed04 	.word	0xe000ed04

0801334c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013352:	2300      	movs	r3, #0
 8013354:	607b      	str	r3, [r7, #4]
 8013356:	e00c      	b.n	8013372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	4613      	mov	r3, r2
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	4413      	add	r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4a12      	ldr	r2, [pc, #72]	; (80133ac <prvInitialiseTaskLists+0x60>)
 8013364:	4413      	add	r3, r2
 8013366:	4618      	mov	r0, r3
 8013368:	f7fd fcb0 	bl	8010ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	3301      	adds	r3, #1
 8013370:	607b      	str	r3, [r7, #4]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2b37      	cmp	r3, #55	; 0x37
 8013376:	d9ef      	bls.n	8013358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013378:	480d      	ldr	r0, [pc, #52]	; (80133b0 <prvInitialiseTaskLists+0x64>)
 801337a:	f7fd fca7 	bl	8010ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801337e:	480d      	ldr	r0, [pc, #52]	; (80133b4 <prvInitialiseTaskLists+0x68>)
 8013380:	f7fd fca4 	bl	8010ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013384:	480c      	ldr	r0, [pc, #48]	; (80133b8 <prvInitialiseTaskLists+0x6c>)
 8013386:	f7fd fca1 	bl	8010ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801338a:	480c      	ldr	r0, [pc, #48]	; (80133bc <prvInitialiseTaskLists+0x70>)
 801338c:	f7fd fc9e 	bl	8010ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013390:	480b      	ldr	r0, [pc, #44]	; (80133c0 <prvInitialiseTaskLists+0x74>)
 8013392:	f7fd fc9b 	bl	8010ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013396:	4b0b      	ldr	r3, [pc, #44]	; (80133c4 <prvInitialiseTaskLists+0x78>)
 8013398:	4a05      	ldr	r2, [pc, #20]	; (80133b0 <prvInitialiseTaskLists+0x64>)
 801339a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801339c:	4b0a      	ldr	r3, [pc, #40]	; (80133c8 <prvInitialiseTaskLists+0x7c>)
 801339e:	4a05      	ldr	r2, [pc, #20]	; (80133b4 <prvInitialiseTaskLists+0x68>)
 80133a0:	601a      	str	r2, [r3, #0]
}
 80133a2:	bf00      	nop
 80133a4:	3708      	adds	r7, #8
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	20001dc0 	.word	0x20001dc0
 80133b0:	20002220 	.word	0x20002220
 80133b4:	20002234 	.word	0x20002234
 80133b8:	20002250 	.word	0x20002250
 80133bc:	20002264 	.word	0x20002264
 80133c0:	2000227c 	.word	0x2000227c
 80133c4:	20002248 	.word	0x20002248
 80133c8:	2000224c 	.word	0x2000224c

080133cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133d2:	e019      	b.n	8013408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133d4:	f001 f826 	bl	8014424 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133d8:	4b10      	ldr	r3, [pc, #64]	; (801341c <prvCheckTasksWaitingTermination+0x50>)
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	3304      	adds	r3, #4
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7fd fcfb 	bl	8010de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133ea:	4b0d      	ldr	r3, [pc, #52]	; (8013420 <prvCheckTasksWaitingTermination+0x54>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	3b01      	subs	r3, #1
 80133f0:	4a0b      	ldr	r2, [pc, #44]	; (8013420 <prvCheckTasksWaitingTermination+0x54>)
 80133f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133f4:	4b0b      	ldr	r3, [pc, #44]	; (8013424 <prvCheckTasksWaitingTermination+0x58>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	3b01      	subs	r3, #1
 80133fa:	4a0a      	ldr	r2, [pc, #40]	; (8013424 <prvCheckTasksWaitingTermination+0x58>)
 80133fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80133fe:	f001 f841 	bl	8014484 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f000 f810 	bl	8013428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013408:	4b06      	ldr	r3, [pc, #24]	; (8013424 <prvCheckTasksWaitingTermination+0x58>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1e1      	bne.n	80133d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013410:	bf00      	nop
 8013412:	bf00      	nop
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	20002264 	.word	0x20002264
 8013420:	20002290 	.word	0x20002290
 8013424:	20002278 	.word	0x20002278

08013428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	3358      	adds	r3, #88	; 0x58
 8013434:	4618      	mov	r0, r3
 8013436:	f002 fc33 	bl	8015ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013440:	2b00      	cmp	r3, #0
 8013442:	d108      	bne.n	8013456 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013448:	4618      	mov	r0, r3
 801344a:	f001 f9dd 	bl	8014808 <vPortFree>
				vPortFree( pxTCB );
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f001 f9da 	bl	8014808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013454:	e018      	b.n	8013488 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801345c:	2b01      	cmp	r3, #1
 801345e:	d103      	bne.n	8013468 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f001 f9d1 	bl	8014808 <vPortFree>
	}
 8013466:	e00f      	b.n	8013488 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801346e:	2b02      	cmp	r3, #2
 8013470:	d00a      	beq.n	8013488 <prvDeleteTCB+0x60>
	__asm volatile
 8013472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	60fb      	str	r3, [r7, #12]
}
 8013484:	bf00      	nop
 8013486:	e7fe      	b.n	8013486 <prvDeleteTCB+0x5e>
	}
 8013488:	bf00      	nop
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013496:	4b0c      	ldr	r3, [pc, #48]	; (80134c8 <prvResetNextTaskUnblockTime+0x38>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d104      	bne.n	80134aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80134a0:	4b0a      	ldr	r3, [pc, #40]	; (80134cc <prvResetNextTaskUnblockTime+0x3c>)
 80134a2:	f04f 32ff 	mov.w	r2, #4294967295
 80134a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80134a8:	e008      	b.n	80134bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134aa:	4b07      	ldr	r3, [pc, #28]	; (80134c8 <prvResetNextTaskUnblockTime+0x38>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	4a04      	ldr	r2, [pc, #16]	; (80134cc <prvResetNextTaskUnblockTime+0x3c>)
 80134ba:	6013      	str	r3, [r2, #0]
}
 80134bc:	bf00      	nop
 80134be:	370c      	adds	r7, #12
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr
 80134c8:	20002248 	.word	0x20002248
 80134cc:	200022b0 	.word	0x200022b0

080134d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80134d6:	4b05      	ldr	r3, [pc, #20]	; (80134ec <xTaskGetCurrentTaskHandle+0x1c>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80134dc:	687b      	ldr	r3, [r7, #4]
	}
 80134de:	4618      	mov	r0, r3
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr
 80134ea:	bf00      	nop
 80134ec:	20001dbc 	.word	0x20001dbc

080134f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134f6:	4b0b      	ldr	r3, [pc, #44]	; (8013524 <xTaskGetSchedulerState+0x34>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134fe:	2301      	movs	r3, #1
 8013500:	607b      	str	r3, [r7, #4]
 8013502:	e008      	b.n	8013516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013504:	4b08      	ldr	r3, [pc, #32]	; (8013528 <xTaskGetSchedulerState+0x38>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d102      	bne.n	8013512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801350c:	2302      	movs	r3, #2
 801350e:	607b      	str	r3, [r7, #4]
 8013510:	e001      	b.n	8013516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013512:	2300      	movs	r3, #0
 8013514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013516:	687b      	ldr	r3, [r7, #4]
	}
 8013518:	4618      	mov	r0, r3
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr
 8013524:	2000229c 	.word	0x2000229c
 8013528:	200022b8 	.word	0x200022b8

0801352c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013538:	2300      	movs	r3, #0
 801353a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d051      	beq.n	80135e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013546:	4b2a      	ldr	r3, [pc, #168]	; (80135f0 <xTaskPriorityInherit+0xc4>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801354c:	429a      	cmp	r2, r3
 801354e:	d241      	bcs.n	80135d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	699b      	ldr	r3, [r3, #24]
 8013554:	2b00      	cmp	r3, #0
 8013556:	db06      	blt.n	8013566 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013558:	4b25      	ldr	r3, [pc, #148]	; (80135f0 <xTaskPriorityInherit+0xc4>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	6959      	ldr	r1, [r3, #20]
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801356e:	4613      	mov	r3, r2
 8013570:	009b      	lsls	r3, r3, #2
 8013572:	4413      	add	r3, r2
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	4a1f      	ldr	r2, [pc, #124]	; (80135f4 <xTaskPriorityInherit+0xc8>)
 8013578:	4413      	add	r3, r2
 801357a:	4299      	cmp	r1, r3
 801357c:	d122      	bne.n	80135c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	3304      	adds	r3, #4
 8013582:	4618      	mov	r0, r3
 8013584:	f7fd fc2c 	bl	8010de0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013588:	4b19      	ldr	r3, [pc, #100]	; (80135f0 <xTaskPriorityInherit+0xc4>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013596:	4b18      	ldr	r3, [pc, #96]	; (80135f8 <xTaskPriorityInherit+0xcc>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	429a      	cmp	r2, r3
 801359c:	d903      	bls.n	80135a6 <xTaskPriorityInherit+0x7a>
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a2:	4a15      	ldr	r2, [pc, #84]	; (80135f8 <xTaskPriorityInherit+0xcc>)
 80135a4:	6013      	str	r3, [r2, #0]
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135aa:	4613      	mov	r3, r2
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4413      	add	r3, r2
 80135b0:	009b      	lsls	r3, r3, #2
 80135b2:	4a10      	ldr	r2, [pc, #64]	; (80135f4 <xTaskPriorityInherit+0xc8>)
 80135b4:	441a      	add	r2, r3
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	3304      	adds	r3, #4
 80135ba:	4619      	mov	r1, r3
 80135bc:	4610      	mov	r0, r2
 80135be:	f7fd fbb2 	bl	8010d26 <vListInsertEnd>
 80135c2:	e004      	b.n	80135ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135c4:	4b0a      	ldr	r3, [pc, #40]	; (80135f0 <xTaskPriorityInherit+0xc4>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135ce:	2301      	movs	r3, #1
 80135d0:	60fb      	str	r3, [r7, #12]
 80135d2:	e008      	b.n	80135e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135d8:	4b05      	ldr	r3, [pc, #20]	; (80135f0 <xTaskPriorityInherit+0xc4>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135de:	429a      	cmp	r2, r3
 80135e0:	d201      	bcs.n	80135e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135e2:	2301      	movs	r3, #1
 80135e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135e6:	68fb      	ldr	r3, [r7, #12]
	}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3710      	adds	r7, #16
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	20001dbc 	.word	0x20001dbc
 80135f4:	20001dc0 	.word	0x20001dc0
 80135f8:	20002298 	.word	0x20002298

080135fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b086      	sub	sp, #24
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013608:	2300      	movs	r3, #0
 801360a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d056      	beq.n	80136c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013612:	4b2e      	ldr	r3, [pc, #184]	; (80136cc <xTaskPriorityDisinherit+0xd0>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	693a      	ldr	r2, [r7, #16]
 8013618:	429a      	cmp	r2, r3
 801361a:	d00a      	beq.n	8013632 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013620:	f383 8811 	msr	BASEPRI, r3
 8013624:	f3bf 8f6f 	isb	sy
 8013628:	f3bf 8f4f 	dsb	sy
 801362c:	60fb      	str	r3, [r7, #12]
}
 801362e:	bf00      	nop
 8013630:	e7fe      	b.n	8013630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013636:	2b00      	cmp	r3, #0
 8013638:	d10a      	bne.n	8013650 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801363e:	f383 8811 	msr	BASEPRI, r3
 8013642:	f3bf 8f6f 	isb	sy
 8013646:	f3bf 8f4f 	dsb	sy
 801364a:	60bb      	str	r3, [r7, #8]
}
 801364c:	bf00      	nop
 801364e:	e7fe      	b.n	801364e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013654:	1e5a      	subs	r2, r3, #1
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013662:	429a      	cmp	r2, r3
 8013664:	d02c      	beq.n	80136c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801366a:	2b00      	cmp	r3, #0
 801366c:	d128      	bne.n	80136c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	3304      	adds	r3, #4
 8013672:	4618      	mov	r0, r3
 8013674:	f7fd fbb4 	bl	8010de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801367c:	693b      	ldr	r3, [r7, #16]
 801367e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013684:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801368c:	693b      	ldr	r3, [r7, #16]
 801368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013690:	4b0f      	ldr	r3, [pc, #60]	; (80136d0 <xTaskPriorityDisinherit+0xd4>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d903      	bls.n	80136a0 <xTaskPriorityDisinherit+0xa4>
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801369c:	4a0c      	ldr	r2, [pc, #48]	; (80136d0 <xTaskPriorityDisinherit+0xd4>)
 801369e:	6013      	str	r3, [r2, #0]
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136a4:	4613      	mov	r3, r2
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	4a09      	ldr	r2, [pc, #36]	; (80136d4 <xTaskPriorityDisinherit+0xd8>)
 80136ae:	441a      	add	r2, r3
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	3304      	adds	r3, #4
 80136b4:	4619      	mov	r1, r3
 80136b6:	4610      	mov	r0, r2
 80136b8:	f7fd fb35 	bl	8010d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80136bc:	2301      	movs	r3, #1
 80136be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136c0:	697b      	ldr	r3, [r7, #20]
	}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3718      	adds	r7, #24
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	20001dbc 	.word	0x20001dbc
 80136d0:	20002298 	.word	0x20002298
 80136d4:	20001dc0 	.word	0x20001dc0

080136d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b088      	sub	sp, #32
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80136e6:	2301      	movs	r3, #1
 80136e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d06a      	beq.n	80137c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d10a      	bne.n	801370e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	60fb      	str	r3, [r7, #12]
}
 801370a:	bf00      	nop
 801370c:	e7fe      	b.n	801370c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013712:	683a      	ldr	r2, [r7, #0]
 8013714:	429a      	cmp	r2, r3
 8013716:	d902      	bls.n	801371e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	61fb      	str	r3, [r7, #28]
 801371c:	e002      	b.n	8013724 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013722:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013728:	69fa      	ldr	r2, [r7, #28]
 801372a:	429a      	cmp	r2, r3
 801372c:	d04b      	beq.n	80137c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013732:	697a      	ldr	r2, [r7, #20]
 8013734:	429a      	cmp	r2, r3
 8013736:	d146      	bne.n	80137c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013738:	4b25      	ldr	r3, [pc, #148]	; (80137d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	69ba      	ldr	r2, [r7, #24]
 801373e:	429a      	cmp	r2, r3
 8013740:	d10a      	bne.n	8013758 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013746:	f383 8811 	msr	BASEPRI, r3
 801374a:	f3bf 8f6f 	isb	sy
 801374e:	f3bf 8f4f 	dsb	sy
 8013752:	60bb      	str	r3, [r7, #8]
}
 8013754:	bf00      	nop
 8013756:	e7fe      	b.n	8013756 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	69fa      	ldr	r2, [r7, #28]
 8013762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	699b      	ldr	r3, [r3, #24]
 8013768:	2b00      	cmp	r3, #0
 801376a:	db04      	blt.n	8013776 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013776:	69bb      	ldr	r3, [r7, #24]
 8013778:	6959      	ldr	r1, [r3, #20]
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	4613      	mov	r3, r2
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	4413      	add	r3, r2
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	4a13      	ldr	r2, [pc, #76]	; (80137d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013786:	4413      	add	r3, r2
 8013788:	4299      	cmp	r1, r3
 801378a:	d11c      	bne.n	80137c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801378c:	69bb      	ldr	r3, [r7, #24]
 801378e:	3304      	adds	r3, #4
 8013790:	4618      	mov	r0, r3
 8013792:	f7fd fb25 	bl	8010de0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379a:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d903      	bls.n	80137aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a6:	4a0c      	ldr	r2, [pc, #48]	; (80137d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80137a8:	6013      	str	r3, [r2, #0]
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ae:	4613      	mov	r3, r2
 80137b0:	009b      	lsls	r3, r3, #2
 80137b2:	4413      	add	r3, r2
 80137b4:	009b      	lsls	r3, r3, #2
 80137b6:	4a07      	ldr	r2, [pc, #28]	; (80137d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80137b8:	441a      	add	r2, r3
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	3304      	adds	r3, #4
 80137be:	4619      	mov	r1, r3
 80137c0:	4610      	mov	r0, r2
 80137c2:	f7fd fab0 	bl	8010d26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137c6:	bf00      	nop
 80137c8:	3720      	adds	r7, #32
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	20001dbc 	.word	0x20001dbc
 80137d4:	20001dc0 	.word	0x20001dc0
 80137d8:	20002298 	.word	0x20002298

080137dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80137dc:	b480      	push	{r7}
 80137de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80137e0:	4b07      	ldr	r3, [pc, #28]	; (8013800 <pvTaskIncrementMutexHeldCount+0x24>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d004      	beq.n	80137f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80137e8:	4b05      	ldr	r3, [pc, #20]	; (8013800 <pvTaskIncrementMutexHeldCount+0x24>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ee:	3201      	adds	r2, #1
 80137f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80137f2:	4b03      	ldr	r3, [pc, #12]	; (8013800 <pvTaskIncrementMutexHeldCount+0x24>)
 80137f4:	681b      	ldr	r3, [r3, #0]
	}
 80137f6:	4618      	mov	r0, r3
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr
 8013800:	20001dbc 	.word	0x20001dbc

08013804 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013812:	f000 fe07 	bl	8014424 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013816:	4b29      	ldr	r3, [pc, #164]	; (80138bc <xTaskNotifyWait+0xb8>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801381e:	b2db      	uxtb	r3, r3
 8013820:	2b02      	cmp	r3, #2
 8013822:	d01c      	beq.n	801385e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013824:	4b25      	ldr	r3, [pc, #148]	; (80138bc <xTaskNotifyWait+0xb8>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	43d2      	mvns	r2, r2
 8013830:	400a      	ands	r2, r1
 8013832:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013836:	4b21      	ldr	r3, [pc, #132]	; (80138bc <xTaskNotifyWait+0xb8>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2201      	movs	r2, #1
 801383c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d00b      	beq.n	801385e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013846:	2101      	movs	r1, #1
 8013848:	6838      	ldr	r0, [r7, #0]
 801384a:	f000 f91f 	bl	8013a8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801384e:	4b1c      	ldr	r3, [pc, #112]	; (80138c0 <xTaskNotifyWait+0xbc>)
 8013850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013854:	601a      	str	r2, [r3, #0]
 8013856:	f3bf 8f4f 	dsb	sy
 801385a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801385e:	f000 fe11 	bl	8014484 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013862:	f000 fddf 	bl	8014424 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d005      	beq.n	8013878 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801386c:	4b13      	ldr	r3, [pc, #76]	; (80138bc <xTaskNotifyWait+0xb8>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8013878:	4b10      	ldr	r3, [pc, #64]	; (80138bc <xTaskNotifyWait+0xb8>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8013880:	b2db      	uxtb	r3, r3
 8013882:	2b02      	cmp	r3, #2
 8013884:	d002      	beq.n	801388c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8013886:	2300      	movs	r3, #0
 8013888:	617b      	str	r3, [r7, #20]
 801388a:	e00a      	b.n	80138a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801388c:	4b0b      	ldr	r3, [pc, #44]	; (80138bc <xTaskNotifyWait+0xb8>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	43d2      	mvns	r2, r2
 8013898:	400a      	ands	r2, r1
 801389a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801389e:	2301      	movs	r3, #1
 80138a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80138a2:	4b06      	ldr	r3, [pc, #24]	; (80138bc <xTaskNotifyWait+0xb8>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 80138ac:	f000 fdea 	bl	8014484 <vPortExitCritical>

		return xReturn;
 80138b0:	697b      	ldr	r3, [r7, #20]
	}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3718      	adds	r7, #24
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	20001dbc 	.word	0x20001dbc
 80138c0:	e000ed04 	.word	0xe000ed04

080138c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08a      	sub	sp, #40	; 0x28
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	603b      	str	r3, [r7, #0]
 80138d0:	4613      	mov	r3, r2
 80138d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80138d4:	2301      	movs	r3, #1
 80138d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d10a      	bne.n	80138f4 <xTaskGenericNotify+0x30>
	__asm volatile
 80138de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e2:	f383 8811 	msr	BASEPRI, r3
 80138e6:	f3bf 8f6f 	isb	sy
 80138ea:	f3bf 8f4f 	dsb	sy
 80138ee:	61bb      	str	r3, [r7, #24]
}
 80138f0:	bf00      	nop
 80138f2:	e7fe      	b.n	80138f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80138f8:	f000 fd94 	bl	8014424 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d004      	beq.n	801390c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013902:	6a3b      	ldr	r3, [r7, #32]
 8013904:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801390c:	6a3b      	ldr	r3, [r7, #32]
 801390e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8013912:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013914:	6a3b      	ldr	r3, [r7, #32]
 8013916:	2202      	movs	r2, #2
 8013918:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	2b04      	cmp	r3, #4
 8013920:	d82d      	bhi.n	801397e <xTaskGenericNotify+0xba>
 8013922:	a201      	add	r2, pc, #4	; (adr r2, 8013928 <xTaskGenericNotify+0x64>)
 8013924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013928:	080139a1 	.word	0x080139a1
 801392c:	0801393d 	.word	0x0801393d
 8013930:	0801394f 	.word	0x0801394f
 8013934:	0801395f 	.word	0x0801395f
 8013938:	08013969 	.word	0x08013969
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801393c:	6a3b      	ldr	r3, [r7, #32]
 801393e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	431a      	orrs	r2, r3
 8013946:	6a3b      	ldr	r3, [r7, #32]
 8013948:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801394c:	e02b      	b.n	80139a6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801394e:	6a3b      	ldr	r3, [r7, #32]
 8013950:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013954:	1c5a      	adds	r2, r3, #1
 8013956:	6a3b      	ldr	r3, [r7, #32]
 8013958:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801395c:	e023      	b.n	80139a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801395e:	6a3b      	ldr	r3, [r7, #32]
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8013966:	e01e      	b.n	80139a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013968:	7ffb      	ldrb	r3, [r7, #31]
 801396a:	2b02      	cmp	r3, #2
 801396c:	d004      	beq.n	8013978 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	68ba      	ldr	r2, [r7, #8]
 8013972:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013976:	e016      	b.n	80139a6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8013978:	2300      	movs	r3, #0
 801397a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801397c:	e013      	b.n	80139a6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013988:	d00c      	beq.n	80139a4 <xTaskGenericNotify+0xe0>
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	617b      	str	r3, [r7, #20]
}
 801399c:	bf00      	nop
 801399e:	e7fe      	b.n	801399e <xTaskGenericNotify+0xda>
					break;
 80139a0:	bf00      	nop
 80139a2:	e000      	b.n	80139a6 <xTaskGenericNotify+0xe2>

					break;
 80139a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80139a6:	7ffb      	ldrb	r3, [r7, #31]
 80139a8:	2b01      	cmp	r3, #1
 80139aa:	d13a      	bne.n	8013a22 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139ac:	6a3b      	ldr	r3, [r7, #32]
 80139ae:	3304      	adds	r3, #4
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fd fa15 	bl	8010de0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80139b6:	6a3b      	ldr	r3, [r7, #32]
 80139b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ba:	4b1d      	ldr	r3, [pc, #116]	; (8013a30 <xTaskGenericNotify+0x16c>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d903      	bls.n	80139ca <xTaskGenericNotify+0x106>
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139c6:	4a1a      	ldr	r2, [pc, #104]	; (8013a30 <xTaskGenericNotify+0x16c>)
 80139c8:	6013      	str	r3, [r2, #0]
 80139ca:	6a3b      	ldr	r3, [r7, #32]
 80139cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ce:	4613      	mov	r3, r2
 80139d0:	009b      	lsls	r3, r3, #2
 80139d2:	4413      	add	r3, r2
 80139d4:	009b      	lsls	r3, r3, #2
 80139d6:	4a17      	ldr	r2, [pc, #92]	; (8013a34 <xTaskGenericNotify+0x170>)
 80139d8:	441a      	add	r2, r3
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	3304      	adds	r3, #4
 80139de:	4619      	mov	r1, r3
 80139e0:	4610      	mov	r0, r2
 80139e2:	f7fd f9a0 	bl	8010d26 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80139e6:	6a3b      	ldr	r3, [r7, #32]
 80139e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d00a      	beq.n	8013a04 <xTaskGenericNotify+0x140>
	__asm volatile
 80139ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f2:	f383 8811 	msr	BASEPRI, r3
 80139f6:	f3bf 8f6f 	isb	sy
 80139fa:	f3bf 8f4f 	dsb	sy
 80139fe:	613b      	str	r3, [r7, #16]
}
 8013a00:	bf00      	nop
 8013a02:	e7fe      	b.n	8013a02 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a04:	6a3b      	ldr	r3, [r7, #32]
 8013a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a08:	4b0b      	ldr	r3, [pc, #44]	; (8013a38 <xTaskGenericNotify+0x174>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d907      	bls.n	8013a22 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013a12:	4b0a      	ldr	r3, [pc, #40]	; (8013a3c <xTaskGenericNotify+0x178>)
 8013a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a18:	601a      	str	r2, [r3, #0]
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013a22:	f000 fd2f 	bl	8014484 <vPortExitCritical>

		return xReturn;
 8013a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3728      	adds	r7, #40	; 0x28
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	20002298 	.word	0x20002298
 8013a34:	20001dc0 	.word	0x20001dc0
 8013a38:	20001dbc 	.word	0x20001dbc
 8013a3c:	e000ed04 	.word	0xe000ed04

08013a40 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d102      	bne.n	8013a54 <xTaskNotifyStateClear+0x14>
 8013a4e:	4b0e      	ldr	r3, [pc, #56]	; (8013a88 <xTaskNotifyStateClear+0x48>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	e000      	b.n	8013a56 <xTaskNotifyStateClear+0x16>
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8013a58:	f000 fce4 	bl	8014424 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	2b02      	cmp	r3, #2
 8013a66:	d106      	bne.n	8013a76 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8013a70:	2301      	movs	r3, #1
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	e001      	b.n	8013a7a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8013a7a:	f000 fd03 	bl	8014484 <vPortExitCritical>

		return xReturn;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
	}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}
 8013a88:	20001dbc 	.word	0x20001dbc

08013a8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013a96:	4b21      	ldr	r3, [pc, #132]	; (8013b1c <prvAddCurrentTaskToDelayedList+0x90>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a9c:	4b20      	ldr	r3, [pc, #128]	; (8013b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	3304      	adds	r3, #4
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7fd f99c 	bl	8010de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aae:	d10a      	bne.n	8013ac6 <prvAddCurrentTaskToDelayedList+0x3a>
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d007      	beq.n	8013ac6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ab6:	4b1a      	ldr	r3, [pc, #104]	; (8013b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3304      	adds	r3, #4
 8013abc:	4619      	mov	r1, r3
 8013abe:	4819      	ldr	r0, [pc, #100]	; (8013b24 <prvAddCurrentTaskToDelayedList+0x98>)
 8013ac0:	f7fd f931 	bl	8010d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013ac4:	e026      	b.n	8013b14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013ac6:	68fa      	ldr	r2, [r7, #12]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	4413      	add	r3, r2
 8013acc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013ace:	4b14      	ldr	r3, [pc, #80]	; (8013b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	68ba      	ldr	r2, [r7, #8]
 8013ad4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d209      	bcs.n	8013af2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013ade:	4b12      	ldr	r3, [pc, #72]	; (8013b28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	4b0f      	ldr	r3, [pc, #60]	; (8013b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4610      	mov	r0, r2
 8013aec:	f7fd f93f 	bl	8010d6e <vListInsert>
}
 8013af0:	e010      	b.n	8013b14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013af2:	4b0e      	ldr	r3, [pc, #56]	; (8013b2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	4b0a      	ldr	r3, [pc, #40]	; (8013b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	3304      	adds	r3, #4
 8013afc:	4619      	mov	r1, r3
 8013afe:	4610      	mov	r0, r2
 8013b00:	f7fd f935 	bl	8010d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013b04:	4b0a      	ldr	r3, [pc, #40]	; (8013b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d202      	bcs.n	8013b14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013b0e:	4a08      	ldr	r2, [pc, #32]	; (8013b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	6013      	str	r3, [r2, #0]
}
 8013b14:	bf00      	nop
 8013b16:	3710      	adds	r7, #16
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	20002294 	.word	0x20002294
 8013b20:	20001dbc 	.word	0x20001dbc
 8013b24:	2000227c 	.word	0x2000227c
 8013b28:	2000224c 	.word	0x2000224c
 8013b2c:	20002248 	.word	0x20002248
 8013b30:	200022b0 	.word	0x200022b0

08013b34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b08a      	sub	sp, #40	; 0x28
 8013b38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013b3e:	f000 fb07 	bl	8014150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013b42:	4b1c      	ldr	r3, [pc, #112]	; (8013bb4 <xTimerCreateTimerTask+0x80>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d021      	beq.n	8013b8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013b52:	1d3a      	adds	r2, r7, #4
 8013b54:	f107 0108 	add.w	r1, r7, #8
 8013b58:	f107 030c 	add.w	r3, r7, #12
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7fd f89b 	bl	8010c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013b62:	6879      	ldr	r1, [r7, #4]
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	68fa      	ldr	r2, [r7, #12]
 8013b68:	9202      	str	r2, [sp, #8]
 8013b6a:	9301      	str	r3, [sp, #4]
 8013b6c:	2302      	movs	r3, #2
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	2300      	movs	r3, #0
 8013b72:	460a      	mov	r2, r1
 8013b74:	4910      	ldr	r1, [pc, #64]	; (8013bb8 <xTimerCreateTimerTask+0x84>)
 8013b76:	4811      	ldr	r0, [pc, #68]	; (8013bbc <xTimerCreateTimerTask+0x88>)
 8013b78:	f7fe fe0a 	bl	8012790 <xTaskCreateStatic>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	4a10      	ldr	r2, [pc, #64]	; (8013bc0 <xTimerCreateTimerTask+0x8c>)
 8013b80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013b82:	4b0f      	ldr	r3, [pc, #60]	; (8013bc0 <xTimerCreateTimerTask+0x8c>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d001      	beq.n	8013b8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d10a      	bne.n	8013baa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	613b      	str	r3, [r7, #16]
}
 8013ba6:	bf00      	nop
 8013ba8:	e7fe      	b.n	8013ba8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013baa:	697b      	ldr	r3, [r7, #20]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3718      	adds	r7, #24
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	200022f4 	.word	0x200022f4
 8013bb8:	08017e48 	.word	0x08017e48
 8013bbc:	08013cf9 	.word	0x08013cf9
 8013bc0:	200022f8 	.word	0x200022f8

08013bc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08a      	sub	sp, #40	; 0x28
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	607a      	str	r2, [r7, #4]
 8013bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d10a      	bne.n	8013bf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be0:	f383 8811 	msr	BASEPRI, r3
 8013be4:	f3bf 8f6f 	isb	sy
 8013be8:	f3bf 8f4f 	dsb	sy
 8013bec:	623b      	str	r3, [r7, #32]
}
 8013bee:	bf00      	nop
 8013bf0:	e7fe      	b.n	8013bf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013bf2:	4b1a      	ldr	r3, [pc, #104]	; (8013c5c <xTimerGenericCommand+0x98>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d02a      	beq.n	8013c50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2b05      	cmp	r3, #5
 8013c0a:	dc18      	bgt.n	8013c3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013c0c:	f7ff fc70 	bl	80134f0 <xTaskGetSchedulerState>
 8013c10:	4603      	mov	r3, r0
 8013c12:	2b02      	cmp	r3, #2
 8013c14:	d109      	bne.n	8013c2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <xTimerGenericCommand+0x98>)
 8013c18:	6818      	ldr	r0, [r3, #0]
 8013c1a:	f107 0110 	add.w	r1, r7, #16
 8013c1e:	2300      	movs	r3, #0
 8013c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c22:	f7fd fb65 	bl	80112f0 <xQueueGenericSend>
 8013c26:	6278      	str	r0, [r7, #36]	; 0x24
 8013c28:	e012      	b.n	8013c50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013c2a:	4b0c      	ldr	r3, [pc, #48]	; (8013c5c <xTimerGenericCommand+0x98>)
 8013c2c:	6818      	ldr	r0, [r3, #0]
 8013c2e:	f107 0110 	add.w	r1, r7, #16
 8013c32:	2300      	movs	r3, #0
 8013c34:	2200      	movs	r2, #0
 8013c36:	f7fd fb5b 	bl	80112f0 <xQueueGenericSend>
 8013c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8013c3c:	e008      	b.n	8013c50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013c3e:	4b07      	ldr	r3, [pc, #28]	; (8013c5c <xTimerGenericCommand+0x98>)
 8013c40:	6818      	ldr	r0, [r3, #0]
 8013c42:	f107 0110 	add.w	r1, r7, #16
 8013c46:	2300      	movs	r3, #0
 8013c48:	683a      	ldr	r2, [r7, #0]
 8013c4a:	f7fd fc4f 	bl	80114ec <xQueueGenericSendFromISR>
 8013c4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3728      	adds	r7, #40	; 0x28
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	200022f4 	.word	0x200022f4

08013c60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b088      	sub	sp, #32
 8013c64:	af02      	add	r7, sp, #8
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c6a:	4b22      	ldr	r3, [pc, #136]	; (8013cf4 <prvProcessExpiredTimer+0x94>)
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	68db      	ldr	r3, [r3, #12]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	3304      	adds	r3, #4
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fd f8b1 	bl	8010de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c84:	f003 0304 	and.w	r3, r3, #4
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d022      	beq.n	8013cd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	699a      	ldr	r2, [r3, #24]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	18d1      	adds	r1, r2, r3
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	683a      	ldr	r2, [r7, #0]
 8013c98:	6978      	ldr	r0, [r7, #20]
 8013c9a:	f000 f8d1 	bl	8013e40 <prvInsertTimerInActiveList>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d01f      	beq.n	8013ce4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	9300      	str	r3, [sp, #0]
 8013ca8:	2300      	movs	r3, #0
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	2100      	movs	r1, #0
 8013cae:	6978      	ldr	r0, [r7, #20]
 8013cb0:	f7ff ff88 	bl	8013bc4 <xTimerGenericCommand>
 8013cb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d113      	bne.n	8013ce4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc0:	f383 8811 	msr	BASEPRI, r3
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	60fb      	str	r3, [r7, #12]
}
 8013cce:	bf00      	nop
 8013cd0:	e7fe      	b.n	8013cd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cd8:	f023 0301 	bic.w	r3, r3, #1
 8013cdc:	b2da      	uxtb	r2, r3
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	6a1b      	ldr	r3, [r3, #32]
 8013ce8:	6978      	ldr	r0, [r7, #20]
 8013cea:	4798      	blx	r3
}
 8013cec:	bf00      	nop
 8013cee:	3718      	adds	r7, #24
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	200022ec 	.word	0x200022ec

08013cf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d00:	f107 0308 	add.w	r3, r7, #8
 8013d04:	4618      	mov	r0, r3
 8013d06:	f000 f857 	bl	8013db8 <prvGetNextExpireTime>
 8013d0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	4619      	mov	r1, r3
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f000 f803 	bl	8013d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013d16:	f000 f8d5 	bl	8013ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013d1a:	e7f1      	b.n	8013d00 <prvTimerTask+0x8>

08013d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013d26:	f7fe ff95 	bl	8012c54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013d2a:	f107 0308 	add.w	r3, r7, #8
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f000 f866 	bl	8013e00 <prvSampleTimeNow>
 8013d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d130      	bne.n	8013d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d10a      	bne.n	8013d58 <prvProcessTimerOrBlockTask+0x3c>
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d806      	bhi.n	8013d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013d4a:	f7fe ff91 	bl	8012c70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013d4e:	68f9      	ldr	r1, [r7, #12]
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff ff85 	bl	8013c60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013d56:	e024      	b.n	8013da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d008      	beq.n	8013d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013d5e:	4b13      	ldr	r3, [pc, #76]	; (8013dac <prvProcessTimerOrBlockTask+0x90>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d101      	bne.n	8013d6c <prvProcessTimerOrBlockTask+0x50>
 8013d68:	2301      	movs	r3, #1
 8013d6a:	e000      	b.n	8013d6e <prvProcessTimerOrBlockTask+0x52>
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013d70:	4b0f      	ldr	r3, [pc, #60]	; (8013db0 <prvProcessTimerOrBlockTask+0x94>)
 8013d72:	6818      	ldr	r0, [r3, #0]
 8013d74:	687a      	ldr	r2, [r7, #4]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	683a      	ldr	r2, [r7, #0]
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	f7fe f925 	bl	8011fcc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013d82:	f7fe ff75 	bl	8012c70 <xTaskResumeAll>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d10a      	bne.n	8013da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013d8c:	4b09      	ldr	r3, [pc, #36]	; (8013db4 <prvProcessTimerOrBlockTask+0x98>)
 8013d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	f3bf 8f4f 	dsb	sy
 8013d98:	f3bf 8f6f 	isb	sy
}
 8013d9c:	e001      	b.n	8013da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013d9e:	f7fe ff67 	bl	8012c70 <xTaskResumeAll>
}
 8013da2:	bf00      	nop
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	200022f0 	.word	0x200022f0
 8013db0:	200022f4 	.word	0x200022f4
 8013db4:	e000ed04 	.word	0xe000ed04

08013db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013db8:	b480      	push	{r7}
 8013dba:	b085      	sub	sp, #20
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013dc0:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <prvGetNextExpireTime+0x44>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d101      	bne.n	8013dce <prvGetNextExpireTime+0x16>
 8013dca:	2201      	movs	r2, #1
 8013dcc:	e000      	b.n	8013dd0 <prvGetNextExpireTime+0x18>
 8013dce:	2200      	movs	r2, #0
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d105      	bne.n	8013de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ddc:	4b07      	ldr	r3, [pc, #28]	; (8013dfc <prvGetNextExpireTime+0x44>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	68db      	ldr	r3, [r3, #12]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	60fb      	str	r3, [r7, #12]
 8013de6:	e001      	b.n	8013dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013de8:	2300      	movs	r3, #0
 8013dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013dec:	68fb      	ldr	r3, [r7, #12]
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3714      	adds	r7, #20
 8013df2:	46bd      	mov	sp, r7
 8013df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop
 8013dfc:	200022ec 	.word	0x200022ec

08013e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013e08:	f7fe ffd0 	bl	8012dac <xTaskGetTickCount>
 8013e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013e0e:	4b0b      	ldr	r3, [pc, #44]	; (8013e3c <prvSampleTimeNow+0x3c>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d205      	bcs.n	8013e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013e18:	f000 f936 	bl	8014088 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	601a      	str	r2, [r3, #0]
 8013e22:	e002      	b.n	8013e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2200      	movs	r2, #0
 8013e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013e2a:	4a04      	ldr	r2, [pc, #16]	; (8013e3c <prvSampleTimeNow+0x3c>)
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013e30:	68fb      	ldr	r3, [r7, #12]
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3710      	adds	r7, #16
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	200022fc 	.word	0x200022fc

08013e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b086      	sub	sp, #24
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
 8013e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	68fa      	ldr	r2, [r7, #12]
 8013e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	429a      	cmp	r2, r3
 8013e64:	d812      	bhi.n	8013e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	1ad2      	subs	r2, r2, r3
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	699b      	ldr	r3, [r3, #24]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d302      	bcc.n	8013e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013e74:	2301      	movs	r3, #1
 8013e76:	617b      	str	r3, [r7, #20]
 8013e78:	e01b      	b.n	8013eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e7a:	4b10      	ldr	r3, [pc, #64]	; (8013ebc <prvInsertTimerInActiveList+0x7c>)
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	3304      	adds	r3, #4
 8013e82:	4619      	mov	r1, r3
 8013e84:	4610      	mov	r0, r2
 8013e86:	f7fc ff72 	bl	8010d6e <vListInsert>
 8013e8a:	e012      	b.n	8013eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d206      	bcs.n	8013ea2 <prvInsertTimerInActiveList+0x62>
 8013e94:	68ba      	ldr	r2, [r7, #8]
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d302      	bcc.n	8013ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	e007      	b.n	8013eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013ea2:	4b07      	ldr	r3, [pc, #28]	; (8013ec0 <prvInsertTimerInActiveList+0x80>)
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	4619      	mov	r1, r3
 8013eac:	4610      	mov	r0, r2
 8013eae:	f7fc ff5e 	bl	8010d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013eb2:	697b      	ldr	r3, [r7, #20]
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3718      	adds	r7, #24
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}
 8013ebc:	200022f0 	.word	0x200022f0
 8013ec0:	200022ec 	.word	0x200022ec

08013ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b08e      	sub	sp, #56	; 0x38
 8013ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013eca:	e0ca      	b.n	8014062 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	da18      	bge.n	8013f04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013ed2:	1d3b      	adds	r3, r7, #4
 8013ed4:	3304      	adds	r3, #4
 8013ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d10a      	bne.n	8013ef4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee2:	f383 8811 	msr	BASEPRI, r3
 8013ee6:	f3bf 8f6f 	isb	sy
 8013eea:	f3bf 8f4f 	dsb	sy
 8013eee:	61fb      	str	r3, [r7, #28]
}
 8013ef0:	bf00      	nop
 8013ef2:	e7fe      	b.n	8013ef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013efa:	6850      	ldr	r0, [r2, #4]
 8013efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013efe:	6892      	ldr	r2, [r2, #8]
 8013f00:	4611      	mov	r1, r2
 8013f02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	f2c0 80aa 	blt.w	8014060 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f12:	695b      	ldr	r3, [r3, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d004      	beq.n	8013f22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7fc ff5f 	bl	8010de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f22:	463b      	mov	r3, r7
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7ff ff6b 	bl	8013e00 <prvSampleTimeNow>
 8013f2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2b09      	cmp	r3, #9
 8013f30:	f200 8097 	bhi.w	8014062 <prvProcessReceivedCommands+0x19e>
 8013f34:	a201      	add	r2, pc, #4	; (adr r2, 8013f3c <prvProcessReceivedCommands+0x78>)
 8013f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f3a:	bf00      	nop
 8013f3c:	08013f65 	.word	0x08013f65
 8013f40:	08013f65 	.word	0x08013f65
 8013f44:	08013f65 	.word	0x08013f65
 8013f48:	08013fd9 	.word	0x08013fd9
 8013f4c:	08013fed 	.word	0x08013fed
 8013f50:	08014037 	.word	0x08014037
 8013f54:	08013f65 	.word	0x08013f65
 8013f58:	08013f65 	.word	0x08013f65
 8013f5c:	08013fd9 	.word	0x08013fd9
 8013f60:	08013fed 	.word	0x08013fed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f6a:	f043 0301 	orr.w	r3, r3, #1
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7a:	699b      	ldr	r3, [r3, #24]
 8013f7c:	18d1      	adds	r1, r2, r3
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f84:	f7ff ff5c 	bl	8013e40 <prvInsertTimerInActiveList>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d069      	beq.n	8014062 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	6a1b      	ldr	r3, [r3, #32]
 8013f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f9c:	f003 0304 	and.w	r3, r3, #4
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d05e      	beq.n	8014062 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013fa4:	68ba      	ldr	r2, [r7, #8]
 8013fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fa8:	699b      	ldr	r3, [r3, #24]
 8013faa:	441a      	add	r2, r3
 8013fac:	2300      	movs	r3, #0
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	2100      	movs	r1, #0
 8013fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fb6:	f7ff fe05 	bl	8013bc4 <xTimerGenericCommand>
 8013fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d14f      	bne.n	8014062 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc6:	f383 8811 	msr	BASEPRI, r3
 8013fca:	f3bf 8f6f 	isb	sy
 8013fce:	f3bf 8f4f 	dsb	sy
 8013fd2:	61bb      	str	r3, [r7, #24]
}
 8013fd4:	bf00      	nop
 8013fd6:	e7fe      	b.n	8013fd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fde:	f023 0301 	bic.w	r3, r3, #1
 8013fe2:	b2da      	uxtb	r2, r3
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013fea:	e03a      	b.n	8014062 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ff2:	f043 0301 	orr.w	r3, r3, #1
 8013ff6:	b2da      	uxtb	r2, r3
 8013ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013ffe:	68ba      	ldr	r2, [r7, #8]
 8014000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014002:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014006:	699b      	ldr	r3, [r3, #24]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d10a      	bne.n	8014022 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014010:	f383 8811 	msr	BASEPRI, r3
 8014014:	f3bf 8f6f 	isb	sy
 8014018:	f3bf 8f4f 	dsb	sy
 801401c:	617b      	str	r3, [r7, #20]
}
 801401e:	bf00      	nop
 8014020:	e7fe      	b.n	8014020 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014024:	699a      	ldr	r2, [r3, #24]
 8014026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014028:	18d1      	adds	r1, r2, r3
 801402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801402e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014030:	f7ff ff06 	bl	8013e40 <prvInsertTimerInActiveList>
					break;
 8014034:	e015      	b.n	8014062 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801403c:	f003 0302 	and.w	r3, r3, #2
 8014040:	2b00      	cmp	r3, #0
 8014042:	d103      	bne.n	801404c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014046:	f000 fbdf 	bl	8014808 <vPortFree>
 801404a:	e00a      	b.n	8014062 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014052:	f023 0301 	bic.w	r3, r3, #1
 8014056:	b2da      	uxtb	r2, r3
 8014058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801405e:	e000      	b.n	8014062 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014060:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014062:	4b08      	ldr	r3, [pc, #32]	; (8014084 <prvProcessReceivedCommands+0x1c0>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	1d39      	adds	r1, r7, #4
 8014068:	2200      	movs	r2, #0
 801406a:	4618      	mov	r0, r3
 801406c:	f7fd fb66 	bl	801173c <xQueueReceive>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	f47f af2a 	bne.w	8013ecc <prvProcessReceivedCommands+0x8>
	}
}
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	3730      	adds	r7, #48	; 0x30
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	200022f4 	.word	0x200022f4

08014088 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b088      	sub	sp, #32
 801408c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801408e:	e048      	b.n	8014122 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014090:	4b2d      	ldr	r3, [pc, #180]	; (8014148 <prvSwitchTimerLists+0xc0>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	68db      	ldr	r3, [r3, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801409a:	4b2b      	ldr	r3, [pc, #172]	; (8014148 <prvSwitchTimerLists+0xc0>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	3304      	adds	r3, #4
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7fc fe99 	bl	8010de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6a1b      	ldr	r3, [r3, #32]
 80140b2:	68f8      	ldr	r0, [r7, #12]
 80140b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140bc:	f003 0304 	and.w	r3, r3, #4
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d02e      	beq.n	8014122 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	699b      	ldr	r3, [r3, #24]
 80140c8:	693a      	ldr	r2, [r7, #16]
 80140ca:	4413      	add	r3, r2
 80140cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80140ce:	68ba      	ldr	r2, [r7, #8]
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d90e      	bls.n	80140f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140e2:	4b19      	ldr	r3, [pc, #100]	; (8014148 <prvSwitchTimerLists+0xc0>)
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	3304      	adds	r3, #4
 80140ea:	4619      	mov	r1, r3
 80140ec:	4610      	mov	r0, r2
 80140ee:	f7fc fe3e 	bl	8010d6e <vListInsert>
 80140f2:	e016      	b.n	8014122 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80140f4:	2300      	movs	r3, #0
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	2300      	movs	r3, #0
 80140fa:	693a      	ldr	r2, [r7, #16]
 80140fc:	2100      	movs	r1, #0
 80140fe:	68f8      	ldr	r0, [r7, #12]
 8014100:	f7ff fd60 	bl	8013bc4 <xTimerGenericCommand>
 8014104:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d10a      	bne.n	8014122 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014110:	f383 8811 	msr	BASEPRI, r3
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	f3bf 8f4f 	dsb	sy
 801411c:	603b      	str	r3, [r7, #0]
}
 801411e:	bf00      	nop
 8014120:	e7fe      	b.n	8014120 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014122:	4b09      	ldr	r3, [pc, #36]	; (8014148 <prvSwitchTimerLists+0xc0>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d1b1      	bne.n	8014090 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801412c:	4b06      	ldr	r3, [pc, #24]	; (8014148 <prvSwitchTimerLists+0xc0>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014132:	4b06      	ldr	r3, [pc, #24]	; (801414c <prvSwitchTimerLists+0xc4>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	4a04      	ldr	r2, [pc, #16]	; (8014148 <prvSwitchTimerLists+0xc0>)
 8014138:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801413a:	4a04      	ldr	r2, [pc, #16]	; (801414c <prvSwitchTimerLists+0xc4>)
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	6013      	str	r3, [r2, #0]
}
 8014140:	bf00      	nop
 8014142:	3718      	adds	r7, #24
 8014144:	46bd      	mov	sp, r7
 8014146:	bd80      	pop	{r7, pc}
 8014148:	200022ec 	.word	0x200022ec
 801414c:	200022f0 	.word	0x200022f0

08014150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014156:	f000 f965 	bl	8014424 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801415a:	4b15      	ldr	r3, [pc, #84]	; (80141b0 <prvCheckForValidListAndQueue+0x60>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d120      	bne.n	80141a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014162:	4814      	ldr	r0, [pc, #80]	; (80141b4 <prvCheckForValidListAndQueue+0x64>)
 8014164:	f7fc fdb2 	bl	8010ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014168:	4813      	ldr	r0, [pc, #76]	; (80141b8 <prvCheckForValidListAndQueue+0x68>)
 801416a:	f7fc fdaf 	bl	8010ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801416e:	4b13      	ldr	r3, [pc, #76]	; (80141bc <prvCheckForValidListAndQueue+0x6c>)
 8014170:	4a10      	ldr	r2, [pc, #64]	; (80141b4 <prvCheckForValidListAndQueue+0x64>)
 8014172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014174:	4b12      	ldr	r3, [pc, #72]	; (80141c0 <prvCheckForValidListAndQueue+0x70>)
 8014176:	4a10      	ldr	r2, [pc, #64]	; (80141b8 <prvCheckForValidListAndQueue+0x68>)
 8014178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801417a:	2300      	movs	r3, #0
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	4b11      	ldr	r3, [pc, #68]	; (80141c4 <prvCheckForValidListAndQueue+0x74>)
 8014180:	4a11      	ldr	r2, [pc, #68]	; (80141c8 <prvCheckForValidListAndQueue+0x78>)
 8014182:	2110      	movs	r1, #16
 8014184:	200a      	movs	r0, #10
 8014186:	f7fc febd 	bl	8010f04 <xQueueGenericCreateStatic>
 801418a:	4603      	mov	r3, r0
 801418c:	4a08      	ldr	r2, [pc, #32]	; (80141b0 <prvCheckForValidListAndQueue+0x60>)
 801418e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014190:	4b07      	ldr	r3, [pc, #28]	; (80141b0 <prvCheckForValidListAndQueue+0x60>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d005      	beq.n	80141a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014198:	4b05      	ldr	r3, [pc, #20]	; (80141b0 <prvCheckForValidListAndQueue+0x60>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	490b      	ldr	r1, [pc, #44]	; (80141cc <prvCheckForValidListAndQueue+0x7c>)
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fd fec0 	bl	8011f24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80141a4:	f000 f96e 	bl	8014484 <vPortExitCritical>
}
 80141a8:	bf00      	nop
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	200022f4 	.word	0x200022f4
 80141b4:	200022c4 	.word	0x200022c4
 80141b8:	200022d8 	.word	0x200022d8
 80141bc:	200022ec 	.word	0x200022ec
 80141c0:	200022f0 	.word	0x200022f0
 80141c4:	200023a0 	.word	0x200023a0
 80141c8:	20002300 	.word	0x20002300
 80141cc:	08017e50 	.word	0x08017e50

080141d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80141d0:	b480      	push	{r7}
 80141d2:	b085      	sub	sp, #20
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	3b04      	subs	r3, #4
 80141e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80141e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	3b04      	subs	r3, #4
 80141ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	f023 0201 	bic.w	r2, r3, #1
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	3b04      	subs	r3, #4
 80141fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014200:	4a0c      	ldr	r2, [pc, #48]	; (8014234 <pxPortInitialiseStack+0x64>)
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	3b14      	subs	r3, #20
 801420a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	3b04      	subs	r3, #4
 8014216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f06f 0202 	mvn.w	r2, #2
 801421e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	3b20      	subs	r3, #32
 8014224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014226:	68fb      	ldr	r3, [r7, #12]
}
 8014228:	4618      	mov	r0, r3
 801422a:	3714      	adds	r7, #20
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr
 8014234:	08014239 	.word	0x08014239

08014238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801423e:	2300      	movs	r3, #0
 8014240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014242:	4b12      	ldr	r3, [pc, #72]	; (801428c <prvTaskExitError+0x54>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801424a:	d00a      	beq.n	8014262 <prvTaskExitError+0x2a>
	__asm volatile
 801424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014250:	f383 8811 	msr	BASEPRI, r3
 8014254:	f3bf 8f6f 	isb	sy
 8014258:	f3bf 8f4f 	dsb	sy
 801425c:	60fb      	str	r3, [r7, #12]
}
 801425e:	bf00      	nop
 8014260:	e7fe      	b.n	8014260 <prvTaskExitError+0x28>
	__asm volatile
 8014262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014266:	f383 8811 	msr	BASEPRI, r3
 801426a:	f3bf 8f6f 	isb	sy
 801426e:	f3bf 8f4f 	dsb	sy
 8014272:	60bb      	str	r3, [r7, #8]
}
 8014274:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014276:	bf00      	nop
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d0fc      	beq.n	8014278 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801427e:	bf00      	nop
 8014280:	bf00      	nop
 8014282:	3714      	adds	r7, #20
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr
 801428c:	2000001c 	.word	0x2000001c

08014290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014290:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <pxCurrentTCBConst2>)
 8014292:	6819      	ldr	r1, [r3, #0]
 8014294:	6808      	ldr	r0, [r1, #0]
 8014296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801429a:	f380 8809 	msr	PSP, r0
 801429e:	f3bf 8f6f 	isb	sy
 80142a2:	f04f 0000 	mov.w	r0, #0
 80142a6:	f380 8811 	msr	BASEPRI, r0
 80142aa:	4770      	bx	lr
 80142ac:	f3af 8000 	nop.w

080142b0 <pxCurrentTCBConst2>:
 80142b0:	20001dbc 	.word	0x20001dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80142b4:	bf00      	nop
 80142b6:	bf00      	nop

080142b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80142b8:	4808      	ldr	r0, [pc, #32]	; (80142dc <prvPortStartFirstTask+0x24>)
 80142ba:	6800      	ldr	r0, [r0, #0]
 80142bc:	6800      	ldr	r0, [r0, #0]
 80142be:	f380 8808 	msr	MSP, r0
 80142c2:	f04f 0000 	mov.w	r0, #0
 80142c6:	f380 8814 	msr	CONTROL, r0
 80142ca:	b662      	cpsie	i
 80142cc:	b661      	cpsie	f
 80142ce:	f3bf 8f4f 	dsb	sy
 80142d2:	f3bf 8f6f 	isb	sy
 80142d6:	df00      	svc	0
 80142d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80142da:	bf00      	nop
 80142dc:	e000ed08 	.word	0xe000ed08

080142e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80142e6:	4b46      	ldr	r3, [pc, #280]	; (8014400 <xPortStartScheduler+0x120>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	4a46      	ldr	r2, [pc, #280]	; (8014404 <xPortStartScheduler+0x124>)
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d10a      	bne.n	8014306 <xPortStartScheduler+0x26>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	613b      	str	r3, [r7, #16]
}
 8014302:	bf00      	nop
 8014304:	e7fe      	b.n	8014304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014306:	4b3e      	ldr	r3, [pc, #248]	; (8014400 <xPortStartScheduler+0x120>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4a3f      	ldr	r2, [pc, #252]	; (8014408 <xPortStartScheduler+0x128>)
 801430c:	4293      	cmp	r3, r2
 801430e:	d10a      	bne.n	8014326 <xPortStartScheduler+0x46>
	__asm volatile
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	f383 8811 	msr	BASEPRI, r3
 8014318:	f3bf 8f6f 	isb	sy
 801431c:	f3bf 8f4f 	dsb	sy
 8014320:	60fb      	str	r3, [r7, #12]
}
 8014322:	bf00      	nop
 8014324:	e7fe      	b.n	8014324 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014326:	4b39      	ldr	r3, [pc, #228]	; (801440c <xPortStartScheduler+0x12c>)
 8014328:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	b2db      	uxtb	r3, r3
 8014330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	22ff      	movs	r2, #255	; 0xff
 8014336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	b2db      	uxtb	r3, r3
 801433e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014340:	78fb      	ldrb	r3, [r7, #3]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014348:	b2da      	uxtb	r2, r3
 801434a:	4b31      	ldr	r3, [pc, #196]	; (8014410 <xPortStartScheduler+0x130>)
 801434c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801434e:	4b31      	ldr	r3, [pc, #196]	; (8014414 <xPortStartScheduler+0x134>)
 8014350:	2207      	movs	r2, #7
 8014352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014354:	e009      	b.n	801436a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014356:	4b2f      	ldr	r3, [pc, #188]	; (8014414 <xPortStartScheduler+0x134>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	3b01      	subs	r3, #1
 801435c:	4a2d      	ldr	r2, [pc, #180]	; (8014414 <xPortStartScheduler+0x134>)
 801435e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014360:	78fb      	ldrb	r3, [r7, #3]
 8014362:	b2db      	uxtb	r3, r3
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	b2db      	uxtb	r3, r3
 8014368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801436a:	78fb      	ldrb	r3, [r7, #3]
 801436c:	b2db      	uxtb	r3, r3
 801436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014372:	2b80      	cmp	r3, #128	; 0x80
 8014374:	d0ef      	beq.n	8014356 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014376:	4b27      	ldr	r3, [pc, #156]	; (8014414 <xPortStartScheduler+0x134>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f1c3 0307 	rsb	r3, r3, #7
 801437e:	2b04      	cmp	r3, #4
 8014380:	d00a      	beq.n	8014398 <xPortStartScheduler+0xb8>
	__asm volatile
 8014382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014386:	f383 8811 	msr	BASEPRI, r3
 801438a:	f3bf 8f6f 	isb	sy
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	60bb      	str	r3, [r7, #8]
}
 8014394:	bf00      	nop
 8014396:	e7fe      	b.n	8014396 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014398:	4b1e      	ldr	r3, [pc, #120]	; (8014414 <xPortStartScheduler+0x134>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	021b      	lsls	r3, r3, #8
 801439e:	4a1d      	ldr	r2, [pc, #116]	; (8014414 <xPortStartScheduler+0x134>)
 80143a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80143a2:	4b1c      	ldr	r3, [pc, #112]	; (8014414 <xPortStartScheduler+0x134>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80143aa:	4a1a      	ldr	r2, [pc, #104]	; (8014414 <xPortStartScheduler+0x134>)
 80143ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	b2da      	uxtb	r2, r3
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80143b6:	4b18      	ldr	r3, [pc, #96]	; (8014418 <xPortStartScheduler+0x138>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	4a17      	ldr	r2, [pc, #92]	; (8014418 <xPortStartScheduler+0x138>)
 80143bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80143c2:	4b15      	ldr	r3, [pc, #84]	; (8014418 <xPortStartScheduler+0x138>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	4a14      	ldr	r2, [pc, #80]	; (8014418 <xPortStartScheduler+0x138>)
 80143c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80143cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80143ce:	f000 f8dd 	bl	801458c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80143d2:	4b12      	ldr	r3, [pc, #72]	; (801441c <xPortStartScheduler+0x13c>)
 80143d4:	2200      	movs	r2, #0
 80143d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80143d8:	f000 f8fc 	bl	80145d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80143dc:	4b10      	ldr	r3, [pc, #64]	; (8014420 <xPortStartScheduler+0x140>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4a0f      	ldr	r2, [pc, #60]	; (8014420 <xPortStartScheduler+0x140>)
 80143e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80143e8:	f7ff ff66 	bl	80142b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80143ec:	f7fe fda8 	bl	8012f40 <vTaskSwitchContext>
	prvTaskExitError();
 80143f0:	f7ff ff22 	bl	8014238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3718      	adds	r7, #24
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	e000ed00 	.word	0xe000ed00
 8014404:	410fc271 	.word	0x410fc271
 8014408:	410fc270 	.word	0x410fc270
 801440c:	e000e400 	.word	0xe000e400
 8014410:	200023f0 	.word	0x200023f0
 8014414:	200023f4 	.word	0x200023f4
 8014418:	e000ed20 	.word	0xe000ed20
 801441c:	2000001c 	.word	0x2000001c
 8014420:	e000ef34 	.word	0xe000ef34

08014424 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014424:	b480      	push	{r7}
 8014426:	b083      	sub	sp, #12
 8014428:	af00      	add	r7, sp, #0
	__asm volatile
 801442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442e:	f383 8811 	msr	BASEPRI, r3
 8014432:	f3bf 8f6f 	isb	sy
 8014436:	f3bf 8f4f 	dsb	sy
 801443a:	607b      	str	r3, [r7, #4]
}
 801443c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801443e:	4b0f      	ldr	r3, [pc, #60]	; (801447c <vPortEnterCritical+0x58>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	3301      	adds	r3, #1
 8014444:	4a0d      	ldr	r2, [pc, #52]	; (801447c <vPortEnterCritical+0x58>)
 8014446:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014448:	4b0c      	ldr	r3, [pc, #48]	; (801447c <vPortEnterCritical+0x58>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b01      	cmp	r3, #1
 801444e:	d10f      	bne.n	8014470 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014450:	4b0b      	ldr	r3, [pc, #44]	; (8014480 <vPortEnterCritical+0x5c>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	b2db      	uxtb	r3, r3
 8014456:	2b00      	cmp	r3, #0
 8014458:	d00a      	beq.n	8014470 <vPortEnterCritical+0x4c>
	__asm volatile
 801445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801445e:	f383 8811 	msr	BASEPRI, r3
 8014462:	f3bf 8f6f 	isb	sy
 8014466:	f3bf 8f4f 	dsb	sy
 801446a:	603b      	str	r3, [r7, #0]
}
 801446c:	bf00      	nop
 801446e:	e7fe      	b.n	801446e <vPortEnterCritical+0x4a>
	}
}
 8014470:	bf00      	nop
 8014472:	370c      	adds	r7, #12
 8014474:	46bd      	mov	sp, r7
 8014476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447a:	4770      	bx	lr
 801447c:	2000001c 	.word	0x2000001c
 8014480:	e000ed04 	.word	0xe000ed04

08014484 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801448a:	4b12      	ldr	r3, [pc, #72]	; (80144d4 <vPortExitCritical+0x50>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d10a      	bne.n	80144a8 <vPortExitCritical+0x24>
	__asm volatile
 8014492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014496:	f383 8811 	msr	BASEPRI, r3
 801449a:	f3bf 8f6f 	isb	sy
 801449e:	f3bf 8f4f 	dsb	sy
 80144a2:	607b      	str	r3, [r7, #4]
}
 80144a4:	bf00      	nop
 80144a6:	e7fe      	b.n	80144a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80144a8:	4b0a      	ldr	r3, [pc, #40]	; (80144d4 <vPortExitCritical+0x50>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	3b01      	subs	r3, #1
 80144ae:	4a09      	ldr	r2, [pc, #36]	; (80144d4 <vPortExitCritical+0x50>)
 80144b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80144b2:	4b08      	ldr	r3, [pc, #32]	; (80144d4 <vPortExitCritical+0x50>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d105      	bne.n	80144c6 <vPortExitCritical+0x42>
 80144ba:	2300      	movs	r3, #0
 80144bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	f383 8811 	msr	BASEPRI, r3
}
 80144c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80144c6:	bf00      	nop
 80144c8:	370c      	adds	r7, #12
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	2000001c 	.word	0x2000001c
	...

080144e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80144e0:	f3ef 8009 	mrs	r0, PSP
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	4b15      	ldr	r3, [pc, #84]	; (8014540 <pxCurrentTCBConst>)
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	f01e 0f10 	tst.w	lr, #16
 80144f0:	bf08      	it	eq
 80144f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144fa:	6010      	str	r0, [r2, #0]
 80144fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014504:	f380 8811 	msr	BASEPRI, r0
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	f3bf 8f6f 	isb	sy
 8014510:	f7fe fd16 	bl	8012f40 <vTaskSwitchContext>
 8014514:	f04f 0000 	mov.w	r0, #0
 8014518:	f380 8811 	msr	BASEPRI, r0
 801451c:	bc09      	pop	{r0, r3}
 801451e:	6819      	ldr	r1, [r3, #0]
 8014520:	6808      	ldr	r0, [r1, #0]
 8014522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014526:	f01e 0f10 	tst.w	lr, #16
 801452a:	bf08      	it	eq
 801452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014530:	f380 8809 	msr	PSP, r0
 8014534:	f3bf 8f6f 	isb	sy
 8014538:	4770      	bx	lr
 801453a:	bf00      	nop
 801453c:	f3af 8000 	nop.w

08014540 <pxCurrentTCBConst>:
 8014540:	20001dbc 	.word	0x20001dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014544:	bf00      	nop
 8014546:	bf00      	nop

08014548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
	__asm volatile
 801454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	607b      	str	r3, [r7, #4]
}
 8014560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014562:	f7fe fc33 	bl	8012dcc <xTaskIncrementTick>
 8014566:	4603      	mov	r3, r0
 8014568:	2b00      	cmp	r3, #0
 801456a:	d003      	beq.n	8014574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801456c:	4b06      	ldr	r3, [pc, #24]	; (8014588 <xPortSysTickHandler+0x40>)
 801456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014572:	601a      	str	r2, [r3, #0]
 8014574:	2300      	movs	r3, #0
 8014576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	f383 8811 	msr	BASEPRI, r3
}
 801457e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014580:	bf00      	nop
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}
 8014588:	e000ed04 	.word	0xe000ed04

0801458c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801458c:	b480      	push	{r7}
 801458e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014590:	4b0b      	ldr	r3, [pc, #44]	; (80145c0 <vPortSetupTimerInterrupt+0x34>)
 8014592:	2200      	movs	r2, #0
 8014594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014596:	4b0b      	ldr	r3, [pc, #44]	; (80145c4 <vPortSetupTimerInterrupt+0x38>)
 8014598:	2200      	movs	r2, #0
 801459a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801459c:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <vPortSetupTimerInterrupt+0x3c>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4a0a      	ldr	r2, [pc, #40]	; (80145cc <vPortSetupTimerInterrupt+0x40>)
 80145a2:	fba2 2303 	umull	r2, r3, r2, r3
 80145a6:	099b      	lsrs	r3, r3, #6
 80145a8:	4a09      	ldr	r2, [pc, #36]	; (80145d0 <vPortSetupTimerInterrupt+0x44>)
 80145aa:	3b01      	subs	r3, #1
 80145ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80145ae:	4b04      	ldr	r3, [pc, #16]	; (80145c0 <vPortSetupTimerInterrupt+0x34>)
 80145b0:	2207      	movs	r2, #7
 80145b2:	601a      	str	r2, [r3, #0]
}
 80145b4:	bf00      	nop
 80145b6:	46bd      	mov	sp, r7
 80145b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145bc:	4770      	bx	lr
 80145be:	bf00      	nop
 80145c0:	e000e010 	.word	0xe000e010
 80145c4:	e000e018 	.word	0xe000e018
 80145c8:	20000010 	.word	0x20000010
 80145cc:	10624dd3 	.word	0x10624dd3
 80145d0:	e000e014 	.word	0xe000e014

080145d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80145d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80145e4 <vPortEnableVFP+0x10>
 80145d8:	6801      	ldr	r1, [r0, #0]
 80145da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80145de:	6001      	str	r1, [r0, #0]
 80145e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80145e2:	bf00      	nop
 80145e4:	e000ed88 	.word	0xe000ed88

080145e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80145e8:	b480      	push	{r7}
 80145ea:	b085      	sub	sp, #20
 80145ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80145ee:	f3ef 8305 	mrs	r3, IPSR
 80145f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	2b0f      	cmp	r3, #15
 80145f8:	d914      	bls.n	8014624 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145fa:	4a17      	ldr	r2, [pc, #92]	; (8014658 <vPortValidateInterruptPriority+0x70>)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	4413      	add	r3, r2
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014604:	4b15      	ldr	r3, [pc, #84]	; (801465c <vPortValidateInterruptPriority+0x74>)
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	7afa      	ldrb	r2, [r7, #11]
 801460a:	429a      	cmp	r2, r3
 801460c:	d20a      	bcs.n	8014624 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014612:	f383 8811 	msr	BASEPRI, r3
 8014616:	f3bf 8f6f 	isb	sy
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	607b      	str	r3, [r7, #4]
}
 8014620:	bf00      	nop
 8014622:	e7fe      	b.n	8014622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014624:	4b0e      	ldr	r3, [pc, #56]	; (8014660 <vPortValidateInterruptPriority+0x78>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801462c:	4b0d      	ldr	r3, [pc, #52]	; (8014664 <vPortValidateInterruptPriority+0x7c>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	429a      	cmp	r2, r3
 8014632:	d90a      	bls.n	801464a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014638:	f383 8811 	msr	BASEPRI, r3
 801463c:	f3bf 8f6f 	isb	sy
 8014640:	f3bf 8f4f 	dsb	sy
 8014644:	603b      	str	r3, [r7, #0]
}
 8014646:	bf00      	nop
 8014648:	e7fe      	b.n	8014648 <vPortValidateInterruptPriority+0x60>
	}
 801464a:	bf00      	nop
 801464c:	3714      	adds	r7, #20
 801464e:	46bd      	mov	sp, r7
 8014650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop
 8014658:	e000e3f0 	.word	0xe000e3f0
 801465c:	200023f0 	.word	0x200023f0
 8014660:	e000ed0c 	.word	0xe000ed0c
 8014664:	200023f4 	.word	0x200023f4

08014668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b08a      	sub	sp, #40	; 0x28
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014670:	2300      	movs	r3, #0
 8014672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014674:	f7fe faee 	bl	8012c54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014678:	4b5d      	ldr	r3, [pc, #372]	; (80147f0 <pvPortMalloc+0x188>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d101      	bne.n	8014684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014680:	f000 f930 	bl	80148e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014684:	4b5b      	ldr	r3, [pc, #364]	; (80147f4 <pvPortMalloc+0x18c>)
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	4013      	ands	r3, r2
 801468c:	2b00      	cmp	r3, #0
 801468e:	f040 8093 	bne.w	80147b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d01d      	beq.n	80146d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014698:	2208      	movs	r2, #8
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	4413      	add	r3, r2
 801469e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f003 0307 	and.w	r3, r3, #7
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d014      	beq.n	80146d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f023 0307 	bic.w	r3, r3, #7
 80146b0:	3308      	adds	r3, #8
 80146b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f003 0307 	and.w	r3, r3, #7
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00a      	beq.n	80146d4 <pvPortMalloc+0x6c>
	__asm volatile
 80146be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c2:	f383 8811 	msr	BASEPRI, r3
 80146c6:	f3bf 8f6f 	isb	sy
 80146ca:	f3bf 8f4f 	dsb	sy
 80146ce:	617b      	str	r3, [r7, #20]
}
 80146d0:	bf00      	nop
 80146d2:	e7fe      	b.n	80146d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d06e      	beq.n	80147b8 <pvPortMalloc+0x150>
 80146da:	4b47      	ldr	r3, [pc, #284]	; (80147f8 <pvPortMalloc+0x190>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d869      	bhi.n	80147b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80146e4:	4b45      	ldr	r3, [pc, #276]	; (80147fc <pvPortMalloc+0x194>)
 80146e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80146e8:	4b44      	ldr	r3, [pc, #272]	; (80147fc <pvPortMalloc+0x194>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146ee:	e004      	b.n	80146fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	429a      	cmp	r2, r3
 8014702:	d903      	bls.n	801470c <pvPortMalloc+0xa4>
 8014704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d1f1      	bne.n	80146f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801470c:	4b38      	ldr	r3, [pc, #224]	; (80147f0 <pvPortMalloc+0x188>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014712:	429a      	cmp	r2, r3
 8014714:	d050      	beq.n	80147b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014716:	6a3b      	ldr	r3, [r7, #32]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2208      	movs	r2, #8
 801471c:	4413      	add	r3, r2
 801471e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014722:	681a      	ldr	r2, [r3, #0]
 8014724:	6a3b      	ldr	r3, [r7, #32]
 8014726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472a:	685a      	ldr	r2, [r3, #4]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	1ad2      	subs	r2, r2, r3
 8014730:	2308      	movs	r3, #8
 8014732:	005b      	lsls	r3, r3, #1
 8014734:	429a      	cmp	r2, r3
 8014736:	d91f      	bls.n	8014778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	4413      	add	r3, r2
 801473e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014740:	69bb      	ldr	r3, [r7, #24]
 8014742:	f003 0307 	and.w	r3, r3, #7
 8014746:	2b00      	cmp	r3, #0
 8014748:	d00a      	beq.n	8014760 <pvPortMalloc+0xf8>
	__asm volatile
 801474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801474e:	f383 8811 	msr	BASEPRI, r3
 8014752:	f3bf 8f6f 	isb	sy
 8014756:	f3bf 8f4f 	dsb	sy
 801475a:	613b      	str	r3, [r7, #16]
}
 801475c:	bf00      	nop
 801475e:	e7fe      	b.n	801475e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014762:	685a      	ldr	r2, [r3, #4]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	1ad2      	subs	r2, r2, r3
 8014768:	69bb      	ldr	r3, [r7, #24]
 801476a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014772:	69b8      	ldr	r0, [r7, #24]
 8014774:	f000 f918 	bl	80149a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014778:	4b1f      	ldr	r3, [pc, #124]	; (80147f8 <pvPortMalloc+0x190>)
 801477a:	681a      	ldr	r2, [r3, #0]
 801477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	1ad3      	subs	r3, r2, r3
 8014782:	4a1d      	ldr	r2, [pc, #116]	; (80147f8 <pvPortMalloc+0x190>)
 8014784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014786:	4b1c      	ldr	r3, [pc, #112]	; (80147f8 <pvPortMalloc+0x190>)
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	4b1d      	ldr	r3, [pc, #116]	; (8014800 <pvPortMalloc+0x198>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d203      	bcs.n	801479a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014792:	4b19      	ldr	r3, [pc, #100]	; (80147f8 <pvPortMalloc+0x190>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	4a1a      	ldr	r2, [pc, #104]	; (8014800 <pvPortMalloc+0x198>)
 8014798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479c:	685a      	ldr	r2, [r3, #4]
 801479e:	4b15      	ldr	r3, [pc, #84]	; (80147f4 <pvPortMalloc+0x18c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	431a      	orrs	r2, r3
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80147a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147aa:	2200      	movs	r2, #0
 80147ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80147ae:	4b15      	ldr	r3, [pc, #84]	; (8014804 <pvPortMalloc+0x19c>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	3301      	adds	r3, #1
 80147b4:	4a13      	ldr	r2, [pc, #76]	; (8014804 <pvPortMalloc+0x19c>)
 80147b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80147b8:	f7fe fa5a 	bl	8012c70 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d101      	bne.n	80147c6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80147c2:	f7f4 fb9d 	bl	8008f00 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	f003 0307 	and.w	r3, r3, #7
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d00a      	beq.n	80147e6 <pvPortMalloc+0x17e>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	60fb      	str	r3, [r7, #12]
}
 80147e2:	bf00      	nop
 80147e4:	e7fe      	b.n	80147e4 <pvPortMalloc+0x17c>
	return pvReturn;
 80147e6:	69fb      	ldr	r3, [r7, #28]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3728      	adds	r7, #40	; 0x28
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	2000a400 	.word	0x2000a400
 80147f4:	2000a414 	.word	0x2000a414
 80147f8:	2000a404 	.word	0x2000a404
 80147fc:	2000a3f8 	.word	0x2000a3f8
 8014800:	2000a408 	.word	0x2000a408
 8014804:	2000a40c 	.word	0x2000a40c

08014808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b086      	sub	sp, #24
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d04d      	beq.n	80148b6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801481a:	2308      	movs	r3, #8
 801481c:	425b      	negs	r3, r3
 801481e:	697a      	ldr	r2, [r7, #20]
 8014820:	4413      	add	r3, r2
 8014822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	685a      	ldr	r2, [r3, #4]
 801482c:	4b24      	ldr	r3, [pc, #144]	; (80148c0 <vPortFree+0xb8>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4013      	ands	r3, r2
 8014832:	2b00      	cmp	r3, #0
 8014834:	d10a      	bne.n	801484c <vPortFree+0x44>
	__asm volatile
 8014836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801483a:	f383 8811 	msr	BASEPRI, r3
 801483e:	f3bf 8f6f 	isb	sy
 8014842:	f3bf 8f4f 	dsb	sy
 8014846:	60fb      	str	r3, [r7, #12]
}
 8014848:	bf00      	nop
 801484a:	e7fe      	b.n	801484a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d00a      	beq.n	801486a <vPortFree+0x62>
	__asm volatile
 8014854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014858:	f383 8811 	msr	BASEPRI, r3
 801485c:	f3bf 8f6f 	isb	sy
 8014860:	f3bf 8f4f 	dsb	sy
 8014864:	60bb      	str	r3, [r7, #8]
}
 8014866:	bf00      	nop
 8014868:	e7fe      	b.n	8014868 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	685a      	ldr	r2, [r3, #4]
 801486e:	4b14      	ldr	r3, [pc, #80]	; (80148c0 <vPortFree+0xb8>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	4013      	ands	r3, r2
 8014874:	2b00      	cmp	r3, #0
 8014876:	d01e      	beq.n	80148b6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d11a      	bne.n	80148b6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	685a      	ldr	r2, [r3, #4]
 8014884:	4b0e      	ldr	r3, [pc, #56]	; (80148c0 <vPortFree+0xb8>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	43db      	mvns	r3, r3
 801488a:	401a      	ands	r2, r3
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014890:	f7fe f9e0 	bl	8012c54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	685a      	ldr	r2, [r3, #4]
 8014898:	4b0a      	ldr	r3, [pc, #40]	; (80148c4 <vPortFree+0xbc>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	4413      	add	r3, r2
 801489e:	4a09      	ldr	r2, [pc, #36]	; (80148c4 <vPortFree+0xbc>)
 80148a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80148a2:	6938      	ldr	r0, [r7, #16]
 80148a4:	f000 f880 	bl	80149a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80148a8:	4b07      	ldr	r3, [pc, #28]	; (80148c8 <vPortFree+0xc0>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3301      	adds	r3, #1
 80148ae:	4a06      	ldr	r2, [pc, #24]	; (80148c8 <vPortFree+0xc0>)
 80148b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80148b2:	f7fe f9dd 	bl	8012c70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80148b6:	bf00      	nop
 80148b8:	3718      	adds	r7, #24
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	2000a414 	.word	0x2000a414
 80148c4:	2000a404 	.word	0x2000a404
 80148c8:	2000a410 	.word	0x2000a410

080148cc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80148cc:	b480      	push	{r7}
 80148ce:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80148d0:	4b03      	ldr	r3, [pc, #12]	; (80148e0 <xPortGetFreeHeapSize+0x14>)
 80148d2:	681b      	ldr	r3, [r3, #0]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	46bd      	mov	sp, r7
 80148d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148dc:	4770      	bx	lr
 80148de:	bf00      	nop
 80148e0:	2000a404 	.word	0x2000a404

080148e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80148ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80148f0:	4b27      	ldr	r3, [pc, #156]	; (8014990 <prvHeapInit+0xac>)
 80148f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f003 0307 	and.w	r3, r3, #7
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d00c      	beq.n	8014918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	3307      	adds	r3, #7
 8014902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f023 0307 	bic.w	r3, r3, #7
 801490a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	1ad3      	subs	r3, r2, r3
 8014912:	4a1f      	ldr	r2, [pc, #124]	; (8014990 <prvHeapInit+0xac>)
 8014914:	4413      	add	r3, r2
 8014916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801491c:	4a1d      	ldr	r2, [pc, #116]	; (8014994 <prvHeapInit+0xb0>)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014922:	4b1c      	ldr	r3, [pc, #112]	; (8014994 <prvHeapInit+0xb0>)
 8014924:	2200      	movs	r2, #0
 8014926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	68ba      	ldr	r2, [r7, #8]
 801492c:	4413      	add	r3, r2
 801492e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014930:	2208      	movs	r2, #8
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	1a9b      	subs	r3, r3, r2
 8014936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f023 0307 	bic.w	r3, r3, #7
 801493e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	4a15      	ldr	r2, [pc, #84]	; (8014998 <prvHeapInit+0xb4>)
 8014944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014946:	4b14      	ldr	r3, [pc, #80]	; (8014998 <prvHeapInit+0xb4>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	2200      	movs	r2, #0
 801494c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801494e:	4b12      	ldr	r3, [pc, #72]	; (8014998 <prvHeapInit+0xb4>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	2200      	movs	r2, #0
 8014954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	68fa      	ldr	r2, [r7, #12]
 801495e:	1ad2      	subs	r2, r2, r3
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014964:	4b0c      	ldr	r3, [pc, #48]	; (8014998 <prvHeapInit+0xb4>)
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	4a0a      	ldr	r2, [pc, #40]	; (801499c <prvHeapInit+0xb8>)
 8014972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	4a09      	ldr	r2, [pc, #36]	; (80149a0 <prvHeapInit+0xbc>)
 801497a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801497c:	4b09      	ldr	r3, [pc, #36]	; (80149a4 <prvHeapInit+0xc0>)
 801497e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014982:	601a      	str	r2, [r3, #0]
}
 8014984:	bf00      	nop
 8014986:	3714      	adds	r7, #20
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr
 8014990:	200023f8 	.word	0x200023f8
 8014994:	2000a3f8 	.word	0x2000a3f8
 8014998:	2000a400 	.word	0x2000a400
 801499c:	2000a408 	.word	0x2000a408
 80149a0:	2000a404 	.word	0x2000a404
 80149a4:	2000a414 	.word	0x2000a414

080149a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80149a8:	b480      	push	{r7}
 80149aa:	b085      	sub	sp, #20
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80149b0:	4b28      	ldr	r3, [pc, #160]	; (8014a54 <prvInsertBlockIntoFreeList+0xac>)
 80149b2:	60fb      	str	r3, [r7, #12]
 80149b4:	e002      	b.n	80149bc <prvInsertBlockIntoFreeList+0x14>
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	60fb      	str	r3, [r7, #12]
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d8f7      	bhi.n	80149b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	685b      	ldr	r3, [r3, #4]
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	4413      	add	r3, r2
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d108      	bne.n	80149ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	441a      	add	r2, r3
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	441a      	add	r2, r3
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d118      	bne.n	8014a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	681a      	ldr	r2, [r3, #0]
 8014a02:	4b15      	ldr	r3, [pc, #84]	; (8014a58 <prvInsertBlockIntoFreeList+0xb0>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d00d      	beq.n	8014a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	685a      	ldr	r2, [r3, #4]
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	685b      	ldr	r3, [r3, #4]
 8014a14:	441a      	add	r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	601a      	str	r2, [r3, #0]
 8014a24:	e008      	b.n	8014a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014a26:	4b0c      	ldr	r3, [pc, #48]	; (8014a58 <prvInsertBlockIntoFreeList+0xb0>)
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	601a      	str	r2, [r3, #0]
 8014a2e:	e003      	b.n	8014a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d002      	beq.n	8014a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a46:	bf00      	nop
 8014a48:	3714      	adds	r7, #20
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr
 8014a52:	bf00      	nop
 8014a54:	2000a3f8 	.word	0x2000a3f8
 8014a58:	2000a400 	.word	0x2000a400

08014a5c <_ZdlPvj>:
 8014a5c:	f000 b819 	b.w	8014a92 <_ZdlPv>

08014a60 <_ZdaPv>:
 8014a60:	f000 b817 	b.w	8014a92 <_ZdlPv>

08014a64 <__cxa_guard_acquire>:
 8014a64:	6803      	ldr	r3, [r0, #0]
 8014a66:	07db      	lsls	r3, r3, #31
 8014a68:	d406      	bmi.n	8014a78 <__cxa_guard_acquire+0x14>
 8014a6a:	7843      	ldrb	r3, [r0, #1]
 8014a6c:	b103      	cbz	r3, 8014a70 <__cxa_guard_acquire+0xc>
 8014a6e:	deff      	udf	#255	; 0xff
 8014a70:	2301      	movs	r3, #1
 8014a72:	7043      	strb	r3, [r0, #1]
 8014a74:	4618      	mov	r0, r3
 8014a76:	4770      	bx	lr
 8014a78:	2000      	movs	r0, #0
 8014a7a:	4770      	bx	lr

08014a7c <__cxa_guard_release>:
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	6003      	str	r3, [r0, #0]
 8014a80:	4770      	bx	lr

08014a82 <_Znaj>:
 8014a82:	f000 b81a 	b.w	8014aba <_Znwj>

08014a86 <__cxa_pure_virtual>:
 8014a86:	b508      	push	{r3, lr}
 8014a88:	f000 f812 	bl	8014ab0 <_ZSt9terminatev>

08014a8c <_ZSt25__throw_bad_function_callv>:
 8014a8c:	b508      	push	{r3, lr}
 8014a8e:	f000 fa57 	bl	8014f40 <abort>

08014a92 <_ZdlPv>:
 8014a92:	f000 bb8f 	b.w	80151b4 <free>

08014a96 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8014a96:	b508      	push	{r3, lr}
 8014a98:	4780      	blx	r0
 8014a9a:	f000 fa51 	bl	8014f40 <abort>
	...

08014aa0 <_ZSt13get_terminatev>:
 8014aa0:	4b02      	ldr	r3, [pc, #8]	; (8014aac <_ZSt13get_terminatev+0xc>)
 8014aa2:	6818      	ldr	r0, [r3, #0]
 8014aa4:	f3bf 8f5b 	dmb	ish
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	20000020 	.word	0x20000020

08014ab0 <_ZSt9terminatev>:
 8014ab0:	b508      	push	{r3, lr}
 8014ab2:	f7ff fff5 	bl	8014aa0 <_ZSt13get_terminatev>
 8014ab6:	f7ff ffee 	bl	8014a96 <_ZN10__cxxabiv111__terminateEPFvvE>

08014aba <_Znwj>:
 8014aba:	2801      	cmp	r0, #1
 8014abc:	bf38      	it	cc
 8014abe:	2001      	movcc	r0, #1
 8014ac0:	b510      	push	{r4, lr}
 8014ac2:	4604      	mov	r4, r0
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f000 fb6d 	bl	80151a4 <malloc>
 8014aca:	b930      	cbnz	r0, 8014ada <_Znwj+0x20>
 8014acc:	f000 f806 	bl	8014adc <_ZSt15get_new_handlerv>
 8014ad0:	b908      	cbnz	r0, 8014ad6 <_Znwj+0x1c>
 8014ad2:	f000 fa35 	bl	8014f40 <abort>
 8014ad6:	4780      	blx	r0
 8014ad8:	e7f4      	b.n	8014ac4 <_Znwj+0xa>
 8014ada:	bd10      	pop	{r4, pc}

08014adc <_ZSt15get_new_handlerv>:
 8014adc:	4b02      	ldr	r3, [pc, #8]	; (8014ae8 <_ZSt15get_new_handlerv+0xc>)
 8014ade:	6818      	ldr	r0, [r3, #0]
 8014ae0:	f3bf 8f5b 	dmb	ish
 8014ae4:	4770      	bx	lr
 8014ae6:	bf00      	nop
 8014ae8:	2000a418 	.word	0x2000a418

08014aec <roundf>:
 8014aec:	ee10 0a10 	vmov	r0, s0
 8014af0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8014af4:	3a7f      	subs	r2, #127	; 0x7f
 8014af6:	2a16      	cmp	r2, #22
 8014af8:	dc15      	bgt.n	8014b26 <roundf+0x3a>
 8014afa:	2a00      	cmp	r2, #0
 8014afc:	da08      	bge.n	8014b10 <roundf+0x24>
 8014afe:	3201      	adds	r2, #1
 8014b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014b04:	d101      	bne.n	8014b0a <roundf+0x1e>
 8014b06:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014b0a:	ee00 3a10 	vmov	s0, r3
 8014b0e:	4770      	bx	lr
 8014b10:	4907      	ldr	r1, [pc, #28]	; (8014b30 <roundf+0x44>)
 8014b12:	4111      	asrs	r1, r2
 8014b14:	4208      	tst	r0, r1
 8014b16:	d0fa      	beq.n	8014b0e <roundf+0x22>
 8014b18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014b1c:	4113      	asrs	r3, r2
 8014b1e:	4403      	add	r3, r0
 8014b20:	ea23 0301 	bic.w	r3, r3, r1
 8014b24:	e7f1      	b.n	8014b0a <roundf+0x1e>
 8014b26:	2a80      	cmp	r2, #128	; 0x80
 8014b28:	d1f1      	bne.n	8014b0e <roundf+0x22>
 8014b2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b2e:	4770      	bx	lr
 8014b30:	007fffff 	.word	0x007fffff
 8014b34:	00000000 	.word	0x00000000

08014b38 <log>:
 8014b38:	b538      	push	{r3, r4, r5, lr}
 8014b3a:	ed2d 8b02 	vpush	{d8}
 8014b3e:	ec55 4b10 	vmov	r4, r5, d0
 8014b42:	f000 f839 	bl	8014bb8 <__ieee754_log>
 8014b46:	4622      	mov	r2, r4
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	4629      	mov	r1, r5
 8014b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014b52:	eef0 8a60 	vmov.f32	s17, s1
 8014b56:	f7eb ffe9 	bl	8000b2c <__aeabi_dcmpun>
 8014b5a:	b998      	cbnz	r0, 8014b84 <log+0x4c>
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	2300      	movs	r3, #0
 8014b60:	4620      	mov	r0, r4
 8014b62:	4629      	mov	r1, r5
 8014b64:	f7eb ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8014b68:	b960      	cbnz	r0, 8014b84 <log+0x4c>
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	4620      	mov	r0, r4
 8014b70:	4629      	mov	r1, r5
 8014b72:	f7eb ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b76:	b160      	cbz	r0, 8014b92 <log+0x5a>
 8014b78:	f000 f9f0 	bl	8014f5c <__errno>
 8014b7c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8014ba8 <log+0x70>
 8014b80:	2322      	movs	r3, #34	; 0x22
 8014b82:	6003      	str	r3, [r0, #0]
 8014b84:	eeb0 0a48 	vmov.f32	s0, s16
 8014b88:	eef0 0a68 	vmov.f32	s1, s17
 8014b8c:	ecbd 8b02 	vpop	{d8}
 8014b90:	bd38      	pop	{r3, r4, r5, pc}
 8014b92:	f000 f9e3 	bl	8014f5c <__errno>
 8014b96:	ecbd 8b02 	vpop	{d8}
 8014b9a:	2321      	movs	r3, #33	; 0x21
 8014b9c:	6003      	str	r3, [r0, #0]
 8014b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ba2:	4803      	ldr	r0, [pc, #12]	; (8014bb0 <log+0x78>)
 8014ba4:	f000 b9c4 	b.w	8014f30 <nan>
 8014ba8:	00000000 	.word	0x00000000
 8014bac:	fff00000 	.word	0xfff00000
 8014bb0:	080185e7 	.word	0x080185e7
 8014bb4:	00000000 	.word	0x00000000

08014bb8 <__ieee754_log>:
 8014bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bbc:	ec51 0b10 	vmov	r0, r1, d0
 8014bc0:	ed2d 8b04 	vpush	{d8-d9}
 8014bc4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8014bc8:	b083      	sub	sp, #12
 8014bca:	460d      	mov	r5, r1
 8014bcc:	da29      	bge.n	8014c22 <__ieee754_log+0x6a>
 8014bce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014bd2:	4303      	orrs	r3, r0
 8014bd4:	ee10 2a10 	vmov	r2, s0
 8014bd8:	d10c      	bne.n	8014bf4 <__ieee754_log+0x3c>
 8014bda:	49cf      	ldr	r1, [pc, #828]	; (8014f18 <__ieee754_log+0x360>)
 8014bdc:	2200      	movs	r2, #0
 8014bde:	2300      	movs	r3, #0
 8014be0:	2000      	movs	r0, #0
 8014be2:	f7eb fe33 	bl	800084c <__aeabi_ddiv>
 8014be6:	ec41 0b10 	vmov	d0, r0, r1
 8014bea:	b003      	add	sp, #12
 8014bec:	ecbd 8b04 	vpop	{d8-d9}
 8014bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf4:	2900      	cmp	r1, #0
 8014bf6:	da05      	bge.n	8014c04 <__ieee754_log+0x4c>
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	f7eb fb45 	bl	8000288 <__aeabi_dsub>
 8014bfe:	2200      	movs	r2, #0
 8014c00:	2300      	movs	r3, #0
 8014c02:	e7ee      	b.n	8014be2 <__ieee754_log+0x2a>
 8014c04:	4bc5      	ldr	r3, [pc, #788]	; (8014f1c <__ieee754_log+0x364>)
 8014c06:	2200      	movs	r2, #0
 8014c08:	f7eb fcf6 	bl	80005f8 <__aeabi_dmul>
 8014c0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014c10:	460d      	mov	r5, r1
 8014c12:	4ac3      	ldr	r2, [pc, #780]	; (8014f20 <__ieee754_log+0x368>)
 8014c14:	4295      	cmp	r5, r2
 8014c16:	dd06      	ble.n	8014c26 <__ieee754_log+0x6e>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	f7eb fb36 	bl	800028c <__adddf3>
 8014c20:	e7e1      	b.n	8014be6 <__ieee754_log+0x2e>
 8014c22:	2300      	movs	r3, #0
 8014c24:	e7f5      	b.n	8014c12 <__ieee754_log+0x5a>
 8014c26:	152c      	asrs	r4, r5, #20
 8014c28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014c2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014c30:	441c      	add	r4, r3
 8014c32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8014c36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8014c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014c3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8014c42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8014c46:	ea42 0105 	orr.w	r1, r2, r5
 8014c4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8014c4e:	2200      	movs	r2, #0
 8014c50:	4bb4      	ldr	r3, [pc, #720]	; (8014f24 <__ieee754_log+0x36c>)
 8014c52:	f7eb fb19 	bl	8000288 <__aeabi_dsub>
 8014c56:	1cab      	adds	r3, r5, #2
 8014c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c5c:	2b02      	cmp	r3, #2
 8014c5e:	4682      	mov	sl, r0
 8014c60:	468b      	mov	fp, r1
 8014c62:	f04f 0200 	mov.w	r2, #0
 8014c66:	dc53      	bgt.n	8014d10 <__ieee754_log+0x158>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	f7eb ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c6e:	b1d0      	cbz	r0, 8014ca6 <__ieee754_log+0xee>
 8014c70:	2c00      	cmp	r4, #0
 8014c72:	f000 8122 	beq.w	8014eba <__ieee754_log+0x302>
 8014c76:	4620      	mov	r0, r4
 8014c78:	f7eb fc54 	bl	8000524 <__aeabi_i2d>
 8014c7c:	a390      	add	r3, pc, #576	; (adr r3, 8014ec0 <__ieee754_log+0x308>)
 8014c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c82:	4606      	mov	r6, r0
 8014c84:	460f      	mov	r7, r1
 8014c86:	f7eb fcb7 	bl	80005f8 <__aeabi_dmul>
 8014c8a:	a38f      	add	r3, pc, #572	; (adr r3, 8014ec8 <__ieee754_log+0x310>)
 8014c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c90:	4604      	mov	r4, r0
 8014c92:	460d      	mov	r5, r1
 8014c94:	4630      	mov	r0, r6
 8014c96:	4639      	mov	r1, r7
 8014c98:	f7eb fcae 	bl	80005f8 <__aeabi_dmul>
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	460b      	mov	r3, r1
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	4629      	mov	r1, r5
 8014ca4:	e7ba      	b.n	8014c1c <__ieee754_log+0x64>
 8014ca6:	a38a      	add	r3, pc, #552	; (adr r3, 8014ed0 <__ieee754_log+0x318>)
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	4650      	mov	r0, sl
 8014cae:	4659      	mov	r1, fp
 8014cb0:	f7eb fca2 	bl	80005f8 <__aeabi_dmul>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	2000      	movs	r0, #0
 8014cba:	499b      	ldr	r1, [pc, #620]	; (8014f28 <__ieee754_log+0x370>)
 8014cbc:	f7eb fae4 	bl	8000288 <__aeabi_dsub>
 8014cc0:	4652      	mov	r2, sl
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	460f      	mov	r7, r1
 8014cc6:	465b      	mov	r3, fp
 8014cc8:	4650      	mov	r0, sl
 8014cca:	4659      	mov	r1, fp
 8014ccc:	f7eb fc94 	bl	80005f8 <__aeabi_dmul>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	4639      	mov	r1, r7
 8014cd8:	f7eb fc8e 	bl	80005f8 <__aeabi_dmul>
 8014cdc:	4606      	mov	r6, r0
 8014cde:	460f      	mov	r7, r1
 8014ce0:	b914      	cbnz	r4, 8014ce8 <__ieee754_log+0x130>
 8014ce2:	4632      	mov	r2, r6
 8014ce4:	463b      	mov	r3, r7
 8014ce6:	e0a2      	b.n	8014e2e <__ieee754_log+0x276>
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f7eb fc1b 	bl	8000524 <__aeabi_i2d>
 8014cee:	a374      	add	r3, pc, #464	; (adr r3, 8014ec0 <__ieee754_log+0x308>)
 8014cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf4:	4680      	mov	r8, r0
 8014cf6:	4689      	mov	r9, r1
 8014cf8:	f7eb fc7e 	bl	80005f8 <__aeabi_dmul>
 8014cfc:	a372      	add	r3, pc, #456	; (adr r3, 8014ec8 <__ieee754_log+0x310>)
 8014cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d02:	4604      	mov	r4, r0
 8014d04:	460d      	mov	r5, r1
 8014d06:	4640      	mov	r0, r8
 8014d08:	4649      	mov	r1, r9
 8014d0a:	f7eb fc75 	bl	80005f8 <__aeabi_dmul>
 8014d0e:	e0a7      	b.n	8014e60 <__ieee754_log+0x2a8>
 8014d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014d14:	f7eb faba 	bl	800028c <__adddf3>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4650      	mov	r0, sl
 8014d1e:	4659      	mov	r1, fp
 8014d20:	f7eb fd94 	bl	800084c <__aeabi_ddiv>
 8014d24:	ec41 0b18 	vmov	d8, r0, r1
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7eb fbfb 	bl	8000524 <__aeabi_i2d>
 8014d2e:	ec53 2b18 	vmov	r2, r3, d8
 8014d32:	ec41 0b19 	vmov	d9, r0, r1
 8014d36:	ec51 0b18 	vmov	r0, r1, d8
 8014d3a:	f7eb fc5d 	bl	80005f8 <__aeabi_dmul>
 8014d3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8014d42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8014d46:	9301      	str	r3, [sp, #4]
 8014d48:	4602      	mov	r2, r0
 8014d4a:	460b      	mov	r3, r1
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	4689      	mov	r9, r1
 8014d50:	f7eb fc52 	bl	80005f8 <__aeabi_dmul>
 8014d54:	a360      	add	r3, pc, #384	; (adr r3, 8014ed8 <__ieee754_log+0x320>)
 8014d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	460f      	mov	r7, r1
 8014d5e:	f7eb fc4b 	bl	80005f8 <__aeabi_dmul>
 8014d62:	a35f      	add	r3, pc, #380	; (adr r3, 8014ee0 <__ieee754_log+0x328>)
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	f7eb fa90 	bl	800028c <__adddf3>
 8014d6c:	4632      	mov	r2, r6
 8014d6e:	463b      	mov	r3, r7
 8014d70:	f7eb fc42 	bl	80005f8 <__aeabi_dmul>
 8014d74:	a35c      	add	r3, pc, #368	; (adr r3, 8014ee8 <__ieee754_log+0x330>)
 8014d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7a:	f7eb fa87 	bl	800028c <__adddf3>
 8014d7e:	4632      	mov	r2, r6
 8014d80:	463b      	mov	r3, r7
 8014d82:	f7eb fc39 	bl	80005f8 <__aeabi_dmul>
 8014d86:	a35a      	add	r3, pc, #360	; (adr r3, 8014ef0 <__ieee754_log+0x338>)
 8014d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d8c:	f7eb fa7e 	bl	800028c <__adddf3>
 8014d90:	4642      	mov	r2, r8
 8014d92:	464b      	mov	r3, r9
 8014d94:	f7eb fc30 	bl	80005f8 <__aeabi_dmul>
 8014d98:	a357      	add	r3, pc, #348	; (adr r3, 8014ef8 <__ieee754_log+0x340>)
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	4680      	mov	r8, r0
 8014da0:	4689      	mov	r9, r1
 8014da2:	4630      	mov	r0, r6
 8014da4:	4639      	mov	r1, r7
 8014da6:	f7eb fc27 	bl	80005f8 <__aeabi_dmul>
 8014daa:	a355      	add	r3, pc, #340	; (adr r3, 8014f00 <__ieee754_log+0x348>)
 8014dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db0:	f7eb fa6c 	bl	800028c <__adddf3>
 8014db4:	4632      	mov	r2, r6
 8014db6:	463b      	mov	r3, r7
 8014db8:	f7eb fc1e 	bl	80005f8 <__aeabi_dmul>
 8014dbc:	a352      	add	r3, pc, #328	; (adr r3, 8014f08 <__ieee754_log+0x350>)
 8014dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc2:	f7eb fa63 	bl	800028c <__adddf3>
 8014dc6:	4632      	mov	r2, r6
 8014dc8:	463b      	mov	r3, r7
 8014dca:	f7eb fc15 	bl	80005f8 <__aeabi_dmul>
 8014dce:	460b      	mov	r3, r1
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	4649      	mov	r1, r9
 8014dd4:	4640      	mov	r0, r8
 8014dd6:	f7eb fa59 	bl	800028c <__adddf3>
 8014dda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014dde:	9b01      	ldr	r3, [sp, #4]
 8014de0:	3551      	adds	r5, #81	; 0x51
 8014de2:	431d      	orrs	r5, r3
 8014de4:	2d00      	cmp	r5, #0
 8014de6:	4680      	mov	r8, r0
 8014de8:	4689      	mov	r9, r1
 8014dea:	dd48      	ble.n	8014e7e <__ieee754_log+0x2c6>
 8014dec:	4b4e      	ldr	r3, [pc, #312]	; (8014f28 <__ieee754_log+0x370>)
 8014dee:	2200      	movs	r2, #0
 8014df0:	4650      	mov	r0, sl
 8014df2:	4659      	mov	r1, fp
 8014df4:	f7eb fc00 	bl	80005f8 <__aeabi_dmul>
 8014df8:	4652      	mov	r2, sl
 8014dfa:	465b      	mov	r3, fp
 8014dfc:	f7eb fbfc 	bl	80005f8 <__aeabi_dmul>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	4606      	mov	r6, r0
 8014e06:	460f      	mov	r7, r1
 8014e08:	4640      	mov	r0, r8
 8014e0a:	4649      	mov	r1, r9
 8014e0c:	f7eb fa3e 	bl	800028c <__adddf3>
 8014e10:	ec53 2b18 	vmov	r2, r3, d8
 8014e14:	f7eb fbf0 	bl	80005f8 <__aeabi_dmul>
 8014e18:	4680      	mov	r8, r0
 8014e1a:	4689      	mov	r9, r1
 8014e1c:	b964      	cbnz	r4, 8014e38 <__ieee754_log+0x280>
 8014e1e:	4602      	mov	r2, r0
 8014e20:	460b      	mov	r3, r1
 8014e22:	4630      	mov	r0, r6
 8014e24:	4639      	mov	r1, r7
 8014e26:	f7eb fa2f 	bl	8000288 <__aeabi_dsub>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	4650      	mov	r0, sl
 8014e30:	4659      	mov	r1, fp
 8014e32:	f7eb fa29 	bl	8000288 <__aeabi_dsub>
 8014e36:	e6d6      	b.n	8014be6 <__ieee754_log+0x2e>
 8014e38:	a321      	add	r3, pc, #132	; (adr r3, 8014ec0 <__ieee754_log+0x308>)
 8014e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e3e:	ec51 0b19 	vmov	r0, r1, d9
 8014e42:	f7eb fbd9 	bl	80005f8 <__aeabi_dmul>
 8014e46:	a320      	add	r3, pc, #128	; (adr r3, 8014ec8 <__ieee754_log+0x310>)
 8014e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	460d      	mov	r5, r1
 8014e50:	ec51 0b19 	vmov	r0, r1, d9
 8014e54:	f7eb fbd0 	bl	80005f8 <__aeabi_dmul>
 8014e58:	4642      	mov	r2, r8
 8014e5a:	464b      	mov	r3, r9
 8014e5c:	f7eb fa16 	bl	800028c <__adddf3>
 8014e60:	4602      	mov	r2, r0
 8014e62:	460b      	mov	r3, r1
 8014e64:	4630      	mov	r0, r6
 8014e66:	4639      	mov	r1, r7
 8014e68:	f7eb fa0e 	bl	8000288 <__aeabi_dsub>
 8014e6c:	4652      	mov	r2, sl
 8014e6e:	465b      	mov	r3, fp
 8014e70:	f7eb fa0a 	bl	8000288 <__aeabi_dsub>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	4620      	mov	r0, r4
 8014e7a:	4629      	mov	r1, r5
 8014e7c:	e7d9      	b.n	8014e32 <__ieee754_log+0x27a>
 8014e7e:	4602      	mov	r2, r0
 8014e80:	460b      	mov	r3, r1
 8014e82:	4650      	mov	r0, sl
 8014e84:	4659      	mov	r1, fp
 8014e86:	f7eb f9ff 	bl	8000288 <__aeabi_dsub>
 8014e8a:	ec53 2b18 	vmov	r2, r3, d8
 8014e8e:	f7eb fbb3 	bl	80005f8 <__aeabi_dmul>
 8014e92:	4606      	mov	r6, r0
 8014e94:	460f      	mov	r7, r1
 8014e96:	2c00      	cmp	r4, #0
 8014e98:	f43f af23 	beq.w	8014ce2 <__ieee754_log+0x12a>
 8014e9c:	a308      	add	r3, pc, #32	; (adr r3, 8014ec0 <__ieee754_log+0x308>)
 8014e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea2:	ec51 0b19 	vmov	r0, r1, d9
 8014ea6:	f7eb fba7 	bl	80005f8 <__aeabi_dmul>
 8014eaa:	a307      	add	r3, pc, #28	; (adr r3, 8014ec8 <__ieee754_log+0x310>)
 8014eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb0:	4604      	mov	r4, r0
 8014eb2:	460d      	mov	r5, r1
 8014eb4:	ec51 0b19 	vmov	r0, r1, d9
 8014eb8:	e727      	b.n	8014d0a <__ieee754_log+0x152>
 8014eba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8014f10 <__ieee754_log+0x358>
 8014ebe:	e694      	b.n	8014bea <__ieee754_log+0x32>
 8014ec0:	fee00000 	.word	0xfee00000
 8014ec4:	3fe62e42 	.word	0x3fe62e42
 8014ec8:	35793c76 	.word	0x35793c76
 8014ecc:	3dea39ef 	.word	0x3dea39ef
 8014ed0:	55555555 	.word	0x55555555
 8014ed4:	3fd55555 	.word	0x3fd55555
 8014ed8:	df3e5244 	.word	0xdf3e5244
 8014edc:	3fc2f112 	.word	0x3fc2f112
 8014ee0:	96cb03de 	.word	0x96cb03de
 8014ee4:	3fc74664 	.word	0x3fc74664
 8014ee8:	94229359 	.word	0x94229359
 8014eec:	3fd24924 	.word	0x3fd24924
 8014ef0:	55555593 	.word	0x55555593
 8014ef4:	3fe55555 	.word	0x3fe55555
 8014ef8:	d078c69f 	.word	0xd078c69f
 8014efc:	3fc39a09 	.word	0x3fc39a09
 8014f00:	1d8e78af 	.word	0x1d8e78af
 8014f04:	3fcc71c5 	.word	0x3fcc71c5
 8014f08:	9997fa04 	.word	0x9997fa04
 8014f0c:	3fd99999 	.word	0x3fd99999
	...
 8014f18:	c3500000 	.word	0xc3500000
 8014f1c:	43500000 	.word	0x43500000
 8014f20:	7fefffff 	.word	0x7fefffff
 8014f24:	3ff00000 	.word	0x3ff00000
 8014f28:	3fe00000 	.word	0x3fe00000
 8014f2c:	00000000 	.word	0x00000000

08014f30 <nan>:
 8014f30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014f38 <nan+0x8>
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	00000000 	.word	0x00000000
 8014f3c:	7ff80000 	.word	0x7ff80000

08014f40 <abort>:
 8014f40:	b508      	push	{r3, lr}
 8014f42:	2006      	movs	r0, #6
 8014f44:	f000 ff40 	bl	8015dc8 <raise>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	f7f4 fc35 	bl	80097b8 <_exit>

08014f4e <atexit>:
 8014f4e:	2300      	movs	r3, #0
 8014f50:	4601      	mov	r1, r0
 8014f52:	461a      	mov	r2, r3
 8014f54:	4618      	mov	r0, r3
 8014f56:	f000 bfa9 	b.w	8015eac <__register_exitproc>
	...

08014f5c <__errno>:
 8014f5c:	4b01      	ldr	r3, [pc, #4]	; (8014f64 <__errno+0x8>)
 8014f5e:	6818      	ldr	r0, [r3, #0]
 8014f60:	4770      	bx	lr
 8014f62:	bf00      	nop
 8014f64:	20000024 	.word	0x20000024

08014f68 <std>:
 8014f68:	2300      	movs	r3, #0
 8014f6a:	b510      	push	{r4, lr}
 8014f6c:	4604      	mov	r4, r0
 8014f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8014f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f76:	6083      	str	r3, [r0, #8]
 8014f78:	8181      	strh	r1, [r0, #12]
 8014f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8014f7c:	81c2      	strh	r2, [r0, #14]
 8014f7e:	6183      	str	r3, [r0, #24]
 8014f80:	4619      	mov	r1, r3
 8014f82:	2208      	movs	r2, #8
 8014f84:	305c      	adds	r0, #92	; 0x5c
 8014f86:	f000 f92b 	bl	80151e0 <memset>
 8014f8a:	4b05      	ldr	r3, [pc, #20]	; (8014fa0 <std+0x38>)
 8014f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8014f8e:	4b05      	ldr	r3, [pc, #20]	; (8014fa4 <std+0x3c>)
 8014f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f92:	4b05      	ldr	r3, [pc, #20]	; (8014fa8 <std+0x40>)
 8014f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f96:	4b05      	ldr	r3, [pc, #20]	; (8014fac <std+0x44>)
 8014f98:	6224      	str	r4, [r4, #32]
 8014f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8014f9c:	bd10      	pop	{r4, pc}
 8014f9e:	bf00      	nop
 8014fa0:	08015e01 	.word	0x08015e01
 8014fa4:	08015e23 	.word	0x08015e23
 8014fa8:	08015e5b 	.word	0x08015e5b
 8014fac:	08015e7f 	.word	0x08015e7f

08014fb0 <_cleanup_r>:
 8014fb0:	4901      	ldr	r1, [pc, #4]	; (8014fb8 <_cleanup_r+0x8>)
 8014fb2:	f000 b8af 	b.w	8015114 <_fwalk_reent>
 8014fb6:	bf00      	nop
 8014fb8:	08016d91 	.word	0x08016d91

08014fbc <__sfmoreglue>:
 8014fbc:	b570      	push	{r4, r5, r6, lr}
 8014fbe:	2268      	movs	r2, #104	; 0x68
 8014fc0:	1e4d      	subs	r5, r1, #1
 8014fc2:	4355      	muls	r5, r2
 8014fc4:	460e      	mov	r6, r1
 8014fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014fca:	f000 f97d 	bl	80152c8 <_malloc_r>
 8014fce:	4604      	mov	r4, r0
 8014fd0:	b140      	cbz	r0, 8014fe4 <__sfmoreglue+0x28>
 8014fd2:	2100      	movs	r1, #0
 8014fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8014fd8:	300c      	adds	r0, #12
 8014fda:	60a0      	str	r0, [r4, #8]
 8014fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014fe0:	f000 f8fe 	bl	80151e0 <memset>
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	bd70      	pop	{r4, r5, r6, pc}

08014fe8 <__sfp_lock_acquire>:
 8014fe8:	4801      	ldr	r0, [pc, #4]	; (8014ff0 <__sfp_lock_acquire+0x8>)
 8014fea:	f000 b8d8 	b.w	801519e <__retarget_lock_acquire_recursive>
 8014fee:	bf00      	nop
 8014ff0:	2000a41e 	.word	0x2000a41e

08014ff4 <__sfp_lock_release>:
 8014ff4:	4801      	ldr	r0, [pc, #4]	; (8014ffc <__sfp_lock_release+0x8>)
 8014ff6:	f000 b8d4 	b.w	80151a2 <__retarget_lock_release_recursive>
 8014ffa:	bf00      	nop
 8014ffc:	2000a41e 	.word	0x2000a41e

08015000 <__sinit_lock_acquire>:
 8015000:	4801      	ldr	r0, [pc, #4]	; (8015008 <__sinit_lock_acquire+0x8>)
 8015002:	f000 b8cc 	b.w	801519e <__retarget_lock_acquire_recursive>
 8015006:	bf00      	nop
 8015008:	2000a41f 	.word	0x2000a41f

0801500c <__sinit_lock_release>:
 801500c:	4801      	ldr	r0, [pc, #4]	; (8015014 <__sinit_lock_release+0x8>)
 801500e:	f000 b8c8 	b.w	80151a2 <__retarget_lock_release_recursive>
 8015012:	bf00      	nop
 8015014:	2000a41f 	.word	0x2000a41f

08015018 <__sinit>:
 8015018:	b510      	push	{r4, lr}
 801501a:	4604      	mov	r4, r0
 801501c:	f7ff fff0 	bl	8015000 <__sinit_lock_acquire>
 8015020:	69a3      	ldr	r3, [r4, #24]
 8015022:	b11b      	cbz	r3, 801502c <__sinit+0x14>
 8015024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015028:	f7ff bff0 	b.w	801500c <__sinit_lock_release>
 801502c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015030:	6523      	str	r3, [r4, #80]	; 0x50
 8015032:	4b13      	ldr	r3, [pc, #76]	; (8015080 <__sinit+0x68>)
 8015034:	4a13      	ldr	r2, [pc, #76]	; (8015084 <__sinit+0x6c>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	62a2      	str	r2, [r4, #40]	; 0x28
 801503a:	42a3      	cmp	r3, r4
 801503c:	bf04      	itt	eq
 801503e:	2301      	moveq	r3, #1
 8015040:	61a3      	streq	r3, [r4, #24]
 8015042:	4620      	mov	r0, r4
 8015044:	f000 f820 	bl	8015088 <__sfp>
 8015048:	6060      	str	r0, [r4, #4]
 801504a:	4620      	mov	r0, r4
 801504c:	f000 f81c 	bl	8015088 <__sfp>
 8015050:	60a0      	str	r0, [r4, #8]
 8015052:	4620      	mov	r0, r4
 8015054:	f000 f818 	bl	8015088 <__sfp>
 8015058:	2200      	movs	r2, #0
 801505a:	60e0      	str	r0, [r4, #12]
 801505c:	2104      	movs	r1, #4
 801505e:	6860      	ldr	r0, [r4, #4]
 8015060:	f7ff ff82 	bl	8014f68 <std>
 8015064:	68a0      	ldr	r0, [r4, #8]
 8015066:	2201      	movs	r2, #1
 8015068:	2109      	movs	r1, #9
 801506a:	f7ff ff7d 	bl	8014f68 <std>
 801506e:	68e0      	ldr	r0, [r4, #12]
 8015070:	2202      	movs	r2, #2
 8015072:	2112      	movs	r1, #18
 8015074:	f7ff ff78 	bl	8014f68 <std>
 8015078:	2301      	movs	r3, #1
 801507a:	61a3      	str	r3, [r4, #24]
 801507c:	e7d2      	b.n	8015024 <__sinit+0xc>
 801507e:	bf00      	nop
 8015080:	08018388 	.word	0x08018388
 8015084:	08014fb1 	.word	0x08014fb1

08015088 <__sfp>:
 8015088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801508a:	4607      	mov	r7, r0
 801508c:	f7ff ffac 	bl	8014fe8 <__sfp_lock_acquire>
 8015090:	4b1e      	ldr	r3, [pc, #120]	; (801510c <__sfp+0x84>)
 8015092:	681e      	ldr	r6, [r3, #0]
 8015094:	69b3      	ldr	r3, [r6, #24]
 8015096:	b913      	cbnz	r3, 801509e <__sfp+0x16>
 8015098:	4630      	mov	r0, r6
 801509a:	f7ff ffbd 	bl	8015018 <__sinit>
 801509e:	3648      	adds	r6, #72	; 0x48
 80150a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80150a4:	3b01      	subs	r3, #1
 80150a6:	d503      	bpl.n	80150b0 <__sfp+0x28>
 80150a8:	6833      	ldr	r3, [r6, #0]
 80150aa:	b30b      	cbz	r3, 80150f0 <__sfp+0x68>
 80150ac:	6836      	ldr	r6, [r6, #0]
 80150ae:	e7f7      	b.n	80150a0 <__sfp+0x18>
 80150b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80150b4:	b9d5      	cbnz	r5, 80150ec <__sfp+0x64>
 80150b6:	4b16      	ldr	r3, [pc, #88]	; (8015110 <__sfp+0x88>)
 80150b8:	60e3      	str	r3, [r4, #12]
 80150ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80150be:	6665      	str	r5, [r4, #100]	; 0x64
 80150c0:	f000 f86c 	bl	801519c <__retarget_lock_init_recursive>
 80150c4:	f7ff ff96 	bl	8014ff4 <__sfp_lock_release>
 80150c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80150cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80150d0:	6025      	str	r5, [r4, #0]
 80150d2:	61a5      	str	r5, [r4, #24]
 80150d4:	2208      	movs	r2, #8
 80150d6:	4629      	mov	r1, r5
 80150d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150dc:	f000 f880 	bl	80151e0 <memset>
 80150e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150e8:	4620      	mov	r0, r4
 80150ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150ec:	3468      	adds	r4, #104	; 0x68
 80150ee:	e7d9      	b.n	80150a4 <__sfp+0x1c>
 80150f0:	2104      	movs	r1, #4
 80150f2:	4638      	mov	r0, r7
 80150f4:	f7ff ff62 	bl	8014fbc <__sfmoreglue>
 80150f8:	4604      	mov	r4, r0
 80150fa:	6030      	str	r0, [r6, #0]
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d1d5      	bne.n	80150ac <__sfp+0x24>
 8015100:	f7ff ff78 	bl	8014ff4 <__sfp_lock_release>
 8015104:	230c      	movs	r3, #12
 8015106:	603b      	str	r3, [r7, #0]
 8015108:	e7ee      	b.n	80150e8 <__sfp+0x60>
 801510a:	bf00      	nop
 801510c:	08018388 	.word	0x08018388
 8015110:	ffff0001 	.word	0xffff0001

08015114 <_fwalk_reent>:
 8015114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015118:	4606      	mov	r6, r0
 801511a:	4688      	mov	r8, r1
 801511c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015120:	2700      	movs	r7, #0
 8015122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015126:	f1b9 0901 	subs.w	r9, r9, #1
 801512a:	d505      	bpl.n	8015138 <_fwalk_reent+0x24>
 801512c:	6824      	ldr	r4, [r4, #0]
 801512e:	2c00      	cmp	r4, #0
 8015130:	d1f7      	bne.n	8015122 <_fwalk_reent+0xe>
 8015132:	4638      	mov	r0, r7
 8015134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015138:	89ab      	ldrh	r3, [r5, #12]
 801513a:	2b01      	cmp	r3, #1
 801513c:	d907      	bls.n	801514e <_fwalk_reent+0x3a>
 801513e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015142:	3301      	adds	r3, #1
 8015144:	d003      	beq.n	801514e <_fwalk_reent+0x3a>
 8015146:	4629      	mov	r1, r5
 8015148:	4630      	mov	r0, r6
 801514a:	47c0      	blx	r8
 801514c:	4307      	orrs	r7, r0
 801514e:	3568      	adds	r5, #104	; 0x68
 8015150:	e7e9      	b.n	8015126 <_fwalk_reent+0x12>
	...

08015154 <__libc_init_array>:
 8015154:	b570      	push	{r4, r5, r6, lr}
 8015156:	4d0d      	ldr	r5, [pc, #52]	; (801518c <__libc_init_array+0x38>)
 8015158:	4c0d      	ldr	r4, [pc, #52]	; (8015190 <__libc_init_array+0x3c>)
 801515a:	1b64      	subs	r4, r4, r5
 801515c:	10a4      	asrs	r4, r4, #2
 801515e:	2600      	movs	r6, #0
 8015160:	42a6      	cmp	r6, r4
 8015162:	d109      	bne.n	8015178 <__libc_init_array+0x24>
 8015164:	4d0b      	ldr	r5, [pc, #44]	; (8015194 <__libc_init_array+0x40>)
 8015166:	4c0c      	ldr	r4, [pc, #48]	; (8015198 <__libc_init_array+0x44>)
 8015168:	f002 fd0e 	bl	8017b88 <_init>
 801516c:	1b64      	subs	r4, r4, r5
 801516e:	10a4      	asrs	r4, r4, #2
 8015170:	2600      	movs	r6, #0
 8015172:	42a6      	cmp	r6, r4
 8015174:	d105      	bne.n	8015182 <__libc_init_array+0x2e>
 8015176:	bd70      	pop	{r4, r5, r6, pc}
 8015178:	f855 3b04 	ldr.w	r3, [r5], #4
 801517c:	4798      	blx	r3
 801517e:	3601      	adds	r6, #1
 8015180:	e7ee      	b.n	8015160 <__libc_init_array+0xc>
 8015182:	f855 3b04 	ldr.w	r3, [r5], #4
 8015186:	4798      	blx	r3
 8015188:	3601      	adds	r6, #1
 801518a:	e7f2      	b.n	8015172 <__libc_init_array+0x1e>
 801518c:	0801870c 	.word	0x0801870c
 8015190:	0801870c 	.word	0x0801870c
 8015194:	0801870c 	.word	0x0801870c
 8015198:	0801872c 	.word	0x0801872c

0801519c <__retarget_lock_init_recursive>:
 801519c:	4770      	bx	lr

0801519e <__retarget_lock_acquire_recursive>:
 801519e:	4770      	bx	lr

080151a0 <__retarget_lock_release>:
 80151a0:	4770      	bx	lr

080151a2 <__retarget_lock_release_recursive>:
 80151a2:	4770      	bx	lr

080151a4 <malloc>:
 80151a4:	4b02      	ldr	r3, [pc, #8]	; (80151b0 <malloc+0xc>)
 80151a6:	4601      	mov	r1, r0
 80151a8:	6818      	ldr	r0, [r3, #0]
 80151aa:	f000 b88d 	b.w	80152c8 <_malloc_r>
 80151ae:	bf00      	nop
 80151b0:	20000024 	.word	0x20000024

080151b4 <free>:
 80151b4:	4b02      	ldr	r3, [pc, #8]	; (80151c0 <free+0xc>)
 80151b6:	4601      	mov	r1, r0
 80151b8:	6818      	ldr	r0, [r3, #0]
 80151ba:	f000 b819 	b.w	80151f0 <_free_r>
 80151be:	bf00      	nop
 80151c0:	20000024 	.word	0x20000024

080151c4 <memcpy>:
 80151c4:	440a      	add	r2, r1
 80151c6:	4291      	cmp	r1, r2
 80151c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80151cc:	d100      	bne.n	80151d0 <memcpy+0xc>
 80151ce:	4770      	bx	lr
 80151d0:	b510      	push	{r4, lr}
 80151d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151da:	4291      	cmp	r1, r2
 80151dc:	d1f9      	bne.n	80151d2 <memcpy+0xe>
 80151de:	bd10      	pop	{r4, pc}

080151e0 <memset>:
 80151e0:	4402      	add	r2, r0
 80151e2:	4603      	mov	r3, r0
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d100      	bne.n	80151ea <memset+0xa>
 80151e8:	4770      	bx	lr
 80151ea:	f803 1b01 	strb.w	r1, [r3], #1
 80151ee:	e7f9      	b.n	80151e4 <memset+0x4>

080151f0 <_free_r>:
 80151f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151f2:	2900      	cmp	r1, #0
 80151f4:	d044      	beq.n	8015280 <_free_r+0x90>
 80151f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151fa:	9001      	str	r0, [sp, #4]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f1a1 0404 	sub.w	r4, r1, #4
 8015202:	bfb8      	it	lt
 8015204:	18e4      	addlt	r4, r4, r3
 8015206:	f001 fe15 	bl	8016e34 <__malloc_lock>
 801520a:	4a1e      	ldr	r2, [pc, #120]	; (8015284 <_free_r+0x94>)
 801520c:	9801      	ldr	r0, [sp, #4]
 801520e:	6813      	ldr	r3, [r2, #0]
 8015210:	b933      	cbnz	r3, 8015220 <_free_r+0x30>
 8015212:	6063      	str	r3, [r4, #4]
 8015214:	6014      	str	r4, [r2, #0]
 8015216:	b003      	add	sp, #12
 8015218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801521c:	f001 be10 	b.w	8016e40 <__malloc_unlock>
 8015220:	42a3      	cmp	r3, r4
 8015222:	d908      	bls.n	8015236 <_free_r+0x46>
 8015224:	6825      	ldr	r5, [r4, #0]
 8015226:	1961      	adds	r1, r4, r5
 8015228:	428b      	cmp	r3, r1
 801522a:	bf01      	itttt	eq
 801522c:	6819      	ldreq	r1, [r3, #0]
 801522e:	685b      	ldreq	r3, [r3, #4]
 8015230:	1949      	addeq	r1, r1, r5
 8015232:	6021      	streq	r1, [r4, #0]
 8015234:	e7ed      	b.n	8015212 <_free_r+0x22>
 8015236:	461a      	mov	r2, r3
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	b10b      	cbz	r3, 8015240 <_free_r+0x50>
 801523c:	42a3      	cmp	r3, r4
 801523e:	d9fa      	bls.n	8015236 <_free_r+0x46>
 8015240:	6811      	ldr	r1, [r2, #0]
 8015242:	1855      	adds	r5, r2, r1
 8015244:	42a5      	cmp	r5, r4
 8015246:	d10b      	bne.n	8015260 <_free_r+0x70>
 8015248:	6824      	ldr	r4, [r4, #0]
 801524a:	4421      	add	r1, r4
 801524c:	1854      	adds	r4, r2, r1
 801524e:	42a3      	cmp	r3, r4
 8015250:	6011      	str	r1, [r2, #0]
 8015252:	d1e0      	bne.n	8015216 <_free_r+0x26>
 8015254:	681c      	ldr	r4, [r3, #0]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	6053      	str	r3, [r2, #4]
 801525a:	4421      	add	r1, r4
 801525c:	6011      	str	r1, [r2, #0]
 801525e:	e7da      	b.n	8015216 <_free_r+0x26>
 8015260:	d902      	bls.n	8015268 <_free_r+0x78>
 8015262:	230c      	movs	r3, #12
 8015264:	6003      	str	r3, [r0, #0]
 8015266:	e7d6      	b.n	8015216 <_free_r+0x26>
 8015268:	6825      	ldr	r5, [r4, #0]
 801526a:	1961      	adds	r1, r4, r5
 801526c:	428b      	cmp	r3, r1
 801526e:	bf04      	itt	eq
 8015270:	6819      	ldreq	r1, [r3, #0]
 8015272:	685b      	ldreq	r3, [r3, #4]
 8015274:	6063      	str	r3, [r4, #4]
 8015276:	bf04      	itt	eq
 8015278:	1949      	addeq	r1, r1, r5
 801527a:	6021      	streq	r1, [r4, #0]
 801527c:	6054      	str	r4, [r2, #4]
 801527e:	e7ca      	b.n	8015216 <_free_r+0x26>
 8015280:	b003      	add	sp, #12
 8015282:	bd30      	pop	{r4, r5, pc}
 8015284:	2000a420 	.word	0x2000a420

08015288 <sbrk_aligned>:
 8015288:	b570      	push	{r4, r5, r6, lr}
 801528a:	4e0e      	ldr	r6, [pc, #56]	; (80152c4 <sbrk_aligned+0x3c>)
 801528c:	460c      	mov	r4, r1
 801528e:	6831      	ldr	r1, [r6, #0]
 8015290:	4605      	mov	r5, r0
 8015292:	b911      	cbnz	r1, 801529a <sbrk_aligned+0x12>
 8015294:	f000 fd60 	bl	8015d58 <_sbrk_r>
 8015298:	6030      	str	r0, [r6, #0]
 801529a:	4621      	mov	r1, r4
 801529c:	4628      	mov	r0, r5
 801529e:	f000 fd5b 	bl	8015d58 <_sbrk_r>
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	d00a      	beq.n	80152bc <sbrk_aligned+0x34>
 80152a6:	1cc4      	adds	r4, r0, #3
 80152a8:	f024 0403 	bic.w	r4, r4, #3
 80152ac:	42a0      	cmp	r0, r4
 80152ae:	d007      	beq.n	80152c0 <sbrk_aligned+0x38>
 80152b0:	1a21      	subs	r1, r4, r0
 80152b2:	4628      	mov	r0, r5
 80152b4:	f000 fd50 	bl	8015d58 <_sbrk_r>
 80152b8:	3001      	adds	r0, #1
 80152ba:	d101      	bne.n	80152c0 <sbrk_aligned+0x38>
 80152bc:	f04f 34ff 	mov.w	r4, #4294967295
 80152c0:	4620      	mov	r0, r4
 80152c2:	bd70      	pop	{r4, r5, r6, pc}
 80152c4:	2000a424 	.word	0x2000a424

080152c8 <_malloc_r>:
 80152c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152cc:	1ccd      	adds	r5, r1, #3
 80152ce:	f025 0503 	bic.w	r5, r5, #3
 80152d2:	3508      	adds	r5, #8
 80152d4:	2d0c      	cmp	r5, #12
 80152d6:	bf38      	it	cc
 80152d8:	250c      	movcc	r5, #12
 80152da:	2d00      	cmp	r5, #0
 80152dc:	4607      	mov	r7, r0
 80152de:	db01      	blt.n	80152e4 <_malloc_r+0x1c>
 80152e0:	42a9      	cmp	r1, r5
 80152e2:	d905      	bls.n	80152f0 <_malloc_r+0x28>
 80152e4:	230c      	movs	r3, #12
 80152e6:	603b      	str	r3, [r7, #0]
 80152e8:	2600      	movs	r6, #0
 80152ea:	4630      	mov	r0, r6
 80152ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f0:	4e2e      	ldr	r6, [pc, #184]	; (80153ac <_malloc_r+0xe4>)
 80152f2:	f001 fd9f 	bl	8016e34 <__malloc_lock>
 80152f6:	6833      	ldr	r3, [r6, #0]
 80152f8:	461c      	mov	r4, r3
 80152fa:	bb34      	cbnz	r4, 801534a <_malloc_r+0x82>
 80152fc:	4629      	mov	r1, r5
 80152fe:	4638      	mov	r0, r7
 8015300:	f7ff ffc2 	bl	8015288 <sbrk_aligned>
 8015304:	1c43      	adds	r3, r0, #1
 8015306:	4604      	mov	r4, r0
 8015308:	d14d      	bne.n	80153a6 <_malloc_r+0xde>
 801530a:	6834      	ldr	r4, [r6, #0]
 801530c:	4626      	mov	r6, r4
 801530e:	2e00      	cmp	r6, #0
 8015310:	d140      	bne.n	8015394 <_malloc_r+0xcc>
 8015312:	6823      	ldr	r3, [r4, #0]
 8015314:	4631      	mov	r1, r6
 8015316:	4638      	mov	r0, r7
 8015318:	eb04 0803 	add.w	r8, r4, r3
 801531c:	f000 fd1c 	bl	8015d58 <_sbrk_r>
 8015320:	4580      	cmp	r8, r0
 8015322:	d13a      	bne.n	801539a <_malloc_r+0xd2>
 8015324:	6821      	ldr	r1, [r4, #0]
 8015326:	3503      	adds	r5, #3
 8015328:	1a6d      	subs	r5, r5, r1
 801532a:	f025 0503 	bic.w	r5, r5, #3
 801532e:	3508      	adds	r5, #8
 8015330:	2d0c      	cmp	r5, #12
 8015332:	bf38      	it	cc
 8015334:	250c      	movcc	r5, #12
 8015336:	4629      	mov	r1, r5
 8015338:	4638      	mov	r0, r7
 801533a:	f7ff ffa5 	bl	8015288 <sbrk_aligned>
 801533e:	3001      	adds	r0, #1
 8015340:	d02b      	beq.n	801539a <_malloc_r+0xd2>
 8015342:	6823      	ldr	r3, [r4, #0]
 8015344:	442b      	add	r3, r5
 8015346:	6023      	str	r3, [r4, #0]
 8015348:	e00e      	b.n	8015368 <_malloc_r+0xa0>
 801534a:	6822      	ldr	r2, [r4, #0]
 801534c:	1b52      	subs	r2, r2, r5
 801534e:	d41e      	bmi.n	801538e <_malloc_r+0xc6>
 8015350:	2a0b      	cmp	r2, #11
 8015352:	d916      	bls.n	8015382 <_malloc_r+0xba>
 8015354:	1961      	adds	r1, r4, r5
 8015356:	42a3      	cmp	r3, r4
 8015358:	6025      	str	r5, [r4, #0]
 801535a:	bf18      	it	ne
 801535c:	6059      	strne	r1, [r3, #4]
 801535e:	6863      	ldr	r3, [r4, #4]
 8015360:	bf08      	it	eq
 8015362:	6031      	streq	r1, [r6, #0]
 8015364:	5162      	str	r2, [r4, r5]
 8015366:	604b      	str	r3, [r1, #4]
 8015368:	4638      	mov	r0, r7
 801536a:	f104 060b 	add.w	r6, r4, #11
 801536e:	f001 fd67 	bl	8016e40 <__malloc_unlock>
 8015372:	f026 0607 	bic.w	r6, r6, #7
 8015376:	1d23      	adds	r3, r4, #4
 8015378:	1af2      	subs	r2, r6, r3
 801537a:	d0b6      	beq.n	80152ea <_malloc_r+0x22>
 801537c:	1b9b      	subs	r3, r3, r6
 801537e:	50a3      	str	r3, [r4, r2]
 8015380:	e7b3      	b.n	80152ea <_malloc_r+0x22>
 8015382:	6862      	ldr	r2, [r4, #4]
 8015384:	42a3      	cmp	r3, r4
 8015386:	bf0c      	ite	eq
 8015388:	6032      	streq	r2, [r6, #0]
 801538a:	605a      	strne	r2, [r3, #4]
 801538c:	e7ec      	b.n	8015368 <_malloc_r+0xa0>
 801538e:	4623      	mov	r3, r4
 8015390:	6864      	ldr	r4, [r4, #4]
 8015392:	e7b2      	b.n	80152fa <_malloc_r+0x32>
 8015394:	4634      	mov	r4, r6
 8015396:	6876      	ldr	r6, [r6, #4]
 8015398:	e7b9      	b.n	801530e <_malloc_r+0x46>
 801539a:	230c      	movs	r3, #12
 801539c:	603b      	str	r3, [r7, #0]
 801539e:	4638      	mov	r0, r7
 80153a0:	f001 fd4e 	bl	8016e40 <__malloc_unlock>
 80153a4:	e7a1      	b.n	80152ea <_malloc_r+0x22>
 80153a6:	6025      	str	r5, [r4, #0]
 80153a8:	e7de      	b.n	8015368 <_malloc_r+0xa0>
 80153aa:	bf00      	nop
 80153ac:	2000a420 	.word	0x2000a420

080153b0 <__cvt>:
 80153b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153b4:	ec55 4b10 	vmov	r4, r5, d0
 80153b8:	2d00      	cmp	r5, #0
 80153ba:	460e      	mov	r6, r1
 80153bc:	4619      	mov	r1, r3
 80153be:	462b      	mov	r3, r5
 80153c0:	bfbb      	ittet	lt
 80153c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80153c6:	461d      	movlt	r5, r3
 80153c8:	2300      	movge	r3, #0
 80153ca:	232d      	movlt	r3, #45	; 0x2d
 80153cc:	700b      	strb	r3, [r1, #0]
 80153ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80153d4:	4691      	mov	r9, r2
 80153d6:	f023 0820 	bic.w	r8, r3, #32
 80153da:	bfbc      	itt	lt
 80153dc:	4622      	movlt	r2, r4
 80153de:	4614      	movlt	r4, r2
 80153e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80153e4:	d005      	beq.n	80153f2 <__cvt+0x42>
 80153e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80153ea:	d100      	bne.n	80153ee <__cvt+0x3e>
 80153ec:	3601      	adds	r6, #1
 80153ee:	2102      	movs	r1, #2
 80153f0:	e000      	b.n	80153f4 <__cvt+0x44>
 80153f2:	2103      	movs	r1, #3
 80153f4:	ab03      	add	r3, sp, #12
 80153f6:	9301      	str	r3, [sp, #4]
 80153f8:	ab02      	add	r3, sp, #8
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	ec45 4b10 	vmov	d0, r4, r5
 8015400:	4653      	mov	r3, sl
 8015402:	4632      	mov	r2, r6
 8015404:	f000 fe50 	bl	80160a8 <_dtoa_r>
 8015408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801540c:	4607      	mov	r7, r0
 801540e:	d102      	bne.n	8015416 <__cvt+0x66>
 8015410:	f019 0f01 	tst.w	r9, #1
 8015414:	d022      	beq.n	801545c <__cvt+0xac>
 8015416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801541a:	eb07 0906 	add.w	r9, r7, r6
 801541e:	d110      	bne.n	8015442 <__cvt+0x92>
 8015420:	783b      	ldrb	r3, [r7, #0]
 8015422:	2b30      	cmp	r3, #48	; 0x30
 8015424:	d10a      	bne.n	801543c <__cvt+0x8c>
 8015426:	2200      	movs	r2, #0
 8015428:	2300      	movs	r3, #0
 801542a:	4620      	mov	r0, r4
 801542c:	4629      	mov	r1, r5
 801542e:	f7eb fb4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015432:	b918      	cbnz	r0, 801543c <__cvt+0x8c>
 8015434:	f1c6 0601 	rsb	r6, r6, #1
 8015438:	f8ca 6000 	str.w	r6, [sl]
 801543c:	f8da 3000 	ldr.w	r3, [sl]
 8015440:	4499      	add	r9, r3
 8015442:	2200      	movs	r2, #0
 8015444:	2300      	movs	r3, #0
 8015446:	4620      	mov	r0, r4
 8015448:	4629      	mov	r1, r5
 801544a:	f7eb fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 801544e:	b108      	cbz	r0, 8015454 <__cvt+0xa4>
 8015450:	f8cd 900c 	str.w	r9, [sp, #12]
 8015454:	2230      	movs	r2, #48	; 0x30
 8015456:	9b03      	ldr	r3, [sp, #12]
 8015458:	454b      	cmp	r3, r9
 801545a:	d307      	bcc.n	801546c <__cvt+0xbc>
 801545c:	9b03      	ldr	r3, [sp, #12]
 801545e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015460:	1bdb      	subs	r3, r3, r7
 8015462:	4638      	mov	r0, r7
 8015464:	6013      	str	r3, [r2, #0]
 8015466:	b004      	add	sp, #16
 8015468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801546c:	1c59      	adds	r1, r3, #1
 801546e:	9103      	str	r1, [sp, #12]
 8015470:	701a      	strb	r2, [r3, #0]
 8015472:	e7f0      	b.n	8015456 <__cvt+0xa6>

08015474 <__exponent>:
 8015474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015476:	4603      	mov	r3, r0
 8015478:	2900      	cmp	r1, #0
 801547a:	bfb8      	it	lt
 801547c:	4249      	neglt	r1, r1
 801547e:	f803 2b02 	strb.w	r2, [r3], #2
 8015482:	bfb4      	ite	lt
 8015484:	222d      	movlt	r2, #45	; 0x2d
 8015486:	222b      	movge	r2, #43	; 0x2b
 8015488:	2909      	cmp	r1, #9
 801548a:	7042      	strb	r2, [r0, #1]
 801548c:	dd2a      	ble.n	80154e4 <__exponent+0x70>
 801548e:	f10d 0407 	add.w	r4, sp, #7
 8015492:	46a4      	mov	ip, r4
 8015494:	270a      	movs	r7, #10
 8015496:	46a6      	mov	lr, r4
 8015498:	460a      	mov	r2, r1
 801549a:	fb91 f6f7 	sdiv	r6, r1, r7
 801549e:	fb07 1516 	mls	r5, r7, r6, r1
 80154a2:	3530      	adds	r5, #48	; 0x30
 80154a4:	2a63      	cmp	r2, #99	; 0x63
 80154a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80154aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80154ae:	4631      	mov	r1, r6
 80154b0:	dcf1      	bgt.n	8015496 <__exponent+0x22>
 80154b2:	3130      	adds	r1, #48	; 0x30
 80154b4:	f1ae 0502 	sub.w	r5, lr, #2
 80154b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80154bc:	1c44      	adds	r4, r0, #1
 80154be:	4629      	mov	r1, r5
 80154c0:	4561      	cmp	r1, ip
 80154c2:	d30a      	bcc.n	80154da <__exponent+0x66>
 80154c4:	f10d 0209 	add.w	r2, sp, #9
 80154c8:	eba2 020e 	sub.w	r2, r2, lr
 80154cc:	4565      	cmp	r5, ip
 80154ce:	bf88      	it	hi
 80154d0:	2200      	movhi	r2, #0
 80154d2:	4413      	add	r3, r2
 80154d4:	1a18      	subs	r0, r3, r0
 80154d6:	b003      	add	sp, #12
 80154d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80154e2:	e7ed      	b.n	80154c0 <__exponent+0x4c>
 80154e4:	2330      	movs	r3, #48	; 0x30
 80154e6:	3130      	adds	r1, #48	; 0x30
 80154e8:	7083      	strb	r3, [r0, #2]
 80154ea:	70c1      	strb	r1, [r0, #3]
 80154ec:	1d03      	adds	r3, r0, #4
 80154ee:	e7f1      	b.n	80154d4 <__exponent+0x60>

080154f0 <_printf_float>:
 80154f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f4:	ed2d 8b02 	vpush	{d8}
 80154f8:	b08d      	sub	sp, #52	; 0x34
 80154fa:	460c      	mov	r4, r1
 80154fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015500:	4616      	mov	r6, r2
 8015502:	461f      	mov	r7, r3
 8015504:	4605      	mov	r5, r0
 8015506:	f001 fc7f 	bl	8016e08 <_localeconv_r>
 801550a:	f8d0 a000 	ldr.w	sl, [r0]
 801550e:	4650      	mov	r0, sl
 8015510:	f7ea fe5e 	bl	80001d0 <strlen>
 8015514:	2300      	movs	r3, #0
 8015516:	930a      	str	r3, [sp, #40]	; 0x28
 8015518:	6823      	ldr	r3, [r4, #0]
 801551a:	9305      	str	r3, [sp, #20]
 801551c:	f8d8 3000 	ldr.w	r3, [r8]
 8015520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015524:	3307      	adds	r3, #7
 8015526:	f023 0307 	bic.w	r3, r3, #7
 801552a:	f103 0208 	add.w	r2, r3, #8
 801552e:	f8c8 2000 	str.w	r2, [r8]
 8015532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015536:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801553a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801553e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015542:	9307      	str	r3, [sp, #28]
 8015544:	f8cd 8018 	str.w	r8, [sp, #24]
 8015548:	ee08 0a10 	vmov	s16, r0
 801554c:	4b9f      	ldr	r3, [pc, #636]	; (80157cc <_printf_float+0x2dc>)
 801554e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015552:	f04f 32ff 	mov.w	r2, #4294967295
 8015556:	f7eb fae9 	bl	8000b2c <__aeabi_dcmpun>
 801555a:	bb88      	cbnz	r0, 80155c0 <_printf_float+0xd0>
 801555c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015560:	4b9a      	ldr	r3, [pc, #616]	; (80157cc <_printf_float+0x2dc>)
 8015562:	f04f 32ff 	mov.w	r2, #4294967295
 8015566:	f7eb fac3 	bl	8000af0 <__aeabi_dcmple>
 801556a:	bb48      	cbnz	r0, 80155c0 <_printf_float+0xd0>
 801556c:	2200      	movs	r2, #0
 801556e:	2300      	movs	r3, #0
 8015570:	4640      	mov	r0, r8
 8015572:	4649      	mov	r1, r9
 8015574:	f7eb fab2 	bl	8000adc <__aeabi_dcmplt>
 8015578:	b110      	cbz	r0, 8015580 <_printf_float+0x90>
 801557a:	232d      	movs	r3, #45	; 0x2d
 801557c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015580:	4b93      	ldr	r3, [pc, #588]	; (80157d0 <_printf_float+0x2e0>)
 8015582:	4894      	ldr	r0, [pc, #592]	; (80157d4 <_printf_float+0x2e4>)
 8015584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015588:	bf94      	ite	ls
 801558a:	4698      	movls	r8, r3
 801558c:	4680      	movhi	r8, r0
 801558e:	2303      	movs	r3, #3
 8015590:	6123      	str	r3, [r4, #16]
 8015592:	9b05      	ldr	r3, [sp, #20]
 8015594:	f023 0204 	bic.w	r2, r3, #4
 8015598:	6022      	str	r2, [r4, #0]
 801559a:	f04f 0900 	mov.w	r9, #0
 801559e:	9700      	str	r7, [sp, #0]
 80155a0:	4633      	mov	r3, r6
 80155a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80155a4:	4621      	mov	r1, r4
 80155a6:	4628      	mov	r0, r5
 80155a8:	f000 f9d8 	bl	801595c <_printf_common>
 80155ac:	3001      	adds	r0, #1
 80155ae:	f040 8090 	bne.w	80156d2 <_printf_float+0x1e2>
 80155b2:	f04f 30ff 	mov.w	r0, #4294967295
 80155b6:	b00d      	add	sp, #52	; 0x34
 80155b8:	ecbd 8b02 	vpop	{d8}
 80155bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155c0:	4642      	mov	r2, r8
 80155c2:	464b      	mov	r3, r9
 80155c4:	4640      	mov	r0, r8
 80155c6:	4649      	mov	r1, r9
 80155c8:	f7eb fab0 	bl	8000b2c <__aeabi_dcmpun>
 80155cc:	b140      	cbz	r0, 80155e0 <_printf_float+0xf0>
 80155ce:	464b      	mov	r3, r9
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	bfbc      	itt	lt
 80155d4:	232d      	movlt	r3, #45	; 0x2d
 80155d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80155da:	487f      	ldr	r0, [pc, #508]	; (80157d8 <_printf_float+0x2e8>)
 80155dc:	4b7f      	ldr	r3, [pc, #508]	; (80157dc <_printf_float+0x2ec>)
 80155de:	e7d1      	b.n	8015584 <_printf_float+0x94>
 80155e0:	6863      	ldr	r3, [r4, #4]
 80155e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80155e6:	9206      	str	r2, [sp, #24]
 80155e8:	1c5a      	adds	r2, r3, #1
 80155ea:	d13f      	bne.n	801566c <_printf_float+0x17c>
 80155ec:	2306      	movs	r3, #6
 80155ee:	6063      	str	r3, [r4, #4]
 80155f0:	9b05      	ldr	r3, [sp, #20]
 80155f2:	6861      	ldr	r1, [r4, #4]
 80155f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80155f8:	2300      	movs	r3, #0
 80155fa:	9303      	str	r3, [sp, #12]
 80155fc:	ab0a      	add	r3, sp, #40	; 0x28
 80155fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015602:	ab09      	add	r3, sp, #36	; 0x24
 8015604:	ec49 8b10 	vmov	d0, r8, r9
 8015608:	9300      	str	r3, [sp, #0]
 801560a:	6022      	str	r2, [r4, #0]
 801560c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015610:	4628      	mov	r0, r5
 8015612:	f7ff fecd 	bl	80153b0 <__cvt>
 8015616:	9b06      	ldr	r3, [sp, #24]
 8015618:	9909      	ldr	r1, [sp, #36]	; 0x24
 801561a:	2b47      	cmp	r3, #71	; 0x47
 801561c:	4680      	mov	r8, r0
 801561e:	d108      	bne.n	8015632 <_printf_float+0x142>
 8015620:	1cc8      	adds	r0, r1, #3
 8015622:	db02      	blt.n	801562a <_printf_float+0x13a>
 8015624:	6863      	ldr	r3, [r4, #4]
 8015626:	4299      	cmp	r1, r3
 8015628:	dd41      	ble.n	80156ae <_printf_float+0x1be>
 801562a:	f1ab 0b02 	sub.w	fp, fp, #2
 801562e:	fa5f fb8b 	uxtb.w	fp, fp
 8015632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015636:	d820      	bhi.n	801567a <_printf_float+0x18a>
 8015638:	3901      	subs	r1, #1
 801563a:	465a      	mov	r2, fp
 801563c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015640:	9109      	str	r1, [sp, #36]	; 0x24
 8015642:	f7ff ff17 	bl	8015474 <__exponent>
 8015646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015648:	1813      	adds	r3, r2, r0
 801564a:	2a01      	cmp	r2, #1
 801564c:	4681      	mov	r9, r0
 801564e:	6123      	str	r3, [r4, #16]
 8015650:	dc02      	bgt.n	8015658 <_printf_float+0x168>
 8015652:	6822      	ldr	r2, [r4, #0]
 8015654:	07d2      	lsls	r2, r2, #31
 8015656:	d501      	bpl.n	801565c <_printf_float+0x16c>
 8015658:	3301      	adds	r3, #1
 801565a:	6123      	str	r3, [r4, #16]
 801565c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015660:	2b00      	cmp	r3, #0
 8015662:	d09c      	beq.n	801559e <_printf_float+0xae>
 8015664:	232d      	movs	r3, #45	; 0x2d
 8015666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801566a:	e798      	b.n	801559e <_printf_float+0xae>
 801566c:	9a06      	ldr	r2, [sp, #24]
 801566e:	2a47      	cmp	r2, #71	; 0x47
 8015670:	d1be      	bne.n	80155f0 <_printf_float+0x100>
 8015672:	2b00      	cmp	r3, #0
 8015674:	d1bc      	bne.n	80155f0 <_printf_float+0x100>
 8015676:	2301      	movs	r3, #1
 8015678:	e7b9      	b.n	80155ee <_printf_float+0xfe>
 801567a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801567e:	d118      	bne.n	80156b2 <_printf_float+0x1c2>
 8015680:	2900      	cmp	r1, #0
 8015682:	6863      	ldr	r3, [r4, #4]
 8015684:	dd0b      	ble.n	801569e <_printf_float+0x1ae>
 8015686:	6121      	str	r1, [r4, #16]
 8015688:	b913      	cbnz	r3, 8015690 <_printf_float+0x1a0>
 801568a:	6822      	ldr	r2, [r4, #0]
 801568c:	07d0      	lsls	r0, r2, #31
 801568e:	d502      	bpl.n	8015696 <_printf_float+0x1a6>
 8015690:	3301      	adds	r3, #1
 8015692:	440b      	add	r3, r1
 8015694:	6123      	str	r3, [r4, #16]
 8015696:	65a1      	str	r1, [r4, #88]	; 0x58
 8015698:	f04f 0900 	mov.w	r9, #0
 801569c:	e7de      	b.n	801565c <_printf_float+0x16c>
 801569e:	b913      	cbnz	r3, 80156a6 <_printf_float+0x1b6>
 80156a0:	6822      	ldr	r2, [r4, #0]
 80156a2:	07d2      	lsls	r2, r2, #31
 80156a4:	d501      	bpl.n	80156aa <_printf_float+0x1ba>
 80156a6:	3302      	adds	r3, #2
 80156a8:	e7f4      	b.n	8015694 <_printf_float+0x1a4>
 80156aa:	2301      	movs	r3, #1
 80156ac:	e7f2      	b.n	8015694 <_printf_float+0x1a4>
 80156ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80156b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b4:	4299      	cmp	r1, r3
 80156b6:	db05      	blt.n	80156c4 <_printf_float+0x1d4>
 80156b8:	6823      	ldr	r3, [r4, #0]
 80156ba:	6121      	str	r1, [r4, #16]
 80156bc:	07d8      	lsls	r0, r3, #31
 80156be:	d5ea      	bpl.n	8015696 <_printf_float+0x1a6>
 80156c0:	1c4b      	adds	r3, r1, #1
 80156c2:	e7e7      	b.n	8015694 <_printf_float+0x1a4>
 80156c4:	2900      	cmp	r1, #0
 80156c6:	bfd4      	ite	le
 80156c8:	f1c1 0202 	rsble	r2, r1, #2
 80156cc:	2201      	movgt	r2, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	e7e0      	b.n	8015694 <_printf_float+0x1a4>
 80156d2:	6823      	ldr	r3, [r4, #0]
 80156d4:	055a      	lsls	r2, r3, #21
 80156d6:	d407      	bmi.n	80156e8 <_printf_float+0x1f8>
 80156d8:	6923      	ldr	r3, [r4, #16]
 80156da:	4642      	mov	r2, r8
 80156dc:	4631      	mov	r1, r6
 80156de:	4628      	mov	r0, r5
 80156e0:	47b8      	blx	r7
 80156e2:	3001      	adds	r0, #1
 80156e4:	d12c      	bne.n	8015740 <_printf_float+0x250>
 80156e6:	e764      	b.n	80155b2 <_printf_float+0xc2>
 80156e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80156ec:	f240 80e0 	bls.w	80158b0 <_printf_float+0x3c0>
 80156f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80156f4:	2200      	movs	r2, #0
 80156f6:	2300      	movs	r3, #0
 80156f8:	f7eb f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d034      	beq.n	801576a <_printf_float+0x27a>
 8015700:	4a37      	ldr	r2, [pc, #220]	; (80157e0 <_printf_float+0x2f0>)
 8015702:	2301      	movs	r3, #1
 8015704:	4631      	mov	r1, r6
 8015706:	4628      	mov	r0, r5
 8015708:	47b8      	blx	r7
 801570a:	3001      	adds	r0, #1
 801570c:	f43f af51 	beq.w	80155b2 <_printf_float+0xc2>
 8015710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015714:	429a      	cmp	r2, r3
 8015716:	db02      	blt.n	801571e <_printf_float+0x22e>
 8015718:	6823      	ldr	r3, [r4, #0]
 801571a:	07d8      	lsls	r0, r3, #31
 801571c:	d510      	bpl.n	8015740 <_printf_float+0x250>
 801571e:	ee18 3a10 	vmov	r3, s16
 8015722:	4652      	mov	r2, sl
 8015724:	4631      	mov	r1, r6
 8015726:	4628      	mov	r0, r5
 8015728:	47b8      	blx	r7
 801572a:	3001      	adds	r0, #1
 801572c:	f43f af41 	beq.w	80155b2 <_printf_float+0xc2>
 8015730:	f04f 0800 	mov.w	r8, #0
 8015734:	f104 091a 	add.w	r9, r4, #26
 8015738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801573a:	3b01      	subs	r3, #1
 801573c:	4543      	cmp	r3, r8
 801573e:	dc09      	bgt.n	8015754 <_printf_float+0x264>
 8015740:	6823      	ldr	r3, [r4, #0]
 8015742:	079b      	lsls	r3, r3, #30
 8015744:	f100 8105 	bmi.w	8015952 <_printf_float+0x462>
 8015748:	68e0      	ldr	r0, [r4, #12]
 801574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801574c:	4298      	cmp	r0, r3
 801574e:	bfb8      	it	lt
 8015750:	4618      	movlt	r0, r3
 8015752:	e730      	b.n	80155b6 <_printf_float+0xc6>
 8015754:	2301      	movs	r3, #1
 8015756:	464a      	mov	r2, r9
 8015758:	4631      	mov	r1, r6
 801575a:	4628      	mov	r0, r5
 801575c:	47b8      	blx	r7
 801575e:	3001      	adds	r0, #1
 8015760:	f43f af27 	beq.w	80155b2 <_printf_float+0xc2>
 8015764:	f108 0801 	add.w	r8, r8, #1
 8015768:	e7e6      	b.n	8015738 <_printf_float+0x248>
 801576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801576c:	2b00      	cmp	r3, #0
 801576e:	dc39      	bgt.n	80157e4 <_printf_float+0x2f4>
 8015770:	4a1b      	ldr	r2, [pc, #108]	; (80157e0 <_printf_float+0x2f0>)
 8015772:	2301      	movs	r3, #1
 8015774:	4631      	mov	r1, r6
 8015776:	4628      	mov	r0, r5
 8015778:	47b8      	blx	r7
 801577a:	3001      	adds	r0, #1
 801577c:	f43f af19 	beq.w	80155b2 <_printf_float+0xc2>
 8015780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015784:	4313      	orrs	r3, r2
 8015786:	d102      	bne.n	801578e <_printf_float+0x29e>
 8015788:	6823      	ldr	r3, [r4, #0]
 801578a:	07d9      	lsls	r1, r3, #31
 801578c:	d5d8      	bpl.n	8015740 <_printf_float+0x250>
 801578e:	ee18 3a10 	vmov	r3, s16
 8015792:	4652      	mov	r2, sl
 8015794:	4631      	mov	r1, r6
 8015796:	4628      	mov	r0, r5
 8015798:	47b8      	blx	r7
 801579a:	3001      	adds	r0, #1
 801579c:	f43f af09 	beq.w	80155b2 <_printf_float+0xc2>
 80157a0:	f04f 0900 	mov.w	r9, #0
 80157a4:	f104 0a1a 	add.w	sl, r4, #26
 80157a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157aa:	425b      	negs	r3, r3
 80157ac:	454b      	cmp	r3, r9
 80157ae:	dc01      	bgt.n	80157b4 <_printf_float+0x2c4>
 80157b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157b2:	e792      	b.n	80156da <_printf_float+0x1ea>
 80157b4:	2301      	movs	r3, #1
 80157b6:	4652      	mov	r2, sl
 80157b8:	4631      	mov	r1, r6
 80157ba:	4628      	mov	r0, r5
 80157bc:	47b8      	blx	r7
 80157be:	3001      	adds	r0, #1
 80157c0:	f43f aef7 	beq.w	80155b2 <_printf_float+0xc2>
 80157c4:	f109 0901 	add.w	r9, r9, #1
 80157c8:	e7ee      	b.n	80157a8 <_printf_float+0x2b8>
 80157ca:	bf00      	nop
 80157cc:	7fefffff 	.word	0x7fefffff
 80157d0:	0801838c 	.word	0x0801838c
 80157d4:	08018390 	.word	0x08018390
 80157d8:	08018398 	.word	0x08018398
 80157dc:	08018394 	.word	0x08018394
 80157e0:	0801839c 	.word	0x0801839c
 80157e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80157e8:	429a      	cmp	r2, r3
 80157ea:	bfa8      	it	ge
 80157ec:	461a      	movge	r2, r3
 80157ee:	2a00      	cmp	r2, #0
 80157f0:	4691      	mov	r9, r2
 80157f2:	dc37      	bgt.n	8015864 <_printf_float+0x374>
 80157f4:	f04f 0b00 	mov.w	fp, #0
 80157f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80157fc:	f104 021a 	add.w	r2, r4, #26
 8015800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015802:	9305      	str	r3, [sp, #20]
 8015804:	eba3 0309 	sub.w	r3, r3, r9
 8015808:	455b      	cmp	r3, fp
 801580a:	dc33      	bgt.n	8015874 <_printf_float+0x384>
 801580c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015810:	429a      	cmp	r2, r3
 8015812:	db3b      	blt.n	801588c <_printf_float+0x39c>
 8015814:	6823      	ldr	r3, [r4, #0]
 8015816:	07da      	lsls	r2, r3, #31
 8015818:	d438      	bmi.n	801588c <_printf_float+0x39c>
 801581a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801581c:	9a05      	ldr	r2, [sp, #20]
 801581e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015820:	1a9a      	subs	r2, r3, r2
 8015822:	eba3 0901 	sub.w	r9, r3, r1
 8015826:	4591      	cmp	r9, r2
 8015828:	bfa8      	it	ge
 801582a:	4691      	movge	r9, r2
 801582c:	f1b9 0f00 	cmp.w	r9, #0
 8015830:	dc35      	bgt.n	801589e <_printf_float+0x3ae>
 8015832:	f04f 0800 	mov.w	r8, #0
 8015836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801583a:	f104 0a1a 	add.w	sl, r4, #26
 801583e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015842:	1a9b      	subs	r3, r3, r2
 8015844:	eba3 0309 	sub.w	r3, r3, r9
 8015848:	4543      	cmp	r3, r8
 801584a:	f77f af79 	ble.w	8015740 <_printf_float+0x250>
 801584e:	2301      	movs	r3, #1
 8015850:	4652      	mov	r2, sl
 8015852:	4631      	mov	r1, r6
 8015854:	4628      	mov	r0, r5
 8015856:	47b8      	blx	r7
 8015858:	3001      	adds	r0, #1
 801585a:	f43f aeaa 	beq.w	80155b2 <_printf_float+0xc2>
 801585e:	f108 0801 	add.w	r8, r8, #1
 8015862:	e7ec      	b.n	801583e <_printf_float+0x34e>
 8015864:	4613      	mov	r3, r2
 8015866:	4631      	mov	r1, r6
 8015868:	4642      	mov	r2, r8
 801586a:	4628      	mov	r0, r5
 801586c:	47b8      	blx	r7
 801586e:	3001      	adds	r0, #1
 8015870:	d1c0      	bne.n	80157f4 <_printf_float+0x304>
 8015872:	e69e      	b.n	80155b2 <_printf_float+0xc2>
 8015874:	2301      	movs	r3, #1
 8015876:	4631      	mov	r1, r6
 8015878:	4628      	mov	r0, r5
 801587a:	9205      	str	r2, [sp, #20]
 801587c:	47b8      	blx	r7
 801587e:	3001      	adds	r0, #1
 8015880:	f43f ae97 	beq.w	80155b2 <_printf_float+0xc2>
 8015884:	9a05      	ldr	r2, [sp, #20]
 8015886:	f10b 0b01 	add.w	fp, fp, #1
 801588a:	e7b9      	b.n	8015800 <_printf_float+0x310>
 801588c:	ee18 3a10 	vmov	r3, s16
 8015890:	4652      	mov	r2, sl
 8015892:	4631      	mov	r1, r6
 8015894:	4628      	mov	r0, r5
 8015896:	47b8      	blx	r7
 8015898:	3001      	adds	r0, #1
 801589a:	d1be      	bne.n	801581a <_printf_float+0x32a>
 801589c:	e689      	b.n	80155b2 <_printf_float+0xc2>
 801589e:	9a05      	ldr	r2, [sp, #20]
 80158a0:	464b      	mov	r3, r9
 80158a2:	4442      	add	r2, r8
 80158a4:	4631      	mov	r1, r6
 80158a6:	4628      	mov	r0, r5
 80158a8:	47b8      	blx	r7
 80158aa:	3001      	adds	r0, #1
 80158ac:	d1c1      	bne.n	8015832 <_printf_float+0x342>
 80158ae:	e680      	b.n	80155b2 <_printf_float+0xc2>
 80158b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158b2:	2a01      	cmp	r2, #1
 80158b4:	dc01      	bgt.n	80158ba <_printf_float+0x3ca>
 80158b6:	07db      	lsls	r3, r3, #31
 80158b8:	d538      	bpl.n	801592c <_printf_float+0x43c>
 80158ba:	2301      	movs	r3, #1
 80158bc:	4642      	mov	r2, r8
 80158be:	4631      	mov	r1, r6
 80158c0:	4628      	mov	r0, r5
 80158c2:	47b8      	blx	r7
 80158c4:	3001      	adds	r0, #1
 80158c6:	f43f ae74 	beq.w	80155b2 <_printf_float+0xc2>
 80158ca:	ee18 3a10 	vmov	r3, s16
 80158ce:	4652      	mov	r2, sl
 80158d0:	4631      	mov	r1, r6
 80158d2:	4628      	mov	r0, r5
 80158d4:	47b8      	blx	r7
 80158d6:	3001      	adds	r0, #1
 80158d8:	f43f ae6b 	beq.w	80155b2 <_printf_float+0xc2>
 80158dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158e0:	2200      	movs	r2, #0
 80158e2:	2300      	movs	r3, #0
 80158e4:	f7eb f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 80158e8:	b9d8      	cbnz	r0, 8015922 <_printf_float+0x432>
 80158ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158ec:	f108 0201 	add.w	r2, r8, #1
 80158f0:	3b01      	subs	r3, #1
 80158f2:	4631      	mov	r1, r6
 80158f4:	4628      	mov	r0, r5
 80158f6:	47b8      	blx	r7
 80158f8:	3001      	adds	r0, #1
 80158fa:	d10e      	bne.n	801591a <_printf_float+0x42a>
 80158fc:	e659      	b.n	80155b2 <_printf_float+0xc2>
 80158fe:	2301      	movs	r3, #1
 8015900:	4652      	mov	r2, sl
 8015902:	4631      	mov	r1, r6
 8015904:	4628      	mov	r0, r5
 8015906:	47b8      	blx	r7
 8015908:	3001      	adds	r0, #1
 801590a:	f43f ae52 	beq.w	80155b2 <_printf_float+0xc2>
 801590e:	f108 0801 	add.w	r8, r8, #1
 8015912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015914:	3b01      	subs	r3, #1
 8015916:	4543      	cmp	r3, r8
 8015918:	dcf1      	bgt.n	80158fe <_printf_float+0x40e>
 801591a:	464b      	mov	r3, r9
 801591c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015920:	e6dc      	b.n	80156dc <_printf_float+0x1ec>
 8015922:	f04f 0800 	mov.w	r8, #0
 8015926:	f104 0a1a 	add.w	sl, r4, #26
 801592a:	e7f2      	b.n	8015912 <_printf_float+0x422>
 801592c:	2301      	movs	r3, #1
 801592e:	4642      	mov	r2, r8
 8015930:	e7df      	b.n	80158f2 <_printf_float+0x402>
 8015932:	2301      	movs	r3, #1
 8015934:	464a      	mov	r2, r9
 8015936:	4631      	mov	r1, r6
 8015938:	4628      	mov	r0, r5
 801593a:	47b8      	blx	r7
 801593c:	3001      	adds	r0, #1
 801593e:	f43f ae38 	beq.w	80155b2 <_printf_float+0xc2>
 8015942:	f108 0801 	add.w	r8, r8, #1
 8015946:	68e3      	ldr	r3, [r4, #12]
 8015948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801594a:	1a5b      	subs	r3, r3, r1
 801594c:	4543      	cmp	r3, r8
 801594e:	dcf0      	bgt.n	8015932 <_printf_float+0x442>
 8015950:	e6fa      	b.n	8015748 <_printf_float+0x258>
 8015952:	f04f 0800 	mov.w	r8, #0
 8015956:	f104 0919 	add.w	r9, r4, #25
 801595a:	e7f4      	b.n	8015946 <_printf_float+0x456>

0801595c <_printf_common>:
 801595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015960:	4616      	mov	r6, r2
 8015962:	4699      	mov	r9, r3
 8015964:	688a      	ldr	r2, [r1, #8]
 8015966:	690b      	ldr	r3, [r1, #16]
 8015968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801596c:	4293      	cmp	r3, r2
 801596e:	bfb8      	it	lt
 8015970:	4613      	movlt	r3, r2
 8015972:	6033      	str	r3, [r6, #0]
 8015974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015978:	4607      	mov	r7, r0
 801597a:	460c      	mov	r4, r1
 801597c:	b10a      	cbz	r2, 8015982 <_printf_common+0x26>
 801597e:	3301      	adds	r3, #1
 8015980:	6033      	str	r3, [r6, #0]
 8015982:	6823      	ldr	r3, [r4, #0]
 8015984:	0699      	lsls	r1, r3, #26
 8015986:	bf42      	ittt	mi
 8015988:	6833      	ldrmi	r3, [r6, #0]
 801598a:	3302      	addmi	r3, #2
 801598c:	6033      	strmi	r3, [r6, #0]
 801598e:	6825      	ldr	r5, [r4, #0]
 8015990:	f015 0506 	ands.w	r5, r5, #6
 8015994:	d106      	bne.n	80159a4 <_printf_common+0x48>
 8015996:	f104 0a19 	add.w	sl, r4, #25
 801599a:	68e3      	ldr	r3, [r4, #12]
 801599c:	6832      	ldr	r2, [r6, #0]
 801599e:	1a9b      	subs	r3, r3, r2
 80159a0:	42ab      	cmp	r3, r5
 80159a2:	dc26      	bgt.n	80159f2 <_printf_common+0x96>
 80159a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80159a8:	1e13      	subs	r3, r2, #0
 80159aa:	6822      	ldr	r2, [r4, #0]
 80159ac:	bf18      	it	ne
 80159ae:	2301      	movne	r3, #1
 80159b0:	0692      	lsls	r2, r2, #26
 80159b2:	d42b      	bmi.n	8015a0c <_printf_common+0xb0>
 80159b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80159b8:	4649      	mov	r1, r9
 80159ba:	4638      	mov	r0, r7
 80159bc:	47c0      	blx	r8
 80159be:	3001      	adds	r0, #1
 80159c0:	d01e      	beq.n	8015a00 <_printf_common+0xa4>
 80159c2:	6823      	ldr	r3, [r4, #0]
 80159c4:	68e5      	ldr	r5, [r4, #12]
 80159c6:	6832      	ldr	r2, [r6, #0]
 80159c8:	f003 0306 	and.w	r3, r3, #6
 80159cc:	2b04      	cmp	r3, #4
 80159ce:	bf08      	it	eq
 80159d0:	1aad      	subeq	r5, r5, r2
 80159d2:	68a3      	ldr	r3, [r4, #8]
 80159d4:	6922      	ldr	r2, [r4, #16]
 80159d6:	bf0c      	ite	eq
 80159d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80159dc:	2500      	movne	r5, #0
 80159de:	4293      	cmp	r3, r2
 80159e0:	bfc4      	itt	gt
 80159e2:	1a9b      	subgt	r3, r3, r2
 80159e4:	18ed      	addgt	r5, r5, r3
 80159e6:	2600      	movs	r6, #0
 80159e8:	341a      	adds	r4, #26
 80159ea:	42b5      	cmp	r5, r6
 80159ec:	d11a      	bne.n	8015a24 <_printf_common+0xc8>
 80159ee:	2000      	movs	r0, #0
 80159f0:	e008      	b.n	8015a04 <_printf_common+0xa8>
 80159f2:	2301      	movs	r3, #1
 80159f4:	4652      	mov	r2, sl
 80159f6:	4649      	mov	r1, r9
 80159f8:	4638      	mov	r0, r7
 80159fa:	47c0      	blx	r8
 80159fc:	3001      	adds	r0, #1
 80159fe:	d103      	bne.n	8015a08 <_printf_common+0xac>
 8015a00:	f04f 30ff 	mov.w	r0, #4294967295
 8015a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a08:	3501      	adds	r5, #1
 8015a0a:	e7c6      	b.n	801599a <_printf_common+0x3e>
 8015a0c:	18e1      	adds	r1, r4, r3
 8015a0e:	1c5a      	adds	r2, r3, #1
 8015a10:	2030      	movs	r0, #48	; 0x30
 8015a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015a16:	4422      	add	r2, r4
 8015a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015a20:	3302      	adds	r3, #2
 8015a22:	e7c7      	b.n	80159b4 <_printf_common+0x58>
 8015a24:	2301      	movs	r3, #1
 8015a26:	4622      	mov	r2, r4
 8015a28:	4649      	mov	r1, r9
 8015a2a:	4638      	mov	r0, r7
 8015a2c:	47c0      	blx	r8
 8015a2e:	3001      	adds	r0, #1
 8015a30:	d0e6      	beq.n	8015a00 <_printf_common+0xa4>
 8015a32:	3601      	adds	r6, #1
 8015a34:	e7d9      	b.n	80159ea <_printf_common+0x8e>
	...

08015a38 <_printf_i>:
 8015a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a3c:	7e0f      	ldrb	r7, [r1, #24]
 8015a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015a40:	2f78      	cmp	r7, #120	; 0x78
 8015a42:	4691      	mov	r9, r2
 8015a44:	4680      	mov	r8, r0
 8015a46:	460c      	mov	r4, r1
 8015a48:	469a      	mov	sl, r3
 8015a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015a4e:	d807      	bhi.n	8015a60 <_printf_i+0x28>
 8015a50:	2f62      	cmp	r7, #98	; 0x62
 8015a52:	d80a      	bhi.n	8015a6a <_printf_i+0x32>
 8015a54:	2f00      	cmp	r7, #0
 8015a56:	f000 80d8 	beq.w	8015c0a <_printf_i+0x1d2>
 8015a5a:	2f58      	cmp	r7, #88	; 0x58
 8015a5c:	f000 80a3 	beq.w	8015ba6 <_printf_i+0x16e>
 8015a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015a68:	e03a      	b.n	8015ae0 <_printf_i+0xa8>
 8015a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015a6e:	2b15      	cmp	r3, #21
 8015a70:	d8f6      	bhi.n	8015a60 <_printf_i+0x28>
 8015a72:	a101      	add	r1, pc, #4	; (adr r1, 8015a78 <_printf_i+0x40>)
 8015a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015a78:	08015ad1 	.word	0x08015ad1
 8015a7c:	08015ae5 	.word	0x08015ae5
 8015a80:	08015a61 	.word	0x08015a61
 8015a84:	08015a61 	.word	0x08015a61
 8015a88:	08015a61 	.word	0x08015a61
 8015a8c:	08015a61 	.word	0x08015a61
 8015a90:	08015ae5 	.word	0x08015ae5
 8015a94:	08015a61 	.word	0x08015a61
 8015a98:	08015a61 	.word	0x08015a61
 8015a9c:	08015a61 	.word	0x08015a61
 8015aa0:	08015a61 	.word	0x08015a61
 8015aa4:	08015bf1 	.word	0x08015bf1
 8015aa8:	08015b15 	.word	0x08015b15
 8015aac:	08015bd3 	.word	0x08015bd3
 8015ab0:	08015a61 	.word	0x08015a61
 8015ab4:	08015a61 	.word	0x08015a61
 8015ab8:	08015c13 	.word	0x08015c13
 8015abc:	08015a61 	.word	0x08015a61
 8015ac0:	08015b15 	.word	0x08015b15
 8015ac4:	08015a61 	.word	0x08015a61
 8015ac8:	08015a61 	.word	0x08015a61
 8015acc:	08015bdb 	.word	0x08015bdb
 8015ad0:	682b      	ldr	r3, [r5, #0]
 8015ad2:	1d1a      	adds	r2, r3, #4
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	602a      	str	r2, [r5, #0]
 8015ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	e0a3      	b.n	8015c2c <_printf_i+0x1f4>
 8015ae4:	6820      	ldr	r0, [r4, #0]
 8015ae6:	6829      	ldr	r1, [r5, #0]
 8015ae8:	0606      	lsls	r6, r0, #24
 8015aea:	f101 0304 	add.w	r3, r1, #4
 8015aee:	d50a      	bpl.n	8015b06 <_printf_i+0xce>
 8015af0:	680e      	ldr	r6, [r1, #0]
 8015af2:	602b      	str	r3, [r5, #0]
 8015af4:	2e00      	cmp	r6, #0
 8015af6:	da03      	bge.n	8015b00 <_printf_i+0xc8>
 8015af8:	232d      	movs	r3, #45	; 0x2d
 8015afa:	4276      	negs	r6, r6
 8015afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b00:	485e      	ldr	r0, [pc, #376]	; (8015c7c <_printf_i+0x244>)
 8015b02:	230a      	movs	r3, #10
 8015b04:	e019      	b.n	8015b3a <_printf_i+0x102>
 8015b06:	680e      	ldr	r6, [r1, #0]
 8015b08:	602b      	str	r3, [r5, #0]
 8015b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015b0e:	bf18      	it	ne
 8015b10:	b236      	sxthne	r6, r6
 8015b12:	e7ef      	b.n	8015af4 <_printf_i+0xbc>
 8015b14:	682b      	ldr	r3, [r5, #0]
 8015b16:	6820      	ldr	r0, [r4, #0]
 8015b18:	1d19      	adds	r1, r3, #4
 8015b1a:	6029      	str	r1, [r5, #0]
 8015b1c:	0601      	lsls	r1, r0, #24
 8015b1e:	d501      	bpl.n	8015b24 <_printf_i+0xec>
 8015b20:	681e      	ldr	r6, [r3, #0]
 8015b22:	e002      	b.n	8015b2a <_printf_i+0xf2>
 8015b24:	0646      	lsls	r6, r0, #25
 8015b26:	d5fb      	bpl.n	8015b20 <_printf_i+0xe8>
 8015b28:	881e      	ldrh	r6, [r3, #0]
 8015b2a:	4854      	ldr	r0, [pc, #336]	; (8015c7c <_printf_i+0x244>)
 8015b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8015b2e:	bf0c      	ite	eq
 8015b30:	2308      	moveq	r3, #8
 8015b32:	230a      	movne	r3, #10
 8015b34:	2100      	movs	r1, #0
 8015b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015b3a:	6865      	ldr	r5, [r4, #4]
 8015b3c:	60a5      	str	r5, [r4, #8]
 8015b3e:	2d00      	cmp	r5, #0
 8015b40:	bfa2      	ittt	ge
 8015b42:	6821      	ldrge	r1, [r4, #0]
 8015b44:	f021 0104 	bicge.w	r1, r1, #4
 8015b48:	6021      	strge	r1, [r4, #0]
 8015b4a:	b90e      	cbnz	r6, 8015b50 <_printf_i+0x118>
 8015b4c:	2d00      	cmp	r5, #0
 8015b4e:	d04d      	beq.n	8015bec <_printf_i+0x1b4>
 8015b50:	4615      	mov	r5, r2
 8015b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8015b56:	fb03 6711 	mls	r7, r3, r1, r6
 8015b5a:	5dc7      	ldrb	r7, [r0, r7]
 8015b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015b60:	4637      	mov	r7, r6
 8015b62:	42bb      	cmp	r3, r7
 8015b64:	460e      	mov	r6, r1
 8015b66:	d9f4      	bls.n	8015b52 <_printf_i+0x11a>
 8015b68:	2b08      	cmp	r3, #8
 8015b6a:	d10b      	bne.n	8015b84 <_printf_i+0x14c>
 8015b6c:	6823      	ldr	r3, [r4, #0]
 8015b6e:	07de      	lsls	r6, r3, #31
 8015b70:	d508      	bpl.n	8015b84 <_printf_i+0x14c>
 8015b72:	6923      	ldr	r3, [r4, #16]
 8015b74:	6861      	ldr	r1, [r4, #4]
 8015b76:	4299      	cmp	r1, r3
 8015b78:	bfde      	ittt	le
 8015b7a:	2330      	movle	r3, #48	; 0x30
 8015b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015b84:	1b52      	subs	r2, r2, r5
 8015b86:	6122      	str	r2, [r4, #16]
 8015b88:	f8cd a000 	str.w	sl, [sp]
 8015b8c:	464b      	mov	r3, r9
 8015b8e:	aa03      	add	r2, sp, #12
 8015b90:	4621      	mov	r1, r4
 8015b92:	4640      	mov	r0, r8
 8015b94:	f7ff fee2 	bl	801595c <_printf_common>
 8015b98:	3001      	adds	r0, #1
 8015b9a:	d14c      	bne.n	8015c36 <_printf_i+0x1fe>
 8015b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8015ba0:	b004      	add	sp, #16
 8015ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ba6:	4835      	ldr	r0, [pc, #212]	; (8015c7c <_printf_i+0x244>)
 8015ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015bac:	6829      	ldr	r1, [r5, #0]
 8015bae:	6823      	ldr	r3, [r4, #0]
 8015bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8015bb4:	6029      	str	r1, [r5, #0]
 8015bb6:	061d      	lsls	r5, r3, #24
 8015bb8:	d514      	bpl.n	8015be4 <_printf_i+0x1ac>
 8015bba:	07df      	lsls	r7, r3, #31
 8015bbc:	bf44      	itt	mi
 8015bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8015bc2:	6023      	strmi	r3, [r4, #0]
 8015bc4:	b91e      	cbnz	r6, 8015bce <_printf_i+0x196>
 8015bc6:	6823      	ldr	r3, [r4, #0]
 8015bc8:	f023 0320 	bic.w	r3, r3, #32
 8015bcc:	6023      	str	r3, [r4, #0]
 8015bce:	2310      	movs	r3, #16
 8015bd0:	e7b0      	b.n	8015b34 <_printf_i+0xfc>
 8015bd2:	6823      	ldr	r3, [r4, #0]
 8015bd4:	f043 0320 	orr.w	r3, r3, #32
 8015bd8:	6023      	str	r3, [r4, #0]
 8015bda:	2378      	movs	r3, #120	; 0x78
 8015bdc:	4828      	ldr	r0, [pc, #160]	; (8015c80 <_printf_i+0x248>)
 8015bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015be2:	e7e3      	b.n	8015bac <_printf_i+0x174>
 8015be4:	0659      	lsls	r1, r3, #25
 8015be6:	bf48      	it	mi
 8015be8:	b2b6      	uxthmi	r6, r6
 8015bea:	e7e6      	b.n	8015bba <_printf_i+0x182>
 8015bec:	4615      	mov	r5, r2
 8015bee:	e7bb      	b.n	8015b68 <_printf_i+0x130>
 8015bf0:	682b      	ldr	r3, [r5, #0]
 8015bf2:	6826      	ldr	r6, [r4, #0]
 8015bf4:	6961      	ldr	r1, [r4, #20]
 8015bf6:	1d18      	adds	r0, r3, #4
 8015bf8:	6028      	str	r0, [r5, #0]
 8015bfa:	0635      	lsls	r5, r6, #24
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	d501      	bpl.n	8015c04 <_printf_i+0x1cc>
 8015c00:	6019      	str	r1, [r3, #0]
 8015c02:	e002      	b.n	8015c0a <_printf_i+0x1d2>
 8015c04:	0670      	lsls	r0, r6, #25
 8015c06:	d5fb      	bpl.n	8015c00 <_printf_i+0x1c8>
 8015c08:	8019      	strh	r1, [r3, #0]
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	6123      	str	r3, [r4, #16]
 8015c0e:	4615      	mov	r5, r2
 8015c10:	e7ba      	b.n	8015b88 <_printf_i+0x150>
 8015c12:	682b      	ldr	r3, [r5, #0]
 8015c14:	1d1a      	adds	r2, r3, #4
 8015c16:	602a      	str	r2, [r5, #0]
 8015c18:	681d      	ldr	r5, [r3, #0]
 8015c1a:	6862      	ldr	r2, [r4, #4]
 8015c1c:	2100      	movs	r1, #0
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f7ea fade 	bl	80001e0 <memchr>
 8015c24:	b108      	cbz	r0, 8015c2a <_printf_i+0x1f2>
 8015c26:	1b40      	subs	r0, r0, r5
 8015c28:	6060      	str	r0, [r4, #4]
 8015c2a:	6863      	ldr	r3, [r4, #4]
 8015c2c:	6123      	str	r3, [r4, #16]
 8015c2e:	2300      	movs	r3, #0
 8015c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c34:	e7a8      	b.n	8015b88 <_printf_i+0x150>
 8015c36:	6923      	ldr	r3, [r4, #16]
 8015c38:	462a      	mov	r2, r5
 8015c3a:	4649      	mov	r1, r9
 8015c3c:	4640      	mov	r0, r8
 8015c3e:	47d0      	blx	sl
 8015c40:	3001      	adds	r0, #1
 8015c42:	d0ab      	beq.n	8015b9c <_printf_i+0x164>
 8015c44:	6823      	ldr	r3, [r4, #0]
 8015c46:	079b      	lsls	r3, r3, #30
 8015c48:	d413      	bmi.n	8015c72 <_printf_i+0x23a>
 8015c4a:	68e0      	ldr	r0, [r4, #12]
 8015c4c:	9b03      	ldr	r3, [sp, #12]
 8015c4e:	4298      	cmp	r0, r3
 8015c50:	bfb8      	it	lt
 8015c52:	4618      	movlt	r0, r3
 8015c54:	e7a4      	b.n	8015ba0 <_printf_i+0x168>
 8015c56:	2301      	movs	r3, #1
 8015c58:	4632      	mov	r2, r6
 8015c5a:	4649      	mov	r1, r9
 8015c5c:	4640      	mov	r0, r8
 8015c5e:	47d0      	blx	sl
 8015c60:	3001      	adds	r0, #1
 8015c62:	d09b      	beq.n	8015b9c <_printf_i+0x164>
 8015c64:	3501      	adds	r5, #1
 8015c66:	68e3      	ldr	r3, [r4, #12]
 8015c68:	9903      	ldr	r1, [sp, #12]
 8015c6a:	1a5b      	subs	r3, r3, r1
 8015c6c:	42ab      	cmp	r3, r5
 8015c6e:	dcf2      	bgt.n	8015c56 <_printf_i+0x21e>
 8015c70:	e7eb      	b.n	8015c4a <_printf_i+0x212>
 8015c72:	2500      	movs	r5, #0
 8015c74:	f104 0619 	add.w	r6, r4, #25
 8015c78:	e7f5      	b.n	8015c66 <_printf_i+0x22e>
 8015c7a:	bf00      	nop
 8015c7c:	0801839e 	.word	0x0801839e
 8015c80:	080183af 	.word	0x080183af

08015c84 <cleanup_glue>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	460c      	mov	r4, r1
 8015c88:	6809      	ldr	r1, [r1, #0]
 8015c8a:	4605      	mov	r5, r0
 8015c8c:	b109      	cbz	r1, 8015c92 <cleanup_glue+0xe>
 8015c8e:	f7ff fff9 	bl	8015c84 <cleanup_glue>
 8015c92:	4621      	mov	r1, r4
 8015c94:	4628      	mov	r0, r5
 8015c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c9a:	f7ff baa9 	b.w	80151f0 <_free_r>
	...

08015ca0 <_reclaim_reent>:
 8015ca0:	4b2c      	ldr	r3, [pc, #176]	; (8015d54 <_reclaim_reent+0xb4>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4283      	cmp	r3, r0
 8015ca6:	b570      	push	{r4, r5, r6, lr}
 8015ca8:	4604      	mov	r4, r0
 8015caa:	d051      	beq.n	8015d50 <_reclaim_reent+0xb0>
 8015cac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015cae:	b143      	cbz	r3, 8015cc2 <_reclaim_reent+0x22>
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d14a      	bne.n	8015d4c <_reclaim_reent+0xac>
 8015cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cb8:	6819      	ldr	r1, [r3, #0]
 8015cba:	b111      	cbz	r1, 8015cc2 <_reclaim_reent+0x22>
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	f7ff fa97 	bl	80151f0 <_free_r>
 8015cc2:	6961      	ldr	r1, [r4, #20]
 8015cc4:	b111      	cbz	r1, 8015ccc <_reclaim_reent+0x2c>
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	f7ff fa92 	bl	80151f0 <_free_r>
 8015ccc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015cce:	b111      	cbz	r1, 8015cd6 <_reclaim_reent+0x36>
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f7ff fa8d 	bl	80151f0 <_free_r>
 8015cd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015cd8:	b111      	cbz	r1, 8015ce0 <_reclaim_reent+0x40>
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f7ff fa88 	bl	80151f0 <_free_r>
 8015ce0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015ce2:	b111      	cbz	r1, 8015cea <_reclaim_reent+0x4a>
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	f7ff fa83 	bl	80151f0 <_free_r>
 8015cea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015cec:	b111      	cbz	r1, 8015cf4 <_reclaim_reent+0x54>
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f7ff fa7e 	bl	80151f0 <_free_r>
 8015cf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015cf6:	b111      	cbz	r1, 8015cfe <_reclaim_reent+0x5e>
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	f7ff fa79 	bl	80151f0 <_free_r>
 8015cfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015d00:	b111      	cbz	r1, 8015d08 <_reclaim_reent+0x68>
 8015d02:	4620      	mov	r0, r4
 8015d04:	f7ff fa74 	bl	80151f0 <_free_r>
 8015d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d0a:	b111      	cbz	r1, 8015d12 <_reclaim_reent+0x72>
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	f7ff fa6f 	bl	80151f0 <_free_r>
 8015d12:	69a3      	ldr	r3, [r4, #24]
 8015d14:	b1e3      	cbz	r3, 8015d50 <_reclaim_reent+0xb0>
 8015d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015d18:	4620      	mov	r0, r4
 8015d1a:	4798      	blx	r3
 8015d1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015d1e:	b1b9      	cbz	r1, 8015d50 <_reclaim_reent+0xb0>
 8015d20:	4620      	mov	r0, r4
 8015d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d26:	f7ff bfad 	b.w	8015c84 <cleanup_glue>
 8015d2a:	5949      	ldr	r1, [r1, r5]
 8015d2c:	b941      	cbnz	r1, 8015d40 <_reclaim_reent+0xa0>
 8015d2e:	3504      	adds	r5, #4
 8015d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d32:	2d80      	cmp	r5, #128	; 0x80
 8015d34:	68d9      	ldr	r1, [r3, #12]
 8015d36:	d1f8      	bne.n	8015d2a <_reclaim_reent+0x8a>
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7ff fa59 	bl	80151f0 <_free_r>
 8015d3e:	e7ba      	b.n	8015cb6 <_reclaim_reent+0x16>
 8015d40:	680e      	ldr	r6, [r1, #0]
 8015d42:	4620      	mov	r0, r4
 8015d44:	f7ff fa54 	bl	80151f0 <_free_r>
 8015d48:	4631      	mov	r1, r6
 8015d4a:	e7ef      	b.n	8015d2c <_reclaim_reent+0x8c>
 8015d4c:	2500      	movs	r5, #0
 8015d4e:	e7ef      	b.n	8015d30 <_reclaim_reent+0x90>
 8015d50:	bd70      	pop	{r4, r5, r6, pc}
 8015d52:	bf00      	nop
 8015d54:	20000024 	.word	0x20000024

08015d58 <_sbrk_r>:
 8015d58:	b538      	push	{r3, r4, r5, lr}
 8015d5a:	4d06      	ldr	r5, [pc, #24]	; (8015d74 <_sbrk_r+0x1c>)
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	4604      	mov	r4, r0
 8015d60:	4608      	mov	r0, r1
 8015d62:	602b      	str	r3, [r5, #0]
 8015d64:	f7f3 fda0 	bl	80098a8 <_sbrk>
 8015d68:	1c43      	adds	r3, r0, #1
 8015d6a:	d102      	bne.n	8015d72 <_sbrk_r+0x1a>
 8015d6c:	682b      	ldr	r3, [r5, #0]
 8015d6e:	b103      	cbz	r3, 8015d72 <_sbrk_r+0x1a>
 8015d70:	6023      	str	r3, [r4, #0]
 8015d72:	bd38      	pop	{r3, r4, r5, pc}
 8015d74:	2000a428 	.word	0x2000a428

08015d78 <_raise_r>:
 8015d78:	291f      	cmp	r1, #31
 8015d7a:	b538      	push	{r3, r4, r5, lr}
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	460d      	mov	r5, r1
 8015d80:	d904      	bls.n	8015d8c <_raise_r+0x14>
 8015d82:	2316      	movs	r3, #22
 8015d84:	6003      	str	r3, [r0, #0]
 8015d86:	f04f 30ff 	mov.w	r0, #4294967295
 8015d8a:	bd38      	pop	{r3, r4, r5, pc}
 8015d8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015d8e:	b112      	cbz	r2, 8015d96 <_raise_r+0x1e>
 8015d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d94:	b94b      	cbnz	r3, 8015daa <_raise_r+0x32>
 8015d96:	4620      	mov	r0, r4
 8015d98:	f000 f830 	bl	8015dfc <_getpid_r>
 8015d9c:	462a      	mov	r2, r5
 8015d9e:	4601      	mov	r1, r0
 8015da0:	4620      	mov	r0, r4
 8015da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015da6:	f000 b817 	b.w	8015dd8 <_kill_r>
 8015daa:	2b01      	cmp	r3, #1
 8015dac:	d00a      	beq.n	8015dc4 <_raise_r+0x4c>
 8015dae:	1c59      	adds	r1, r3, #1
 8015db0:	d103      	bne.n	8015dba <_raise_r+0x42>
 8015db2:	2316      	movs	r3, #22
 8015db4:	6003      	str	r3, [r0, #0]
 8015db6:	2001      	movs	r0, #1
 8015db8:	e7e7      	b.n	8015d8a <_raise_r+0x12>
 8015dba:	2400      	movs	r4, #0
 8015dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015dc0:	4628      	mov	r0, r5
 8015dc2:	4798      	blx	r3
 8015dc4:	2000      	movs	r0, #0
 8015dc6:	e7e0      	b.n	8015d8a <_raise_r+0x12>

08015dc8 <raise>:
 8015dc8:	4b02      	ldr	r3, [pc, #8]	; (8015dd4 <raise+0xc>)
 8015dca:	4601      	mov	r1, r0
 8015dcc:	6818      	ldr	r0, [r3, #0]
 8015dce:	f7ff bfd3 	b.w	8015d78 <_raise_r>
 8015dd2:	bf00      	nop
 8015dd4:	20000024 	.word	0x20000024

08015dd8 <_kill_r>:
 8015dd8:	b538      	push	{r3, r4, r5, lr}
 8015dda:	4d07      	ldr	r5, [pc, #28]	; (8015df8 <_kill_r+0x20>)
 8015ddc:	2300      	movs	r3, #0
 8015dde:	4604      	mov	r4, r0
 8015de0:	4608      	mov	r0, r1
 8015de2:	4611      	mov	r1, r2
 8015de4:	602b      	str	r3, [r5, #0]
 8015de6:	f7f3 fcd7 	bl	8009798 <_kill>
 8015dea:	1c43      	adds	r3, r0, #1
 8015dec:	d102      	bne.n	8015df4 <_kill_r+0x1c>
 8015dee:	682b      	ldr	r3, [r5, #0]
 8015df0:	b103      	cbz	r3, 8015df4 <_kill_r+0x1c>
 8015df2:	6023      	str	r3, [r4, #0]
 8015df4:	bd38      	pop	{r3, r4, r5, pc}
 8015df6:	bf00      	nop
 8015df8:	2000a428 	.word	0x2000a428

08015dfc <_getpid_r>:
 8015dfc:	f7f3 bcc4 	b.w	8009788 <_getpid>

08015e00 <__sread>:
 8015e00:	b510      	push	{r4, lr}
 8015e02:	460c      	mov	r4, r1
 8015e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e08:	f001 fbba 	bl	8017580 <_read_r>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	bfab      	itete	ge
 8015e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015e12:	89a3      	ldrhlt	r3, [r4, #12]
 8015e14:	181b      	addge	r3, r3, r0
 8015e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015e1a:	bfac      	ite	ge
 8015e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015e1e:	81a3      	strhlt	r3, [r4, #12]
 8015e20:	bd10      	pop	{r4, pc}

08015e22 <__swrite>:
 8015e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e26:	461f      	mov	r7, r3
 8015e28:	898b      	ldrh	r3, [r1, #12]
 8015e2a:	05db      	lsls	r3, r3, #23
 8015e2c:	4605      	mov	r5, r0
 8015e2e:	460c      	mov	r4, r1
 8015e30:	4616      	mov	r6, r2
 8015e32:	d505      	bpl.n	8015e40 <__swrite+0x1e>
 8015e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e38:	2302      	movs	r3, #2
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f000 ffe8 	bl	8016e10 <_lseek_r>
 8015e40:	89a3      	ldrh	r3, [r4, #12]
 8015e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e4a:	81a3      	strh	r3, [r4, #12]
 8015e4c:	4632      	mov	r2, r6
 8015e4e:	463b      	mov	r3, r7
 8015e50:	4628      	mov	r0, r5
 8015e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e56:	f000 b817 	b.w	8015e88 <_write_r>

08015e5a <__sseek>:
 8015e5a:	b510      	push	{r4, lr}
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e62:	f000 ffd5 	bl	8016e10 <_lseek_r>
 8015e66:	1c43      	adds	r3, r0, #1
 8015e68:	89a3      	ldrh	r3, [r4, #12]
 8015e6a:	bf15      	itete	ne
 8015e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015e76:	81a3      	strheq	r3, [r4, #12]
 8015e78:	bf18      	it	ne
 8015e7a:	81a3      	strhne	r3, [r4, #12]
 8015e7c:	bd10      	pop	{r4, pc}

08015e7e <__sclose>:
 8015e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e82:	f000 b875 	b.w	8015f70 <_close_r>
	...

08015e88 <_write_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4d07      	ldr	r5, [pc, #28]	; (8015ea8 <_write_r+0x20>)
 8015e8c:	4604      	mov	r4, r0
 8015e8e:	4608      	mov	r0, r1
 8015e90:	4611      	mov	r1, r2
 8015e92:	2200      	movs	r2, #0
 8015e94:	602a      	str	r2, [r5, #0]
 8015e96:	461a      	mov	r2, r3
 8015e98:	f7f3 fcb5 	bl	8009806 <_write>
 8015e9c:	1c43      	adds	r3, r0, #1
 8015e9e:	d102      	bne.n	8015ea6 <_write_r+0x1e>
 8015ea0:	682b      	ldr	r3, [r5, #0]
 8015ea2:	b103      	cbz	r3, 8015ea6 <_write_r+0x1e>
 8015ea4:	6023      	str	r3, [r4, #0]
 8015ea6:	bd38      	pop	{r3, r4, r5, pc}
 8015ea8:	2000a428 	.word	0x2000a428

08015eac <__register_exitproc>:
 8015eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015eb0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8015f6c <__register_exitproc+0xc0>
 8015eb4:	4606      	mov	r6, r0
 8015eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8015eba:	461f      	mov	r7, r3
 8015ebc:	460d      	mov	r5, r1
 8015ebe:	4691      	mov	r9, r2
 8015ec0:	f7ff f96d 	bl	801519e <__retarget_lock_acquire_recursive>
 8015ec4:	4b25      	ldr	r3, [pc, #148]	; (8015f5c <__register_exitproc+0xb0>)
 8015ec6:	681c      	ldr	r4, [r3, #0]
 8015ec8:	b934      	cbnz	r4, 8015ed8 <__register_exitproc+0x2c>
 8015eca:	4c25      	ldr	r4, [pc, #148]	; (8015f60 <__register_exitproc+0xb4>)
 8015ecc:	601c      	str	r4, [r3, #0]
 8015ece:	4b25      	ldr	r3, [pc, #148]	; (8015f64 <__register_exitproc+0xb8>)
 8015ed0:	b113      	cbz	r3, 8015ed8 <__register_exitproc+0x2c>
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8015ed8:	6863      	ldr	r3, [r4, #4]
 8015eda:	2b1f      	cmp	r3, #31
 8015edc:	dd07      	ble.n	8015eee <__register_exitproc+0x42>
 8015ede:	f8d8 0000 	ldr.w	r0, [r8]
 8015ee2:	f7ff f95e 	bl	80151a2 <__retarget_lock_release_recursive>
 8015ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8015eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eee:	b34e      	cbz	r6, 8015f44 <__register_exitproc+0x98>
 8015ef0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8015ef4:	b988      	cbnz	r0, 8015f1a <__register_exitproc+0x6e>
 8015ef6:	4b1c      	ldr	r3, [pc, #112]	; (8015f68 <__register_exitproc+0xbc>)
 8015ef8:	b923      	cbnz	r3, 8015f04 <__register_exitproc+0x58>
 8015efa:	f8d8 0000 	ldr.w	r0, [r8]
 8015efe:	f7ff f94f 	bl	80151a0 <__retarget_lock_release>
 8015f02:	e7f0      	b.n	8015ee6 <__register_exitproc+0x3a>
 8015f04:	f44f 7084 	mov.w	r0, #264	; 0x108
 8015f08:	f7ff f94c 	bl	80151a4 <malloc>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	d0f4      	beq.n	8015efa <__register_exitproc+0x4e>
 8015f10:	2300      	movs	r3, #0
 8015f12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8015f16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8015f1a:	6863      	ldr	r3, [r4, #4]
 8015f1c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8015f20:	2201      	movs	r2, #1
 8015f22:	409a      	lsls	r2, r3
 8015f24:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8015f28:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8015f2c:	4313      	orrs	r3, r2
 8015f2e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8015f32:	2e02      	cmp	r6, #2
 8015f34:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8015f38:	bf02      	ittt	eq
 8015f3a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8015f3e:	4313      	orreq	r3, r2
 8015f40:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8015f44:	6863      	ldr	r3, [r4, #4]
 8015f46:	f8d8 0000 	ldr.w	r0, [r8]
 8015f4a:	1c5a      	adds	r2, r3, #1
 8015f4c:	3302      	adds	r3, #2
 8015f4e:	6062      	str	r2, [r4, #4]
 8015f50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8015f54:	f7ff f925 	bl	80151a2 <__retarget_lock_release_recursive>
 8015f58:	2000      	movs	r0, #0
 8015f5a:	e7c6      	b.n	8015eea <__register_exitproc+0x3e>
 8015f5c:	2000a4b8 	.word	0x2000a4b8
 8015f60:	2000a42c 	.word	0x2000a42c
 8015f64:	00000000 	.word	0x00000000
 8015f68:	080151a5 	.word	0x080151a5
 8015f6c:	20000088 	.word	0x20000088

08015f70 <_close_r>:
 8015f70:	b538      	push	{r3, r4, r5, lr}
 8015f72:	4d06      	ldr	r5, [pc, #24]	; (8015f8c <_close_r+0x1c>)
 8015f74:	2300      	movs	r3, #0
 8015f76:	4604      	mov	r4, r0
 8015f78:	4608      	mov	r0, r1
 8015f7a:	602b      	str	r3, [r5, #0]
 8015f7c:	f7f3 fc5f 	bl	800983e <_close>
 8015f80:	1c43      	adds	r3, r0, #1
 8015f82:	d102      	bne.n	8015f8a <_close_r+0x1a>
 8015f84:	682b      	ldr	r3, [r5, #0]
 8015f86:	b103      	cbz	r3, 8015f8a <_close_r+0x1a>
 8015f88:	6023      	str	r3, [r4, #0]
 8015f8a:	bd38      	pop	{r3, r4, r5, pc}
 8015f8c:	2000a428 	.word	0x2000a428

08015f90 <quorem>:
 8015f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f94:	6903      	ldr	r3, [r0, #16]
 8015f96:	690c      	ldr	r4, [r1, #16]
 8015f98:	42a3      	cmp	r3, r4
 8015f9a:	4607      	mov	r7, r0
 8015f9c:	f2c0 8081 	blt.w	80160a2 <quorem+0x112>
 8015fa0:	3c01      	subs	r4, #1
 8015fa2:	f101 0814 	add.w	r8, r1, #20
 8015fa6:	f100 0514 	add.w	r5, r0, #20
 8015faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015fae:	9301      	str	r3, [sp, #4]
 8015fb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015fb8:	3301      	adds	r3, #1
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015fc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8015fc8:	d331      	bcc.n	801602e <quorem+0x9e>
 8015fca:	f04f 0e00 	mov.w	lr, #0
 8015fce:	4640      	mov	r0, r8
 8015fd0:	46ac      	mov	ip, r5
 8015fd2:	46f2      	mov	sl, lr
 8015fd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8015fd8:	b293      	uxth	r3, r2
 8015fda:	fb06 e303 	mla	r3, r6, r3, lr
 8015fde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8015fe8:	f8dc a000 	ldr.w	sl, [ip]
 8015fec:	0c12      	lsrs	r2, r2, #16
 8015fee:	fa13 f38a 	uxtah	r3, r3, sl
 8015ff2:	fb06 e202 	mla	r2, r6, r2, lr
 8015ff6:	9300      	str	r3, [sp, #0]
 8015ff8:	9b00      	ldr	r3, [sp, #0]
 8015ffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ffe:	b292      	uxth	r2, r2
 8016000:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016008:	f8bd 3000 	ldrh.w	r3, [sp]
 801600c:	4581      	cmp	r9, r0
 801600e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016012:	f84c 3b04 	str.w	r3, [ip], #4
 8016016:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801601a:	d2db      	bcs.n	8015fd4 <quorem+0x44>
 801601c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016020:	b92b      	cbnz	r3, 801602e <quorem+0x9e>
 8016022:	9b01      	ldr	r3, [sp, #4]
 8016024:	3b04      	subs	r3, #4
 8016026:	429d      	cmp	r5, r3
 8016028:	461a      	mov	r2, r3
 801602a:	d32e      	bcc.n	801608a <quorem+0xfa>
 801602c:	613c      	str	r4, [r7, #16]
 801602e:	4638      	mov	r0, r7
 8016030:	f001 f98e 	bl	8017350 <__mcmp>
 8016034:	2800      	cmp	r0, #0
 8016036:	db24      	blt.n	8016082 <quorem+0xf2>
 8016038:	3601      	adds	r6, #1
 801603a:	4628      	mov	r0, r5
 801603c:	f04f 0c00 	mov.w	ip, #0
 8016040:	f858 2b04 	ldr.w	r2, [r8], #4
 8016044:	f8d0 e000 	ldr.w	lr, [r0]
 8016048:	b293      	uxth	r3, r2
 801604a:	ebac 0303 	sub.w	r3, ip, r3
 801604e:	0c12      	lsrs	r2, r2, #16
 8016050:	fa13 f38e 	uxtah	r3, r3, lr
 8016054:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801605c:	b29b      	uxth	r3, r3
 801605e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016062:	45c1      	cmp	r9, r8
 8016064:	f840 3b04 	str.w	r3, [r0], #4
 8016068:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801606c:	d2e8      	bcs.n	8016040 <quorem+0xb0>
 801606e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016076:	b922      	cbnz	r2, 8016082 <quorem+0xf2>
 8016078:	3b04      	subs	r3, #4
 801607a:	429d      	cmp	r5, r3
 801607c:	461a      	mov	r2, r3
 801607e:	d30a      	bcc.n	8016096 <quorem+0x106>
 8016080:	613c      	str	r4, [r7, #16]
 8016082:	4630      	mov	r0, r6
 8016084:	b003      	add	sp, #12
 8016086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801608a:	6812      	ldr	r2, [r2, #0]
 801608c:	3b04      	subs	r3, #4
 801608e:	2a00      	cmp	r2, #0
 8016090:	d1cc      	bne.n	801602c <quorem+0x9c>
 8016092:	3c01      	subs	r4, #1
 8016094:	e7c7      	b.n	8016026 <quorem+0x96>
 8016096:	6812      	ldr	r2, [r2, #0]
 8016098:	3b04      	subs	r3, #4
 801609a:	2a00      	cmp	r2, #0
 801609c:	d1f0      	bne.n	8016080 <quorem+0xf0>
 801609e:	3c01      	subs	r4, #1
 80160a0:	e7eb      	b.n	801607a <quorem+0xea>
 80160a2:	2000      	movs	r0, #0
 80160a4:	e7ee      	b.n	8016084 <quorem+0xf4>
	...

080160a8 <_dtoa_r>:
 80160a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ac:	ed2d 8b04 	vpush	{d8-d9}
 80160b0:	ec57 6b10 	vmov	r6, r7, d0
 80160b4:	b093      	sub	sp, #76	; 0x4c
 80160b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80160b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80160bc:	9106      	str	r1, [sp, #24]
 80160be:	ee10 aa10 	vmov	sl, s0
 80160c2:	4604      	mov	r4, r0
 80160c4:	9209      	str	r2, [sp, #36]	; 0x24
 80160c6:	930c      	str	r3, [sp, #48]	; 0x30
 80160c8:	46bb      	mov	fp, r7
 80160ca:	b975      	cbnz	r5, 80160ea <_dtoa_r+0x42>
 80160cc:	2010      	movs	r0, #16
 80160ce:	f7ff f869 	bl	80151a4 <malloc>
 80160d2:	4602      	mov	r2, r0
 80160d4:	6260      	str	r0, [r4, #36]	; 0x24
 80160d6:	b920      	cbnz	r0, 80160e2 <_dtoa_r+0x3a>
 80160d8:	4ba7      	ldr	r3, [pc, #668]	; (8016378 <_dtoa_r+0x2d0>)
 80160da:	21ea      	movs	r1, #234	; 0xea
 80160dc:	48a7      	ldr	r0, [pc, #668]	; (801637c <_dtoa_r+0x2d4>)
 80160de:	f001 fa61 	bl	80175a4 <__assert_func>
 80160e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80160e6:	6005      	str	r5, [r0, #0]
 80160e8:	60c5      	str	r5, [r0, #12]
 80160ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160ec:	6819      	ldr	r1, [r3, #0]
 80160ee:	b151      	cbz	r1, 8016106 <_dtoa_r+0x5e>
 80160f0:	685a      	ldr	r2, [r3, #4]
 80160f2:	604a      	str	r2, [r1, #4]
 80160f4:	2301      	movs	r3, #1
 80160f6:	4093      	lsls	r3, r2
 80160f8:	608b      	str	r3, [r1, #8]
 80160fa:	4620      	mov	r0, r4
 80160fc:	f000 fee6 	bl	8016ecc <_Bfree>
 8016100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016102:	2200      	movs	r2, #0
 8016104:	601a      	str	r2, [r3, #0]
 8016106:	1e3b      	subs	r3, r7, #0
 8016108:	bfaa      	itet	ge
 801610a:	2300      	movge	r3, #0
 801610c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016110:	f8c8 3000 	strge.w	r3, [r8]
 8016114:	4b9a      	ldr	r3, [pc, #616]	; (8016380 <_dtoa_r+0x2d8>)
 8016116:	bfbc      	itt	lt
 8016118:	2201      	movlt	r2, #1
 801611a:	f8c8 2000 	strlt.w	r2, [r8]
 801611e:	ea33 030b 	bics.w	r3, r3, fp
 8016122:	d11b      	bne.n	801615c <_dtoa_r+0xb4>
 8016124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016126:	f242 730f 	movw	r3, #9999	; 0x270f
 801612a:	6013      	str	r3, [r2, #0]
 801612c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016130:	4333      	orrs	r3, r6
 8016132:	f000 8592 	beq.w	8016c5a <_dtoa_r+0xbb2>
 8016136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016138:	b963      	cbnz	r3, 8016154 <_dtoa_r+0xac>
 801613a:	4b92      	ldr	r3, [pc, #584]	; (8016384 <_dtoa_r+0x2dc>)
 801613c:	e022      	b.n	8016184 <_dtoa_r+0xdc>
 801613e:	4b92      	ldr	r3, [pc, #584]	; (8016388 <_dtoa_r+0x2e0>)
 8016140:	9301      	str	r3, [sp, #4]
 8016142:	3308      	adds	r3, #8
 8016144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016146:	6013      	str	r3, [r2, #0]
 8016148:	9801      	ldr	r0, [sp, #4]
 801614a:	b013      	add	sp, #76	; 0x4c
 801614c:	ecbd 8b04 	vpop	{d8-d9}
 8016150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016154:	4b8b      	ldr	r3, [pc, #556]	; (8016384 <_dtoa_r+0x2dc>)
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	3303      	adds	r3, #3
 801615a:	e7f3      	b.n	8016144 <_dtoa_r+0x9c>
 801615c:	2200      	movs	r2, #0
 801615e:	2300      	movs	r3, #0
 8016160:	4650      	mov	r0, sl
 8016162:	4659      	mov	r1, fp
 8016164:	f7ea fcb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8016168:	ec4b ab19 	vmov	d9, sl, fp
 801616c:	4680      	mov	r8, r0
 801616e:	b158      	cbz	r0, 8016188 <_dtoa_r+0xe0>
 8016170:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016172:	2301      	movs	r3, #1
 8016174:	6013      	str	r3, [r2, #0]
 8016176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016178:	2b00      	cmp	r3, #0
 801617a:	f000 856b 	beq.w	8016c54 <_dtoa_r+0xbac>
 801617e:	4883      	ldr	r0, [pc, #524]	; (801638c <_dtoa_r+0x2e4>)
 8016180:	6018      	str	r0, [r3, #0]
 8016182:	1e43      	subs	r3, r0, #1
 8016184:	9301      	str	r3, [sp, #4]
 8016186:	e7df      	b.n	8016148 <_dtoa_r+0xa0>
 8016188:	ec4b ab10 	vmov	d0, sl, fp
 801618c:	aa10      	add	r2, sp, #64	; 0x40
 801618e:	a911      	add	r1, sp, #68	; 0x44
 8016190:	4620      	mov	r0, r4
 8016192:	f001 f983 	bl	801749c <__d2b>
 8016196:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801619a:	ee08 0a10 	vmov	s16, r0
 801619e:	2d00      	cmp	r5, #0
 80161a0:	f000 8084 	beq.w	80162ac <_dtoa_r+0x204>
 80161a4:	ee19 3a90 	vmov	r3, s19
 80161a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80161ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80161b0:	4656      	mov	r6, sl
 80161b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80161b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80161ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80161be:	4b74      	ldr	r3, [pc, #464]	; (8016390 <_dtoa_r+0x2e8>)
 80161c0:	2200      	movs	r2, #0
 80161c2:	4630      	mov	r0, r6
 80161c4:	4639      	mov	r1, r7
 80161c6:	f7ea f85f 	bl	8000288 <__aeabi_dsub>
 80161ca:	a365      	add	r3, pc, #404	; (adr r3, 8016360 <_dtoa_r+0x2b8>)
 80161cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d0:	f7ea fa12 	bl	80005f8 <__aeabi_dmul>
 80161d4:	a364      	add	r3, pc, #400	; (adr r3, 8016368 <_dtoa_r+0x2c0>)
 80161d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161da:	f7ea f857 	bl	800028c <__adddf3>
 80161de:	4606      	mov	r6, r0
 80161e0:	4628      	mov	r0, r5
 80161e2:	460f      	mov	r7, r1
 80161e4:	f7ea f99e 	bl	8000524 <__aeabi_i2d>
 80161e8:	a361      	add	r3, pc, #388	; (adr r3, 8016370 <_dtoa_r+0x2c8>)
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	f7ea fa03 	bl	80005f8 <__aeabi_dmul>
 80161f2:	4602      	mov	r2, r0
 80161f4:	460b      	mov	r3, r1
 80161f6:	4630      	mov	r0, r6
 80161f8:	4639      	mov	r1, r7
 80161fa:	f7ea f847 	bl	800028c <__adddf3>
 80161fe:	4606      	mov	r6, r0
 8016200:	460f      	mov	r7, r1
 8016202:	f7ea fca9 	bl	8000b58 <__aeabi_d2iz>
 8016206:	2200      	movs	r2, #0
 8016208:	9000      	str	r0, [sp, #0]
 801620a:	2300      	movs	r3, #0
 801620c:	4630      	mov	r0, r6
 801620e:	4639      	mov	r1, r7
 8016210:	f7ea fc64 	bl	8000adc <__aeabi_dcmplt>
 8016214:	b150      	cbz	r0, 801622c <_dtoa_r+0x184>
 8016216:	9800      	ldr	r0, [sp, #0]
 8016218:	f7ea f984 	bl	8000524 <__aeabi_i2d>
 801621c:	4632      	mov	r2, r6
 801621e:	463b      	mov	r3, r7
 8016220:	f7ea fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 8016224:	b910      	cbnz	r0, 801622c <_dtoa_r+0x184>
 8016226:	9b00      	ldr	r3, [sp, #0]
 8016228:	3b01      	subs	r3, #1
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	9b00      	ldr	r3, [sp, #0]
 801622e:	2b16      	cmp	r3, #22
 8016230:	d85a      	bhi.n	80162e8 <_dtoa_r+0x240>
 8016232:	9a00      	ldr	r2, [sp, #0]
 8016234:	4b57      	ldr	r3, [pc, #348]	; (8016394 <_dtoa_r+0x2ec>)
 8016236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623e:	ec51 0b19 	vmov	r0, r1, d9
 8016242:	f7ea fc4b 	bl	8000adc <__aeabi_dcmplt>
 8016246:	2800      	cmp	r0, #0
 8016248:	d050      	beq.n	80162ec <_dtoa_r+0x244>
 801624a:	9b00      	ldr	r3, [sp, #0]
 801624c:	3b01      	subs	r3, #1
 801624e:	9300      	str	r3, [sp, #0]
 8016250:	2300      	movs	r3, #0
 8016252:	930b      	str	r3, [sp, #44]	; 0x2c
 8016254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016256:	1b5d      	subs	r5, r3, r5
 8016258:	1e6b      	subs	r3, r5, #1
 801625a:	9305      	str	r3, [sp, #20]
 801625c:	bf45      	ittet	mi
 801625e:	f1c5 0301 	rsbmi	r3, r5, #1
 8016262:	9304      	strmi	r3, [sp, #16]
 8016264:	2300      	movpl	r3, #0
 8016266:	2300      	movmi	r3, #0
 8016268:	bf4c      	ite	mi
 801626a:	9305      	strmi	r3, [sp, #20]
 801626c:	9304      	strpl	r3, [sp, #16]
 801626e:	9b00      	ldr	r3, [sp, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	db3d      	blt.n	80162f0 <_dtoa_r+0x248>
 8016274:	9b05      	ldr	r3, [sp, #20]
 8016276:	9a00      	ldr	r2, [sp, #0]
 8016278:	920a      	str	r2, [sp, #40]	; 0x28
 801627a:	4413      	add	r3, r2
 801627c:	9305      	str	r3, [sp, #20]
 801627e:	2300      	movs	r3, #0
 8016280:	9307      	str	r3, [sp, #28]
 8016282:	9b06      	ldr	r3, [sp, #24]
 8016284:	2b09      	cmp	r3, #9
 8016286:	f200 8089 	bhi.w	801639c <_dtoa_r+0x2f4>
 801628a:	2b05      	cmp	r3, #5
 801628c:	bfc4      	itt	gt
 801628e:	3b04      	subgt	r3, #4
 8016290:	9306      	strgt	r3, [sp, #24]
 8016292:	9b06      	ldr	r3, [sp, #24]
 8016294:	f1a3 0302 	sub.w	r3, r3, #2
 8016298:	bfcc      	ite	gt
 801629a:	2500      	movgt	r5, #0
 801629c:	2501      	movle	r5, #1
 801629e:	2b03      	cmp	r3, #3
 80162a0:	f200 8087 	bhi.w	80163b2 <_dtoa_r+0x30a>
 80162a4:	e8df f003 	tbb	[pc, r3]
 80162a8:	59383a2d 	.word	0x59383a2d
 80162ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80162b0:	441d      	add	r5, r3
 80162b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80162b6:	2b20      	cmp	r3, #32
 80162b8:	bfc1      	itttt	gt
 80162ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80162be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80162c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80162c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80162ca:	bfda      	itte	le
 80162cc:	f1c3 0320 	rsble	r3, r3, #32
 80162d0:	fa06 f003 	lslle.w	r0, r6, r3
 80162d4:	4318      	orrgt	r0, r3
 80162d6:	f7ea f915 	bl	8000504 <__aeabi_ui2d>
 80162da:	2301      	movs	r3, #1
 80162dc:	4606      	mov	r6, r0
 80162de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80162e2:	3d01      	subs	r5, #1
 80162e4:	930e      	str	r3, [sp, #56]	; 0x38
 80162e6:	e76a      	b.n	80161be <_dtoa_r+0x116>
 80162e8:	2301      	movs	r3, #1
 80162ea:	e7b2      	b.n	8016252 <_dtoa_r+0x1aa>
 80162ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80162ee:	e7b1      	b.n	8016254 <_dtoa_r+0x1ac>
 80162f0:	9b04      	ldr	r3, [sp, #16]
 80162f2:	9a00      	ldr	r2, [sp, #0]
 80162f4:	1a9b      	subs	r3, r3, r2
 80162f6:	9304      	str	r3, [sp, #16]
 80162f8:	4253      	negs	r3, r2
 80162fa:	9307      	str	r3, [sp, #28]
 80162fc:	2300      	movs	r3, #0
 80162fe:	930a      	str	r3, [sp, #40]	; 0x28
 8016300:	e7bf      	b.n	8016282 <_dtoa_r+0x1da>
 8016302:	2300      	movs	r3, #0
 8016304:	9308      	str	r3, [sp, #32]
 8016306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016308:	2b00      	cmp	r3, #0
 801630a:	dc55      	bgt.n	80163b8 <_dtoa_r+0x310>
 801630c:	2301      	movs	r3, #1
 801630e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016312:	461a      	mov	r2, r3
 8016314:	9209      	str	r2, [sp, #36]	; 0x24
 8016316:	e00c      	b.n	8016332 <_dtoa_r+0x28a>
 8016318:	2301      	movs	r3, #1
 801631a:	e7f3      	b.n	8016304 <_dtoa_r+0x25c>
 801631c:	2300      	movs	r3, #0
 801631e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016320:	9308      	str	r3, [sp, #32]
 8016322:	9b00      	ldr	r3, [sp, #0]
 8016324:	4413      	add	r3, r2
 8016326:	9302      	str	r3, [sp, #8]
 8016328:	3301      	adds	r3, #1
 801632a:	2b01      	cmp	r3, #1
 801632c:	9303      	str	r3, [sp, #12]
 801632e:	bfb8      	it	lt
 8016330:	2301      	movlt	r3, #1
 8016332:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016334:	2200      	movs	r2, #0
 8016336:	6042      	str	r2, [r0, #4]
 8016338:	2204      	movs	r2, #4
 801633a:	f102 0614 	add.w	r6, r2, #20
 801633e:	429e      	cmp	r6, r3
 8016340:	6841      	ldr	r1, [r0, #4]
 8016342:	d93d      	bls.n	80163c0 <_dtoa_r+0x318>
 8016344:	4620      	mov	r0, r4
 8016346:	f000 fd81 	bl	8016e4c <_Balloc>
 801634a:	9001      	str	r0, [sp, #4]
 801634c:	2800      	cmp	r0, #0
 801634e:	d13b      	bne.n	80163c8 <_dtoa_r+0x320>
 8016350:	4b11      	ldr	r3, [pc, #68]	; (8016398 <_dtoa_r+0x2f0>)
 8016352:	4602      	mov	r2, r0
 8016354:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016358:	e6c0      	b.n	80160dc <_dtoa_r+0x34>
 801635a:	2301      	movs	r3, #1
 801635c:	e7df      	b.n	801631e <_dtoa_r+0x276>
 801635e:	bf00      	nop
 8016360:	636f4361 	.word	0x636f4361
 8016364:	3fd287a7 	.word	0x3fd287a7
 8016368:	8b60c8b3 	.word	0x8b60c8b3
 801636c:	3fc68a28 	.word	0x3fc68a28
 8016370:	509f79fb 	.word	0x509f79fb
 8016374:	3fd34413 	.word	0x3fd34413
 8016378:	080183cd 	.word	0x080183cd
 801637c:	080183e4 	.word	0x080183e4
 8016380:	7ff00000 	.word	0x7ff00000
 8016384:	080183c9 	.word	0x080183c9
 8016388:	080183c0 	.word	0x080183c0
 801638c:	0801839d 	.word	0x0801839d
 8016390:	3ff80000 	.word	0x3ff80000
 8016394:	080184d8 	.word	0x080184d8
 8016398:	0801843f 	.word	0x0801843f
 801639c:	2501      	movs	r5, #1
 801639e:	2300      	movs	r3, #0
 80163a0:	9306      	str	r3, [sp, #24]
 80163a2:	9508      	str	r5, [sp, #32]
 80163a4:	f04f 33ff 	mov.w	r3, #4294967295
 80163a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80163ac:	2200      	movs	r2, #0
 80163ae:	2312      	movs	r3, #18
 80163b0:	e7b0      	b.n	8016314 <_dtoa_r+0x26c>
 80163b2:	2301      	movs	r3, #1
 80163b4:	9308      	str	r3, [sp, #32]
 80163b6:	e7f5      	b.n	80163a4 <_dtoa_r+0x2fc>
 80163b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80163be:	e7b8      	b.n	8016332 <_dtoa_r+0x28a>
 80163c0:	3101      	adds	r1, #1
 80163c2:	6041      	str	r1, [r0, #4]
 80163c4:	0052      	lsls	r2, r2, #1
 80163c6:	e7b8      	b.n	801633a <_dtoa_r+0x292>
 80163c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163ca:	9a01      	ldr	r2, [sp, #4]
 80163cc:	601a      	str	r2, [r3, #0]
 80163ce:	9b03      	ldr	r3, [sp, #12]
 80163d0:	2b0e      	cmp	r3, #14
 80163d2:	f200 809d 	bhi.w	8016510 <_dtoa_r+0x468>
 80163d6:	2d00      	cmp	r5, #0
 80163d8:	f000 809a 	beq.w	8016510 <_dtoa_r+0x468>
 80163dc:	9b00      	ldr	r3, [sp, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	dd32      	ble.n	8016448 <_dtoa_r+0x3a0>
 80163e2:	4ab7      	ldr	r2, [pc, #732]	; (80166c0 <_dtoa_r+0x618>)
 80163e4:	f003 030f 	and.w	r3, r3, #15
 80163e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80163ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80163f0:	9b00      	ldr	r3, [sp, #0]
 80163f2:	05d8      	lsls	r0, r3, #23
 80163f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80163f8:	d516      	bpl.n	8016428 <_dtoa_r+0x380>
 80163fa:	4bb2      	ldr	r3, [pc, #712]	; (80166c4 <_dtoa_r+0x61c>)
 80163fc:	ec51 0b19 	vmov	r0, r1, d9
 8016400:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016404:	f7ea fa22 	bl	800084c <__aeabi_ddiv>
 8016408:	f007 070f 	and.w	r7, r7, #15
 801640c:	4682      	mov	sl, r0
 801640e:	468b      	mov	fp, r1
 8016410:	2503      	movs	r5, #3
 8016412:	4eac      	ldr	r6, [pc, #688]	; (80166c4 <_dtoa_r+0x61c>)
 8016414:	b957      	cbnz	r7, 801642c <_dtoa_r+0x384>
 8016416:	4642      	mov	r2, r8
 8016418:	464b      	mov	r3, r9
 801641a:	4650      	mov	r0, sl
 801641c:	4659      	mov	r1, fp
 801641e:	f7ea fa15 	bl	800084c <__aeabi_ddiv>
 8016422:	4682      	mov	sl, r0
 8016424:	468b      	mov	fp, r1
 8016426:	e028      	b.n	801647a <_dtoa_r+0x3d2>
 8016428:	2502      	movs	r5, #2
 801642a:	e7f2      	b.n	8016412 <_dtoa_r+0x36a>
 801642c:	07f9      	lsls	r1, r7, #31
 801642e:	d508      	bpl.n	8016442 <_dtoa_r+0x39a>
 8016430:	4640      	mov	r0, r8
 8016432:	4649      	mov	r1, r9
 8016434:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016438:	f7ea f8de 	bl	80005f8 <__aeabi_dmul>
 801643c:	3501      	adds	r5, #1
 801643e:	4680      	mov	r8, r0
 8016440:	4689      	mov	r9, r1
 8016442:	107f      	asrs	r7, r7, #1
 8016444:	3608      	adds	r6, #8
 8016446:	e7e5      	b.n	8016414 <_dtoa_r+0x36c>
 8016448:	f000 809b 	beq.w	8016582 <_dtoa_r+0x4da>
 801644c:	9b00      	ldr	r3, [sp, #0]
 801644e:	4f9d      	ldr	r7, [pc, #628]	; (80166c4 <_dtoa_r+0x61c>)
 8016450:	425e      	negs	r6, r3
 8016452:	4b9b      	ldr	r3, [pc, #620]	; (80166c0 <_dtoa_r+0x618>)
 8016454:	f006 020f 	and.w	r2, r6, #15
 8016458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016460:	ec51 0b19 	vmov	r0, r1, d9
 8016464:	f7ea f8c8 	bl	80005f8 <__aeabi_dmul>
 8016468:	1136      	asrs	r6, r6, #4
 801646a:	4682      	mov	sl, r0
 801646c:	468b      	mov	fp, r1
 801646e:	2300      	movs	r3, #0
 8016470:	2502      	movs	r5, #2
 8016472:	2e00      	cmp	r6, #0
 8016474:	d17a      	bne.n	801656c <_dtoa_r+0x4c4>
 8016476:	2b00      	cmp	r3, #0
 8016478:	d1d3      	bne.n	8016422 <_dtoa_r+0x37a>
 801647a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801647c:	2b00      	cmp	r3, #0
 801647e:	f000 8082 	beq.w	8016586 <_dtoa_r+0x4de>
 8016482:	4b91      	ldr	r3, [pc, #580]	; (80166c8 <_dtoa_r+0x620>)
 8016484:	2200      	movs	r2, #0
 8016486:	4650      	mov	r0, sl
 8016488:	4659      	mov	r1, fp
 801648a:	f7ea fb27 	bl	8000adc <__aeabi_dcmplt>
 801648e:	2800      	cmp	r0, #0
 8016490:	d079      	beq.n	8016586 <_dtoa_r+0x4de>
 8016492:	9b03      	ldr	r3, [sp, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d076      	beq.n	8016586 <_dtoa_r+0x4de>
 8016498:	9b02      	ldr	r3, [sp, #8]
 801649a:	2b00      	cmp	r3, #0
 801649c:	dd36      	ble.n	801650c <_dtoa_r+0x464>
 801649e:	9b00      	ldr	r3, [sp, #0]
 80164a0:	4650      	mov	r0, sl
 80164a2:	4659      	mov	r1, fp
 80164a4:	1e5f      	subs	r7, r3, #1
 80164a6:	2200      	movs	r2, #0
 80164a8:	4b88      	ldr	r3, [pc, #544]	; (80166cc <_dtoa_r+0x624>)
 80164aa:	f7ea f8a5 	bl	80005f8 <__aeabi_dmul>
 80164ae:	9e02      	ldr	r6, [sp, #8]
 80164b0:	4682      	mov	sl, r0
 80164b2:	468b      	mov	fp, r1
 80164b4:	3501      	adds	r5, #1
 80164b6:	4628      	mov	r0, r5
 80164b8:	f7ea f834 	bl	8000524 <__aeabi_i2d>
 80164bc:	4652      	mov	r2, sl
 80164be:	465b      	mov	r3, fp
 80164c0:	f7ea f89a 	bl	80005f8 <__aeabi_dmul>
 80164c4:	4b82      	ldr	r3, [pc, #520]	; (80166d0 <_dtoa_r+0x628>)
 80164c6:	2200      	movs	r2, #0
 80164c8:	f7e9 fee0 	bl	800028c <__adddf3>
 80164cc:	46d0      	mov	r8, sl
 80164ce:	46d9      	mov	r9, fp
 80164d0:	4682      	mov	sl, r0
 80164d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80164d6:	2e00      	cmp	r6, #0
 80164d8:	d158      	bne.n	801658c <_dtoa_r+0x4e4>
 80164da:	4b7e      	ldr	r3, [pc, #504]	; (80166d4 <_dtoa_r+0x62c>)
 80164dc:	2200      	movs	r2, #0
 80164de:	4640      	mov	r0, r8
 80164e0:	4649      	mov	r1, r9
 80164e2:	f7e9 fed1 	bl	8000288 <__aeabi_dsub>
 80164e6:	4652      	mov	r2, sl
 80164e8:	465b      	mov	r3, fp
 80164ea:	4680      	mov	r8, r0
 80164ec:	4689      	mov	r9, r1
 80164ee:	f7ea fb13 	bl	8000b18 <__aeabi_dcmpgt>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	f040 8295 	bne.w	8016a22 <_dtoa_r+0x97a>
 80164f8:	4652      	mov	r2, sl
 80164fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80164fe:	4640      	mov	r0, r8
 8016500:	4649      	mov	r1, r9
 8016502:	f7ea faeb 	bl	8000adc <__aeabi_dcmplt>
 8016506:	2800      	cmp	r0, #0
 8016508:	f040 8289 	bne.w	8016a1e <_dtoa_r+0x976>
 801650c:	ec5b ab19 	vmov	sl, fp, d9
 8016510:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016512:	2b00      	cmp	r3, #0
 8016514:	f2c0 8148 	blt.w	80167a8 <_dtoa_r+0x700>
 8016518:	9a00      	ldr	r2, [sp, #0]
 801651a:	2a0e      	cmp	r2, #14
 801651c:	f300 8144 	bgt.w	80167a8 <_dtoa_r+0x700>
 8016520:	4b67      	ldr	r3, [pc, #412]	; (80166c0 <_dtoa_r+0x618>)
 8016522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016526:	e9d3 8900 	ldrd	r8, r9, [r3]
 801652a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801652c:	2b00      	cmp	r3, #0
 801652e:	f280 80d5 	bge.w	80166dc <_dtoa_r+0x634>
 8016532:	9b03      	ldr	r3, [sp, #12]
 8016534:	2b00      	cmp	r3, #0
 8016536:	f300 80d1 	bgt.w	80166dc <_dtoa_r+0x634>
 801653a:	f040 826f 	bne.w	8016a1c <_dtoa_r+0x974>
 801653e:	4b65      	ldr	r3, [pc, #404]	; (80166d4 <_dtoa_r+0x62c>)
 8016540:	2200      	movs	r2, #0
 8016542:	4640      	mov	r0, r8
 8016544:	4649      	mov	r1, r9
 8016546:	f7ea f857 	bl	80005f8 <__aeabi_dmul>
 801654a:	4652      	mov	r2, sl
 801654c:	465b      	mov	r3, fp
 801654e:	f7ea fad9 	bl	8000b04 <__aeabi_dcmpge>
 8016552:	9e03      	ldr	r6, [sp, #12]
 8016554:	4637      	mov	r7, r6
 8016556:	2800      	cmp	r0, #0
 8016558:	f040 8245 	bne.w	80169e6 <_dtoa_r+0x93e>
 801655c:	9d01      	ldr	r5, [sp, #4]
 801655e:	2331      	movs	r3, #49	; 0x31
 8016560:	f805 3b01 	strb.w	r3, [r5], #1
 8016564:	9b00      	ldr	r3, [sp, #0]
 8016566:	3301      	adds	r3, #1
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	e240      	b.n	80169ee <_dtoa_r+0x946>
 801656c:	07f2      	lsls	r2, r6, #31
 801656e:	d505      	bpl.n	801657c <_dtoa_r+0x4d4>
 8016570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016574:	f7ea f840 	bl	80005f8 <__aeabi_dmul>
 8016578:	3501      	adds	r5, #1
 801657a:	2301      	movs	r3, #1
 801657c:	1076      	asrs	r6, r6, #1
 801657e:	3708      	adds	r7, #8
 8016580:	e777      	b.n	8016472 <_dtoa_r+0x3ca>
 8016582:	2502      	movs	r5, #2
 8016584:	e779      	b.n	801647a <_dtoa_r+0x3d2>
 8016586:	9f00      	ldr	r7, [sp, #0]
 8016588:	9e03      	ldr	r6, [sp, #12]
 801658a:	e794      	b.n	80164b6 <_dtoa_r+0x40e>
 801658c:	9901      	ldr	r1, [sp, #4]
 801658e:	4b4c      	ldr	r3, [pc, #304]	; (80166c0 <_dtoa_r+0x618>)
 8016590:	4431      	add	r1, r6
 8016592:	910d      	str	r1, [sp, #52]	; 0x34
 8016594:	9908      	ldr	r1, [sp, #32]
 8016596:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801659a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801659e:	2900      	cmp	r1, #0
 80165a0:	d043      	beq.n	801662a <_dtoa_r+0x582>
 80165a2:	494d      	ldr	r1, [pc, #308]	; (80166d8 <_dtoa_r+0x630>)
 80165a4:	2000      	movs	r0, #0
 80165a6:	f7ea f951 	bl	800084c <__aeabi_ddiv>
 80165aa:	4652      	mov	r2, sl
 80165ac:	465b      	mov	r3, fp
 80165ae:	f7e9 fe6b 	bl	8000288 <__aeabi_dsub>
 80165b2:	9d01      	ldr	r5, [sp, #4]
 80165b4:	4682      	mov	sl, r0
 80165b6:	468b      	mov	fp, r1
 80165b8:	4649      	mov	r1, r9
 80165ba:	4640      	mov	r0, r8
 80165bc:	f7ea facc 	bl	8000b58 <__aeabi_d2iz>
 80165c0:	4606      	mov	r6, r0
 80165c2:	f7e9 ffaf 	bl	8000524 <__aeabi_i2d>
 80165c6:	4602      	mov	r2, r0
 80165c8:	460b      	mov	r3, r1
 80165ca:	4640      	mov	r0, r8
 80165cc:	4649      	mov	r1, r9
 80165ce:	f7e9 fe5b 	bl	8000288 <__aeabi_dsub>
 80165d2:	3630      	adds	r6, #48	; 0x30
 80165d4:	f805 6b01 	strb.w	r6, [r5], #1
 80165d8:	4652      	mov	r2, sl
 80165da:	465b      	mov	r3, fp
 80165dc:	4680      	mov	r8, r0
 80165de:	4689      	mov	r9, r1
 80165e0:	f7ea fa7c 	bl	8000adc <__aeabi_dcmplt>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d163      	bne.n	80166b0 <_dtoa_r+0x608>
 80165e8:	4642      	mov	r2, r8
 80165ea:	464b      	mov	r3, r9
 80165ec:	4936      	ldr	r1, [pc, #216]	; (80166c8 <_dtoa_r+0x620>)
 80165ee:	2000      	movs	r0, #0
 80165f0:	f7e9 fe4a 	bl	8000288 <__aeabi_dsub>
 80165f4:	4652      	mov	r2, sl
 80165f6:	465b      	mov	r3, fp
 80165f8:	f7ea fa70 	bl	8000adc <__aeabi_dcmplt>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	f040 80b5 	bne.w	801676c <_dtoa_r+0x6c4>
 8016602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016604:	429d      	cmp	r5, r3
 8016606:	d081      	beq.n	801650c <_dtoa_r+0x464>
 8016608:	4b30      	ldr	r3, [pc, #192]	; (80166cc <_dtoa_r+0x624>)
 801660a:	2200      	movs	r2, #0
 801660c:	4650      	mov	r0, sl
 801660e:	4659      	mov	r1, fp
 8016610:	f7e9 fff2 	bl	80005f8 <__aeabi_dmul>
 8016614:	4b2d      	ldr	r3, [pc, #180]	; (80166cc <_dtoa_r+0x624>)
 8016616:	4682      	mov	sl, r0
 8016618:	468b      	mov	fp, r1
 801661a:	4640      	mov	r0, r8
 801661c:	4649      	mov	r1, r9
 801661e:	2200      	movs	r2, #0
 8016620:	f7e9 ffea 	bl	80005f8 <__aeabi_dmul>
 8016624:	4680      	mov	r8, r0
 8016626:	4689      	mov	r9, r1
 8016628:	e7c6      	b.n	80165b8 <_dtoa_r+0x510>
 801662a:	4650      	mov	r0, sl
 801662c:	4659      	mov	r1, fp
 801662e:	f7e9 ffe3 	bl	80005f8 <__aeabi_dmul>
 8016632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016634:	9d01      	ldr	r5, [sp, #4]
 8016636:	930f      	str	r3, [sp, #60]	; 0x3c
 8016638:	4682      	mov	sl, r0
 801663a:	468b      	mov	fp, r1
 801663c:	4649      	mov	r1, r9
 801663e:	4640      	mov	r0, r8
 8016640:	f7ea fa8a 	bl	8000b58 <__aeabi_d2iz>
 8016644:	4606      	mov	r6, r0
 8016646:	f7e9 ff6d 	bl	8000524 <__aeabi_i2d>
 801664a:	3630      	adds	r6, #48	; 0x30
 801664c:	4602      	mov	r2, r0
 801664e:	460b      	mov	r3, r1
 8016650:	4640      	mov	r0, r8
 8016652:	4649      	mov	r1, r9
 8016654:	f7e9 fe18 	bl	8000288 <__aeabi_dsub>
 8016658:	f805 6b01 	strb.w	r6, [r5], #1
 801665c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801665e:	429d      	cmp	r5, r3
 8016660:	4680      	mov	r8, r0
 8016662:	4689      	mov	r9, r1
 8016664:	f04f 0200 	mov.w	r2, #0
 8016668:	d124      	bne.n	80166b4 <_dtoa_r+0x60c>
 801666a:	4b1b      	ldr	r3, [pc, #108]	; (80166d8 <_dtoa_r+0x630>)
 801666c:	4650      	mov	r0, sl
 801666e:	4659      	mov	r1, fp
 8016670:	f7e9 fe0c 	bl	800028c <__adddf3>
 8016674:	4602      	mov	r2, r0
 8016676:	460b      	mov	r3, r1
 8016678:	4640      	mov	r0, r8
 801667a:	4649      	mov	r1, r9
 801667c:	f7ea fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8016680:	2800      	cmp	r0, #0
 8016682:	d173      	bne.n	801676c <_dtoa_r+0x6c4>
 8016684:	4652      	mov	r2, sl
 8016686:	465b      	mov	r3, fp
 8016688:	4913      	ldr	r1, [pc, #76]	; (80166d8 <_dtoa_r+0x630>)
 801668a:	2000      	movs	r0, #0
 801668c:	f7e9 fdfc 	bl	8000288 <__aeabi_dsub>
 8016690:	4602      	mov	r2, r0
 8016692:	460b      	mov	r3, r1
 8016694:	4640      	mov	r0, r8
 8016696:	4649      	mov	r1, r9
 8016698:	f7ea fa20 	bl	8000adc <__aeabi_dcmplt>
 801669c:	2800      	cmp	r0, #0
 801669e:	f43f af35 	beq.w	801650c <_dtoa_r+0x464>
 80166a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80166a4:	1e6b      	subs	r3, r5, #1
 80166a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80166a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80166ac:	2b30      	cmp	r3, #48	; 0x30
 80166ae:	d0f8      	beq.n	80166a2 <_dtoa_r+0x5fa>
 80166b0:	9700      	str	r7, [sp, #0]
 80166b2:	e049      	b.n	8016748 <_dtoa_r+0x6a0>
 80166b4:	4b05      	ldr	r3, [pc, #20]	; (80166cc <_dtoa_r+0x624>)
 80166b6:	f7e9 ff9f 	bl	80005f8 <__aeabi_dmul>
 80166ba:	4680      	mov	r8, r0
 80166bc:	4689      	mov	r9, r1
 80166be:	e7bd      	b.n	801663c <_dtoa_r+0x594>
 80166c0:	080184d8 	.word	0x080184d8
 80166c4:	080184b0 	.word	0x080184b0
 80166c8:	3ff00000 	.word	0x3ff00000
 80166cc:	40240000 	.word	0x40240000
 80166d0:	401c0000 	.word	0x401c0000
 80166d4:	40140000 	.word	0x40140000
 80166d8:	3fe00000 	.word	0x3fe00000
 80166dc:	9d01      	ldr	r5, [sp, #4]
 80166de:	4656      	mov	r6, sl
 80166e0:	465f      	mov	r7, fp
 80166e2:	4642      	mov	r2, r8
 80166e4:	464b      	mov	r3, r9
 80166e6:	4630      	mov	r0, r6
 80166e8:	4639      	mov	r1, r7
 80166ea:	f7ea f8af 	bl	800084c <__aeabi_ddiv>
 80166ee:	f7ea fa33 	bl	8000b58 <__aeabi_d2iz>
 80166f2:	4682      	mov	sl, r0
 80166f4:	f7e9 ff16 	bl	8000524 <__aeabi_i2d>
 80166f8:	4642      	mov	r2, r8
 80166fa:	464b      	mov	r3, r9
 80166fc:	f7e9 ff7c 	bl	80005f8 <__aeabi_dmul>
 8016700:	4602      	mov	r2, r0
 8016702:	460b      	mov	r3, r1
 8016704:	4630      	mov	r0, r6
 8016706:	4639      	mov	r1, r7
 8016708:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801670c:	f7e9 fdbc 	bl	8000288 <__aeabi_dsub>
 8016710:	f805 6b01 	strb.w	r6, [r5], #1
 8016714:	9e01      	ldr	r6, [sp, #4]
 8016716:	9f03      	ldr	r7, [sp, #12]
 8016718:	1bae      	subs	r6, r5, r6
 801671a:	42b7      	cmp	r7, r6
 801671c:	4602      	mov	r2, r0
 801671e:	460b      	mov	r3, r1
 8016720:	d135      	bne.n	801678e <_dtoa_r+0x6e6>
 8016722:	f7e9 fdb3 	bl	800028c <__adddf3>
 8016726:	4642      	mov	r2, r8
 8016728:	464b      	mov	r3, r9
 801672a:	4606      	mov	r6, r0
 801672c:	460f      	mov	r7, r1
 801672e:	f7ea f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 8016732:	b9d0      	cbnz	r0, 801676a <_dtoa_r+0x6c2>
 8016734:	4642      	mov	r2, r8
 8016736:	464b      	mov	r3, r9
 8016738:	4630      	mov	r0, r6
 801673a:	4639      	mov	r1, r7
 801673c:	f7ea f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016740:	b110      	cbz	r0, 8016748 <_dtoa_r+0x6a0>
 8016742:	f01a 0f01 	tst.w	sl, #1
 8016746:	d110      	bne.n	801676a <_dtoa_r+0x6c2>
 8016748:	4620      	mov	r0, r4
 801674a:	ee18 1a10 	vmov	r1, s16
 801674e:	f000 fbbd 	bl	8016ecc <_Bfree>
 8016752:	2300      	movs	r3, #0
 8016754:	9800      	ldr	r0, [sp, #0]
 8016756:	702b      	strb	r3, [r5, #0]
 8016758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801675a:	3001      	adds	r0, #1
 801675c:	6018      	str	r0, [r3, #0]
 801675e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016760:	2b00      	cmp	r3, #0
 8016762:	f43f acf1 	beq.w	8016148 <_dtoa_r+0xa0>
 8016766:	601d      	str	r5, [r3, #0]
 8016768:	e4ee      	b.n	8016148 <_dtoa_r+0xa0>
 801676a:	9f00      	ldr	r7, [sp, #0]
 801676c:	462b      	mov	r3, r5
 801676e:	461d      	mov	r5, r3
 8016770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016774:	2a39      	cmp	r2, #57	; 0x39
 8016776:	d106      	bne.n	8016786 <_dtoa_r+0x6de>
 8016778:	9a01      	ldr	r2, [sp, #4]
 801677a:	429a      	cmp	r2, r3
 801677c:	d1f7      	bne.n	801676e <_dtoa_r+0x6c6>
 801677e:	9901      	ldr	r1, [sp, #4]
 8016780:	2230      	movs	r2, #48	; 0x30
 8016782:	3701      	adds	r7, #1
 8016784:	700a      	strb	r2, [r1, #0]
 8016786:	781a      	ldrb	r2, [r3, #0]
 8016788:	3201      	adds	r2, #1
 801678a:	701a      	strb	r2, [r3, #0]
 801678c:	e790      	b.n	80166b0 <_dtoa_r+0x608>
 801678e:	4ba6      	ldr	r3, [pc, #664]	; (8016a28 <_dtoa_r+0x980>)
 8016790:	2200      	movs	r2, #0
 8016792:	f7e9 ff31 	bl	80005f8 <__aeabi_dmul>
 8016796:	2200      	movs	r2, #0
 8016798:	2300      	movs	r3, #0
 801679a:	4606      	mov	r6, r0
 801679c:	460f      	mov	r7, r1
 801679e:	f7ea f993 	bl	8000ac8 <__aeabi_dcmpeq>
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d09d      	beq.n	80166e2 <_dtoa_r+0x63a>
 80167a6:	e7cf      	b.n	8016748 <_dtoa_r+0x6a0>
 80167a8:	9a08      	ldr	r2, [sp, #32]
 80167aa:	2a00      	cmp	r2, #0
 80167ac:	f000 80d7 	beq.w	801695e <_dtoa_r+0x8b6>
 80167b0:	9a06      	ldr	r2, [sp, #24]
 80167b2:	2a01      	cmp	r2, #1
 80167b4:	f300 80ba 	bgt.w	801692c <_dtoa_r+0x884>
 80167b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80167ba:	2a00      	cmp	r2, #0
 80167bc:	f000 80b2 	beq.w	8016924 <_dtoa_r+0x87c>
 80167c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80167c4:	9e07      	ldr	r6, [sp, #28]
 80167c6:	9d04      	ldr	r5, [sp, #16]
 80167c8:	9a04      	ldr	r2, [sp, #16]
 80167ca:	441a      	add	r2, r3
 80167cc:	9204      	str	r2, [sp, #16]
 80167ce:	9a05      	ldr	r2, [sp, #20]
 80167d0:	2101      	movs	r1, #1
 80167d2:	441a      	add	r2, r3
 80167d4:	4620      	mov	r0, r4
 80167d6:	9205      	str	r2, [sp, #20]
 80167d8:	f000 fc30 	bl	801703c <__i2b>
 80167dc:	4607      	mov	r7, r0
 80167de:	2d00      	cmp	r5, #0
 80167e0:	dd0c      	ble.n	80167fc <_dtoa_r+0x754>
 80167e2:	9b05      	ldr	r3, [sp, #20]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	dd09      	ble.n	80167fc <_dtoa_r+0x754>
 80167e8:	42ab      	cmp	r3, r5
 80167ea:	9a04      	ldr	r2, [sp, #16]
 80167ec:	bfa8      	it	ge
 80167ee:	462b      	movge	r3, r5
 80167f0:	1ad2      	subs	r2, r2, r3
 80167f2:	9204      	str	r2, [sp, #16]
 80167f4:	9a05      	ldr	r2, [sp, #20]
 80167f6:	1aed      	subs	r5, r5, r3
 80167f8:	1ad3      	subs	r3, r2, r3
 80167fa:	9305      	str	r3, [sp, #20]
 80167fc:	9b07      	ldr	r3, [sp, #28]
 80167fe:	b31b      	cbz	r3, 8016848 <_dtoa_r+0x7a0>
 8016800:	9b08      	ldr	r3, [sp, #32]
 8016802:	2b00      	cmp	r3, #0
 8016804:	f000 80af 	beq.w	8016966 <_dtoa_r+0x8be>
 8016808:	2e00      	cmp	r6, #0
 801680a:	dd13      	ble.n	8016834 <_dtoa_r+0x78c>
 801680c:	4639      	mov	r1, r7
 801680e:	4632      	mov	r2, r6
 8016810:	4620      	mov	r0, r4
 8016812:	f000 fcd3 	bl	80171bc <__pow5mult>
 8016816:	ee18 2a10 	vmov	r2, s16
 801681a:	4601      	mov	r1, r0
 801681c:	4607      	mov	r7, r0
 801681e:	4620      	mov	r0, r4
 8016820:	f000 fc22 	bl	8017068 <__multiply>
 8016824:	ee18 1a10 	vmov	r1, s16
 8016828:	4680      	mov	r8, r0
 801682a:	4620      	mov	r0, r4
 801682c:	f000 fb4e 	bl	8016ecc <_Bfree>
 8016830:	ee08 8a10 	vmov	s16, r8
 8016834:	9b07      	ldr	r3, [sp, #28]
 8016836:	1b9a      	subs	r2, r3, r6
 8016838:	d006      	beq.n	8016848 <_dtoa_r+0x7a0>
 801683a:	ee18 1a10 	vmov	r1, s16
 801683e:	4620      	mov	r0, r4
 8016840:	f000 fcbc 	bl	80171bc <__pow5mult>
 8016844:	ee08 0a10 	vmov	s16, r0
 8016848:	2101      	movs	r1, #1
 801684a:	4620      	mov	r0, r4
 801684c:	f000 fbf6 	bl	801703c <__i2b>
 8016850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016852:	2b00      	cmp	r3, #0
 8016854:	4606      	mov	r6, r0
 8016856:	f340 8088 	ble.w	801696a <_dtoa_r+0x8c2>
 801685a:	461a      	mov	r2, r3
 801685c:	4601      	mov	r1, r0
 801685e:	4620      	mov	r0, r4
 8016860:	f000 fcac 	bl	80171bc <__pow5mult>
 8016864:	9b06      	ldr	r3, [sp, #24]
 8016866:	2b01      	cmp	r3, #1
 8016868:	4606      	mov	r6, r0
 801686a:	f340 8081 	ble.w	8016970 <_dtoa_r+0x8c8>
 801686e:	f04f 0800 	mov.w	r8, #0
 8016872:	6933      	ldr	r3, [r6, #16]
 8016874:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016878:	6918      	ldr	r0, [r3, #16]
 801687a:	f000 fb8f 	bl	8016f9c <__hi0bits>
 801687e:	f1c0 0020 	rsb	r0, r0, #32
 8016882:	9b05      	ldr	r3, [sp, #20]
 8016884:	4418      	add	r0, r3
 8016886:	f010 001f 	ands.w	r0, r0, #31
 801688a:	f000 8092 	beq.w	80169b2 <_dtoa_r+0x90a>
 801688e:	f1c0 0320 	rsb	r3, r0, #32
 8016892:	2b04      	cmp	r3, #4
 8016894:	f340 808a 	ble.w	80169ac <_dtoa_r+0x904>
 8016898:	f1c0 001c 	rsb	r0, r0, #28
 801689c:	9b04      	ldr	r3, [sp, #16]
 801689e:	4403      	add	r3, r0
 80168a0:	9304      	str	r3, [sp, #16]
 80168a2:	9b05      	ldr	r3, [sp, #20]
 80168a4:	4403      	add	r3, r0
 80168a6:	4405      	add	r5, r0
 80168a8:	9305      	str	r3, [sp, #20]
 80168aa:	9b04      	ldr	r3, [sp, #16]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	dd07      	ble.n	80168c0 <_dtoa_r+0x818>
 80168b0:	ee18 1a10 	vmov	r1, s16
 80168b4:	461a      	mov	r2, r3
 80168b6:	4620      	mov	r0, r4
 80168b8:	f000 fcda 	bl	8017270 <__lshift>
 80168bc:	ee08 0a10 	vmov	s16, r0
 80168c0:	9b05      	ldr	r3, [sp, #20]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	dd05      	ble.n	80168d2 <_dtoa_r+0x82a>
 80168c6:	4631      	mov	r1, r6
 80168c8:	461a      	mov	r2, r3
 80168ca:	4620      	mov	r0, r4
 80168cc:	f000 fcd0 	bl	8017270 <__lshift>
 80168d0:	4606      	mov	r6, r0
 80168d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d06e      	beq.n	80169b6 <_dtoa_r+0x90e>
 80168d8:	ee18 0a10 	vmov	r0, s16
 80168dc:	4631      	mov	r1, r6
 80168de:	f000 fd37 	bl	8017350 <__mcmp>
 80168e2:	2800      	cmp	r0, #0
 80168e4:	da67      	bge.n	80169b6 <_dtoa_r+0x90e>
 80168e6:	9b00      	ldr	r3, [sp, #0]
 80168e8:	3b01      	subs	r3, #1
 80168ea:	ee18 1a10 	vmov	r1, s16
 80168ee:	9300      	str	r3, [sp, #0]
 80168f0:	220a      	movs	r2, #10
 80168f2:	2300      	movs	r3, #0
 80168f4:	4620      	mov	r0, r4
 80168f6:	f000 fb0b 	bl	8016f10 <__multadd>
 80168fa:	9b08      	ldr	r3, [sp, #32]
 80168fc:	ee08 0a10 	vmov	s16, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	f000 81b1 	beq.w	8016c68 <_dtoa_r+0xbc0>
 8016906:	2300      	movs	r3, #0
 8016908:	4639      	mov	r1, r7
 801690a:	220a      	movs	r2, #10
 801690c:	4620      	mov	r0, r4
 801690e:	f000 faff 	bl	8016f10 <__multadd>
 8016912:	9b02      	ldr	r3, [sp, #8]
 8016914:	2b00      	cmp	r3, #0
 8016916:	4607      	mov	r7, r0
 8016918:	f300 808e 	bgt.w	8016a38 <_dtoa_r+0x990>
 801691c:	9b06      	ldr	r3, [sp, #24]
 801691e:	2b02      	cmp	r3, #2
 8016920:	dc51      	bgt.n	80169c6 <_dtoa_r+0x91e>
 8016922:	e089      	b.n	8016a38 <_dtoa_r+0x990>
 8016924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801692a:	e74b      	b.n	80167c4 <_dtoa_r+0x71c>
 801692c:	9b03      	ldr	r3, [sp, #12]
 801692e:	1e5e      	subs	r6, r3, #1
 8016930:	9b07      	ldr	r3, [sp, #28]
 8016932:	42b3      	cmp	r3, r6
 8016934:	bfbf      	itttt	lt
 8016936:	9b07      	ldrlt	r3, [sp, #28]
 8016938:	9607      	strlt	r6, [sp, #28]
 801693a:	1af2      	sublt	r2, r6, r3
 801693c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801693e:	bfb6      	itet	lt
 8016940:	189b      	addlt	r3, r3, r2
 8016942:	1b9e      	subge	r6, r3, r6
 8016944:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016946:	9b03      	ldr	r3, [sp, #12]
 8016948:	bfb8      	it	lt
 801694a:	2600      	movlt	r6, #0
 801694c:	2b00      	cmp	r3, #0
 801694e:	bfb7      	itett	lt
 8016950:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8016954:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8016958:	1a9d      	sublt	r5, r3, r2
 801695a:	2300      	movlt	r3, #0
 801695c:	e734      	b.n	80167c8 <_dtoa_r+0x720>
 801695e:	9e07      	ldr	r6, [sp, #28]
 8016960:	9d04      	ldr	r5, [sp, #16]
 8016962:	9f08      	ldr	r7, [sp, #32]
 8016964:	e73b      	b.n	80167de <_dtoa_r+0x736>
 8016966:	9a07      	ldr	r2, [sp, #28]
 8016968:	e767      	b.n	801683a <_dtoa_r+0x792>
 801696a:	9b06      	ldr	r3, [sp, #24]
 801696c:	2b01      	cmp	r3, #1
 801696e:	dc18      	bgt.n	80169a2 <_dtoa_r+0x8fa>
 8016970:	f1ba 0f00 	cmp.w	sl, #0
 8016974:	d115      	bne.n	80169a2 <_dtoa_r+0x8fa>
 8016976:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801697a:	b993      	cbnz	r3, 80169a2 <_dtoa_r+0x8fa>
 801697c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016980:	0d1b      	lsrs	r3, r3, #20
 8016982:	051b      	lsls	r3, r3, #20
 8016984:	b183      	cbz	r3, 80169a8 <_dtoa_r+0x900>
 8016986:	9b04      	ldr	r3, [sp, #16]
 8016988:	3301      	adds	r3, #1
 801698a:	9304      	str	r3, [sp, #16]
 801698c:	9b05      	ldr	r3, [sp, #20]
 801698e:	3301      	adds	r3, #1
 8016990:	9305      	str	r3, [sp, #20]
 8016992:	f04f 0801 	mov.w	r8, #1
 8016996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016998:	2b00      	cmp	r3, #0
 801699a:	f47f af6a 	bne.w	8016872 <_dtoa_r+0x7ca>
 801699e:	2001      	movs	r0, #1
 80169a0:	e76f      	b.n	8016882 <_dtoa_r+0x7da>
 80169a2:	f04f 0800 	mov.w	r8, #0
 80169a6:	e7f6      	b.n	8016996 <_dtoa_r+0x8ee>
 80169a8:	4698      	mov	r8, r3
 80169aa:	e7f4      	b.n	8016996 <_dtoa_r+0x8ee>
 80169ac:	f43f af7d 	beq.w	80168aa <_dtoa_r+0x802>
 80169b0:	4618      	mov	r0, r3
 80169b2:	301c      	adds	r0, #28
 80169b4:	e772      	b.n	801689c <_dtoa_r+0x7f4>
 80169b6:	9b03      	ldr	r3, [sp, #12]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	dc37      	bgt.n	8016a2c <_dtoa_r+0x984>
 80169bc:	9b06      	ldr	r3, [sp, #24]
 80169be:	2b02      	cmp	r3, #2
 80169c0:	dd34      	ble.n	8016a2c <_dtoa_r+0x984>
 80169c2:	9b03      	ldr	r3, [sp, #12]
 80169c4:	9302      	str	r3, [sp, #8]
 80169c6:	9b02      	ldr	r3, [sp, #8]
 80169c8:	b96b      	cbnz	r3, 80169e6 <_dtoa_r+0x93e>
 80169ca:	4631      	mov	r1, r6
 80169cc:	2205      	movs	r2, #5
 80169ce:	4620      	mov	r0, r4
 80169d0:	f000 fa9e 	bl	8016f10 <__multadd>
 80169d4:	4601      	mov	r1, r0
 80169d6:	4606      	mov	r6, r0
 80169d8:	ee18 0a10 	vmov	r0, s16
 80169dc:	f000 fcb8 	bl	8017350 <__mcmp>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	f73f adbb 	bgt.w	801655c <_dtoa_r+0x4b4>
 80169e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169e8:	9d01      	ldr	r5, [sp, #4]
 80169ea:	43db      	mvns	r3, r3
 80169ec:	9300      	str	r3, [sp, #0]
 80169ee:	f04f 0800 	mov.w	r8, #0
 80169f2:	4631      	mov	r1, r6
 80169f4:	4620      	mov	r0, r4
 80169f6:	f000 fa69 	bl	8016ecc <_Bfree>
 80169fa:	2f00      	cmp	r7, #0
 80169fc:	f43f aea4 	beq.w	8016748 <_dtoa_r+0x6a0>
 8016a00:	f1b8 0f00 	cmp.w	r8, #0
 8016a04:	d005      	beq.n	8016a12 <_dtoa_r+0x96a>
 8016a06:	45b8      	cmp	r8, r7
 8016a08:	d003      	beq.n	8016a12 <_dtoa_r+0x96a>
 8016a0a:	4641      	mov	r1, r8
 8016a0c:	4620      	mov	r0, r4
 8016a0e:	f000 fa5d 	bl	8016ecc <_Bfree>
 8016a12:	4639      	mov	r1, r7
 8016a14:	4620      	mov	r0, r4
 8016a16:	f000 fa59 	bl	8016ecc <_Bfree>
 8016a1a:	e695      	b.n	8016748 <_dtoa_r+0x6a0>
 8016a1c:	2600      	movs	r6, #0
 8016a1e:	4637      	mov	r7, r6
 8016a20:	e7e1      	b.n	80169e6 <_dtoa_r+0x93e>
 8016a22:	9700      	str	r7, [sp, #0]
 8016a24:	4637      	mov	r7, r6
 8016a26:	e599      	b.n	801655c <_dtoa_r+0x4b4>
 8016a28:	40240000 	.word	0x40240000
 8016a2c:	9b08      	ldr	r3, [sp, #32]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	f000 80ca 	beq.w	8016bc8 <_dtoa_r+0xb20>
 8016a34:	9b03      	ldr	r3, [sp, #12]
 8016a36:	9302      	str	r3, [sp, #8]
 8016a38:	2d00      	cmp	r5, #0
 8016a3a:	dd05      	ble.n	8016a48 <_dtoa_r+0x9a0>
 8016a3c:	4639      	mov	r1, r7
 8016a3e:	462a      	mov	r2, r5
 8016a40:	4620      	mov	r0, r4
 8016a42:	f000 fc15 	bl	8017270 <__lshift>
 8016a46:	4607      	mov	r7, r0
 8016a48:	f1b8 0f00 	cmp.w	r8, #0
 8016a4c:	d05b      	beq.n	8016b06 <_dtoa_r+0xa5e>
 8016a4e:	6879      	ldr	r1, [r7, #4]
 8016a50:	4620      	mov	r0, r4
 8016a52:	f000 f9fb 	bl	8016e4c <_Balloc>
 8016a56:	4605      	mov	r5, r0
 8016a58:	b928      	cbnz	r0, 8016a66 <_dtoa_r+0x9be>
 8016a5a:	4b87      	ldr	r3, [pc, #540]	; (8016c78 <_dtoa_r+0xbd0>)
 8016a5c:	4602      	mov	r2, r0
 8016a5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016a62:	f7ff bb3b 	b.w	80160dc <_dtoa_r+0x34>
 8016a66:	693a      	ldr	r2, [r7, #16]
 8016a68:	3202      	adds	r2, #2
 8016a6a:	0092      	lsls	r2, r2, #2
 8016a6c:	f107 010c 	add.w	r1, r7, #12
 8016a70:	300c      	adds	r0, #12
 8016a72:	f7fe fba7 	bl	80151c4 <memcpy>
 8016a76:	2201      	movs	r2, #1
 8016a78:	4629      	mov	r1, r5
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f000 fbf8 	bl	8017270 <__lshift>
 8016a80:	9b01      	ldr	r3, [sp, #4]
 8016a82:	f103 0901 	add.w	r9, r3, #1
 8016a86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8016a8a:	4413      	add	r3, r2
 8016a8c:	9305      	str	r3, [sp, #20]
 8016a8e:	f00a 0301 	and.w	r3, sl, #1
 8016a92:	46b8      	mov	r8, r7
 8016a94:	9304      	str	r3, [sp, #16]
 8016a96:	4607      	mov	r7, r0
 8016a98:	4631      	mov	r1, r6
 8016a9a:	ee18 0a10 	vmov	r0, s16
 8016a9e:	f7ff fa77 	bl	8015f90 <quorem>
 8016aa2:	4641      	mov	r1, r8
 8016aa4:	9002      	str	r0, [sp, #8]
 8016aa6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016aaa:	ee18 0a10 	vmov	r0, s16
 8016aae:	f000 fc4f 	bl	8017350 <__mcmp>
 8016ab2:	463a      	mov	r2, r7
 8016ab4:	9003      	str	r0, [sp, #12]
 8016ab6:	4631      	mov	r1, r6
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f000 fc65 	bl	8017388 <__mdiff>
 8016abe:	68c2      	ldr	r2, [r0, #12]
 8016ac0:	f109 3bff 	add.w	fp, r9, #4294967295
 8016ac4:	4605      	mov	r5, r0
 8016ac6:	bb02      	cbnz	r2, 8016b0a <_dtoa_r+0xa62>
 8016ac8:	4601      	mov	r1, r0
 8016aca:	ee18 0a10 	vmov	r0, s16
 8016ace:	f000 fc3f 	bl	8017350 <__mcmp>
 8016ad2:	4602      	mov	r2, r0
 8016ad4:	4629      	mov	r1, r5
 8016ad6:	4620      	mov	r0, r4
 8016ad8:	9207      	str	r2, [sp, #28]
 8016ada:	f000 f9f7 	bl	8016ecc <_Bfree>
 8016ade:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016ae2:	ea43 0102 	orr.w	r1, r3, r2
 8016ae6:	9b04      	ldr	r3, [sp, #16]
 8016ae8:	430b      	orrs	r3, r1
 8016aea:	464d      	mov	r5, r9
 8016aec:	d10f      	bne.n	8016b0e <_dtoa_r+0xa66>
 8016aee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016af2:	d02a      	beq.n	8016b4a <_dtoa_r+0xaa2>
 8016af4:	9b03      	ldr	r3, [sp, #12]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	dd02      	ble.n	8016b00 <_dtoa_r+0xa58>
 8016afa:	9b02      	ldr	r3, [sp, #8]
 8016afc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016b00:	f88b a000 	strb.w	sl, [fp]
 8016b04:	e775      	b.n	80169f2 <_dtoa_r+0x94a>
 8016b06:	4638      	mov	r0, r7
 8016b08:	e7ba      	b.n	8016a80 <_dtoa_r+0x9d8>
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	e7e2      	b.n	8016ad4 <_dtoa_r+0xa2c>
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	db04      	blt.n	8016b1e <_dtoa_r+0xa76>
 8016b14:	9906      	ldr	r1, [sp, #24]
 8016b16:	430b      	orrs	r3, r1
 8016b18:	9904      	ldr	r1, [sp, #16]
 8016b1a:	430b      	orrs	r3, r1
 8016b1c:	d122      	bne.n	8016b64 <_dtoa_r+0xabc>
 8016b1e:	2a00      	cmp	r2, #0
 8016b20:	ddee      	ble.n	8016b00 <_dtoa_r+0xa58>
 8016b22:	ee18 1a10 	vmov	r1, s16
 8016b26:	2201      	movs	r2, #1
 8016b28:	4620      	mov	r0, r4
 8016b2a:	f000 fba1 	bl	8017270 <__lshift>
 8016b2e:	4631      	mov	r1, r6
 8016b30:	ee08 0a10 	vmov	s16, r0
 8016b34:	f000 fc0c 	bl	8017350 <__mcmp>
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	dc03      	bgt.n	8016b44 <_dtoa_r+0xa9c>
 8016b3c:	d1e0      	bne.n	8016b00 <_dtoa_r+0xa58>
 8016b3e:	f01a 0f01 	tst.w	sl, #1
 8016b42:	d0dd      	beq.n	8016b00 <_dtoa_r+0xa58>
 8016b44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016b48:	d1d7      	bne.n	8016afa <_dtoa_r+0xa52>
 8016b4a:	2339      	movs	r3, #57	; 0x39
 8016b4c:	f88b 3000 	strb.w	r3, [fp]
 8016b50:	462b      	mov	r3, r5
 8016b52:	461d      	mov	r5, r3
 8016b54:	3b01      	subs	r3, #1
 8016b56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016b5a:	2a39      	cmp	r2, #57	; 0x39
 8016b5c:	d071      	beq.n	8016c42 <_dtoa_r+0xb9a>
 8016b5e:	3201      	adds	r2, #1
 8016b60:	701a      	strb	r2, [r3, #0]
 8016b62:	e746      	b.n	80169f2 <_dtoa_r+0x94a>
 8016b64:	2a00      	cmp	r2, #0
 8016b66:	dd07      	ble.n	8016b78 <_dtoa_r+0xad0>
 8016b68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016b6c:	d0ed      	beq.n	8016b4a <_dtoa_r+0xaa2>
 8016b6e:	f10a 0301 	add.w	r3, sl, #1
 8016b72:	f88b 3000 	strb.w	r3, [fp]
 8016b76:	e73c      	b.n	80169f2 <_dtoa_r+0x94a>
 8016b78:	9b05      	ldr	r3, [sp, #20]
 8016b7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8016b7e:	4599      	cmp	r9, r3
 8016b80:	d047      	beq.n	8016c12 <_dtoa_r+0xb6a>
 8016b82:	ee18 1a10 	vmov	r1, s16
 8016b86:	2300      	movs	r3, #0
 8016b88:	220a      	movs	r2, #10
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	f000 f9c0 	bl	8016f10 <__multadd>
 8016b90:	45b8      	cmp	r8, r7
 8016b92:	ee08 0a10 	vmov	s16, r0
 8016b96:	f04f 0300 	mov.w	r3, #0
 8016b9a:	f04f 020a 	mov.w	r2, #10
 8016b9e:	4641      	mov	r1, r8
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	d106      	bne.n	8016bb2 <_dtoa_r+0xb0a>
 8016ba4:	f000 f9b4 	bl	8016f10 <__multadd>
 8016ba8:	4680      	mov	r8, r0
 8016baa:	4607      	mov	r7, r0
 8016bac:	f109 0901 	add.w	r9, r9, #1
 8016bb0:	e772      	b.n	8016a98 <_dtoa_r+0x9f0>
 8016bb2:	f000 f9ad 	bl	8016f10 <__multadd>
 8016bb6:	4639      	mov	r1, r7
 8016bb8:	4680      	mov	r8, r0
 8016bba:	2300      	movs	r3, #0
 8016bbc:	220a      	movs	r2, #10
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f000 f9a6 	bl	8016f10 <__multadd>
 8016bc4:	4607      	mov	r7, r0
 8016bc6:	e7f1      	b.n	8016bac <_dtoa_r+0xb04>
 8016bc8:	9b03      	ldr	r3, [sp, #12]
 8016bca:	9302      	str	r3, [sp, #8]
 8016bcc:	9d01      	ldr	r5, [sp, #4]
 8016bce:	ee18 0a10 	vmov	r0, s16
 8016bd2:	4631      	mov	r1, r6
 8016bd4:	f7ff f9dc 	bl	8015f90 <quorem>
 8016bd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8016bdc:	9b01      	ldr	r3, [sp, #4]
 8016bde:	f805 ab01 	strb.w	sl, [r5], #1
 8016be2:	1aea      	subs	r2, r5, r3
 8016be4:	9b02      	ldr	r3, [sp, #8]
 8016be6:	4293      	cmp	r3, r2
 8016be8:	dd09      	ble.n	8016bfe <_dtoa_r+0xb56>
 8016bea:	ee18 1a10 	vmov	r1, s16
 8016bee:	2300      	movs	r3, #0
 8016bf0:	220a      	movs	r2, #10
 8016bf2:	4620      	mov	r0, r4
 8016bf4:	f000 f98c 	bl	8016f10 <__multadd>
 8016bf8:	ee08 0a10 	vmov	s16, r0
 8016bfc:	e7e7      	b.n	8016bce <_dtoa_r+0xb26>
 8016bfe:	9b02      	ldr	r3, [sp, #8]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	bfc8      	it	gt
 8016c04:	461d      	movgt	r5, r3
 8016c06:	9b01      	ldr	r3, [sp, #4]
 8016c08:	bfd8      	it	le
 8016c0a:	2501      	movle	r5, #1
 8016c0c:	441d      	add	r5, r3
 8016c0e:	f04f 0800 	mov.w	r8, #0
 8016c12:	ee18 1a10 	vmov	r1, s16
 8016c16:	2201      	movs	r2, #1
 8016c18:	4620      	mov	r0, r4
 8016c1a:	f000 fb29 	bl	8017270 <__lshift>
 8016c1e:	4631      	mov	r1, r6
 8016c20:	ee08 0a10 	vmov	s16, r0
 8016c24:	f000 fb94 	bl	8017350 <__mcmp>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	dc91      	bgt.n	8016b50 <_dtoa_r+0xaa8>
 8016c2c:	d102      	bne.n	8016c34 <_dtoa_r+0xb8c>
 8016c2e:	f01a 0f01 	tst.w	sl, #1
 8016c32:	d18d      	bne.n	8016b50 <_dtoa_r+0xaa8>
 8016c34:	462b      	mov	r3, r5
 8016c36:	461d      	mov	r5, r3
 8016c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016c3c:	2a30      	cmp	r2, #48	; 0x30
 8016c3e:	d0fa      	beq.n	8016c36 <_dtoa_r+0xb8e>
 8016c40:	e6d7      	b.n	80169f2 <_dtoa_r+0x94a>
 8016c42:	9a01      	ldr	r2, [sp, #4]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d184      	bne.n	8016b52 <_dtoa_r+0xaaa>
 8016c48:	9b00      	ldr	r3, [sp, #0]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	9300      	str	r3, [sp, #0]
 8016c4e:	2331      	movs	r3, #49	; 0x31
 8016c50:	7013      	strb	r3, [r2, #0]
 8016c52:	e6ce      	b.n	80169f2 <_dtoa_r+0x94a>
 8016c54:	4b09      	ldr	r3, [pc, #36]	; (8016c7c <_dtoa_r+0xbd4>)
 8016c56:	f7ff ba95 	b.w	8016184 <_dtoa_r+0xdc>
 8016c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	f47f aa6e 	bne.w	801613e <_dtoa_r+0x96>
 8016c62:	4b07      	ldr	r3, [pc, #28]	; (8016c80 <_dtoa_r+0xbd8>)
 8016c64:	f7ff ba8e 	b.w	8016184 <_dtoa_r+0xdc>
 8016c68:	9b02      	ldr	r3, [sp, #8]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	dcae      	bgt.n	8016bcc <_dtoa_r+0xb24>
 8016c6e:	9b06      	ldr	r3, [sp, #24]
 8016c70:	2b02      	cmp	r3, #2
 8016c72:	f73f aea8 	bgt.w	80169c6 <_dtoa_r+0x91e>
 8016c76:	e7a9      	b.n	8016bcc <_dtoa_r+0xb24>
 8016c78:	0801843f 	.word	0x0801843f
 8016c7c:	0801839c 	.word	0x0801839c
 8016c80:	080183c0 	.word	0x080183c0

08016c84 <__sflush_r>:
 8016c84:	898a      	ldrh	r2, [r1, #12]
 8016c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c8a:	4605      	mov	r5, r0
 8016c8c:	0710      	lsls	r0, r2, #28
 8016c8e:	460c      	mov	r4, r1
 8016c90:	d458      	bmi.n	8016d44 <__sflush_r+0xc0>
 8016c92:	684b      	ldr	r3, [r1, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	dc05      	bgt.n	8016ca4 <__sflush_r+0x20>
 8016c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	dc02      	bgt.n	8016ca4 <__sflush_r+0x20>
 8016c9e:	2000      	movs	r0, #0
 8016ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ca6:	2e00      	cmp	r6, #0
 8016ca8:	d0f9      	beq.n	8016c9e <__sflush_r+0x1a>
 8016caa:	2300      	movs	r3, #0
 8016cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016cb0:	682f      	ldr	r7, [r5, #0]
 8016cb2:	602b      	str	r3, [r5, #0]
 8016cb4:	d032      	beq.n	8016d1c <__sflush_r+0x98>
 8016cb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016cb8:	89a3      	ldrh	r3, [r4, #12]
 8016cba:	075a      	lsls	r2, r3, #29
 8016cbc:	d505      	bpl.n	8016cca <__sflush_r+0x46>
 8016cbe:	6863      	ldr	r3, [r4, #4]
 8016cc0:	1ac0      	subs	r0, r0, r3
 8016cc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016cc4:	b10b      	cbz	r3, 8016cca <__sflush_r+0x46>
 8016cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016cc8:	1ac0      	subs	r0, r0, r3
 8016cca:	2300      	movs	r3, #0
 8016ccc:	4602      	mov	r2, r0
 8016cce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cd0:	6a21      	ldr	r1, [r4, #32]
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	47b0      	blx	r6
 8016cd6:	1c43      	adds	r3, r0, #1
 8016cd8:	89a3      	ldrh	r3, [r4, #12]
 8016cda:	d106      	bne.n	8016cea <__sflush_r+0x66>
 8016cdc:	6829      	ldr	r1, [r5, #0]
 8016cde:	291d      	cmp	r1, #29
 8016ce0:	d82c      	bhi.n	8016d3c <__sflush_r+0xb8>
 8016ce2:	4a2a      	ldr	r2, [pc, #168]	; (8016d8c <__sflush_r+0x108>)
 8016ce4:	40ca      	lsrs	r2, r1
 8016ce6:	07d6      	lsls	r6, r2, #31
 8016ce8:	d528      	bpl.n	8016d3c <__sflush_r+0xb8>
 8016cea:	2200      	movs	r2, #0
 8016cec:	6062      	str	r2, [r4, #4]
 8016cee:	04d9      	lsls	r1, r3, #19
 8016cf0:	6922      	ldr	r2, [r4, #16]
 8016cf2:	6022      	str	r2, [r4, #0]
 8016cf4:	d504      	bpl.n	8016d00 <__sflush_r+0x7c>
 8016cf6:	1c42      	adds	r2, r0, #1
 8016cf8:	d101      	bne.n	8016cfe <__sflush_r+0x7a>
 8016cfa:	682b      	ldr	r3, [r5, #0]
 8016cfc:	b903      	cbnz	r3, 8016d00 <__sflush_r+0x7c>
 8016cfe:	6560      	str	r0, [r4, #84]	; 0x54
 8016d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d02:	602f      	str	r7, [r5, #0]
 8016d04:	2900      	cmp	r1, #0
 8016d06:	d0ca      	beq.n	8016c9e <__sflush_r+0x1a>
 8016d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d0c:	4299      	cmp	r1, r3
 8016d0e:	d002      	beq.n	8016d16 <__sflush_r+0x92>
 8016d10:	4628      	mov	r0, r5
 8016d12:	f7fe fa6d 	bl	80151f0 <_free_r>
 8016d16:	2000      	movs	r0, #0
 8016d18:	6360      	str	r0, [r4, #52]	; 0x34
 8016d1a:	e7c1      	b.n	8016ca0 <__sflush_r+0x1c>
 8016d1c:	6a21      	ldr	r1, [r4, #32]
 8016d1e:	2301      	movs	r3, #1
 8016d20:	4628      	mov	r0, r5
 8016d22:	47b0      	blx	r6
 8016d24:	1c41      	adds	r1, r0, #1
 8016d26:	d1c7      	bne.n	8016cb8 <__sflush_r+0x34>
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d0c4      	beq.n	8016cb8 <__sflush_r+0x34>
 8016d2e:	2b1d      	cmp	r3, #29
 8016d30:	d001      	beq.n	8016d36 <__sflush_r+0xb2>
 8016d32:	2b16      	cmp	r3, #22
 8016d34:	d101      	bne.n	8016d3a <__sflush_r+0xb6>
 8016d36:	602f      	str	r7, [r5, #0]
 8016d38:	e7b1      	b.n	8016c9e <__sflush_r+0x1a>
 8016d3a:	89a3      	ldrh	r3, [r4, #12]
 8016d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d40:	81a3      	strh	r3, [r4, #12]
 8016d42:	e7ad      	b.n	8016ca0 <__sflush_r+0x1c>
 8016d44:	690f      	ldr	r7, [r1, #16]
 8016d46:	2f00      	cmp	r7, #0
 8016d48:	d0a9      	beq.n	8016c9e <__sflush_r+0x1a>
 8016d4a:	0793      	lsls	r3, r2, #30
 8016d4c:	680e      	ldr	r6, [r1, #0]
 8016d4e:	bf08      	it	eq
 8016d50:	694b      	ldreq	r3, [r1, #20]
 8016d52:	600f      	str	r7, [r1, #0]
 8016d54:	bf18      	it	ne
 8016d56:	2300      	movne	r3, #0
 8016d58:	eba6 0807 	sub.w	r8, r6, r7
 8016d5c:	608b      	str	r3, [r1, #8]
 8016d5e:	f1b8 0f00 	cmp.w	r8, #0
 8016d62:	dd9c      	ble.n	8016c9e <__sflush_r+0x1a>
 8016d64:	6a21      	ldr	r1, [r4, #32]
 8016d66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016d68:	4643      	mov	r3, r8
 8016d6a:	463a      	mov	r2, r7
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	47b0      	blx	r6
 8016d70:	2800      	cmp	r0, #0
 8016d72:	dc06      	bgt.n	8016d82 <__sflush_r+0xfe>
 8016d74:	89a3      	ldrh	r3, [r4, #12]
 8016d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d7a:	81a3      	strh	r3, [r4, #12]
 8016d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d80:	e78e      	b.n	8016ca0 <__sflush_r+0x1c>
 8016d82:	4407      	add	r7, r0
 8016d84:	eba8 0800 	sub.w	r8, r8, r0
 8016d88:	e7e9      	b.n	8016d5e <__sflush_r+0xda>
 8016d8a:	bf00      	nop
 8016d8c:	20400001 	.word	0x20400001

08016d90 <_fflush_r>:
 8016d90:	b538      	push	{r3, r4, r5, lr}
 8016d92:	690b      	ldr	r3, [r1, #16]
 8016d94:	4605      	mov	r5, r0
 8016d96:	460c      	mov	r4, r1
 8016d98:	b913      	cbnz	r3, 8016da0 <_fflush_r+0x10>
 8016d9a:	2500      	movs	r5, #0
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	bd38      	pop	{r3, r4, r5, pc}
 8016da0:	b118      	cbz	r0, 8016daa <_fflush_r+0x1a>
 8016da2:	6983      	ldr	r3, [r0, #24]
 8016da4:	b90b      	cbnz	r3, 8016daa <_fflush_r+0x1a>
 8016da6:	f7fe f937 	bl	8015018 <__sinit>
 8016daa:	4b14      	ldr	r3, [pc, #80]	; (8016dfc <_fflush_r+0x6c>)
 8016dac:	429c      	cmp	r4, r3
 8016dae:	d11b      	bne.n	8016de8 <_fflush_r+0x58>
 8016db0:	686c      	ldr	r4, [r5, #4]
 8016db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d0ef      	beq.n	8016d9a <_fflush_r+0xa>
 8016dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016dbc:	07d0      	lsls	r0, r2, #31
 8016dbe:	d404      	bmi.n	8016dca <_fflush_r+0x3a>
 8016dc0:	0599      	lsls	r1, r3, #22
 8016dc2:	d402      	bmi.n	8016dca <_fflush_r+0x3a>
 8016dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dc6:	f7fe f9ea 	bl	801519e <__retarget_lock_acquire_recursive>
 8016dca:	4628      	mov	r0, r5
 8016dcc:	4621      	mov	r1, r4
 8016dce:	f7ff ff59 	bl	8016c84 <__sflush_r>
 8016dd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016dd4:	07da      	lsls	r2, r3, #31
 8016dd6:	4605      	mov	r5, r0
 8016dd8:	d4e0      	bmi.n	8016d9c <_fflush_r+0xc>
 8016dda:	89a3      	ldrh	r3, [r4, #12]
 8016ddc:	059b      	lsls	r3, r3, #22
 8016dde:	d4dd      	bmi.n	8016d9c <_fflush_r+0xc>
 8016de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016de2:	f7fe f9de 	bl	80151a2 <__retarget_lock_release_recursive>
 8016de6:	e7d9      	b.n	8016d9c <_fflush_r+0xc>
 8016de8:	4b05      	ldr	r3, [pc, #20]	; (8016e00 <_fflush_r+0x70>)
 8016dea:	429c      	cmp	r4, r3
 8016dec:	d101      	bne.n	8016df2 <_fflush_r+0x62>
 8016dee:	68ac      	ldr	r4, [r5, #8]
 8016df0:	e7df      	b.n	8016db2 <_fflush_r+0x22>
 8016df2:	4b04      	ldr	r3, [pc, #16]	; (8016e04 <_fflush_r+0x74>)
 8016df4:	429c      	cmp	r4, r3
 8016df6:	bf08      	it	eq
 8016df8:	68ec      	ldreq	r4, [r5, #12]
 8016dfa:	e7da      	b.n	8016db2 <_fflush_r+0x22>
 8016dfc:	08018348 	.word	0x08018348
 8016e00:	08018368 	.word	0x08018368
 8016e04:	08018328 	.word	0x08018328

08016e08 <_localeconv_r>:
 8016e08:	4800      	ldr	r0, [pc, #0]	; (8016e0c <_localeconv_r+0x4>)
 8016e0a:	4770      	bx	lr
 8016e0c:	2000017c 	.word	0x2000017c

08016e10 <_lseek_r>:
 8016e10:	b538      	push	{r3, r4, r5, lr}
 8016e12:	4d07      	ldr	r5, [pc, #28]	; (8016e30 <_lseek_r+0x20>)
 8016e14:	4604      	mov	r4, r0
 8016e16:	4608      	mov	r0, r1
 8016e18:	4611      	mov	r1, r2
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	602a      	str	r2, [r5, #0]
 8016e1e:	461a      	mov	r2, r3
 8016e20:	f7f2 fd34 	bl	800988c <_lseek>
 8016e24:	1c43      	adds	r3, r0, #1
 8016e26:	d102      	bne.n	8016e2e <_lseek_r+0x1e>
 8016e28:	682b      	ldr	r3, [r5, #0]
 8016e2a:	b103      	cbz	r3, 8016e2e <_lseek_r+0x1e>
 8016e2c:	6023      	str	r3, [r4, #0]
 8016e2e:	bd38      	pop	{r3, r4, r5, pc}
 8016e30:	2000a428 	.word	0x2000a428

08016e34 <__malloc_lock>:
 8016e34:	4801      	ldr	r0, [pc, #4]	; (8016e3c <__malloc_lock+0x8>)
 8016e36:	f7fe b9b2 	b.w	801519e <__retarget_lock_acquire_recursive>
 8016e3a:	bf00      	nop
 8016e3c:	2000a41d 	.word	0x2000a41d

08016e40 <__malloc_unlock>:
 8016e40:	4801      	ldr	r0, [pc, #4]	; (8016e48 <__malloc_unlock+0x8>)
 8016e42:	f7fe b9ae 	b.w	80151a2 <__retarget_lock_release_recursive>
 8016e46:	bf00      	nop
 8016e48:	2000a41d 	.word	0x2000a41d

08016e4c <_Balloc>:
 8016e4c:	b570      	push	{r4, r5, r6, lr}
 8016e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016e50:	4604      	mov	r4, r0
 8016e52:	460d      	mov	r5, r1
 8016e54:	b976      	cbnz	r6, 8016e74 <_Balloc+0x28>
 8016e56:	2010      	movs	r0, #16
 8016e58:	f7fe f9a4 	bl	80151a4 <malloc>
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8016e60:	b920      	cbnz	r0, 8016e6c <_Balloc+0x20>
 8016e62:	4b18      	ldr	r3, [pc, #96]	; (8016ec4 <_Balloc+0x78>)
 8016e64:	4818      	ldr	r0, [pc, #96]	; (8016ec8 <_Balloc+0x7c>)
 8016e66:	2166      	movs	r1, #102	; 0x66
 8016e68:	f000 fb9c 	bl	80175a4 <__assert_func>
 8016e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e70:	6006      	str	r6, [r0, #0]
 8016e72:	60c6      	str	r6, [r0, #12]
 8016e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016e76:	68f3      	ldr	r3, [r6, #12]
 8016e78:	b183      	cbz	r3, 8016e9c <_Balloc+0x50>
 8016e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e7c:	68db      	ldr	r3, [r3, #12]
 8016e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e82:	b9b8      	cbnz	r0, 8016eb4 <_Balloc+0x68>
 8016e84:	2101      	movs	r1, #1
 8016e86:	fa01 f605 	lsl.w	r6, r1, r5
 8016e8a:	1d72      	adds	r2, r6, #5
 8016e8c:	0092      	lsls	r2, r2, #2
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f000 fb60 	bl	8017554 <_calloc_r>
 8016e94:	b160      	cbz	r0, 8016eb0 <_Balloc+0x64>
 8016e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016e9a:	e00e      	b.n	8016eba <_Balloc+0x6e>
 8016e9c:	2221      	movs	r2, #33	; 0x21
 8016e9e:	2104      	movs	r1, #4
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f000 fb57 	bl	8017554 <_calloc_r>
 8016ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ea8:	60f0      	str	r0, [r6, #12]
 8016eaa:	68db      	ldr	r3, [r3, #12]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d1e4      	bne.n	8016e7a <_Balloc+0x2e>
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	bd70      	pop	{r4, r5, r6, pc}
 8016eb4:	6802      	ldr	r2, [r0, #0]
 8016eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016eba:	2300      	movs	r3, #0
 8016ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ec0:	e7f7      	b.n	8016eb2 <_Balloc+0x66>
 8016ec2:	bf00      	nop
 8016ec4:	080183cd 	.word	0x080183cd
 8016ec8:	08018450 	.word	0x08018450

08016ecc <_Bfree>:
 8016ecc:	b570      	push	{r4, r5, r6, lr}
 8016ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016ed0:	4605      	mov	r5, r0
 8016ed2:	460c      	mov	r4, r1
 8016ed4:	b976      	cbnz	r6, 8016ef4 <_Bfree+0x28>
 8016ed6:	2010      	movs	r0, #16
 8016ed8:	f7fe f964 	bl	80151a4 <malloc>
 8016edc:	4602      	mov	r2, r0
 8016ede:	6268      	str	r0, [r5, #36]	; 0x24
 8016ee0:	b920      	cbnz	r0, 8016eec <_Bfree+0x20>
 8016ee2:	4b09      	ldr	r3, [pc, #36]	; (8016f08 <_Bfree+0x3c>)
 8016ee4:	4809      	ldr	r0, [pc, #36]	; (8016f0c <_Bfree+0x40>)
 8016ee6:	218a      	movs	r1, #138	; 0x8a
 8016ee8:	f000 fb5c 	bl	80175a4 <__assert_func>
 8016eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ef0:	6006      	str	r6, [r0, #0]
 8016ef2:	60c6      	str	r6, [r0, #12]
 8016ef4:	b13c      	cbz	r4, 8016f06 <_Bfree+0x3a>
 8016ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016ef8:	6862      	ldr	r2, [r4, #4]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016f00:	6021      	str	r1, [r4, #0]
 8016f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016f06:	bd70      	pop	{r4, r5, r6, pc}
 8016f08:	080183cd 	.word	0x080183cd
 8016f0c:	08018450 	.word	0x08018450

08016f10 <__multadd>:
 8016f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f14:	690d      	ldr	r5, [r1, #16]
 8016f16:	4607      	mov	r7, r0
 8016f18:	460c      	mov	r4, r1
 8016f1a:	461e      	mov	r6, r3
 8016f1c:	f101 0c14 	add.w	ip, r1, #20
 8016f20:	2000      	movs	r0, #0
 8016f22:	f8dc 3000 	ldr.w	r3, [ip]
 8016f26:	b299      	uxth	r1, r3
 8016f28:	fb02 6101 	mla	r1, r2, r1, r6
 8016f2c:	0c1e      	lsrs	r6, r3, #16
 8016f2e:	0c0b      	lsrs	r3, r1, #16
 8016f30:	fb02 3306 	mla	r3, r2, r6, r3
 8016f34:	b289      	uxth	r1, r1
 8016f36:	3001      	adds	r0, #1
 8016f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016f3c:	4285      	cmp	r5, r0
 8016f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8016f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016f46:	dcec      	bgt.n	8016f22 <__multadd+0x12>
 8016f48:	b30e      	cbz	r6, 8016f8e <__multadd+0x7e>
 8016f4a:	68a3      	ldr	r3, [r4, #8]
 8016f4c:	42ab      	cmp	r3, r5
 8016f4e:	dc19      	bgt.n	8016f84 <__multadd+0x74>
 8016f50:	6861      	ldr	r1, [r4, #4]
 8016f52:	4638      	mov	r0, r7
 8016f54:	3101      	adds	r1, #1
 8016f56:	f7ff ff79 	bl	8016e4c <_Balloc>
 8016f5a:	4680      	mov	r8, r0
 8016f5c:	b928      	cbnz	r0, 8016f6a <__multadd+0x5a>
 8016f5e:	4602      	mov	r2, r0
 8016f60:	4b0c      	ldr	r3, [pc, #48]	; (8016f94 <__multadd+0x84>)
 8016f62:	480d      	ldr	r0, [pc, #52]	; (8016f98 <__multadd+0x88>)
 8016f64:	21b5      	movs	r1, #181	; 0xb5
 8016f66:	f000 fb1d 	bl	80175a4 <__assert_func>
 8016f6a:	6922      	ldr	r2, [r4, #16]
 8016f6c:	3202      	adds	r2, #2
 8016f6e:	f104 010c 	add.w	r1, r4, #12
 8016f72:	0092      	lsls	r2, r2, #2
 8016f74:	300c      	adds	r0, #12
 8016f76:	f7fe f925 	bl	80151c4 <memcpy>
 8016f7a:	4621      	mov	r1, r4
 8016f7c:	4638      	mov	r0, r7
 8016f7e:	f7ff ffa5 	bl	8016ecc <_Bfree>
 8016f82:	4644      	mov	r4, r8
 8016f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f88:	3501      	adds	r5, #1
 8016f8a:	615e      	str	r6, [r3, #20]
 8016f8c:	6125      	str	r5, [r4, #16]
 8016f8e:	4620      	mov	r0, r4
 8016f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f94:	0801843f 	.word	0x0801843f
 8016f98:	08018450 	.word	0x08018450

08016f9c <__hi0bits>:
 8016f9c:	0c03      	lsrs	r3, r0, #16
 8016f9e:	041b      	lsls	r3, r3, #16
 8016fa0:	b9d3      	cbnz	r3, 8016fd8 <__hi0bits+0x3c>
 8016fa2:	0400      	lsls	r0, r0, #16
 8016fa4:	2310      	movs	r3, #16
 8016fa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016faa:	bf04      	itt	eq
 8016fac:	0200      	lsleq	r0, r0, #8
 8016fae:	3308      	addeq	r3, #8
 8016fb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016fb4:	bf04      	itt	eq
 8016fb6:	0100      	lsleq	r0, r0, #4
 8016fb8:	3304      	addeq	r3, #4
 8016fba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016fbe:	bf04      	itt	eq
 8016fc0:	0080      	lsleq	r0, r0, #2
 8016fc2:	3302      	addeq	r3, #2
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	db05      	blt.n	8016fd4 <__hi0bits+0x38>
 8016fc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016fcc:	f103 0301 	add.w	r3, r3, #1
 8016fd0:	bf08      	it	eq
 8016fd2:	2320      	moveq	r3, #32
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	4770      	bx	lr
 8016fd8:	2300      	movs	r3, #0
 8016fda:	e7e4      	b.n	8016fa6 <__hi0bits+0xa>

08016fdc <__lo0bits>:
 8016fdc:	6803      	ldr	r3, [r0, #0]
 8016fde:	f013 0207 	ands.w	r2, r3, #7
 8016fe2:	4601      	mov	r1, r0
 8016fe4:	d00b      	beq.n	8016ffe <__lo0bits+0x22>
 8016fe6:	07da      	lsls	r2, r3, #31
 8016fe8:	d423      	bmi.n	8017032 <__lo0bits+0x56>
 8016fea:	0798      	lsls	r0, r3, #30
 8016fec:	bf49      	itett	mi
 8016fee:	085b      	lsrmi	r3, r3, #1
 8016ff0:	089b      	lsrpl	r3, r3, #2
 8016ff2:	2001      	movmi	r0, #1
 8016ff4:	600b      	strmi	r3, [r1, #0]
 8016ff6:	bf5c      	itt	pl
 8016ff8:	600b      	strpl	r3, [r1, #0]
 8016ffa:	2002      	movpl	r0, #2
 8016ffc:	4770      	bx	lr
 8016ffe:	b298      	uxth	r0, r3
 8017000:	b9a8      	cbnz	r0, 801702e <__lo0bits+0x52>
 8017002:	0c1b      	lsrs	r3, r3, #16
 8017004:	2010      	movs	r0, #16
 8017006:	b2da      	uxtb	r2, r3
 8017008:	b90a      	cbnz	r2, 801700e <__lo0bits+0x32>
 801700a:	3008      	adds	r0, #8
 801700c:	0a1b      	lsrs	r3, r3, #8
 801700e:	071a      	lsls	r2, r3, #28
 8017010:	bf04      	itt	eq
 8017012:	091b      	lsreq	r3, r3, #4
 8017014:	3004      	addeq	r0, #4
 8017016:	079a      	lsls	r2, r3, #30
 8017018:	bf04      	itt	eq
 801701a:	089b      	lsreq	r3, r3, #2
 801701c:	3002      	addeq	r0, #2
 801701e:	07da      	lsls	r2, r3, #31
 8017020:	d403      	bmi.n	801702a <__lo0bits+0x4e>
 8017022:	085b      	lsrs	r3, r3, #1
 8017024:	f100 0001 	add.w	r0, r0, #1
 8017028:	d005      	beq.n	8017036 <__lo0bits+0x5a>
 801702a:	600b      	str	r3, [r1, #0]
 801702c:	4770      	bx	lr
 801702e:	4610      	mov	r0, r2
 8017030:	e7e9      	b.n	8017006 <__lo0bits+0x2a>
 8017032:	2000      	movs	r0, #0
 8017034:	4770      	bx	lr
 8017036:	2020      	movs	r0, #32
 8017038:	4770      	bx	lr
	...

0801703c <__i2b>:
 801703c:	b510      	push	{r4, lr}
 801703e:	460c      	mov	r4, r1
 8017040:	2101      	movs	r1, #1
 8017042:	f7ff ff03 	bl	8016e4c <_Balloc>
 8017046:	4602      	mov	r2, r0
 8017048:	b928      	cbnz	r0, 8017056 <__i2b+0x1a>
 801704a:	4b05      	ldr	r3, [pc, #20]	; (8017060 <__i2b+0x24>)
 801704c:	4805      	ldr	r0, [pc, #20]	; (8017064 <__i2b+0x28>)
 801704e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017052:	f000 faa7 	bl	80175a4 <__assert_func>
 8017056:	2301      	movs	r3, #1
 8017058:	6144      	str	r4, [r0, #20]
 801705a:	6103      	str	r3, [r0, #16]
 801705c:	bd10      	pop	{r4, pc}
 801705e:	bf00      	nop
 8017060:	0801843f 	.word	0x0801843f
 8017064:	08018450 	.word	0x08018450

08017068 <__multiply>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	4691      	mov	r9, r2
 801706e:	690a      	ldr	r2, [r1, #16]
 8017070:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017074:	429a      	cmp	r2, r3
 8017076:	bfb8      	it	lt
 8017078:	460b      	movlt	r3, r1
 801707a:	460c      	mov	r4, r1
 801707c:	bfbc      	itt	lt
 801707e:	464c      	movlt	r4, r9
 8017080:	4699      	movlt	r9, r3
 8017082:	6927      	ldr	r7, [r4, #16]
 8017084:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017088:	68a3      	ldr	r3, [r4, #8]
 801708a:	6861      	ldr	r1, [r4, #4]
 801708c:	eb07 060a 	add.w	r6, r7, sl
 8017090:	42b3      	cmp	r3, r6
 8017092:	b085      	sub	sp, #20
 8017094:	bfb8      	it	lt
 8017096:	3101      	addlt	r1, #1
 8017098:	f7ff fed8 	bl	8016e4c <_Balloc>
 801709c:	b930      	cbnz	r0, 80170ac <__multiply+0x44>
 801709e:	4602      	mov	r2, r0
 80170a0:	4b44      	ldr	r3, [pc, #272]	; (80171b4 <__multiply+0x14c>)
 80170a2:	4845      	ldr	r0, [pc, #276]	; (80171b8 <__multiply+0x150>)
 80170a4:	f240 115d 	movw	r1, #349	; 0x15d
 80170a8:	f000 fa7c 	bl	80175a4 <__assert_func>
 80170ac:	f100 0514 	add.w	r5, r0, #20
 80170b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80170b4:	462b      	mov	r3, r5
 80170b6:	2200      	movs	r2, #0
 80170b8:	4543      	cmp	r3, r8
 80170ba:	d321      	bcc.n	8017100 <__multiply+0x98>
 80170bc:	f104 0314 	add.w	r3, r4, #20
 80170c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80170c4:	f109 0314 	add.w	r3, r9, #20
 80170c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80170cc:	9202      	str	r2, [sp, #8]
 80170ce:	1b3a      	subs	r2, r7, r4
 80170d0:	3a15      	subs	r2, #21
 80170d2:	f022 0203 	bic.w	r2, r2, #3
 80170d6:	3204      	adds	r2, #4
 80170d8:	f104 0115 	add.w	r1, r4, #21
 80170dc:	428f      	cmp	r7, r1
 80170de:	bf38      	it	cc
 80170e0:	2204      	movcc	r2, #4
 80170e2:	9201      	str	r2, [sp, #4]
 80170e4:	9a02      	ldr	r2, [sp, #8]
 80170e6:	9303      	str	r3, [sp, #12]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d80c      	bhi.n	8017106 <__multiply+0x9e>
 80170ec:	2e00      	cmp	r6, #0
 80170ee:	dd03      	ble.n	80170f8 <__multiply+0x90>
 80170f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d05a      	beq.n	80171ae <__multiply+0x146>
 80170f8:	6106      	str	r6, [r0, #16]
 80170fa:	b005      	add	sp, #20
 80170fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017100:	f843 2b04 	str.w	r2, [r3], #4
 8017104:	e7d8      	b.n	80170b8 <__multiply+0x50>
 8017106:	f8b3 a000 	ldrh.w	sl, [r3]
 801710a:	f1ba 0f00 	cmp.w	sl, #0
 801710e:	d024      	beq.n	801715a <__multiply+0xf2>
 8017110:	f104 0e14 	add.w	lr, r4, #20
 8017114:	46a9      	mov	r9, r5
 8017116:	f04f 0c00 	mov.w	ip, #0
 801711a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801711e:	f8d9 1000 	ldr.w	r1, [r9]
 8017122:	fa1f fb82 	uxth.w	fp, r2
 8017126:	b289      	uxth	r1, r1
 8017128:	fb0a 110b 	mla	r1, sl, fp, r1
 801712c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017130:	f8d9 2000 	ldr.w	r2, [r9]
 8017134:	4461      	add	r1, ip
 8017136:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801713a:	fb0a c20b 	mla	r2, sl, fp, ip
 801713e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017142:	b289      	uxth	r1, r1
 8017144:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017148:	4577      	cmp	r7, lr
 801714a:	f849 1b04 	str.w	r1, [r9], #4
 801714e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017152:	d8e2      	bhi.n	801711a <__multiply+0xb2>
 8017154:	9a01      	ldr	r2, [sp, #4]
 8017156:	f845 c002 	str.w	ip, [r5, r2]
 801715a:	9a03      	ldr	r2, [sp, #12]
 801715c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017160:	3304      	adds	r3, #4
 8017162:	f1b9 0f00 	cmp.w	r9, #0
 8017166:	d020      	beq.n	80171aa <__multiply+0x142>
 8017168:	6829      	ldr	r1, [r5, #0]
 801716a:	f104 0c14 	add.w	ip, r4, #20
 801716e:	46ae      	mov	lr, r5
 8017170:	f04f 0a00 	mov.w	sl, #0
 8017174:	f8bc b000 	ldrh.w	fp, [ip]
 8017178:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801717c:	fb09 220b 	mla	r2, r9, fp, r2
 8017180:	4492      	add	sl, r2
 8017182:	b289      	uxth	r1, r1
 8017184:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017188:	f84e 1b04 	str.w	r1, [lr], #4
 801718c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017190:	f8be 1000 	ldrh.w	r1, [lr]
 8017194:	0c12      	lsrs	r2, r2, #16
 8017196:	fb09 1102 	mla	r1, r9, r2, r1
 801719a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801719e:	4567      	cmp	r7, ip
 80171a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80171a4:	d8e6      	bhi.n	8017174 <__multiply+0x10c>
 80171a6:	9a01      	ldr	r2, [sp, #4]
 80171a8:	50a9      	str	r1, [r5, r2]
 80171aa:	3504      	adds	r5, #4
 80171ac:	e79a      	b.n	80170e4 <__multiply+0x7c>
 80171ae:	3e01      	subs	r6, #1
 80171b0:	e79c      	b.n	80170ec <__multiply+0x84>
 80171b2:	bf00      	nop
 80171b4:	0801843f 	.word	0x0801843f
 80171b8:	08018450 	.word	0x08018450

080171bc <__pow5mult>:
 80171bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171c0:	4615      	mov	r5, r2
 80171c2:	f012 0203 	ands.w	r2, r2, #3
 80171c6:	4606      	mov	r6, r0
 80171c8:	460f      	mov	r7, r1
 80171ca:	d007      	beq.n	80171dc <__pow5mult+0x20>
 80171cc:	4c25      	ldr	r4, [pc, #148]	; (8017264 <__pow5mult+0xa8>)
 80171ce:	3a01      	subs	r2, #1
 80171d0:	2300      	movs	r3, #0
 80171d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80171d6:	f7ff fe9b 	bl	8016f10 <__multadd>
 80171da:	4607      	mov	r7, r0
 80171dc:	10ad      	asrs	r5, r5, #2
 80171de:	d03d      	beq.n	801725c <__pow5mult+0xa0>
 80171e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80171e2:	b97c      	cbnz	r4, 8017204 <__pow5mult+0x48>
 80171e4:	2010      	movs	r0, #16
 80171e6:	f7fd ffdd 	bl	80151a4 <malloc>
 80171ea:	4602      	mov	r2, r0
 80171ec:	6270      	str	r0, [r6, #36]	; 0x24
 80171ee:	b928      	cbnz	r0, 80171fc <__pow5mult+0x40>
 80171f0:	4b1d      	ldr	r3, [pc, #116]	; (8017268 <__pow5mult+0xac>)
 80171f2:	481e      	ldr	r0, [pc, #120]	; (801726c <__pow5mult+0xb0>)
 80171f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80171f8:	f000 f9d4 	bl	80175a4 <__assert_func>
 80171fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017200:	6004      	str	r4, [r0, #0]
 8017202:	60c4      	str	r4, [r0, #12]
 8017204:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801720c:	b94c      	cbnz	r4, 8017222 <__pow5mult+0x66>
 801720e:	f240 2171 	movw	r1, #625	; 0x271
 8017212:	4630      	mov	r0, r6
 8017214:	f7ff ff12 	bl	801703c <__i2b>
 8017218:	2300      	movs	r3, #0
 801721a:	f8c8 0008 	str.w	r0, [r8, #8]
 801721e:	4604      	mov	r4, r0
 8017220:	6003      	str	r3, [r0, #0]
 8017222:	f04f 0900 	mov.w	r9, #0
 8017226:	07eb      	lsls	r3, r5, #31
 8017228:	d50a      	bpl.n	8017240 <__pow5mult+0x84>
 801722a:	4639      	mov	r1, r7
 801722c:	4622      	mov	r2, r4
 801722e:	4630      	mov	r0, r6
 8017230:	f7ff ff1a 	bl	8017068 <__multiply>
 8017234:	4639      	mov	r1, r7
 8017236:	4680      	mov	r8, r0
 8017238:	4630      	mov	r0, r6
 801723a:	f7ff fe47 	bl	8016ecc <_Bfree>
 801723e:	4647      	mov	r7, r8
 8017240:	106d      	asrs	r5, r5, #1
 8017242:	d00b      	beq.n	801725c <__pow5mult+0xa0>
 8017244:	6820      	ldr	r0, [r4, #0]
 8017246:	b938      	cbnz	r0, 8017258 <__pow5mult+0x9c>
 8017248:	4622      	mov	r2, r4
 801724a:	4621      	mov	r1, r4
 801724c:	4630      	mov	r0, r6
 801724e:	f7ff ff0b 	bl	8017068 <__multiply>
 8017252:	6020      	str	r0, [r4, #0]
 8017254:	f8c0 9000 	str.w	r9, [r0]
 8017258:	4604      	mov	r4, r0
 801725a:	e7e4      	b.n	8017226 <__pow5mult+0x6a>
 801725c:	4638      	mov	r0, r7
 801725e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017262:	bf00      	nop
 8017264:	080185a0 	.word	0x080185a0
 8017268:	080183cd 	.word	0x080183cd
 801726c:	08018450 	.word	0x08018450

08017270 <__lshift>:
 8017270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017274:	460c      	mov	r4, r1
 8017276:	6849      	ldr	r1, [r1, #4]
 8017278:	6923      	ldr	r3, [r4, #16]
 801727a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801727e:	68a3      	ldr	r3, [r4, #8]
 8017280:	4607      	mov	r7, r0
 8017282:	4691      	mov	r9, r2
 8017284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017288:	f108 0601 	add.w	r6, r8, #1
 801728c:	42b3      	cmp	r3, r6
 801728e:	db0b      	blt.n	80172a8 <__lshift+0x38>
 8017290:	4638      	mov	r0, r7
 8017292:	f7ff fddb 	bl	8016e4c <_Balloc>
 8017296:	4605      	mov	r5, r0
 8017298:	b948      	cbnz	r0, 80172ae <__lshift+0x3e>
 801729a:	4602      	mov	r2, r0
 801729c:	4b2a      	ldr	r3, [pc, #168]	; (8017348 <__lshift+0xd8>)
 801729e:	482b      	ldr	r0, [pc, #172]	; (801734c <__lshift+0xdc>)
 80172a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80172a4:	f000 f97e 	bl	80175a4 <__assert_func>
 80172a8:	3101      	adds	r1, #1
 80172aa:	005b      	lsls	r3, r3, #1
 80172ac:	e7ee      	b.n	801728c <__lshift+0x1c>
 80172ae:	2300      	movs	r3, #0
 80172b0:	f100 0114 	add.w	r1, r0, #20
 80172b4:	f100 0210 	add.w	r2, r0, #16
 80172b8:	4618      	mov	r0, r3
 80172ba:	4553      	cmp	r3, sl
 80172bc:	db37      	blt.n	801732e <__lshift+0xbe>
 80172be:	6920      	ldr	r0, [r4, #16]
 80172c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80172c4:	f104 0314 	add.w	r3, r4, #20
 80172c8:	f019 091f 	ands.w	r9, r9, #31
 80172cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80172d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80172d4:	d02f      	beq.n	8017336 <__lshift+0xc6>
 80172d6:	f1c9 0e20 	rsb	lr, r9, #32
 80172da:	468a      	mov	sl, r1
 80172dc:	f04f 0c00 	mov.w	ip, #0
 80172e0:	681a      	ldr	r2, [r3, #0]
 80172e2:	fa02 f209 	lsl.w	r2, r2, r9
 80172e6:	ea42 020c 	orr.w	r2, r2, ip
 80172ea:	f84a 2b04 	str.w	r2, [sl], #4
 80172ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80172f2:	4298      	cmp	r0, r3
 80172f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80172f8:	d8f2      	bhi.n	80172e0 <__lshift+0x70>
 80172fa:	1b03      	subs	r3, r0, r4
 80172fc:	3b15      	subs	r3, #21
 80172fe:	f023 0303 	bic.w	r3, r3, #3
 8017302:	3304      	adds	r3, #4
 8017304:	f104 0215 	add.w	r2, r4, #21
 8017308:	4290      	cmp	r0, r2
 801730a:	bf38      	it	cc
 801730c:	2304      	movcc	r3, #4
 801730e:	f841 c003 	str.w	ip, [r1, r3]
 8017312:	f1bc 0f00 	cmp.w	ip, #0
 8017316:	d001      	beq.n	801731c <__lshift+0xac>
 8017318:	f108 0602 	add.w	r6, r8, #2
 801731c:	3e01      	subs	r6, #1
 801731e:	4638      	mov	r0, r7
 8017320:	612e      	str	r6, [r5, #16]
 8017322:	4621      	mov	r1, r4
 8017324:	f7ff fdd2 	bl	8016ecc <_Bfree>
 8017328:	4628      	mov	r0, r5
 801732a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801732e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017332:	3301      	adds	r3, #1
 8017334:	e7c1      	b.n	80172ba <__lshift+0x4a>
 8017336:	3904      	subs	r1, #4
 8017338:	f853 2b04 	ldr.w	r2, [r3], #4
 801733c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017340:	4298      	cmp	r0, r3
 8017342:	d8f9      	bhi.n	8017338 <__lshift+0xc8>
 8017344:	e7ea      	b.n	801731c <__lshift+0xac>
 8017346:	bf00      	nop
 8017348:	0801843f 	.word	0x0801843f
 801734c:	08018450 	.word	0x08018450

08017350 <__mcmp>:
 8017350:	b530      	push	{r4, r5, lr}
 8017352:	6902      	ldr	r2, [r0, #16]
 8017354:	690c      	ldr	r4, [r1, #16]
 8017356:	1b12      	subs	r2, r2, r4
 8017358:	d10e      	bne.n	8017378 <__mcmp+0x28>
 801735a:	f100 0314 	add.w	r3, r0, #20
 801735e:	3114      	adds	r1, #20
 8017360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801736c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017370:	42a5      	cmp	r5, r4
 8017372:	d003      	beq.n	801737c <__mcmp+0x2c>
 8017374:	d305      	bcc.n	8017382 <__mcmp+0x32>
 8017376:	2201      	movs	r2, #1
 8017378:	4610      	mov	r0, r2
 801737a:	bd30      	pop	{r4, r5, pc}
 801737c:	4283      	cmp	r3, r0
 801737e:	d3f3      	bcc.n	8017368 <__mcmp+0x18>
 8017380:	e7fa      	b.n	8017378 <__mcmp+0x28>
 8017382:	f04f 32ff 	mov.w	r2, #4294967295
 8017386:	e7f7      	b.n	8017378 <__mcmp+0x28>

08017388 <__mdiff>:
 8017388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801738c:	460c      	mov	r4, r1
 801738e:	4606      	mov	r6, r0
 8017390:	4611      	mov	r1, r2
 8017392:	4620      	mov	r0, r4
 8017394:	4690      	mov	r8, r2
 8017396:	f7ff ffdb 	bl	8017350 <__mcmp>
 801739a:	1e05      	subs	r5, r0, #0
 801739c:	d110      	bne.n	80173c0 <__mdiff+0x38>
 801739e:	4629      	mov	r1, r5
 80173a0:	4630      	mov	r0, r6
 80173a2:	f7ff fd53 	bl	8016e4c <_Balloc>
 80173a6:	b930      	cbnz	r0, 80173b6 <__mdiff+0x2e>
 80173a8:	4b3a      	ldr	r3, [pc, #232]	; (8017494 <__mdiff+0x10c>)
 80173aa:	4602      	mov	r2, r0
 80173ac:	f240 2132 	movw	r1, #562	; 0x232
 80173b0:	4839      	ldr	r0, [pc, #228]	; (8017498 <__mdiff+0x110>)
 80173b2:	f000 f8f7 	bl	80175a4 <__assert_func>
 80173b6:	2301      	movs	r3, #1
 80173b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80173bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173c0:	bfa4      	itt	ge
 80173c2:	4643      	movge	r3, r8
 80173c4:	46a0      	movge	r8, r4
 80173c6:	4630      	mov	r0, r6
 80173c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80173cc:	bfa6      	itte	ge
 80173ce:	461c      	movge	r4, r3
 80173d0:	2500      	movge	r5, #0
 80173d2:	2501      	movlt	r5, #1
 80173d4:	f7ff fd3a 	bl	8016e4c <_Balloc>
 80173d8:	b920      	cbnz	r0, 80173e4 <__mdiff+0x5c>
 80173da:	4b2e      	ldr	r3, [pc, #184]	; (8017494 <__mdiff+0x10c>)
 80173dc:	4602      	mov	r2, r0
 80173de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80173e2:	e7e5      	b.n	80173b0 <__mdiff+0x28>
 80173e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80173e8:	6926      	ldr	r6, [r4, #16]
 80173ea:	60c5      	str	r5, [r0, #12]
 80173ec:	f104 0914 	add.w	r9, r4, #20
 80173f0:	f108 0514 	add.w	r5, r8, #20
 80173f4:	f100 0e14 	add.w	lr, r0, #20
 80173f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80173fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017400:	f108 0210 	add.w	r2, r8, #16
 8017404:	46f2      	mov	sl, lr
 8017406:	2100      	movs	r1, #0
 8017408:	f859 3b04 	ldr.w	r3, [r9], #4
 801740c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017410:	fa1f f883 	uxth.w	r8, r3
 8017414:	fa11 f18b 	uxtah	r1, r1, fp
 8017418:	0c1b      	lsrs	r3, r3, #16
 801741a:	eba1 0808 	sub.w	r8, r1, r8
 801741e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017422:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017426:	fa1f f888 	uxth.w	r8, r8
 801742a:	1419      	asrs	r1, r3, #16
 801742c:	454e      	cmp	r6, r9
 801742e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017432:	f84a 3b04 	str.w	r3, [sl], #4
 8017436:	d8e7      	bhi.n	8017408 <__mdiff+0x80>
 8017438:	1b33      	subs	r3, r6, r4
 801743a:	3b15      	subs	r3, #21
 801743c:	f023 0303 	bic.w	r3, r3, #3
 8017440:	3304      	adds	r3, #4
 8017442:	3415      	adds	r4, #21
 8017444:	42a6      	cmp	r6, r4
 8017446:	bf38      	it	cc
 8017448:	2304      	movcc	r3, #4
 801744a:	441d      	add	r5, r3
 801744c:	4473      	add	r3, lr
 801744e:	469e      	mov	lr, r3
 8017450:	462e      	mov	r6, r5
 8017452:	4566      	cmp	r6, ip
 8017454:	d30e      	bcc.n	8017474 <__mdiff+0xec>
 8017456:	f10c 0203 	add.w	r2, ip, #3
 801745a:	1b52      	subs	r2, r2, r5
 801745c:	f022 0203 	bic.w	r2, r2, #3
 8017460:	3d03      	subs	r5, #3
 8017462:	45ac      	cmp	ip, r5
 8017464:	bf38      	it	cc
 8017466:	2200      	movcc	r2, #0
 8017468:	441a      	add	r2, r3
 801746a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801746e:	b17b      	cbz	r3, 8017490 <__mdiff+0x108>
 8017470:	6107      	str	r7, [r0, #16]
 8017472:	e7a3      	b.n	80173bc <__mdiff+0x34>
 8017474:	f856 8b04 	ldr.w	r8, [r6], #4
 8017478:	fa11 f288 	uxtah	r2, r1, r8
 801747c:	1414      	asrs	r4, r2, #16
 801747e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017482:	b292      	uxth	r2, r2
 8017484:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017488:	f84e 2b04 	str.w	r2, [lr], #4
 801748c:	1421      	asrs	r1, r4, #16
 801748e:	e7e0      	b.n	8017452 <__mdiff+0xca>
 8017490:	3f01      	subs	r7, #1
 8017492:	e7ea      	b.n	801746a <__mdiff+0xe2>
 8017494:	0801843f 	.word	0x0801843f
 8017498:	08018450 	.word	0x08018450

0801749c <__d2b>:
 801749c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80174a0:	4689      	mov	r9, r1
 80174a2:	2101      	movs	r1, #1
 80174a4:	ec57 6b10 	vmov	r6, r7, d0
 80174a8:	4690      	mov	r8, r2
 80174aa:	f7ff fccf 	bl	8016e4c <_Balloc>
 80174ae:	4604      	mov	r4, r0
 80174b0:	b930      	cbnz	r0, 80174c0 <__d2b+0x24>
 80174b2:	4602      	mov	r2, r0
 80174b4:	4b25      	ldr	r3, [pc, #148]	; (801754c <__d2b+0xb0>)
 80174b6:	4826      	ldr	r0, [pc, #152]	; (8017550 <__d2b+0xb4>)
 80174b8:	f240 310a 	movw	r1, #778	; 0x30a
 80174bc:	f000 f872 	bl	80175a4 <__assert_func>
 80174c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80174c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80174c8:	bb35      	cbnz	r5, 8017518 <__d2b+0x7c>
 80174ca:	2e00      	cmp	r6, #0
 80174cc:	9301      	str	r3, [sp, #4]
 80174ce:	d028      	beq.n	8017522 <__d2b+0x86>
 80174d0:	4668      	mov	r0, sp
 80174d2:	9600      	str	r6, [sp, #0]
 80174d4:	f7ff fd82 	bl	8016fdc <__lo0bits>
 80174d8:	9900      	ldr	r1, [sp, #0]
 80174da:	b300      	cbz	r0, 801751e <__d2b+0x82>
 80174dc:	9a01      	ldr	r2, [sp, #4]
 80174de:	f1c0 0320 	rsb	r3, r0, #32
 80174e2:	fa02 f303 	lsl.w	r3, r2, r3
 80174e6:	430b      	orrs	r3, r1
 80174e8:	40c2      	lsrs	r2, r0
 80174ea:	6163      	str	r3, [r4, #20]
 80174ec:	9201      	str	r2, [sp, #4]
 80174ee:	9b01      	ldr	r3, [sp, #4]
 80174f0:	61a3      	str	r3, [r4, #24]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	bf14      	ite	ne
 80174f6:	2202      	movne	r2, #2
 80174f8:	2201      	moveq	r2, #1
 80174fa:	6122      	str	r2, [r4, #16]
 80174fc:	b1d5      	cbz	r5, 8017534 <__d2b+0x98>
 80174fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017502:	4405      	add	r5, r0
 8017504:	f8c9 5000 	str.w	r5, [r9]
 8017508:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801750c:	f8c8 0000 	str.w	r0, [r8]
 8017510:	4620      	mov	r0, r4
 8017512:	b003      	add	sp, #12
 8017514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801751c:	e7d5      	b.n	80174ca <__d2b+0x2e>
 801751e:	6161      	str	r1, [r4, #20]
 8017520:	e7e5      	b.n	80174ee <__d2b+0x52>
 8017522:	a801      	add	r0, sp, #4
 8017524:	f7ff fd5a 	bl	8016fdc <__lo0bits>
 8017528:	9b01      	ldr	r3, [sp, #4]
 801752a:	6163      	str	r3, [r4, #20]
 801752c:	2201      	movs	r2, #1
 801752e:	6122      	str	r2, [r4, #16]
 8017530:	3020      	adds	r0, #32
 8017532:	e7e3      	b.n	80174fc <__d2b+0x60>
 8017534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801753c:	f8c9 0000 	str.w	r0, [r9]
 8017540:	6918      	ldr	r0, [r3, #16]
 8017542:	f7ff fd2b 	bl	8016f9c <__hi0bits>
 8017546:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801754a:	e7df      	b.n	801750c <__d2b+0x70>
 801754c:	0801843f 	.word	0x0801843f
 8017550:	08018450 	.word	0x08018450

08017554 <_calloc_r>:
 8017554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017556:	fba1 2402 	umull	r2, r4, r1, r2
 801755a:	b94c      	cbnz	r4, 8017570 <_calloc_r+0x1c>
 801755c:	4611      	mov	r1, r2
 801755e:	9201      	str	r2, [sp, #4]
 8017560:	f7fd feb2 	bl	80152c8 <_malloc_r>
 8017564:	9a01      	ldr	r2, [sp, #4]
 8017566:	4605      	mov	r5, r0
 8017568:	b930      	cbnz	r0, 8017578 <_calloc_r+0x24>
 801756a:	4628      	mov	r0, r5
 801756c:	b003      	add	sp, #12
 801756e:	bd30      	pop	{r4, r5, pc}
 8017570:	220c      	movs	r2, #12
 8017572:	6002      	str	r2, [r0, #0]
 8017574:	2500      	movs	r5, #0
 8017576:	e7f8      	b.n	801756a <_calloc_r+0x16>
 8017578:	4621      	mov	r1, r4
 801757a:	f7fd fe31 	bl	80151e0 <memset>
 801757e:	e7f4      	b.n	801756a <_calloc_r+0x16>

08017580 <_read_r>:
 8017580:	b538      	push	{r3, r4, r5, lr}
 8017582:	4d07      	ldr	r5, [pc, #28]	; (80175a0 <_read_r+0x20>)
 8017584:	4604      	mov	r4, r0
 8017586:	4608      	mov	r0, r1
 8017588:	4611      	mov	r1, r2
 801758a:	2200      	movs	r2, #0
 801758c:	602a      	str	r2, [r5, #0]
 801758e:	461a      	mov	r2, r3
 8017590:	f7f2 f91c 	bl	80097cc <_read>
 8017594:	1c43      	adds	r3, r0, #1
 8017596:	d102      	bne.n	801759e <_read_r+0x1e>
 8017598:	682b      	ldr	r3, [r5, #0]
 801759a:	b103      	cbz	r3, 801759e <_read_r+0x1e>
 801759c:	6023      	str	r3, [r4, #0]
 801759e:	bd38      	pop	{r3, r4, r5, pc}
 80175a0:	2000a428 	.word	0x2000a428

080175a4 <__assert_func>:
 80175a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175a6:	4614      	mov	r4, r2
 80175a8:	461a      	mov	r2, r3
 80175aa:	4b09      	ldr	r3, [pc, #36]	; (80175d0 <__assert_func+0x2c>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	4605      	mov	r5, r0
 80175b0:	68d8      	ldr	r0, [r3, #12]
 80175b2:	b14c      	cbz	r4, 80175c8 <__assert_func+0x24>
 80175b4:	4b07      	ldr	r3, [pc, #28]	; (80175d4 <__assert_func+0x30>)
 80175b6:	9100      	str	r1, [sp, #0]
 80175b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80175bc:	4906      	ldr	r1, [pc, #24]	; (80175d8 <__assert_func+0x34>)
 80175be:	462b      	mov	r3, r5
 80175c0:	f000 f80e 	bl	80175e0 <fiprintf>
 80175c4:	f7fd fcbc 	bl	8014f40 <abort>
 80175c8:	4b04      	ldr	r3, [pc, #16]	; (80175dc <__assert_func+0x38>)
 80175ca:	461c      	mov	r4, r3
 80175cc:	e7f3      	b.n	80175b6 <__assert_func+0x12>
 80175ce:	bf00      	nop
 80175d0:	20000024 	.word	0x20000024
 80175d4:	080185ac 	.word	0x080185ac
 80175d8:	080185b9 	.word	0x080185b9
 80175dc:	080185e7 	.word	0x080185e7

080175e0 <fiprintf>:
 80175e0:	b40e      	push	{r1, r2, r3}
 80175e2:	b503      	push	{r0, r1, lr}
 80175e4:	4601      	mov	r1, r0
 80175e6:	ab03      	add	r3, sp, #12
 80175e8:	4805      	ldr	r0, [pc, #20]	; (8017600 <fiprintf+0x20>)
 80175ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80175ee:	6800      	ldr	r0, [r0, #0]
 80175f0:	9301      	str	r3, [sp, #4]
 80175f2:	f000 f843 	bl	801767c <_vfiprintf_r>
 80175f6:	b002      	add	sp, #8
 80175f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80175fc:	b003      	add	sp, #12
 80175fe:	4770      	bx	lr
 8017600:	20000024 	.word	0x20000024

08017604 <__ascii_mbtowc>:
 8017604:	b082      	sub	sp, #8
 8017606:	b901      	cbnz	r1, 801760a <__ascii_mbtowc+0x6>
 8017608:	a901      	add	r1, sp, #4
 801760a:	b142      	cbz	r2, 801761e <__ascii_mbtowc+0x1a>
 801760c:	b14b      	cbz	r3, 8017622 <__ascii_mbtowc+0x1e>
 801760e:	7813      	ldrb	r3, [r2, #0]
 8017610:	600b      	str	r3, [r1, #0]
 8017612:	7812      	ldrb	r2, [r2, #0]
 8017614:	1e10      	subs	r0, r2, #0
 8017616:	bf18      	it	ne
 8017618:	2001      	movne	r0, #1
 801761a:	b002      	add	sp, #8
 801761c:	4770      	bx	lr
 801761e:	4610      	mov	r0, r2
 8017620:	e7fb      	b.n	801761a <__ascii_mbtowc+0x16>
 8017622:	f06f 0001 	mvn.w	r0, #1
 8017626:	e7f8      	b.n	801761a <__ascii_mbtowc+0x16>

08017628 <__sfputc_r>:
 8017628:	6893      	ldr	r3, [r2, #8]
 801762a:	3b01      	subs	r3, #1
 801762c:	2b00      	cmp	r3, #0
 801762e:	b410      	push	{r4}
 8017630:	6093      	str	r3, [r2, #8]
 8017632:	da08      	bge.n	8017646 <__sfputc_r+0x1e>
 8017634:	6994      	ldr	r4, [r2, #24]
 8017636:	42a3      	cmp	r3, r4
 8017638:	db01      	blt.n	801763e <__sfputc_r+0x16>
 801763a:	290a      	cmp	r1, #10
 801763c:	d103      	bne.n	8017646 <__sfputc_r+0x1e>
 801763e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017642:	f000 b94b 	b.w	80178dc <__swbuf_r>
 8017646:	6813      	ldr	r3, [r2, #0]
 8017648:	1c58      	adds	r0, r3, #1
 801764a:	6010      	str	r0, [r2, #0]
 801764c:	7019      	strb	r1, [r3, #0]
 801764e:	4608      	mov	r0, r1
 8017650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017654:	4770      	bx	lr

08017656 <__sfputs_r>:
 8017656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017658:	4606      	mov	r6, r0
 801765a:	460f      	mov	r7, r1
 801765c:	4614      	mov	r4, r2
 801765e:	18d5      	adds	r5, r2, r3
 8017660:	42ac      	cmp	r4, r5
 8017662:	d101      	bne.n	8017668 <__sfputs_r+0x12>
 8017664:	2000      	movs	r0, #0
 8017666:	e007      	b.n	8017678 <__sfputs_r+0x22>
 8017668:	f814 1b01 	ldrb.w	r1, [r4], #1
 801766c:	463a      	mov	r2, r7
 801766e:	4630      	mov	r0, r6
 8017670:	f7ff ffda 	bl	8017628 <__sfputc_r>
 8017674:	1c43      	adds	r3, r0, #1
 8017676:	d1f3      	bne.n	8017660 <__sfputs_r+0xa>
 8017678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801767c <_vfiprintf_r>:
 801767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017680:	460d      	mov	r5, r1
 8017682:	b09d      	sub	sp, #116	; 0x74
 8017684:	4614      	mov	r4, r2
 8017686:	4698      	mov	r8, r3
 8017688:	4606      	mov	r6, r0
 801768a:	b118      	cbz	r0, 8017694 <_vfiprintf_r+0x18>
 801768c:	6983      	ldr	r3, [r0, #24]
 801768e:	b90b      	cbnz	r3, 8017694 <_vfiprintf_r+0x18>
 8017690:	f7fd fcc2 	bl	8015018 <__sinit>
 8017694:	4b89      	ldr	r3, [pc, #548]	; (80178bc <_vfiprintf_r+0x240>)
 8017696:	429d      	cmp	r5, r3
 8017698:	d11b      	bne.n	80176d2 <_vfiprintf_r+0x56>
 801769a:	6875      	ldr	r5, [r6, #4]
 801769c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801769e:	07d9      	lsls	r1, r3, #31
 80176a0:	d405      	bmi.n	80176ae <_vfiprintf_r+0x32>
 80176a2:	89ab      	ldrh	r3, [r5, #12]
 80176a4:	059a      	lsls	r2, r3, #22
 80176a6:	d402      	bmi.n	80176ae <_vfiprintf_r+0x32>
 80176a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176aa:	f7fd fd78 	bl	801519e <__retarget_lock_acquire_recursive>
 80176ae:	89ab      	ldrh	r3, [r5, #12]
 80176b0:	071b      	lsls	r3, r3, #28
 80176b2:	d501      	bpl.n	80176b8 <_vfiprintf_r+0x3c>
 80176b4:	692b      	ldr	r3, [r5, #16]
 80176b6:	b9eb      	cbnz	r3, 80176f4 <_vfiprintf_r+0x78>
 80176b8:	4629      	mov	r1, r5
 80176ba:	4630      	mov	r0, r6
 80176bc:	f000 f96e 	bl	801799c <__swsetup_r>
 80176c0:	b1c0      	cbz	r0, 80176f4 <_vfiprintf_r+0x78>
 80176c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176c4:	07dc      	lsls	r4, r3, #31
 80176c6:	d50e      	bpl.n	80176e6 <_vfiprintf_r+0x6a>
 80176c8:	f04f 30ff 	mov.w	r0, #4294967295
 80176cc:	b01d      	add	sp, #116	; 0x74
 80176ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176d2:	4b7b      	ldr	r3, [pc, #492]	; (80178c0 <_vfiprintf_r+0x244>)
 80176d4:	429d      	cmp	r5, r3
 80176d6:	d101      	bne.n	80176dc <_vfiprintf_r+0x60>
 80176d8:	68b5      	ldr	r5, [r6, #8]
 80176da:	e7df      	b.n	801769c <_vfiprintf_r+0x20>
 80176dc:	4b79      	ldr	r3, [pc, #484]	; (80178c4 <_vfiprintf_r+0x248>)
 80176de:	429d      	cmp	r5, r3
 80176e0:	bf08      	it	eq
 80176e2:	68f5      	ldreq	r5, [r6, #12]
 80176e4:	e7da      	b.n	801769c <_vfiprintf_r+0x20>
 80176e6:	89ab      	ldrh	r3, [r5, #12]
 80176e8:	0598      	lsls	r0, r3, #22
 80176ea:	d4ed      	bmi.n	80176c8 <_vfiprintf_r+0x4c>
 80176ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176ee:	f7fd fd58 	bl	80151a2 <__retarget_lock_release_recursive>
 80176f2:	e7e9      	b.n	80176c8 <_vfiprintf_r+0x4c>
 80176f4:	2300      	movs	r3, #0
 80176f6:	9309      	str	r3, [sp, #36]	; 0x24
 80176f8:	2320      	movs	r3, #32
 80176fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017702:	2330      	movs	r3, #48	; 0x30
 8017704:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178c8 <_vfiprintf_r+0x24c>
 8017708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801770c:	f04f 0901 	mov.w	r9, #1
 8017710:	4623      	mov	r3, r4
 8017712:	469a      	mov	sl, r3
 8017714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017718:	b10a      	cbz	r2, 801771e <_vfiprintf_r+0xa2>
 801771a:	2a25      	cmp	r2, #37	; 0x25
 801771c:	d1f9      	bne.n	8017712 <_vfiprintf_r+0x96>
 801771e:	ebba 0b04 	subs.w	fp, sl, r4
 8017722:	d00b      	beq.n	801773c <_vfiprintf_r+0xc0>
 8017724:	465b      	mov	r3, fp
 8017726:	4622      	mov	r2, r4
 8017728:	4629      	mov	r1, r5
 801772a:	4630      	mov	r0, r6
 801772c:	f7ff ff93 	bl	8017656 <__sfputs_r>
 8017730:	3001      	adds	r0, #1
 8017732:	f000 80aa 	beq.w	801788a <_vfiprintf_r+0x20e>
 8017736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017738:	445a      	add	r2, fp
 801773a:	9209      	str	r2, [sp, #36]	; 0x24
 801773c:	f89a 3000 	ldrb.w	r3, [sl]
 8017740:	2b00      	cmp	r3, #0
 8017742:	f000 80a2 	beq.w	801788a <_vfiprintf_r+0x20e>
 8017746:	2300      	movs	r3, #0
 8017748:	f04f 32ff 	mov.w	r2, #4294967295
 801774c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017750:	f10a 0a01 	add.w	sl, sl, #1
 8017754:	9304      	str	r3, [sp, #16]
 8017756:	9307      	str	r3, [sp, #28]
 8017758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801775c:	931a      	str	r3, [sp, #104]	; 0x68
 801775e:	4654      	mov	r4, sl
 8017760:	2205      	movs	r2, #5
 8017762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017766:	4858      	ldr	r0, [pc, #352]	; (80178c8 <_vfiprintf_r+0x24c>)
 8017768:	f7e8 fd3a 	bl	80001e0 <memchr>
 801776c:	9a04      	ldr	r2, [sp, #16]
 801776e:	b9d8      	cbnz	r0, 80177a8 <_vfiprintf_r+0x12c>
 8017770:	06d1      	lsls	r1, r2, #27
 8017772:	bf44      	itt	mi
 8017774:	2320      	movmi	r3, #32
 8017776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801777a:	0713      	lsls	r3, r2, #28
 801777c:	bf44      	itt	mi
 801777e:	232b      	movmi	r3, #43	; 0x2b
 8017780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017784:	f89a 3000 	ldrb.w	r3, [sl]
 8017788:	2b2a      	cmp	r3, #42	; 0x2a
 801778a:	d015      	beq.n	80177b8 <_vfiprintf_r+0x13c>
 801778c:	9a07      	ldr	r2, [sp, #28]
 801778e:	4654      	mov	r4, sl
 8017790:	2000      	movs	r0, #0
 8017792:	f04f 0c0a 	mov.w	ip, #10
 8017796:	4621      	mov	r1, r4
 8017798:	f811 3b01 	ldrb.w	r3, [r1], #1
 801779c:	3b30      	subs	r3, #48	; 0x30
 801779e:	2b09      	cmp	r3, #9
 80177a0:	d94e      	bls.n	8017840 <_vfiprintf_r+0x1c4>
 80177a2:	b1b0      	cbz	r0, 80177d2 <_vfiprintf_r+0x156>
 80177a4:	9207      	str	r2, [sp, #28]
 80177a6:	e014      	b.n	80177d2 <_vfiprintf_r+0x156>
 80177a8:	eba0 0308 	sub.w	r3, r0, r8
 80177ac:	fa09 f303 	lsl.w	r3, r9, r3
 80177b0:	4313      	orrs	r3, r2
 80177b2:	9304      	str	r3, [sp, #16]
 80177b4:	46a2      	mov	sl, r4
 80177b6:	e7d2      	b.n	801775e <_vfiprintf_r+0xe2>
 80177b8:	9b03      	ldr	r3, [sp, #12]
 80177ba:	1d19      	adds	r1, r3, #4
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	9103      	str	r1, [sp, #12]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	bfbb      	ittet	lt
 80177c4:	425b      	neglt	r3, r3
 80177c6:	f042 0202 	orrlt.w	r2, r2, #2
 80177ca:	9307      	strge	r3, [sp, #28]
 80177cc:	9307      	strlt	r3, [sp, #28]
 80177ce:	bfb8      	it	lt
 80177d0:	9204      	strlt	r2, [sp, #16]
 80177d2:	7823      	ldrb	r3, [r4, #0]
 80177d4:	2b2e      	cmp	r3, #46	; 0x2e
 80177d6:	d10c      	bne.n	80177f2 <_vfiprintf_r+0x176>
 80177d8:	7863      	ldrb	r3, [r4, #1]
 80177da:	2b2a      	cmp	r3, #42	; 0x2a
 80177dc:	d135      	bne.n	801784a <_vfiprintf_r+0x1ce>
 80177de:	9b03      	ldr	r3, [sp, #12]
 80177e0:	1d1a      	adds	r2, r3, #4
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	9203      	str	r2, [sp, #12]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	bfb8      	it	lt
 80177ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80177ee:	3402      	adds	r4, #2
 80177f0:	9305      	str	r3, [sp, #20]
 80177f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80178d8 <_vfiprintf_r+0x25c>
 80177f6:	7821      	ldrb	r1, [r4, #0]
 80177f8:	2203      	movs	r2, #3
 80177fa:	4650      	mov	r0, sl
 80177fc:	f7e8 fcf0 	bl	80001e0 <memchr>
 8017800:	b140      	cbz	r0, 8017814 <_vfiprintf_r+0x198>
 8017802:	2340      	movs	r3, #64	; 0x40
 8017804:	eba0 000a 	sub.w	r0, r0, sl
 8017808:	fa03 f000 	lsl.w	r0, r3, r0
 801780c:	9b04      	ldr	r3, [sp, #16]
 801780e:	4303      	orrs	r3, r0
 8017810:	3401      	adds	r4, #1
 8017812:	9304      	str	r3, [sp, #16]
 8017814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017818:	482c      	ldr	r0, [pc, #176]	; (80178cc <_vfiprintf_r+0x250>)
 801781a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801781e:	2206      	movs	r2, #6
 8017820:	f7e8 fcde 	bl	80001e0 <memchr>
 8017824:	2800      	cmp	r0, #0
 8017826:	d03f      	beq.n	80178a8 <_vfiprintf_r+0x22c>
 8017828:	4b29      	ldr	r3, [pc, #164]	; (80178d0 <_vfiprintf_r+0x254>)
 801782a:	bb1b      	cbnz	r3, 8017874 <_vfiprintf_r+0x1f8>
 801782c:	9b03      	ldr	r3, [sp, #12]
 801782e:	3307      	adds	r3, #7
 8017830:	f023 0307 	bic.w	r3, r3, #7
 8017834:	3308      	adds	r3, #8
 8017836:	9303      	str	r3, [sp, #12]
 8017838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801783a:	443b      	add	r3, r7
 801783c:	9309      	str	r3, [sp, #36]	; 0x24
 801783e:	e767      	b.n	8017710 <_vfiprintf_r+0x94>
 8017840:	fb0c 3202 	mla	r2, ip, r2, r3
 8017844:	460c      	mov	r4, r1
 8017846:	2001      	movs	r0, #1
 8017848:	e7a5      	b.n	8017796 <_vfiprintf_r+0x11a>
 801784a:	2300      	movs	r3, #0
 801784c:	3401      	adds	r4, #1
 801784e:	9305      	str	r3, [sp, #20]
 8017850:	4619      	mov	r1, r3
 8017852:	f04f 0c0a 	mov.w	ip, #10
 8017856:	4620      	mov	r0, r4
 8017858:	f810 2b01 	ldrb.w	r2, [r0], #1
 801785c:	3a30      	subs	r2, #48	; 0x30
 801785e:	2a09      	cmp	r2, #9
 8017860:	d903      	bls.n	801786a <_vfiprintf_r+0x1ee>
 8017862:	2b00      	cmp	r3, #0
 8017864:	d0c5      	beq.n	80177f2 <_vfiprintf_r+0x176>
 8017866:	9105      	str	r1, [sp, #20]
 8017868:	e7c3      	b.n	80177f2 <_vfiprintf_r+0x176>
 801786a:	fb0c 2101 	mla	r1, ip, r1, r2
 801786e:	4604      	mov	r4, r0
 8017870:	2301      	movs	r3, #1
 8017872:	e7f0      	b.n	8017856 <_vfiprintf_r+0x1da>
 8017874:	ab03      	add	r3, sp, #12
 8017876:	9300      	str	r3, [sp, #0]
 8017878:	462a      	mov	r2, r5
 801787a:	4b16      	ldr	r3, [pc, #88]	; (80178d4 <_vfiprintf_r+0x258>)
 801787c:	a904      	add	r1, sp, #16
 801787e:	4630      	mov	r0, r6
 8017880:	f7fd fe36 	bl	80154f0 <_printf_float>
 8017884:	4607      	mov	r7, r0
 8017886:	1c78      	adds	r0, r7, #1
 8017888:	d1d6      	bne.n	8017838 <_vfiprintf_r+0x1bc>
 801788a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801788c:	07d9      	lsls	r1, r3, #31
 801788e:	d405      	bmi.n	801789c <_vfiprintf_r+0x220>
 8017890:	89ab      	ldrh	r3, [r5, #12]
 8017892:	059a      	lsls	r2, r3, #22
 8017894:	d402      	bmi.n	801789c <_vfiprintf_r+0x220>
 8017896:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017898:	f7fd fc83 	bl	80151a2 <__retarget_lock_release_recursive>
 801789c:	89ab      	ldrh	r3, [r5, #12]
 801789e:	065b      	lsls	r3, r3, #25
 80178a0:	f53f af12 	bmi.w	80176c8 <_vfiprintf_r+0x4c>
 80178a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178a6:	e711      	b.n	80176cc <_vfiprintf_r+0x50>
 80178a8:	ab03      	add	r3, sp, #12
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	462a      	mov	r2, r5
 80178ae:	4b09      	ldr	r3, [pc, #36]	; (80178d4 <_vfiprintf_r+0x258>)
 80178b0:	a904      	add	r1, sp, #16
 80178b2:	4630      	mov	r0, r6
 80178b4:	f7fe f8c0 	bl	8015a38 <_printf_i>
 80178b8:	e7e4      	b.n	8017884 <_vfiprintf_r+0x208>
 80178ba:	bf00      	nop
 80178bc:	08018348 	.word	0x08018348
 80178c0:	08018368 	.word	0x08018368
 80178c4:	08018328 	.word	0x08018328
 80178c8:	080185f2 	.word	0x080185f2
 80178cc:	080185fc 	.word	0x080185fc
 80178d0:	080154f1 	.word	0x080154f1
 80178d4:	08017657 	.word	0x08017657
 80178d8:	080185f8 	.word	0x080185f8

080178dc <__swbuf_r>:
 80178dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178de:	460e      	mov	r6, r1
 80178e0:	4614      	mov	r4, r2
 80178e2:	4605      	mov	r5, r0
 80178e4:	b118      	cbz	r0, 80178ee <__swbuf_r+0x12>
 80178e6:	6983      	ldr	r3, [r0, #24]
 80178e8:	b90b      	cbnz	r3, 80178ee <__swbuf_r+0x12>
 80178ea:	f7fd fb95 	bl	8015018 <__sinit>
 80178ee:	4b21      	ldr	r3, [pc, #132]	; (8017974 <__swbuf_r+0x98>)
 80178f0:	429c      	cmp	r4, r3
 80178f2:	d12b      	bne.n	801794c <__swbuf_r+0x70>
 80178f4:	686c      	ldr	r4, [r5, #4]
 80178f6:	69a3      	ldr	r3, [r4, #24]
 80178f8:	60a3      	str	r3, [r4, #8]
 80178fa:	89a3      	ldrh	r3, [r4, #12]
 80178fc:	071a      	lsls	r2, r3, #28
 80178fe:	d52f      	bpl.n	8017960 <__swbuf_r+0x84>
 8017900:	6923      	ldr	r3, [r4, #16]
 8017902:	b36b      	cbz	r3, 8017960 <__swbuf_r+0x84>
 8017904:	6923      	ldr	r3, [r4, #16]
 8017906:	6820      	ldr	r0, [r4, #0]
 8017908:	1ac0      	subs	r0, r0, r3
 801790a:	6963      	ldr	r3, [r4, #20]
 801790c:	b2f6      	uxtb	r6, r6
 801790e:	4283      	cmp	r3, r0
 8017910:	4637      	mov	r7, r6
 8017912:	dc04      	bgt.n	801791e <__swbuf_r+0x42>
 8017914:	4621      	mov	r1, r4
 8017916:	4628      	mov	r0, r5
 8017918:	f7ff fa3a 	bl	8016d90 <_fflush_r>
 801791c:	bb30      	cbnz	r0, 801796c <__swbuf_r+0x90>
 801791e:	68a3      	ldr	r3, [r4, #8]
 8017920:	3b01      	subs	r3, #1
 8017922:	60a3      	str	r3, [r4, #8]
 8017924:	6823      	ldr	r3, [r4, #0]
 8017926:	1c5a      	adds	r2, r3, #1
 8017928:	6022      	str	r2, [r4, #0]
 801792a:	701e      	strb	r6, [r3, #0]
 801792c:	6963      	ldr	r3, [r4, #20]
 801792e:	3001      	adds	r0, #1
 8017930:	4283      	cmp	r3, r0
 8017932:	d004      	beq.n	801793e <__swbuf_r+0x62>
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	07db      	lsls	r3, r3, #31
 8017938:	d506      	bpl.n	8017948 <__swbuf_r+0x6c>
 801793a:	2e0a      	cmp	r6, #10
 801793c:	d104      	bne.n	8017948 <__swbuf_r+0x6c>
 801793e:	4621      	mov	r1, r4
 8017940:	4628      	mov	r0, r5
 8017942:	f7ff fa25 	bl	8016d90 <_fflush_r>
 8017946:	b988      	cbnz	r0, 801796c <__swbuf_r+0x90>
 8017948:	4638      	mov	r0, r7
 801794a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801794c:	4b0a      	ldr	r3, [pc, #40]	; (8017978 <__swbuf_r+0x9c>)
 801794e:	429c      	cmp	r4, r3
 8017950:	d101      	bne.n	8017956 <__swbuf_r+0x7a>
 8017952:	68ac      	ldr	r4, [r5, #8]
 8017954:	e7cf      	b.n	80178f6 <__swbuf_r+0x1a>
 8017956:	4b09      	ldr	r3, [pc, #36]	; (801797c <__swbuf_r+0xa0>)
 8017958:	429c      	cmp	r4, r3
 801795a:	bf08      	it	eq
 801795c:	68ec      	ldreq	r4, [r5, #12]
 801795e:	e7ca      	b.n	80178f6 <__swbuf_r+0x1a>
 8017960:	4621      	mov	r1, r4
 8017962:	4628      	mov	r0, r5
 8017964:	f000 f81a 	bl	801799c <__swsetup_r>
 8017968:	2800      	cmp	r0, #0
 801796a:	d0cb      	beq.n	8017904 <__swbuf_r+0x28>
 801796c:	f04f 37ff 	mov.w	r7, #4294967295
 8017970:	e7ea      	b.n	8017948 <__swbuf_r+0x6c>
 8017972:	bf00      	nop
 8017974:	08018348 	.word	0x08018348
 8017978:	08018368 	.word	0x08018368
 801797c:	08018328 	.word	0x08018328

08017980 <__ascii_wctomb>:
 8017980:	b149      	cbz	r1, 8017996 <__ascii_wctomb+0x16>
 8017982:	2aff      	cmp	r2, #255	; 0xff
 8017984:	bf85      	ittet	hi
 8017986:	238a      	movhi	r3, #138	; 0x8a
 8017988:	6003      	strhi	r3, [r0, #0]
 801798a:	700a      	strbls	r2, [r1, #0]
 801798c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017990:	bf98      	it	ls
 8017992:	2001      	movls	r0, #1
 8017994:	4770      	bx	lr
 8017996:	4608      	mov	r0, r1
 8017998:	4770      	bx	lr
	...

0801799c <__swsetup_r>:
 801799c:	4b32      	ldr	r3, [pc, #200]	; (8017a68 <__swsetup_r+0xcc>)
 801799e:	b570      	push	{r4, r5, r6, lr}
 80179a0:	681d      	ldr	r5, [r3, #0]
 80179a2:	4606      	mov	r6, r0
 80179a4:	460c      	mov	r4, r1
 80179a6:	b125      	cbz	r5, 80179b2 <__swsetup_r+0x16>
 80179a8:	69ab      	ldr	r3, [r5, #24]
 80179aa:	b913      	cbnz	r3, 80179b2 <__swsetup_r+0x16>
 80179ac:	4628      	mov	r0, r5
 80179ae:	f7fd fb33 	bl	8015018 <__sinit>
 80179b2:	4b2e      	ldr	r3, [pc, #184]	; (8017a6c <__swsetup_r+0xd0>)
 80179b4:	429c      	cmp	r4, r3
 80179b6:	d10f      	bne.n	80179d8 <__swsetup_r+0x3c>
 80179b8:	686c      	ldr	r4, [r5, #4]
 80179ba:	89a3      	ldrh	r3, [r4, #12]
 80179bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179c0:	0719      	lsls	r1, r3, #28
 80179c2:	d42c      	bmi.n	8017a1e <__swsetup_r+0x82>
 80179c4:	06dd      	lsls	r5, r3, #27
 80179c6:	d411      	bmi.n	80179ec <__swsetup_r+0x50>
 80179c8:	2309      	movs	r3, #9
 80179ca:	6033      	str	r3, [r6, #0]
 80179cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80179d0:	81a3      	strh	r3, [r4, #12]
 80179d2:	f04f 30ff 	mov.w	r0, #4294967295
 80179d6:	e03e      	b.n	8017a56 <__swsetup_r+0xba>
 80179d8:	4b25      	ldr	r3, [pc, #148]	; (8017a70 <__swsetup_r+0xd4>)
 80179da:	429c      	cmp	r4, r3
 80179dc:	d101      	bne.n	80179e2 <__swsetup_r+0x46>
 80179de:	68ac      	ldr	r4, [r5, #8]
 80179e0:	e7eb      	b.n	80179ba <__swsetup_r+0x1e>
 80179e2:	4b24      	ldr	r3, [pc, #144]	; (8017a74 <__swsetup_r+0xd8>)
 80179e4:	429c      	cmp	r4, r3
 80179e6:	bf08      	it	eq
 80179e8:	68ec      	ldreq	r4, [r5, #12]
 80179ea:	e7e6      	b.n	80179ba <__swsetup_r+0x1e>
 80179ec:	0758      	lsls	r0, r3, #29
 80179ee:	d512      	bpl.n	8017a16 <__swsetup_r+0x7a>
 80179f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80179f2:	b141      	cbz	r1, 8017a06 <__swsetup_r+0x6a>
 80179f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179f8:	4299      	cmp	r1, r3
 80179fa:	d002      	beq.n	8017a02 <__swsetup_r+0x66>
 80179fc:	4630      	mov	r0, r6
 80179fe:	f7fd fbf7 	bl	80151f0 <_free_r>
 8017a02:	2300      	movs	r3, #0
 8017a04:	6363      	str	r3, [r4, #52]	; 0x34
 8017a06:	89a3      	ldrh	r3, [r4, #12]
 8017a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a0c:	81a3      	strh	r3, [r4, #12]
 8017a0e:	2300      	movs	r3, #0
 8017a10:	6063      	str	r3, [r4, #4]
 8017a12:	6923      	ldr	r3, [r4, #16]
 8017a14:	6023      	str	r3, [r4, #0]
 8017a16:	89a3      	ldrh	r3, [r4, #12]
 8017a18:	f043 0308 	orr.w	r3, r3, #8
 8017a1c:	81a3      	strh	r3, [r4, #12]
 8017a1e:	6923      	ldr	r3, [r4, #16]
 8017a20:	b94b      	cbnz	r3, 8017a36 <__swsetup_r+0x9a>
 8017a22:	89a3      	ldrh	r3, [r4, #12]
 8017a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a2c:	d003      	beq.n	8017a36 <__swsetup_r+0x9a>
 8017a2e:	4621      	mov	r1, r4
 8017a30:	4630      	mov	r0, r6
 8017a32:	f000 f847 	bl	8017ac4 <__smakebuf_r>
 8017a36:	89a0      	ldrh	r0, [r4, #12]
 8017a38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a3c:	f010 0301 	ands.w	r3, r0, #1
 8017a40:	d00a      	beq.n	8017a58 <__swsetup_r+0xbc>
 8017a42:	2300      	movs	r3, #0
 8017a44:	60a3      	str	r3, [r4, #8]
 8017a46:	6963      	ldr	r3, [r4, #20]
 8017a48:	425b      	negs	r3, r3
 8017a4a:	61a3      	str	r3, [r4, #24]
 8017a4c:	6923      	ldr	r3, [r4, #16]
 8017a4e:	b943      	cbnz	r3, 8017a62 <__swsetup_r+0xc6>
 8017a50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a54:	d1ba      	bne.n	80179cc <__swsetup_r+0x30>
 8017a56:	bd70      	pop	{r4, r5, r6, pc}
 8017a58:	0781      	lsls	r1, r0, #30
 8017a5a:	bf58      	it	pl
 8017a5c:	6963      	ldrpl	r3, [r4, #20]
 8017a5e:	60a3      	str	r3, [r4, #8]
 8017a60:	e7f4      	b.n	8017a4c <__swsetup_r+0xb0>
 8017a62:	2000      	movs	r0, #0
 8017a64:	e7f7      	b.n	8017a56 <__swsetup_r+0xba>
 8017a66:	bf00      	nop
 8017a68:	20000024 	.word	0x20000024
 8017a6c:	08018348 	.word	0x08018348
 8017a70:	08018368 	.word	0x08018368
 8017a74:	08018328 	.word	0x08018328

08017a78 <__swhatbuf_r>:
 8017a78:	b570      	push	{r4, r5, r6, lr}
 8017a7a:	460e      	mov	r6, r1
 8017a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a80:	2900      	cmp	r1, #0
 8017a82:	b096      	sub	sp, #88	; 0x58
 8017a84:	4614      	mov	r4, r2
 8017a86:	461d      	mov	r5, r3
 8017a88:	da08      	bge.n	8017a9c <__swhatbuf_r+0x24>
 8017a8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	602a      	str	r2, [r5, #0]
 8017a92:	061a      	lsls	r2, r3, #24
 8017a94:	d410      	bmi.n	8017ab8 <__swhatbuf_r+0x40>
 8017a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a9a:	e00e      	b.n	8017aba <__swhatbuf_r+0x42>
 8017a9c:	466a      	mov	r2, sp
 8017a9e:	f000 f851 	bl	8017b44 <_fstat_r>
 8017aa2:	2800      	cmp	r0, #0
 8017aa4:	dbf1      	blt.n	8017a8a <__swhatbuf_r+0x12>
 8017aa6:	9a01      	ldr	r2, [sp, #4]
 8017aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017ab0:	425a      	negs	r2, r3
 8017ab2:	415a      	adcs	r2, r3
 8017ab4:	602a      	str	r2, [r5, #0]
 8017ab6:	e7ee      	b.n	8017a96 <__swhatbuf_r+0x1e>
 8017ab8:	2340      	movs	r3, #64	; 0x40
 8017aba:	2000      	movs	r0, #0
 8017abc:	6023      	str	r3, [r4, #0]
 8017abe:	b016      	add	sp, #88	; 0x58
 8017ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08017ac4 <__smakebuf_r>:
 8017ac4:	898b      	ldrh	r3, [r1, #12]
 8017ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ac8:	079d      	lsls	r5, r3, #30
 8017aca:	4606      	mov	r6, r0
 8017acc:	460c      	mov	r4, r1
 8017ace:	d507      	bpl.n	8017ae0 <__smakebuf_r+0x1c>
 8017ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ad4:	6023      	str	r3, [r4, #0]
 8017ad6:	6123      	str	r3, [r4, #16]
 8017ad8:	2301      	movs	r3, #1
 8017ada:	6163      	str	r3, [r4, #20]
 8017adc:	b002      	add	sp, #8
 8017ade:	bd70      	pop	{r4, r5, r6, pc}
 8017ae0:	ab01      	add	r3, sp, #4
 8017ae2:	466a      	mov	r2, sp
 8017ae4:	f7ff ffc8 	bl	8017a78 <__swhatbuf_r>
 8017ae8:	9900      	ldr	r1, [sp, #0]
 8017aea:	4605      	mov	r5, r0
 8017aec:	4630      	mov	r0, r6
 8017aee:	f7fd fbeb 	bl	80152c8 <_malloc_r>
 8017af2:	b948      	cbnz	r0, 8017b08 <__smakebuf_r+0x44>
 8017af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017af8:	059a      	lsls	r2, r3, #22
 8017afa:	d4ef      	bmi.n	8017adc <__smakebuf_r+0x18>
 8017afc:	f023 0303 	bic.w	r3, r3, #3
 8017b00:	f043 0302 	orr.w	r3, r3, #2
 8017b04:	81a3      	strh	r3, [r4, #12]
 8017b06:	e7e3      	b.n	8017ad0 <__smakebuf_r+0xc>
 8017b08:	4b0d      	ldr	r3, [pc, #52]	; (8017b40 <__smakebuf_r+0x7c>)
 8017b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017b0c:	89a3      	ldrh	r3, [r4, #12]
 8017b0e:	6020      	str	r0, [r4, #0]
 8017b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b14:	81a3      	strh	r3, [r4, #12]
 8017b16:	9b00      	ldr	r3, [sp, #0]
 8017b18:	6163      	str	r3, [r4, #20]
 8017b1a:	9b01      	ldr	r3, [sp, #4]
 8017b1c:	6120      	str	r0, [r4, #16]
 8017b1e:	b15b      	cbz	r3, 8017b38 <__smakebuf_r+0x74>
 8017b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b24:	4630      	mov	r0, r6
 8017b26:	f000 f81f 	bl	8017b68 <_isatty_r>
 8017b2a:	b128      	cbz	r0, 8017b38 <__smakebuf_r+0x74>
 8017b2c:	89a3      	ldrh	r3, [r4, #12]
 8017b2e:	f023 0303 	bic.w	r3, r3, #3
 8017b32:	f043 0301 	orr.w	r3, r3, #1
 8017b36:	81a3      	strh	r3, [r4, #12]
 8017b38:	89a0      	ldrh	r0, [r4, #12]
 8017b3a:	4305      	orrs	r5, r0
 8017b3c:	81a5      	strh	r5, [r4, #12]
 8017b3e:	e7cd      	b.n	8017adc <__smakebuf_r+0x18>
 8017b40:	08014fb1 	.word	0x08014fb1

08017b44 <_fstat_r>:
 8017b44:	b538      	push	{r3, r4, r5, lr}
 8017b46:	4d07      	ldr	r5, [pc, #28]	; (8017b64 <_fstat_r+0x20>)
 8017b48:	2300      	movs	r3, #0
 8017b4a:	4604      	mov	r4, r0
 8017b4c:	4608      	mov	r0, r1
 8017b4e:	4611      	mov	r1, r2
 8017b50:	602b      	str	r3, [r5, #0]
 8017b52:	f7f1 fe80 	bl	8009856 <_fstat>
 8017b56:	1c43      	adds	r3, r0, #1
 8017b58:	d102      	bne.n	8017b60 <_fstat_r+0x1c>
 8017b5a:	682b      	ldr	r3, [r5, #0]
 8017b5c:	b103      	cbz	r3, 8017b60 <_fstat_r+0x1c>
 8017b5e:	6023      	str	r3, [r4, #0]
 8017b60:	bd38      	pop	{r3, r4, r5, pc}
 8017b62:	bf00      	nop
 8017b64:	2000a428 	.word	0x2000a428

08017b68 <_isatty_r>:
 8017b68:	b538      	push	{r3, r4, r5, lr}
 8017b6a:	4d06      	ldr	r5, [pc, #24]	; (8017b84 <_isatty_r+0x1c>)
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	4604      	mov	r4, r0
 8017b70:	4608      	mov	r0, r1
 8017b72:	602b      	str	r3, [r5, #0]
 8017b74:	f7f1 fe7f 	bl	8009876 <_isatty>
 8017b78:	1c43      	adds	r3, r0, #1
 8017b7a:	d102      	bne.n	8017b82 <_isatty_r+0x1a>
 8017b7c:	682b      	ldr	r3, [r5, #0]
 8017b7e:	b103      	cbz	r3, 8017b82 <_isatty_r+0x1a>
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	bd38      	pop	{r3, r4, r5, pc}
 8017b84:	2000a428 	.word	0x2000a428

08017b88 <_init>:
 8017b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b8a:	bf00      	nop
 8017b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b8e:	bc08      	pop	{r3}
 8017b90:	469e      	mov	lr, r3
 8017b92:	4770      	bx	lr

08017b94 <_fini>:
 8017b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b96:	bf00      	nop
 8017b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b9a:	bc08      	pop	{r3}
 8017b9c:	469e      	mov	lr, r3
 8017b9e:	4770      	bx	lr
