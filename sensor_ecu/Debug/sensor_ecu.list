
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f910  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800faa0  0800faa0  0001faa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe5c  0800fe5c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe5c  0800fe5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe64  0800fe64  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0800fe64  0800fe64  0001fe64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe80  0800fe80  0001fe80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800fe84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000098e8  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20009970  20009970  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c6ba  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000087bd  00000000  00000000  0005c772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028d8  00000000  00000000  00064f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000025d8  00000000  00000000  00067808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000300bf  00000000  00000000  00069de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036584  00000000  00000000  00099e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9eb8  00000000  00000000  000d0423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ca2db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b580  00000000  00000000  001ca32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa88 	.word	0x0800fa88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800fa88 	.word	0x0800fa88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	460b      	mov	r3, r1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	4613      	mov	r3, r2
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	711a      	strb	r2, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	79ba      	ldrb	r2, [r7, #6]
 800059a:	715a      	strb	r2, [r3, #5]
 800059c:	68f9      	ldr	r1, [r7, #12]
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	f04f 0300 	mov.w	r3, #0
 80005a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80005aa:	68f9      	ldr	r1, [r7, #12]
 80005ac:	f04f 0200 	mov.w	r2, #0
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80005c6:	b490      	push	{r4, r7}
 80005c8:	b084      	sub	sp, #16
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2204      	movs	r2, #4
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	e009      	b.n	8000606 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000622:	b2d4      	uxtb	r4, r2
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	0e0a      	lsrs	r2, r1, #24
 8000634:	2300      	movs	r3, #0
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	4323      	orrs	r3, r4
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	0a02      	lsrs	r2, r0, #8
 8000650:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000654:	0a0b      	lsrs	r3, r1, #8
 8000656:	b2d4      	uxtb	r4, r2
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	0c0a      	lsrs	r2, r1, #16
 8000668:	2300      	movs	r3, #0
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	4322      	orrs	r2, r4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	0c02      	lsrs	r2, r0, #16
 8000686:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800068a:	0c0b      	lsrs	r3, r1, #16
 800068c:	b2d4      	uxtb	r4, r2
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	0a0a      	lsrs	r2, r1, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3302      	adds	r3, #2
 80006a6:	4322      	orrs	r2, r4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	0e02      	lsrs	r2, r0, #24
 80006bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006c0:	0e0b      	lsrs	r3, r1, #24
 80006c2:	b2d4      	uxtb	r4, r2
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	000a      	movs	r2, r1
 80006d4:	2300      	movs	r3, #0
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3303      	adds	r3, #3
 80006dc:	4322      	orrs	r2, r4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	000a      	movs	r2, r1
 80006f2:	2300      	movs	r3, #0
 80006f4:	b2d4      	uxtb	r4, r2
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	0e02      	lsrs	r2, r0, #24
 8000706:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800070a:	0e0b      	lsrs	r3, r1, #24
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3304      	adds	r3, #4
 8000712:	4322      	orrs	r2, r4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	0a0a      	lsrs	r2, r1, #8
 8000728:	2300      	movs	r3, #0
 800072a:	b2d4      	uxtb	r4, r2
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	0c02      	lsrs	r2, r0, #16
 800073c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000740:	0c0b      	lsrs	r3, r1, #16
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3305      	adds	r3, #5
 8000748:	4322      	orrs	r2, r4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	0c0a      	lsrs	r2, r1, #16
 800075e:	2300      	movs	r3, #0
 8000760:	b2d4      	uxtb	r4, r2
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000768:	f04f 0200 	mov.w	r2, #0
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	0a02      	lsrs	r2, r0, #8
 8000772:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000776:	0a0b      	lsrs	r3, r1, #8
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3306      	adds	r3, #6
 800077e:	4322      	orrs	r2, r4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	0e0a      	lsrs	r2, r1, #24
 8000794:	2300      	movs	r3, #0
 8000796:	b2d1      	uxtb	r1, r2
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3307      	adds	r3, #7
 80007a4:	430a      	orrs	r2, r1
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
        }
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc90      	pop	{r4, r7}
 80007b2:	4770      	bx	lr

080007b4 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	461a      	mov	r2, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	6053      	str	r3, [r2, #4]
 80007c6:	6093      	str	r3, [r2, #8]
 80007c8:	60d3      	str	r3, [r2, #12]
 80007ca:	6113      	str	r3, [r2, #16]
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ffe3 	bl	80007b4 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f103 0218 	add.w	r2, r3, #24
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68f9      	ldr	r1, [r7, #12]
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f7ff fee4 	bl	80005c6 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 80007fe:	bf00      	nop
        }
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffde 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <_ZNK3can11MessageBase4sendEm+0x54>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	2300      	movs	r3, #0
 800082a:	2200      	movs	r2, #0
 800082c:	f00a f984 	bl	800ab38 <osMessageQueuePut>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d008      	beq.n	8000852 <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8000840:	f00d fc70 	bl	800e124 <vPortEnterCritical>
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <_ZNK3can11MessageBase4sendEm+0x58>)
 800084a:	f00e f9e1 	bl	800ec10 <iprintf>
 800084e:	f00d fc99 	bl	800e184 <vPortExitCritical>
            }
        }
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b0 	.word	0x200000b0
 8000860:	0800faa0 	.word	0x0800faa0

08000864 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	2300      	movs	r3, #0
 8000870:	2204      	movs	r2, #4
 8000872:	2181      	movs	r1, #129	; 0x81
 8000874:	f7ff fe7e 	bl	8000574 <_ZN3can11MessageBaseC1Emhb>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 8000882:	b5b0      	push	{r4, r5, r7, lr}
 8000884:	b08c      	sub	sp, #48	; 0x30
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 800088a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffe5 	bl	8000864 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f00c fe29 	bl	800d504 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d001      	beq.n	80008be <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80008ba:	f000 fd4d 	bl	8001358 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d103      	bne.n	80008cc <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d00b      	beq.n	80008e4 <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	461c      	mov	r4, r3
 80008d2:	4615      	mov	r5, r2
 80008d4:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff92 	bl	8000808 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80008e8:	e7db      	b.n	80008a2 <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

080008ec <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5b 	bl	80007b4 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 80008fe:	f240 7301 	movw	r3, #1793	; 0x701
 8000902:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 800090c:	f000 fc44 	bl	8001198 <_ZN7canzero9getStatusEv>
 8000910:	4603      	mov	r3, r0
 8000912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	f107 010c 	add.w	r1, r7, #12
 800091e:	2300      	movs	r3, #0
 8000920:	2200      	movs	r2, #0
 8000922:	f00a f909 	bl	800ab38 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 8000926:	f000 f841 	bl	80009ac <_ZN7canzero9heartbeat11getIntervalEv>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	4a06      	ldr	r2, [pc, #24]	; (8000950 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	099b      	lsrs	r3, r3, #6
 800093e:	4618      	mov	r0, r3
 8000940:	f009 ff5e 	bl	800a800 <osDelay>
		frame ++;
 8000944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000946:	3301      	adds	r3, #1
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 800094a:	e7df      	b.n	800090c <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 800094c:	200000b0 	.word	0x200000b0
 8000950:	10624dd3 	.word	0x10624dd3

08000954 <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b08d      	sub	sp, #52	; 0x34
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 800095e:	681c      	ldr	r4, [r3, #0]
 8000960:	f000 f824 	bl	80009ac <_ZN7canzero9heartbeat11getIntervalEv>
 8000964:	4603      	mov	r3, r0
 8000966:	3305      	adds	r3, #5
 8000968:	461a      	mov	r2, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	099b      	lsrs	r3, r3, #6
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	2224      	movs	r2, #36	; 0x24
 8000980:	4620      	mov	r0, r4
 8000982:	f00b fb7f 	bl	800c084 <xStreamBufferReceive>
 8000986:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0e2      	beq.n	800095c <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 8000996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fbe0 	bl	8001160 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80009a0:	e7dc      	b.n	800095c <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	10624dd3 	.word	0x10624dd3

080009ac <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80009b0:	f002 ffec 	bl	800398c <_Z24OD_HeartbeatInterval_getv>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_Z41__static_initialization_and_destruction_0ii>:
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d10c      	bne.n	80009e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d107      	bne.n	80009e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2100      	movs	r1, #0
 80009da:	20c8      	movs	r0, #200	; 0xc8
 80009dc:	f00b f9d2 	bl	800bd84 <xStreamBufferGenericCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000a4 	.word	0x200000a4

080009f4 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff ffdd 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_Z9processRX9RxMessage>:
  /**
   * @brief function that process all node specific messages
   *
   * @param message
   */
void processRX(RxMessage message) {
 8000a04:	b084      	sub	sp, #16
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	f107 0c08 	add.w	ip, r7, #8
 8000a0e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8000a12:	f107 0008 	add.w	r0, r7, #8
 8000a16:	f000 f813 	bl	8000a40 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d007      	beq.n	8000a30 <_Z9processRX9RxMessage+0x2c>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message), 10);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <_Z9processRX9RxMessage+0x38>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	230a      	movs	r3, #10
 8000a26:	2224      	movs	r2, #36	; 0x24
 8000a28:	f107 0108 	add.w	r1, r7, #8
 8000a2c:	f00b fa38 	bl	800bea0 <xStreamBufferSend>
		else {
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
		}
	}
	*/
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr
 8000a3c:	200000a8 	.word	0x200000a8

08000a40 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d109      	bne.n	8000a64 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f240 12c1 	movw	r2, #449	; 0x1c1
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	bf0c      	ite	eq
 8000a5c:	2301      	moveq	r3, #1
 8000a5e:	2300      	movne	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	e000      	b.n	8000a66 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8000a64:	2300      	movs	r3, #0
    }
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <_Z41__static_initialization_and_destruction_0ii>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d10c      	bne.n	8000a9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d107      	bne.n	8000a9e <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2100      	movs	r1, #0
 8000a92:	20c8      	movs	r0, #200	; 0xc8
 8000a94:	f00b f976 	bl	800bd84 <xStreamBufferGenericCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000a9c:	6013      	str	r3, [r2, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000a8 	.word	0x200000a8

08000aac <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ffdd 	bl	8000a74 <_Z41__static_initialization_and_destruction_0ii>
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10c      	bne.n	8000ae6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d107      	bne.n	8000ae6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000ad8:	2124      	movs	r1, #36	; 0x24
 8000ada:	2010      	movs	r0, #16
 8000adc:	f009 ffb9 	bl	800aa52 <osMessageQueueNew>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	0800fcbc 	.word	0x0800fcbc
 8000af4:	200000ac 	.word	0x200000ac

08000af8 <_GLOBAL__sub_I_czReceiveQueue>:
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ffdb 	bl	8000abc <_Z41__static_initialization_and_destruction_0ii>
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0c:	f3bf 8f4f 	dsb	sy
}
 8000b10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <__NVIC_SystemReset+0x24>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_SystemReset+0x28>)
 8000b1e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b22:	f3bf 8f4f 	dsb	sy
}
 8000b26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <__NVIC_SystemReset+0x20>
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	05fa0004 	.word	0x05fa0004

08000b34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d009      	beq.n	8000b60 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <ITM_SendChar+0x2c>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <ITM_SendChar+0x2e>
 8000b60:	2300      	movs	r3, #0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d010      	beq.n	8000b88 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf0c      	ite	eq
 8000b70:	2301      	moveq	r3, #1
 8000b72:	2300      	movne	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <ITM_SendChar+0x4a>
    {
      __NOP();
 8000b7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b7c:	e7f3      	b.n	8000b66 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b7e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_Z3logPKc>:
#ifdef DEBUG

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 */
inline void log(const char *str) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	while (*str != '\0') {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d008      	beq.n	8000bb8 <_Z3logPKc+0x22>
		ITM_SendChar(*str);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffc2 	bl	8000b34 <ITM_SendChar>
		str++;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
	while (*str != '\0') {
 8000bb6:	e7f2      	b.n	8000b9e <_Z3logPKc+0x8>
	}
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_Z5loglnv>:

inline void logln() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	ITM_SendChar('\n');
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f7ff ffb5 	bl	8000b34 <ITM_SendChar>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_Z5loglnPKc>:

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 * and appends a line break at the end.
 */
inline void logln(const char *str) {
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	log(str);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffdd 	bl	8000b96 <_Z3logPKc>
	logln();
 8000bdc:	f7ff fff0 	bl	8000bc0 <_Z5loglnv>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"
#include "log_dep.hpp"

void cz_receive_task(void* argv) {
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	b092      	sub	sp, #72	; 0x48
 8000bec:	af06      	add	r7, sp, #24
 8000bee:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <_Z15cz_receive_taskPv+0xac>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f009 fffb 	bl	800abf8 <osMessageQueueGet>
		logln("Received Message");
 8000c02:	4825      	ldr	r0, [pc, #148]	; (8000c98 <_Z15cz_receive_taskPv+0xb0>)
 8000c04:	f7ff ffe3 	bl	8000bce <_Z5loglnPKc>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d136      	bne.n	8000c7c <_Z15cz_receive_taskPv+0x94>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f844 	bl	8000ca0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d005      	beq.n	8000c2a <_Z15cz_receive_taskPv+0x42>
				if(message.rxBuf[0]==0xff) {
 8000c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d1e4      	bne.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8000c26:	f7ff ff6f 	bl	8000b08 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f84f 	bl	8000cd2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <_Z15cz_receive_taskPv+0x5e>
				handleSDORequestUpload(message);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fa4a 	bl	80030d8 <_Z22handleSDORequestUploadRK9RxMessage>
 8000c44:	e7d4      	b.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f85a 	bl	8000d04 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <_Z15cz_receive_taskPv+0x7a>
				handleSDORequestDownload(message);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fe9d 	bl	800299a <_Z24handleSDORequestDownloadRK9RxMessage>
 8000c60:	e7c6      	b.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8000c62:	466d      	mov	r5, sp
 8000c64:	f107 041c 	add.w	r4, r7, #28
 8000c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	602b      	str	r3, [r5, #0]
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c76:	f7ff fec5 	bl	8000a04 <_Z9processRX9RxMessage>
 8000c7a:	e7b9      	b.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d1b6      	bne.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8000c82:	f00d fa4f 	bl	800e124 <vPortEnterCritical>
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <_Z15cz_receive_taskPv+0xb4>)
 8000c88:	f00e f848 	bl	800ed1c <puts>
 8000c8c:	f00d fa7a 	bl	800e184 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8000c90:	e7ae      	b.n	8000bf0 <_Z15cz_receive_taskPv+0x8>
 8000c92:	bf00      	nop
 8000c94:	200000ac 	.word	0x200000ac
 8000c98:	0800fae4 	.word	0x0800fae4
 8000c9c:	0800faf8 	.word	0x0800faf8

08000ca0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f240 7281 	movw	r2, #1921	; 0x781
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	bf0c      	ite	eq
 8000cbc:	2301      	moveq	r3, #1
 8000cbe:	2300      	movne	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	e000      	b.n	8000cc6 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8000cc4:	2300      	movs	r3, #0
    }
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8000cea:	4293      	cmp	r3, r2
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	e000      	b.n	8000cf8 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8000cf6:	2300      	movs	r3, #0
    }
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f240 6201 	movw	r2, #1537	; 0x601
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	e000      	b.n	8000d2a <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8000d28:	2300      	movs	r3, #0
    }
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d10c      	bne.n	8000d62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d107      	bne.n	8000d62 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000d54:	2120      	movs	r1, #32
 8000d56:	2010      	movs	r0, #16
 8000d58:	f009 fe7b 	bl	800aa52 <osMessageQueueNew>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	0800fcd4 	.word	0x0800fcd4
 8000d70:	200000b0 	.word	0x200000b0

08000d74 <_GLOBAL__sub_I_czSendQueue>:
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ffdb 	bl	8000d38 <_Z41__static_initialization_and_destruction_0ii>
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_Z13cz_send_entryPv>:

//TODO remove me.
#include "log_dep.hpp"


void cz_send_entry(void* argv){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fd0f 	bl	80007b4 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <_Z13cz_send_entryPv+0x170>)
 8000d9c:	6818      	ldr	r0, [r3, #0]
 8000d9e:	f107 010c 	add.w	r1, r7, #12
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	2200      	movs	r2, #0
 8000da8:	f009 ff26 	bl	800abf8 <osMessageQueueGet>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf14      	ite	ne
 8000db2:	2301      	movne	r3, #1
 8000db4:	2300      	moveq	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8000dbc:	f004 fe5c 	bl	8005a78 <Error_Handler>
		}
		if(sendMessage.txHeader.DLC>8){
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d901      	bls.n	8000dca <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8000dc6:	f004 fe57 	bl	8005a78 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	041b      	lsls	r3, r3, #16
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dde:	d102      	bne.n	8000de6 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8000de0:	4b45      	ldr	r3, [pc, #276]	; (8000ef8 <_Z13cz_send_entryPv+0x174>)
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
 8000de4:	e010      	b.n	8000e08 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000dec:	d102      	bne.n	8000df4 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8000dee:	4b43      	ldr	r3, [pc, #268]	; (8000efc <_Z13cz_send_entryPv+0x178>)
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
 8000df2:	e009      	b.n	8000e08 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <_Z13cz_send_entryPv+0x174>)
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
 8000e02:	e001      	b.n	8000e08 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <_Z13cz_send_entryPv+0x178>)
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8000e08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e0a:	f006 fa1a 	bl	8007242 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf14      	ite	ne
 8000e14:	2301      	movne	r3, #1
 8000e16:	2300      	moveq	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d016      	beq.n	8000e4c <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8000e1e:	f107 0008 	add.w	r0, r7, #8
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	f103 0218 	add.w	r2, r3, #24
 8000e2a:	f107 010c 	add.w	r1, r7, #12
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e32:	f006 f92b 	bl	800708c <HAL_CAN_AddTxMessage>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf14      	ite	ne
 8000e3c:	2301      	movne	r3, #1
 8000e3e:	2300      	moveq	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d051      	beq.n	8000eea <_Z13cz_send_entryPv+0x166>
				/* Transmission request Error */
				Error_Handler();
 8000e46:	f004 fe17 	bl	8005a78 <Error_Handler>
 8000e4a:	e04e      	b.n	8000eea <_Z13cz_send_entryPv+0x166>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	4a2a      	ldr	r2, [pc, #168]	; (8000ef8 <_Z13cz_send_entryPv+0x174>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d108      	bne.n	8000e66 <_Z13cz_send_entryPv+0xe2>
				logln("Failed to send: CAN1 Mailbox overflowed");
 8000e54:	482a      	ldr	r0, [pc, #168]	; (8000f00 <_Z13cz_send_entryPv+0x17c>)
 8000e56:	f7ff feba 	bl	8000bce <_Z5loglnPKc>
				OD_CAN1_DelayedTxMessages++;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <_Z13cz_send_entryPv+0x180>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <_Z13cz_send_entryPv+0x180>)
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e007      	b.n	8000e76 <_Z13cz_send_entryPv+0xf2>
			} else {
				logln("Failed to send: CAN2 Mailbox overflowed");
 8000e66:	4828      	ldr	r0, [pc, #160]	; (8000f08 <_Z13cz_send_entryPv+0x184>)
 8000e68:	f7ff feb1 	bl	8000bce <_Z5loglnPKc>
				OD_CAN2_DelayedTxMessages++;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <_Z13cz_send_entryPv+0x188>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4a26      	ldr	r2, [pc, #152]	; (8000f0c <_Z13cz_send_entryPv+0x188>)
 8000e74:	6013      	str	r3, [r2, #0]
			}

			osDelay(1);		// Use smallest delay possible
 8000e76:	2001      	movs	r0, #1
 8000e78:	f009 fcc2 	bl	800a800 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8000e7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e7e:	f006 f9e0 	bl	8007242 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf14      	ite	ne
 8000e88:	2301      	movne	r3, #1
 8000e8a:	2300      	moveq	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d016      	beq.n	8000ec0 <_Z13cz_send_entryPv+0x13c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8000e92:	f107 0008 	add.w	r0, r7, #8
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	f103 0218 	add.w	r2, r3, #24
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ea6:	f006 f8f1 	bl	800708c <HAL_CAN_AddTxMessage>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bf14      	ite	ne
 8000eb0:	2301      	movne	r3, #1
 8000eb2:	2300      	moveq	r3, #0
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d017      	beq.n	8000eea <_Z13cz_send_entryPv+0x166>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8000eba:	f000 fa5e 	bl	800137a <_ZN7canzero32handle_trasmission_request_errorEv>
 8000ebe:	e014      	b.n	8000eea <_Z13cz_send_entryPv+0x166>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <_Z13cz_send_entryPv+0x174>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d108      	bne.n	8000eda <_Z13cz_send_entryPv+0x156>
					OD_CAN1_DiscardedTxMessages++;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_Z13cz_send_entryPv+0x18c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <_Z13cz_send_entryPv+0x18c>)
 8000ed0:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <_Z13cz_send_entryPv+0x174>)
 8000ed4:	f000 fa47 	bl	8001366 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8000ed8:	e007      	b.n	8000eea <_Z13cz_send_entryPv+0x166>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <_Z13cz_send_entryPv+0x190>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <_Z13cz_send_entryPv+0x190>)
 8000ee2:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <_Z13cz_send_entryPv+0x178>)
 8000ee6:	f000 fa3e 	bl	8001366 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8000eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eec:	3301      	adds	r3, #1
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8000ef0:	e753      	b.n	8000d9a <_Z13cz_send_entryPv+0x16>
 8000ef2:	bf00      	nop
 8000ef4:	200000b0 	.word	0x200000b0
 8000ef8:	20000414 	.word	0x20000414
 8000efc:	2000043c 	.word	0x2000043c
 8000f00:	0800fb1c 	.word	0x0800fb1c
 8000f04:	2000010c 	.word	0x2000010c
 8000f08:	0800fb44 	.word	0x0800fb44
 8000f0c:	20000124 	.word	0x20000124
 8000f10:	20000104 	.word	0x20000104
 8000f14:	2000011c 	.word	0x2000011c

08000f18 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8000f1e:	2080      	movs	r0, #128	; 0x80
 8000f20:	f000 f91e 	bl	8001160 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	da4f      	bge.n	8000fce <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8000f36:	2300      	movs	r3, #0
 8000f38:	0b5b      	lsrs	r3, r3, #13
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	0b5b      	lsrs	r3, r3, #13
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8000f52:	2300      	movs	r3, #0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	f043 0306 	orr.w	r3, r3, #6
 8000f5c:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	0fda      	lsrs	r2, r3, #31
 8000f62:	4413      	add	r3, r2
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	e001      	b.n	8000f78 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8000f7c:	230e      	movs	r3, #14
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4871      	ldr	r0, [pc, #452]	; (8001150 <_ZN7canzero4initEv+0x238>)
 8000f8a:	f005 ff5b 	bl	8006e44 <HAL_CAN_ConfigFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8000f9e:	f004 fd6b 	bl	8005a78 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8000fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa4:	330e      	adds	r3, #14
 8000fa6:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4869      	ldr	r0, [pc, #420]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 8000fae:	f005 ff49 	bl	8006e44 <HAL_CAN_ConfigFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8000fc2:	f004 fd59 	bl	8005a78 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	3301      	adds	r3, #1
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fcc:	e7ac      	b.n	8000f28 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	dc69      	bgt.n	80010ac <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	0fda      	lsrs	r2, r3, #31
 8000fdc:	4413      	add	r3, r2
 8000fde:	105b      	asrs	r3, r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8000fe6:	4a5c      	ldr	r2, [pc, #368]	; (8001158 <_ZN7canzero4initEv+0x240>)
 8000fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <_ZN7canzero4initEv+0x244>)
 8000ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	f043 0318 	orr.w	r3, r3, #24
 8001000:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	2b08      	cmp	r3, #8
 8001006:	d106      	bne.n	8001016 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001010:	2306      	movs	r3, #6
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e011      	b.n	800103a <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	3301      	adds	r3, #1
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <_ZN7canzero4initEv+0x240>)
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102a:	3301      	adds	r3, #1
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <_ZN7canzero4initEv+0x244>)
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	f043 0318 	orr.w	r3, r3, #24
 8001038:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	0fda      	lsrs	r2, r3, #31
 800103e:	4413      	add	r3, r2
 8001040:	105b      	asrs	r3, r3, #1
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e001      	b.n	8001054 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001058:	230e      	movs	r3, #14
 800105a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	483b      	ldr	r0, [pc, #236]	; (8001150 <_ZN7canzero4initEv+0x238>)
 8001062:	f005 feef 	bl	8006e44 <HAL_CAN_ConfigFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001076:	f004 fcff 	bl	8005a78 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	0fda      	lsrs	r2, r3, #31
 800107e:	4413      	add	r3, r2
 8001080:	105b      	asrs	r3, r3, #1
 8001082:	330e      	adds	r3, #14
 8001084:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4832      	ldr	r0, [pc, #200]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 800108c:	f005 feda 	bl	8006e44 <HAL_CAN_ConfigFilter>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf14      	ite	ne
 8001096:	2301      	movne	r3, #1
 8001098:	2300      	moveq	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 80010a0:	f004 fcea 	bl	8005a78 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	3302      	adds	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010aa:	e792      	b.n	8000fd2 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 80010ac:	4828      	ldr	r0, [pc, #160]	; (8001150 <_ZN7canzero4initEv+0x238>)
 80010ae:	f005 ffa9 	bl	8007004 <HAL_CAN_Start>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <_ZN7canzero4initEv+0x1ac>
 80010b8:	4826      	ldr	r0, [pc, #152]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 80010ba:	f005 ffa3 	bl	8007004 <HAL_CAN_Start>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZN7canzero4initEv+0x1b0>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <_ZN7canzero4initEv+0x1b2>
 80010c8:	2300      	movs	r3, #0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 80010ce:	f004 fcd3 	bl	8005a78 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80010d2:	2102      	movs	r1, #2
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <_ZN7canzero4initEv+0x238>)
 80010d6:	f006 f8e9 	bl	80072ac <HAL_CAN_ActivateNotification>
 80010da:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10e      	bne.n	80010fe <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80010e0:	2110      	movs	r1, #16
 80010e2:	481b      	ldr	r0, [pc, #108]	; (8001150 <_ZN7canzero4initEv+0x238>)
 80010e4:	f006 f8e2 	bl	80072ac <HAL_CAN_ActivateNotification>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d107      	bne.n	80010fe <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <_ZN7canzero4initEv+0x238>)
 80010f4:	f006 f8da 	bl	80072ac <HAL_CAN_ActivateNotification>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_ZN7canzero4initEv+0x1ea>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <_ZN7canzero4initEv+0x1ec>
 8001102:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001108:	f004 fcb6 	bl	8005a78 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800110c:	2102      	movs	r1, #2
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 8001110:	f006 f8cc 	bl	80072ac <HAL_CAN_ActivateNotification>
 8001114:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10e      	bne.n	8001138 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800111a:	2110      	movs	r1, #16
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 800111e:	f006 f8c5 	bl	80072ac <HAL_CAN_ActivateNotification>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <_ZN7canzero4initEv+0x23c>)
 800112e:	f006 f8bd 	bl	80072ac <HAL_CAN_ActivateNotification>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <_ZN7canzero4initEv+0x224>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <_ZN7canzero4initEv+0x226>
 800113c:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001142:	f004 fc99 	bl	8005a78 <Error_Handler>
	}
}
 8001146:	bf00      	nop
 8001148:	3730      	adds	r7, #48	; 0x30
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000414 	.word	0x20000414
 8001154:	2000043c 	.word	0x2000043c
 8001158:	0800fd10 	.word	0x0800fd10
 800115c:	0800fcec 	.word	0x0800fcec

08001160 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <_ZN7canzero9setStatusE9cz_status+0x30>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f04f 31ff 	mov.w	r1, #4294967295
 8001172:	4618      	mov	r0, r3
 8001174:	f009 fbe5 	bl	800a942 <osMutexAcquire>
	nodeStatus = new_status;
 8001178:	4a06      	ldr	r2, [pc, #24]	; (8001194 <_ZN7canzero9setStatusE9cz_status+0x34>)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fc28 	bl	800a9d8 <osMutexRelease>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000b4 	.word	0x200000b4
 8001194:	200000b8 	.word	0x200000b8

08001198 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <_ZN7canzero9getStatusEv+0x30>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f04f 31ff 	mov.w	r1, #4294967295
 80011a6:	4618      	mov	r0, r3
 80011a8:	f009 fbcb 	bl	800a942 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_ZN7canzero9getStatusEv+0x34>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <_ZN7canzero9getStatusEv+0x30>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f009 fc0e 	bl	800a9d8 <osMutexRelease>
	return returnValue;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000b4 	.word	0x200000b4
 80011cc:	200000b8 	.word	0x200000b8

080011d0 <_Z41__static_initialization_and_destruction_0ii>:
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d10a      	bne.n	80011f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d105      	bne.n	80011f6 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80011ec:	f009 fb23 	bl	800a836 <osMutexNew>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	0800fd34 	.word	0x0800fd34
 8001204:	200000b4 	.word	0x200000b4

08001208 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
 800120c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff ffdd 	bl	80011d0 <_Z41__static_initialization_and_destruction_0ii>
 8001216:	bd80      	pop	{r7, pc}

08001218 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	canzero::init();
 8001220:	f7ff fe7a 	bl	8000f18 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2318      	movs	r3, #24
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001238:	4939      	ldr	r1, [pc, #228]	; (8001320 <canzero_start+0x108>)
 800123a:	483a      	ldr	r0, [pc, #232]	; (8001324 <canzero_start+0x10c>)
 800123c:	f00b f985 	bl	800c54a <xTaskCreate>
 8001240:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d006      	beq.n	8001256 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8001248:	f00c ff6c 	bl	800e124 <vPortEnterCritical>
 800124c:	4836      	ldr	r0, [pc, #216]	; (8001328 <canzero_start+0x110>)
 800124e:	f00d fcdf 	bl	800ec10 <iprintf>
 8001252:	f00c ff97 	bl	800e184 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2318      	movs	r3, #24
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126a:	4930      	ldr	r1, [pc, #192]	; (800132c <canzero_start+0x114>)
 800126c:	4830      	ldr	r0, [pc, #192]	; (8001330 <canzero_start+0x118>)
 800126e:	f00b f96c 	bl	800c54a <xTaskCreate>
 8001272:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	2b01      	cmp	r3, #1
 8001278:	d006      	beq.n	8001288 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 800127a:	f00c ff53 	bl	800e124 <vPortEnterCritical>
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <canzero_start+0x11c>)
 8001280:	f00d fcc6 	bl	800ec10 <iprintf>
 8001284:	f00c ff7e 	bl	800e184 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	2318      	movs	r3, #24
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2300      	movs	r3, #0
 8001298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129c:	4926      	ldr	r1, [pc, #152]	; (8001338 <canzero_start+0x120>)
 800129e:	4827      	ldr	r0, [pc, #156]	; (800133c <canzero_start+0x124>)
 80012a0:	f00b f953 	bl	800c54a <xTaskCreate>
 80012a4:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d006      	beq.n	80012ba <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80012ac:	f00c ff3a 	bl	800e124 <vPortEnterCritical>
 80012b0:	4823      	ldr	r0, [pc, #140]	; (8001340 <canzero_start+0x128>)
 80012b2:	f00d fcad 	bl	800ec10 <iprintf>
 80012b6:	f00c ff65 	bl	800e184 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	2318      	movs	r3, #24
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	491d      	ldr	r1, [pc, #116]	; (8001344 <canzero_start+0x12c>)
 80012d0:	481d      	ldr	r0, [pc, #116]	; (8001348 <canzero_start+0x130>)
 80012d2:	f00b f93a 	bl	800c54a <xTaskCreate>
 80012d6:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d006      	beq.n	80012ec <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 80012de:	f00c ff21 	bl	800e124 <vPortEnterCritical>
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <canzero_start+0x134>)
 80012e4:	f00d fc94 	bl	800ec10 <iprintf>
 80012e8:	f00c ff4c 	bl	800e184 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	2328      	movs	r3, #40	; 0x28
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	4913      	ldr	r1, [pc, #76]	; (8001350 <canzero_start+0x138>)
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <canzero_start+0x13c>)
 8001304:	f00b f921 	bl	800c54a <xTaskCreate>
 8001308:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d001      	beq.n	8001314 <canzero_start+0xfc>
		Error_Handler();
 8001310:	f004 fbb2 	bl	8005a78 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f009 fa72 	bl	800a800 <osDelay>
 800131c:	e7fa      	b.n	8001314 <canzero_start+0xfc>
 800131e:	bf00      	nop
 8001320:	0800fb7c 	.word	0x0800fb7c
 8001324:	08000d85 	.word	0x08000d85
 8001328:	0800fb84 	.word	0x0800fb84
 800132c:	0800fba8 	.word	0x0800fba8
 8001330:	08000be9 	.word	0x08000be9
 8001334:	0800fbb4 	.word	0x0800fbb4
 8001338:	0800fbdc 	.word	0x0800fbdc
 800133c:	08000955 	.word	0x08000955
 8001340:	0800fbe8 	.word	0x0800fbe8
 8001344:	0800fc18 	.word	0x0800fc18
 8001348:	080008ed 	.word	0x080008ed
 800134c:	0800fc24 	.word	0x0800fc24
 8001350:	0800fc54 	.word	0x0800fc54
 8001354:	08000883 	.word	0x08000883

08001358 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001392:	ed97 0a01 	vldr	s0, [r7, #4]
 8001396:	f00d f9e7 	bl	800e768 <roundf>
 800139a:	eef0 7a40 	vmov.f32	s15, s0
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80013a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013ac:	b0a2      	sub	sp, #136	; 0x88
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80013b4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80013b8:	4619      	mov	r1, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80013c0:	460b      	mov	r3, r1
 80013c2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80013c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80013d8:	7113      	strb	r3, [r2, #4]
 80013da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013de:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80013e2:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 80013e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013f0:	3301      	adds	r3, #1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	441a      	add	r2, r3
 80013f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013fc:	3302      	adds	r3, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	441a      	add	r2, r3
 8001404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001408:	3303      	adds	r3, #3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	4413      	add	r3, r2
 8001410:	2200      	movs	r2, #0
 8001412:	461c      	mov	r4, r3
 8001414:	4615      	mov	r5, r2
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800141a:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800141e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001422:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800142a:	3304      	adds	r3, #4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2200      	movs	r2, #0
 8001432:	673b      	str	r3, [r7, #112]	; 0x70
 8001434:	677a      	str	r2, [r7, #116]	; 0x74
 8001436:	f04f 0000 	mov.w	r0, #0
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001440:	0019      	movs	r1, r3
 8001442:	2000      	movs	r0, #0
 8001444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2200      	movs	r2, #0
 8001450:	66bb      	str	r3, [r7, #104]	; 0x68
 8001452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800145e:	0233      	lsls	r3, r6, #8
 8001460:	2200      	movs	r2, #0
 8001462:	eb10 0802 	adds.w	r8, r0, r2
 8001466:	eb41 0903 	adc.w	r9, r1, r3
 800146a:	eb14 0308 	adds.w	r3, r4, r8
 800146e:	663b      	str	r3, [r7, #96]	; 0x60
 8001470:	eb45 0309 	adc.w	r3, r5, r9
 8001474:	667b      	str	r3, [r7, #100]	; 0x64
 8001476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800147e:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8001482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001486:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800148a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800148e:	3306      	adds	r3, #6
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	65bb      	str	r3, [r7, #88]	; 0x58
 8001498:	65fa      	str	r2, [r7, #92]	; 0x5c
 800149a:	f04f 0000 	mov.w	r0, #0
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a4:	0419      	lsls	r1, r3, #16
 80014a6:	2000      	movs	r0, #0
 80014a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ac:	3307      	adds	r3, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2200      	movs	r2, #0
 80014b4:	653b      	str	r3, [r7, #80]	; 0x50
 80014b6:	657a      	str	r2, [r7, #84]	; 0x54
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80014c2:	0633      	lsls	r3, r6, #24
 80014c4:	2200      	movs	r2, #0
 80014c6:	eb10 0a02 	adds.w	sl, r0, r2
 80014ca:	eb41 0b03 	adc.w	fp, r1, r3
 80014ce:	eb14 030a 	adds.w	r3, r4, sl
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80014d4:	eb45 030b 	adc.w	r3, r5, fp
 80014d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80014e2:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80014e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014ea:	3307      	adds	r3, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80014f4:	3306      	adds	r3, #6
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	441a      	add	r2, r3
 80014fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001500:	3305      	adds	r3, #5
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	441a      	add	r2, r3
 8001508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800150c:	3304      	adds	r3, #4
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	4413      	add	r3, r2
 8001514:	2200      	movs	r2, #0
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
 8001518:	647a      	str	r2, [r7, #68]	; 0x44
 800151a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800151e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001522:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8001526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800152a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800152e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001532:	3303      	adds	r3, #3
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2200      	movs	r2, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001548:	0019      	movs	r1, r3
 800154a:	2000      	movs	r0, #0
 800154c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001550:	3302      	adds	r3, #2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2200      	movs	r2, #0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
 800155a:	637a      	str	r2, [r7, #52]	; 0x34
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001566:	0233      	lsls	r3, r6, #8
 8001568:	2200      	movs	r2, #0
 800156a:	1886      	adds	r6, r0, r2
 800156c:	62be      	str	r6, [r7, #40]	; 0x28
 800156e:	eb41 0303 	adc.w	r3, r1, r3
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001574:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001578:	460b      	mov	r3, r1
 800157a:	18e3      	adds	r3, r4, r3
 800157c:	623b      	str	r3, [r7, #32]
 800157e:	4613      	mov	r3, r2
 8001580:	eb45 0303 	adc.w	r3, r5, r3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800158a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800158e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8001592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001596:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800159a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800159e:	3301      	adds	r3, #1
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	61fa      	str	r2, [r7, #28]
 80015aa:	f04f 0000 	mov.w	r0, #0
 80015ae:	f04f 0100 	mov.w	r1, #0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	0419      	lsls	r1, r3, #16
 80015b6:	2000      	movs	r0, #0
 80015b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	617a      	str	r2, [r7, #20]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	693e      	ldr	r6, [r7, #16]
 80015d0:	0633      	lsls	r3, r6, #24
 80015d2:	2200      	movs	r2, #0
 80015d4:	1886      	adds	r6, r0, r2
 80015d6:	60be      	str	r6, [r7, #8]
 80015d8:	eb41 0303 	adc.w	r3, r1, r3
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015e2:	460b      	mov	r3, r1
 80015e4:	18e3      	adds	r3, r4, r3
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	eb45 0303 	adc.w	r3, r5, r3
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80015f8:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80015fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001600:	4618      	mov	r0, r3
 8001602:	3788      	adds	r7, #136	; 0x88
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800160a:	4770      	bx	lr

0800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800160c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001622:	d302      	bcc.n	800162a <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8001624:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001628:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	8af9      	ldrh	r1, [r7, #22]
 8001636:	2000      	movs	r0, #0
 8001638:	468a      	mov	sl, r1
 800163a:	4683      	mov	fp, r0
 800163c:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8001640:	2500      	movs	r5, #0
 8001642:	ea42 0804 	orr.w	r8, r2, r4
 8001646:	ea43 0905 	orr.w	r9, r3, r5
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800165a:	4770      	bx	lr

0800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	b293      	uxth	r3, r2
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	81fb      	strh	r3, [r7, #14]
                return value;
 8001674:	89fb      	ldrh	r3, [r7, #14]
            }
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001682:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2200      	movs	r2, #0
 80016a0:	4698      	mov	r8, r3
 80016a2:	4691      	mov	r9, r2
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80016b0:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80016b4:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80016b8:	b294      	uxth	r4, r2
 80016ba:	2500      	movs	r5, #0
 80016bc:	ea40 0a04 	orr.w	sl, r0, r4
 80016c0:	ea41 0b05 	orr.w	fp, r1, r5
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80016d4:	4770      	bx	lr

080016d6 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80016d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6178      	str	r0, [r7, #20]
 80016e0:	6139      	str	r1, [r7, #16]
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d302      	bcc.n	80016f4 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80016ee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80016f2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 80016f4:	f240 4369 	movw	r3, #1129	; 0x469
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	6978      	ldr	r0, [r7, #20]
 80016fe:	f7ff ff85 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	2000      	movs	r0, #0
 8001710:	468a      	mov	sl, r1
 8001712:	4683      	mov	fp, r0
 8001714:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001718:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800171c:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001720:	0424      	lsls	r4, r4, #16
 8001722:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001726:	ea42 0104 	orr.w	r1, r2, r4
 800172a:	6039      	str	r1, [r7, #0]
 800172c:	432b      	orrs	r3, r5
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001736:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2205      	movs	r2, #5
 800173e:	701a      	strb	r2, [r3, #0]
            }
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800174a <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800174a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 800175a:	f44f 638d 	mov.w	r3, #1128	; 0x468
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff ff52 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2200      	movs	r2, #0
 8001776:	4698      	mov	r8, r3
 8001778:	4691      	mov	r9, r2
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001786:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800178a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800178e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001792:	2500      	movs	r5, #0
 8001794:	ea40 0a04 	orr.w	sl, r0, r4
 8001798:	ea41 0b05 	orr.w	fp, r1, r5
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	701a      	strb	r2, [r3, #0]
            }
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017b2 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80017b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6178      	str	r0, [r7, #20]
 80017bc:	6139      	str	r1, [r7, #16]
 80017be:	60fa      	str	r2, [r7, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d302      	bcc.n	80017d0 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80017ca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80017ce:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 80017d0:	f240 4367 	movw	r3, #1127	; 0x467
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	6978      	ldr	r0, [r7, #20]
 80017da:	f7ff ff17 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	69f9      	ldr	r1, [r7, #28]
 80017ea:	2000      	movs	r0, #0
 80017ec:	468a      	mov	sl, r1
 80017ee:	4683      	mov	fp, r0
 80017f0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80017f4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80017f8:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80017fc:	0424      	lsls	r4, r4, #16
 80017fe:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001802:	ea42 0104 	orr.w	r1, r2, r4
 8001806:	6039      	str	r1, [r7, #0]
 8001808:	432b      	orrs	r3, r5
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001812:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2205      	movs	r2, #5
 800181a:	701a      	strb	r2, [r3, #0]
            }
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001826 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001826:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
 8001834:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8001836:	f240 4366 	movw	r3, #1126	; 0x466
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fee4 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2200      	movs	r2, #0
 8001852:	4698      	mov	r8, r3
 8001854:	4691      	mov	r9, r2
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001862:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001866:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800186a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800186e:	2500      	movs	r5, #0
 8001870:	ea40 0a04 	orr.w	sl, r0, r4
 8001874:	ea41 0b05 	orr.w	fp, r1, r5
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	701a      	strb	r2, [r3, #0]
            }
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800188e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800188e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6178      	str	r0, [r7, #20]
 8001898:	6139      	str	r1, [r7, #16]
 800189a:	60fa      	str	r2, [r7, #12]
 800189c:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 800189e:	897b      	ldrh	r3, [r7, #10]
 80018a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a4:	d902      	bls.n	80018ac <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	2b7c      	cmp	r3, #124	; 0x7c
 80018b0:	d801      	bhi.n	80018b6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80018b2:	237d      	movs	r3, #125	; 0x7d
 80018b4:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 80018b6:	f240 4364 	movw	r3, #1124	; 0x464
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff fea4 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	8bf9      	ldrh	r1, [r7, #30]
 80018d0:	2000      	movs	r0, #0
 80018d2:	4688      	mov	r8, r1
 80018d4:	4681      	mov	r9, r0
 80018d6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80018da:	6079      	str	r1, [r7, #4]
 80018dc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	683c      	ldr	r4, [r7, #0]
 80018e4:	2500      	movs	r5, #0
 80018e6:	ea42 0a04 	orr.w	sl, r2, r4
 80018ea:	ea43 0b05 	orr.w	fp, r3, r5
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
            }
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001904 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 800190e:	6839      	ldr	r1, [r7, #0]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fea3 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	f240 4364 	movw	r3, #1124	; 0x464
 800191e:	429a      	cmp	r2, r3
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800192c:	e7fe      	b.n	800192c <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	0c02      	lsrs	r2, r0, #16
 800193e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001942:	0c0b      	lsrs	r3, r1, #16
 8001944:	4613      	mov	r3, r2
 8001946:	81fb      	strh	r3, [r7, #14]
                return value;
 8001948:	89fb      	ldrh	r3, [r7, #14]
            }
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001952:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 8001962:	f240 4363 	movw	r3, #1123	; 0x463
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fe4e 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2200      	movs	r2, #0
 800197e:	4698      	mov	r8, r3
 8001980:	4691      	mov	r9, r2
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800198e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001992:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001996:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800199a:	2500      	movs	r5, #0
 800199c:	ea40 0a04 	orr.w	sl, r0, r4
 80019a0:	ea41 0b05 	orr.w	fp, r1, r5
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	701a      	strb	r2, [r3, #0]
            }
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080019ba <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fe48 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	f240 4363 	movw	r3, #1123	; 0x463
 80019d4:	429a      	cmp	r2, r3
 80019d6:	bf14      	ite	ne
 80019d8:	2301      	movne	r3, #1
 80019da:	2300      	moveq	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80019e2:	e7fe      	b.n	80019e2 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	0c02      	lsrs	r2, r0, #16
 80019f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80019f8:	0c0b      	lsrs	r3, r1, #16
 80019fa:	4613      	mov	r3, r2
 80019fc:	73fb      	strb	r3, [r7, #15]
                return value;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
            }
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	b088      	sub	sp, #32
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6178      	str	r0, [r7, #20]
 8001a12:	6139      	str	r1, [r7, #16]
 8001a14:	60fa      	str	r2, [r7, #12]
 8001a16:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8001a18:	f240 4362 	movw	r3, #1122	; 0x462
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	6978      	ldr	r0, [r7, #20]
 8001a22:	f7ff fdf3 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	69f9      	ldr	r1, [r7, #28]
 8001a32:	2000      	movs	r0, #0
 8001a34:	468a      	mov	sl, r1
 8001a36:	4683      	mov	fp, r0
 8001a38:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001a3c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8001a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a46:	ea08 0400 	and.w	r4, r8, r0
 8001a4a:	ea09 0501 	and.w	r5, r9, r1
 8001a4e:	ea42 0104 	orr.w	r1, r2, r4
 8001a52:	6039      	str	r1, [r7, #0]
 8001a54:	432b      	orrs	r3, r5
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a5e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2206      	movs	r2, #6
 8001a66:	701a      	strb	r2, [r3, #0]
            }
 8001a68:	bf00      	nop
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	ffff0000 	.word	0xffff0000

08001a78 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8001a88:	f240 4361 	movw	r3, #1121	; 0x461
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	68b9      	ldr	r1, [r7, #8]
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f7ff fdbb 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4698      	mov	r8, r3
 8001aa6:	4691      	mov	r9, r2
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001ab4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001ab8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001abc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001ac0:	2500      	movs	r5, #0
 8001ac2:	ea40 0a04 	orr.w	sl, r0, r4
 8001ac6:	ea41 0b05 	orr.w	fp, r1, r5
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
            }
 8001ad6:	bf00      	nop
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ae0 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 8001af0:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fd87 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4698      	mov	r8, r3
 8001b0e:	4691      	mov	r9, r2
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001b1c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001b20:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001b24:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001b28:	2500      	movs	r5, #0
 8001b2a:	ea40 0a04 	orr.w	sl, r0, r4
 8001b2e:	ea41 0b05 	orr.w	fp, r1, r5
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	701a      	strb	r2, [r3, #0]
            }
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b48 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6178      	str	r0, [r7, #20]
 8001b52:	6139      	str	r1, [r7, #16]
 8001b54:	60fa      	str	r2, [r7, #12]
 8001b56:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5e:	d302      	bcc.n	8001b66 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001b60:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001b64:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 8001b66:	f240 4359 	movw	r3, #1113	; 0x459
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff fd4c 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	69f9      	ldr	r1, [r7, #28]
 8001b80:	2000      	movs	r0, #0
 8001b82:	468a      	mov	sl, r1
 8001b84:	4683      	mov	fp, r0
 8001b86:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001b8a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001b8e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001b92:	0424      	lsls	r4, r4, #16
 8001b94:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001b98:	ea42 0104 	orr.w	r1, r2, r4
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	432b      	orrs	r3, r5
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ba8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2205      	movs	r2, #5
 8001bb0:	701a      	strb	r2, [r3, #0]
            }
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001bbc <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8001bcc:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fd19 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2200      	movs	r2, #0
 8001be8:	4698      	mov	r8, r3
 8001bea:	4691      	mov	r9, r2
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001bf8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001bfc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001c00:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001c04:	2500      	movs	r5, #0
 8001c06:	ea40 0a04 	orr.w	sl, r0, r4
 8001c0a:	ea41 0b05 	orr.w	fp, r1, r5
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	701a      	strb	r2, [r3, #0]
            }
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c24 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c28:	b088      	sub	sp, #32
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6178      	str	r0, [r7, #20]
 8001c2e:	6139      	str	r1, [r7, #16]
 8001c30:	60fa      	str	r2, [r7, #12]
 8001c32:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3a:	d302      	bcc.n	8001c42 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001c3c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001c40:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8001c42:	f240 4357 	movw	r3, #1111	; 0x457
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	6939      	ldr	r1, [r7, #16]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff fcde 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	69f9      	ldr	r1, [r7, #28]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	468a      	mov	sl, r1
 8001c60:	4683      	mov	fp, r0
 8001c62:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001c66:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001c6a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001c6e:	0424      	lsls	r4, r4, #16
 8001c70:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001c74:	ea42 0104 	orr.w	r1, r2, r4
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	432b      	orrs	r3, r5
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001c84:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2205      	movs	r2, #5
 8001c8c:	701a      	strb	r2, [r3, #0]
            }
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c98 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8001ca8:	f240 4356 	movw	r3, #1110	; 0x456
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fcab 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4698      	mov	r8, r3
 8001cc6:	4691      	mov	r9, r2
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001cd4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001cd8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001cdc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001ce0:	2500      	movs	r5, #0
 8001ce2:	ea40 0a04 	orr.w	sl, r0, r4
 8001ce6:	ea41 0b05 	orr.w	fp, r1, r5
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	701a      	strb	r2, [r3, #0]
            }
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d00 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d04:	b088      	sub	sp, #32
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6178      	str	r0, [r7, #20]
 8001d0a:	6139      	str	r1, [r7, #16]
 8001d0c:	60fa      	str	r2, [r7, #12]
 8001d0e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8001d10:	897b      	ldrh	r3, [r7, #10]
 8001d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d16:	d902      	bls.n	8001d1e <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8001d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	2b7c      	cmp	r3, #124	; 0x7c
 8001d22:	d801      	bhi.n	8001d28 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8001d24:	237d      	movs	r3, #125	; 0x7d
 8001d26:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 8001d28:	f240 4354 	movw	r3, #1108	; 0x454
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	6939      	ldr	r1, [r7, #16]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7ff fc6b 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	8bf9      	ldrh	r1, [r7, #30]
 8001d42:	2000      	movs	r0, #0
 8001d44:	4688      	mov	r8, r1
 8001d46:	4681      	mov	r9, r0
 8001d48:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8001d4c:	6079      	str	r1, [r7, #4]
 8001d4e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001d52:	6039      	str	r1, [r7, #0]
 8001d54:	683c      	ldr	r4, [r7, #0]
 8001d56:	2500      	movs	r5, #0
 8001d58:	ea42 0a04 	orr.w	sl, r2, r4
 8001d5c:	ea43 0b05 	orr.w	fp, r3, r5
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	701a      	strb	r2, [r3, #0]
            }
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d76 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fc6a 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f240 4354 	movw	r3, #1108	; 0x454
 8001d90:	429a      	cmp	r2, r3
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d000      	beq.n	8001da0 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8001d9e:	e7fe      	b.n	8001d9e <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	0c02      	lsrs	r2, r0, #16
 8001db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001db4:	0c0b      	lsrs	r3, r1, #16
 8001db6:	4613      	mov	r3, r2
 8001db8:	81fb      	strh	r3, [r7, #14]
                return value;
 8001dba:	89fb      	ldrh	r3, [r7, #14]
            }
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8001dd4:	f240 4353 	movw	r3, #1107	; 0x453
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff fc15 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2200      	movs	r2, #0
 8001df0:	4698      	mov	r8, r3
 8001df2:	4691      	mov	r9, r2
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001e00:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001e04:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001e08:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001e0c:	2500      	movs	r5, #0
 8001e0e:	ea40 0a04 	orr.w	sl, r0, r4
 8001e12:	ea41 0b05 	orr.w	fp, r1, r5
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
            }
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e2c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fc0f 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	f240 4353 	movw	r3, #1107	; 0x453
 8001e46:	429a      	cmp	r2, r3
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d000      	beq.n	8001e56 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8001e54:	e7fe      	b.n	8001e54 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	0c02      	lsrs	r2, r0, #16
 8001e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e6a:	0c0b      	lsrs	r3, r1, #16
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	73fb      	strb	r3, [r7, #15]
                return value;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
            }
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b088      	sub	sp, #32
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6178      	str	r0, [r7, #20]
 8001e86:	6139      	str	r1, [r7, #16]
 8001e88:	60fa      	str	r2, [r7, #12]
 8001e8a:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8001e8c:	f240 4352 	movw	r3, #1106	; 0x452
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6939      	ldr	r1, [r7, #16]
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	f7ff fbb9 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	69f9      	ldr	r1, [r7, #28]
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	468a      	mov	sl, r1
 8001eaa:	4683      	mov	fp, r0
 8001eac:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001eb0:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001eb4:	480c      	ldr	r0, [pc, #48]	; (8001ee8 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8001eb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eba:	ea08 0400 	and.w	r4, r8, r0
 8001ebe:	ea09 0501 	and.w	r5, r9, r1
 8001ec2:	ea42 0104 	orr.w	r1, r2, r4
 8001ec6:	6039      	str	r1, [r7, #0]
 8001ec8:	432b      	orrs	r3, r5
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ed2:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2206      	movs	r2, #6
 8001eda:	701a      	strb	r2, [r3, #0]
            }
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee6:	bf00      	nop
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8001efc:	f240 4351 	movw	r3, #1105	; 0x451
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fb81 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2200      	movs	r2, #0
 8001f18:	4698      	mov	r8, r3
 8001f1a:	4691      	mov	r9, r2
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001f28:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001f2c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001f30:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001f34:	2500      	movs	r5, #0
 8001f36:	ea40 0a04 	orr.w	sl, r0, r4
 8001f3a:	ea41 0b05 	orr.w	fp, r1, r5
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2203      	movs	r2, #3
 8001f48:	701a      	strb	r2, [r3, #0]
            }
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f54 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8001f64:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fb4d 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4698      	mov	r8, r3
 8001f82:	4691      	mov	r9, r2
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	f04f 0300 	mov.w	r3, #0
 8001f8c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001f90:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001f94:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001f98:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	ea40 0a04 	orr.w	sl, r0, r4
 8001fa2:	ea41 0b05 	orr.w	fp, r1, r5
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
            }
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001fbc <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc0:	b088      	sub	sp, #32
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6178      	str	r0, [r7, #20]
 8001fc6:	6139      	str	r1, [r7, #16]
 8001fc8:	60fa      	str	r2, [r7, #12]
 8001fca:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd2:	d302      	bcc.n	8001fda <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8001fd4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001fd8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8001fda:	f240 4331 	movw	r3, #1073	; 0x431
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	6939      	ldr	r1, [r7, #16]
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7ff fb12 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	69f9      	ldr	r1, [r7, #28]
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	468a      	mov	sl, r1
 8001ff8:	4683      	mov	fp, r0
 8001ffa:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001ffe:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002002:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002006:	0424      	lsls	r4, r4, #16
 8002008:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800200c:	ea42 0104 	orr.w	r1, r2, r4
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	432b      	orrs	r3, r5
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	e9d7 1200 	ldrd	r1, r2, [r7]
 800201c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2205      	movs	r2, #5
 8002024:	701a      	strb	r2, [r3, #0]
            }
 8002026:	bf00      	nop
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002030 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002034:	b088      	sub	sp, #32
 8002036:	af00      	add	r7, sp, #0
 8002038:	6178      	str	r0, [r7, #20]
 800203a:	6139      	str	r1, [r7, #16]
 800203c:	60fa      	str	r2, [r7, #12]
 800203e:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8002040:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6939      	ldr	r1, [r7, #16]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7ff fadf 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	69f9      	ldr	r1, [r7, #28]
 800205a:	2000      	movs	r0, #0
 800205c:	468a      	mov	sl, r1
 800205e:	4683      	mov	fp, r0
 8002060:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002064:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 800206a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800206e:	ea08 0400 	and.w	r4, r8, r0
 8002072:	ea09 0501 	and.w	r5, r9, r1
 8002076:	ea42 0104 	orr.w	r1, r2, r4
 800207a:	6039      	str	r1, [r7, #0]
 800207c:	432b      	orrs	r3, r5
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002086:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2206      	movs	r2, #6
 800208e:	701a      	strb	r2, [r3, #0]
            }
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209a:	bf00      	nop
 800209c:	ffff0000 	.word	0xffff0000

080020a0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80020a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80020ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d305      	bcc.n	80020c4 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 80020c4:	f240 4321 	movw	r3, #1057	; 0x421
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f7ff fa9d 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80020d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	040b      	lsls	r3, r1, #16
 80020ee:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80020f2:	0402      	lsls	r2, r0, #16
 80020f4:	ea48 0402 	orr.w	r4, r8, r2
 80020f8:	ea49 0503 	orr.w	r5, r9, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2208      	movs	r2, #8
 8002106:	701a      	strb	r2, [r3, #0]
            }
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002112 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002112:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002120:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d305      	bcc.n	8002136 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 800212a:	f04f 32ff 	mov.w	r2, #4294967295
 800212e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002132:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8002136:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff fa64 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002148:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002152:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	040b      	lsls	r3, r1, #16
 8002160:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002164:	0402      	lsls	r2, r0, #16
 8002166:	ea48 0402 	orr.w	r4, r8, r2
 800216a:	ea49 0503 	orr.w	r5, r9, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2208      	movs	r2, #8
 8002178:	701a      	strb	r2, [r3, #0]
            }
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002184 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8002194:	f240 4316 	movw	r3, #1046	; 0x416
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff fa35 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2200      	movs	r2, #0
 80021b0:	4698      	mov	r8, r3
 80021b2:	4691      	mov	r9, r2
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80021c0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80021c4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80021c8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80021cc:	2500      	movs	r5, #0
 80021ce:	ea40 0a04 	orr.w	sl, r0, r4
 80021d2:	ea41 0b05 	orr.w	fp, r1, r5
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	701a      	strb	r2, [r3, #0]
            }
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021ec <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80021ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 80021fc:	f240 4315 	movw	r3, #1045	; 0x415
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fa01 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002214:	7dfb      	ldrb	r3, [r7, #23]
 8002216:	2200      	movs	r2, #0
 8002218:	4698      	mov	r8, r3
 800221a:	4691      	mov	r9, r2
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002228:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800222c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002230:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002234:	2500      	movs	r5, #0
 8002236:	ea40 0a04 	orr.w	sl, r0, r4
 800223a:	ea41 0b05 	orr.w	fp, r1, r5
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]
            }
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002254 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b088      	sub	sp, #32
 800225a:	af00      	add	r7, sp, #0
 800225c:	6178      	str	r0, [r7, #20]
 800225e:	6139      	str	r1, [r7, #16]
 8002260:	60fa      	str	r2, [r7, #12]
 8002262:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226a:	d302      	bcc.n	8002272 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 800226c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002270:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 8002272:	f240 4314 	movw	r3, #1044	; 0x414
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff f9c6 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	69f9      	ldr	r1, [r7, #28]
 800228c:	2000      	movs	r0, #0
 800228e:	468a      	mov	sl, r1
 8002290:	4683      	mov	fp, r0
 8002292:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002296:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800229a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800229e:	0424      	lsls	r4, r4, #16
 80022a0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80022a4:	ea42 0104 	orr.w	r1, r2, r4
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	432b      	orrs	r3, r5
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80022b4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2205      	movs	r2, #5
 80022bc:	701a      	strb	r2, [r3, #0]
            }
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022c8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b088      	sub	sp, #32
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6178      	str	r0, [r7, #20]
 80022d2:	6139      	str	r1, [r7, #16]
 80022d4:	60fa      	str	r2, [r7, #12]
 80022d6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80022da:	edd7 7a02 	vldr	s15, [r7, #8]
 80022de:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002370 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	dd01      	ble.n	80022f0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80022ee:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80022f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d502      	bpl.n	8002304 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8002304:	f240 4313 	movw	r3, #1043	; 0x413
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6939      	ldr	r1, [r7, #16]
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7ff f97d 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8002312:	edd7 7a02 	vldr	s15, [r7, #8]
 8002316:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002378 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 800231a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800231e:	eeb0 0a47 	vmov.f32	s0, s14
 8002322:	f7ff f831 	bl	8001388 <_ZSt5roundf>
 8002326:	eef0 7a40 	vmov.f32	s15, s0
 800232a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800232e:	ee17 3a90 	vmov	r3, s15
 8002332:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	8bf9      	ldrh	r1, [r7, #30]
 800233c:	2000      	movs	r0, #0
 800233e:	4688      	mov	r8, r1
 8002340:	4681      	mov	r9, r0
 8002342:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002346:	6079      	str	r1, [r7, #4]
 8002348:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	683c      	ldr	r4, [r7, #0]
 8002350:	2500      	movs	r5, #0
 8002352:	ea42 0a04 	orr.w	sl, r2, r4
 8002356:	ea43 0b05 	orr.w	fp, r3, r5
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2204      	movs	r2, #4
 8002364:	701a      	strb	r2, [r3, #0]
            }
 8002366:	bf00      	nop
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002370:	428311ec 	.word	0x428311ec
 8002374:	428311ec 	.word	0x428311ec
 8002378:	3a83126f 	.word	0x3a83126f

0800237c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800237c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af00      	add	r7, sp, #0
 8002384:	6178      	str	r0, [r7, #20]
 8002386:	6139      	str	r1, [r7, #16]
 8002388:	60fa      	str	r2, [r7, #12]
 800238a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800238e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002392:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002430 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8002396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	dd01      	ble.n	80023a4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 80023a2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80023ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d501      	bpl.n	80023ba <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 80023b8:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 80023ba:	f240 4312 	movw	r3, #1042	; 0x412
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff f922 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80023c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80023d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023d4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800243c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80023d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023dc:	eeb0 0a47 	vmov.f32	s0, s14
 80023e0:	f7fe ffd2 	bl	8001388 <_ZSt5roundf>
 80023e4:	eef0 7a40 	vmov.f32	s15, s0
 80023e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ec:	ee17 3a90 	vmov	r3, s15
 80023f0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	8bf9      	ldrh	r1, [r7, #30]
 80023fa:	2000      	movs	r0, #0
 80023fc:	4688      	mov	r8, r1
 80023fe:	4681      	mov	r9, r0
 8002400:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002404:	6079      	str	r1, [r7, #4]
 8002406:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800240a:	6039      	str	r1, [r7, #0]
 800240c:	683c      	ldr	r4, [r7, #0]
 800240e:	2500      	movs	r5, #0
 8002410:	ea42 0a04 	orr.w	sl, r2, r4
 8002414:	ea43 0b05 	orr.w	fp, r3, r5
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2204      	movs	r2, #4
 8002422:	701a      	strb	r2, [r3, #0]
            }
 8002424:	bf00      	nop
 8002426:	3720      	adds	r7, #32
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242e:	bf00      	nop
 8002430:	441c5666 	.word	0x441c5666
 8002434:	441c5666 	.word	0x441c5666
 8002438:	c1f00000 	.word	0xc1f00000
 800243c:	3c23d70a 	.word	0x3c23d70a

08002440 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af00      	add	r7, sp, #0
 8002448:	6178      	str	r0, [r7, #20]
 800244a:	6139      	str	r1, [r7, #16]
 800244c:	60fa      	str	r2, [r7, #12]
 800244e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 800245a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 800245c:	f240 4311 	movw	r3, #1041	; 0x411
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	6939      	ldr	r1, [r7, #16]
 8002464:	6978      	ldr	r0, [r7, #20]
 8002466:	f7ff f8d1 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	69f9      	ldr	r1, [r7, #28]
 8002478:	2000      	movs	r0, #0
 800247a:	4688      	mov	r8, r1
 800247c:	4681      	mov	r9, r0
 800247e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002482:	6079      	str	r1, [r7, #4]
 8002484:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	683c      	ldr	r4, [r7, #0]
 800248c:	2500      	movs	r5, #0
 800248e:	ea42 0a04 	orr.w	sl, r2, r4
 8002492:	ea43 0b05 	orr.w	fp, r3, r5
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2204      	movs	r2, #4
 80024a0:	701a      	strb	r2, [r3, #0]
            }
 80024a2:	bf00      	nop
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ac:	0003fffc 	.word	0x0003fffc

080024b0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80024b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6178      	str	r0, [r7, #20]
 80024ba:	6139      	str	r1, [r7, #16]
 80024bc:	60fa      	str	r2, [r7, #12]
 80024be:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80024c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002564 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	dd01      	ble.n	80024d8 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80024d6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80024d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80024dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d502      	bpl.n	80024ec <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 80024ec:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6939      	ldr	r1, [r7, #16]
 80024f4:	6978      	ldr	r0, [r7, #20]
 80024f6:	f7ff f889 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80024fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002502:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002506:	eeb0 0a47 	vmov.f32	s0, s14
 800250a:	f7fe ff3d 	bl	8001388 <_ZSt5roundf>
 800250e:	eef0 7a40 	vmov.f32	s15, s0
 8002512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002516:	edc7 7a01 	vstr	s15, [r7, #4]
 800251a:	793b      	ldrb	r3, [r7, #4]
 800251c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002524:	7ffb      	ldrb	r3, [r7, #31]
 8002526:	2200      	movs	r2, #0
 8002528:	4698      	mov	r8, r3
 800252a:	4691      	mov	r9, r2
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002538:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800253c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002540:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002544:	2500      	movs	r5, #0
 8002546:	ea40 0a04 	orr.w	sl, r0, r4
 800254a:	ea41 0b05 	orr.w	fp, r1, r5
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2203      	movs	r2, #3
 8002558:	701a      	strb	r2, [r3, #0]
            }
 800255a:	bf00      	nop
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002564:	42c80000 	.word	0x42c80000
 8002568:	42c80000 	.word	0x42c80000

0800256c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800256c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002570:	b088      	sub	sp, #32
 8002572:	af00      	add	r7, sp, #0
 8002574:	6178      	str	r0, [r7, #20]
 8002576:	6139      	str	r1, [r7, #16]
 8002578:	60fa      	str	r2, [r7, #12]
 800257a:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 800257c:	2321      	movs	r3, #33	; 0x21
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff f842 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002588:	897b      	ldrh	r3, [r7, #10]
 800258a:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	8bf9      	ldrh	r1, [r7, #30]
 8002594:	2000      	movs	r0, #0
 8002596:	4688      	mov	r8, r1
 8002598:	4681      	mov	r9, r0
 800259a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800259e:	6079      	str	r1, [r7, #4]
 80025a0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	683c      	ldr	r4, [r7, #0]
 80025a8:	2500      	movs	r5, #0
 80025aa:	ea42 0a04 	orr.w	sl, r2, r4
 80025ae:	ea43 0b05 	orr.w	fp, r3, r5
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2204      	movs	r2, #4
 80025bc:	701a      	strb	r2, [r3, #0]
            }
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025c8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff f841 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b21      	cmp	r3, #33	; 0x21
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80025ea:	e7fe      	b.n	80025ea <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	0c02      	lsrs	r2, r0, #16
 80025fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002600:	0c0b      	lsrs	r3, r1, #16
 8002602:	4613      	mov	r3, r2
 8002604:	81fb      	strh	r3, [r7, #14]
                return value;
 8002606:	89fb      	ldrh	r3, [r7, #14]
            }
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8002620:	2320      	movs	r3, #32
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7fe fff0 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2200      	movs	r2, #0
 800263a:	4698      	mov	r8, r3
 800263c:	4691      	mov	r9, r2
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800264a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800264e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002652:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002656:	2500      	movs	r5, #0
 8002658:	ea40 0a04 	orr.w	sl, r0, r4
 800265c:	ea41 0b05 	orr.w	fp, r1, r5
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	701a      	strb	r2, [r3, #0]
            }
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002676 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe ffea 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002688:	4603      	mov	r3, r0
 800268a:	2b20      	cmp	r3, #32
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d000      	beq.n	800269a <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8002698:	e7fe      	b.n	8002698 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	0c02      	lsrs	r2, r0, #16
 80026aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026ae:	0c0b      	lsrs	r3, r1, #16
 80026b0:	4613      	mov	r3, r2
 80026b2:	73fb      	strb	r3, [r7, #15]
                return value;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
            }
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80026be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6178      	str	r0, [r7, #20]
 80026c8:	6139      	str	r1, [r7, #16]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 80026ce:	2310      	movs	r3, #16
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	f7fe ff99 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80026da:	897b      	ldrh	r3, [r7, #10]
 80026dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	8bf9      	ldrh	r1, [r7, #30]
 80026e6:	2000      	movs	r0, #0
 80026e8:	4688      	mov	r8, r1
 80026ea:	4681      	mov	r9, r0
 80026ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80026f0:	6079      	str	r1, [r7, #4]
 80026f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80026f6:	6039      	str	r1, [r7, #0]
 80026f8:	683c      	ldr	r4, [r7, #0]
 80026fa:	2500      	movs	r5, #0
 80026fc:	ea42 0a04 	orr.w	sl, r2, r4
 8002700:	ea43 0b05 	orr.w	fp, r3, r5
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2204      	movs	r2, #4
 800270e:	701a      	strb	r2, [r3, #0]
            }
 8002710:	bf00      	nop
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800271a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe ff98 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800272c:	4603      	mov	r3, r0
 800272e:	2b10      	cmp	r3, #16
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 800273c:	e7fe      	b.n	800273c <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	0c02      	lsrs	r2, r0, #16
 800274e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002752:	0c0b      	lsrs	r3, r1, #16
 8002754:	4613      	mov	r3, r2
 8002756:	81fb      	strh	r3, [r7, #14]
                return value;
 8002758:	89fb      	ldrh	r3, [r7, #14]
            }
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002762:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6178      	str	r0, [r7, #20]
 800276c:	6139      	str	r1, [r7, #16]
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 8002772:	2305      	movs	r3, #5
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6939      	ldr	r1, [r7, #16]
 8002778:	6978      	ldr	r0, [r7, #20]
 800277a:	f7fe ff47 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	8bf9      	ldrh	r1, [r7, #30]
 800278a:	2000      	movs	r0, #0
 800278c:	4688      	mov	r8, r1
 800278e:	4681      	mov	r9, r0
 8002790:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002794:	6079      	str	r1, [r7, #4]
 8002796:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800279a:	6039      	str	r1, [r7, #0]
 800279c:	683c      	ldr	r4, [r7, #0]
 800279e:	2500      	movs	r5, #0
 80027a0:	ea42 0a04 	orr.w	sl, r2, r4
 80027a4:	ea43 0b05 	orr.w	fp, r3, r5
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2204      	movs	r2, #4
 80027b2:	701a      	strb	r2, [r3, #0]
            }
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027be <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80027be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6178      	str	r0, [r7, #20]
 80027c8:	6139      	str	r1, [r7, #16]
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 80027ce:	2304      	movs	r3, #4
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f7fe ff19 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	8bf9      	ldrh	r1, [r7, #30]
 80027e6:	2000      	movs	r0, #0
 80027e8:	4688      	mov	r8, r1
 80027ea:	4681      	mov	r9, r0
 80027ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80027f0:	6079      	str	r1, [r7, #4]
 80027f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80027f6:	6039      	str	r1, [r7, #0]
 80027f8:	683c      	ldr	r4, [r7, #0]
 80027fa:	2500      	movs	r5, #0
 80027fc:	ea42 0a04 	orr.w	sl, r2, r4
 8002800:	ea43 0b05 	orr.w	fp, r3, r5
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	701a      	strb	r2, [r3, #0]
            }
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800281a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800281a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6178      	str	r0, [r7, #20]
 8002824:	6139      	str	r1, [r7, #16]
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 800282a:	2303      	movs	r3, #3
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6939      	ldr	r1, [r7, #16]
 8002830:	6978      	ldr	r0, [r7, #20]
 8002832:	f7fe feeb 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	8bf9      	ldrh	r1, [r7, #30]
 8002842:	2000      	movs	r0, #0
 8002844:	4688      	mov	r8, r1
 8002846:	4681      	mov	r9, r0
 8002848:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800284c:	6079      	str	r1, [r7, #4]
 800284e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002852:	6039      	str	r1, [r7, #0]
 8002854:	683c      	ldr	r4, [r7, #0]
 8002856:	2500      	movs	r5, #0
 8002858:	ea42 0a04 	orr.w	sl, r2, r4
 800285c:	ea43 0b05 	orr.w	fp, r3, r5
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2204      	movs	r2, #4
 800286a:	701a      	strb	r2, [r3, #0]
            }
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002876 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002876:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 8002886:	2302      	movs	r3, #2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7fe febd 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2200      	movs	r2, #0
 80028a0:	4698      	mov	r8, r3
 80028a2:	4691      	mov	r9, r2
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80028b0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80028b4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80028b8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80028bc:	2500      	movs	r5, #0
 80028be:	ea40 0a04 	orr.w	sl, r0, r4
 80028c2:	ea41 0b05 	orr.w	fp, r1, r5
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	701a      	strb	r2, [r3, #0]
            }
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028dc <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 80028ec:	2301      	movs	r3, #1
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7fe fe8a 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2200      	movs	r2, #0
 8002906:	4698      	mov	r8, r3
 8002908:	4691      	mov	r9, r2
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002916:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800291a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800291e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002922:	2500      	movs	r5, #0
 8002924:	ea40 0a04 	orr.w	sl, r0, r4
 8002928:	ea41 0b05 	orr.w	fp, r1, r5
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	701a      	strb	r2, [r3, #0]
            }
 8002938:	bf00      	nop
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002942 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af02      	add	r7, sp, #8
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	2202      	movs	r2, #2
 8002958:	f240 6101 	movw	r1, #1537	; 0x601
 800295c:	f7fe fd24 	bl	80013a8 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8002964:	f240 6201 	movw	r2, #1537	; 0x601
 8002968:	4293      	cmp	r3, r2
 800296a:	d000      	beq.n	800296e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800296c:	e7fe      	b.n	800296c <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	331c      	adds	r3, #28
 8002988:	461a      	mov	r2, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffd9 	bl	8002942 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 800299a:	b580      	push	{r7, lr}
 800299c:	b08a      	sub	sp, #40	; 0x28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ffe5 	bl	8002978 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fc3c 	bl	8004230 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 80029b8:	4603      	mov	r3, r0
 80029ba:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 80029bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f814 	bl	80029ec <_Z31handleSDORequestDownloadBySDOIDt>
}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	2300      	movs	r3, #0
 80029d8:	2208      	movs	r2, #8
 80029da:	f240 5181 	movw	r1, #1409	; 0x581
 80029de:	f7fd fdc9 	bl	8000574 <_ZN3can11MessageBaseC1Emhb>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b092      	sub	sp, #72	; 0x48
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ffe6 	bl	80029cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b21      	cmp	r3, #33	; 0x21
 8002a0a:	f300 810b 	bgt.w	8002c24 <_Z31handleSDORequestDownloadBySDOIDt+0x238>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f300 80be 	bgt.w	8002b90 <_Z31handleSDORequestDownloadBySDOIDt+0x1a4>
 8002a14:	e30d      	b.n	8003032 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8002a16:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002a1a:	2b59      	cmp	r3, #89	; 0x59
 8002a1c:	f200 8309 	bhi.w	8003032 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <_Z31handleSDORequestDownloadBySDOIDt+0x3c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002d19 	.word	0x08002d19
 8002a2c:	08002d37 	.word	0x08002d37
 8002a30:	08002d51 	.word	0x08002d51
 8002a34:	08002d6f 	.word	0x08002d6f
 8002a38:	08002d8d 	.word	0x08002d8d
 8002a3c:	08002da7 	.word	0x08002da7
 8002a40:	08002dc3 	.word	0x08002dc3
 8002a44:	08003033 	.word	0x08003033
 8002a48:	08003033 	.word	0x08003033
 8002a4c:	08003033 	.word	0x08003033
 8002a50:	08003033 	.word	0x08003033
 8002a54:	08003033 	.word	0x08003033
 8002a58:	08003033 	.word	0x08003033
 8002a5c:	08003033 	.word	0x08003033
 8002a60:	08003033 	.word	0x08003033
 8002a64:	08003033 	.word	0x08003033
 8002a68:	08002ddf 	.word	0x08002ddf
 8002a6c:	08002df9 	.word	0x08002df9
 8002a70:	08003033 	.word	0x08003033
 8002a74:	08003033 	.word	0x08003033
 8002a78:	08003033 	.word	0x08003033
 8002a7c:	08003033 	.word	0x08003033
 8002a80:	08003033 	.word	0x08003033
 8002a84:	08003033 	.word	0x08003033
 8002a88:	08003033 	.word	0x08003033
 8002a8c:	08003033 	.word	0x08003033
 8002a90:	08003033 	.word	0x08003033
 8002a94:	08003033 	.word	0x08003033
 8002a98:	08003033 	.word	0x08003033
 8002a9c:	08003033 	.word	0x08003033
 8002aa0:	08003033 	.word	0x08003033
 8002aa4:	08003033 	.word	0x08003033
 8002aa8:	08002e13 	.word	0x08002e13
 8002aac:	08002e2d 	.word	0x08002e2d
 8002ab0:	08003033 	.word	0x08003033
 8002ab4:	08003033 	.word	0x08003033
 8002ab8:	08003033 	.word	0x08003033
 8002abc:	08003033 	.word	0x08003033
 8002ac0:	08003033 	.word	0x08003033
 8002ac4:	08003033 	.word	0x08003033
 8002ac8:	08003033 	.word	0x08003033
 8002acc:	08003033 	.word	0x08003033
 8002ad0:	08003033 	.word	0x08003033
 8002ad4:	08003033 	.word	0x08003033
 8002ad8:	08003033 	.word	0x08003033
 8002adc:	08003033 	.word	0x08003033
 8002ae0:	08003033 	.word	0x08003033
 8002ae4:	08003033 	.word	0x08003033
 8002ae8:	08003033 	.word	0x08003033
 8002aec:	08003033 	.word	0x08003033
 8002af0:	08003033 	.word	0x08003033
 8002af4:	08003033 	.word	0x08003033
 8002af8:	08003033 	.word	0x08003033
 8002afc:	08003033 	.word	0x08003033
 8002b00:	08003033 	.word	0x08003033
 8002b04:	08003033 	.word	0x08003033
 8002b08:	08003033 	.word	0x08003033
 8002b0c:	08003033 	.word	0x08003033
 8002b10:	08003033 	.word	0x08003033
 8002b14:	08003033 	.word	0x08003033
 8002b18:	08003033 	.word	0x08003033
 8002b1c:	08003033 	.word	0x08003033
 8002b20:	08003033 	.word	0x08003033
 8002b24:	08003033 	.word	0x08003033
 8002b28:	08002e47 	.word	0x08002e47
 8002b2c:	08002e63 	.word	0x08002e63
 8002b30:	08002e7f 	.word	0x08002e7f
 8002b34:	08002e99 	.word	0x08002e99
 8002b38:	08002eb5 	.word	0x08002eb5
 8002b3c:	08003033 	.word	0x08003033
 8002b40:	08002ed1 	.word	0x08002ed1
 8002b44:	08002eed 	.word	0x08002eed
 8002b48:	08002f07 	.word	0x08002f07
 8002b4c:	08002f23 	.word	0x08002f23
 8002b50:	08003033 	.word	0x08003033
 8002b54:	08003033 	.word	0x08003033
 8002b58:	08003033 	.word	0x08003033
 8002b5c:	08003033 	.word	0x08003033
 8002b60:	08003033 	.word	0x08003033
 8002b64:	08003033 	.word	0x08003033
 8002b68:	08002f3d 	.word	0x08002f3d
 8002b6c:	08002f59 	.word	0x08002f59
 8002b70:	08002f75 	.word	0x08002f75
 8002b74:	08002f8f 	.word	0x08002f8f
 8002b78:	08002fab 	.word	0x08002fab
 8002b7c:	08003033 	.word	0x08003033
 8002b80:	08002fc7 	.word	0x08002fc7
 8002b84:	08002fe3 	.word	0x08002fe3
 8002b88:	08002ffd 	.word	0x08002ffd
 8002b8c:	08003019 	.word	0x08003019
 8002b90:	3b01      	subs	r3, #1
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	f200 824d 	bhi.w	8003032 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8002b98:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <_Z31handleSDORequestDownloadBySDOIDt+0x1b4>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002c39 	.word	0x08002c39
 8002ba4:	08002c55 	.word	0x08002c55
 8002ba8:	08002c71 	.word	0x08002c71
 8002bac:	08002c8d 	.word	0x08002c8d
 8002bb0:	08002ca9 	.word	0x08002ca9
 8002bb4:	08003033 	.word	0x08003033
 8002bb8:	08003033 	.word	0x08003033
 8002bbc:	08003033 	.word	0x08003033
 8002bc0:	08003033 	.word	0x08003033
 8002bc4:	08003033 	.word	0x08003033
 8002bc8:	08003033 	.word	0x08003033
 8002bcc:	08003033 	.word	0x08003033
 8002bd0:	08003033 	.word	0x08003033
 8002bd4:	08003033 	.word	0x08003033
 8002bd8:	08003033 	.word	0x08003033
 8002bdc:	08002cc5 	.word	0x08002cc5
 8002be0:	08003033 	.word	0x08003033
 8002be4:	08003033 	.word	0x08003033
 8002be8:	08003033 	.word	0x08003033
 8002bec:	08003033 	.word	0x08003033
 8002bf0:	08003033 	.word	0x08003033
 8002bf4:	08003033 	.word	0x08003033
 8002bf8:	08003033 	.word	0x08003033
 8002bfc:	08003033 	.word	0x08003033
 8002c00:	08003033 	.word	0x08003033
 8002c04:	08003033 	.word	0x08003033
 8002c08:	08003033 	.word	0x08003033
 8002c0c:	08003033 	.word	0x08003033
 8002c10:	08003033 	.word	0x08003033
 8002c14:	08003033 	.word	0x08003033
 8002c18:	08003033 	.word	0x08003033
 8002c1c:	08002ce1 	.word	0x08002ce1
 8002c20:	08002cfd 	.word	0x08002cfd
 8002c24:	f240 4269 	movw	r2, #1129	; 0x469
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f300 8202 	bgt.w	8003032 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8002c2e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002c32:	f6bf aef0 	bge.w	8002a16 <_Z31handleSDORequestDownloadBySDOIDt+0x2a>
 8002c36:	e1fc      	b.n	8003032 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8002c38:	f000 fe1c 	bl	8003874 <_Z13OD_NodeID_getv>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fb04 	bl	8004254 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c52:	e1f6      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8002c54:	f000 fe2a 	bl	80038ac <_Z17OD_NodeStatus_getv>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 fb0b 	bl	800427e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c6e:	e1e8      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8002c70:	f000 fe38 	bl	80038e4 <_Z22OD_ProtocolVersion_getv>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f001 fb12 	bl	80042a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002c8a:	e1da      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8002c8c:	f000 fe46 	bl	800391c <_Z19OD_StackVersion_getv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 fb19 	bl	80042d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ca6:	e1cc      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8002ca8:	f000 fe54 	bl	8003954 <_Z17OD_DbcVersion_getv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fb20 	bl	80042fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cc2:	e1be      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8002cc4:	f000 fe62 	bl	800398c <_Z24OD_HeartbeatInterval_getv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 fb27 	bl	8004326 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cde:	e1b0      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8002ce0:	f000 fe8c 	bl	80039fc <_Z21OD_SendOdOnBootup_getv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fb2e 	bl	8004350 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002cfa:	e1a2      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8002cfc:	f000 feb6 	bl	8003a6c <_Z26OD_OdEntrySendInterval_getv>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fb35 	bl	800437a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d16:	e194      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8002d18:	f000 fee0 	bl	8003adc <_Z15OD_CpuUsage_getv>
 8002d1c:	eef0 7a40 	vmov.f32	s15, s0
 8002d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d24:	eeb0 0a67 	vmov.f32	s0, s15
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fb3b 	bl	80043a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d34:	e185      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8002d36:	f000 feef 	bl	8003b18 <_Z14OD_MemFree_getv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fb45 	bl	80043d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d4e:	e178      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8002d50:	f000 fefe 	bl	8003b50 <_Z16OD_BoardTemp_getv>
 8002d54:	eef0 7a40 	vmov.f32	s15, s0
 8002d58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 fb4a 	bl	80043fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d6c:	e169      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8002d6e:	f000 ff0d 	bl	8003b8c <_Z19OD_InputVoltage_getv>
 8002d72:	eef0 7a40 	vmov.f32	s15, s0
 8002d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f001 fb52 	bl	8004428 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002d8a:	e15a      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8002d8c:	f000 ff1c 	bl	8003bc8 <_Z14OD_runtime_getv>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fb5c 	bl	8004456 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002da4:	e14d      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8002da6:	f000 ff2b 	bl	8003c00 <_Z12OD_SdcIn_getv>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 fb62 	bl	800447e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002dc0:	e13f      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8002dc2:	f000 ff39 	bl	8003c38 <_Z13OD_SdcOut_getv>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 fb69 	bl	80044a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ddc:	e131      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8002dde:	f000 ff47 	bl	8003c70 <_Z15OD_ChipUID1_getv>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002dea:	4608      	mov	r0, r1
 8002dec:	f001 fb71 	bl	80044d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002df6:	e124      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8002df8:	f000 ff5a 	bl	8003cb0 <_Z15OD_ChipUID2_getv>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e04:	4608      	mov	r0, r1
 8002e06:	f001 fb7d 	bl	8004504 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e10:	e117      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8002e12:	f000 ff6d 	bl	8003cf0 <_Z16OD_BuildDate_getv>
 8002e16:	4602      	mov	r2, r0
 8002e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f001 fb89 	bl	8004536 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e2a:	e10a      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8002e2c:	f000 ff7c 	bl	8003d28 <_Z16OD_BuildTime_getv>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fb90 	bl	800455e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e44:	e0fd      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8002e46:	f000 ff8b 	bl	8003d60 <_Z20OD_CAN1_TxErrCnt_getv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fb96 	bl	8004586 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e60:	e0ef      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8002e62:	f000 ff99 	bl	8003d98 <_Z20OD_CAN1_RxErrCnt_getv>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fb9d 	bl	80045b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e7c:	e0e1      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8002e7e:	f000 ffa7 	bl	8003dd0 <_Z25OD_CAN1_lastErrorCode_getv>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fba5 	bl	80045da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002e96:	e0d4      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8002e98:	f000 ffb6 	bl	8003e08 <_Z26OD_CAN1_autoErrorReset_getv>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fbab 	bl	8004602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002eb2:	e0c6      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8002eb4:	f000 ffe0 	bl	8003e78 <_Z20OD_CAN1_Baudrate_getv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fbb2 	bl	800462c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ece:	e0b8      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8002ed0:	f001 f80a 	bl	8003ee8 <_Z18OD_CAN1_Status_getv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fbb9 	bl	8004656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002eea:	e0aa      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8002eec:	f001 f818 	bl	8003f20 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fbc1 	bl	8004680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f04:	e09d      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8002f06:	f001 f827 	bl	8003f58 <_Z23OD_CAN1_ErrorStatus_getv>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fbc7 	bl	80046a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f20:	e08f      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8002f22:	f001 f835 	bl	8003f90 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fbcf 	bl	80046d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f3a:	e082      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8002f3c:	f001 f844 	bl	8003fc8 <_Z20OD_CAN2_TxErrCnt_getv>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fbd5 	bl	80046fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f56:	e074      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8002f58:	f001 f852 	bl	8004000 <_Z20OD_CAN2_RxErrCnt_getv>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fbdc 	bl	8004724 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f72:	e066      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8002f74:	f001 f860 	bl	8004038 <_Z25OD_CAN2_lastErrorCode_getv>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 fbe4 	bl	800474e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002f8c:	e059      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8002f8e:	f001 f86f 	bl	8004070 <_Z26OD_CAN2_autoErrorReset_getv>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fbea 	bl	8004776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fa8:	e04b      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8002faa:	f001 f899 	bl	80040e0 <_Z20OD_CAN2_Baudrate_getv>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fbf1 	bl	80047a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fc4:	e03d      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8002fc6:	f001 f8c3 	bl	8004150 <_Z18OD_CAN2_Status_getv>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 fbf8 	bl	80047ca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002fe0:	e02f      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8002fe2:	f001 f8d1 	bl	8004188 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fc00 	bl	80047f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8002ffa:	e022      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8002ffc:	f001 f8e0 	bl	80041c0 <_Z23OD_CAN2_ErrorStatus_getv>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fc06 	bl	800481c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003016:	e014      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003018:	f001 f8ee 	bl	80041f8 <_Z29OD_CAN2_DelayedTxMessages_getv>
 800301c:	4602      	mov	r2, r0
 800301e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fc0e 	bl	8004846 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003030:	e007      	b.n	8003042 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fc17 	bl	800486e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003040:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003042:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f001 fc23 	bl	8004898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800305a:	2200      	movs	r2, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fbbd 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <_Z31handleSDORequestDownloadBySDOIDt+0x690>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f107 0108 	add.w	r1, r7, #8
 800306a:	2300      	movs	r3, #0
 800306c:	2200      	movs	r2, #0
 800306e:	f007 fd63 	bl	800ab38 <osMessageQueuePut>
}
 8003072:	bf00      	nop
 8003074:	3748      	adds	r7, #72	; 0x48
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200000b0 	.word	0x200000b0

08003080 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	2208      	movs	r2, #8
 8003096:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800309a:	f7fe f985 	bl	80013a8 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80030a2:	f240 52c1 	movw	r2, #1473	; 0x5c1
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d000      	beq.n	80030ac <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80030aa:	e7fe      	b.n	80030aa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	331c      	adds	r3, #28
 80030c6:	461a      	mov	r2, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffd9 	bl	8003080 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b09c      	sub	sp, #112	; 0x70
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 80030e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff ffe5 	bl	80030b6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 80030ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fc6b 	bl	80029cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 80030fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003100:	4618      	mov	r0, r3
 8003102:	f001 fbde 	bl	80048c2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003106:	4603      	mov	r3, r0
 8003108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 800310c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003110:	2b21      	cmp	r3, #33	; 0x21
 8003112:	f300 810b 	bgt.w	800332c <_Z22handleSDORequestUploadRK9RxMessage+0x254>
 8003116:	2b00      	cmp	r3, #0
 8003118:	f300 80be 	bgt.w	8003298 <_Z22handleSDORequestUploadRK9RxMessage+0x1c0>
 800311c:	e382      	b.n	8003824 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 800311e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003122:	2b59      	cmp	r3, #89	; 0x59
 8003124:	f200 837e 	bhi.w	8003824 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003128:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <_Z22handleSDORequestUploadRK9RxMessage+0x58>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	0800346f 	.word	0x0800346f
 8003134:	0800348d 	.word	0x0800348d
 8003138:	080034a7 	.word	0x080034a7
 800313c:	080034c5 	.word	0x080034c5
 8003140:	080034e3 	.word	0x080034e3
 8003144:	080034fd 	.word	0x080034fd
 8003148:	08003519 	.word	0x08003519
 800314c:	08003825 	.word	0x08003825
 8003150:	08003825 	.word	0x08003825
 8003154:	08003825 	.word	0x08003825
 8003158:	08003825 	.word	0x08003825
 800315c:	08003825 	.word	0x08003825
 8003160:	08003825 	.word	0x08003825
 8003164:	08003825 	.word	0x08003825
 8003168:	08003825 	.word	0x08003825
 800316c:	08003825 	.word	0x08003825
 8003170:	08003535 	.word	0x08003535
 8003174:	0800354f 	.word	0x0800354f
 8003178:	08003825 	.word	0x08003825
 800317c:	08003825 	.word	0x08003825
 8003180:	08003825 	.word	0x08003825
 8003184:	08003825 	.word	0x08003825
 8003188:	08003825 	.word	0x08003825
 800318c:	08003825 	.word	0x08003825
 8003190:	08003825 	.word	0x08003825
 8003194:	08003825 	.word	0x08003825
 8003198:	08003825 	.word	0x08003825
 800319c:	08003825 	.word	0x08003825
 80031a0:	08003825 	.word	0x08003825
 80031a4:	08003825 	.word	0x08003825
 80031a8:	08003825 	.word	0x08003825
 80031ac:	08003825 	.word	0x08003825
 80031b0:	08003569 	.word	0x08003569
 80031b4:	08003583 	.word	0x08003583
 80031b8:	08003825 	.word	0x08003825
 80031bc:	08003825 	.word	0x08003825
 80031c0:	08003825 	.word	0x08003825
 80031c4:	08003825 	.word	0x08003825
 80031c8:	08003825 	.word	0x08003825
 80031cc:	08003825 	.word	0x08003825
 80031d0:	08003825 	.word	0x08003825
 80031d4:	08003825 	.word	0x08003825
 80031d8:	08003825 	.word	0x08003825
 80031dc:	08003825 	.word	0x08003825
 80031e0:	08003825 	.word	0x08003825
 80031e4:	08003825 	.word	0x08003825
 80031e8:	08003825 	.word	0x08003825
 80031ec:	08003825 	.word	0x08003825
 80031f0:	08003825 	.word	0x08003825
 80031f4:	08003825 	.word	0x08003825
 80031f8:	08003825 	.word	0x08003825
 80031fc:	08003825 	.word	0x08003825
 8003200:	08003825 	.word	0x08003825
 8003204:	08003825 	.word	0x08003825
 8003208:	08003825 	.word	0x08003825
 800320c:	08003825 	.word	0x08003825
 8003210:	08003825 	.word	0x08003825
 8003214:	08003825 	.word	0x08003825
 8003218:	08003825 	.word	0x08003825
 800321c:	08003825 	.word	0x08003825
 8003220:	08003825 	.word	0x08003825
 8003224:	08003825 	.word	0x08003825
 8003228:	08003825 	.word	0x08003825
 800322c:	08003825 	.word	0x08003825
 8003230:	0800359d 	.word	0x0800359d
 8003234:	080035b9 	.word	0x080035b9
 8003238:	080035d5 	.word	0x080035d5
 800323c:	080035ef 	.word	0x080035ef
 8003240:	08003625 	.word	0x08003625
 8003244:	08003825 	.word	0x08003825
 8003248:	08003675 	.word	0x08003675
 800324c:	08003691 	.word	0x08003691
 8003250:	080036ab 	.word	0x080036ab
 8003254:	080036c7 	.word	0x080036c7
 8003258:	08003825 	.word	0x08003825
 800325c:	08003825 	.word	0x08003825
 8003260:	08003825 	.word	0x08003825
 8003264:	08003825 	.word	0x08003825
 8003268:	08003825 	.word	0x08003825
 800326c:	08003825 	.word	0x08003825
 8003270:	080036e1 	.word	0x080036e1
 8003274:	080036fd 	.word	0x080036fd
 8003278:	08003719 	.word	0x08003719
 800327c:	08003733 	.word	0x08003733
 8003280:	08003769 	.word	0x08003769
 8003284:	08003825 	.word	0x08003825
 8003288:	080037b9 	.word	0x080037b9
 800328c:	080037d5 	.word	0x080037d5
 8003290:	080037ef 	.word	0x080037ef
 8003294:	0800380b 	.word	0x0800380b
 8003298:	3b01      	subs	r3, #1
 800329a:	2b20      	cmp	r3, #32
 800329c:	f200 82c2 	bhi.w	8003824 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <_Z22handleSDORequestUploadRK9RxMessage+0x1d0>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	08003341 	.word	0x08003341
 80032ac:	0800335d 	.word	0x0800335d
 80032b0:	08003379 	.word	0x08003379
 80032b4:	08003395 	.word	0x08003395
 80032b8:	080033b1 	.word	0x080033b1
 80032bc:	08003825 	.word	0x08003825
 80032c0:	08003825 	.word	0x08003825
 80032c4:	08003825 	.word	0x08003825
 80032c8:	08003825 	.word	0x08003825
 80032cc:	08003825 	.word	0x08003825
 80032d0:	08003825 	.word	0x08003825
 80032d4:	08003825 	.word	0x08003825
 80032d8:	08003825 	.word	0x08003825
 80032dc:	08003825 	.word	0x08003825
 80032e0:	08003825 	.word	0x08003825
 80032e4:	080033cd 	.word	0x080033cd
 80032e8:	08003825 	.word	0x08003825
 80032ec:	08003825 	.word	0x08003825
 80032f0:	08003825 	.word	0x08003825
 80032f4:	08003825 	.word	0x08003825
 80032f8:	08003825 	.word	0x08003825
 80032fc:	08003825 	.word	0x08003825
 8003300:	08003825 	.word	0x08003825
 8003304:	08003825 	.word	0x08003825
 8003308:	08003825 	.word	0x08003825
 800330c:	08003825 	.word	0x08003825
 8003310:	08003825 	.word	0x08003825
 8003314:	08003825 	.word	0x08003825
 8003318:	08003825 	.word	0x08003825
 800331c:	08003825 	.word	0x08003825
 8003320:	08003825 	.word	0x08003825
 8003324:	08003403 	.word	0x08003403
 8003328:	08003439 	.word	0x08003439
 800332c:	f240 4269 	movw	r2, #1129	; 0x469
 8003330:	4293      	cmp	r3, r2
 8003332:	f300 8277 	bgt.w	8003824 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003336:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800333a:	f6bf aef0 	bge.w	800311e <_Z22handleSDORequestUploadRK9RxMessage+0x46>
 800333e:	e271      	b.n	8003824 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003340:	2303      	movs	r3, #3
 8003342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003346:	f000 fa95 	bl	8003874 <_Z13OD_NodeID_getv>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 ff7d 	bl	8004254 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800335a:	e26c      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800335c:	2303      	movs	r3, #3
 800335e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003362:	f000 faa3 	bl	80038ac <_Z17OD_NodeStatus_getv>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ff84 	bl	800427e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 8003376:	e25e      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003378:	2303      	movs	r3, #3
 800337a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 800337e:	f000 fab1 	bl	80038e4 <_Z22OD_ProtocolVersion_getv>
 8003382:	4603      	mov	r3, r0
 8003384:	461a      	mov	r2, r3
 8003386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 ff8b 	bl	80042a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8003392:	e250      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003394:	2303      	movs	r3, #3
 8003396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 800339a:	f000 fabf 	bl	800391c <_Z19OD_StackVersion_getv>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 ff92 	bl	80042d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80033ae:	e242      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 80033b6:	f000 facd 	bl	8003954 <_Z17OD_DbcVersion_getv>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 ff99 	bl	80042fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80033ca:	e234      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 80033cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033d0:	4618      	mov	r0, r3
 80033d2:	f001 fa88 	bl	80048e6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80033dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 faef 	bl	80039c4 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80033ec:	f000 face 	bl	800398c <_Z24OD_HeartbeatInterval_getv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 ff93 	bl	8004326 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8003400:	e219      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 8003402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fa7f 	bl	800490a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8003412:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fb0c 	bl	8003a34 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800341c:	2300      	movs	r3, #0
 800341e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003422:	f000 faeb 	bl	80039fc <_Z21OD_SendOdOnBootup_getv>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 ff8d 	bl	8004350 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8003436:	e1fe      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8003438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fa76 	bl	800492e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8003442:	4603      	mov	r3, r0
 8003444:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8003448:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fb29 	bl	8003aa4 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003452:	2300      	movs	r3, #0
 8003454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003458:	f000 fb08 	bl	8003a6c <_Z26OD_OdEntrySendInterval_getv>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff87 	bl	800437a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 800346c:	e1e3      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800346e:	2303      	movs	r3, #3
 8003470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003474:	f000 fb32 	bl	8003adc <_Z15OD_CpuUsage_getv>
 8003478:	eef0 7a40 	vmov.f32	s15, s0
 800347c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff8d 	bl	80043a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 800348a:	e1d4      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800348c:	2303      	movs	r3, #3
 800348e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003492:	f000 fb41 	bl	8003b18 <_Z14OD_MemFree_getv>
 8003496:	4602      	mov	r2, r0
 8003498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 ff97 	bl	80043d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80034a4:	e1c7      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 80034ac:	f000 fb50 	bl	8003b50 <_Z16OD_BoardTemp_getv>
 80034b0:	eef0 7a40 	vmov.f32	s15, s0
 80034b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 ff9c 	bl	80043fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80034c2:	e1b8      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 80034ca:	f000 fb5f 	bl	8003b8c <_Z19OD_InputVoltage_getv>
 80034ce:	eef0 7a40 	vmov.f32	s15, s0
 80034d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 ffa4 	bl	8004428 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80034e0:	e1a9      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 80034e8:	f000 fb6e 	bl	8003bc8 <_Z14OD_runtime_getv>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 ffae 	bl	8004456 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 80034fa:	e19c      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003502:	f000 fb7d 	bl	8003c00 <_Z12OD_SdcIn_getv>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ffb4 	bl	800447e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8003516:	e18e      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003518:	2303      	movs	r3, #3
 800351a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 800351e:	f000 fb8b 	bl	8003c38 <_Z13OD_SdcOut_getv>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 ffbb 	bl	80044a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8003532:	e180      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003534:	2303      	movs	r3, #3
 8003536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 800353a:	f000 fb99 	bl	8003c70 <_Z15OD_ChipUID1_getv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003546:	4608      	mov	r0, r1
 8003548:	f000 ffc3 	bl	80044d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 800354c:	e173      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800354e:	2303      	movs	r3, #3
 8003550:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003554:	f000 fbac 	bl	8003cb0 <_Z15OD_ChipUID2_getv>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003560:	4608      	mov	r0, r1
 8003562:	f000 ffcf 	bl	8004504 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8003566:	e166      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003568:	2303      	movs	r3, #3
 800356a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 800356e:	f000 fbbf 	bl	8003cf0 <_Z16OD_BuildDate_getv>
 8003572:	4602      	mov	r2, r0
 8003574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 ffdb 	bl	8004536 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8003580:	e159      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003582:	2303      	movs	r3, #3
 8003584:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003588:	f000 fbce 	bl	8003d28 <_Z16OD_BuildTime_getv>
 800358c:	4602      	mov	r2, r0
 800358e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f000 ffe2 	bl	800455e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 800359a:	e14c      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800359c:	2303      	movs	r3, #3
 800359e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80035a2:	f000 fbdd 	bl	8003d60 <_Z20OD_CAN1_TxErrCnt_getv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 ffe8 	bl	8004586 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80035b6:	e13e      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80035be:	f000 fbeb 	bl	8003d98 <_Z20OD_CAN1_RxErrCnt_getv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 ffef 	bl	80045b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80035d2:	e130      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80035da:	f000 fbf9 	bl	8003dd0 <_Z25OD_CAN1_lastErrorCode_getv>
 80035de:	4602      	mov	r2, r0
 80035e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fff7 	bl	80045da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80035ec:	e123      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 80035ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 f9ad 	bl	8004952 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 80035fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fc1c 	bl	8003e40 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003608:	2300      	movs	r3, #0
 800360a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 800360e:	f000 fbfb 	bl	8003e08 <_Z26OD_CAN1_autoErrorReset_getv>
 8003612:	4603      	mov	r3, r0
 8003614:	461a      	mov	r2, r3
 8003616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fff0 	bl	8004602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8003622:	e108      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8003624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003628:	4618      	mov	r0, r3
 800362a:	f001 f9a4 	bl	8004976 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 800362e:	4603      	mov	r3, r0
 8003630:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8003634:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003638:	2b7c      	cmp	r3, #124	; 0x7c
 800363a:	d904      	bls.n	8003646 <_Z22handleSDORequestUploadRK9RxMessage+0x56e>
 800363c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003644:	d903      	bls.n	800364e <_Z22handleSDORequestUploadRK9RxMessage+0x576>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003646:	2305      	movs	r3, #5
 8003648:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800364c:	e007      	b.n	800365e <_Z22handleSDORequestUploadRK9RxMessage+0x586>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 800364e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fc2c 	bl	8003eb0 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003658:	2300      	movs	r3, #0
 800365a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800365e:	f000 fc0b 	bl	8003e78 <_Z20OD_CAN1_Baudrate_getv>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 ffdd 	bl	800462c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8003672:	e0e0      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003674:	2303      	movs	r3, #3
 8003676:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 800367a:	f000 fc35 	bl	8003ee8 <_Z18OD_CAN1_Status_getv>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ffe4 	bl	8004656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 800368e:	e0d2      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003690:	2303      	movs	r3, #3
 8003692:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003696:	f000 fc43 	bl	8003f20 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 800369a:	4602      	mov	r2, r0
 800369c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 ffec 	bl	8004680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80036a8:	e0c5      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80036b0:	f000 fc52 	bl	8003f58 <_Z23OD_CAN1_ErrorStatus_getv>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fff2 	bl	80046a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80036c4:	e0b7      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80036cc:	f000 fc60 	bl	8003f90 <_Z29OD_CAN1_DelayedTxMessages_getv>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fffa 	bl	80046d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80036de:	e0aa      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80036e6:	f000 fc6f 	bl	8003fc8 <_Z20OD_CAN2_TxErrCnt_getv>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f800 	bl	80046fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 80036fa:	e09c      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003702:	f000 fc7d 	bl	8004000 <_Z20OD_CAN2_RxErrCnt_getv>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f807 	bl	8004724 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8003716:	e08e      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003718:	2303      	movs	r3, #3
 800371a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 800371e:	f000 fc8b 	bl	8004038 <_Z25OD_CAN2_lastErrorCode_getv>
 8003722:	4602      	mov	r2, r0
 8003724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f80f 	bl	800474e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8003730:	e081      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 8003732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003736:	4618      	mov	r0, r3
 8003738:	f001 f92f 	bl	800499a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8003742:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fcae 	bl	80040a8 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003752:	f000 fc8d 	bl	8004070 <_Z26OD_CAN2_autoErrorReset_getv>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f001 f808 	bl	8004776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8003766:	e066      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 8003768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800376c:	4618      	mov	r0, r3
 800376e:	f001 f926 	bl	80049be <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8003772:	4603      	mov	r3, r0
 8003774:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8003778:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800377c:	2b7c      	cmp	r3, #124	; 0x7c
 800377e:	d904      	bls.n	800378a <_Z22handleSDORequestUploadRK9RxMessage+0x6b2>
 8003780:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003788:	d903      	bls.n	8003792 <_Z22handleSDORequestUploadRK9RxMessage+0x6ba>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 800378a:	2305      	movs	r3, #5
 800378c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003790:	e007      	b.n	80037a2 <_Z22handleSDORequestUploadRK9RxMessage+0x6ca>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8003792:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fcbe 	bl	8004118 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80037a2:	f000 fc9d 	bl	80040e0 <_Z20OD_CAN2_Baudrate_getv>
 80037a6:	4603      	mov	r3, r0
 80037a8:	461a      	mov	r2, r3
 80037aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fff5 	bl	80047a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 80037b6:	e03e      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 80037be:	f000 fcc7 	bl	8004150 <_Z18OD_CAN2_Status_getv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fffc 	bl	80047ca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 80037d2:	e030      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80037da:	f000 fcd5 	bl	8004188 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80037de:	4602      	mov	r2, r0
 80037e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f804 	bl	80047f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80037ec:	e023      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 80037f4:	f000 fce4 	bl	80041c0 <_Z23OD_CAN2_ErrorStatus_getv>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f001 f80a 	bl	800481c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8003808:	e015      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800380a:	2303      	movs	r3, #3
 800380c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003810:	f000 fcf2 	bl	80041f8 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003814:	4602      	mov	r2, r0
 8003816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f812 	bl	8004846 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003822:	e008      	b.n	8003836 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003824:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f001 f81d 	bl	800486e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003834:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003836:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800383a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f829 	bl	8004898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc ffc3 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <_Z22handleSDORequestUploadRK9RxMessage+0x798>)
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	f107 0108 	add.w	r1, r7, #8
 800385e:	2300      	movs	r3, #0
 8003860:	2200      	movs	r2, #0
 8003862:	f007 f969 	bl	800ab38 <osMessageQueuePut>
}
 8003866:	bf00      	nop
 8003868:	3770      	adds	r7, #112	; 0x70
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200000b0 	.word	0x200000b0

08003874 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <_Z13OD_NodeID_getv+0x30>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f04f 31ff 	mov.w	r1, #4294967295
 8003882:	4618      	mov	r0, r3
 8003884:	f007 f85d 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_Z13OD_NodeID_getv+0x34>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <_Z13OD_NodeID_getv+0x30>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f007 f8a0 	bl	800a9d8 <osMutexRelease>
    return value;
 8003898:	79fb      	ldrb	r3, [r7, #7]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000128 	.word	0x20000128
 80038a8:	200000b9 	.word	0x200000b9

080038ac <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <_Z17OD_NodeStatus_getv+0x30>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f04f 31ff 	mov.w	r1, #4294967295
 80038ba:	4618      	mov	r0, r3
 80038bc:	f007 f841 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <_Z17OD_NodeStatus_getv+0x34>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <_Z17OD_NodeStatus_getv+0x30>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f007 f884 	bl	800a9d8 <osMutexRelease>
    return value;
 80038d0:	79fb      	ldrb	r3, [r7, #7]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	2000012c 	.word	0x2000012c
 80038e0:	200000ba 	.word	0x200000ba

080038e4 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <_Z22OD_ProtocolVersion_getv+0x30>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f04f 31ff 	mov.w	r1, #4294967295
 80038f2:	4618      	mov	r0, r3
 80038f4:	f007 f825 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <_Z22OD_ProtocolVersion_getv+0x34>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <_Z22OD_ProtocolVersion_getv+0x30>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f007 f868 	bl	800a9d8 <osMutexRelease>
    return value;
 8003908:	88fb      	ldrh	r3, [r7, #6]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000130 	.word	0x20000130
 8003918:	20000000 	.word	0x20000000

0800391c <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <_Z19OD_StackVersion_getv+0x30>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f04f 31ff 	mov.w	r1, #4294967295
 800392a:	4618      	mov	r0, r3
 800392c:	f007 f809 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <_Z19OD_StackVersion_getv+0x34>)
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <_Z19OD_StackVersion_getv+0x30>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f007 f84c 	bl	800a9d8 <osMutexRelease>
    return value;
 8003940:	88fb      	ldrh	r3, [r7, #6]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000134 	.word	0x20000134
 8003950:	200000bc 	.word	0x200000bc

08003954 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <_Z17OD_DbcVersion_getv+0x30>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f04f 31ff 	mov.w	r1, #4294967295
 8003962:	4618      	mov	r0, r3
 8003964:	f006 ffed 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <_Z17OD_DbcVersion_getv+0x34>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <_Z17OD_DbcVersion_getv+0x30>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f007 f830 	bl	800a9d8 <osMutexRelease>
    return value;
 8003978:	88fb      	ldrh	r3, [r7, #6]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000138 	.word	0x20000138
 8003988:	200000be 	.word	0x200000be

0800398c <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <_Z24OD_HeartbeatInterval_getv+0x30>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f04f 31ff 	mov.w	r1, #4294967295
 800399a:	4618      	mov	r0, r3
 800399c:	f006 ffd1 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 80039a0:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <_Z24OD_HeartbeatInterval_getv+0x34>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <_Z24OD_HeartbeatInterval_getv+0x30>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f007 f814 	bl	800a9d8 <osMutexRelease>
    return value;
 80039b0:	88fb      	ldrh	r3, [r7, #6]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	2000013c 	.word	0x2000013c
 80039c0:	20000002 	.word	0x20000002

080039c4 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f04f 31ff 	mov.w	r1, #4294967295
 80039d6:	4618      	mov	r0, r3
 80039d8:	f006 ffb3 	bl	800a942 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 80039dc:	4a06      	ldr	r2, [pc, #24]	; (80039f8 <_Z24OD_HeartbeatInterval_sett+0x34>)
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f006 fff6 	bl	800a9d8 <osMutexRelease>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000013c 	.word	0x2000013c
 80039f8:	20000002 	.word	0x20000002

080039fc <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <_Z21OD_SendOdOnBootup_getv+0x30>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f006 ff99 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <_Z21OD_SendOdOnBootup_getv+0x30>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f006 ffdc 	bl	800a9d8 <osMutexRelease>
    return value;
 8003a20:	79fb      	ldrb	r3, [r7, #7]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000140 	.word	0x20000140
 8003a30:	200000c0 	.word	0x200000c0

08003a34 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f04f 31ff 	mov.w	r1, #4294967295
 8003a46:	4618      	mov	r0, r3
 8003a48:	f006 ff7b 	bl	800a942 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8003a4c:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f006 ffbe 	bl	800a9d8 <osMutexRelease>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000140 	.word	0x20000140
 8003a68:	200000c0 	.word	0x200000c0

08003a6c <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f006 ff61 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f006 ffa4 	bl	800a9d8 <osMutexRelease>
    return value;
 8003a90:	88fb      	ldrh	r3, [r7, #6]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000144 	.word	0x20000144
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f006 ff43 	bl	800a942 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f006 ff86 	bl	800a9d8 <osMutexRelease>
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000144 	.word	0x20000144
 8003ad8:	20000004 	.word	0x20000004

08003adc <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <_Z15OD_CpuUsage_getv+0x34>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8003aea:	4618      	mov	r0, r3
 8003aec:	f006 ff29 	bl	800a942 <osMutexAcquire>
    float value = OD_CpuUsage;
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <_Z15OD_CpuUsage_getv+0x38>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8003af6:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <_Z15OD_CpuUsage_getv+0x34>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 ff6c 	bl	800a9d8 <osMutexRelease>
    return value;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	ee07 3a90 	vmov	s15, r3
}
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000148 	.word	0x20000148
 8003b14:	200000c4 	.word	0x200000c4

08003b18 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <_Z14OD_MemFree_getv+0x30>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f04f 31ff 	mov.w	r1, #4294967295
 8003b26:	4618      	mov	r0, r3
 8003b28:	f006 ff0b 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <_Z14OD_MemFree_getv+0x34>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <_Z14OD_MemFree_getv+0x30>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f006 ff4e 	bl	800a9d8 <osMutexRelease>
    return value;
 8003b3c:	687b      	ldr	r3, [r7, #4]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000014c 	.word	0x2000014c
 8003b4c:	200000c8 	.word	0x200000c8

08003b50 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <_Z16OD_BoardTemp_getv+0x34>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f006 feef 	bl	800a942 <osMutexAcquire>
    float value = OD_BoardTemp;
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <_Z16OD_BoardTemp_getv+0x38>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <_Z16OD_BoardTemp_getv+0x34>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f006 ff32 	bl	800a9d8 <osMutexRelease>
    return value;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	ee07 3a90 	vmov	s15, r3
}
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000150 	.word	0x20000150
 8003b88:	200000cc 	.word	0x200000cc

08003b8c <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <_Z19OD_InputVoltage_getv+0x34>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f006 fed1 	bl	800a942 <osMutexAcquire>
    float value = OD_InputVoltage;
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <_Z19OD_InputVoltage_getv+0x38>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <_Z19OD_InputVoltage_getv+0x34>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f006 ff14 	bl	800a9d8 <osMutexRelease>
    return value;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	ee07 3a90 	vmov	s15, r3
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000154 	.word	0x20000154
 8003bc4:	200000d0 	.word	0x200000d0

08003bc8 <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <_Z14OD_runtime_getv+0x30>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f006 feb3 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <_Z14OD_runtime_getv+0x34>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <_Z14OD_runtime_getv+0x30>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f006 fef6 	bl	800a9d8 <osMutexRelease>
    return value;
 8003bec:	687b      	ldr	r3, [r7, #4]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000158 	.word	0x20000158
 8003bfc:	200000d4 	.word	0x200000d4

08003c00 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <_Z12OD_SdcIn_getv+0x30>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f006 fe97 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <_Z12OD_SdcIn_getv+0x34>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <_Z12OD_SdcIn_getv+0x30>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f006 feda 	bl	800a9d8 <osMutexRelease>
    return value;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000015c 	.word	0x2000015c
 8003c34:	200000d8 	.word	0x200000d8

08003c38 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <_Z13OD_SdcOut_getv+0x30>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 31ff 	mov.w	r1, #4294967295
 8003c46:	4618      	mov	r0, r3
 8003c48:	f006 fe7b 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <_Z13OD_SdcOut_getv+0x34>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <_Z13OD_SdcOut_getv+0x30>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f006 febe 	bl	800a9d8 <osMutexRelease>
    return value;
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000160 	.word	0x20000160
 8003c6c:	200000d9 	.word	0x200000d9

08003c70 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <_Z15OD_ChipUID1_getv+0x38>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f006 fe5f 	bl	800a942 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <_Z15OD_ChipUID1_getv+0x3c>)
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <_Z15OD_ChipUID1_getv+0x38>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f006 fea0 	bl	800a9d8 <osMutexRelease>
    return value;
 8003c98:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000164 	.word	0x20000164
 8003cac:	200000e0 	.word	0x200000e0

08003cb0 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <_Z15OD_ChipUID2_getv+0x38>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f04f 31ff 	mov.w	r1, #4294967295
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f006 fe3f 	bl	800a942 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <_Z15OD_ChipUID2_getv+0x3c>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <_Z15OD_ChipUID2_getv+0x38>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f006 fe80 	bl	800a9d8 <osMutexRelease>
    return value;
 8003cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000168 	.word	0x20000168
 8003cec:	200000e8 	.word	0x200000e8

08003cf0 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8003cf6:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <_Z16OD_BuildDate_getv+0x30>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f006 fe1f 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <_Z16OD_BuildDate_getv+0x34>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <_Z16OD_BuildDate_getv+0x30>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f006 fe62 	bl	800a9d8 <osMutexRelease>
    return value;
 8003d14:	687b      	ldr	r3, [r7, #4]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000016c 	.word	0x2000016c
 8003d24:	200000f0 	.word	0x200000f0

08003d28 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <_Z16OD_BuildTime_getv+0x30>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f04f 31ff 	mov.w	r1, #4294967295
 8003d36:	4618      	mov	r0, r3
 8003d38:	f006 fe03 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <_Z16OD_BuildTime_getv+0x34>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <_Z16OD_BuildTime_getv+0x30>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f006 fe46 	bl	800a9d8 <osMutexRelease>
    return value;
 8003d4c:	687b      	ldr	r3, [r7, #4]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000170 	.word	0x20000170
 8003d5c:	200000f4 	.word	0x200000f4

08003d60 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8003d66:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f006 fde7 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8003d74:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f006 fe2a 	bl	800a9d8 <osMutexRelease>
    return value;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000174 	.word	0x20000174
 8003d94:	200000f8 	.word	0x200000f8

08003d98 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f04f 31ff 	mov.w	r1, #4294967295
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 fdcb 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f006 fe0e 	bl	800a9d8 <osMutexRelease>
    return value;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000178 	.word	0x20000178
 8003dcc:	200000f9 	.word	0x200000f9

08003dd0 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8003dd6:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f04f 31ff 	mov.w	r1, #4294967295
 8003dde:	4618      	mov	r0, r3
 8003de0:	f006 fdaf 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8003de4:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f006 fdf2 	bl	800a9d8 <osMutexRelease>
    return value;
 8003df4:	687b      	ldr	r3, [r7, #4]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000017c 	.word	0x2000017c
 8003e04:	200000fc 	.word	0x200000fc

08003e08 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f04f 31ff 	mov.w	r1, #4294967295
 8003e16:	4618      	mov	r0, r3
 8003e18:	f006 fd93 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f006 fdd6 	bl	800a9d8 <osMutexRelease>
    return value;
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000180 	.word	0x20000180
 8003e3c:	20000006 	.word	0x20000006

08003e40 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e52:	4618      	mov	r0, r3
 8003e54:	f006 fd75 	bl	800a942 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8003e58:	4a06      	ldr	r2, [pc, #24]	; (8003e74 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f006 fdb8 	bl	800a9d8 <osMutexRelease>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000180 	.word	0x20000180
 8003e74:	20000006 	.word	0x20000006

08003e78 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f04f 31ff 	mov.w	r1, #4294967295
 8003e86:	4618      	mov	r0, r3
 8003e88:	f006 fd5b 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f006 fd9e 	bl	800a9d8 <osMutexRelease>
    return value;
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000184 	.word	0x20000184
 8003eac:	20000008 	.word	0x20000008

08003eb0 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f006 fd3d 	bl	800a942 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8003ec8:	4a06      	ldr	r2, [pc, #24]	; (8003ee4 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f006 fd80 	bl	800a9d8 <osMutexRelease>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000184 	.word	0x20000184
 8003ee4:	20000008 	.word	0x20000008

08003ee8 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <_Z18OD_CAN1_Status_getv+0x30>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f006 fd23 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_Z18OD_CAN1_Status_getv+0x34>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <_Z18OD_CAN1_Status_getv+0x30>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f006 fd66 	bl	800a9d8 <osMutexRelease>
    return value;
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000188 	.word	0x20000188
 8003f1c:	20000100 	.word	0x20000100

08003f20 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f006 fd07 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f006 fd4a 	bl	800a9d8 <osMutexRelease>
    return value;
 8003f44:	687b      	ldr	r3, [r7, #4]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000018c 	.word	0x2000018c
 8003f54:	20000104 	.word	0x20000104

08003f58 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f04f 31ff 	mov.w	r1, #4294967295
 8003f66:	4618      	mov	r0, r3
 8003f68:	f006 fceb 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f006 fd2e 	bl	800a9d8 <osMutexRelease>
    return value;
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000190 	.word	0x20000190
 8003f8c:	20000108 	.word	0x20000108

08003f90 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 fccf 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f006 fd12 	bl	800a9d8 <osMutexRelease>
    return value;
 8003fb4:	687b      	ldr	r3, [r7, #4]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000194 	.word	0x20000194
 8003fc4:	2000010c 	.word	0x2000010c

08003fc8 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f006 fcb3 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f006 fcf6 	bl	800a9d8 <osMutexRelease>
    return value;
 8003fec:	79fb      	ldrb	r3, [r7, #7]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000198 	.word	0x20000198
 8003ffc:	20000110 	.word	0x20000110

08004000 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f04f 31ff 	mov.w	r1, #4294967295
 800400e:	4618      	mov	r0, r3
 8004010:	f006 fc97 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f006 fcda 	bl	800a9d8 <osMutexRelease>
    return value;
 8004024:	79fb      	ldrb	r3, [r7, #7]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000019c 	.word	0x2000019c
 8004034:	20000111 	.word	0x20000111

08004038 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f04f 31ff 	mov.w	r1, #4294967295
 8004046:	4618      	mov	r0, r3
 8004048:	f006 fc7b 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8004052:	4b05      	ldr	r3, [pc, #20]	; (8004068 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f006 fcbe 	bl	800a9d8 <osMutexRelease>
    return value;
 800405c:	687b      	ldr	r3, [r7, #4]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	200001a0 	.word	0x200001a0
 800406c:	20000114 	.word	0x20000114

08004070 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f04f 31ff 	mov.w	r1, #4294967295
 800407e:	4618      	mov	r0, r3
 8004080:	f006 fc5f 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f006 fca2 	bl	800a9d8 <osMutexRelease>
    return value;
 8004094:	79fb      	ldrb	r3, [r7, #7]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	200001a4 	.word	0x200001a4
 80040a4:	2000000a 	.word	0x2000000a

080040a8 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f04f 31ff 	mov.w	r1, #4294967295
 80040ba:	4618      	mov	r0, r3
 80040bc:	f006 fc41 	bl	800a942 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80040c0:	4a06      	ldr	r2, [pc, #24]	; (80040dc <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f006 fc84 	bl	800a9d8 <osMutexRelease>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	200001a4 	.word	0x200001a4
 80040dc:	2000000a 	.word	0x2000000a

080040e0 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f04f 31ff 	mov.w	r1, #4294967295
 80040ee:	4618      	mov	r0, r3
 80040f0:	f006 fc27 	bl	800a942 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f006 fc6a 	bl	800a9d8 <osMutexRelease>
    return value;
 8004104:	88fb      	ldrh	r3, [r7, #6]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200001a8 	.word	0x200001a8
 8004114:	2000000c 	.word	0x2000000c

08004118 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f04f 31ff 	mov.w	r1, #4294967295
 800412a:	4618      	mov	r0, r3
 800412c:	f006 fc09 	bl	800a942 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004136:	4b04      	ldr	r3, [pc, #16]	; (8004148 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f006 fc4c 	bl	800a9d8 <osMutexRelease>
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200001a8 	.word	0x200001a8
 800414c:	2000000c 	.word	0x2000000c

08004150 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <_Z18OD_CAN2_Status_getv+0x30>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f04f 31ff 	mov.w	r1, #4294967295
 800415e:	4618      	mov	r0, r3
 8004160:	f006 fbef 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <_Z18OD_CAN2_Status_getv+0x34>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <_Z18OD_CAN2_Status_getv+0x30>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f006 fc32 	bl	800a9d8 <osMutexRelease>
    return value;
 8004174:	79fb      	ldrb	r3, [r7, #7]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200001ac 	.word	0x200001ac
 8004184:	20000118 	.word	0x20000118

08004188 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f04f 31ff 	mov.w	r1, #4294967295
 8004196:	4618      	mov	r0, r3
 8004198:	f006 fbd3 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 fc16 	bl	800a9d8 <osMutexRelease>
    return value;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200001b0 	.word	0x200001b0
 80041bc:	2000011c 	.word	0x2000011c

080041c0 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f04f 31ff 	mov.w	r1, #4294967295
 80041ce:	4618      	mov	r0, r3
 80041d0:	f006 fbb7 	bl	800a942 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f006 fbfa 	bl	800a9d8 <osMutexRelease>
    return value;
 80041e4:	79fb      	ldrb	r3, [r7, #7]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200001b4 	.word	0x200001b4
 80041f4:	20000120 	.word	0x20000120

080041f8 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f04f 31ff 	mov.w	r1, #4294967295
 8004206:	4618      	mov	r0, r3
 8004208:	f006 fb9b 	bl	800a942 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f006 fbde 	bl	800a9d8 <osMutexRelease>
    return value;
 800421c:	687b      	ldr	r3, [r7, #4]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200001b8 	.word	0x200001b8
 800422c:	20000124 	.word	0x20000124

08004230 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f103 0208 	add.w	r2, r3, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3310      	adds	r3, #16
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fd fa09 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800424a:	4603      	mov	r3, r0
        }
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f103 0008 	add.w	r0, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f103 0110 	add.w	r1, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f7fe fb33 	bl	80028dc <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 0008 	add.w	r0, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f103 0110 	add.w	r1, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f7fe faeb 	bl	8002876 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 0008 	add.w	r0, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f103 0110 	add.w	r1, r3, #16
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	887b      	ldrh	r3, [r7, #2]
 80042c6:	f7fe faa8 	bl	800281a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f103 0008 	add.w	r0, r3, #8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f103 0110 	add.w	r1, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	f7fe fa65 	bl	80027be <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 0008 	add.w	r0, r3, #8
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 0110 	add.w	r1, r3, #16
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	1d1a      	adds	r2, r3, #4
 8004318:	887b      	ldrh	r3, [r7, #2]
 800431a:	f7fe fa22 	bl	8002762 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f103 0008 	add.w	r0, r3, #8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f103 0110 	add.w	r1, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1d1a      	adds	r2, r3, #4
 8004342:	887b      	ldrh	r3, [r7, #2]
 8004344:	f7fe f9bb 	bl	80026be <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f103 0008 	add.w	r0, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f103 0110 	add.w	r1, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f7fe f94f 	bl	8002610 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 0008 	add.w	r0, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f103 0110 	add.w	r1, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	887b      	ldrh	r3, [r7, #2]
 8004398:	f7fe f8e8 	bl	800256c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 800439c:	bf00      	nop
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f103 0008 	add.w	r0, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 0110 	add.w	r1, r3, #16
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	ed97 0a00 	vldr	s0, [r7]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f7fe f873 	bl	80024b0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f103 0008 	add.w	r0, r3, #8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f103 0110 	add.w	r1, r3, #16
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f7fe f827 	bl	8002440 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f103 0008 	add.w	r0, r3, #8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 0110 	add.w	r1, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	ed97 0a00 	vldr	s0, [r7]
 800441a:	461a      	mov	r2, r3
 800441c:	f7fd ffae 	bl	800237c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f103 0008 	add.w	r0, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f103 0110 	add.w	r1, r3, #16
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	ed97 0a00 	vldr	s0, [r7]
 8004448:	461a      	mov	r2, r3
 800444a:	f7fd ff3d 	bl	80022c8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f103 0008 	add.w	r0, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f103 0110 	add.w	r1, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f7fd feef 	bl	8002254 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f103 0008 	add.w	r0, r3, #8
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f103 0110 	add.w	r1, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f7fd fea6 	bl	80021ec <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f103 0008 	add.w	r0, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f103 0110 	add.w	r1, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	f7fd fe5d 	bl	8002184 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80044d2:	b590      	push	{r4, r7, lr}
 80044d4:	b087      	sub	sp, #28
 80044d6:	af02      	add	r7, sp, #8
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f103 0008 	add.w	r0, r3, #8
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f103 0110 	add.w	r1, r3, #16
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1d1c      	adds	r4, r3, #4
 80044ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f2:	e9cd 2300 	strd	r2, r3, [sp]
 80044f6:	4622      	mov	r2, r4
 80044f8:	f7fd fe0b 	bl	8002112 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 80044fc:	bf00      	nop
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	bd90      	pop	{r4, r7, pc}

08004504 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f103 0008 	add.w	r0, r3, #8
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f103 0110 	add.w	r1, r3, #16
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1d1c      	adds	r4, r3, #4
 8004520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004524:	e9cd 2300 	strd	r2, r3, [sp]
 8004528:	4622      	mov	r2, r4
 800452a:	f7fd fdb9 	bl	80020a0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}

08004536 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f103 0008 	add.w	r0, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f103 0110 	add.w	r1, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f7fd fd6d 	bl	8002030 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f103 0008 	add.w	r0, r3, #8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f103 0110 	add.w	r1, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f7fd fd1f 	bl	8001fbc <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f103 0008 	add.w	r0, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f103 0110 	add.w	r1, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f7fd fcd6 	bl	8001f54 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 0008 	add.w	r0, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f103 0110 	add.w	r1, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	1d1a      	adds	r2, r3, #4
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f7fd fc8d 	bl	8001eec <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0008 	add.w	r0, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f103 0110 	add.w	r1, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	f7fd fc41 	bl	8001e7c <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f103 0008 	add.w	r0, r3, #8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f103 0110 	add.w	r1, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	1d1a      	adds	r2, r3, #4
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f7fd fbd0 	bl	8001dc4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f103 0008 	add.w	r0, r3, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f103 0110 	add.w	r1, r3, #16
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	887b      	ldrh	r3, [r7, #2]
 800464a:	f7fd fb59 	bl	8001d00 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f103 0008 	add.w	r0, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 0110 	add.w	r1, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f7fd fb10 	bl	8001c98 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f103 0008 	add.w	r0, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0110 	add.w	r1, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	1d1a      	adds	r2, r3, #4
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f7fd fac2 	bl	8001c24 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 0008 	add.w	r0, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f103 0110 	add.w	r1, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	1d1a      	adds	r2, r3, #4
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f7fd fa79 	bl	8001bbc <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f103 0008 	add.w	r0, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 0110 	add.w	r1, r3, #16
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f7fd fa2b 	bl	8001b48 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	460b      	mov	r3, r1
 8004704:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f103 0008 	add.w	r0, r3, #8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f103 0110 	add.w	r1, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1d1a      	adds	r2, r3, #4
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f7fd f9e2 	bl	8001ae0 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f103 0008 	add.w	r0, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0110 	add.w	r1, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f7fd f999 	bl	8001a78 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f103 0008 	add.w	r0, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f103 0110 	add.w	r1, r3, #16
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1d1a      	adds	r2, r3, #4
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f7fd f94d 	bl	8001a08 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f103 0008 	add.w	r0, r3, #8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 0110 	add.w	r1, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	1d1a      	adds	r2, r3, #4
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	f7fd f8dd 	bl	8001952 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 0008 	add.w	r0, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f103 0110 	add.w	r1, r3, #16
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1d1a      	adds	r2, r3, #4
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	f7fd f866 	bl	800188e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f103 0008 	add.w	r0, r3, #8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f103 0110 	add.w	r1, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	f7fd f81d 	bl	8001826 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0008 	add.w	r0, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f103 0110 	add.w	r1, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f7fc ffcf 	bl	80017b2 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0008 	add.w	r0, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f103 0110 	add.w	r1, r3, #16
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f7fc ff86 	bl	800174a <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f103 0008 	add.w	r0, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f103 0110 	add.w	r1, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1d1a      	adds	r2, r3, #4
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f7fc ff38 	bl	80016d6 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f103 0008 	add.w	r0, r3, #8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f103 0110 	add.w	r1, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	f7fc febe 	bl	800160c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8004890:	bf00      	nop
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0008 	add.w	r0, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f103 0110 	add.w	r1, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1d1a      	adds	r2, r3, #4
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f7fc fee4 	bl	8001682 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f103 0208 	add.w	r2, r3, #8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3310      	adds	r3, #16
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7fc fec0 	bl	800165c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80048dc:	4603      	mov	r3, r0
        }
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f103 0208 	add.w	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3310      	adds	r3, #16
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f7fd ff0d 	bl	800271a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8004900:	4603      	mov	r3, r0
        }
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f103 0208 	add.w	r2, r3, #8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3310      	adds	r3, #16
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fd fea9 	bl	8002676 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8004924:	4603      	mov	r3, r0
        }
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f103 0208 	add.w	r2, r3, #8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3310      	adds	r3, #16
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f7fd fe40 	bl	80025c8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 8004948:	4603      	mov	r3, r0
        }
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f103 0208 	add.w	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3310      	adds	r3, #16
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7fd fa60 	bl	8001e2c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 800496c:	4603      	mov	r3, r0
        }
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f103 0208 	add.w	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3310      	adds	r3, #16
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f7fd f9f3 	bl	8001d76 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 8004990:	4603      	mov	r3, r0
        }
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 0208 	add.w	r2, r3, #8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3310      	adds	r3, #16
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fd f803 	bl	80019ba <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 80049b4:	4603      	mov	r3, r0
        }
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 0208 	add.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3310      	adds	r3, #16
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fc ff96 	bl	8001904 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 80049d8:	4603      	mov	r3, r0
        }
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f040 80e4 	bne.w	8004bbe <_Z41__static_initialization_and_destruction_0ii+0x1da>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049fc:	4293      	cmp	r3, r2
 80049fe:	f040 80de 	bne.w	8004bbe <_Z41__static_initialization_and_destruction_0ii+0x1da>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8004a02:	2000      	movs	r0, #0
 8004a04:	f005 ff17 	bl	800a836 <osMutexNew>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4a6f      	ldr	r2, [pc, #444]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004a0c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f005 ff11 	bl	800a836 <osMutexNew>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8004a18:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f005 ff0b 	bl	800a836 <osMutexNew>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a6b      	ldr	r2, [pc, #428]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8004a24:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8004a26:	2000      	movs	r0, #0
 8004a28:	f005 ff05 	bl	800a836 <osMutexNew>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4a69      	ldr	r2, [pc, #420]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004a30:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8004a32:	2000      	movs	r0, #0
 8004a34:	f005 feff 	bl	800a836 <osMutexNew>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4a67      	ldr	r2, [pc, #412]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8004a3c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f005 fef9 	bl	800a836 <osMutexNew>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8004a48:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f005 fef3 	bl	800a836 <osMutexNew>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4a63      	ldr	r2, [pc, #396]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8004a54:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f005 feed 	bl	800a836 <osMutexNew>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4a61      	ldr	r2, [pc, #388]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8004a60:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8004a62:	2000      	movs	r0, #0
 8004a64:	f005 fee7 	bl	800a836 <osMutexNew>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4a5f      	ldr	r2, [pc, #380]	; (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8004a6c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f005 fee1 	bl	800a836 <osMutexNew>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a5d      	ldr	r2, [pc, #372]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8004a78:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f005 fedb 	bl	800a836 <osMutexNew>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8004a84:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8004a86:	2000      	movs	r0, #0
 8004a88:	f005 fed5 	bl	800a836 <osMutexNew>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8004a90:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8004a92:	2000      	movs	r0, #0
 8004a94:	f005 fecf 	bl	800a836 <osMutexNew>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4a57      	ldr	r2, [pc, #348]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8004a9c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	f005 fec9 	bl	800a836 <osMutexNew>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4a55      	ldr	r2, [pc, #340]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8004aa8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f005 fec3 	bl	800a836 <osMutexNew>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4a53      	ldr	r2, [pc, #332]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8004ab4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f005 febd 	bl	800a836 <osMutexNew>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4a51      	ldr	r2, [pc, #324]	; (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8004ac0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f005 feb7 	bl	800a836 <osMutexNew>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4a4f      	ldr	r2, [pc, #316]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004acc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f005 feb1 	bl	800a836 <osMutexNew>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4a4d      	ldr	r2, [pc, #308]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004ad8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8004ada:	2000      	movs	r0, #0
 8004adc:	f005 feab 	bl	800a836 <osMutexNew>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4a4b      	ldr	r2, [pc, #300]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8004ae4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f005 fea5 	bl	800a836 <osMutexNew>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4a49      	ldr	r2, [pc, #292]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8004af0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f005 fe9f 	bl	800a836 <osMutexNew>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a47      	ldr	r2, [pc, #284]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8004afc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f005 fe99 	bl	800a836 <osMutexNew>
 8004b04:	4603      	mov	r3, r0
 8004b06:	4a45      	ldr	r2, [pc, #276]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8004b08:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f005 fe93 	bl	800a836 <osMutexNew>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4a43      	ldr	r2, [pc, #268]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8004b14:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f005 fe8d 	bl	800a836 <osMutexNew>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4a41      	ldr	r2, [pc, #260]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8004b20:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f005 fe87 	bl	800a836 <osMutexNew>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8004b2c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f005 fe81 	bl	800a836 <osMutexNew>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a3d      	ldr	r2, [pc, #244]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8004b38:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f005 fe7b 	bl	800a836 <osMutexNew>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8004b44:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f005 fe75 	bl	800a836 <osMutexNew>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8004b50:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8004b52:	2000      	movs	r0, #0
 8004b54:	f005 fe6f 	bl	800a836 <osMutexNew>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8004b5c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f005 fe69 	bl	800a836 <osMutexNew>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8004b68:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f005 fe63 	bl	800a836 <osMutexNew>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8004b74:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f005 fe5d 	bl	800a836 <osMutexNew>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8004b80:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f005 fe57 	bl	800a836 <osMutexNew>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8004b8c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f005 fe51 	bl	800a836 <osMutexNew>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8004b98:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f005 fe4b 	bl	800a836 <osMutexNew>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8004ba4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f005 fe45 	bl	800a836 <osMutexNew>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8004bb0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f005 fe3f 	bl	800a836 <osMutexNew>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4a27      	ldr	r2, [pc, #156]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000128 	.word	0x20000128
 8004bcc:	2000012c 	.word	0x2000012c
 8004bd0:	20000130 	.word	0x20000130
 8004bd4:	20000134 	.word	0x20000134
 8004bd8:	20000138 	.word	0x20000138
 8004bdc:	2000013c 	.word	0x2000013c
 8004be0:	20000140 	.word	0x20000140
 8004be4:	20000144 	.word	0x20000144
 8004be8:	20000148 	.word	0x20000148
 8004bec:	2000014c 	.word	0x2000014c
 8004bf0:	20000150 	.word	0x20000150
 8004bf4:	20000154 	.word	0x20000154
 8004bf8:	20000158 	.word	0x20000158
 8004bfc:	2000015c 	.word	0x2000015c
 8004c00:	20000160 	.word	0x20000160
 8004c04:	20000164 	.word	0x20000164
 8004c08:	20000168 	.word	0x20000168
 8004c0c:	2000016c 	.word	0x2000016c
 8004c10:	20000170 	.word	0x20000170
 8004c14:	20000174 	.word	0x20000174
 8004c18:	20000178 	.word	0x20000178
 8004c1c:	2000017c 	.word	0x2000017c
 8004c20:	20000180 	.word	0x20000180
 8004c24:	20000184 	.word	0x20000184
 8004c28:	20000188 	.word	0x20000188
 8004c2c:	2000018c 	.word	0x2000018c
 8004c30:	20000190 	.word	0x20000190
 8004c34:	20000194 	.word	0x20000194
 8004c38:	20000198 	.word	0x20000198
 8004c3c:	2000019c 	.word	0x2000019c
 8004c40:	200001a0 	.word	0x200001a0
 8004c44:	200001a4 	.word	0x200001a4
 8004c48:	200001a8 	.word	0x200001a8
 8004c4c:	200001ac 	.word	0x200001ac
 8004c50:	200001b0 	.word	0x200001b0
 8004c54:	200001b4 	.word	0x200001b4
 8004c58:	200001b8 	.word	0x200001b8

08004c5c <_GLOBAL__sub_I_OD_NodeID>:
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c64:	2001      	movs	r0, #1
 8004c66:	f7ff febd 	bl	80049e4 <_Z41__static_initialization_and_destruction_0ii>
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	4798      	blx	r3
    }
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <_ZNSt8functionIFvtEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ffd4 	bl	8004c88 <_ZNSt14_Function_baseD1Ev>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8004cea:	b5b0      	push	{r4, r5, r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	240f      	movs	r4, #15
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	db05      	blt.n	8004d08 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f000 f889 	bl	8004e14 <_ZNSt8functionIFvtEEC1Ev>
 8004d02:	3510      	adds	r5, #16
 8004d04:	3c01      	subs	r4, #1
 8004d06:	e7f7      	b.n	8004cf8 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bdb0      	pop	{r4, r5, r7, pc}

08004d1a <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8004d1a:	b590      	push	{r4, r7, lr}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	429c      	cmp	r4, r3
 8004d32:	d004      	beq.n	8004d3e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8004d34:	3c10      	subs	r4, #16
 8004d36:	4620      	mov	r0, r4
 8004d38:	f7ff ffca 	bl	8004cd0 <_ZNSt8functionIFvtEED1Ev>
 8004d3c:	e7f7      	b.n	8004d2e <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd90      	pop	{r4, r7, pc}

08004d48 <__tcf_1>:
		static GPIOExtiCallbackHandler instance;
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__tcf_1+0xc>)
 8004d4e:	f7ff ffe4 	bl	8004d1a <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200001bc 	.word	0x200001bc

08004d58 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f3bf 8f5b 	dmb	ish
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d013      	beq.n	8004da0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8004d78:	480b      	ldr	r0, [pc, #44]	; (8004da8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8004d7a:	f009 fce3 	bl	800e744 <__cxa_guard_acquire>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8004d8e:	4807      	ldr	r0, [pc, #28]	; (8004dac <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8004d90:	f7ff ffab 	bl	8004cea <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8004d94:	4806      	ldr	r0, [pc, #24]	; (8004db0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8004d96:	f009 fd12 	bl	800e7be <atexit>
 8004d9a:	4803      	ldr	r0, [pc, #12]	; (8004da8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8004d9c:	f009 fcde 	bl	800e75c <__cxa_guard_release>
		return instance;
 8004da0:	4b02      	ldr	r3, [pc, #8]	; (8004dac <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200002c0 	.word	0x200002c0
 8004dac:	200001bc 	.word	0x200001bc
 8004db0:	08004d49 	.word	0x08004d49

08004db4 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d20c      	bcs.n	8004dea <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	887a      	ldrh	r2, [r7, #2]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f826 	bl	8004e2e <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3301      	adds	r3, #1
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e7ec      	b.n	8004dc4 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 8004dea:	bf00      	nop
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_GPIO_EXTI_Callback>:

	std::function<void(uint16_t)> m_listeners[16];
	unsigned int m_size = 0;
};

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	4603      	mov	r3, r0
 8004dfa:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 8004dfc:	f7ff ffac 	bl	8004d58 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8004e00:	4602      	mov	r2, r0
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7ff ffd4 	bl	8004db4 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_ZNSt8functionIFvtEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff24 	bl	8004c6c <_ZNSt14_Function_baseC1Ev>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZNKSt8functionIFvtEEclEt>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004e2e:	b5b0      	push	{r4, r5, r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	807b      	strh	r3, [r7, #2]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff36 	bl	8004cae <_ZNKSt14_Function_base8_M_emptyEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8004e48:	f009 fc8b 	bl	800e762 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68dc      	ldr	r4, [r3, #12]
 8004e50:	687d      	ldr	r5, [r7, #4]
 8004e52:	1cbb      	adds	r3, r7, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f808 	bl	8004e6a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4628      	mov	r0, r5
 8004e60:	47a0      	blx	r4
 8004e62:	bf00      	nop
    }
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdb0      	pop	{r4, r5, r7, pc}

08004e6a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004e86:	463b      	mov	r3, r7
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004e92:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004e94:	4a36      	ldr	r2, [pc, #216]	; (8004f70 <MX_ADC1_Init+0xf0>)
 8004e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004e98:	4b34      	ldr	r3, [pc, #208]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004e9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004ea6:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004eac:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <MX_ADC1_Init+0xf4>)
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ec6:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ece:	2204      	movs	r2, #4
 8004ed0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ee0:	4822      	ldr	r0, [pc, #136]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004ee2:	f001 fc51 	bl	8006788 <HAL_ADC_Init>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004eec:	f000 fdc4 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004ef0:	230a      	movs	r3, #10
 8004ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8004ef8:	2305      	movs	r3, #5
 8004efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004efc:	463b      	mov	r3, r7
 8004efe:	4619      	mov	r1, r3
 8004f00:	481a      	ldr	r0, [pc, #104]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004f02:	f001 fc85 	bl	8006810 <HAL_ADC_ConfigChannel>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004f0c:	f000 fdb4 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004f10:	230c      	movs	r3, #12
 8004f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004f14:	2302      	movs	r3, #2
 8004f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f18:	463b      	mov	r3, r7
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4813      	ldr	r0, [pc, #76]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004f1e:	f001 fc77 	bl	8006810 <HAL_ADC_ConfigChannel>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004f28:	f000 fda6 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004f30:	2303      	movs	r3, #3
 8004f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f34:	463b      	mov	r3, r7
 8004f36:	4619      	mov	r1, r3
 8004f38:	480c      	ldr	r0, [pc, #48]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004f3a:	f001 fc69 	bl	8006810 <HAL_ADC_ConfigChannel>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8004f44:	f000 fd98 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004f48:	2311      	movs	r3, #17
 8004f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f50:	463b      	mov	r3, r7
 8004f52:	4619      	mov	r1, r3
 8004f54:	4805      	ldr	r0, [pc, #20]	; (8004f6c <MX_ADC1_Init+0xec>)
 8004f56:	f001 fc5b 	bl	8006810 <HAL_ADC_ConfigChannel>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004f60:	f000 fd8a 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	200002c4 	.word	0x200002c4
 8004f70:	40012000 	.word	0x40012000
 8004f74:	0f000001 	.word	0x0f000001

08004f78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f7e:	463b      	mov	r3, r7
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004f8a:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <MX_ADC2_Init+0x160>)
 8004f8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004f92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004f98:	4b4e      	ldr	r3, [pc, #312]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004f9e:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fb2:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fb8:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fba:	4a48      	ldr	r2, [pc, #288]	; (80050dc <MX_ADC2_Init+0x164>)
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fbe:	4b45      	ldr	r3, [pc, #276]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004fca:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004fd8:	483e      	ldr	r0, [pc, #248]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004fda:	f001 fbd5 	bl	8006788 <HAL_ADC_Init>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004fe4:	f000 fd48 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fe8:	230f      	movs	r3, #15
 8004fea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4836      	ldr	r0, [pc, #216]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8004ffa:	f001 fc09 	bl	8006810 <HAL_ADC_ConfigChannel>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005004:	f000 fd38 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005008:	230e      	movs	r3, #14
 800500a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800500c:	2302      	movs	r3, #2
 800500e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005010:	463b      	mov	r3, r7
 8005012:	4619      	mov	r1, r3
 8005014:	482f      	ldr	r0, [pc, #188]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8005016:	f001 fbfb 	bl	8006810 <HAL_ADC_ConfigChannel>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005020:	f000 fd2a 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005024:	2303      	movs	r3, #3
 8005026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005028:	2303      	movs	r3, #3
 800502a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800502c:	463b      	mov	r3, r7
 800502e:	4619      	mov	r1, r3
 8005030:	4828      	ldr	r0, [pc, #160]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8005032:	f001 fbed 	bl	8006810 <HAL_ADC_ConfigChannel>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800503c:	f000 fd1c 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005040:	2302      	movs	r3, #2
 8005042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005044:	2304      	movs	r3, #4
 8005046:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005048:	463b      	mov	r3, r7
 800504a:	4619      	mov	r1, r3
 800504c:	4821      	ldr	r0, [pc, #132]	; (80050d4 <MX_ADC2_Init+0x15c>)
 800504e:	f001 fbdf 	bl	8006810 <HAL_ADC_ConfigChannel>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005058:	f000 fd0e 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800505c:	2304      	movs	r3, #4
 800505e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005060:	2305      	movs	r3, #5
 8005062:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005064:	463b      	mov	r3, r7
 8005066:	4619      	mov	r1, r3
 8005068:	481a      	ldr	r0, [pc, #104]	; (80050d4 <MX_ADC2_Init+0x15c>)
 800506a:	f001 fbd1 	bl	8006810 <HAL_ADC_ConfigChannel>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005074:	f000 fd00 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005078:	2305      	movs	r3, #5
 800507a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800507c:	2306      	movs	r3, #6
 800507e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005080:	463b      	mov	r3, r7
 8005082:	4619      	mov	r1, r3
 8005084:	4813      	ldr	r0, [pc, #76]	; (80050d4 <MX_ADC2_Init+0x15c>)
 8005086:	f001 fbc3 	bl	8006810 <HAL_ADC_ConfigChannel>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005090:	f000 fcf2 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005094:	2306      	movs	r3, #6
 8005096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005098:	2307      	movs	r3, #7
 800509a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800509c:	463b      	mov	r3, r7
 800509e:	4619      	mov	r1, r3
 80050a0:	480c      	ldr	r0, [pc, #48]	; (80050d4 <MX_ADC2_Init+0x15c>)
 80050a2:	f001 fbb5 	bl	8006810 <HAL_ADC_ConfigChannel>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80050ac:	f000 fce4 	bl	8005a78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80050b0:	2307      	movs	r3, #7
 80050b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80050b4:	2308      	movs	r3, #8
 80050b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050b8:	463b      	mov	r3, r7
 80050ba:	4619      	mov	r1, r3
 80050bc:	4805      	ldr	r0, [pc, #20]	; (80050d4 <MX_ADC2_Init+0x15c>)
 80050be:	f001 fba7 	bl	8006810 <HAL_ADC_ConfigChannel>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80050c8:	f000 fcd6 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	2000030c 	.word	0x2000030c
 80050d8:	40012100 	.word	0x40012100
 80050dc:	0f000001 	.word	0x0f000001

080050e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08c      	sub	sp, #48	; 0x30
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e8:	f107 031c 	add.w	r3, r7, #28
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a6b      	ldr	r2, [pc, #428]	; (80052ac <HAL_ADC_MspInit+0x1cc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d157      	bne.n	80051b2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	4a69      	ldr	r2, [pc, #420]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	6453      	str	r3, [r2, #68]	; 0x44
 8005112:	4b67      	ldr	r3, [pc, #412]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	4b63      	ldr	r3, [pc, #396]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4a62      	ldr	r2, [pc, #392]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	6313      	str	r3, [r2, #48]	; 0x30
 800512e:	4b60      	ldr	r3, [pc, #384]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800513a:	2305      	movs	r3, #5
 800513c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800513e:	2303      	movs	r3, #3
 8005140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	2300      	movs	r3, #0
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005146:	f107 031c 	add.w	r3, r7, #28
 800514a:	4619      	mov	r1, r3
 800514c:	4859      	ldr	r0, [pc, #356]	; (80052b4 <HAL_ADC_MspInit+0x1d4>)
 800514e:	f002 fef5 	bl	8007f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005152:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005154:	4a59      	ldr	r2, [pc, #356]	; (80052bc <HAL_ADC_MspInit+0x1dc>)
 8005156:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005158:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800515e:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005160:	2200      	movs	r2, #0
 8005162:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005164:	4b54      	ldr	r3, [pc, #336]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005166:	2200      	movs	r2, #0
 8005168:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800516a:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 800516c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005170:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005172:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005178:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800517a:	4b4f      	ldr	r3, [pc, #316]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 800517c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005180:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005182:	4b4d      	ldr	r3, [pc, #308]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005184:	2200      	movs	r2, #0
 8005186:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005188:	4b4b      	ldr	r3, [pc, #300]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 800518a:	2200      	movs	r2, #0
 800518c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800518e:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005190:	2200      	movs	r2, #0
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005194:	4848      	ldr	r0, [pc, #288]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 8005196:	f002 fbe7 	bl	8007968 <HAL_DMA_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80051a0:	f000 fc6a 	bl	8005a78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a44      	ldr	r2, [pc, #272]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38
 80051aa:	4a43      	ldr	r2, [pc, #268]	; (80052b8 <HAL_ADC_MspInit+0x1d8>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80051b0:	e077      	b.n	80052a2 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a42      	ldr	r2, [pc, #264]	; (80052c0 <HAL_ADC_MspInit+0x1e0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d172      	bne.n	80052a2 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c4:	4a3a      	ldr	r2, [pc, #232]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ca:	6453      	str	r3, [r2, #68]	; 0x44
 80051cc:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	6313      	str	r3, [r2, #48]	; 0x30
 80051e8:	4b31      	ldr	r3, [pc, #196]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6313      	str	r3, [r2, #48]	; 0x30
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_ADC_MspInit+0x1d0>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8005210:	2335      	movs	r3, #53	; 0x35
 8005212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005214:	2303      	movs	r3, #3
 8005216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005218:	2300      	movs	r3, #0
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4619      	mov	r1, r3
 8005222:	4824      	ldr	r0, [pc, #144]	; (80052b4 <HAL_ADC_MspInit+0x1d4>)
 8005224:	f002 fe8a 	bl	8007f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8005228:	23fc      	movs	r3, #252	; 0xfc
 800522a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800522c:	2303      	movs	r3, #3
 800522e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	4619      	mov	r1, r3
 800523a:	4822      	ldr	r0, [pc, #136]	; (80052c4 <HAL_ADC_MspInit+0x1e4>)
 800523c:	f002 fe7e 	bl	8007f3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005240:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005242:	4a22      	ldr	r2, [pc, #136]	; (80052cc <HAL_ADC_MspInit+0x1ec>)
 8005244:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800524c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005254:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005256:	2200      	movs	r2, #0
 8005258:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 800525c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005260:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005262:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005268:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 800526c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005270:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005274:	2200      	movs	r2, #0
 8005276:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 800527a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800527e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005282:	2200      	movs	r2, #0
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005286:	4810      	ldr	r0, [pc, #64]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 8005288:	f002 fb6e 	bl	8007968 <HAL_DMA_Init>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8005292:	f000 fbf1 	bl	8005a78 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a0b      	ldr	r2, [pc, #44]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
 800529c:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_ADC_MspInit+0x1e8>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80052a2:	bf00      	nop
 80052a4:	3730      	adds	r7, #48	; 0x30
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40012000 	.word	0x40012000
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40020800 	.word	0x40020800
 80052b8:	20000354 	.word	0x20000354
 80052bc:	40026410 	.word	0x40026410
 80052c0:	40012100 	.word	0x40012100
 80052c4:	40020000 	.word	0x40020000
 80052c8:	200003b4 	.word	0x200003b4
 80052cc:	40026440 	.word	0x40026440

080052d0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80052d4:	4b17      	ldr	r3, [pc, #92]	; (8005334 <MX_CAN1_Init+0x64>)
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <MX_CAN1_Init+0x68>)
 80052d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80052da:	4b16      	ldr	r3, [pc, #88]	; (8005334 <MX_CAN1_Init+0x64>)
 80052dc:	2203      	movs	r2, #3
 80052de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <MX_CAN1_Init+0x64>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80052e6:	4b13      	ldr	r3, [pc, #76]	; (8005334 <MX_CAN1_Init+0x64>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <MX_CAN1_Init+0x64>)
 80052ee:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80052f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <MX_CAN1_Init+0x64>)
 80052f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <MX_CAN1_Init+0x64>)
 80052fe:	2200      	movs	r2, #0
 8005300:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <MX_CAN1_Init+0x64>)
 8005304:	2201      	movs	r2, #1
 8005306:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <MX_CAN1_Init+0x64>)
 800530a:	2200      	movs	r2, #0
 800530c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <MX_CAN1_Init+0x64>)
 8005310:	2201      	movs	r2, #1
 8005312:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <MX_CAN1_Init+0x64>)
 8005316:	2200      	movs	r2, #0
 8005318:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <MX_CAN1_Init+0x64>)
 800531c:	2200      	movs	r2, #0
 800531e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005320:	4804      	ldr	r0, [pc, #16]	; (8005334 <MX_CAN1_Init+0x64>)
 8005322:	f001 fc93 	bl	8006c4c <HAL_CAN_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800532c:	f000 fba4 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000414 	.word	0x20000414
 8005338:	40006400 	.word	0x40006400

0800533c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8005340:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <MX_CAN2_Init+0x68>)
 8005344:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005348:	2203      	movs	r2, #3
 800534a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <MX_CAN2_Init+0x64>)
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <MX_CAN2_Init+0x64>)
 800535a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800535e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005362:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005366:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8005368:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <MX_CAN2_Init+0x64>)
 800536a:	2200      	movs	r2, #0
 800536c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800536e:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005370:	2201      	movs	r2, #1
 8005372:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005376:	2200      	movs	r2, #0
 8005378:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <MX_CAN2_Init+0x64>)
 800537c:	2201      	movs	r2, #1
 800537e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005382:	2200      	movs	r2, #0
 8005384:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <MX_CAN2_Init+0x64>)
 8005388:	2200      	movs	r2, #0
 800538a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800538c:	4804      	ldr	r0, [pc, #16]	; (80053a0 <MX_CAN2_Init+0x64>)
 800538e:	f001 fc5d 	bl	8006c4c <HAL_CAN_Init>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8005398:	f000 fb6e 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	2000043c 	.word	0x2000043c
 80053a4:	40006800 	.word	0x40006800

080053a8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b0:	f107 031c 	add.w	r3, r7, #28
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5a      	ldr	r2, [pc, #360]	; (8005530 <HAL_CAN_MspInit+0x188>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d14d      	bne.n	8005466 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80053ca:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 80053d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80053d4:	4b57      	ldr	r3, [pc, #348]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10d      	bne.n	80053f8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	4b55      	ldr	r3, [pc, #340]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	4a54      	ldr	r2, [pc, #336]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80053e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053ea:	6413      	str	r3, [r2, #64]	; 0x40
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	4b4e      	ldr	r3, [pc, #312]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	4a4d      	ldr	r2, [pc, #308]	; (8005538 <HAL_CAN_MspInit+0x190>)
 8005402:	f043 0308 	orr.w	r3, r3, #8
 8005406:	6313      	str	r3, [r2, #48]	; 0x30
 8005408:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <HAL_CAN_MspInit+0x190>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005414:	2303      	movs	r3, #3
 8005416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005418:	2302      	movs	r3, #2
 800541a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005420:	2303      	movs	r3, #3
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005424:	2309      	movs	r3, #9
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005428:	f107 031c 	add.w	r3, r7, #28
 800542c:	4619      	mov	r1, r3
 800542e:	4843      	ldr	r0, [pc, #268]	; (800553c <HAL_CAN_MspInit+0x194>)
 8005430:	f002 fd84 	bl	8007f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8005434:	2200      	movs	r2, #0
 8005436:	2105      	movs	r1, #5
 8005438:	2013      	movs	r0, #19
 800543a:	f002 fa4f 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800543e:	2013      	movs	r0, #19
 8005440:	f002 fa68 	bl	8007914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005444:	2200      	movs	r2, #0
 8005446:	2105      	movs	r1, #5
 8005448:	2014      	movs	r0, #20
 800544a:	f002 fa47 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800544e:	2014      	movs	r0, #20
 8005450:	f002 fa60 	bl	8007914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8005454:	2200      	movs	r2, #0
 8005456:	2105      	movs	r1, #5
 8005458:	2015      	movs	r0, #21
 800545a:	f002 fa3f 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800545e:	2015      	movs	r0, #21
 8005460:	f002 fa58 	bl	8007914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8005464:	e05f      	b.n	8005526 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a35      	ldr	r2, [pc, #212]	; (8005540 <HAL_CAN_MspInit+0x198>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d15a      	bne.n	8005526 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <HAL_CAN_MspInit+0x190>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <HAL_CAN_MspInit+0x190>)
 800547a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800547e:	6413      	str	r3, [r2, #64]	; 0x40
 8005480:	4b2d      	ldr	r3, [pc, #180]	; (8005538 <HAL_CAN_MspInit+0x190>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800548c:	4b29      	ldr	r3, [pc, #164]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	4a28      	ldr	r2, [pc, #160]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 8005494:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <HAL_CAN_MspInit+0x18c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10d      	bne.n	80054ba <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ac:	6413      	str	r3, [r2, #64]	; 0x40
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	6313      	str	r3, [r2, #48]	; 0x30
 80054ca:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_CAN_MspInit+0x190>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80054d6:	2360      	movs	r3, #96	; 0x60
 80054d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054da:	2302      	movs	r3, #2
 80054dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80054e6:	2309      	movs	r3, #9
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	4619      	mov	r1, r3
 80054f0:	4814      	ldr	r0, [pc, #80]	; (8005544 <HAL_CAN_MspInit+0x19c>)
 80054f2:	f002 fd23 	bl	8007f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2105      	movs	r1, #5
 80054fa:	203f      	movs	r0, #63	; 0x3f
 80054fc:	f002 f9ee 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8005500:	203f      	movs	r0, #63	; 0x3f
 8005502:	f002 fa07 	bl	8007914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8005506:	2200      	movs	r2, #0
 8005508:	2105      	movs	r1, #5
 800550a:	2040      	movs	r0, #64	; 0x40
 800550c:	f002 f9e6 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8005510:	2040      	movs	r0, #64	; 0x40
 8005512:	f002 f9ff 	bl	8007914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8005516:	2200      	movs	r2, #0
 8005518:	2105      	movs	r1, #5
 800551a:	2041      	movs	r0, #65	; 0x41
 800551c:	f002 f9de 	bl	80078dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8005520:	2041      	movs	r0, #65	; 0x41
 8005522:	f002 f9f7 	bl	8007914 <HAL_NVIC_EnableIRQ>
}
 8005526:	bf00      	nop
 8005528:	3730      	adds	r7, #48	; 0x30
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40006400 	.word	0x40006400
 8005534:	20000464 	.word	0x20000464
 8005538:	40023800 	.word	0x40023800
 800553c:	40020c00 	.word	0x40020c00
 8005540:	40006800 	.word	0x40006800
 8005544:	40020400 	.word	0x40020400

08005548 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <MX_CRC_Init+0x20>)
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <MX_CRC_Init+0x24>)
 8005550:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005552:	4805      	ldr	r0, [pc, #20]	; (8005568 <MX_CRC_Init+0x20>)
 8005554:	f002 f9ec 	bl	8007930 <HAL_CRC_Init>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800555e:	f000 fa8b 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000468 	.word	0x20000468
 800556c:	40023000 	.word	0x40023000

08005570 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <HAL_CRC_MspInit+0x3c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10d      	bne.n	800559e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_CRC_MspInit+0x40>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	4a09      	ldr	r2, [pc, #36]	; (80055b0 <HAL_CRC_MspInit+0x40>)
 800558c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005590:	6313      	str	r3, [r2, #48]	; 0x30
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <HAL_CRC_MspInit+0x40>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40023000 	.word	0x40023000
 80055b0:	40023800 	.word	0x40023800

080055b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <MX_DMA_Init+0x6c>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <MX_DMA_Init+0x6c>)
 80055c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055c8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <MX_DMA_Init+0x6c>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80055d6:	2200      	movs	r2, #0
 80055d8:	2105      	movs	r1, #5
 80055da:	2038      	movs	r0, #56	; 0x38
 80055dc:	f002 f97e 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80055e0:	2038      	movs	r0, #56	; 0x38
 80055e2:	f002 f997 	bl	8007914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2105      	movs	r1, #5
 80055ea:	203a      	movs	r0, #58	; 0x3a
 80055ec:	f002 f976 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80055f0:	203a      	movs	r0, #58	; 0x3a
 80055f2:	f002 f98f 	bl	8007914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80055f6:	2200      	movs	r2, #0
 80055f8:	2105      	movs	r1, #5
 80055fa:	2044      	movs	r0, #68	; 0x44
 80055fc:	f002 f96e 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005600:	2044      	movs	r0, #68	; 0x44
 8005602:	f002 f987 	bl	8007914 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8005606:	2200      	movs	r2, #0
 8005608:	2105      	movs	r1, #5
 800560a:	2046      	movs	r0, #70	; 0x46
 800560c:	f002 f966 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005610:	2046      	movs	r0, #70	; 0x46
 8005612:	f002 f97f 	bl	8007914 <HAL_NVIC_EnableIRQ>

}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800

08005624 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0

}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
return 0;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800565c:	bf00      	nop
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <MX_FREERTOS_Init+0x38>)
 800566e:	2101      	movs	r1, #1
 8005670:	2010      	movs	r0, #16
 8005672:	f005 f9ee 	bl	800aa52 <osMessageQueueNew>
 8005676:	4603      	mov	r3, r0
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <MX_FREERTOS_Init+0x3c>)
 800567a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <MX_FREERTOS_Init+0x40>)
 800567e:	2100      	movs	r1, #0
 8005680:	480a      	ldr	r0, [pc, #40]	; (80056ac <MX_FREERTOS_Init+0x44>)
 8005682:	f005 f82b 	bl	800a6dc <osThreadNew>
 8005686:	4603      	mov	r3, r0
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <MX_FREERTOS_Init+0x48>)
 800568a:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 800568c:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <MX_FREERTOS_Init+0x4c>)
 800568e:	2100      	movs	r1, #0
 8005690:	4809      	ldr	r0, [pc, #36]	; (80056b8 <MX_FREERTOS_Init+0x50>)
 8005692:	f005 f823 	bl	800a6dc <osThreadNew>
 8005696:	4603      	mov	r3, r0
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <MX_FREERTOS_Init+0x54>)
 800569a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800569c:	bf00      	nop
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	0800fd8c 	.word	0x0800fd8c
 80056a4:	20000738 	.word	0x20000738
 80056a8:	0800fd44 	.word	0x0800fd44
 80056ac:	080056c1 	.word	0x080056c1
 80056b0:	20000470 	.word	0x20000470
 80056b4:	0800fd68 	.word	0x0800fd68
 80056b8:	08001219 	.word	0x08001219
 80056bc:	20000734 	.word	0x20000734

080056c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80056c8:	2001      	movs	r0, #1
 80056ca:	f005 f899 	bl	800a800 <osDelay>
 80056ce:	e7fb      	b.n	80056c8 <StartDefaultTask+0x8>

080056d0 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d6:	f107 0314 	add.w	r3, r7, #20
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	60da      	str	r2, [r3, #12]
 80056e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	4b4f      	ldr	r3, [pc, #316]	; (8005828 <MX_GPIO_Init+0x158>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4a4e      	ldr	r2, [pc, #312]	; (8005828 <MX_GPIO_Init+0x158>)
 80056f0:	f043 0304 	orr.w	r3, r3, #4
 80056f4:	6313      	str	r3, [r2, #48]	; 0x30
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <MX_GPIO_Init+0x158>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	4b48      	ldr	r3, [pc, #288]	; (8005828 <MX_GPIO_Init+0x158>)
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570a:	4a47      	ldr	r2, [pc, #284]	; (8005828 <MX_GPIO_Init+0x158>)
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	6313      	str	r3, [r2, #48]	; 0x30
 8005712:	4b45      	ldr	r3, [pc, #276]	; (8005828 <MX_GPIO_Init+0x158>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	4b41      	ldr	r3, [pc, #260]	; (8005828 <MX_GPIO_Init+0x158>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	4a40      	ldr	r2, [pc, #256]	; (8005828 <MX_GPIO_Init+0x158>)
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6313      	str	r3, [r2, #48]	; 0x30
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <MX_GPIO_Init+0x158>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	4b3a      	ldr	r3, [pc, #232]	; (8005828 <MX_GPIO_Init+0x158>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4a39      	ldr	r2, [pc, #228]	; (8005828 <MX_GPIO_Init+0x158>)
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	6313      	str	r3, [r2, #48]	; 0x30
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <MX_GPIO_Init+0x158>)
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <MX_GPIO_Init+0x158>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	4a32      	ldr	r2, [pc, #200]	; (8005828 <MX_GPIO_Init+0x158>)
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	6313      	str	r3, [r2, #48]	; 0x30
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <MX_GPIO_Init+0x158>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 8005772:	2200      	movs	r2, #0
 8005774:	f641 4102 	movw	r1, #7170	; 0x1c02
 8005778:	482c      	ldr	r0, [pc, #176]	; (800582c <MX_GPIO_Init+0x15c>)
 800577a:	f002 fd7b 	bl	8008274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800577e:	2305      	movs	r3, #5
 8005780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005782:	2303      	movs	r3, #3
 8005784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800578a:	f107 0314 	add.w	r3, r7, #20
 800578e:	4619      	mov	r1, r3
 8005790:	4827      	ldr	r0, [pc, #156]	; (8005830 <MX_GPIO_Init+0x160>)
 8005792:	f002 fbd3 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 8005796:	230a      	movs	r3, #10
 8005798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800579a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800579e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a4:	f107 0314 	add.w	r3, r7, #20
 80057a8:	4619      	mov	r1, r3
 80057aa:	4821      	ldr	r0, [pc, #132]	; (8005830 <MX_GPIO_Init+0x160>)
 80057ac:	f002 fbc6 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 80057b0:	f641 4302 	movw	r3, #7170	; 0x1c02
 80057b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	4619      	mov	r1, r3
 80057c8:	4818      	ldr	r0, [pc, #96]	; (800582c <MX_GPIO_Init+0x15c>)
 80057ca:	f002 fbb7 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 80057ce:	2318      	movs	r3, #24
 80057d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057da:	f107 0314 	add.w	r3, r7, #20
 80057de:	4619      	mov	r1, r3
 80057e0:	4814      	ldr	r0, [pc, #80]	; (8005834 <MX_GPIO_Init+0x164>)
 80057e2:	f002 fbab 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIN3_Pin|DIN4_Pin;
 80057e6:	2390      	movs	r3, #144	; 0x90
 80057e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	4619      	mov	r1, r3
 80057f8:	480c      	ldr	r0, [pc, #48]	; (800582c <MX_GPIO_Init+0x15c>)
 80057fa:	f002 fb9f 	bl	8007f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80057fe:	2200      	movs	r2, #0
 8005800:	2105      	movs	r1, #5
 8005802:	2007      	movs	r0, #7
 8005804:	f002 f86a 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005808:	2007      	movs	r0, #7
 800580a:	f002 f883 	bl	8007914 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800580e:	2200      	movs	r2, #0
 8005810:	2105      	movs	r1, #5
 8005812:	2009      	movs	r0, #9
 8005814:	f002 f862 	bl	80078dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005818:	2009      	movs	r0, #9
 800581a:	f002 f87b 	bl	8007914 <HAL_NVIC_EnableIRQ>

}
 800581e:	bf00      	nop
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800
 800582c:	40020400 	.word	0x40020400
 8005830:	40020800 	.word	0x40020800
 8005834:	40020c00 	.word	0x40020c00

08005838 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <MX_I2C1_Init+0x50>)
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <MX_I2C1_Init+0x54>)
 8005840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005842:	4b11      	ldr	r3, [pc, #68]	; (8005888 <MX_I2C1_Init+0x50>)
 8005844:	4a12      	ldr	r2, [pc, #72]	; (8005890 <MX_I2C1_Init+0x58>)
 8005846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <MX_I2C1_Init+0x50>)
 800584a:	2200      	movs	r2, #0
 800584c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <MX_I2C1_Init+0x50>)
 8005850:	2200      	movs	r2, #0
 8005852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <MX_I2C1_Init+0x50>)
 8005856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800585a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <MX_I2C1_Init+0x50>)
 800585e:	2200      	movs	r2, #0
 8005860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <MX_I2C1_Init+0x50>)
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <MX_I2C1_Init+0x50>)
 800586a:	2200      	movs	r2, #0
 800586c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <MX_I2C1_Init+0x50>)
 8005870:	2200      	movs	r2, #0
 8005872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005874:	4804      	ldr	r0, [pc, #16]	; (8005888 <MX_I2C1_Init+0x50>)
 8005876:	f002 fd2f 	bl	80082d8 <HAL_I2C_Init>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005880:	f000 f8fa 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005884:	bf00      	nop
 8005886:	bd80      	pop	{r7, pc}
 8005888:	2000073c 	.word	0x2000073c
 800588c:	40005400 	.word	0x40005400
 8005890:	000186a0 	.word	0x000186a0

08005894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	605a      	str	r2, [r3, #4]
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_I2C_MspInit+0x84>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d12c      	bne.n	8005910 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_I2C_MspInit+0x88>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_I2C_MspInit+0x88>)
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	6313      	str	r3, [r2, #48]	; 0x30
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <HAL_I2C_MspInit+0x88>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 80058d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058d8:	2312      	movs	r3, #18
 80058da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058dc:	2301      	movs	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e0:	2303      	movs	r3, #3
 80058e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80058e4:	2304      	movs	r3, #4
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e8:	f107 0314 	add.w	r3, r7, #20
 80058ec:	4619      	mov	r1, r3
 80058ee:	480c      	ldr	r0, [pc, #48]	; (8005920 <HAL_I2C_MspInit+0x8c>)
 80058f0:	f002 fb24 	bl	8007f3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	4b08      	ldr	r3, [pc, #32]	; (800591c <HAL_I2C_MspInit+0x88>)
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	4a07      	ldr	r2, [pc, #28]	; (800591c <HAL_I2C_MspInit+0x88>)
 80058fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005902:	6413      	str	r3, [r2, #64]	; 0x40
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_I2C_MspInit+0x88>)
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005910:	bf00      	nop
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40005400 	.word	0x40005400
 800591c:	40023800 	.word	0x40023800
 8005920:	40020400 	.word	0x40020400

08005924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005928:	f000 feec 	bl	8006704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800592c:	f000 f828 	bl	8005980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005930:	f7ff fece 	bl	80056d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005934:	f7ff fe3e 	bl	80055b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8005938:	f7ff faa2 	bl	8004e80 <MX_ADC1_Init>
  MX_CAN1_Init();
 800593c:	f7ff fcc8 	bl	80052d0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8005940:	f7ff fcfc 	bl	800533c <MX_CAN2_Init>
  MX_CRC_Init();
 8005944:	f7ff fe00 	bl	8005548 <MX_CRC_Init>
  MX_RNG_Init();
 8005948:	f000 f89c 	bl	8005a84 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800594c:	f000 fda2 	bl	8006494 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8005950:	f000 fba4 	bl	800609c <MX_TIM4_Init>
  MX_ADC2_Init();
 8005954:	f7ff fb10 	bl	8004f78 <MX_ADC2_Init>
  MX_I2C1_Init();
 8005958:	f7ff ff6e 	bl	8005838 <MX_I2C1_Init>
  MX_SPI2_Init();
 800595c:	f000 f8c8 	bl	8005af0 <MX_SPI2_Init>
  MX_TIM5_Init();
 8005960:	f000 fc28 	bl	80061b4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8005964:	f000 fd6c 	bl	8006440 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8005968:	f000 fc78 	bl	800625c <MX_TIM14_Init>
  MX_TIM2_Init();
 800596c:	f000 fb48 	bl	8006000 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8005970:	f004 fe6a 	bl	800a648 <osKernelInitialize>
  MX_FREERTOS_Init();
 8005974:	f7ff fe78 	bl	8005668 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8005978:	f004 fe8a 	bl	800a690 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800597c:	e7fe      	b.n	800597c <main+0x58>
	...

08005980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b094      	sub	sp, #80	; 0x50
 8005984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005986:	f107 0320 	add.w	r3, r7, #32
 800598a:	2230      	movs	r2, #48	; 0x30
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f009 f856 	bl	800ea40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059a4:	2300      	movs	r3, #0
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <SystemClock_Config+0xcc>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	4a27      	ldr	r2, [pc, #156]	; (8005a4c <SystemClock_Config+0xcc>)
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	; 0x40
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <SystemClock_Config+0xcc>)
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80059c0:	2300      	movs	r3, #0
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <SystemClock_Config+0xd0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <SystemClock_Config+0xd0>)
 80059ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <SystemClock_Config+0xd0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80059dc:	2301      	movs	r3, #1
 80059de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80059e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80059e6:	2302      	movs	r3, #2
 80059e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80059ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80059f0:	2308      	movs	r3, #8
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80059f4:	23a8      	movs	r3, #168	; 0xa8
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80059f8:	2302      	movs	r3, #2
 80059fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80059fc:	2307      	movs	r3, #7
 80059fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a00:	f107 0320 	add.w	r3, r7, #32
 8005a04:	4618      	mov	r0, r3
 8005a06:	f002 fdab 	bl	8008560 <HAL_RCC_OscConfig>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005a10:	f000 f832 	bl	8005a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a14:	230f      	movs	r3, #15
 8005a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	2105      	movs	r1, #5
 8005a32:	4618      	mov	r0, r3
 8005a34:	f003 f80c 	bl	8008a50 <HAL_RCC_ClockConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005a3e:	f000 f81b 	bl	8005a78 <Error_Handler>
  }
}
 8005a42:	bf00      	nop
 8005a44:	3750      	adds	r7, #80	; 0x50
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40007000 	.word	0x40007000

08005a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005a66:	f000 fe6f 	bl	8006748 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40010000 	.word	0x40010000

08005a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005a7c:	b672      	cpsid	i
}
 8005a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a80:	e7fe      	b.n	8005a80 <Error_Handler+0x8>
	...

08005a84 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <MX_RNG_Init+0x20>)
 8005a8a:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <MX_RNG_Init+0x24>)
 8005a8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8005a8e:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_RNG_Init+0x20>)
 8005a90:	f003 fa2e 	bl	8008ef0 <HAL_RNG_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8005a9a:	f7ff ffed 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000790 	.word	0x20000790
 8005aa8:	50060800 	.word	0x50060800

08005aac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0b      	ldr	r2, [pc, #44]	; (8005ae8 <HAL_RNG_MspInit+0x3c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d10d      	bne.n	8005ada <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <HAL_RNG_MspInit+0x40>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RNG_MspInit+0x40>)
 8005ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005acc:	6353      	str	r3, [r2, #52]	; 0x34
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <HAL_RNG_MspInit+0x40>)
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	50060800 	.word	0x50060800
 8005aec:	40023800 	.word	0x40023800

08005af0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005af4:	4b17      	ldr	r3, [pc, #92]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005af6:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <MX_SPI2_Init+0x68>)
 8005af8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005afa:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b40:	4804      	ldr	r0, [pc, #16]	; (8005b54 <MX_SPI2_Init+0x64>)
 8005b42:	f003 f9ff 	bl	8008f44 <HAL_SPI_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005b4c:	f7ff ff94 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b50:	bf00      	nop
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	200007a0 	.word	0x200007a0
 8005b58:	40003800 	.word	0x40003800

08005b5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b64:	f107 0314 	add.w	r3, r7, #20
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_SPI_MspInit+0x84>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d12c      	bne.n	8005bd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	4b11      	ldr	r3, [pc, #68]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <HAL_SPI_MspInit+0x88>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005bb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005bc8:	2305      	movs	r3, #5
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bcc:	f107 0314 	add.w	r3, r7, #20
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4805      	ldr	r0, [pc, #20]	; (8005be8 <HAL_SPI_MspInit+0x8c>)
 8005bd4:	f002 f9b2 	bl	8007f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005bd8:	bf00      	nop
 8005bda:	3728      	adds	r7, #40	; 0x28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40003800 	.word	0x40003800
 8005be4:	40023800 	.word	0x40023800
 8005be8:	40020400 	.word	0x40020400

08005bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <HAL_MspInit+0x54>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <HAL_MspInit+0x54>)
 8005bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c00:	6453      	str	r3, [r2, #68]	; 0x44
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <HAL_MspInit+0x54>)
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <HAL_MspInit+0x54>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	4a0a      	ldr	r2, [pc, #40]	; (8005c40 <HAL_MspInit+0x54>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <HAL_MspInit+0x54>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	210f      	movs	r1, #15
 8005c2e:	f06f 0001 	mvn.w	r0, #1
 8005c32:	f001 fe53 	bl	80078dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800

08005c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	; 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005c54:	2300      	movs	r3, #0
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <HAL_InitTick+0xd4>)
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <HAL_InitTick+0xd4>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6453      	str	r3, [r2, #68]	; 0x44
 8005c64:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <HAL_InitTick+0xd4>)
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c70:	f107 020c 	add.w	r2, r7, #12
 8005c74:	f107 0310 	add.w	r3, r7, #16
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f003 f906 	bl	8008e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005c80:	f003 f8f0 	bl	8008e64 <HAL_RCC_GetPCLK2Freq>
 8005c84:	4603      	mov	r3, r0
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8c:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <HAL_InitTick+0xd8>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	0c9b      	lsrs	r3, r3, #18
 8005c94:	3b01      	subs	r3, #1
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005c98:	4b21      	ldr	r3, [pc, #132]	; (8005d20 <HAL_InitTick+0xdc>)
 8005c9a:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <HAL_InitTick+0xe0>)
 8005c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005c9e:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <HAL_InitTick+0xdc>)
 8005ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <HAL_InitTick+0xdc>)
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005cac:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <HAL_InitTick+0xdc>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <HAL_InitTick+0xdc>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <HAL_InitTick+0xdc>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005cbe:	4818      	ldr	r0, [pc, #96]	; (8005d20 <HAL_InitTick+0xdc>)
 8005cc0:	f003 f9c9 	bl	8009056 <HAL_TIM_Base_Init>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11b      	bne.n	8005d0a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005cd2:	4813      	ldr	r0, [pc, #76]	; (8005d20 <HAL_InitTick+0xdc>)
 8005cd4:	f003 fa0e 	bl	80090f4 <HAL_TIM_Base_Start_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d111      	bne.n	8005d0a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005ce6:	2019      	movs	r0, #25
 8005ce8:	f001 fe14 	bl	8007914 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d808      	bhi.n	8005d04 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	2019      	movs	r0, #25
 8005cf8:	f001 fdf0 	bl	80078dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <HAL_InitTick+0xe4>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e002      	b.n	8005d0a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	431bde83 	.word	0x431bde83
 8005d20:	200007f8 	.word	0x200007f8
 8005d24:	40010000 	.word	0x40010000
 8005d28:	20000014 	.word	0x20000014

08005d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d30:	e7fe      	b.n	8005d30 <NMI_Handler+0x4>

08005d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d36:	e7fe      	b.n	8005d36 <HardFault_Handler+0x4>

08005d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d3c:	e7fe      	b.n	8005d3c <MemManage_Handler+0x4>

08005d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d42:	e7fe      	b.n	8005d42 <BusFault_Handler+0x4>

08005d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d48:	e7fe      	b.n	8005d48 <UsageFault_Handler+0x4>

08005d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 8005d5c:	2002      	movs	r0, #2
 8005d5e:	f002 faa3 	bl	80082a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8005d6a:	2008      	movs	r0, #8
 8005d6c:	f002 fa9c 	bl	80082a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005d70:	bf00      	nop
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <CAN1_TX_IRQHandler+0x10>)
 8005d7a:	f001 fabd 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000414 	.word	0x20000414

08005d88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <CAN1_RX0_IRQHandler+0x10>)
 8005d8e:	f001 fab3 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000414 	.word	0x20000414

08005d9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <CAN1_RX1_IRQHandler+0x10>)
 8005da2:	f001 faa9 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000414 	.word	0x20000414

08005db0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005db6:	f003 fb0c 	bl	80093d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200007f8 	.word	0x200007f8

08005dc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005dc8:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <DMA2_Stream0_IRQHandler+0x10>)
 8005dca:	f001 fe7b 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000354 	.word	0x20000354

08005dd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <DMA2_Stream2_IRQHandler+0x10>)
 8005dde:	f001 fe71 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	200003b4 	.word	0x200003b4

08005dec <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005df0:	4802      	ldr	r0, [pc, #8]	; (8005dfc <CAN2_TX_IRQHandler+0x10>)
 8005df2:	f001 fa81 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000043c 	.word	0x2000043c

08005e00 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005e04:	4802      	ldr	r0, [pc, #8]	; (8005e10 <CAN2_RX0_IRQHandler+0x10>)
 8005e06:	f001 fa77 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000043c 	.word	0x2000043c

08005e14 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <CAN2_RX1_IRQHandler+0x10>)
 8005e1a:	f001 fa6d 	bl	80072f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000043c 	.word	0x2000043c

08005e28 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <DMA2_Stream5_IRQHandler+0x10>)
 8005e2e:	f001 fe49 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000a4c 	.word	0x20000a4c

08005e3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005e40:	4802      	ldr	r0, [pc, #8]	; (8005e4c <DMA2_Stream7_IRQHandler+0x10>)
 8005e42:	f001 fe3f 	bl	8007ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200009ec 	.word	0x200009ec

08005e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  return 1;
 8005e54:	2301      	movs	r3, #1
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <_kill>:

int _kill(int pid, int sig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e6a:	f008 fcaf 	bl	800e7cc <__errno>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2216      	movs	r2, #22
 8005e72:	601a      	str	r2, [r3, #0]
  return -1;
 8005e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <_exit>:

void _exit (int status)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e88:	f04f 31ff 	mov.w	r1, #4294967295
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ffe7 	bl	8005e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e92:	e7fe      	b.n	8005e92 <_exit+0x12>

08005e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e00a      	b.n	8005ebc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ea6:	f3af 8000 	nop.w
 8005eaa:	4601      	mov	r1, r0
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	60ba      	str	r2, [r7, #8]
 8005eb2:	b2ca      	uxtb	r2, r1
 8005eb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	dbf0      	blt.n	8005ea6 <_read+0x12>
  }

  return len;
 8005ec4:	687b      	ldr	r3, [r7, #4]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e009      	b.n	8005ef4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	60ba      	str	r2, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	dbf1      	blt.n	8005ee0 <_write+0x12>
  }
  return len;
 8005efc:	687b      	ldr	r3, [r7, #4]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_close>:

int _close(int file)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_isatty>:

int _isatty(int file)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005f46:	2301      	movs	r3, #1
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f78:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <_sbrk+0x5c>)
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <_sbrk+0x60>)
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f84:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <_sbrk+0x64>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <_sbrk+0x64>)
 8005f8e:	4a12      	ldr	r2, [pc, #72]	; (8005fd8 <_sbrk+0x68>)
 8005f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f92:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <_sbrk+0x64>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d207      	bcs.n	8005fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fa0:	f008 fc14 	bl	800e7cc <__errno>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	e009      	b.n	8005fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <_sbrk+0x64>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <_sbrk+0x64>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	4a05      	ldr	r2, [pc, #20]	; (8005fd4 <_sbrk+0x64>)
 8005fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20020000 	.word	0x20020000
 8005fd0:	00000800 	.word	0x00000800
 8005fd4:	20000840 	.word	0x20000840
 8005fd8:	20009970 	.word	0x20009970

08005fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <SystemInit+0x20>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe6:	4a05      	ldr	r2, [pc, #20]	; (8005ffc <SystemInit+0x20>)
 8005fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	605a      	str	r2, [r3, #4]
 8006010:	609a      	str	r2, [r3, #8]
 8006012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006014:	463b      	mov	r3, r7
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800601c:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <MX_TIM2_Init+0x98>)
 800601e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8006024:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <MX_TIM2_Init+0x98>)
 8006026:	f240 3247 	movw	r2, #839	; 0x347
 800602a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <MX_TIM2_Init+0x98>)
 800602e:	2200      	movs	r2, #0
 8006030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006032:	4b19      	ldr	r3, [pc, #100]	; (8006098 <MX_TIM2_Init+0x98>)
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <MX_TIM2_Init+0x98>)
 800603c:	2200      	movs	r2, #0
 800603e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006040:	4b15      	ldr	r3, [pc, #84]	; (8006098 <MX_TIM2_Init+0x98>)
 8006042:	2200      	movs	r2, #0
 8006044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006046:	4814      	ldr	r0, [pc, #80]	; (8006098 <MX_TIM2_Init+0x98>)
 8006048:	f003 f805 	bl	8009056 <HAL_TIM_Base_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006052:	f7ff fd11 	bl	8005a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800605a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4619      	mov	r1, r3
 8006062:	480d      	ldr	r0, [pc, #52]	; (8006098 <MX_TIM2_Init+0x98>)
 8006064:	f003 fb80 	bl	8009768 <HAL_TIM_ConfigClockSource>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800606e:	f7ff fd03 	bl	8005a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800607a:	463b      	mov	r3, r7
 800607c:	4619      	mov	r1, r3
 800607e:	4806      	ldr	r0, [pc, #24]	; (8006098 <MX_TIM2_Init+0x98>)
 8006080:	f003 ff4c 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800608a:	f7ff fcf5 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800608e:	bf00      	nop
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000844 	.word	0x20000844

0800609c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	; 0x38
 80060a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	605a      	str	r2, [r3, #4]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060b0:	f107 0320 	add.w	r3, r7, #32
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	611a      	str	r2, [r3, #16]
 80060c8:	615a      	str	r2, [r3, #20]
 80060ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80060cc:	4b37      	ldr	r3, [pc, #220]	; (80061ac <MX_TIM4_Init+0x110>)
 80060ce:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <MX_TIM4_Init+0x114>)
 80060d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 80060d2:	4b36      	ldr	r3, [pc, #216]	; (80061ac <MX_TIM4_Init+0x110>)
 80060d4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80060d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060da:	4b34      	ldr	r3, [pc, #208]	; (80061ac <MX_TIM4_Init+0x110>)
 80060dc:	2200      	movs	r2, #0
 80060de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 80060e0:	4b32      	ldr	r3, [pc, #200]	; (80061ac <MX_TIM4_Init+0x110>)
 80060e2:	22fe      	movs	r2, #254	; 0xfe
 80060e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e6:	4b31      	ldr	r3, [pc, #196]	; (80061ac <MX_TIM4_Init+0x110>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <MX_TIM4_Init+0x110>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80060f2:	482e      	ldr	r0, [pc, #184]	; (80061ac <MX_TIM4_Init+0x110>)
 80060f4:	f002 ffaf 	bl	8009056 <HAL_TIM_Base_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80060fe:	f7ff fcbb 	bl	8005a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610c:	4619      	mov	r1, r3
 800610e:	4827      	ldr	r0, [pc, #156]	; (80061ac <MX_TIM4_Init+0x110>)
 8006110:	f003 fb2a 	bl	8009768 <HAL_TIM_ConfigClockSource>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800611a:	f7ff fcad 	bl	8005a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800611e:	4823      	ldr	r0, [pc, #140]	; (80061ac <MX_TIM4_Init+0x110>)
 8006120:	f003 f858 	bl	80091d4 <HAL_TIM_PWM_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800612a:	f7ff fca5 	bl	8005a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800612e:	2300      	movs	r3, #0
 8006130:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006136:	f107 0320 	add.w	r3, r7, #32
 800613a:	4619      	mov	r1, r3
 800613c:	481b      	ldr	r0, [pc, #108]	; (80061ac <MX_TIM4_Init+0x110>)
 800613e:	f003 feed 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8006148:	f7ff fc96 	bl	8005a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800614c:	2360      	movs	r3, #96	; 0x60
 800614e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006154:	2300      	movs	r3, #0
 8006156:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800615c:	1d3b      	adds	r3, r7, #4
 800615e:	2200      	movs	r2, #0
 8006160:	4619      	mov	r1, r3
 8006162:	4812      	ldr	r0, [pc, #72]	; (80061ac <MX_TIM4_Init+0x110>)
 8006164:	f003 fa3e 	bl	80095e4 <HAL_TIM_PWM_ConfigChannel>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800616e:	f7ff fc83 	bl	8005a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	2204      	movs	r2, #4
 8006176:	4619      	mov	r1, r3
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <MX_TIM4_Init+0x110>)
 800617a:	f003 fa33 	bl	80095e4 <HAL_TIM_PWM_ConfigChannel>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8006184:	f7ff fc78 	bl	8005a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	2208      	movs	r2, #8
 800618c:	4619      	mov	r1, r3
 800618e:	4807      	ldr	r0, [pc, #28]	; (80061ac <MX_TIM4_Init+0x110>)
 8006190:	f003 fa28 	bl	80095e4 <HAL_TIM_PWM_ConfigChannel>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800619a:	f7ff fc6d 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800619e:	4803      	ldr	r0, [pc, #12]	; (80061ac <MX_TIM4_Init+0x110>)
 80061a0:	f000 f914 	bl	80063cc <HAL_TIM_MspPostInit>

}
 80061a4:	bf00      	nop
 80061a6:	3738      	adds	r7, #56	; 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2000088c 	.word	0x2000088c
 80061b0:	40000800 	.word	0x40000800

080061b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08c      	sub	sp, #48	; 0x30
 80061b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f008 fc3c 	bl	800ea40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061c8:	1d3b      	adds	r3, r7, #4
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80061d0:	4b20      	ldr	r3, [pc, #128]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <MX_TIM5_Init+0xa4>)
 80061d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80061d6:	4b1f      	ldr	r3, [pc, #124]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061d8:	2200      	movs	r2, #0
 80061da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061dc:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80061e2:	4b1c      	ldr	r3, [pc, #112]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ea:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061f0:	4b18      	ldr	r3, [pc, #96]	; (8006254 <MX_TIM5_Init+0xa0>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061fe:	2301      	movs	r3, #1
 8006200:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006202:	2300      	movs	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800620a:	2300      	movs	r3, #0
 800620c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800620e:	2301      	movs	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006212:	2300      	movs	r3, #0
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	4619      	mov	r1, r3
 8006220:	480c      	ldr	r0, [pc, #48]	; (8006254 <MX_TIM5_Init+0xa0>)
 8006222:	f003 f830 	bl	8009286 <HAL_TIM_Encoder_Init>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800622c:	f7ff fc24 	bl	8005a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006230:	2300      	movs	r3, #0
 8006232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006234:	2300      	movs	r3, #0
 8006236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006238:	1d3b      	adds	r3, r7, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4805      	ldr	r0, [pc, #20]	; (8006254 <MX_TIM5_Init+0xa0>)
 800623e:	f003 fe6d 	bl	8009f1c <HAL_TIMEx_MasterConfigSynchronization>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8006248:	f7ff fc16 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800624c:	bf00      	nop
 800624e:	3730      	adds	r7, #48	; 0x30
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200008d4 	.word	0x200008d4
 8006258:	40000c00 	.word	0x40000c00

0800625c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <MX_TIM14_Init+0x40>)
 8006262:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <MX_TIM14_Init+0x44>)
 8006264:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <MX_TIM14_Init+0x40>)
 8006268:	f240 3247 	movw	r2, #839	; 0x347
 800626c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <MX_TIM14_Init+0x40>)
 8006270:	2200      	movs	r2, #0
 8006272:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8006274:	4b09      	ldr	r3, [pc, #36]	; (800629c <MX_TIM14_Init+0x40>)
 8006276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <MX_TIM14_Init+0x40>)
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <MX_TIM14_Init+0x40>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006288:	4804      	ldr	r0, [pc, #16]	; (800629c <MX_TIM14_Init+0x40>)
 800628a:	f002 fee4 	bl	8009056 <HAL_TIM_Base_Init>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8006294:	f7ff fbf0 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8006298:	bf00      	nop
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2000091c 	.word	0x2000091c
 80062a0:	40002000 	.word	0x40002000

080062a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d10e      	bne.n	80062d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6413      	str	r3, [r2, #64]	; 0x40
 80062c6:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80062d2:	e026      	b.n	8006322 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a16      	ldr	r2, [pc, #88]	; (8006334 <HAL_TIM_Base_MspInit+0x90>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062e8:	f043 0304 	orr.w	r3, r3, #4
 80062ec:	6413      	str	r3, [r2, #64]	; 0x40
 80062ee:	4b10      	ldr	r3, [pc, #64]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
}
 80062fa:	e012      	b.n	8006322 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0d      	ldr	r2, [pc, #52]	; (8006338 <HAL_TIM_Base_MspInit+0x94>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10d      	bne.n	8006322 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 8006310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <HAL_TIM_Base_MspInit+0x8c>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	40000800 	.word	0x40000800
 8006338:	40002000 	.word	0x40002000

0800633c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	609a      	str	r2, [r3, #8]
 8006350:	60da      	str	r2, [r3, #12]
 8006352:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <HAL_TIM_Encoder_MspInit+0x84>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d12b      	bne.n	80063b6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8006368:	f043 0308 	orr.w	r3, r3, #8
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
 800636e:	4b15      	ldr	r3, [pc, #84]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006382:	4a10      	ldr	r2, [pc, #64]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6313      	str	r3, [r2, #48]	; 0x30
 800638a:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_TIM_Encoder_MspInit+0x88>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 8006396:	2303      	movs	r3, #3
 8006398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	2302      	movs	r3, #2
 800639c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063a2:	2300      	movs	r3, #0
 80063a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80063a6:	2302      	movs	r3, #2
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063aa:	f107 0314 	add.w	r3, r7, #20
 80063ae:	4619      	mov	r1, r3
 80063b0:	4805      	ldr	r0, [pc, #20]	; (80063c8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80063b2:	f001 fdc3 	bl	8007f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80063b6:	bf00      	nop
 80063b8:	3728      	adds	r7, #40	; 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40023800 	.word	0x40023800
 80063c8:	40020000 	.word	0x40020000

080063cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d4:	f107 030c 	add.w	r3, r7, #12
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	605a      	str	r2, [r3, #4]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a12      	ldr	r2, [pc, #72]	; (8006434 <HAL_TIM_MspPostInit+0x68>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d11e      	bne.n	800642c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	4b11      	ldr	r3, [pc, #68]	; (8006438 <HAL_TIM_MspPostInit+0x6c>)
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4a10      	ldr	r2, [pc, #64]	; (8006438 <HAL_TIM_MspPostInit+0x6c>)
 80063f8:	f043 0308 	orr.w	r3, r3, #8
 80063fc:	6313      	str	r3, [r2, #48]	; 0x30
 80063fe:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <HAL_TIM_MspPostInit+0x6c>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800640a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006410:	2302      	movs	r3, #2
 8006412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800641c:	2302      	movs	r3, #2
 800641e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	4619      	mov	r1, r3
 8006426:	4805      	ldr	r0, [pc, #20]	; (800643c <HAL_TIM_MspPostInit+0x70>)
 8006428:	f001 fd88 	bl	8007f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800642c:	bf00      	nop
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40000800 	.word	0x40000800
 8006438:	40023800 	.word	0x40023800
 800643c:	40020c00 	.word	0x40020c00

08006440 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <MX_USART1_UART_Init+0x4c>)
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <MX_USART1_UART_Init+0x50>)
 8006448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <MX_USART1_UART_Init+0x4c>)
 800644c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <MX_USART1_UART_Init+0x4c>)
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <MX_USART1_UART_Init+0x4c>)
 800645a:	2200      	movs	r2, #0
 800645c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <MX_USART1_UART_Init+0x4c>)
 8006460:	2200      	movs	r2, #0
 8006462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <MX_USART1_UART_Init+0x4c>)
 8006466:	220c      	movs	r2, #12
 8006468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800646a:	4b08      	ldr	r3, [pc, #32]	; (800648c <MX_USART1_UART_Init+0x4c>)
 800646c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006470:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <MX_USART1_UART_Init+0x4c>)
 8006474:	2200      	movs	r2, #0
 8006476:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006478:	4804      	ldr	r0, [pc, #16]	; (800648c <MX_USART1_UART_Init+0x4c>)
 800647a:	f003 fddf 	bl	800a03c <HAL_UART_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8006484:	f7ff faf8 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000964 	.word	0x20000964
 8006490:	40011000 	.word	0x40011000

08006494 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006498:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 800649a:	4a12      	ldr	r2, [pc, #72]	; (80064e4 <MX_USART2_UART_Init+0x50>)
 800649c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064a0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80064a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80064a6:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064ba:	220c      	movs	r2, #12
 80064bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80064c4:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80064ca:	4805      	ldr	r0, [pc, #20]	; (80064e0 <MX_USART2_UART_Init+0x4c>)
 80064cc:	f003 fdb6 	bl	800a03c <HAL_UART_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80064d6:	f7ff facf 	bl	8005a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80064da:	bf00      	nop
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	200009a8 	.word	0x200009a8
 80064e4:	40004400 	.word	0x40004400

080064e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f0:	f107 031c 	add.w	r3, r7, #28
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a61      	ldr	r2, [pc, #388]	; (800668c <HAL_UART_MspInit+0x1a4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	f040 808a 	bne.w	8006620 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800650c:	2300      	movs	r3, #0
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	4b5f      	ldr	r3, [pc, #380]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006514:	4a5e      	ldr	r2, [pc, #376]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006516:	f043 0310 	orr.w	r3, r3, #16
 800651a:	6453      	str	r3, [r2, #68]	; 0x44
 800651c:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	4b58      	ldr	r3, [pc, #352]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	4a57      	ldr	r2, [pc, #348]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6313      	str	r3, [r2, #48]	; 0x30
 8006538:	4b55      	ldr	r3, [pc, #340]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006544:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8006548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654a:	2302      	movs	r3, #2
 800654c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654e:	2300      	movs	r3, #0
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006552:	2303      	movs	r3, #3
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006556:	2307      	movs	r3, #7
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800655a:	f107 031c 	add.w	r3, r7, #28
 800655e:	4619      	mov	r1, r3
 8006560:	484c      	ldr	r0, [pc, #304]	; (8006694 <HAL_UART_MspInit+0x1ac>)
 8006562:	f001 fceb 	bl	8007f3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006566:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 8006568:	4a4c      	ldr	r2, [pc, #304]	; (800669c <HAL_UART_MspInit+0x1b4>)
 800656a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800656c:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 800656e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006572:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006574:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 8006576:	2240      	movs	r2, #64	; 0x40
 8006578:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800657a:	4b47      	ldr	r3, [pc, #284]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 800657c:	2200      	movs	r2, #0
 800657e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006580:	4b45      	ldr	r3, [pc, #276]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 8006582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006586:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006588:	4b43      	ldr	r3, [pc, #268]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 800658a:	2200      	movs	r2, #0
 800658c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800658e:	4b42      	ldr	r3, [pc, #264]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 8006590:	2200      	movs	r2, #0
 8006592:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006594:	4b40      	ldr	r3, [pc, #256]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 8006596:	2200      	movs	r2, #0
 8006598:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800659a:	4b3f      	ldr	r3, [pc, #252]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 800659c:	2200      	movs	r2, #0
 800659e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065a0:	4b3d      	ldr	r3, [pc, #244]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80065a6:	483c      	ldr	r0, [pc, #240]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 80065a8:	f001 f9de 	bl	8007968 <HAL_DMA_Init>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80065b2:	f7ff fa61 	bl	8005a78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a37      	ldr	r2, [pc, #220]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 80065ba:	635a      	str	r2, [r3, #52]	; 0x34
 80065bc:	4a36      	ldr	r2, [pc, #216]	; (8006698 <HAL_UART_MspInit+0x1b0>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065c4:	4a37      	ldr	r2, [pc, #220]	; (80066a4 <HAL_UART_MspInit+0x1bc>)
 80065c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80065c8:	4b35      	ldr	r3, [pc, #212]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065d0:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065d6:	4b32      	ldr	r3, [pc, #200]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065d8:	2200      	movs	r2, #0
 80065da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065dc:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065e4:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065ea:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80065f0:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065fc:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 80065fe:	2200      	movs	r2, #0
 8006600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006602:	4827      	ldr	r0, [pc, #156]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 8006604:	f001 f9b0 	bl	8007968 <HAL_DMA_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800660e:	f7ff fa33 	bl	8005a78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
 8006618:	4a21      	ldr	r2, [pc, #132]	; (80066a0 <HAL_UART_MspInit+0x1b8>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800661e:	e030      	b.n	8006682 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <HAL_UART_MspInit+0x1c0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d12b      	bne.n	8006682 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	4a17      	ldr	r2, [pc, #92]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	4b11      	ldr	r3, [pc, #68]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	4a10      	ldr	r2, [pc, #64]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006650:	f043 0308 	orr.w	r3, r3, #8
 8006654:	6313      	str	r3, [r2, #48]	; 0x30
 8006656:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <HAL_UART_MspInit+0x1a8>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8006662:	2360      	movs	r3, #96	; 0x60
 8006664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006666:	2302      	movs	r3, #2
 8006668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666a:	2300      	movs	r3, #0
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800666e:	2303      	movs	r3, #3
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006672:	2307      	movs	r3, #7
 8006674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006676:	f107 031c 	add.w	r3, r7, #28
 800667a:	4619      	mov	r1, r3
 800667c:	480b      	ldr	r0, [pc, #44]	; (80066ac <HAL_UART_MspInit+0x1c4>)
 800667e:	f001 fc5d 	bl	8007f3c <HAL_GPIO_Init>
}
 8006682:	bf00      	nop
 8006684:	3730      	adds	r7, #48	; 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40011000 	.word	0x40011000
 8006690:	40023800 	.word	0x40023800
 8006694:	40020000 	.word	0x40020000
 8006698:	200009ec 	.word	0x200009ec
 800669c:	400264b8 	.word	0x400264b8
 80066a0:	20000a4c 	.word	0x20000a4c
 80066a4:	40026488 	.word	0x40026488
 80066a8:	40004400 	.word	0x40004400
 80066ac:	40020c00 	.word	0x40020c00

080066b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80066b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066b4:	480d      	ldr	r0, [pc, #52]	; (80066ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066b6:	490e      	ldr	r1, [pc, #56]	; (80066f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066b8:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066bc:	e002      	b.n	80066c4 <LoopCopyDataInit>

080066be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066c2:	3304      	adds	r3, #4

080066c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066c8:	d3f9      	bcc.n	80066be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066ca:	4a0b      	ldr	r2, [pc, #44]	; (80066f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066cc:	4c0b      	ldr	r4, [pc, #44]	; (80066fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80066ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066d0:	e001      	b.n	80066d6 <LoopFillZerobss>

080066d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066d4:	3204      	adds	r2, #4

080066d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066d8:	d3fb      	bcc.n	80066d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066da:	f7ff fc7f 	bl	8005fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066de:	f008 f971 	bl	800e9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066e2:	f7ff f91f 	bl	8005924 <main>
  bx  lr    
 80066e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80066e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80066ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066f0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80066f4:	0800fe84 	.word	0x0800fe84
  ldr r2, =_sbss
 80066f8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80066fc:	20009970 	.word	0x20009970

08006700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006700:	e7fe      	b.n	8006700 <ADC_IRQHandler>
	...

08006704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <HAL_Init+0x40>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <HAL_Init+0x40>)
 800670e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_Init+0x40>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <HAL_Init+0x40>)
 800671a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800671e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <HAL_Init+0x40>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a07      	ldr	r2, [pc, #28]	; (8006744 <HAL_Init+0x40>)
 8006726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800672c:	2003      	movs	r0, #3
 800672e:	f001 f8ca 	bl	80078c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006732:	2000      	movs	r0, #0
 8006734:	f7ff fa86 	bl	8005c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006738:	f7ff fa58 	bl	8005bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023c00 	.word	0x40023c00

08006748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006748:	b480      	push	{r7}
 800674a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <HAL_IncTick+0x20>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <HAL_IncTick+0x24>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4413      	add	r3, r2
 8006758:	4a04      	ldr	r2, [pc, #16]	; (800676c <HAL_IncTick+0x24>)
 800675a:	6013      	str	r3, [r2, #0]
}
 800675c:	bf00      	nop
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000018 	.word	0x20000018
 800676c:	20000aac 	.word	0x20000aac

08006770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  return uwTick;
 8006774:	4b03      	ldr	r3, [pc, #12]	; (8006784 <HAL_GetTick+0x14>)
 8006776:	681b      	ldr	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000aac 	.word	0x20000aac

08006788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e033      	b.n	8006806 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fe fc9a 	bl	80050e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d118      	bne.n	80067f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067ce:	f023 0302 	bic.w	r3, r3, #2
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f93a 	bl	8006a54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	f043 0201 	orr.w	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
 80067f6:	e001      	b.n	80067fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006804:	7bfb      	ldrb	r3, [r7, #15]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_ADC_ConfigChannel+0x1c>
 8006828:	2302      	movs	r3, #2
 800682a:	e105      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x228>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b09      	cmp	r3, #9
 800683a:	d925      	bls.n	8006888 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68d9      	ldr	r1, [r3, #12]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	4613      	mov	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4413      	add	r3, r2
 8006850:	3b1e      	subs	r3, #30
 8006852:	2207      	movs	r2, #7
 8006854:	fa02 f303 	lsl.w	r3, r2, r3
 8006858:	43da      	mvns	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	400a      	ands	r2, r1
 8006860:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68d9      	ldr	r1, [r3, #12]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	4618      	mov	r0, r3
 8006874:	4603      	mov	r3, r0
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	4403      	add	r3, r0
 800687a:	3b1e      	subs	r3, #30
 800687c:	409a      	lsls	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	e022      	b.n	80068ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6919      	ldr	r1, [r3, #16]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	4613      	mov	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	2207      	movs	r2, #7
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	43da      	mvns	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	400a      	ands	r2, r1
 80068aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6919      	ldr	r1, [r3, #16]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689a      	ldr	r2, [r3, #8]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4618      	mov	r0, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4403      	add	r3, r0
 80068c4:	409a      	lsls	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b06      	cmp	r3, #6
 80068d4:	d824      	bhi.n	8006920 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	3b05      	subs	r3, #5
 80068e8:	221f      	movs	r2, #31
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43da      	mvns	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	400a      	ands	r2, r1
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	4618      	mov	r0, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	3b05      	subs	r3, #5
 8006912:	fa00 f203 	lsl.w	r2, r0, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	635a      	str	r2, [r3, #52]	; 0x34
 800691e:	e04c      	b.n	80069ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b0c      	cmp	r3, #12
 8006926:	d824      	bhi.n	8006972 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	3b23      	subs	r3, #35	; 0x23
 800693a:	221f      	movs	r2, #31
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	43da      	mvns	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	400a      	ands	r2, r1
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	4618      	mov	r0, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	4413      	add	r3, r2
 8006962:	3b23      	subs	r3, #35	; 0x23
 8006964:	fa00 f203 	lsl.w	r2, r0, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
 8006970:	e023      	b.n	80069ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	3b41      	subs	r3, #65	; 0x41
 8006984:	221f      	movs	r2, #31
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43da      	mvns	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	400a      	ands	r2, r1
 8006992:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4618      	mov	r0, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	3b41      	subs	r3, #65	; 0x41
 80069ae:	fa00 f203 	lsl.w	r2, r0, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069ba:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <HAL_ADC_ConfigChannel+0x234>)
 80069bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <HAL_ADC_ConfigChannel+0x238>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d109      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x1cc>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b12      	cmp	r3, #18
 80069ce:	d105      	bne.n	80069dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a19      	ldr	r2, [pc, #100]	; (8006a48 <HAL_ADC_ConfigChannel+0x238>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d123      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x21e>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b10      	cmp	r3, #16
 80069ec:	d003      	beq.n	80069f6 <HAL_ADC_ConfigChannel+0x1e6>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b11      	cmp	r3, #17
 80069f4:	d11b      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d111      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <HAL_ADC_ConfigChannel+0x23c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <HAL_ADC_ConfigChannel+0x240>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	0c9a      	lsrs	r2, r3, #18
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a20:	e002      	b.n	8006a28 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f9      	bne.n	8006a22 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	40012300 	.word	0x40012300
 8006a48:	40012000 	.word	0x40012000
 8006a4c:	20000010 	.word	0x20000010
 8006a50:	431bde83 	.word	0x431bde83

08006a54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a5c:	4b79      	ldr	r3, [pc, #484]	; (8006c44 <ADC_Init+0x1f0>)
 8006a5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6859      	ldr	r1, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	021a      	lsls	r2, r3, #8
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006aac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6859      	ldr	r1, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ace:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6899      	ldr	r1, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	4a58      	ldr	r2, [pc, #352]	; (8006c48 <ADC_Init+0x1f4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006afa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6899      	ldr	r1, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	e00f      	b.n	8006b52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0202 	bic.w	r2, r2, #2
 8006b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	7e1b      	ldrb	r3, [r3, #24]
 8006b6c:	005a      	lsls	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	3b01      	subs	r3, #1
 8006bac:	035a      	lsls	r2, r3, #13
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e007      	b.n	8006bc8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	051a      	lsls	r2, r3, #20
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c0a:	025a      	lsls	r2, r3, #9
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6899      	ldr	r1, [r3, #8]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	029a      	lsls	r2, r3, #10
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40012300 	.word	0x40012300
 8006c48:	0f000001 	.word	0x0f000001

08006c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e0ed      	b.n	8006e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fe fb9c 	bl	80053a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c80:	f7ff fd76 	bl	8006770 <HAL_GetTick>
 8006c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006c86:	e012      	b.n	8006cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c88:	f7ff fd72 	bl	8006770 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b0a      	cmp	r3, #10
 8006c94:	d90b      	bls.n	8006cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2205      	movs	r2, #5
 8006ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0c5      	b.n	8006e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0e5      	beq.n	8006c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0202 	bic.w	r2, r2, #2
 8006cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ccc:	f7ff fd50 	bl	8006770 <HAL_GetTick>
 8006cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cd2:	e012      	b.n	8006cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cd4:	f7ff fd4c 	bl	8006770 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d90b      	bls.n	8006cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e09f      	b.n	8006e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7e1b      	ldrb	r3, [r3, #24]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d108      	bne.n	8006d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e007      	b.n	8006d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	7e5b      	ldrb	r3, [r3, #25]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e007      	b.n	8006d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	7e9b      	ldrb	r3, [r3, #26]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d108      	bne.n	8006d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0220 	orr.w	r2, r2, #32
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e007      	b.n	8006d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0220 	bic.w	r2, r2, #32
 8006d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7edb      	ldrb	r3, [r3, #27]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d108      	bne.n	8006da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0210 	bic.w	r2, r2, #16
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e007      	b.n	8006db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0210 	orr.w	r2, r2, #16
 8006dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	7f1b      	ldrb	r3, [r3, #28]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d108      	bne.n	8006dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e007      	b.n	8006dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0208 	bic.w	r2, r2, #8
 8006dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7f5b      	ldrb	r3, [r3, #29]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d108      	bne.n	8006df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0204 	orr.w	r2, r2, #4
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	e007      	b.n	8006e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0204 	bic.w	r2, r2, #4
 8006e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	ea42 0103 	orr.w	r1, r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e5c:	7cfb      	ldrb	r3, [r7, #19]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d003      	beq.n	8006e6a <HAL_CAN_ConfigFilter+0x26>
 8006e62:	7cfb      	ldrb	r3, [r7, #19]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f040 80be 	bne.w	8006fe6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006e6a:	4b65      	ldr	r3, [pc, #404]	; (8007000 <HAL_CAN_ConfigFilter+0x1bc>)
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e74:	f043 0201 	orr.w	r2, r3, #1
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	2201      	movs	r2, #1
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	401a      	ands	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d123      	bne.n	8006f14 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006eee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3248      	adds	r2, #72	; 0x48
 8006ef4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f0a:	6979      	ldr	r1, [r7, #20]
 8006f0c:	3348      	adds	r3, #72	; 0x48
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	440b      	add	r3, r1
 8006f12:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d122      	bne.n	8006f62 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	431a      	orrs	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006f3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	3248      	adds	r2, #72	; 0x48
 8006f42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f58:	6979      	ldr	r1, [r7, #20]
 8006f5a:	3348      	adds	r3, #72	; 0x48
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	401a      	ands	r2, r3
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006f7c:	e007      	b.n	8006f8e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006fa8:	e007      	b.n	8006fba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d107      	bne.n	8006fd2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fd8:	f023 0201 	bic.w	r2, r3, #1
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e006      	b.n	8006ff4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
  }
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40006400 	.word	0x40006400

08007004 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d12e      	bne.n	8007076 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007030:	f7ff fb9e 	bl	8006770 <HAL_GetTick>
 8007034:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007036:	e012      	b.n	800705e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007038:	f7ff fb9a 	bl	8006770 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b0a      	cmp	r3, #10
 8007044:	d90b      	bls.n	800705e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2205      	movs	r2, #5
 8007056:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e012      	b.n	8007084 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e006      	b.n	8007084 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800708c:	b480      	push	{r7}
 800708e:	b089      	sub	sp, #36	; 0x24
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80070aa:	7ffb      	ldrb	r3, [r7, #31]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d003      	beq.n	80070b8 <HAL_CAN_AddTxMessage+0x2c>
 80070b0:	7ffb      	ldrb	r3, [r7, #31]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	f040 80b8 	bne.w	8007228 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80a0 	beq.w	8007218 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d907      	bls.n	80070f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e09e      	b.n	8007236 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80070f8:	2201      	movs	r2, #1
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	409a      	lsls	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10d      	bne.n	8007126 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	6809      	ldr	r1, [r1, #0]
 8007118:	431a      	orrs	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	3318      	adds	r3, #24
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	440b      	add	r3, r1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	e00f      	b.n	8007146 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007130:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800713a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	3318      	adds	r3, #24
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	440b      	add	r3, r1
 8007144:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6819      	ldr	r1, [r3, #0]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3318      	adds	r3, #24
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	440b      	add	r3, r1
 8007156:	3304      	adds	r3, #4
 8007158:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	7d1b      	ldrb	r3, [r3, #20]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d111      	bne.n	8007186 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	3318      	adds	r3, #24
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	6811      	ldr	r1, [r2, #0]
 8007176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3318      	adds	r3, #24
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	440b      	add	r3, r1
 8007182:	3304      	adds	r3, #4
 8007184:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3307      	adds	r3, #7
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	061a      	lsls	r2, r3, #24
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3306      	adds	r3, #6
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3305      	adds	r3, #5
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	4313      	orrs	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	3204      	adds	r2, #4
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	4610      	mov	r0, r2
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	ea43 0200 	orr.w	r2, r3, r0
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	440b      	add	r3, r1
 80071b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80071bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3303      	adds	r3, #3
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	061a      	lsls	r2, r3, #24
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3302      	adds	r3, #2
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3301      	adds	r3, #1
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	4313      	orrs	r3, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	4610      	mov	r0, r2
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6811      	ldr	r1, [r2, #0]
 80071e4:	ea43 0200 	orr.w	r2, r3, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80071f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	3318      	adds	r3, #24
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	4413      	add	r3, r2
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	f043 0201 	orr.w	r2, r3, #1
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	3318      	adds	r3, #24
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	440b      	add	r3, r1
 8007212:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	e00e      	b.n	8007236 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e006      	b.n	8007236 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
  }
}
 8007236:	4618      	mov	r0, r3
 8007238:	3724      	adds	r7, #36	; 0x24
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007254:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d002      	beq.n	8007262 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d11d      	bne.n	800729e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3301      	adds	r3, #1
 8007274:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d002      	beq.n	80072ca <HAL_CAN_ActivateNotification+0x1e>
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d109      	bne.n	80072de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6959      	ldr	r1, [r3, #20]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e006      	b.n	80072ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
  }
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007300:	2300      	movs	r3, #0
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d07c      	beq.n	8007438 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d023      	beq.n	8007390 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2201      	movs	r2, #1
 800734e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f983 	bl	8007666 <HAL_CAN_TxMailbox0CompleteCallback>
 8007360:	e016      	b.n	8007390 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
 8007374:	e00c      	b.n	8007390 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
 8007388:	e002      	b.n	8007390 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f989 	bl	80076a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d024      	beq.n	80073e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f963 	bl	800767a <HAL_CAN_TxMailbox1CompleteCallback>
 80073b4:	e016      	b.n	80073e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
 80073c8:	e00c      	b.n	80073e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d004      	beq.n	80073de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	e002      	b.n	80073e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f969 	bl	80076b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d024      	beq.n	8007438 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f943 	bl	800768e <HAL_CAN_TxMailbox2CompleteCallback>
 8007408:	e016      	b.n	8007438 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
 800741c:	e00c      	b.n	8007438 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800742e:	627b      	str	r3, [r7, #36]	; 0x24
 8007430:	e002      	b.n	8007438 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f949 	bl	80076ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00c      	beq.n	800745c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007452:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2210      	movs	r2, #16
 800745a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00b      	beq.n	800747e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2208      	movs	r2, #8
 8007476:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f93a 	bl	80076f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d009      	beq.n	800749c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f003 0303 	and.w	r3, r3, #3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f921 	bl	80076de <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00c      	beq.n	80074c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2210      	movs	r2, #16
 80074be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2208      	movs	r2, #8
 80074da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f91c 	bl	800771a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f903 	bl	8007706 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b00      	cmp	r3, #0
 8007512:	d006      	beq.n	8007522 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2210      	movs	r2, #16
 800751a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f906 	bl	800772e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d006      	beq.n	8007544 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2208      	movs	r2, #8
 800753c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8ff 	bl	8007742 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d07b      	beq.n	8007646 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d072      	beq.n	800763e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	f043 0302 	orr.w	r3, r3, #2
 800758e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	f043 0304 	orr.w	r3, r3, #4
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d043      	beq.n	800763e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d03e      	beq.n	800763e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075c6:	2b60      	cmp	r3, #96	; 0x60
 80075c8:	d02b      	beq.n	8007622 <HAL_CAN_IRQHandler+0x32a>
 80075ca:	2b60      	cmp	r3, #96	; 0x60
 80075cc:	d82e      	bhi.n	800762c <HAL_CAN_IRQHandler+0x334>
 80075ce:	2b50      	cmp	r3, #80	; 0x50
 80075d0:	d022      	beq.n	8007618 <HAL_CAN_IRQHandler+0x320>
 80075d2:	2b50      	cmp	r3, #80	; 0x50
 80075d4:	d82a      	bhi.n	800762c <HAL_CAN_IRQHandler+0x334>
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d019      	beq.n	800760e <HAL_CAN_IRQHandler+0x316>
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d826      	bhi.n	800762c <HAL_CAN_IRQHandler+0x334>
 80075de:	2b30      	cmp	r3, #48	; 0x30
 80075e0:	d010      	beq.n	8007604 <HAL_CAN_IRQHandler+0x30c>
 80075e2:	2b30      	cmp	r3, #48	; 0x30
 80075e4:	d822      	bhi.n	800762c <HAL_CAN_IRQHandler+0x334>
 80075e6:	2b10      	cmp	r3, #16
 80075e8:	d002      	beq.n	80075f0 <HAL_CAN_IRQHandler+0x2f8>
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d005      	beq.n	80075fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80075ee:	e01d      	b.n	800762c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	f043 0308 	orr.w	r3, r3, #8
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80075f8:	e019      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f043 0310 	orr.w	r3, r3, #16
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007602:	e014      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	f043 0320 	orr.w	r3, r3, #32
 800760a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800760c:	e00f      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007616:	e00a      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007620:	e005      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800762a:	e000      	b.n	800762e <HAL_CAN_IRQHandler+0x336>
            break;
 800762c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800763c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2204      	movs	r2, #4
 8007644:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f87c 	bl	8007756 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800765e:	bf00      	nop
 8007660:	3728      	adds	r7, #40	; 0x28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
	...

0800776c <__NVIC_SetPriorityGrouping>:
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800777c:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <__NVIC_SetPriorityGrouping+0x44>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007788:	4013      	ands	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800779e:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <__NVIC_SetPriorityGrouping+0x44>)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	60d3      	str	r3, [r2, #12]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	e000ed00 	.word	0xe000ed00

080077b4 <__NVIC_GetPriorityGrouping>:
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <__NVIC_GetPriorityGrouping+0x18>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	f003 0307 	and.w	r3, r3, #7
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	e000ed00 	.word	0xe000ed00

080077d0 <__NVIC_EnableIRQ>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	db0b      	blt.n	80077fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	f003 021f 	and.w	r2, r3, #31
 80077e8:	4907      	ldr	r1, [pc, #28]	; (8007808 <__NVIC_EnableIRQ+0x38>)
 80077ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	2001      	movs	r0, #1
 80077f2:	fa00 f202 	lsl.w	r2, r0, r2
 80077f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	e000e100 	.word	0xe000e100

0800780c <__NVIC_SetPriority>:
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781c:	2b00      	cmp	r3, #0
 800781e:	db0a      	blt.n	8007836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	490c      	ldr	r1, [pc, #48]	; (8007858 <__NVIC_SetPriority+0x4c>)
 8007826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782a:	0112      	lsls	r2, r2, #4
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	440b      	add	r3, r1
 8007830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007834:	e00a      	b.n	800784c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4908      	ldr	r1, [pc, #32]	; (800785c <__NVIC_SetPriority+0x50>)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	3b04      	subs	r3, #4
 8007844:	0112      	lsls	r2, r2, #4
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	440b      	add	r3, r1
 800784a:	761a      	strb	r2, [r3, #24]
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	e000e100 	.word	0xe000e100
 800785c:	e000ed00 	.word	0xe000ed00

08007860 <NVIC_EncodePriority>:
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f1c3 0307 	rsb	r3, r3, #7
 800787a:	2b04      	cmp	r3, #4
 800787c:	bf28      	it	cs
 800787e:	2304      	movcs	r3, #4
 8007880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	3304      	adds	r3, #4
 8007886:	2b06      	cmp	r3, #6
 8007888:	d902      	bls.n	8007890 <NVIC_EncodePriority+0x30>
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	3b03      	subs	r3, #3
 800788e:	e000      	b.n	8007892 <NVIC_EncodePriority+0x32>
 8007890:	2300      	movs	r3, #0
 8007892:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43da      	mvns	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	401a      	ands	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078a8:	f04f 31ff 	mov.w	r1, #4294967295
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	43d9      	mvns	r1, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078b8:	4313      	orrs	r3, r2
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3724      	adds	r7, #36	; 0x24
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff ff4c 	bl	800776c <__NVIC_SetPriorityGrouping>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80078ee:	f7ff ff61 	bl	80077b4 <__NVIC_GetPriorityGrouping>
 80078f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68b9      	ldr	r1, [r7, #8]
 80078f8:	6978      	ldr	r0, [r7, #20]
 80078fa:	f7ff ffb1 	bl	8007860 <NVIC_EncodePriority>
 80078fe:	4602      	mov	r2, r0
 8007900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ff80 	bl	800780c <__NVIC_SetPriority>
}
 800790c:	bf00      	nop
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800791e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff ff54 	bl	80077d0 <__NVIC_EnableIRQ>
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e00e      	b.n	8007960 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fd fe0c 	bl	8005570 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007974:	f7fe fefc 	bl	8006770 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e099      	b.n	8007ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0201 	bic.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079a4:	e00f      	b.n	80079c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079a6:	f7fe fee3 	bl	8006770 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	d908      	bls.n	80079c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2203      	movs	r2, #3
 80079be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e078      	b.n	8007ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e8      	bne.n	80079a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	4b38      	ldr	r3, [pc, #224]	; (8007ac0 <HAL_DMA_Init+0x158>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80079f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d107      	bne.n	8007a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d117      	bne.n	8007a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00e      	beq.n	8007a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9e9 	bl	8007e44 <DMA_CheckFifoParam>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d008      	beq.n	8007a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2240      	movs	r2, #64	; 0x40
 8007a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007a86:	2301      	movs	r3, #1
 8007a88:	e016      	b.n	8007ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9a0 	bl	8007dd8 <DMA_CalcBaseAndBitshift>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa0:	223f      	movs	r2, #63	; 0x3f
 8007aa2:	409a      	lsls	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	f010803f 	.word	0xf010803f

08007ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ad0:	4b8e      	ldr	r3, [pc, #568]	; (8007d0c <HAL_DMA_IRQHandler+0x248>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a8e      	ldr	r2, [pc, #568]	; (8007d10 <HAL_DMA_IRQHandler+0x24c>)
 8007ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8007ada:	0a9b      	lsrs	r3, r3, #10
 8007adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	2208      	movs	r2, #8
 8007af0:	409a      	lsls	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d01a      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d013      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0204 	bic.w	r2, r2, #4
 8007b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	f043 0201 	orr.w	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b34:	2201      	movs	r2, #1
 8007b36:	409a      	lsls	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d012      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b52:	2201      	movs	r2, #1
 8007b54:	409a      	lsls	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0202 	orr.w	r2, r3, #2
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	409a      	lsls	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	2204      	movs	r2, #4
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b94:	f043 0204 	orr.w	r2, r3, #4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d043      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d03c      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	409a      	lsls	r2, r3
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d018      	beq.n	8007c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d024      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
 8007bf2:	e01f      	b.n	8007c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	e016      	b.n	8007c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d107      	bne.n	8007c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0208 	bic.w	r2, r2, #8
 8007c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c38:	2220      	movs	r2, #32
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 808f 	beq.w	8007d64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8087 	beq.w	8007d64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	409a      	lsls	r2, r3
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b05      	cmp	r3, #5
 8007c6c:	d136      	bne.n	8007cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0216 	bic.w	r2, r2, #22
 8007c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695a      	ldr	r2, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <HAL_DMA_IRQHandler+0x1da>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0208 	bic.w	r2, r2, #8
 8007cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb2:	223f      	movs	r2, #63	; 0x3f
 8007cb4:	409a      	lsls	r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d07e      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
        }
        return;
 8007cda:	e079      	b.n	8007dd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01d      	beq.n	8007d26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d031      	beq.n	8007d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
 8007d08:	e02c      	b.n	8007d64 <HAL_DMA_IRQHandler+0x2a0>
 8007d0a:	bf00      	nop
 8007d0c:	20000010 	.word	0x20000010
 8007d10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d023      	beq.n	8007d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
 8007d24:	e01e      	b.n	8007d64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10f      	bne.n	8007d54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0210 	bic.w	r2, r2, #16
 8007d42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d032      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d022      	beq.n	8007dbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2205      	movs	r2, #5
 8007d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0201 	bic.w	r2, r2, #1
 8007d8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60bb      	str	r3, [r7, #8]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d307      	bcc.n	8007dac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1f2      	bne.n	8007d90 <HAL_DMA_IRQHandler+0x2cc>
 8007daa:	e000      	b.n	8007dae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007dac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	4798      	blx	r3
 8007dce:	e000      	b.n	8007dd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007dd0:	bf00      	nop
    }
  }
}
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	3b10      	subs	r3, #16
 8007de8:	4a14      	ldr	r2, [pc, #80]	; (8007e3c <DMA_CalcBaseAndBitshift+0x64>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	091b      	lsrs	r3, r3, #4
 8007df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007df2:	4a13      	ldr	r2, [pc, #76]	; (8007e40 <DMA_CalcBaseAndBitshift+0x68>)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4413      	add	r3, r2
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d909      	bls.n	8007e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	1d1a      	adds	r2, r3, #4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	659a      	str	r2, [r3, #88]	; 0x58
 8007e18:	e007      	b.n	8007e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e22:	f023 0303 	bic.w	r3, r3, #3
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	aaaaaaab 	.word	0xaaaaaaab
 8007e40:	0800fdbc 	.word	0x0800fdbc

08007e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11f      	bne.n	8007e9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d856      	bhi.n	8007f12 <DMA_CheckFifoParam+0xce>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <DMA_CheckFifoParam+0x28>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e8f 	.word	0x08007e8f
 8007e74:	08007e7d 	.word	0x08007e7d
 8007e78:	08007f13 	.word	0x08007f13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d046      	beq.n	8007f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e8c:	e043      	b.n	8007f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e96:	d140      	bne.n	8007f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e9c:	e03d      	b.n	8007f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea6:	d121      	bne.n	8007eec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d837      	bhi.n	8007f1e <DMA_CheckFifoParam+0xda>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <DMA_CheckFifoParam+0x70>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ec5 	.word	0x08007ec5
 8007eb8:	08007ecb 	.word	0x08007ecb
 8007ebc:	08007ec5 	.word	0x08007ec5
 8007ec0:	08007edd 	.word	0x08007edd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec8:	e030      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d025      	beq.n	8007f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007eda:	e022      	b.n	8007f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ee4:	d11f      	bne.n	8007f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007eea:	e01c      	b.n	8007f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d903      	bls.n	8007efa <DMA_CheckFifoParam+0xb6>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d003      	beq.n	8007f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ef8:	e018      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]
      break;
 8007efe:	e015      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00e      	beq.n	8007f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e00b      	b.n	8007f2a <DMA_CheckFifoParam+0xe6>
      break;
 8007f12:	bf00      	nop
 8007f14:	e00a      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;
 8007f16:	bf00      	nop
 8007f18:	e008      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e006      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e004      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;
 8007f22:	bf00      	nop
 8007f24:	e002      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8007f26:	bf00      	nop
 8007f28:	e000      	b.n	8007f2c <DMA_CheckFifoParam+0xe8>
      break;
 8007f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	e16b      	b.n	8008230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f58:	2201      	movs	r2, #1
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	f040 815a 	bne.w	800822a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d005      	beq.n	8007f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d130      	bne.n	8007ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	2203      	movs	r2, #3
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	f003 0201 	and.w	r2, r3, #1
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d017      	beq.n	800802c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	2203      	movs	r2, #3
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f003 0303 	and.w	r3, r3, #3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d123      	bne.n	8008080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	08da      	lsrs	r2, r3, #3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3208      	adds	r2, #8
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	220f      	movs	r2, #15
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	43db      	mvns	r3, r3
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4013      	ands	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4313      	orrs	r3, r2
 8008070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	08da      	lsrs	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3208      	adds	r2, #8
 800807a:	69b9      	ldr	r1, [r7, #24]
 800807c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	2203      	movs	r2, #3
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	43db      	mvns	r3, r3
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	4013      	ands	r3, r2
 8008096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 0203 	and.w	r2, r3, #3
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	fa02 f303 	lsl.w	r3, r2, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80b4 	beq.w	800822a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
 80080c6:	4b60      	ldr	r3, [pc, #384]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ca:	4a5f      	ldr	r2, [pc, #380]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080d0:	6453      	str	r3, [r2, #68]	; 0x44
 80080d2:	4b5d      	ldr	r3, [pc, #372]	; (8008248 <HAL_GPIO_Init+0x30c>)
 80080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080de:	4a5b      	ldr	r2, [pc, #364]	; (800824c <HAL_GPIO_Init+0x310>)
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	089b      	lsrs	r3, r3, #2
 80080e4:	3302      	adds	r3, #2
 80080e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	220f      	movs	r2, #15
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a52      	ldr	r2, [pc, #328]	; (8008250 <HAL_GPIO_Init+0x314>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d02b      	beq.n	8008162 <HAL_GPIO_Init+0x226>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a51      	ldr	r2, [pc, #324]	; (8008254 <HAL_GPIO_Init+0x318>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d025      	beq.n	800815e <HAL_GPIO_Init+0x222>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a50      	ldr	r2, [pc, #320]	; (8008258 <HAL_GPIO_Init+0x31c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01f      	beq.n	800815a <HAL_GPIO_Init+0x21e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a4f      	ldr	r2, [pc, #316]	; (800825c <HAL_GPIO_Init+0x320>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d019      	beq.n	8008156 <HAL_GPIO_Init+0x21a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a4e      	ldr	r2, [pc, #312]	; (8008260 <HAL_GPIO_Init+0x324>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_GPIO_Init+0x216>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a4d      	ldr	r2, [pc, #308]	; (8008264 <HAL_GPIO_Init+0x328>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00d      	beq.n	800814e <HAL_GPIO_Init+0x212>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a4c      	ldr	r2, [pc, #304]	; (8008268 <HAL_GPIO_Init+0x32c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <HAL_GPIO_Init+0x20e>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a4b      	ldr	r2, [pc, #300]	; (800826c <HAL_GPIO_Init+0x330>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d101      	bne.n	8008146 <HAL_GPIO_Init+0x20a>
 8008142:	2307      	movs	r3, #7
 8008144:	e00e      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008146:	2308      	movs	r3, #8
 8008148:	e00c      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800814a:	2306      	movs	r3, #6
 800814c:	e00a      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800814e:	2305      	movs	r3, #5
 8008150:	e008      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008152:	2304      	movs	r3, #4
 8008154:	e006      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008156:	2303      	movs	r3, #3
 8008158:	e004      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800815a:	2302      	movs	r3, #2
 800815c:	e002      	b.n	8008164 <HAL_GPIO_Init+0x228>
 800815e:	2301      	movs	r3, #1
 8008160:	e000      	b.n	8008164 <HAL_GPIO_Init+0x228>
 8008162:	2300      	movs	r3, #0
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	f002 0203 	and.w	r2, r2, #3
 800816a:	0092      	lsls	r2, r2, #2
 800816c:	4093      	lsls	r3, r2
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4313      	orrs	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008174:	4935      	ldr	r1, [pc, #212]	; (800824c <HAL_GPIO_Init+0x310>)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	089b      	lsrs	r3, r3, #2
 800817a:	3302      	adds	r3, #2
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008182:	4b3b      	ldr	r3, [pc, #236]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	43db      	mvns	r3, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80081a6:	4a32      	ldr	r2, [pc, #200]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081ac:	4b30      	ldr	r3, [pc, #192]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	4013      	ands	r3, r2
 80081ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081d0:	4a27      	ldr	r2, [pc, #156]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80081d6:	4b26      	ldr	r3, [pc, #152]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	43db      	mvns	r3, r3
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081fa:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_GPIO_Init+0x334>)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008200:	4b1b      	ldr	r3, [pc, #108]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	43db      	mvns	r3, r3
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	4013      	ands	r3, r2
 800820e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008224:	4a12      	ldr	r2, [pc, #72]	; (8008270 <HAL_GPIO_Init+0x334>)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	3301      	adds	r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	f67f ae90 	bls.w	8007f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	3724      	adds	r7, #36	; 0x24
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40023800 	.word	0x40023800
 800824c:	40013800 	.word	0x40013800
 8008250:	40020000 	.word	0x40020000
 8008254:	40020400 	.word	0x40020400
 8008258:	40020800 	.word	0x40020800
 800825c:	40020c00 	.word	0x40020c00
 8008260:	40021000 	.word	0x40021000
 8008264:	40021400 	.word	0x40021400
 8008268:	40021800 	.word	0x40021800
 800826c:	40021c00 	.word	0x40021c00
 8008270:	40013c00 	.word	0x40013c00

08008274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	807b      	strh	r3, [r7, #2]
 8008280:	4613      	mov	r3, r2
 8008282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008284:	787b      	ldrb	r3, [r7, #1]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800828a:	887a      	ldrh	r2, [r7, #2]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008290:	e003      	b.n	800829a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	041a      	lsls	r2, r3, #16
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	619a      	str	r2, [r3, #24]
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082b4:	695a      	ldr	r2, [r3, #20]
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d006      	beq.n	80082cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082be:	4a05      	ldr	r2, [pc, #20]	; (80082d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fc fd93 	bl	8004df2 <HAL_GPIO_EXTI_Callback>
  }
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40013c00 	.word	0x40013c00

080082d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e12b      	b.n	8008542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fd fac8 	bl	8005894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2224      	movs	r2, #36	; 0x24
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0201 	bic.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800832a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800833a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800833c:	f000 fd7e 	bl	8008e3c <HAL_RCC_GetPCLK1Freq>
 8008340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4a81      	ldr	r2, [pc, #516]	; (800854c <HAL_I2C_Init+0x274>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d807      	bhi.n	800835c <HAL_I2C_Init+0x84>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4a80      	ldr	r2, [pc, #512]	; (8008550 <HAL_I2C_Init+0x278>)
 8008350:	4293      	cmp	r3, r2
 8008352:	bf94      	ite	ls
 8008354:	2301      	movls	r3, #1
 8008356:	2300      	movhi	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	e006      	b.n	800836a <HAL_I2C_Init+0x92>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a7d      	ldr	r2, [pc, #500]	; (8008554 <HAL_I2C_Init+0x27c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	bf94      	ite	ls
 8008364:	2301      	movls	r3, #1
 8008366:	2300      	movhi	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e0e7      	b.n	8008542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4a78      	ldr	r2, [pc, #480]	; (8008558 <HAL_I2C_Init+0x280>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	0c9b      	lsrs	r3, r3, #18
 800837c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a6a      	ldr	r2, [pc, #424]	; (800854c <HAL_I2C_Init+0x274>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d802      	bhi.n	80083ac <HAL_I2C_Init+0xd4>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3301      	adds	r3, #1
 80083aa:	e009      	b.n	80083c0 <HAL_I2C_Init+0xe8>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80083b2:	fb02 f303 	mul.w	r3, r2, r3
 80083b6:	4a69      	ldr	r2, [pc, #420]	; (800855c <HAL_I2C_Init+0x284>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	099b      	lsrs	r3, r3, #6
 80083be:	3301      	adds	r3, #1
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	430b      	orrs	r3, r1
 80083c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80083d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	495c      	ldr	r1, [pc, #368]	; (800854c <HAL_I2C_Init+0x274>)
 80083dc:	428b      	cmp	r3, r1
 80083de:	d819      	bhi.n	8008414 <HAL_I2C_Init+0x13c>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	1e59      	subs	r1, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80083ee:	1c59      	adds	r1, r3, #1
 80083f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083f4:	400b      	ands	r3, r1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_I2C_Init+0x138>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1e59      	subs	r1, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	fbb1 f3f3 	udiv	r3, r1, r3
 8008408:	3301      	adds	r3, #1
 800840a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800840e:	e051      	b.n	80084b4 <HAL_I2C_Init+0x1dc>
 8008410:	2304      	movs	r3, #4
 8008412:	e04f      	b.n	80084b4 <HAL_I2C_Init+0x1dc>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d111      	bne.n	8008440 <HAL_I2C_Init+0x168>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	1e58      	subs	r0, r3, #1
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6859      	ldr	r1, [r3, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	440b      	add	r3, r1
 800842a:	fbb0 f3f3 	udiv	r3, r0, r3
 800842e:	3301      	adds	r3, #1
 8008430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	e012      	b.n	8008466 <HAL_I2C_Init+0x18e>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	1e58      	subs	r0, r3, #1
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6859      	ldr	r1, [r3, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	0099      	lsls	r1, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	fbb0 f3f3 	udiv	r3, r0, r3
 8008456:	3301      	adds	r3, #1
 8008458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_I2C_Init+0x196>
 800846a:	2301      	movs	r3, #1
 800846c:	e022      	b.n	80084b4 <HAL_I2C_Init+0x1dc>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10e      	bne.n	8008494 <HAL_I2C_Init+0x1bc>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1e58      	subs	r0, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6859      	ldr	r1, [r3, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	440b      	add	r3, r1
 8008484:	fbb0 f3f3 	udiv	r3, r0, r3
 8008488:	3301      	adds	r3, #1
 800848a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800848e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008492:	e00f      	b.n	80084b4 <HAL_I2C_Init+0x1dc>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	1e58      	subs	r0, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6859      	ldr	r1, [r3, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	0099      	lsls	r1, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80084aa:	3301      	adds	r3, #1
 80084ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	6809      	ldr	r1, [r1, #0]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69da      	ldr	r2, [r3, #28]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80084e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6911      	ldr	r1, [r2, #16]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68d2      	ldr	r2, [r2, #12]
 80084ee:	4311      	orrs	r1, r2
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	430b      	orrs	r3, r1
 80084f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0201 	orr.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	000186a0 	.word	0x000186a0
 8008550:	001e847f 	.word	0x001e847f
 8008554:	003d08ff 	.word	0x003d08ff
 8008558:	431bde83 	.word	0x431bde83
 800855c:	10624dd3 	.word	0x10624dd3

08008560 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e267      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d075      	beq.n	800866a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800857e:	4b88      	ldr	r3, [pc, #544]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 030c 	and.w	r3, r3, #12
 8008586:	2b04      	cmp	r3, #4
 8008588:	d00c      	beq.n	80085a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800858a:	4b85      	ldr	r3, [pc, #532]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008592:	2b08      	cmp	r3, #8
 8008594:	d112      	bne.n	80085bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008596:	4b82      	ldr	r3, [pc, #520]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800859e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a2:	d10b      	bne.n	80085bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a4:	4b7e      	ldr	r3, [pc, #504]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d05b      	beq.n	8008668 <HAL_RCC_OscConfig+0x108>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d157      	bne.n	8008668 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e242      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c4:	d106      	bne.n	80085d4 <HAL_RCC_OscConfig+0x74>
 80085c6:	4b76      	ldr	r3, [pc, #472]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a75      	ldr	r2, [pc, #468]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	e01d      	b.n	8008610 <HAL_RCC_OscConfig+0xb0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085dc:	d10c      	bne.n	80085f8 <HAL_RCC_OscConfig+0x98>
 80085de:	4b70      	ldr	r3, [pc, #448]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a6f      	ldr	r2, [pc, #444]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4b6d      	ldr	r3, [pc, #436]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a6c      	ldr	r2, [pc, #432]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	e00b      	b.n	8008610 <HAL_RCC_OscConfig+0xb0>
 80085f8:	4b69      	ldr	r3, [pc, #420]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a68      	ldr	r2, [pc, #416]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80085fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	4b66      	ldr	r3, [pc, #408]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a65      	ldr	r2, [pc, #404]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 800860a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800860e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d013      	beq.n	8008640 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008618:	f7fe f8aa 	bl	8006770 <HAL_GetTick>
 800861c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800861e:	e008      	b.n	8008632 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008620:	f7fe f8a6 	bl	8006770 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	2b64      	cmp	r3, #100	; 0x64
 800862c:	d901      	bls.n	8008632 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e207      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008632:	4b5b      	ldr	r3, [pc, #364]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0f0      	beq.n	8008620 <HAL_RCC_OscConfig+0xc0>
 800863e:	e014      	b.n	800866a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008640:	f7fe f896 	bl	8006770 <HAL_GetTick>
 8008644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008648:	f7fe f892 	bl	8006770 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b64      	cmp	r3, #100	; 0x64
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e1f3      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800865a:	4b51      	ldr	r3, [pc, #324]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1f0      	bne.n	8008648 <HAL_RCC_OscConfig+0xe8>
 8008666:	e000      	b.n	800866a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d063      	beq.n	800873e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008676:	4b4a      	ldr	r3, [pc, #296]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 030c 	and.w	r3, r3, #12
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008682:	4b47      	ldr	r3, [pc, #284]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800868a:	2b08      	cmp	r3, #8
 800868c:	d11c      	bne.n	80086c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800868e:	4b44      	ldr	r3, [pc, #272]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d116      	bne.n	80086c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800869a:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_RCC_OscConfig+0x152>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d001      	beq.n	80086b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e1c7      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086b2:	4b3b      	ldr	r3, [pc, #236]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4937      	ldr	r1, [pc, #220]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086c6:	e03a      	b.n	800873e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d020      	beq.n	8008712 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <HAL_RCC_OscConfig+0x244>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d6:	f7fe f84b 	bl	8006770 <HAL_GetTick>
 80086da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086de:	f7fe f847 	bl	8006770 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e1a8      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f0:	4b2b      	ldr	r3, [pc, #172]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f0      	beq.n	80086de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086fc:	4b28      	ldr	r3, [pc, #160]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4925      	ldr	r1, [pc, #148]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]
 8008710:	e015      	b.n	800873e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <HAL_RCC_OscConfig+0x244>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008718:	f7fe f82a 	bl	8006770 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800871e:	e008      	b.n	8008732 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008720:	f7fe f826 	bl	8006770 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	2b02      	cmp	r3, #2
 800872c:	d901      	bls.n	8008732 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e187      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008732:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1f0      	bne.n	8008720 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0308 	and.w	r3, r3, #8
 8008746:	2b00      	cmp	r3, #0
 8008748:	d036      	beq.n	80087b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d016      	beq.n	8008780 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <HAL_RCC_OscConfig+0x248>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008758:	f7fe f80a 	bl	8006770 <HAL_GetTick>
 800875c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800875e:	e008      	b.n	8008772 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008760:	f7fe f806 	bl	8006770 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b02      	cmp	r3, #2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e167      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008772:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <HAL_RCC_OscConfig+0x240>)
 8008774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f0      	beq.n	8008760 <HAL_RCC_OscConfig+0x200>
 800877e:	e01b      	b.n	80087b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008780:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <HAL_RCC_OscConfig+0x248>)
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008786:	f7fd fff3 	bl	8006770 <HAL_GetTick>
 800878a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800878c:	e00e      	b.n	80087ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800878e:	f7fd ffef 	bl	8006770 <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d907      	bls.n	80087ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e150      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
 80087a0:	40023800 	.word	0x40023800
 80087a4:	42470000 	.word	0x42470000
 80087a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087ac:	4b88      	ldr	r3, [pc, #544]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80087ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1ea      	bne.n	800878e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8097 	beq.w	80088f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ca:	4b81      	ldr	r3, [pc, #516]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10f      	bne.n	80087f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]
 80087da:	4b7d      	ldr	r3, [pc, #500]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	4a7c      	ldr	r2, [pc, #496]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80087e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e4:	6413      	str	r3, [r2, #64]	; 0x40
 80087e6:	4b7a      	ldr	r3, [pc, #488]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ee:	60bb      	str	r3, [r7, #8]
 80087f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087f2:	2301      	movs	r3, #1
 80087f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f6:	4b77      	ldr	r3, [pc, #476]	; (80089d4 <HAL_RCC_OscConfig+0x474>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d118      	bne.n	8008834 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008802:	4b74      	ldr	r3, [pc, #464]	; (80089d4 <HAL_RCC_OscConfig+0x474>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a73      	ldr	r2, [pc, #460]	; (80089d4 <HAL_RCC_OscConfig+0x474>)
 8008808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800880c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800880e:	f7fd ffaf 	bl	8006770 <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008816:	f7fd ffab 	bl	8006770 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e10c      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008828:	4b6a      	ldr	r3, [pc, #424]	; (80089d4 <HAL_RCC_OscConfig+0x474>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f0      	beq.n	8008816 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d106      	bne.n	800884a <HAL_RCC_OscConfig+0x2ea>
 800883c:	4b64      	ldr	r3, [pc, #400]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	4a63      	ldr	r2, [pc, #396]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	6713      	str	r3, [r2, #112]	; 0x70
 8008848:	e01c      	b.n	8008884 <HAL_RCC_OscConfig+0x324>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b05      	cmp	r3, #5
 8008850:	d10c      	bne.n	800886c <HAL_RCC_OscConfig+0x30c>
 8008852:	4b5f      	ldr	r3, [pc, #380]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008856:	4a5e      	ldr	r2, [pc, #376]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008858:	f043 0304 	orr.w	r3, r3, #4
 800885c:	6713      	str	r3, [r2, #112]	; 0x70
 800885e:	4b5c      	ldr	r3, [pc, #368]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008862:	4a5b      	ldr	r2, [pc, #364]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	6713      	str	r3, [r2, #112]	; 0x70
 800886a:	e00b      	b.n	8008884 <HAL_RCC_OscConfig+0x324>
 800886c:	4b58      	ldr	r3, [pc, #352]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	4a57      	ldr	r2, [pc, #348]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	6713      	str	r3, [r2, #112]	; 0x70
 8008878:	4b55      	ldr	r3, [pc, #340]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 800887a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887c:	4a54      	ldr	r2, [pc, #336]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 800887e:	f023 0304 	bic.w	r3, r3, #4
 8008882:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d015      	beq.n	80088b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888c:	f7fd ff70 	bl	8006770 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008892:	e00a      	b.n	80088aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008894:	f7fd ff6c 	bl	8006770 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e0cb      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088aa:	4b49      	ldr	r3, [pc, #292]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80088ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ee      	beq.n	8008894 <HAL_RCC_OscConfig+0x334>
 80088b6:	e014      	b.n	80088e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088b8:	f7fd ff5a 	bl	8006770 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088be:	e00a      	b.n	80088d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088c0:	f7fd ff56 	bl	8006770 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e0b5      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088d6:	4b3e      	ldr	r3, [pc, #248]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80088d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1ee      	bne.n	80088c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d105      	bne.n	80088f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088e8:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	4a38      	ldr	r2, [pc, #224]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80088ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80a1 	beq.w	8008a40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088fe:	4b34      	ldr	r3, [pc, #208]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 030c 	and.w	r3, r3, #12
 8008906:	2b08      	cmp	r3, #8
 8008908:	d05c      	beq.n	80089c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d141      	bne.n	8008996 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008912:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <HAL_RCC_OscConfig+0x478>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008918:	f7fd ff2a 	bl	8006770 <HAL_GetTick>
 800891c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891e:	e008      	b.n	8008932 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008920:	f7fd ff26 	bl	8006770 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e087      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008932:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f0      	bne.n	8008920 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	69da      	ldr	r2, [r3, #28]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	019b      	lsls	r3, r3, #6
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	3b01      	subs	r3, #1
 8008958:	041b      	lsls	r3, r3, #16
 800895a:	431a      	orrs	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	061b      	lsls	r3, r3, #24
 8008962:	491b      	ldr	r1, [pc, #108]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 8008964:	4313      	orrs	r3, r2
 8008966:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008968:	4b1b      	ldr	r3, [pc, #108]	; (80089d8 <HAL_RCC_OscConfig+0x478>)
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896e:	f7fd feff 	bl	8006770 <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008976:	f7fd fefb 	bl	8006770 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e05c      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008988:	4b11      	ldr	r3, [pc, #68]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <HAL_RCC_OscConfig+0x416>
 8008994:	e054      	b.n	8008a40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <HAL_RCC_OscConfig+0x478>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899c:	f7fd fee8 	bl	8006770 <HAL_GetTick>
 80089a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a4:	f7fd fee4 	bl	8006770 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e045      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RCC_OscConfig+0x470>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f0      	bne.n	80089a4 <HAL_RCC_OscConfig+0x444>
 80089c2:	e03d      	b.n	8008a40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d107      	bne.n	80089dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e038      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
 80089d0:	40023800 	.word	0x40023800
 80089d4:	40007000 	.word	0x40007000
 80089d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089dc:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <HAL_RCC_OscConfig+0x4ec>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d028      	beq.n	8008a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d121      	bne.n	8008a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d11a      	bne.n	8008a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d111      	bne.n	8008a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	3b01      	subs	r3, #1
 8008a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d107      	bne.n	8008a3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d001      	beq.n	8008a40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	40023800 	.word	0x40023800

08008a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0cc      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a64:	4b68      	ldr	r3, [pc, #416]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d90c      	bls.n	8008a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a72:	4b65      	ldr	r3, [pc, #404]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a7a:	4b63      	ldr	r3, [pc, #396]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d001      	beq.n	8008a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e0b8      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d020      	beq.n	8008ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0304 	and.w	r3, r3, #4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008aa4:	4b59      	ldr	r3, [pc, #356]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4a58      	ldr	r2, [pc, #352]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008abc:	4b53      	ldr	r3, [pc, #332]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	4a52      	ldr	r2, [pc, #328]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ac8:	4b50      	ldr	r3, [pc, #320]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	494d      	ldr	r1, [pc, #308]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d044      	beq.n	8008b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d107      	bne.n	8008afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aee:	4b47      	ldr	r3, [pc, #284]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d119      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e07f      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d003      	beq.n	8008b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d107      	bne.n	8008b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b0e:	4b3f      	ldr	r3, [pc, #252]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e06f      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b1e:	4b3b      	ldr	r3, [pc, #236]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e067      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b2e:	4b37      	ldr	r3, [pc, #220]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 0203 	bic.w	r2, r3, #3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4934      	ldr	r1, [pc, #208]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b40:	f7fd fe16 	bl	8006770 <HAL_GetTick>
 8008b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b46:	e00a      	b.n	8008b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b48:	f7fd fe12 	bl	8006770 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e04f      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b5e:	4b2b      	ldr	r3, [pc, #172]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f003 020c 	and.w	r2, r3, #12
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d1eb      	bne.n	8008b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0307 	and.w	r3, r3, #7
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d20c      	bcs.n	8008b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b7e:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <HAL_RCC_ClockConfig+0x1b8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d001      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e032      	b.n	8008bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d008      	beq.n	8008bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ba4:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4916      	ldr	r1, [pc, #88]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0308 	and.w	r3, r3, #8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	490e      	ldr	r1, [pc, #56]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bd6:	f000 f821 	bl	8008c1c <HAL_RCC_GetSysClockFreq>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <HAL_RCC_ClockConfig+0x1bc>)
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	490a      	ldr	r1, [pc, #40]	; (8008c10 <HAL_RCC_ClockConfig+0x1c0>)
 8008be8:	5ccb      	ldrb	r3, [r1, r3]
 8008bea:	fa22 f303 	lsr.w	r3, r2, r3
 8008bee:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <HAL_RCC_ClockConfig+0x1c4>)
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <HAL_RCC_ClockConfig+0x1c8>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fd f824 	bl	8005c44 <HAL_InitTick>

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40023c00 	.word	0x40023c00
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	0800fda4 	.word	0x0800fda4
 8008c14:	20000010 	.word	0x20000010
 8008c18:	20000014 	.word	0x20000014

08008c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c20:	b094      	sub	sp, #80	; 0x50
 8008c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	647b      	str	r3, [r7, #68]	; 0x44
 8008c28:	2300      	movs	r3, #0
 8008c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c34:	4b79      	ldr	r3, [pc, #484]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 030c 	and.w	r3, r3, #12
 8008c3c:	2b08      	cmp	r3, #8
 8008c3e:	d00d      	beq.n	8008c5c <HAL_RCC_GetSysClockFreq+0x40>
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	f200 80e1 	bhi.w	8008e08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_RCC_GetSysClockFreq+0x34>
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d003      	beq.n	8008c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c4e:	e0db      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c50:	4b73      	ldr	r3, [pc, #460]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008c54:	e0db      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c56:	4b72      	ldr	r3, [pc, #456]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c5a:	e0d8      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c5c:	4b6f      	ldr	r3, [pc, #444]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c66:	4b6d      	ldr	r3, [pc, #436]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d063      	beq.n	8008d3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c72:	4b6a      	ldr	r3, [pc, #424]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	2200      	movs	r2, #0
 8008c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30
 8008c86:	2300      	movs	r3, #0
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f04f 0100 	mov.w	r1, #0
 8008c9a:	0159      	lsls	r1, r3, #5
 8008c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca0:	0150      	lsls	r0, r2, #5
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	1a51      	subs	r1, r2, r1
 8008caa:	6139      	str	r1, [r7, #16]
 8008cac:	4629      	mov	r1, r5
 8008cae:	eb63 0301 	sbc.w	r3, r3, r1
 8008cb2:	617b      	str	r3, [r7, #20]
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cc0:	4659      	mov	r1, fp
 8008cc2:	018b      	lsls	r3, r1, #6
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cca:	4651      	mov	r1, sl
 8008ccc:	018a      	lsls	r2, r1, #6
 8008cce:	4651      	mov	r1, sl
 8008cd0:	ebb2 0801 	subs.w	r8, r2, r1
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	eb63 0901 	sbc.w	r9, r3, r1
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ce6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cee:	4690      	mov	r8, r2
 8008cf0:	4699      	mov	r9, r3
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	eb18 0303 	adds.w	r3, r8, r3
 8008cf8:	60bb      	str	r3, [r7, #8]
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	eb49 0303 	adc.w	r3, r9, r3
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	f04f 0300 	mov.w	r3, #0
 8008d0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d0e:	4629      	mov	r1, r5
 8008d10:	028b      	lsls	r3, r1, #10
 8008d12:	4621      	mov	r1, r4
 8008d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d18:	4621      	mov	r1, r4
 8008d1a:	028a      	lsls	r2, r1, #10
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d22:	2200      	movs	r2, #0
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d2c:	f7f7 faa0 	bl	8000270 <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4613      	mov	r3, r2
 8008d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d38:	e058      	b.n	8008dec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d3a:	4b38      	ldr	r3, [pc, #224]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	099b      	lsrs	r3, r3, #6
 8008d40:	2200      	movs	r2, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	4611      	mov	r1, r2
 8008d46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d4a:	623b      	str	r3, [r7, #32]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d54:	4642      	mov	r2, r8
 8008d56:	464b      	mov	r3, r9
 8008d58:	f04f 0000 	mov.w	r0, #0
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	0159      	lsls	r1, r3, #5
 8008d62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d66:	0150      	lsls	r0, r2, #5
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d72:	4649      	mov	r1, r9
 8008d74:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d8c:	ebb2 040a 	subs.w	r4, r2, sl
 8008d90:	eb63 050b 	sbc.w	r5, r3, fp
 8008d94:	f04f 0200 	mov.w	r2, #0
 8008d98:	f04f 0300 	mov.w	r3, #0
 8008d9c:	00eb      	lsls	r3, r5, #3
 8008d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008da2:	00e2      	lsls	r2, r4, #3
 8008da4:	4614      	mov	r4, r2
 8008da6:	461d      	mov	r5, r3
 8008da8:	4643      	mov	r3, r8
 8008daa:	18e3      	adds	r3, r4, r3
 8008dac:	603b      	str	r3, [r7, #0]
 8008dae:	464b      	mov	r3, r9
 8008db0:	eb45 0303 	adc.w	r3, r5, r3
 8008db4:	607b      	str	r3, [r7, #4]
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	028b      	lsls	r3, r1, #10
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008dcc:	4621      	mov	r1, r4
 8008dce:	028a      	lsls	r2, r1, #10
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	61bb      	str	r3, [r7, #24]
 8008dda:	61fa      	str	r2, [r7, #28]
 8008ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008de0:	f7f7 fa46 	bl	8000270 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4613      	mov	r3, r2
 8008dea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <HAL_RCC_GetSysClockFreq+0x200>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	3301      	adds	r3, #1
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e06:	e002      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e08:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3750      	adds	r7, #80	; 0x50
 8008e14:	46bd      	mov	sp, r7
 8008e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e1a:	bf00      	nop
 8008e1c:	40023800 	.word	0x40023800
 8008e20:	00f42400 	.word	0x00f42400

08008e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e28:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000010 	.word	0x20000010

08008e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e40:	f7ff fff0 	bl	8008e24 <HAL_RCC_GetHCLKFreq>
 8008e44:	4602      	mov	r2, r0
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	0a9b      	lsrs	r3, r3, #10
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	4903      	ldr	r1, [pc, #12]	; (8008e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e52:	5ccb      	ldrb	r3, [r1, r3]
 8008e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	0800fdb4 	.word	0x0800fdb4

08008e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e68:	f7ff ffdc 	bl	8008e24 <HAL_RCC_GetHCLKFreq>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	0b5b      	lsrs	r3, r3, #13
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	4903      	ldr	r1, [pc, #12]	; (8008e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e7a:	5ccb      	ldrb	r3, [r1, r3]
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40023800 	.word	0x40023800
 8008e88:	0800fdb4 	.word	0x0800fdb4

08008e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	220f      	movs	r2, #15
 8008e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0203 	and.w	r2, r3, #3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	08db      	lsrs	r3, r3, #3
 8008ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ece:	4b07      	ldr	r3, [pc, #28]	; (8008eec <HAL_RCC_GetClockConfig+0x60>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0207 	and.w	r2, r3, #7
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	40023c00 	.word	0x40023c00

08008ef0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e01c      	b.n	8008f3c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	795b      	ldrb	r3, [r3, #5]
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fc fdca 	bl	8005aac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0204 	orr.w	r2, r2, #4
 8008f2c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e07b      	b.n	800904e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d108      	bne.n	8008f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f66:	d009      	beq.n	8008f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	61da      	str	r2, [r3, #28]
 8008f6e:	e005      	b.n	8008f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fc fde0 	bl	8005b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009000:	ea42 0103 	orr.w	r1, r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	f003 0104 	and.w	r1, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	f003 0210 	and.w	r2, r3, #16
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69da      	ldr	r2, [r3, #28]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800903c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e041      	b.n	80090ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7fd f911 	bl	80062a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f000 fc57 	bl	8009948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b01      	cmp	r3, #1
 8009106:	d001      	beq.n	800910c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e04e      	b.n	80091aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68da      	ldr	r2, [r3, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d022      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009136:	d01d      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1f      	ldr	r2, [pc, #124]	; (80091bc <HAL_TIM_Base_Start_IT+0xc8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a1c      	ldr	r2, [pc, #112]	; (80091c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00e      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a19      	ldr	r2, [pc, #100]	; (80091cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIM_Base_Start_IT+0x80>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d111      	bne.n	8009198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b06      	cmp	r3, #6
 8009184:	d010      	beq.n	80091a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0201 	orr.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009196:	e007      	b.n	80091a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40000400 	.word	0x40000400
 80091c0:	40000800 	.word	0x40000800
 80091c4:	40000c00 	.word	0x40000c00
 80091c8:	40010400 	.word	0x40010400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40001800 	.word	0x40001800

080091d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e041      	b.n	800926a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f839 	bl	8009272 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3304      	adds	r3, #4
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f000 fb98 	bl	8009948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800927a:	bf00      	nop
 800927c:	370c      	adds	r7, #12
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b086      	sub	sp, #24
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e097      	b.n	80093ca <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d106      	bne.n	80092b4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fd f844 	bl	800633c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f000 fb34 	bl	8009948 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	021b      	lsls	r3, r3, #8
 8009318:	4313      	orrs	r3, r2
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009326:	f023 030c 	bic.w	r3, r3, #12
 800932a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	4313      	orrs	r3, r2
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	4313      	orrs	r3, r2
 8009348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	011a      	lsls	r2, r3, #4
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	031b      	lsls	r3, r3, #12
 8009356:	4313      	orrs	r3, r2
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009364:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800936c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	4313      	orrs	r3, r2
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	4313      	orrs	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	f003 0302 	and.w	r3, r3, #2
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d122      	bne.n	800942e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d11b      	bne.n	800942e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f06f 0202 	mvn.w	r2, #2
 80093fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	f003 0303 	and.w	r3, r3, #3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fa78 	bl	800990a <HAL_TIM_IC_CaptureCallback>
 800941a:	e005      	b.n	8009428 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fa6a 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fa7b 	bl	800991e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b04      	cmp	r3, #4
 800943a:	d122      	bne.n	8009482 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b04      	cmp	r3, #4
 8009448:	d11b      	bne.n	8009482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0204 	mvn.w	r2, #4
 8009452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fa4e 	bl	800990a <HAL_TIM_IC_CaptureCallback>
 800946e:	e005      	b.n	800947c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa40 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa51 	bl	800991e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	f003 0308 	and.w	r3, r3, #8
 800948c:	2b08      	cmp	r3, #8
 800948e:	d122      	bne.n	80094d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b08      	cmp	r3, #8
 800949c:	d11b      	bne.n	80094d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f06f 0208 	mvn.w	r2, #8
 80094a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2204      	movs	r2, #4
 80094ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	f003 0303 	and.w	r3, r3, #3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fa24 	bl	800990a <HAL_TIM_IC_CaptureCallback>
 80094c2:	e005      	b.n	80094d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa16 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fa27 	bl	800991e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d122      	bne.n	800952a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d11b      	bne.n	800952a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f06f 0210 	mvn.w	r2, #16
 80094fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2208      	movs	r2, #8
 8009500:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9fa 	bl	800990a <HAL_TIM_IC_CaptureCallback>
 8009516:	e005      	b.n	8009524 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f9ec 	bl	80098f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f9fd 	bl	800991e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b01      	cmp	r3, #1
 8009536:	d10e      	bne.n	8009556 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b01      	cmp	r3, #1
 8009544:	d107      	bne.n	8009556 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0201 	mvn.w	r2, #1
 800954e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7fc fa7f 	bl	8005a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009560:	2b80      	cmp	r3, #128	; 0x80
 8009562:	d10e      	bne.n	8009582 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d107      	bne.n	8009582 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800957a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fd53 	bl	800a028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958c:	2b40      	cmp	r3, #64	; 0x40
 800958e:	d10e      	bne.n	80095ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d107      	bne.n	80095ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f9c2 	bl	8009932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d10e      	bne.n	80095da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	d107      	bne.n	80095da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f06f 0220 	mvn.w	r2, #32
 80095d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fd1d 	bl	800a014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095fe:	2302      	movs	r3, #2
 8009600:	e0ae      	b.n	8009760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b0c      	cmp	r3, #12
 800960e:	f200 809f 	bhi.w	8009750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009612:	a201      	add	r2, pc, #4	; (adr r2, 8009618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	0800964d 	.word	0x0800964d
 800961c:	08009751 	.word	0x08009751
 8009620:	08009751 	.word	0x08009751
 8009624:	08009751 	.word	0x08009751
 8009628:	0800968d 	.word	0x0800968d
 800962c:	08009751 	.word	0x08009751
 8009630:	08009751 	.word	0x08009751
 8009634:	08009751 	.word	0x08009751
 8009638:	080096cf 	.word	0x080096cf
 800963c:	08009751 	.word	0x08009751
 8009640:	08009751 	.word	0x08009751
 8009644:	08009751 	.word	0x08009751
 8009648:	0800970f 	.word	0x0800970f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fa18 	bl	8009a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0208 	orr.w	r2, r2, #8
 8009666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0204 	bic.w	r2, r2, #4
 8009676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6999      	ldr	r1, [r3, #24]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	619a      	str	r2, [r3, #24]
      break;
 800968a:	e064      	b.n	8009756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 fa68 	bl	8009b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	699a      	ldr	r2, [r3, #24]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6999      	ldr	r1, [r3, #24]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	021a      	lsls	r2, r3, #8
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	430a      	orrs	r2, r1
 80096ca:	619a      	str	r2, [r3, #24]
      break;
 80096cc:	e043      	b.n	8009756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 fabd 	bl	8009c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0208 	orr.w	r2, r2, #8
 80096e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69da      	ldr	r2, [r3, #28]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f022 0204 	bic.w	r2, r2, #4
 80096f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	69d9      	ldr	r1, [r3, #28]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	691a      	ldr	r2, [r3, #16]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	61da      	str	r2, [r3, #28]
      break;
 800970c:	e023      	b.n	8009756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fb11 	bl	8009d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69da      	ldr	r2, [r3, #28]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69d9      	ldr	r1, [r3, #28]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	021a      	lsls	r2, r3, #8
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	430a      	orrs	r2, r1
 800974c:	61da      	str	r2, [r3, #28]
      break;
 800974e:	e002      	b.n	8009756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	75fb      	strb	r3, [r7, #23]
      break;
 8009754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800975e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_TIM_ConfigClockSource+0x1c>
 8009780:	2302      	movs	r3, #2
 8009782:	e0b4      	b.n	80098ee <HAL_TIM_ConfigClockSource+0x186>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097bc:	d03e      	beq.n	800983c <HAL_TIM_ConfigClockSource+0xd4>
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c2:	f200 8087 	bhi.w	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ca:	f000 8086 	beq.w	80098da <HAL_TIM_ConfigClockSource+0x172>
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d87f      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097d4:	2b70      	cmp	r3, #112	; 0x70
 80097d6:	d01a      	beq.n	800980e <HAL_TIM_ConfigClockSource+0xa6>
 80097d8:	2b70      	cmp	r3, #112	; 0x70
 80097da:	d87b      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097dc:	2b60      	cmp	r3, #96	; 0x60
 80097de:	d050      	beq.n	8009882 <HAL_TIM_ConfigClockSource+0x11a>
 80097e0:	2b60      	cmp	r3, #96	; 0x60
 80097e2:	d877      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097e4:	2b50      	cmp	r3, #80	; 0x50
 80097e6:	d03c      	beq.n	8009862 <HAL_TIM_ConfigClockSource+0xfa>
 80097e8:	2b50      	cmp	r3, #80	; 0x50
 80097ea:	d873      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d058      	beq.n	80098a2 <HAL_TIM_ConfigClockSource+0x13a>
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d86f      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d064      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x15a>
 80097f8:	2b30      	cmp	r3, #48	; 0x30
 80097fa:	d86b      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d060      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009800:	2b20      	cmp	r3, #32
 8009802:	d867      	bhi.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
 8009804:	2b00      	cmp	r3, #0
 8009806:	d05c      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009808:	2b10      	cmp	r3, #16
 800980a:	d05a      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0x15a>
 800980c:	e062      	b.n	80098d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	6899      	ldr	r1, [r3, #8]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f000 fb5d 	bl	8009edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	609a      	str	r2, [r3, #8]
      break;
 800983a:	e04f      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	6899      	ldr	r1, [r3, #8]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	f000 fb46 	bl	8009edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800985e:	609a      	str	r2, [r3, #8]
      break;
 8009860:	e03c      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	6859      	ldr	r1, [r3, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	461a      	mov	r2, r3
 8009870:	f000 faba 	bl	8009de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2150      	movs	r1, #80	; 0x50
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fb13 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 8009880:	e02c      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6859      	ldr	r1, [r3, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	461a      	mov	r2, r3
 8009890:	f000 fad9 	bl	8009e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2160      	movs	r1, #96	; 0x60
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fb03 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80098a0:	e01c      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	6859      	ldr	r1, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f000 fa9a 	bl	8009de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2140      	movs	r1, #64	; 0x40
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 faf3 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80098c0:	e00c      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f000 faea 	bl	8009ea6 <TIM_ITRx_SetConfig>
      break;
 80098d2:	e003      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	73fb      	strb	r3, [r7, #15]
      break;
 80098d8:	e000      	b.n	80098dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b083      	sub	sp, #12
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098fe:	bf00      	nop
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800990a:	b480      	push	{r7}
 800990c:	b083      	sub	sp, #12
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009912:	bf00      	nop
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009926:	bf00      	nop
 8009928:	370c      	adds	r7, #12
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a40      	ldr	r2, [pc, #256]	; (8009a5c <TIM_Base_SetConfig+0x114>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d013      	beq.n	8009988 <TIM_Base_SetConfig+0x40>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009966:	d00f      	beq.n	8009988 <TIM_Base_SetConfig+0x40>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a3d      	ldr	r2, [pc, #244]	; (8009a60 <TIM_Base_SetConfig+0x118>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00b      	beq.n	8009988 <TIM_Base_SetConfig+0x40>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a3c      	ldr	r2, [pc, #240]	; (8009a64 <TIM_Base_SetConfig+0x11c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d007      	beq.n	8009988 <TIM_Base_SetConfig+0x40>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a3b      	ldr	r2, [pc, #236]	; (8009a68 <TIM_Base_SetConfig+0x120>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d003      	beq.n	8009988 <TIM_Base_SetConfig+0x40>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a3a      	ldr	r2, [pc, #232]	; (8009a6c <TIM_Base_SetConfig+0x124>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d108      	bne.n	800999a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4313      	orrs	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a2f      	ldr	r2, [pc, #188]	; (8009a5c <TIM_Base_SetConfig+0x114>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d02b      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a8:	d027      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a2c      	ldr	r2, [pc, #176]	; (8009a60 <TIM_Base_SetConfig+0x118>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d023      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a2b      	ldr	r2, [pc, #172]	; (8009a64 <TIM_Base_SetConfig+0x11c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d01f      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2a      	ldr	r2, [pc, #168]	; (8009a68 <TIM_Base_SetConfig+0x120>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d01b      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a29      	ldr	r2, [pc, #164]	; (8009a6c <TIM_Base_SetConfig+0x124>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d017      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a28      	ldr	r2, [pc, #160]	; (8009a70 <TIM_Base_SetConfig+0x128>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d013      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a27      	ldr	r2, [pc, #156]	; (8009a74 <TIM_Base_SetConfig+0x12c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00f      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <TIM_Base_SetConfig+0x130>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00b      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a25      	ldr	r2, [pc, #148]	; (8009a7c <TIM_Base_SetConfig+0x134>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d007      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a24      	ldr	r2, [pc, #144]	; (8009a80 <TIM_Base_SetConfig+0x138>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d003      	beq.n	80099fa <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a23      	ldr	r2, [pc, #140]	; (8009a84 <TIM_Base_SetConfig+0x13c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d108      	bne.n	8009a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <TIM_Base_SetConfig+0x114>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_Base_SetConfig+0xf8>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a0c      	ldr	r2, [pc, #48]	; (8009a6c <TIM_Base_SetConfig+0x124>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d103      	bne.n	8009a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	691a      	ldr	r2, [r3, #16]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	615a      	str	r2, [r3, #20]
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40010000 	.word	0x40010000
 8009a60:	40000400 	.word	0x40000400
 8009a64:	40000800 	.word	0x40000800
 8009a68:	40000c00 	.word	0x40000c00
 8009a6c:	40010400 	.word	0x40010400
 8009a70:	40014000 	.word	0x40014000
 8009a74:	40014400 	.word	0x40014400
 8009a78:	40014800 	.word	0x40014800
 8009a7c:	40001800 	.word	0x40001800
 8009a80:	40001c00 	.word	0x40001c00
 8009a84:	40002000 	.word	0x40002000

08009a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f023 0201 	bic.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f023 0302 	bic.w	r3, r3, #2
 8009ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a20      	ldr	r2, [pc, #128]	; (8009b60 <TIM_OC1_SetConfig+0xd8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_OC1_SetConfig+0x64>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <TIM_OC1_SetConfig+0xdc>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d10c      	bne.n	8009b06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0308 	bic.w	r3, r3, #8
 8009af2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f023 0304 	bic.w	r3, r3, #4
 8009b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a15      	ldr	r2, [pc, #84]	; (8009b60 <TIM_OC1_SetConfig+0xd8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_OC1_SetConfig+0x8e>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a14      	ldr	r2, [pc, #80]	; (8009b64 <TIM_OC1_SetConfig+0xdc>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d111      	bne.n	8009b3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	693a      	ldr	r2, [r7, #16]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	621a      	str	r2, [r3, #32]
}
 8009b54:	bf00      	nop
 8009b56:	371c      	adds	r7, #28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40010400 	.word	0x40010400

08009b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	f023 0210 	bic.w	r2, r3, #16
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	021b      	lsls	r3, r3, #8
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0320 	bic.w	r3, r3, #32
 8009bb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a22      	ldr	r2, [pc, #136]	; (8009c4c <TIM_OC2_SetConfig+0xe4>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d003      	beq.n	8009bd0 <TIM_OC2_SetConfig+0x68>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a21      	ldr	r2, [pc, #132]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d10d      	bne.n	8009bec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	011b      	lsls	r3, r3, #4
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <TIM_OC2_SetConfig+0xe4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_OC2_SetConfig+0x94>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a16      	ldr	r2, [pc, #88]	; (8009c50 <TIM_OC2_SetConfig+0xe8>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d113      	bne.n	8009c24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	621a      	str	r2, [r3, #32]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010400 	.word	0x40010400

08009c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0303 	bic.w	r3, r3, #3
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a21      	ldr	r2, [pc, #132]	; (8009d34 <TIM_OC3_SetConfig+0xe0>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d003      	beq.n	8009cba <TIM_OC3_SetConfig+0x66>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a20      	ldr	r2, [pc, #128]	; (8009d38 <TIM_OC3_SetConfig+0xe4>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10d      	bne.n	8009cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a16      	ldr	r2, [pc, #88]	; (8009d34 <TIM_OC3_SetConfig+0xe0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d003      	beq.n	8009ce6 <TIM_OC3_SetConfig+0x92>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <TIM_OC3_SetConfig+0xe4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d113      	bne.n	8009d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	011b      	lsls	r3, r3, #4
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	621a      	str	r2, [r3, #32]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	40010000 	.word	0x40010000
 8009d38:	40010400 	.word	0x40010400

08009d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a1b      	ldr	r3, [r3, #32]
 8009d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	031b      	lsls	r3, r3, #12
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a12      	ldr	r2, [pc, #72]	; (8009de0 <TIM_OC4_SetConfig+0xa4>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d003      	beq.n	8009da4 <TIM_OC4_SetConfig+0x68>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a11      	ldr	r2, [pc, #68]	; (8009de4 <TIM_OC4_SetConfig+0xa8>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d109      	bne.n	8009db8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	019b      	lsls	r3, r3, #6
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	621a      	str	r2, [r3, #32]
}
 8009dd2:	bf00      	nop
 8009dd4:	371c      	adds	r7, #28
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	40010000 	.word	0x40010000
 8009de4:	40010400 	.word	0x40010400

08009de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0201 	bic.w	r2, r3, #1
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f023 030a 	bic.w	r3, r3, #10
 8009e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	693a      	ldr	r2, [r7, #16]
 8009e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	621a      	str	r2, [r3, #32]
}
 8009e3a:	bf00      	nop
 8009e3c:	371c      	adds	r7, #28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b087      	sub	sp, #28
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0210 	bic.w	r2, r3, #16
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	031b      	lsls	r3, r3, #12
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	621a      	str	r2, [r3, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	f043 0307 	orr.w	r3, r3, #7
 8009ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	609a      	str	r2, [r3, #8]
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	021a      	lsls	r2, r3, #8
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	609a      	str	r2, [r3, #8]
}
 8009f10:	bf00      	nop
 8009f12:	371c      	adds	r7, #28
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d101      	bne.n	8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f30:	2302      	movs	r3, #2
 8009f32:	e05a      	b.n	8009fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a21      	ldr	r2, [pc, #132]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d022      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f80:	d01d      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1d      	ldr	r2, [pc, #116]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d018      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1b      	ldr	r2, [pc, #108]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d013      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1a      	ldr	r2, [pc, #104]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00e      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a18      	ldr	r2, [pc, #96]	; (800a008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d009      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a17      	ldr	r2, [pc, #92]	; (800a00c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d004      	beq.n	8009fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a15      	ldr	r2, [pc, #84]	; (800a010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40010400 	.word	0x40010400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40001800 	.word	0x40001800

0800a014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e03f      	b.n	800a0ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7fc fa40 	bl	80064e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2224      	movs	r2, #36	; 0x24
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a07e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f829 	bl	800a0d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695a      	ldr	r2, [r3, #20]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0dc:	b0c0      	sub	sp, #256	; 0x100
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0f4:	68d9      	ldr	r1, [r3, #12]
 800a0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	ea40 0301 	orr.w	r3, r0, r1
 800a100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	431a      	orrs	r2, r3
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	431a      	orrs	r2, r3
 800a118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a130:	f021 010c 	bic.w	r1, r1, #12
 800a134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a13e:	430b      	orrs	r3, r1
 800a140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a152:	6999      	ldr	r1, [r3, #24]
 800a154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	ea40 0301 	orr.w	r3, r0, r1
 800a15e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	4b8f      	ldr	r3, [pc, #572]	; (800a3a4 <UART_SetConfig+0x2cc>)
 800a168:	429a      	cmp	r2, r3
 800a16a:	d005      	beq.n	800a178 <UART_SetConfig+0xa0>
 800a16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b8d      	ldr	r3, [pc, #564]	; (800a3a8 <UART_SetConfig+0x2d0>)
 800a174:	429a      	cmp	r2, r3
 800a176:	d104      	bne.n	800a182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a178:	f7fe fe74 	bl	8008e64 <HAL_RCC_GetPCLK2Freq>
 800a17c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a180:	e003      	b.n	800a18a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a182:	f7fe fe5b 	bl	8008e3c <HAL_RCC_GetPCLK1Freq>
 800a186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18e:	69db      	ldr	r3, [r3, #28]
 800a190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a194:	f040 810c 	bne.w	800a3b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a1a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	462b      	mov	r3, r5
 800a1ae:	1891      	adds	r1, r2, r2
 800a1b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800a1b2:	415b      	adcs	r3, r3
 800a1b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	eb12 0801 	adds.w	r8, r2, r1
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	eb43 0901 	adc.w	r9, r3, r1
 800a1c6:	f04f 0200 	mov.w	r2, #0
 800a1ca:	f04f 0300 	mov.w	r3, #0
 800a1ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1da:	4690      	mov	r8, r2
 800a1dc:	4699      	mov	r9, r3
 800a1de:	4623      	mov	r3, r4
 800a1e0:	eb18 0303 	adds.w	r3, r8, r3
 800a1e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	eb49 0303 	adc.w	r3, r9, r3
 800a1ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a206:	460b      	mov	r3, r1
 800a208:	18db      	adds	r3, r3, r3
 800a20a:	653b      	str	r3, [r7, #80]	; 0x50
 800a20c:	4613      	mov	r3, r2
 800a20e:	eb42 0303 	adc.w	r3, r2, r3
 800a212:	657b      	str	r3, [r7, #84]	; 0x54
 800a214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a21c:	f7f6 f828 	bl	8000270 <__aeabi_uldivmod>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4b61      	ldr	r3, [pc, #388]	; (800a3ac <UART_SetConfig+0x2d4>)
 800a226:	fba3 2302 	umull	r2, r3, r3, r2
 800a22a:	095b      	lsrs	r3, r3, #5
 800a22c:	011c      	lsls	r4, r3, #4
 800a22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a232:	2200      	movs	r2, #0
 800a234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a23c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	1891      	adds	r1, r2, r2
 800a246:	64b9      	str	r1, [r7, #72]	; 0x48
 800a248:	415b      	adcs	r3, r3
 800a24a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a24c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a250:	4641      	mov	r1, r8
 800a252:	eb12 0a01 	adds.w	sl, r2, r1
 800a256:	4649      	mov	r1, r9
 800a258:	eb43 0b01 	adc.w	fp, r3, r1
 800a25c:	f04f 0200 	mov.w	r2, #0
 800a260:	f04f 0300 	mov.w	r3, #0
 800a264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a26c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a270:	4692      	mov	sl, r2
 800a272:	469b      	mov	fp, r3
 800a274:	4643      	mov	r3, r8
 800a276:	eb1a 0303 	adds.w	r3, sl, r3
 800a27a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a27e:	464b      	mov	r3, r9
 800a280:	eb4b 0303 	adc.w	r3, fp, r3
 800a284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a29c:	460b      	mov	r3, r1
 800a29e:	18db      	adds	r3, r3, r3
 800a2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	eb42 0303 	adc.w	r3, r2, r3
 800a2a8:	647b      	str	r3, [r7, #68]	; 0x44
 800a2aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a2ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a2b2:	f7f5 ffdd 	bl	8000270 <__aeabi_uldivmod>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4b3b      	ldr	r3, [pc, #236]	; (800a3ac <UART_SetConfig+0x2d4>)
 800a2be:	fba3 2301 	umull	r2, r3, r3, r1
 800a2c2:	095b      	lsrs	r3, r3, #5
 800a2c4:	2264      	movs	r2, #100	; 0x64
 800a2c6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ca:	1acb      	subs	r3, r1, r3
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a2d2:	4b36      	ldr	r3, [pc, #216]	; (800a3ac <UART_SetConfig+0x2d4>)
 800a2d4:	fba3 2302 	umull	r2, r3, r3, r2
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	005b      	lsls	r3, r3, #1
 800a2dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a2e0:	441c      	add	r4, r3
 800a2e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a2f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	1891      	adds	r1, r2, r2
 800a2fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2fc:	415b      	adcs	r3, r3
 800a2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a304:	4641      	mov	r1, r8
 800a306:	1851      	adds	r1, r2, r1
 800a308:	6339      	str	r1, [r7, #48]	; 0x30
 800a30a:	4649      	mov	r1, r9
 800a30c:	414b      	adcs	r3, r1
 800a30e:	637b      	str	r3, [r7, #52]	; 0x34
 800a310:	f04f 0200 	mov.w	r2, #0
 800a314:	f04f 0300 	mov.w	r3, #0
 800a318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a31c:	4659      	mov	r1, fp
 800a31e:	00cb      	lsls	r3, r1, #3
 800a320:	4651      	mov	r1, sl
 800a322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a326:	4651      	mov	r1, sl
 800a328:	00ca      	lsls	r2, r1, #3
 800a32a:	4610      	mov	r0, r2
 800a32c:	4619      	mov	r1, r3
 800a32e:	4603      	mov	r3, r0
 800a330:	4642      	mov	r2, r8
 800a332:	189b      	adds	r3, r3, r2
 800a334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a338:	464b      	mov	r3, r9
 800a33a:	460a      	mov	r2, r1
 800a33c:	eb42 0303 	adc.w	r3, r2, r3
 800a340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a358:	460b      	mov	r3, r1
 800a35a:	18db      	adds	r3, r3, r3
 800a35c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a35e:	4613      	mov	r3, r2
 800a360:	eb42 0303 	adc.w	r3, r2, r3
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a36a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a36e:	f7f5 ff7f 	bl	8000270 <__aeabi_uldivmod>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <UART_SetConfig+0x2d4>)
 800a378:	fba3 1302 	umull	r1, r3, r3, r2
 800a37c:	095b      	lsrs	r3, r3, #5
 800a37e:	2164      	movs	r1, #100	; 0x64
 800a380:	fb01 f303 	mul.w	r3, r1, r3
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	3332      	adds	r3, #50	; 0x32
 800a38a:	4a08      	ldr	r2, [pc, #32]	; (800a3ac <UART_SetConfig+0x2d4>)
 800a38c:	fba2 2303 	umull	r2, r3, r2, r3
 800a390:	095b      	lsrs	r3, r3, #5
 800a392:	f003 0207 	and.w	r2, r3, #7
 800a396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4422      	add	r2, r4
 800a39e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a3a0:	e105      	b.n	800a5ae <UART_SetConfig+0x4d6>
 800a3a2:	bf00      	nop
 800a3a4:	40011000 	.word	0x40011000
 800a3a8:	40011400 	.word	0x40011400
 800a3ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a3b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	1891      	adds	r1, r2, r2
 800a3c8:	6239      	str	r1, [r7, #32]
 800a3ca:	415b      	adcs	r3, r3
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	1854      	adds	r4, r2, r1
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	eb43 0501 	adc.w	r5, r3, r1
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	00eb      	lsls	r3, r5, #3
 800a3e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3ea:	00e2      	lsls	r2, r4, #3
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	4643      	mov	r3, r8
 800a3f2:	18e3      	adds	r3, r4, r3
 800a3f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	eb45 0303 	adc.w	r3, r5, r3
 800a3fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a40e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	f04f 0300 	mov.w	r3, #0
 800a41a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a41e:	4629      	mov	r1, r5
 800a420:	008b      	lsls	r3, r1, #2
 800a422:	4621      	mov	r1, r4
 800a424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a428:	4621      	mov	r1, r4
 800a42a:	008a      	lsls	r2, r1, #2
 800a42c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a430:	f7f5 ff1e 	bl	8000270 <__aeabi_uldivmod>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4b60      	ldr	r3, [pc, #384]	; (800a5bc <UART_SetConfig+0x4e4>)
 800a43a:	fba3 2302 	umull	r2, r3, r3, r2
 800a43e:	095b      	lsrs	r3, r3, #5
 800a440:	011c      	lsls	r4, r3, #4
 800a442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a446:	2200      	movs	r2, #0
 800a448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a44c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a454:	4642      	mov	r2, r8
 800a456:	464b      	mov	r3, r9
 800a458:	1891      	adds	r1, r2, r2
 800a45a:	61b9      	str	r1, [r7, #24]
 800a45c:	415b      	adcs	r3, r3
 800a45e:	61fb      	str	r3, [r7, #28]
 800a460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a464:	4641      	mov	r1, r8
 800a466:	1851      	adds	r1, r2, r1
 800a468:	6139      	str	r1, [r7, #16]
 800a46a:	4649      	mov	r1, r9
 800a46c:	414b      	adcs	r3, r1
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	f04f 0300 	mov.w	r3, #0
 800a478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a47c:	4659      	mov	r1, fp
 800a47e:	00cb      	lsls	r3, r1, #3
 800a480:	4651      	mov	r1, sl
 800a482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a486:	4651      	mov	r1, sl
 800a488:	00ca      	lsls	r2, r1, #3
 800a48a:	4610      	mov	r0, r2
 800a48c:	4619      	mov	r1, r3
 800a48e:	4603      	mov	r3, r0
 800a490:	4642      	mov	r2, r8
 800a492:	189b      	adds	r3, r3, r2
 800a494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a498:	464b      	mov	r3, r9
 800a49a:	460a      	mov	r2, r1
 800a49c:	eb42 0303 	adc.w	r3, r2, r3
 800a4a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	f04f 0300 	mov.w	r3, #0
 800a4b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a4bc:	4649      	mov	r1, r9
 800a4be:	008b      	lsls	r3, r1, #2
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4c6:	4641      	mov	r1, r8
 800a4c8:	008a      	lsls	r2, r1, #2
 800a4ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a4ce:	f7f5 fecf 	bl	8000270 <__aeabi_uldivmod>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4b39      	ldr	r3, [pc, #228]	; (800a5bc <UART_SetConfig+0x4e4>)
 800a4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	2164      	movs	r1, #100	; 0x64
 800a4e0:	fb01 f303 	mul.w	r3, r1, r3
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	3332      	adds	r3, #50	; 0x32
 800a4ea:	4a34      	ldr	r2, [pc, #208]	; (800a5bc <UART_SetConfig+0x4e4>)
 800a4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f0:	095b      	lsrs	r3, r3, #5
 800a4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4f6:	441c      	add	r4, r3
 800a4f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	673b      	str	r3, [r7, #112]	; 0x70
 800a500:	677a      	str	r2, [r7, #116]	; 0x74
 800a502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a506:	4642      	mov	r2, r8
 800a508:	464b      	mov	r3, r9
 800a50a:	1891      	adds	r1, r2, r2
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	415b      	adcs	r3, r3
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a516:	4641      	mov	r1, r8
 800a518:	1851      	adds	r1, r2, r1
 800a51a:	6039      	str	r1, [r7, #0]
 800a51c:	4649      	mov	r1, r9
 800a51e:	414b      	adcs	r3, r1
 800a520:	607b      	str	r3, [r7, #4]
 800a522:	f04f 0200 	mov.w	r2, #0
 800a526:	f04f 0300 	mov.w	r3, #0
 800a52a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a52e:	4659      	mov	r1, fp
 800a530:	00cb      	lsls	r3, r1, #3
 800a532:	4651      	mov	r1, sl
 800a534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a538:	4651      	mov	r1, sl
 800a53a:	00ca      	lsls	r2, r1, #3
 800a53c:	4610      	mov	r0, r2
 800a53e:	4619      	mov	r1, r3
 800a540:	4603      	mov	r3, r0
 800a542:	4642      	mov	r2, r8
 800a544:	189b      	adds	r3, r3, r2
 800a546:	66bb      	str	r3, [r7, #104]	; 0x68
 800a548:	464b      	mov	r3, r9
 800a54a:	460a      	mov	r2, r1
 800a54c:	eb42 0303 	adc.w	r3, r2, r3
 800a550:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	663b      	str	r3, [r7, #96]	; 0x60
 800a55c:	667a      	str	r2, [r7, #100]	; 0x64
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	f04f 0300 	mov.w	r3, #0
 800a566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a56a:	4649      	mov	r1, r9
 800a56c:	008b      	lsls	r3, r1, #2
 800a56e:	4641      	mov	r1, r8
 800a570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a574:	4641      	mov	r1, r8
 800a576:	008a      	lsls	r2, r1, #2
 800a578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a57c:	f7f5 fe78 	bl	8000270 <__aeabi_uldivmod>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <UART_SetConfig+0x4e4>)
 800a586:	fba3 1302 	umull	r1, r3, r3, r2
 800a58a:	095b      	lsrs	r3, r3, #5
 800a58c:	2164      	movs	r1, #100	; 0x64
 800a58e:	fb01 f303 	mul.w	r3, r1, r3
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	3332      	adds	r3, #50	; 0x32
 800a598:	4a08      	ldr	r2, [pc, #32]	; (800a5bc <UART_SetConfig+0x4e4>)
 800a59a:	fba2 2303 	umull	r2, r3, r2, r3
 800a59e:	095b      	lsrs	r3, r3, #5
 800a5a0:	f003 020f 	and.w	r2, r3, #15
 800a5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4422      	add	r2, r4
 800a5ac:	609a      	str	r2, [r3, #8]
}
 800a5ae:	bf00      	nop
 800a5b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5ba:	bf00      	nop
 800a5bc:	51eb851f 	.word	0x51eb851f

0800a5c0 <__NVIC_SetPriority>:
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	db0a      	blt.n	800a5ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	490c      	ldr	r1, [pc, #48]	; (800a60c <__NVIC_SetPriority+0x4c>)
 800a5da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5de:	0112      	lsls	r2, r2, #4
 800a5e0:	b2d2      	uxtb	r2, r2
 800a5e2:	440b      	add	r3, r1
 800a5e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5e8:	e00a      	b.n	800a600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	4908      	ldr	r1, [pc, #32]	; (800a610 <__NVIC_SetPriority+0x50>)
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	f003 030f 	and.w	r3, r3, #15
 800a5f6:	3b04      	subs	r3, #4
 800a5f8:	0112      	lsls	r2, r2, #4
 800a5fa:	b2d2      	uxtb	r2, r2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	761a      	strb	r2, [r3, #24]
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	e000e100 	.word	0xe000e100
 800a610:	e000ed00 	.word	0xe000ed00

0800a614 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a618:	4b05      	ldr	r3, [pc, #20]	; (800a630 <SysTick_Handler+0x1c>)
 800a61a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a61c:	f002 fde8 	bl	800d1f0 <xTaskGetSchedulerState>
 800a620:	4603      	mov	r3, r0
 800a622:	2b01      	cmp	r3, #1
 800a624:	d001      	beq.n	800a62a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a626:	f003 fe0f 	bl	800e248 <xPortSysTickHandler>
  }
}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	e000e010 	.word	0xe000e010

0800a634 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a638:	2100      	movs	r1, #0
 800a63a:	f06f 0004 	mvn.w	r0, #4
 800a63e:	f7ff ffbf 	bl	800a5c0 <__NVIC_SetPriority>
#endif
}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a64e:	f3ef 8305 	mrs	r3, IPSR
 800a652:	603b      	str	r3, [r7, #0]
  return(result);
 800a654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a65a:	f06f 0305 	mvn.w	r3, #5
 800a65e:	607b      	str	r3, [r7, #4]
 800a660:	e00c      	b.n	800a67c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a662:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <osKernelInitialize+0x44>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d105      	bne.n	800a676 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a66a:	4b08      	ldr	r3, [pc, #32]	; (800a68c <osKernelInitialize+0x44>)
 800a66c:	2201      	movs	r2, #1
 800a66e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a670:	2300      	movs	r3, #0
 800a672:	607b      	str	r3, [r7, #4]
 800a674:	e002      	b.n	800a67c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a676:	f04f 33ff 	mov.w	r3, #4294967295
 800a67a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a67c:	687b      	ldr	r3, [r7, #4]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	20000ab0 	.word	0x20000ab0

0800a690 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a696:	f3ef 8305 	mrs	r3, IPSR
 800a69a:	603b      	str	r3, [r7, #0]
  return(result);
 800a69c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6a2:	f06f 0305 	mvn.w	r3, #5
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	e010      	b.n	800a6cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6aa:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <osKernelStart+0x48>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d109      	bne.n	800a6c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6b2:	f7ff ffbf 	bl	800a634 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6b6:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <osKernelStart+0x48>)
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6bc:	f002 f8d8 	bl	800c870 <vTaskStartScheduler>
      stat = osOK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	607b      	str	r3, [r7, #4]
 800a6c4:	e002      	b.n	800a6cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6cc:	687b      	ldr	r3, [r7, #4]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20000ab0 	.word	0x20000ab0

0800a6dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08e      	sub	sp, #56	; 0x38
 800a6e0:	af04      	add	r7, sp, #16
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ec:	f3ef 8305 	mrs	r3, IPSR
 800a6f0:	617b      	str	r3, [r7, #20]
  return(result);
 800a6f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d17e      	bne.n	800a7f6 <osThreadNew+0x11a>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d07b      	beq.n	800a7f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a6fe:	2380      	movs	r3, #128	; 0x80
 800a700:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a702:	2318      	movs	r3, #24
 800a704:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a706:	2300      	movs	r3, #0
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a70a:	f04f 33ff 	mov.w	r3, #4294967295
 800a70e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d045      	beq.n	800a7a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <osThreadNew+0x48>
        name = attr->name;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d008      	beq.n	800a74a <osThreadNew+0x6e>
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2b38      	cmp	r3, #56	; 0x38
 800a73c:	d805      	bhi.n	800a74a <osThreadNew+0x6e>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <osThreadNew+0x72>
        return (NULL);
 800a74a:	2300      	movs	r3, #0
 800a74c:	e054      	b.n	800a7f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	089b      	lsrs	r3, r3, #2
 800a75c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00e      	beq.n	800a784 <osThreadNew+0xa8>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	2bbf      	cmp	r3, #191	; 0xbf
 800a76c:	d90a      	bls.n	800a784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a772:	2b00      	cmp	r3, #0
 800a774:	d006      	beq.n	800a784 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d002      	beq.n	800a784 <osThreadNew+0xa8>
        mem = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	61bb      	str	r3, [r7, #24]
 800a782:	e010      	b.n	800a7a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10c      	bne.n	800a7a6 <osThreadNew+0xca>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d108      	bne.n	800a7a6 <osThreadNew+0xca>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <osThreadNew+0xca>
          mem = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61bb      	str	r3, [r7, #24]
 800a7a0:	e001      	b.n	800a7a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d110      	bne.n	800a7ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7b4:	9202      	str	r2, [sp, #8]
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	6a3a      	ldr	r2, [r7, #32]
 800a7c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f001 fe64 	bl	800c490 <xTaskCreateStatic>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	e013      	b.n	800a7f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d110      	bne.n	800a7f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	f107 0310 	add.w	r3, r7, #16
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f001 feaf 	bl	800c54a <xTaskCreate>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d001      	beq.n	800a7f6 <osThreadNew+0x11a>
            hTask = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7f6:	693b      	ldr	r3, [r7, #16]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3728      	adds	r7, #40	; 0x28
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a808:	f3ef 8305 	mrs	r3, IPSR
 800a80c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a80e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <osDelay+0x1c>
    stat = osErrorISR;
 800a814:	f06f 0305 	mvn.w	r3, #5
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	e007      	b.n	800a82c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f001 ffee 	bl	800c808 <vTaskDelay>
    }
  }

  return (stat);
 800a82c:	68fb      	ldr	r3, [r7, #12]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a836:	b580      	push	{r7, lr}
 800a838:	b088      	sub	sp, #32
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a842:	f3ef 8305 	mrs	r3, IPSR
 800a846:	60bb      	str	r3, [r7, #8]
  return(result);
 800a848:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d174      	bne.n	800a938 <osMutexNew+0x102>
    if (attr != NULL) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <osMutexNew+0x26>
      type = attr->attr_bits;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	e001      	b.n	800a860 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a85c:	2300      	movs	r3, #0
 800a85e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d002      	beq.n	800a870 <osMutexNew+0x3a>
      rmtx = 1U;
 800a86a:	2301      	movs	r3, #1
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	e001      	b.n	800a874 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d15c      	bne.n	800a938 <osMutexNew+0x102>
      mem = -1;
 800a87e:	f04f 33ff 	mov.w	r3, #4294967295
 800a882:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d015      	beq.n	800a8b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d006      	beq.n	800a8a0 <osMutexNew+0x6a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	2b4f      	cmp	r3, #79	; 0x4f
 800a898:	d902      	bls.n	800a8a0 <osMutexNew+0x6a>
          mem = 1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	613b      	str	r3, [r7, #16]
 800a89e:	e00c      	b.n	800a8ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d108      	bne.n	800a8ba <osMutexNew+0x84>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d104      	bne.n	800a8ba <osMutexNew+0x84>
            mem = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	e001      	b.n	800a8ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d112      	bne.n	800a8e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	2004      	movs	r0, #4
 800a8ce:	f000 fc48 	bl	800b162 <xQueueCreateMutexStatic>
 800a8d2:	61f8      	str	r0, [r7, #28]
 800a8d4:	e016      	b.n	800a904 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	2001      	movs	r0, #1
 800a8de:	f000 fc40 	bl	800b162 <xQueueCreateMutexStatic>
 800a8e2:	61f8      	str	r0, [r7, #28]
 800a8e4:	e00e      	b.n	800a904 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a8f2:	2004      	movs	r0, #4
 800a8f4:	f000 fc1d 	bl	800b132 <xQueueCreateMutex>
 800a8f8:	61f8      	str	r0, [r7, #28]
 800a8fa:	e003      	b.n	800a904 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	f000 fc18 	bl	800b132 <xQueueCreateMutex>
 800a902:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00c      	beq.n	800a924 <osMutexNew+0xee>
        if (attr != NULL) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <osMutexNew+0xe2>
          name = attr->name;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e001      	b.n	800a91c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a91c:	68f9      	ldr	r1, [r7, #12]
 800a91e:	69f8      	ldr	r0, [r7, #28]
 800a920:	f001 f9d2 	bl	800bcc8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <osMutexNew+0x102>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a938:	69fb      	ldr	r3, [r7, #28]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a942:	b580      	push	{r7, lr}
 800a944:	b086      	sub	sp, #24
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f023 0301 	bic.w	r3, r3, #1
 800a952:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a960:	f3ef 8305 	mrs	r3, IPSR
 800a964:	60bb      	str	r3, [r7, #8]
  return(result);
 800a966:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a96c:	f06f 0305 	mvn.w	r3, #5
 800a970:	617b      	str	r3, [r7, #20]
 800a972:	e02c      	b.n	800a9ce <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a97a:	f06f 0303 	mvn.w	r3, #3
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	e025      	b.n	800a9ce <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d011      	beq.n	800a9ac <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6938      	ldr	r0, [r7, #16]
 800a98c:	f000 fc38 	bl	800b200 <xQueueTakeMutexRecursive>
 800a990:	4603      	mov	r3, r0
 800a992:	2b01      	cmp	r3, #1
 800a994:	d01b      	beq.n	800a9ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a99c:	f06f 0301 	mvn.w	r3, #1
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	e014      	b.n	800a9ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a9a4:	f06f 0302 	mvn.w	r3, #2
 800a9a8:	617b      	str	r3, [r7, #20]
 800a9aa:	e010      	b.n	800a9ce <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6938      	ldr	r0, [r7, #16]
 800a9b0:	f000 fed6 	bl	800b760 <xQueueSemaphoreTake>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d009      	beq.n	800a9ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a9c0:	f06f 0301 	mvn.w	r3, #1
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	e002      	b.n	800a9ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a9c8:	f06f 0302 	mvn.w	r3, #2
 800a9cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a9ce:	697b      	ldr	r3, [r7, #20]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f023 0301 	bic.w	r3, r3, #1
 800a9e6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9f4:	f3ef 8305 	mrs	r3, IPSR
 800a9f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9fa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d003      	beq.n	800aa08 <osMutexRelease+0x30>
    stat = osErrorISR;
 800aa00:	f06f 0305 	mvn.w	r3, #5
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e01f      	b.n	800aa48 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d103      	bne.n	800aa16 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800aa0e:	f06f 0303 	mvn.w	r3, #3
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	e018      	b.n	800aa48 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800aa1c:	6938      	ldr	r0, [r7, #16]
 800aa1e:	f000 fbbb 	bl	800b198 <xQueueGiveMutexRecursive>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d00f      	beq.n	800aa48 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa28:	f06f 0302 	mvn.w	r3, #2
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	e00b      	b.n	800aa48 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aa30:	2300      	movs	r3, #0
 800aa32:	2200      	movs	r2, #0
 800aa34:	2100      	movs	r1, #0
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f000 fc18 	bl	800b26c <xQueueGenericSend>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d002      	beq.n	800aa48 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aa42:	f06f 0302 	mvn.w	r3, #2
 800aa46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aa48:	697b      	ldr	r3, [r7, #20]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b08a      	sub	sp, #40	; 0x28
 800aa56:	af02      	add	r7, sp, #8
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa62:	f3ef 8305 	mrs	r3, IPSR
 800aa66:	613b      	str	r3, [r7, #16]
  return(result);
 800aa68:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d15f      	bne.n	800ab2e <osMessageQueueNew+0xdc>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d05c      	beq.n	800ab2e <osMessageQueueNew+0xdc>
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d059      	beq.n	800ab2e <osMessageQueueNew+0xdc>
    mem = -1;
 800aa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d029      	beq.n	800aada <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d012      	beq.n	800aab4 <osMessageQueueNew+0x62>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	2b4f      	cmp	r3, #79	; 0x4f
 800aa94:	d90e      	bls.n	800aab4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	695a      	ldr	r2, [r3, #20]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	fb01 f303 	mul.w	r3, r1, r3
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <osMessageQueueNew+0x62>
        mem = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	61bb      	str	r3, [r7, #24]
 800aab2:	e014      	b.n	800aade <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d110      	bne.n	800aade <osMessageQueueNew+0x8c>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10c      	bne.n	800aade <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d108      	bne.n	800aade <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d104      	bne.n	800aade <osMessageQueueNew+0x8c>
          mem = 0;
 800aad4:	2300      	movs	r3, #0
 800aad6:	61bb      	str	r3, [r7, #24]
 800aad8:	e001      	b.n	800aade <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d10b      	bne.n	800aafc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2100      	movs	r1, #0
 800aaee:	9100      	str	r1, [sp, #0]
 800aaf0:	68b9      	ldr	r1, [r7, #8]
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 fa2e 	bl	800af54 <xQueueGenericCreateStatic>
 800aaf8:	61f8      	str	r0, [r7, #28]
 800aafa:	e008      	b.n	800ab0e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d105      	bne.n	800ab0e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ab02:	2200      	movs	r2, #0
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 fa9c 	bl	800b044 <xQueueGenericCreate>
 800ab0c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e001      	b.n	800ab26 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ab26:	6979      	ldr	r1, [r7, #20]
 800ab28:	69f8      	ldr	r0, [r7, #28]
 800ab2a:	f001 f8cd 	bl	800bcc8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ab2e:	69fb      	ldr	r3, [r7, #28]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3720      	adds	r7, #32
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	4613      	mov	r3, r2
 800ab46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab50:	f3ef 8305 	mrs	r3, IPSR
 800ab54:	617b      	str	r3, [r7, #20]
  return(result);
 800ab56:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d028      	beq.n	800abae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d005      	beq.n	800ab6e <osMessageQueuePut+0x36>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <osMessageQueuePut+0x36>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ab6e:	f06f 0303 	mvn.w	r3, #3
 800ab72:	61fb      	str	r3, [r7, #28]
 800ab74:	e038      	b.n	800abe8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ab7a:	f107 0210 	add.w	r2, r7, #16
 800ab7e:	2300      	movs	r3, #0
 800ab80:	68b9      	ldr	r1, [r7, #8]
 800ab82:	69b8      	ldr	r0, [r7, #24]
 800ab84:	f000 fc70 	bl	800b468 <xQueueGenericSendFromISR>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d003      	beq.n	800ab96 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ab8e:	f06f 0302 	mvn.w	r3, #2
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e028      	b.n	800abe8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d025      	beq.n	800abe8 <osMessageQueuePut+0xb0>
 800ab9c:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <osMessageQueuePut+0xbc>)
 800ab9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	e01c      	b.n	800abe8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <osMessageQueuePut+0x82>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d103      	bne.n	800abc2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800abba:	f06f 0303 	mvn.w	r3, #3
 800abbe:	61fb      	str	r3, [r7, #28]
 800abc0:	e012      	b.n	800abe8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800abc2:	2300      	movs	r3, #0
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	69b8      	ldr	r0, [r7, #24]
 800abca:	f000 fb4f 	bl	800b26c <xQueueGenericSend>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d009      	beq.n	800abe8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800abda:	f06f 0301 	mvn.w	r3, #1
 800abde:	61fb      	str	r3, [r7, #28]
 800abe0:	e002      	b.n	800abe8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800abe2:	f06f 0302 	mvn.w	r3, #2
 800abe6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800abe8:	69fb      	ldr	r3, [r7, #28]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3720      	adds	r7, #32
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	e000ed04 	.word	0xe000ed04

0800abf8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac0e:	f3ef 8305 	mrs	r3, IPSR
 800ac12:	617b      	str	r3, [r7, #20]
  return(result);
 800ac14:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d028      	beq.n	800ac6c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <osMessageQueueGet+0x34>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <osMessageQueueGet+0x34>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d003      	beq.n	800ac34 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ac2c:	f06f 0303 	mvn.w	r3, #3
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e037      	b.n	800aca4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ac34:	2300      	movs	r3, #0
 800ac36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ac38:	f107 0310 	add.w	r3, r7, #16
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	69b8      	ldr	r0, [r7, #24]
 800ac42:	f000 fe99 	bl	800b978 <xQueueReceiveFromISR>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d003      	beq.n	800ac54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ac4c:	f06f 0302 	mvn.w	r3, #2
 800ac50:	61fb      	str	r3, [r7, #28]
 800ac52:	e027      	b.n	800aca4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d024      	beq.n	800aca4 <osMessageQueueGet+0xac>
 800ac5a:	4b15      	ldr	r3, [pc, #84]	; (800acb0 <osMessageQueueGet+0xb8>)
 800ac5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	e01b      	b.n	800aca4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <osMessageQueueGet+0x80>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d103      	bne.n	800ac80 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ac78:	f06f 0303 	mvn.w	r3, #3
 800ac7c:	61fb      	str	r3, [r7, #28]
 800ac7e:	e011      	b.n	800aca4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	68b9      	ldr	r1, [r7, #8]
 800ac84:	69b8      	ldr	r0, [r7, #24]
 800ac86:	f000 fc8b 	bl	800b5a0 <xQueueReceive>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d009      	beq.n	800aca4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ac96:	f06f 0301 	mvn.w	r3, #1
 800ac9a:	61fb      	str	r3, [r7, #28]
 800ac9c:	e002      	b.n	800aca4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ac9e:	f06f 0302 	mvn.w	r3, #2
 800aca2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aca4:	69fb      	ldr	r3, [r7, #28]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	e000ed04 	.word	0xe000ed04

0800acb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a07      	ldr	r2, [pc, #28]	; (800ace0 <vApplicationGetIdleTaskMemory+0x2c>)
 800acc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	4a06      	ldr	r2, [pc, #24]	; (800ace4 <vApplicationGetIdleTaskMemory+0x30>)
 800acca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2280      	movs	r2, #128	; 0x80
 800acd0:	601a      	str	r2, [r3, #0]
}
 800acd2:	bf00      	nop
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	20000ab4 	.word	0x20000ab4
 800ace4:	20000b74 	.word	0x20000b74

0800ace8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4a07      	ldr	r2, [pc, #28]	; (800ad14 <vApplicationGetTimerTaskMemory+0x2c>)
 800acf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	4a06      	ldr	r2, [pc, #24]	; (800ad18 <vApplicationGetTimerTaskMemory+0x30>)
 800acfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad06:	601a      	str	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	20000d74 	.word	0x20000d74
 800ad18:	20000e34 	.word	0x20000e34

0800ad1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f103 0208 	add.w	r2, r3, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f04f 32ff 	mov.w	r2, #4294967295
 800ad34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f103 0208 	add.w	r2, r3, #8
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f103 0208 	add.w	r2, r3, #8
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad6a:	bf00      	nop
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad76:	b480      	push	{r7}
 800ad78:	b085      	sub	sp, #20
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	601a      	str	r2, [r3, #0]
}
 800adb2:	bf00      	nop
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adbe:	b480      	push	{r7}
 800adc0:	b085      	sub	sp, #20
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d103      	bne.n	800adde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	e00c      	b.n	800adf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3308      	adds	r3, #8
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	e002      	b.n	800adec <vListInsert+0x2e>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d2f6      	bcs.n	800ade6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	601a      	str	r2, [r3, #0]
}
 800ae24:	bf00      	nop
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	6892      	ldr	r2, [r2, #8]
 800ae46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	6852      	ldr	r2, [r2, #4]
 800ae50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d103      	bne.n	800ae64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	1e5a      	subs	r2, r3, #1
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aeae:	f003 f939 	bl	800e124 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	441a      	add	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aede:	3b01      	subs	r3, #1
 800aee0:	68f9      	ldr	r1, [r7, #12]
 800aee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aee4:	fb01 f303 	mul.w	r3, r1, r3
 800aee8:	441a      	add	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	22ff      	movs	r2, #255	; 0xff
 800aef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	22ff      	movs	r2, #255	; 0xff
 800aefa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d114      	bne.n	800af2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01a      	beq.n	800af42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3310      	adds	r3, #16
 800af10:	4618      	mov	r0, r3
 800af12:	f001 ff75 	bl	800ce00 <xTaskRemoveFromEventList>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d012      	beq.n	800af42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af1c:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <xQueueGenericReset+0xcc>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	e009      	b.n	800af42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3310      	adds	r3, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f7ff fef2 	bl	800ad1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3324      	adds	r3, #36	; 0x24
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff feed 	bl	800ad1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af42:	f003 f91f 	bl	800e184 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af46:	2301      	movs	r3, #1
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af02      	add	r7, sp, #8
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d10a      	bne.n	800af9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af96:	bf00      	nop
 800af98:	e7fe      	b.n	800af98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <xQueueGenericCreateStatic+0x52>
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <xQueueGenericCreateStatic+0x56>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <xQueueGenericCreateStatic+0x58>
 800afaa:	2300      	movs	r3, #0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	623b      	str	r3, [r7, #32]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <xQueueGenericCreateStatic+0x7e>
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <xQueueGenericCreateStatic+0x82>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueGenericCreateStatic+0x84>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	61fb      	str	r3, [r7, #28]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aff2:	2350      	movs	r3, #80	; 0x50
 800aff4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b50      	cmp	r3, #80	; 0x50
 800affa:	d00a      	beq.n	800b012 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	61bb      	str	r3, [r7, #24]
}
 800b00e:	bf00      	nop
 800b010:	e7fe      	b.n	800b010 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b012:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b026:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4613      	mov	r3, r2
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	68b9      	ldr	r1, [r7, #8]
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 f83f 	bl	800b0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3730      	adds	r7, #48	; 0x30
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08a      	sub	sp, #40	; 0x28
 800b048:	af02      	add	r7, sp, #8
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	4613      	mov	r3, r2
 800b050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	613b      	str	r3, [r7, #16]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	fb02 f303 	mul.w	r3, r2, r3
 800b076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3350      	adds	r3, #80	; 0x50
 800b07c:	4618      	mov	r0, r3
 800b07e:	f003 f973 	bl	800e368 <pvPortMalloc>
 800b082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d011      	beq.n	800b0ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	3350      	adds	r3, #80	; 0x50
 800b092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b09c:	79fa      	ldrb	r2, [r7, #7]
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	68b9      	ldr	r1, [r7, #8]
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	f000 f805 	bl	800b0b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0ae:	69bb      	ldr	r3, [r7, #24]
	}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3720      	adds	r7, #32
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	601a      	str	r2, [r3, #0]
 800b0d2:	e002      	b.n	800b0da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	69b8      	ldr	r0, [r7, #24]
 800b0ea:	f7ff fecb 	bl	800ae84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	78fa      	ldrb	r2, [r7, #3]
 800b0f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b11e:	2300      	movs	r3, #0
 800b120:	2200      	movs	r2, #0
 800b122:	2100      	movs	r1, #0
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f8a1 	bl	800b26c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b132:	b580      	push	{r7, lr}
 800b134:	b086      	sub	sp, #24
 800b136:	af00      	add	r7, sp, #0
 800b138:	4603      	mov	r3, r0
 800b13a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b13c:	2301      	movs	r3, #1
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	2300      	movs	r3, #0
 800b142:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b144:	79fb      	ldrb	r3, [r7, #7]
 800b146:	461a      	mov	r2, r3
 800b148:	6939      	ldr	r1, [r7, #16]
 800b14a:	6978      	ldr	r0, [r7, #20]
 800b14c:	f7ff ff7a 	bl	800b044 <xQueueGenericCreate>
 800b150:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff ffd3 	bl	800b0fe <prvInitialiseMutex>

		return xNewQueue;
 800b158:	68fb      	ldr	r3, [r7, #12]
	}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b162:	b580      	push	{r7, lr}
 800b164:	b088      	sub	sp, #32
 800b166:	af02      	add	r7, sp, #8
 800b168:	4603      	mov	r3, r0
 800b16a:	6039      	str	r1, [r7, #0]
 800b16c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b16e:	2301      	movs	r3, #1
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2200      	movs	r2, #0
 800b17e:	6939      	ldr	r1, [r7, #16]
 800b180:	6978      	ldr	r0, [r7, #20]
 800b182:	f7ff fee7 	bl	800af54 <xQueueGenericCreateStatic>
 800b186:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f7ff ffb8 	bl	800b0fe <prvInitialiseMutex>

		return xNewQueue;
 800b18e:	68fb      	ldr	r3, [r7, #12]
	}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10a      	bne.n	800b1c0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ae:	f383 8811 	msr	BASEPRI, r3
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	60fb      	str	r3, [r7, #12]
}
 800b1bc:	bf00      	nop
 800b1be:	e7fe      	b.n	800b1be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	689c      	ldr	r4, [r3, #8]
 800b1c4:	f002 f804 	bl	800d1d0 <xTaskGetCurrentTaskHandle>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	429c      	cmp	r4, r3
 800b1cc:	d111      	bne.n	800b1f2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	1e5a      	subs	r2, r3, #1
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d105      	bne.n	800b1ec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	6938      	ldr	r0, [r7, #16]
 800b1e8:	f000 f840 	bl	800b26c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	e001      	b.n	800b1f6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b1f6:	697b      	ldr	r3, [r7, #20]
	}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd90      	pop	{r4, r7, pc}

0800b200 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d10a      	bne.n	800b22a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	60fb      	str	r3, [r7, #12]
}
 800b226:	bf00      	nop
 800b228:	e7fe      	b.n	800b228 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	689c      	ldr	r4, [r3, #8]
 800b22e:	f001 ffcf 	bl	800d1d0 <xTaskGetCurrentTaskHandle>
 800b232:	4603      	mov	r3, r0
 800b234:	429c      	cmp	r4, r3
 800b236:	d107      	bne.n	800b248 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	1c5a      	adds	r2, r3, #1
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b242:	2301      	movs	r3, #1
 800b244:	617b      	str	r3, [r7, #20]
 800b246:	e00c      	b.n	800b262 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6938      	ldr	r0, [r7, #16]
 800b24c:	f000 fa88 	bl	800b760 <xQueueSemaphoreTake>
 800b250:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d004      	beq.n	800b262 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	1c5a      	adds	r2, r3, #1
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b262:	697b      	ldr	r3, [r7, #20]
	}
 800b264:	4618      	mov	r0, r3
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd90      	pop	{r4, r7, pc}

0800b26c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08e      	sub	sp, #56	; 0x38
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b27a:	2300      	movs	r3, #0
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xQueueGenericSend+0x32>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d103      	bne.n	800b2ac <xQueueGenericSend+0x40>
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <xQueueGenericSend+0x44>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e000      	b.n	800b2b2 <xQueueGenericSend+0x46>
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <xQueueGenericSend+0x60>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2c8:	bf00      	nop
 800b2ca:	e7fe      	b.n	800b2ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d103      	bne.n	800b2da <xQueueGenericSend+0x6e>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d101      	bne.n	800b2de <xQueueGenericSend+0x72>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <xQueueGenericSend+0x74>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d10a      	bne.n	800b2fa <xQueueGenericSend+0x8e>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	623b      	str	r3, [r7, #32]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2fa:	f001 ff79 	bl	800d1f0 <xTaskGetSchedulerState>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d102      	bne.n	800b30a <xQueueGenericSend+0x9e>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <xQueueGenericSend+0xa2>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueGenericSend+0xa4>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xQueueGenericSend+0xbe>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	61fb      	str	r3, [r7, #28]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b32a:	f002 fefb 	bl	800e124 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b336:	429a      	cmp	r2, r3
 800b338:	d302      	bcc.n	800b340 <xQueueGenericSend+0xd4>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d129      	bne.n	800b394 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	68b9      	ldr	r1, [r7, #8]
 800b344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b346:	f000 fbaf 	bl	800baa8 <prvCopyDataToQueue>
 800b34a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	2b00      	cmp	r3, #0
 800b352:	d010      	beq.n	800b376 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b356:	3324      	adds	r3, #36	; 0x24
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fd51 	bl	800ce00 <xTaskRemoveFromEventList>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d013      	beq.n	800b38c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b364:	4b3f      	ldr	r3, [pc, #252]	; (800b464 <xQueueGenericSend+0x1f8>)
 800b366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	e00a      	b.n	800b38c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d007      	beq.n	800b38c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b37c:	4b39      	ldr	r3, [pc, #228]	; (800b464 <xQueueGenericSend+0x1f8>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b38c:	f002 fefa 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800b390:	2301      	movs	r3, #1
 800b392:	e063      	b.n	800b45c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d103      	bne.n	800b3a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b39a:	f002 fef3 	bl	800e184 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e05c      	b.n	800b45c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d106      	bne.n	800b3b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3a8:	f107 0314 	add.w	r3, r7, #20
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f001 fdb1 	bl	800cf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3b6:	f002 fee5 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3ba:	f001 facb 	bl	800c954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3be:	f002 feb1 	bl	800e124 <vPortEnterCritical>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3c8:	b25b      	sxtb	r3, r3
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d103      	bne.n	800b3d8 <xQueueGenericSend+0x16c>
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3de:	b25b      	sxtb	r3, r3
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e4:	d103      	bne.n	800b3ee <xQueueGenericSend+0x182>
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3ee:	f002 fec9 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3f2:	1d3a      	adds	r2, r7, #4
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4611      	mov	r1, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f001 fda0 	bl	800cf40 <xTaskCheckForTimeOut>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d124      	bne.n	800b450 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b408:	f000 fc46 	bl	800bc98 <prvIsQueueFull>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d018      	beq.n	800b444 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	3310      	adds	r3, #16
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f001 fca0 	bl	800cd60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b422:	f000 fbd1 	bl	800bbc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b426:	f001 faa3 	bl	800c970 <xTaskResumeAll>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f47f af7c 	bne.w	800b32a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <xQueueGenericSend+0x1f8>)
 800b434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	e772      	b.n	800b32a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b446:	f000 fbbf 	bl	800bbc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b44a:	f001 fa91 	bl	800c970 <xTaskResumeAll>
 800b44e:	e76c      	b.n	800b32a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b452:	f000 fbb9 	bl	800bbc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b456:	f001 fa8b 	bl	800c970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b45a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3738      	adds	r7, #56	; 0x38
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b090      	sub	sp, #64	; 0x40
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <xQueueGenericSendFromISR+0x3c>
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <xQueueGenericSendFromISR+0x40>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e000      	b.n	800b4aa <xQueueGenericSendFromISR+0x42>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	d103      	bne.n	800b4d2 <xQueueGenericSendFromISR+0x6a>
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d101      	bne.n	800b4d6 <xQueueGenericSendFromISR+0x6e>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueGenericSendFromISR+0x70>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	623b      	str	r3, [r7, #32]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4f2:	f002 fef9 	bl	800e2e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	61fa      	str	r2, [r7, #28]
 800b50c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b50e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d302      	bcc.n	800b524 <xQueueGenericSendFromISR+0xbc>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b02      	cmp	r3, #2
 800b522:	d12f      	bne.n	800b584 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	68b9      	ldr	r1, [r7, #8]
 800b538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b53a:	f000 fab5 	bl	800baa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b53e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b546:	d112      	bne.n	800b56e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d016      	beq.n	800b57e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	3324      	adds	r3, #36	; 0x24
 800b554:	4618      	mov	r0, r3
 800b556:	f001 fc53 	bl	800ce00 <xTaskRemoveFromEventList>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00e      	beq.n	800b57e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00b      	beq.n	800b57e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	601a      	str	r2, [r3, #0]
 800b56c:	e007      	b.n	800b57e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b56e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b572:	3301      	adds	r3, #1
 800b574:	b2db      	uxtb	r3, r3
 800b576:	b25a      	sxtb	r2, r3
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b57e:	2301      	movs	r3, #1
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b582:	e001      	b.n	800b588 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b584:	2300      	movs	r3, #0
 800b586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b592:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b596:	4618      	mov	r0, r3
 800b598:	3740      	adds	r7, #64	; 0x40
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08c      	sub	sp, #48	; 0x30
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <xQueueReceive+0x30>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	623b      	str	r3, [r7, #32]
}
 800b5cc:	bf00      	nop
 800b5ce:	e7fe      	b.n	800b5ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <xQueueReceive+0x3e>
 800b5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <xQueueReceive+0x42>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <xQueueReceive+0x44>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <xQueueReceive+0x5e>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	61fb      	str	r3, [r7, #28]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5fe:	f001 fdf7 	bl	800d1f0 <xTaskGetSchedulerState>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <xQueueReceive+0x6e>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <xQueueReceive+0x72>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <xQueueReceive+0x74>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10a      	bne.n	800b62e <xQueueReceive+0x8e>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	61bb      	str	r3, [r7, #24]
}
 800b62a:	bf00      	nop
 800b62c:	e7fe      	b.n	800b62c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b62e:	f002 fd79 	bl	800e124 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b636:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d01f      	beq.n	800b67e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b642:	f000 fa9b 	bl	800bb7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	1e5a      	subs	r2, r3, #1
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00f      	beq.n	800b676 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	3310      	adds	r3, #16
 800b65a:	4618      	mov	r0, r3
 800b65c:	f001 fbd0 	bl	800ce00 <xTaskRemoveFromEventList>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b666:	4b3d      	ldr	r3, [pc, #244]	; (800b75c <xQueueReceive+0x1bc>)
 800b668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b676:	f002 fd85 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e069      	b.n	800b752 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d103      	bne.n	800b68c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b684:	f002 fd7e 	bl	800e184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b688:	2300      	movs	r3, #0
 800b68a:	e062      	b.n	800b752 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d106      	bne.n	800b6a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b692:	f107 0310 	add.w	r3, r7, #16
 800b696:	4618      	mov	r0, r3
 800b698:	f001 fc3c 	bl	800cf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6a0:	f002 fd70 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6a4:	f001 f956 	bl	800c954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6a8:	f002 fd3c 	bl	800e124 <vPortEnterCritical>
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6b2:	b25b      	sxtb	r3, r3
 800b6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b8:	d103      	bne.n	800b6c2 <xQueueReceive+0x122>
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6c8:	b25b      	sxtb	r3, r3
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ce:	d103      	bne.n	800b6d8 <xQueueReceive+0x138>
 800b6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6d8:	f002 fd54 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6dc:	1d3a      	adds	r2, r7, #4
 800b6de:	f107 0310 	add.w	r3, r7, #16
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f001 fc2b 	bl	800cf40 <xTaskCheckForTimeOut>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d123      	bne.n	800b738 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6f2:	f000 fabb 	bl	800bc6c <prvIsQueueEmpty>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d017      	beq.n	800b72c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	3324      	adds	r3, #36	; 0x24
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f001 fb2b 	bl	800cd60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b70c:	f000 fa5c 	bl	800bbc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b710:	f001 f92e 	bl	800c970 <xTaskResumeAll>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d189      	bne.n	800b62e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b71a:	4b10      	ldr	r3, [pc, #64]	; (800b75c <xQueueReceive+0x1bc>)
 800b71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	e780      	b.n	800b62e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b72e:	f000 fa4b 	bl	800bbc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b732:	f001 f91d 	bl	800c970 <xTaskResumeAll>
 800b736:	e77a      	b.n	800b62e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b73a:	f000 fa45 	bl	800bbc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b73e:	f001 f917 	bl	800c970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b744:	f000 fa92 	bl	800bc6c <prvIsQueueEmpty>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f43f af6f 	beq.w	800b62e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b752:	4618      	mov	r0, r3
 800b754:	3730      	adds	r7, #48	; 0x30
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	e000ed04 	.word	0xe000ed04

0800b760 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08e      	sub	sp, #56	; 0x38
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10a      	bne.n	800b792 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	623b      	str	r3, [r7, #32]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	61fb      	str	r3, [r7, #28]
}
 800b7ac:	bf00      	nop
 800b7ae:	e7fe      	b.n	800b7ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7b0:	f001 fd1e 	bl	800d1f0 <xTaskGetSchedulerState>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <xQueueSemaphoreTake+0x60>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <xQueueSemaphoreTake+0x64>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <xQueueSemaphoreTake+0x66>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10a      	bne.n	800b7e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	61bb      	str	r3, [r7, #24]
}
 800b7dc:	bf00      	nop
 800b7de:	e7fe      	b.n	800b7de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7e0:	f002 fca0 	bl	800e124 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d024      	beq.n	800b83a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	1e5a      	subs	r2, r3, #1
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d104      	bne.n	800b80a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b800:	f001 fe6c 	bl	800d4dc <pvTaskIncrementMutexHeldCount>
 800b804:	4602      	mov	r2, r0
 800b806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b808:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00f      	beq.n	800b832 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b814:	3310      	adds	r3, #16
 800b816:	4618      	mov	r0, r3
 800b818:	f001 faf2 	bl	800ce00 <xTaskRemoveFromEventList>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b822:	4b54      	ldr	r3, [pc, #336]	; (800b974 <xQueueSemaphoreTake+0x214>)
 800b824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b832:	f002 fca7 	bl	800e184 <vPortExitCritical>
				return pdPASS;
 800b836:	2301      	movs	r3, #1
 800b838:	e097      	b.n	800b96a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d111      	bne.n	800b864 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	617b      	str	r3, [r7, #20]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b85c:	f002 fc92 	bl	800e184 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b860:	2300      	movs	r3, #0
 800b862:	e082      	b.n	800b96a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b86a:	f107 030c 	add.w	r3, r7, #12
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fb50 	bl	800cf14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b878:	f002 fc84 	bl	800e184 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b87c:	f001 f86a 	bl	800c954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b880:	f002 fc50 	bl	800e124 <vPortEnterCritical>
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b88a:	b25b      	sxtb	r3, r3
 800b88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b890:	d103      	bne.n	800b89a <xQueueSemaphoreTake+0x13a>
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a0:	b25b      	sxtb	r3, r3
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d103      	bne.n	800b8b0 <xQueueSemaphoreTake+0x150>
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b0:	f002 fc68 	bl	800e184 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8b4:	463a      	mov	r2, r7
 800b8b6:	f107 030c 	add.w	r3, r7, #12
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fb3f 	bl	800cf40 <xTaskCheckForTimeOut>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d132      	bne.n	800b92e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8ca:	f000 f9cf 	bl	800bc6c <prvIsQueueEmpty>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d026      	beq.n	800b922 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d109      	bne.n	800b8f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b8dc:	f002 fc22 	bl	800e124 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fca1 	bl	800d22c <xTaskPriorityInherit>
 800b8ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b8ec:	f002 fc4a 	bl	800e184 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	3324      	adds	r3, #36	; 0x24
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 fa31 	bl	800cd60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b900:	f000 f962 	bl	800bbc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b904:	f001 f834 	bl	800c970 <xTaskResumeAll>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f47f af68 	bne.w	800b7e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b910:	4b18      	ldr	r3, [pc, #96]	; (800b974 <xQueueSemaphoreTake+0x214>)
 800b912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	e75e      	b.n	800b7e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b924:	f000 f950 	bl	800bbc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b928:	f001 f822 	bl	800c970 <xTaskResumeAll>
 800b92c:	e758      	b.n	800b7e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b930:	f000 f94a 	bl	800bbc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b934:	f001 f81c 	bl	800c970 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b93a:	f000 f997 	bl	800bc6c <prvIsQueueEmpty>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f43f af4d 	beq.w	800b7e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00d      	beq.n	800b968 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b94c:	f002 fbea 	bl	800e124 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b952:	f000 f891 	bl	800ba78 <prvGetDisinheritPriorityAfterTimeout>
 800b956:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 fd3a 	bl	800d3d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b964:	f002 fc0e 	bl	800e184 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3738      	adds	r7, #56	; 0x38
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	e000ed04 	.word	0xe000ed04

0800b978 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b08e      	sub	sp, #56	; 0x38
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	623b      	str	r3, [r7, #32]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <xQueueReceiveFromISR+0x3a>
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xQueueReceiveFromISR+0x3e>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueReceiveFromISR+0x40>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61fb      	str	r3, [r7, #28]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9d2:	f002 fc89 	bl	800e2e8 <vPortValidateInterruptPriority>
	__asm volatile
 800b9d6:	f3ef 8211 	mrs	r2, BASEPRI
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	61ba      	str	r2, [r7, #24]
 800b9ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b9ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d02f      	beq.n	800ba5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba0c:	f000 f8b6 	bl	800bb7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	1e5a      	subs	r2, r3, #1
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ba18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba20:	d112      	bne.n	800ba48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d016      	beq.n	800ba58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	3310      	adds	r3, #16
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f001 f9e6 	bl	800ce00 <xTaskRemoveFromEventList>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00e      	beq.n	800ba58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	e007      	b.n	800ba58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	b25a      	sxtb	r2, r3
 800ba52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba5c:	e001      	b.n	800ba62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	637b      	str	r3, [r7, #52]	; 0x34
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	f383 8811 	msr	BASEPRI, r3
}
 800ba6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3738      	adds	r7, #56	; 0x38
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d006      	beq.n	800ba96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e001      	b.n	800ba9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
	}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b086      	sub	sp, #24
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10d      	bne.n	800bae2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d14d      	bne.n	800bb6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f001 fc12 	bl	800d2fc <xTaskPriorityDisinherit>
 800bad8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	609a      	str	r2, [r3, #8]
 800bae0:	e043      	b.n	800bb6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d119      	bne.n	800bb1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6858      	ldr	r0, [r3, #4]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf0:	461a      	mov	r2, r3
 800baf2:	68b9      	ldr	r1, [r7, #8]
 800baf4:	f002 ff96 	bl	800ea24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d32b      	bcc.n	800bb6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	605a      	str	r2, [r3, #4]
 800bb1a:	e026      	b.n	800bb6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	68d8      	ldr	r0, [r3, #12]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	461a      	mov	r2, r3
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	f002 ff7c 	bl	800ea24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb34:	425b      	negs	r3, r3
 800bb36:	441a      	add	r2, r3
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68da      	ldr	r2, [r3, #12]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d207      	bcs.n	800bb58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb50:	425b      	negs	r3, r3
 800bb52:	441a      	add	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d105      	bne.n	800bb6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb72:	697b      	ldr	r3, [r7, #20]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d018      	beq.n	800bbc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68da      	ldr	r2, [r3, #12]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	441a      	add	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d303      	bcc.n	800bbb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	68d9      	ldr	r1, [r3, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb8:	461a      	mov	r2, r3
 800bbba:	6838      	ldr	r0, [r7, #0]
 800bbbc:	f002 ff32 	bl	800ea24 <memcpy>
	}
}
 800bbc0:	bf00      	nop
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbd0:	f002 faa8 	bl	800e124 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbdc:	e011      	b.n	800bc02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d012      	beq.n	800bc0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3324      	adds	r3, #36	; 0x24
 800bbea:	4618      	mov	r0, r3
 800bbec:	f001 f908 	bl	800ce00 <xTaskRemoveFromEventList>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d001      	beq.n	800bbfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbf6:	f001 fa05 	bl	800d004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dce9      	bgt.n	800bbde <prvUnlockQueue+0x16>
 800bc0a:	e000      	b.n	800bc0e <prvUnlockQueue+0x46>
					break;
 800bc0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	22ff      	movs	r2, #255	; 0xff
 800bc12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc16:	f002 fab5 	bl	800e184 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc1a:	f002 fa83 	bl	800e124 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc26:	e011      	b.n	800bc4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d012      	beq.n	800bc56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3310      	adds	r3, #16
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 f8e3 	bl	800ce00 <xTaskRemoveFromEventList>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc40:	f001 f9e0 	bl	800d004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	dce9      	bgt.n	800bc28 <prvUnlockQueue+0x60>
 800bc54:	e000      	b.n	800bc58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	22ff      	movs	r2, #255	; 0xff
 800bc5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc60:	f002 fa90 	bl	800e184 <vPortExitCritical>
}
 800bc64:	bf00      	nop
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc74:	f002 fa56 	bl	800e124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d102      	bne.n	800bc86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc80:	2301      	movs	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e001      	b.n	800bc8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc8a:	f002 fa7b 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bca0:	f002 fa40 	bl	800e124 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d102      	bne.n	800bcb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	e001      	b.n	800bcba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcba:	f002 fa63 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	e014      	b.n	800bd02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bcd8:	4a0f      	ldr	r2, [pc, #60]	; (800bd18 <vQueueAddToRegistry+0x50>)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10b      	bne.n	800bcfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bce4:	490c      	ldr	r1, [pc, #48]	; (800bd18 <vQueueAddToRegistry+0x50>)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bcee:	4a0a      	ldr	r2, [pc, #40]	; (800bd18 <vQueueAddToRegistry+0x50>)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bcfa:	e006      	b.n	800bd0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b07      	cmp	r3, #7
 800bd06:	d9e7      	bls.n	800bcd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	20001234 	.word	0x20001234

0800bd1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd2c:	f002 f9fa 	bl	800e124 <vPortEnterCritical>
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3c:	d103      	bne.n	800bd46 <vQueueWaitForMessageRestricted+0x2a>
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd4c:	b25b      	sxtb	r3, r3
 800bd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd52:	d103      	bne.n	800bd5c <vQueueWaitForMessageRestricted+0x40>
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd5c:	f002 fa12 	bl	800e184 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	3324      	adds	r3, #36	; 0x24
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 f819 	bl	800cda8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd76:	6978      	ldr	r0, [r7, #20]
 800bd78:	f7ff ff26 	bl	800bbc8 <prvUnlockQueue>
	}
 800bd7c:	bf00      	nop
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b08c      	sub	sp, #48	; 0x30
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d110      	bne.n	800bdb8 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	d81b      	bhi.n	800bdda <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	61fb      	str	r3, [r7, #28]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10a      	bne.n	800bdda <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	61bb      	str	r3, [r7, #24]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d90a      	bls.n	800bdf8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	617b      	str	r3, [r7, #20]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800bdfe:	2301      	movs	r3, #1
 800be00:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3301      	adds	r3, #1
 800be06:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3324      	adds	r3, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f002 faab 	bl	800e368 <pvPortMalloc>
 800be12:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800be14:	6a3b      	ldr	r3, [r7, #32]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00a      	beq.n	800be30 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800be20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	6a38      	ldr	r0, [r7, #32]
 800be2c:	f000 fafd 	bl	800c42a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800be30:	6a3b      	ldr	r3, [r7, #32]
	}
 800be32:	4618      	mov	r0, r3
 800be34:	3728      	adds	r7, #40	; 0x28
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800be3a:	b480      	push	{r7}
 800be3c:	b087      	sub	sp, #28
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d10a      	bne.n	800be62 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60fb      	str	r3, [r7, #12]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	689a      	ldr	r2, [r3, #8]
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4413      	add	r3, r2
 800be6c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	697a      	ldr	r2, [r7, #20]
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	429a      	cmp	r2, r3
 800be86:	d304      	bcc.n	800be92 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800be92:	697b      	ldr	r3, [r7, #20]
}
 800be94:	4618      	mov	r0, r3
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b090      	sub	sp, #64	; 0x40
 800bea4:	af02      	add	r7, sp, #8
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
 800beac:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xStreamBufferSend+0x36>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <xStreamBufferSend+0x52>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	623b      	str	r3, [r7, #32]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800bef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef4:	7f1b      	ldrb	r3, [r3, #28]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d011      	beq.n	800bf22 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	3304      	adds	r3, #4
 800bf02:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800bf04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d80a      	bhi.n	800bf22 <xStreamBufferSend+0x82>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	61fb      	str	r3, [r7, #28]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d03e      	beq.n	800bfa6 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800bf28:	f107 0310 	add.w	r3, r7, #16
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 ffcb 	bl	800cec8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800bf32:	f002 f8f7 	bl	800e124 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800bf36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf38:	f7ff ff7f 	bl	800be3a <xStreamBufferSpacesAvailable>
 800bf3c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800bf3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d217      	bcs.n	800bf76 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800bf46:	2000      	movs	r0, #0
 800bf48:	f001 fbfa 	bl	800d740 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <xStreamBufferSend+0xca>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	61bb      	str	r3, [r7, #24]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800bf6a:	f001 f931 	bl	800d1d0 <xTaskGetCurrentTaskHandle>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf72:	615a      	str	r2, [r3, #20]
 800bf74:	e002      	b.n	800bf7c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800bf76:	f002 f905 	bl	800e184 <vPortExitCritical>
					break;
 800bf7a:	e014      	b.n	800bfa6 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800bf7c:	f002 f902 	bl	800e184 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2200      	movs	r2, #0
 800bf84:	2100      	movs	r1, #0
 800bf86:	2000      	movs	r0, #0
 800bf88:	f001 fabc 	bl	800d504 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800bf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8e:	2200      	movs	r2, #0
 800bf90:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800bf92:	463a      	mov	r2, r7
 800bf94:	f107 0310 	add.w	r3, r7, #16
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 ffd0 	bl	800cf40 <xTaskCheckForTimeOut>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0c5      	beq.n	800bf32 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800bfac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfae:	f7ff ff44 	bl	800be3a <xStreamBufferSpacesAvailable>
 800bfb2:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc0:	f000 f823 	bl	800c00a <prvWriteMessageToBuffer>
 800bfc4:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d019      	beq.n	800c000 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800bfcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfce:	f000 fa0c 	bl	800c3ea <prvBytesInBuffer>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d311      	bcc.n	800c000 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800bfdc:	f000 fcba 	bl	800c954 <vTaskSuspendAll>
 800bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d009      	beq.n	800bffc <xStreamBufferSend+0x15c>
 800bfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfea:	6918      	ldr	r0, [r3, #16]
 800bfec:	2300      	movs	r3, #0
 800bfee:	2200      	movs	r2, #0
 800bff0:	2100      	movs	r1, #0
 800bff2:	f001 fae7 	bl	800d5c4 <xTaskGenericNotify>
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	2200      	movs	r2, #0
 800bffa:	611a      	str	r2, [r3, #16]
 800bffc:	f000 fcb8 	bl	800c970 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c002:	4618      	mov	r0, r3
 800c004:	3738      	adds	r7, #56	; 0x38
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b086      	sub	sp, #24
 800c00e:	af00      	add	r7, sp, #0
 800c010:	60f8      	str	r0, [r7, #12]
 800c012:	60b9      	str	r1, [r7, #8]
 800c014:	607a      	str	r2, [r7, #4]
 800c016:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800c01e:	2300      	movs	r3, #0
 800c020:	617b      	str	r3, [r7, #20]
 800c022:	e01d      	b.n	800c060 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	7f1b      	ldrb	r3, [r3, #28]
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d108      	bne.n	800c042 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	4293      	cmp	r3, r2
 800c03a:	bf28      	it	cs
 800c03c:	4613      	movcs	r3, r2
 800c03e:	607b      	str	r3, [r7, #4]
 800c040:	e00e      	b.n	800c060 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	429a      	cmp	r2, r3
 800c048:	d308      	bcc.n	800c05c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800c04a:	2301      	movs	r3, #1
 800c04c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	2204      	movs	r2, #4
 800c052:	4619      	mov	r1, r3
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 f8dc 	bl	800c212 <prvWriteBytesToBuffer>
 800c05a:	e001      	b.n	800c060 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d007      	beq.n	800c076 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	461a      	mov	r2, r3
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f8d0 	bl	800c212 <prvWriteBytesToBuffer>
 800c072:	6138      	str	r0, [r7, #16]
 800c074:	e001      	b.n	800c07a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800c07a:	693b      	ldr	r3, [r7, #16]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	; 0x38
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800c096:	2300      	movs	r3, #0
 800c098:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10a      	bne.n	800c0b6 <xStreamBufferReceive+0x32>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	61fb      	str	r3, [r7, #28]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xStreamBufferReceive+0x4e>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	61bb      	str	r3, [r7, #24]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	7f1b      	ldrb	r3, [r3, #28]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800c0de:	2304      	movs	r3, #4
 800c0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c0e2:	e001      	b.n	800c0e8 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d034      	beq.n	800c158 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800c0ee:	f002 f819 	bl	800e124 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c0f2:	6a38      	ldr	r0, [r7, #32]
 800c0f4:	f000 f979 	bl	800c3ea <prvBytesInBuffer>
 800c0f8:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800c0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d816      	bhi.n	800c130 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800c102:	2000      	movs	r0, #0
 800c104:	f001 fb1c 	bl	800d740 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800c108:	6a3b      	ldr	r3, [r7, #32]
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d00a      	beq.n	800c126 <xStreamBufferReceive+0xa2>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	617b      	str	r3, [r7, #20]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800c126:	f001 f853 	bl	800d1d0 <xTaskGetCurrentTaskHandle>
 800c12a:	4602      	mov	r2, r0
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c130:	f002 f828 	bl	800e184 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800c134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	429a      	cmp	r2, r3
 800c13a:	d811      	bhi.n	800c160 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	2100      	movs	r1, #0
 800c142:	2000      	movs	r0, #0
 800c144:	f001 f9de 	bl	800d504 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	2200      	movs	r2, #0
 800c14c:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c14e:	6a38      	ldr	r0, [r7, #32]
 800c150:	f000 f94b 	bl	800c3ea <prvBytesInBuffer>
 800c154:	62b8      	str	r0, [r7, #40]	; 0x28
 800c156:	e003      	b.n	800c160 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800c158:	6a38      	ldr	r0, [r7, #32]
 800c15a:	f000 f946 	bl	800c3ea <prvBytesInBuffer>
 800c15e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800c160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	429a      	cmp	r2, r3
 800c166:	d91d      	bls.n	800c1a4 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	68b9      	ldr	r1, [r7, #8]
 800c172:	6a38      	ldr	r0, [r7, #32]
 800c174:	f000 f81b 	bl	800c1ae <prvReadMessageFromBuffer>
 800c178:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800c17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d011      	beq.n	800c1a4 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800c180:	f000 fbe8 	bl	800c954 <vTaskSuspendAll>
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d009      	beq.n	800c1a0 <xStreamBufferReceive+0x11c>
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	6958      	ldr	r0, [r3, #20]
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	2100      	movs	r1, #0
 800c196:	f001 fa15 	bl	800d5c4 <xTaskGenericNotify>
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	2200      	movs	r2, #0
 800c19e:	615a      	str	r2, [r3, #20]
 800c1a0:	f000 fbe6 	bl	800c970 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3730      	adds	r7, #48	; 0x30
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b088      	sub	sp, #32
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
 800c1ba:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800c1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d019      	beq.n	800c1f6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800c1c8:	f107 0110 	add.w	r1, r7, #16
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 f890 	bl	800c2f6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800c1e2:	69fa      	ldr	r2, [r7, #28]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d907      	bls.n	800c1fa <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61fb      	str	r3, [r7, #28]
 800c1f4:	e001      	b.n	800c1fa <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f000 f878 	bl	800c2f6 <prvReadBytesFromBuffer>
 800c206:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800c208:	697b      	ldr	r3, [r7, #20]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b08a      	sub	sp, #40	; 0x28
 800c216:	af00      	add	r7, sp, #0
 800c218:	60f8      	str	r0, [r7, #12]
 800c21a:	60b9      	str	r1, [r7, #8]
 800c21c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	61fb      	str	r3, [r7, #28]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	689a      	ldr	r2, [r3, #8]
 800c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4293      	cmp	r3, r2
 800c24c:	bf28      	it	cs
 800c24e:	4613      	movcs	r3, r2
 800c250:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800c252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	441a      	add	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d90a      	bls.n	800c276 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	61bb      	str	r3, [r7, #24]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699a      	ldr	r2, [r3, #24]
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	4413      	add	r3, r2
 800c27e:	6a3a      	ldr	r2, [r7, #32]
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	4618      	mov	r0, r3
 800c284:	f002 fbce 	bl	800ea24 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d91c      	bls.n	800c2ca <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	1ad2      	subs	r2, r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d90a      	bls.n	800c2b4 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	617b      	str	r3, [r7, #20]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6998      	ldr	r0, [r3, #24]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	6a3b      	ldr	r3, [r7, #32]
 800c2bc:	18d1      	adds	r1, r2, r3
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	f002 fbad 	bl	800ea24 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800c2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d304      	bcc.n	800c2e6 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ea:	605a      	str	r2, [r3, #4]

	return xCount;
 800c2ec:	687b      	ldr	r3, [r7, #4]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3728      	adds	r7, #40	; 0x28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b08a      	sub	sp, #40	; 0x28
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	4293      	cmp	r3, r2
 800c30a:	bf28      	it	cs
 800c30c:	4613      	movcs	r3, r2
 800c30e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d064      	beq.n	800c3e0 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	689a      	ldr	r2, [r3, #8]
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	1ad3      	subs	r3, r2, r3
 800c324:	6a3a      	ldr	r2, [r7, #32]
 800c326:	4293      	cmp	r3, r2
 800c328:	bf28      	it	cs
 800c32a:	4613      	movcs	r3, r2
 800c32c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800c32e:	69fa      	ldr	r2, [r7, #28]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	429a      	cmp	r2, r3
 800c334:	d90a      	bls.n	800c34c <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800c336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33a:	f383 8811 	msr	BASEPRI, r3
 800c33e:	f3bf 8f6f 	isb	sy
 800c342:	f3bf 8f4f 	dsb	sy
 800c346:	61bb      	str	r3, [r7, #24]
}
 800c348:	bf00      	nop
 800c34a:	e7fe      	b.n	800c34a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800c34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	441a      	add	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	429a      	cmp	r2, r3
 800c358:	d90a      	bls.n	800c370 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	617b      	str	r3, [r7, #20]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c376:	4413      	add	r3, r2
 800c378:	69fa      	ldr	r2, [r7, #28]
 800c37a:	4619      	mov	r1, r3
 800c37c:	68b8      	ldr	r0, [r7, #8]
 800c37e:	f002 fb51 	bl	800ea24 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800c382:	6a3a      	ldr	r2, [r7, #32]
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	429a      	cmp	r2, r3
 800c388:	d919      	bls.n	800c3be <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800c38a:	6a3a      	ldr	r2, [r7, #32]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d90a      	bls.n	800c3a8 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	613b      	str	r3, [r7, #16]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	18d0      	adds	r0, r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6999      	ldr	r1, [r3, #24]
 800c3b2:	6a3a      	ldr	r2, [r7, #32]
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	f002 fb33 	bl	800ea24 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800c3be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d304      	bcc.n	800c3da <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3de:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3728      	adds	r7, #40	; 0x28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	689a      	ldr	r2, [r3, #8]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d304      	bcc.n	800c41c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800c41c:	68fb      	ldr	r3, [r7, #12]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b086      	sub	sp, #24
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800c438:	2355      	movs	r3, #85	; 0x55
 800c43a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f002 fafd 	bl	800ea40 <memset>
 800c446:	4602      	mov	r2, r0
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d00a      	beq.n	800c464 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	613b      	str	r3, [r7, #16]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800c464:	2224      	movs	r2, #36	; 0x24
 800c466:	2100      	movs	r1, #0
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f002 fae9 	bl	800ea40 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f897 2020 	ldrb.w	r2, [r7, #32]
 800c486:	771a      	strb	r2, [r3, #28]
}
 800c488:	bf00      	nop
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08e      	sub	sp, #56	; 0x38
 800c494:	af04      	add	r7, sp, #16
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61fb      	str	r3, [r7, #28]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4d6:	23c0      	movs	r3, #192	; 0xc0
 800c4d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	2bc0      	cmp	r3, #192	; 0xc0
 800c4de:	d00a      	beq.n	800c4f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	61bb      	str	r3, [r7, #24]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d01e      	beq.n	800c53c <xTaskCreateStatic+0xac>
 800c4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01b      	beq.n	800c53c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c50c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	2202      	movs	r2, #2
 800c512:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c516:	2300      	movs	r3, #0
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	f107 0314 	add.w	r3, r7, #20
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	68b9      	ldr	r1, [r7, #8]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 f850 	bl	800c5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c536:	f000 f8f7 	bl	800c728 <prvAddNewTaskToReadyList>
 800c53a:	e001      	b.n	800c540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c540:	697b      	ldr	r3, [r7, #20]
	}
 800c542:	4618      	mov	r0, r3
 800c544:	3728      	adds	r7, #40	; 0x28
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b08c      	sub	sp, #48	; 0x30
 800c54e:	af04      	add	r7, sp, #16
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	603b      	str	r3, [r7, #0]
 800c556:	4613      	mov	r3, r2
 800c558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 ff02 	bl	800e368 <pvPortMalloc>
 800c564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00e      	beq.n	800c58a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c56c:	20c0      	movs	r0, #192	; 0xc0
 800c56e:	f001 fefb 	bl	800e368 <pvPortMalloc>
 800c572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	631a      	str	r2, [r3, #48]	; 0x30
 800c580:	e005      	b.n	800c58e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c582:	6978      	ldr	r0, [r7, #20]
 800c584:	f001 ffc0 	bl	800e508 <vPortFree>
 800c588:	e001      	b.n	800c58e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d017      	beq.n	800c5c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c59c:	88fa      	ldrh	r2, [r7, #6]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9303      	str	r3, [sp, #12]
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	9302      	str	r3, [sp, #8]
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 f80e 	bl	800c5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5b8:	69f8      	ldr	r0, [r7, #28]
 800c5ba:	f000 f8b5 	bl	800c728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	61bb      	str	r3, [r7, #24]
 800c5c2:	e002      	b.n	800c5ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	21a5      	movs	r1, #165	; 0xa5
 800c5ee:	f002 fa27 	bl	800ea40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	f023 0307 	bic.w	r3, r3, #7
 800c60a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	f003 0307 	and.w	r3, r3, #7
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	617b      	str	r3, [r7, #20]
}
 800c628:	bf00      	nop
 800c62a:	e7fe      	b.n	800c62a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01f      	beq.n	800c672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c632:	2300      	movs	r3, #0
 800c634:	61fb      	str	r3, [r7, #28]
 800c636:	e012      	b.n	800c65e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	4413      	add	r3, r2
 800c63e:	7819      	ldrb	r1, [r3, #0]
 800c640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	3334      	adds	r3, #52	; 0x34
 800c648:	460a      	mov	r2, r1
 800c64a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	4413      	add	r3, r2
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d006      	beq.n	800c666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	3301      	adds	r3, #1
 800c65c:	61fb      	str	r3, [r7, #28]
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	2b0f      	cmp	r3, #15
 800c662:	d9e9      	bls.n	800c638 <prvInitialiseNewTask+0x64>
 800c664:	e000      	b.n	800c668 <prvInitialiseNewTask+0x94>
			{
				break;
 800c666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c670:	e003      	b.n	800c67a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	2b37      	cmp	r3, #55	; 0x37
 800c67e:	d901      	bls.n	800c684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c680:	2337      	movs	r3, #55	; 0x37
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c68e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2200      	movs	r2, #0
 800c694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	3304      	adds	r3, #4
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fb5e 	bl	800ad5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	3318      	adds	r3, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fb59 	bl	800ad5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	3358      	adds	r3, #88	; 0x58
 800c6da:	2260      	movs	r2, #96	; 0x60
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f002 f9ae 	bl	800ea40 <memset>
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	4a0d      	ldr	r2, [pc, #52]	; (800c71c <prvInitialiseNewTask+0x148>)
 800c6e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	4a0c      	ldr	r2, [pc, #48]	; (800c720 <prvInitialiseNewTask+0x14c>)
 800c6ee:	661a      	str	r2, [r3, #96]	; 0x60
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	4a0c      	ldr	r2, [pc, #48]	; (800c724 <prvInitialiseNewTask+0x150>)
 800c6f4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	68f9      	ldr	r1, [r7, #12]
 800c6fa:	69b8      	ldr	r0, [r7, #24]
 800c6fc:	f001 fbe8 	bl	800ded0 <pxPortInitialiseStack>
 800c700:	4602      	mov	r2, r0
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c712:	bf00      	nop
 800c714:	3720      	adds	r7, #32
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	0800fde4 	.word	0x0800fde4
 800c720:	0800fe04 	.word	0x0800fe04
 800c724:	0800fdc4 	.word	0x0800fdc4

0800c728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c730:	f001 fcf8 	bl	800e124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c734:	4b2d      	ldr	r3, [pc, #180]	; (800c7ec <prvAddNewTaskToReadyList+0xc4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3301      	adds	r3, #1
 800c73a:	4a2c      	ldr	r2, [pc, #176]	; (800c7ec <prvAddNewTaskToReadyList+0xc4>)
 800c73c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c73e:	4b2c      	ldr	r3, [pc, #176]	; (800c7f0 <prvAddNewTaskToReadyList+0xc8>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c746:	4a2a      	ldr	r2, [pc, #168]	; (800c7f0 <prvAddNewTaskToReadyList+0xc8>)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c74c:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <prvAddNewTaskToReadyList+0xc4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d110      	bne.n	800c776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c754:	f000 fc7a 	bl	800d04c <prvInitialiseTaskLists>
 800c758:	e00d      	b.n	800c776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c75a:	4b26      	ldr	r3, [pc, #152]	; (800c7f4 <prvAddNewTaskToReadyList+0xcc>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d109      	bne.n	800c776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c762:	4b23      	ldr	r3, [pc, #140]	; (800c7f0 <prvAddNewTaskToReadyList+0xc8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d802      	bhi.n	800c776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c770:	4a1f      	ldr	r2, [pc, #124]	; (800c7f0 <prvAddNewTaskToReadyList+0xc8>)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c776:	4b20      	ldr	r3, [pc, #128]	; (800c7f8 <prvAddNewTaskToReadyList+0xd0>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	3301      	adds	r3, #1
 800c77c:	4a1e      	ldr	r2, [pc, #120]	; (800c7f8 <prvAddNewTaskToReadyList+0xd0>)
 800c77e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c780:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <prvAddNewTaskToReadyList+0xd0>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c78c:	4b1b      	ldr	r3, [pc, #108]	; (800c7fc <prvAddNewTaskToReadyList+0xd4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d903      	bls.n	800c79c <prvAddNewTaskToReadyList+0x74>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c798:	4a18      	ldr	r2, [pc, #96]	; (800c7fc <prvAddNewTaskToReadyList+0xd4>)
 800c79a:	6013      	str	r3, [r2, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4a15      	ldr	r2, [pc, #84]	; (800c800 <prvAddNewTaskToReadyList+0xd8>)
 800c7aa:	441a      	add	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	f7fe fadf 	bl	800ad76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7b8:	f001 fce4 	bl	800e184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7bc:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <prvAddNewTaskToReadyList+0xcc>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <prvAddNewTaskToReadyList+0xc8>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d207      	bcs.n	800c7e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7d2:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <prvAddNewTaskToReadyList+0xdc>)
 800c7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d8:	601a      	str	r2, [r3, #0]
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20001748 	.word	0x20001748
 800c7f0:	20001274 	.word	0x20001274
 800c7f4:	20001754 	.word	0x20001754
 800c7f8:	20001764 	.word	0x20001764
 800c7fc:	20001750 	.word	0x20001750
 800c800:	20001278 	.word	0x20001278
 800c804:	e000ed04 	.word	0xe000ed04

0800c808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d017      	beq.n	800c84a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <vTaskDelay+0x60>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00a      	beq.n	800c838 <vTaskDelay+0x30>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60bb      	str	r3, [r7, #8]
}
 800c834:	bf00      	nop
 800c836:	e7fe      	b.n	800c836 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c838:	f000 f88c 	bl	800c954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c83c:	2100      	movs	r1, #0
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 ffa4 	bl	800d78c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c844:	f000 f894 	bl	800c970 <xTaskResumeAll>
 800c848:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d107      	bne.n	800c860 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c850:	4b06      	ldr	r3, [pc, #24]	; (800c86c <vTaskDelay+0x64>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	20001770 	.word	0x20001770
 800c86c:	e000ed04 	.word	0xe000ed04

0800c870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08a      	sub	sp, #40	; 0x28
 800c874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c876:	2300      	movs	r3, #0
 800c878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c87e:	463a      	mov	r2, r7
 800c880:	1d39      	adds	r1, r7, #4
 800c882:	f107 0308 	add.w	r3, r7, #8
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fa14 	bl	800acb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	9202      	str	r2, [sp, #8]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	2300      	movs	r3, #0
 800c898:	9300      	str	r3, [sp, #0]
 800c89a:	2300      	movs	r3, #0
 800c89c:	460a      	mov	r2, r1
 800c89e:	4925      	ldr	r1, [pc, #148]	; (800c934 <vTaskStartScheduler+0xc4>)
 800c8a0:	4825      	ldr	r0, [pc, #148]	; (800c938 <vTaskStartScheduler+0xc8>)
 800c8a2:	f7ff fdf5 	bl	800c490 <xTaskCreateStatic>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4a24      	ldr	r2, [pc, #144]	; (800c93c <vTaskStartScheduler+0xcc>)
 800c8aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c8ac:	4b23      	ldr	r3, [pc, #140]	; (800c93c <vTaskStartScheduler+0xcc>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	e001      	b.n	800c8be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d102      	bne.n	800c8ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8c4:	f000 ffb6 	bl	800d834 <xTimerCreateTimerTask>
 800c8c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d11d      	bne.n	800c90c <vTaskStartScheduler+0x9c>
	__asm volatile
 800c8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	613b      	str	r3, [r7, #16]
}
 800c8e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8e4:	4b16      	ldr	r3, [pc, #88]	; (800c940 <vTaskStartScheduler+0xd0>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	3358      	adds	r3, #88	; 0x58
 800c8ea:	4a16      	ldr	r2, [pc, #88]	; (800c944 <vTaskStartScheduler+0xd4>)
 800c8ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8ee:	4b16      	ldr	r3, [pc, #88]	; (800c948 <vTaskStartScheduler+0xd8>)
 800c8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8f6:	4b15      	ldr	r3, [pc, #84]	; (800c94c <vTaskStartScheduler+0xdc>)
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8fc:	4b14      	ldr	r3, [pc, #80]	; (800c950 <vTaskStartScheduler+0xe0>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c902:	f7f8 fe8f 	bl	8005624 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c906:	f001 fb6b 	bl	800dfe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c90a:	e00e      	b.n	800c92a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	d10a      	bne.n	800c92a <vTaskStartScheduler+0xba>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	60fb      	str	r3, [r7, #12]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <vTaskStartScheduler+0xb8>
}
 800c92a:	bf00      	nop
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	0800fc7c 	.word	0x0800fc7c
 800c938:	0800d01d 	.word	0x0800d01d
 800c93c:	2000176c 	.word	0x2000176c
 800c940:	20001274 	.word	0x20001274
 800c944:	20000020 	.word	0x20000020
 800c948:	20001768 	.word	0x20001768
 800c94c:	20001754 	.word	0x20001754
 800c950:	2000174c 	.word	0x2000174c

0800c954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c954:	b480      	push	{r7}
 800c956:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c958:	4b04      	ldr	r3, [pc, #16]	; (800c96c <vTaskSuspendAll+0x18>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3301      	adds	r3, #1
 800c95e:	4a03      	ldr	r2, [pc, #12]	; (800c96c <vTaskSuspendAll+0x18>)
 800c960:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c962:	bf00      	nop
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	20001770 	.word	0x20001770

0800c970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c97e:	4b42      	ldr	r3, [pc, #264]	; (800ca88 <xTaskResumeAll+0x118>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10a      	bne.n	800c99c <xTaskResumeAll+0x2c>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	603b      	str	r3, [r7, #0]
}
 800c998:	bf00      	nop
 800c99a:	e7fe      	b.n	800c99a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c99c:	f001 fbc2 	bl	800e124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c9a0:	4b39      	ldr	r3, [pc, #228]	; (800ca88 <xTaskResumeAll+0x118>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	4a38      	ldr	r2, [pc, #224]	; (800ca88 <xTaskResumeAll+0x118>)
 800c9a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9aa:	4b37      	ldr	r3, [pc, #220]	; (800ca88 <xTaskResumeAll+0x118>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d162      	bne.n	800ca78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c9b2:	4b36      	ldr	r3, [pc, #216]	; (800ca8c <xTaskResumeAll+0x11c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d05e      	beq.n	800ca78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9ba:	e02f      	b.n	800ca1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9bc:	4b34      	ldr	r3, [pc, #208]	; (800ca90 <xTaskResumeAll+0x120>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3318      	adds	r3, #24
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fa31 	bl	800ae30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe fa2c 	bl	800ae30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9dc:	4b2d      	ldr	r3, [pc, #180]	; (800ca94 <xTaskResumeAll+0x124>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d903      	bls.n	800c9ec <xTaskResumeAll+0x7c>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e8:	4a2a      	ldr	r2, [pc, #168]	; (800ca94 <xTaskResumeAll+0x124>)
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4a27      	ldr	r2, [pc, #156]	; (800ca98 <xTaskResumeAll+0x128>)
 800c9fa:	441a      	add	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f7fe f9b7 	bl	800ad76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0c:	4b23      	ldr	r3, [pc, #140]	; (800ca9c <xTaskResumeAll+0x12c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d302      	bcc.n	800ca1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ca16:	4b22      	ldr	r3, [pc, #136]	; (800caa0 <xTaskResumeAll+0x130>)
 800ca18:	2201      	movs	r2, #1
 800ca1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca1c:	4b1c      	ldr	r3, [pc, #112]	; (800ca90 <xTaskResumeAll+0x120>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1cb      	bne.n	800c9bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca2a:	f000 fbb1 	bl	800d190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca2e:	4b1d      	ldr	r3, [pc, #116]	; (800caa4 <xTaskResumeAll+0x134>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d010      	beq.n	800ca5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca3a:	f000 f847 	bl	800cacc <xTaskIncrementTick>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca44:	4b16      	ldr	r3, [pc, #88]	; (800caa0 <xTaskResumeAll+0x130>)
 800ca46:	2201      	movs	r2, #1
 800ca48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d1f1      	bne.n	800ca3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca56:	4b13      	ldr	r3, [pc, #76]	; (800caa4 <xTaskResumeAll+0x134>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca5c:	4b10      	ldr	r3, [pc, #64]	; (800caa0 <xTaskResumeAll+0x130>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d009      	beq.n	800ca78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca64:	2301      	movs	r3, #1
 800ca66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca68:	4b0f      	ldr	r3, [pc, #60]	; (800caa8 <xTaskResumeAll+0x138>)
 800ca6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca78:	f001 fb84 	bl	800e184 <vPortExitCritical>

	return xAlreadyYielded;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	20001770 	.word	0x20001770
 800ca8c:	20001748 	.word	0x20001748
 800ca90:	20001708 	.word	0x20001708
 800ca94:	20001750 	.word	0x20001750
 800ca98:	20001278 	.word	0x20001278
 800ca9c:	20001274 	.word	0x20001274
 800caa0:	2000175c 	.word	0x2000175c
 800caa4:	20001758 	.word	0x20001758
 800caa8:	e000ed04 	.word	0xe000ed04

0800caac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cab2:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <xTaskGetTickCount+0x1c>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cab8:	687b      	ldr	r3, [r7, #4]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	2000174c 	.word	0x2000174c

0800cacc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cad2:	2300      	movs	r3, #0
 800cad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cad6:	4b4f      	ldr	r3, [pc, #316]	; (800cc14 <xTaskIncrementTick+0x148>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f040 808f 	bne.w	800cbfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cae0:	4b4d      	ldr	r3, [pc, #308]	; (800cc18 <xTaskIncrementTick+0x14c>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3301      	adds	r3, #1
 800cae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cae8:	4a4b      	ldr	r2, [pc, #300]	; (800cc18 <xTaskIncrementTick+0x14c>)
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d120      	bne.n	800cb36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800caf4:	4b49      	ldr	r3, [pc, #292]	; (800cc1c <xTaskIncrementTick+0x150>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <xTaskIncrementTick+0x48>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	603b      	str	r3, [r7, #0]
}
 800cb10:	bf00      	nop
 800cb12:	e7fe      	b.n	800cb12 <xTaskIncrementTick+0x46>
 800cb14:	4b41      	ldr	r3, [pc, #260]	; (800cc1c <xTaskIncrementTick+0x150>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	4b41      	ldr	r3, [pc, #260]	; (800cc20 <xTaskIncrementTick+0x154>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a3f      	ldr	r2, [pc, #252]	; (800cc1c <xTaskIncrementTick+0x150>)
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	4a3f      	ldr	r2, [pc, #252]	; (800cc20 <xTaskIncrementTick+0x154>)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	4b3e      	ldr	r3, [pc, #248]	; (800cc24 <xTaskIncrementTick+0x158>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	4a3d      	ldr	r2, [pc, #244]	; (800cc24 <xTaskIncrementTick+0x158>)
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	f000 fb2d 	bl	800d190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb36:	4b3c      	ldr	r3, [pc, #240]	; (800cc28 <xTaskIncrementTick+0x15c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d349      	bcc.n	800cbd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb40:	4b36      	ldr	r3, [pc, #216]	; (800cc1c <xTaskIncrementTick+0x150>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d104      	bne.n	800cb54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb4a:	4b37      	ldr	r3, [pc, #220]	; (800cc28 <xTaskIncrementTick+0x15c>)
 800cb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb50:	601a      	str	r2, [r3, #0]
					break;
 800cb52:	e03f      	b.n	800cbd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb54:	4b31      	ldr	r3, [pc, #196]	; (800cc1c <xTaskIncrementTick+0x150>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d203      	bcs.n	800cb74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb6c:	4a2e      	ldr	r2, [pc, #184]	; (800cc28 <xTaskIncrementTick+0x15c>)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb72:	e02f      	b.n	800cbd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	3304      	adds	r3, #4
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe f959 	bl	800ae30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	3318      	adds	r3, #24
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fe f950 	bl	800ae30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb94:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <xTaskIncrementTick+0x160>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d903      	bls.n	800cba4 <xTaskIncrementTick+0xd8>
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba0:	4a22      	ldr	r2, [pc, #136]	; (800cc2c <xTaskIncrementTick+0x160>)
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	4613      	mov	r3, r2
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4a1f      	ldr	r2, [pc, #124]	; (800cc30 <xTaskIncrementTick+0x164>)
 800cbb2:	441a      	add	r2, r3
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f7fe f8db 	bl	800ad76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc4:	4b1b      	ldr	r3, [pc, #108]	; (800cc34 <xTaskIncrementTick+0x168>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d3b8      	bcc.n	800cb40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbd2:	e7b5      	b.n	800cb40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbd4:	4b17      	ldr	r3, [pc, #92]	; (800cc34 <xTaskIncrementTick+0x168>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbda:	4915      	ldr	r1, [pc, #84]	; (800cc30 <xTaskIncrementTick+0x164>)
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	440b      	add	r3, r1
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d901      	bls.n	800cbf0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbf0:	4b11      	ldr	r3, [pc, #68]	; (800cc38 <xTaskIncrementTick+0x16c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d007      	beq.n	800cc08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	e004      	b.n	800cc08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <xTaskIncrementTick+0x170>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <xTaskIncrementTick+0x170>)
 800cc06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc08:	697b      	ldr	r3, [r7, #20]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3718      	adds	r7, #24
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20001770 	.word	0x20001770
 800cc18:	2000174c 	.word	0x2000174c
 800cc1c:	20001700 	.word	0x20001700
 800cc20:	20001704 	.word	0x20001704
 800cc24:	20001760 	.word	0x20001760
 800cc28:	20001768 	.word	0x20001768
 800cc2c:	20001750 	.word	0x20001750
 800cc30:	20001278 	.word	0x20001278
 800cc34:	20001274 	.word	0x20001274
 800cc38:	2000175c 	.word	0x2000175c
 800cc3c:	20001758 	.word	0x20001758

0800cc40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc46:	4b3e      	ldr	r3, [pc, #248]	; (800cd40 <vTaskSwitchContext+0x100>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc4e:	4b3d      	ldr	r3, [pc, #244]	; (800cd44 <vTaskSwitchContext+0x104>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc54:	e070      	b.n	800cd38 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800cc56:	4b3b      	ldr	r3, [pc, #236]	; (800cd44 <vTaskSwitchContext+0x104>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cc5c:	f7f8 fce9 	bl	8005632 <getRunTimeCounterValue>
 800cc60:	4603      	mov	r3, r0
 800cc62:	4a39      	ldr	r2, [pc, #228]	; (800cd48 <vTaskSwitchContext+0x108>)
 800cc64:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cc66:	4b38      	ldr	r3, [pc, #224]	; (800cd48 <vTaskSwitchContext+0x108>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b38      	ldr	r3, [pc, #224]	; (800cd4c <vTaskSwitchContext+0x10c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d909      	bls.n	800cc86 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cc72:	4b37      	ldr	r3, [pc, #220]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cc78:	4a33      	ldr	r2, [pc, #204]	; (800cd48 <vTaskSwitchContext+0x108>)
 800cc7a:	6810      	ldr	r0, [r2, #0]
 800cc7c:	4a33      	ldr	r2, [pc, #204]	; (800cd4c <vTaskSwitchContext+0x10c>)
 800cc7e:	6812      	ldr	r2, [r2, #0]
 800cc80:	1a82      	subs	r2, r0, r2
 800cc82:	440a      	add	r2, r1
 800cc84:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800cc86:	4b30      	ldr	r3, [pc, #192]	; (800cd48 <vTaskSwitchContext+0x108>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a30      	ldr	r2, [pc, #192]	; (800cd4c <vTaskSwitchContext+0x10c>)
 800cc8c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cc8e:	4b30      	ldr	r3, [pc, #192]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	4b2e      	ldr	r3, [pc, #184]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d808      	bhi.n	800ccb0 <vTaskSwitchContext+0x70>
 800cc9e:	4b2c      	ldr	r3, [pc, #176]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b2b      	ldr	r3, [pc, #172]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	3334      	adds	r3, #52	; 0x34
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4610      	mov	r0, r2
 800ccac:	f7f8 fcc9 	bl	8005642 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb0:	4b28      	ldr	r3, [pc, #160]	; (800cd54 <vTaskSwitchContext+0x114>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	e010      	b.n	800ccda <vTaskSwitchContext+0x9a>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10a      	bne.n	800ccd4 <vTaskSwitchContext+0x94>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	607b      	str	r3, [r7, #4]
}
 800ccd0:	bf00      	nop
 800ccd2:	e7fe      	b.n	800ccd2 <vTaskSwitchContext+0x92>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	60fb      	str	r3, [r7, #12]
 800ccda:	491f      	ldr	r1, [pc, #124]	; (800cd58 <vTaskSwitchContext+0x118>)
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0e4      	beq.n	800ccb8 <vTaskSwitchContext+0x78>
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <vTaskSwitchContext+0x118>)
 800ccfa:	4413      	add	r3, r2
 800ccfc:	60bb      	str	r3, [r7, #8]
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	605a      	str	r2, [r3, #4]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	3308      	adds	r3, #8
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d104      	bne.n	800cd1e <vTaskSwitchContext+0xde>
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	605a      	str	r2, [r3, #4]
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	4a0a      	ldr	r2, [pc, #40]	; (800cd54 <vTaskSwitchContext+0x114>)
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd2e:	4b08      	ldr	r3, [pc, #32]	; (800cd50 <vTaskSwitchContext+0x110>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3358      	adds	r3, #88	; 0x58
 800cd34:	4a09      	ldr	r2, [pc, #36]	; (800cd5c <vTaskSwitchContext+0x11c>)
 800cd36:	6013      	str	r3, [r2, #0]
}
 800cd38:	bf00      	nop
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	20001770 	.word	0x20001770
 800cd44:	2000175c 	.word	0x2000175c
 800cd48:	20001778 	.word	0x20001778
 800cd4c:	20001774 	.word	0x20001774
 800cd50:	20001274 	.word	0x20001274
 800cd54:	20001750 	.word	0x20001750
 800cd58:	20001278 	.word	0x20001278
 800cd5c:	20000020 	.word	0x20000020

0800cd60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10a      	bne.n	800cd86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	60fb      	str	r3, [r7, #12]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd86:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <vTaskPlaceOnEventList+0x44>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	3318      	adds	r3, #24
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7fe f815 	bl	800adbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd94:	2101      	movs	r1, #1
 800cd96:	6838      	ldr	r0, [r7, #0]
 800cd98:	f000 fcf8 	bl	800d78c <prvAddCurrentTaskToDelayedList>
}
 800cd9c:	bf00      	nop
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20001274 	.word	0x20001274

0800cda8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10a      	bne.n	800cdd0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	617b      	str	r3, [r7, #20]
}
 800cdcc:	bf00      	nop
 800cdce:	e7fe      	b.n	800cdce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <vTaskPlaceOnEventListRestricted+0x54>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3318      	adds	r3, #24
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7fd ffcc 	bl	800ad76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	68b8      	ldr	r0, [r7, #8]
 800cdee:	f000 fccd 	bl	800d78c <prvAddCurrentTaskToDelayedList>
	}
 800cdf2:	bf00      	nop
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20001274 	.word	0x20001274

0800ce00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b086      	sub	sp, #24
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10a      	bne.n	800ce2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	60fb      	str	r3, [r7, #12]
}
 800ce28:	bf00      	nop
 800ce2a:	e7fe      	b.n	800ce2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	3318      	adds	r3, #24
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fd fffd 	bl	800ae30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce36:	4b1e      	ldr	r3, [pc, #120]	; (800ceb0 <xTaskRemoveFromEventList+0xb0>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d11d      	bne.n	800ce7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fd fff4 	bl	800ae30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4c:	4b19      	ldr	r3, [pc, #100]	; (800ceb4 <xTaskRemoveFromEventList+0xb4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d903      	bls.n	800ce5c <xTaskRemoveFromEventList+0x5c>
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce58:	4a16      	ldr	r2, [pc, #88]	; (800ceb4 <xTaskRemoveFromEventList+0xb4>)
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce60:	4613      	mov	r3, r2
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4a13      	ldr	r2, [pc, #76]	; (800ceb8 <xTaskRemoveFromEventList+0xb8>)
 800ce6a:	441a      	add	r2, r3
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	3304      	adds	r3, #4
 800ce70:	4619      	mov	r1, r3
 800ce72:	4610      	mov	r0, r2
 800ce74:	f7fd ff7f 	bl	800ad76 <vListInsertEnd>
 800ce78:	e005      	b.n	800ce86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	3318      	adds	r3, #24
 800ce7e:	4619      	mov	r1, r3
 800ce80:	480e      	ldr	r0, [pc, #56]	; (800cebc <xTaskRemoveFromEventList+0xbc>)
 800ce82:	f7fd ff78 	bl	800ad76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8a:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <xTaskRemoveFromEventList+0xc0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d905      	bls.n	800cea0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce94:	2301      	movs	r3, #1
 800ce96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <xTaskRemoveFromEventList+0xc4>)
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]
 800ce9e:	e001      	b.n	800cea4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cea4:	697b      	ldr	r3, [r7, #20]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20001770 	.word	0x20001770
 800ceb4:	20001750 	.word	0x20001750
 800ceb8:	20001278 	.word	0x20001278
 800cebc:	20001708 	.word	0x20001708
 800cec0:	20001274 	.word	0x20001274
 800cec4:	2000175c 	.word	0x2000175c

0800cec8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <vTaskSetTimeOutState+0x24>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	60fb      	str	r3, [r7, #12]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ceec:	f001 f91a 	bl	800e124 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cef0:	4b06      	ldr	r3, [pc, #24]	; (800cf0c <vTaskSetTimeOutState+0x44>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800cef8:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <vTaskSetTimeOutState+0x48>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800cf00:	f001 f940 	bl	800e184 <vPortExitCritical>
}
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20001760 	.word	0x20001760
 800cf10:	2000174c 	.word	0x2000174c

0800cf14 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <vTaskInternalSetTimeOutState+0x24>)
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf24:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <vTaskInternalSetTimeOutState+0x28>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	605a      	str	r2, [r3, #4]
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr
 800cf38:	20001760 	.word	0x20001760
 800cf3c:	2000174c 	.word	0x2000174c

0800cf40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10a      	bne.n	800cf66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	613b      	str	r3, [r7, #16]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	60fb      	str	r3, [r7, #12]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf82:	f001 f8cf 	bl	800e124 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf86:	4b1d      	ldr	r3, [pc, #116]	; (800cffc <xTaskCheckForTimeOut+0xbc>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	69ba      	ldr	r2, [r7, #24]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf9e:	d102      	bne.n	800cfa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	e023      	b.n	800cfee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b15      	ldr	r3, [pc, #84]	; (800d000 <xTaskCheckForTimeOut+0xc0>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d007      	beq.n	800cfc2 <xTaskCheckForTimeOut+0x82>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d302      	bcc.n	800cfc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	e015      	b.n	800cfee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	697a      	ldr	r2, [r7, #20]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d20b      	bcs.n	800cfe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	1ad2      	subs	r2, r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff ff9b 	bl	800cf14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	61fb      	str	r3, [r7, #28]
 800cfe2:	e004      	b.n	800cfee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfea:	2301      	movs	r3, #1
 800cfec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfee:	f001 f8c9 	bl	800e184 <vPortExitCritical>

	return xReturn;
 800cff2:	69fb      	ldr	r3, [r7, #28]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3720      	adds	r7, #32
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	2000174c 	.word	0x2000174c
 800d000:	20001760 	.word	0x20001760

0800d004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d008:	4b03      	ldr	r3, [pc, #12]	; (800d018 <vTaskMissedYield+0x14>)
 800d00a:	2201      	movs	r2, #1
 800d00c:	601a      	str	r2, [r3, #0]
}
 800d00e:	bf00      	nop
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	2000175c 	.word	0x2000175c

0800d01c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d024:	f000 f852 	bl	800d0cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d028:	4b06      	ldr	r3, [pc, #24]	; (800d044 <prvIdleTask+0x28>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d9f9      	bls.n	800d024 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d030:	4b05      	ldr	r3, [pc, #20]	; (800d048 <prvIdleTask+0x2c>)
 800d032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d040:	e7f0      	b.n	800d024 <prvIdleTask+0x8>
 800d042:	bf00      	nop
 800d044:	20001278 	.word	0x20001278
 800d048:	e000ed04 	.word	0xe000ed04

0800d04c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d052:	2300      	movs	r3, #0
 800d054:	607b      	str	r3, [r7, #4]
 800d056:	e00c      	b.n	800d072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	4613      	mov	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4a12      	ldr	r2, [pc, #72]	; (800d0ac <prvInitialiseTaskLists+0x60>)
 800d064:	4413      	add	r3, r2
 800d066:	4618      	mov	r0, r3
 800d068:	f7fd fe58 	bl	800ad1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3301      	adds	r3, #1
 800d070:	607b      	str	r3, [r7, #4]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b37      	cmp	r3, #55	; 0x37
 800d076:	d9ef      	bls.n	800d058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d078:	480d      	ldr	r0, [pc, #52]	; (800d0b0 <prvInitialiseTaskLists+0x64>)
 800d07a:	f7fd fe4f 	bl	800ad1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d07e:	480d      	ldr	r0, [pc, #52]	; (800d0b4 <prvInitialiseTaskLists+0x68>)
 800d080:	f7fd fe4c 	bl	800ad1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d084:	480c      	ldr	r0, [pc, #48]	; (800d0b8 <prvInitialiseTaskLists+0x6c>)
 800d086:	f7fd fe49 	bl	800ad1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d08a:	480c      	ldr	r0, [pc, #48]	; (800d0bc <prvInitialiseTaskLists+0x70>)
 800d08c:	f7fd fe46 	bl	800ad1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d090:	480b      	ldr	r0, [pc, #44]	; (800d0c0 <prvInitialiseTaskLists+0x74>)
 800d092:	f7fd fe43 	bl	800ad1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d096:	4b0b      	ldr	r3, [pc, #44]	; (800d0c4 <prvInitialiseTaskLists+0x78>)
 800d098:	4a05      	ldr	r2, [pc, #20]	; (800d0b0 <prvInitialiseTaskLists+0x64>)
 800d09a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d09c:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <prvInitialiseTaskLists+0x7c>)
 800d09e:	4a05      	ldr	r2, [pc, #20]	; (800d0b4 <prvInitialiseTaskLists+0x68>)
 800d0a0:	601a      	str	r2, [r3, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20001278 	.word	0x20001278
 800d0b0:	200016d8 	.word	0x200016d8
 800d0b4:	200016ec 	.word	0x200016ec
 800d0b8:	20001708 	.word	0x20001708
 800d0bc:	2000171c 	.word	0x2000171c
 800d0c0:	20001734 	.word	0x20001734
 800d0c4:	20001700 	.word	0x20001700
 800d0c8:	20001704 	.word	0x20001704

0800d0cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0d2:	e019      	b.n	800d108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0d4:	f001 f826 	bl	800e124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d8:	4b10      	ldr	r3, [pc, #64]	; (800d11c <prvCheckTasksWaitingTermination+0x50>)
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3304      	adds	r3, #4
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fd fea3 	bl	800ae30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	; (800d120 <prvCheckTasksWaitingTermination+0x54>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	4a0b      	ldr	r2, [pc, #44]	; (800d120 <prvCheckTasksWaitingTermination+0x54>)
 800d0f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <prvCheckTasksWaitingTermination+0x58>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	4a0a      	ldr	r2, [pc, #40]	; (800d124 <prvCheckTasksWaitingTermination+0x58>)
 800d0fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0fe:	f001 f841 	bl	800e184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f810 	bl	800d128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <prvCheckTasksWaitingTermination+0x58>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e1      	bne.n	800d0d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d110:	bf00      	nop
 800d112:	bf00      	nop
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	2000171c 	.word	0x2000171c
 800d120:	20001748 	.word	0x20001748
 800d124:	20001730 	.word	0x20001730

0800d128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3358      	adds	r3, #88	; 0x58
 800d134:	4618      	mov	r0, r3
 800d136:	f001 fe07 	bl	800ed48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d140:	2b00      	cmp	r3, #0
 800d142:	d108      	bne.n	800d156 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 f9dd 	bl	800e508 <vPortFree>
				vPortFree( pxTCB );
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 f9da 	bl	800e508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d154:	e018      	b.n	800d188 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d103      	bne.n	800d168 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 f9d1 	bl	800e508 <vPortFree>
	}
 800d166:	e00f      	b.n	800d188 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d00a      	beq.n	800d188 <prvDeleteTCB+0x60>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	60fb      	str	r3, [r7, #12]
}
 800d184:	bf00      	nop
 800d186:	e7fe      	b.n	800d186 <prvDeleteTCB+0x5e>
	}
 800d188:	bf00      	nop
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d196:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <prvResetNextTaskUnblockTime+0x38>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d104      	bne.n	800d1aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvResetNextTaskUnblockTime+0x3c>)
 800d1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1a8:	e008      	b.n	800d1bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <prvResetNextTaskUnblockTime+0x38>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <prvResetNextTaskUnblockTime+0x3c>)
 800d1ba:	6013      	str	r3, [r2, #0]
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	20001700 	.word	0x20001700
 800d1cc:	20001768 	.word	0x20001768

0800d1d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d1d6:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <xTaskGetCurrentTaskHandle+0x1c>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d1dc:	687b      	ldr	r3, [r7, #4]
	}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	20001274 	.word	0x20001274

0800d1f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1f6:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <xTaskGetSchedulerState+0x34>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d102      	bne.n	800d204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1fe:	2301      	movs	r3, #1
 800d200:	607b      	str	r3, [r7, #4]
 800d202:	e008      	b.n	800d216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d204:	4b08      	ldr	r3, [pc, #32]	; (800d228 <xTaskGetSchedulerState+0x38>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d20c:	2302      	movs	r3, #2
 800d20e:	607b      	str	r3, [r7, #4]
 800d210:	e001      	b.n	800d216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d212:	2300      	movs	r3, #0
 800d214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d216:	687b      	ldr	r3, [r7, #4]
	}
 800d218:	4618      	mov	r0, r3
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20001754 	.word	0x20001754
 800d228:	20001770 	.word	0x20001770

0800d22c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d238:	2300      	movs	r3, #0
 800d23a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d051      	beq.n	800d2e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d246:	4b2a      	ldr	r3, [pc, #168]	; (800d2f0 <xTaskPriorityInherit+0xc4>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d241      	bcs.n	800d2d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	db06      	blt.n	800d266 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d258:	4b25      	ldr	r3, [pc, #148]	; (800d2f0 <xTaskPriorityInherit+0xc4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6959      	ldr	r1, [r3, #20]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4a1f      	ldr	r2, [pc, #124]	; (800d2f4 <xTaskPriorityInherit+0xc8>)
 800d278:	4413      	add	r3, r2
 800d27a:	4299      	cmp	r1, r3
 800d27c:	d122      	bne.n	800d2c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	3304      	adds	r3, #4
 800d282:	4618      	mov	r0, r3
 800d284:	f7fd fdd4 	bl	800ae30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d288:	4b19      	ldr	r3, [pc, #100]	; (800d2f0 <xTaskPriorityInherit+0xc4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d296:	4b18      	ldr	r3, [pc, #96]	; (800d2f8 <xTaskPriorityInherit+0xcc>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d903      	bls.n	800d2a6 <xTaskPriorityInherit+0x7a>
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	4a15      	ldr	r2, [pc, #84]	; (800d2f8 <xTaskPriorityInherit+0xcc>)
 800d2a4:	6013      	str	r3, [r2, #0]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4a10      	ldr	r2, [pc, #64]	; (800d2f4 <xTaskPriorityInherit+0xc8>)
 800d2b4:	441a      	add	r2, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	4610      	mov	r0, r2
 800d2be:	f7fd fd5a 	bl	800ad76 <vListInsertEnd>
 800d2c2:	e004      	b.n	800d2ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2c4:	4b0a      	ldr	r3, [pc, #40]	; (800d2f0 <xTaskPriorityInherit+0xc4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	e008      	b.n	800d2e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2d8:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <xTaskPriorityInherit+0xc4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d201      	bcs.n	800d2e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
	}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20001274 	.word	0x20001274
 800d2f4:	20001278 	.word	0x20001278
 800d2f8:	20001750 	.word	0x20001750

0800d2fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d308:	2300      	movs	r3, #0
 800d30a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d056      	beq.n	800d3c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d312:	4b2e      	ldr	r3, [pc, #184]	; (800d3cc <xTaskPriorityDisinherit+0xd0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d00a      	beq.n	800d332 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	60fb      	str	r3, [r7, #12]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	60bb      	str	r3, [r7, #8]
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d354:	1e5a      	subs	r2, r3, #1
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d362:	429a      	cmp	r2, r3
 800d364:	d02c      	beq.n	800d3c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d128      	bne.n	800d3c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	3304      	adds	r3, #4
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd fd5c 	bl	800ae30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d384:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d390:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <xTaskPriorityDisinherit+0xd4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d903      	bls.n	800d3a0 <xTaskPriorityDisinherit+0xa4>
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	4a0c      	ldr	r2, [pc, #48]	; (800d3d0 <xTaskPriorityDisinherit+0xd4>)
 800d39e:	6013      	str	r3, [r2, #0]
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4413      	add	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4a09      	ldr	r2, [pc, #36]	; (800d3d4 <xTaskPriorityDisinherit+0xd8>)
 800d3ae:	441a      	add	r2, r3
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fd fcdd 	bl	800ad76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3c0:	697b      	ldr	r3, [r7, #20]
	}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20001274 	.word	0x20001274
 800d3d0:	20001750 	.word	0x20001750
 800d3d4:	20001278 	.word	0x20001278

0800d3d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b088      	sub	sp, #32
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d06a      	beq.n	800d4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	60fb      	str	r3, [r7, #12]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d902      	bls.n	800d41e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	61fb      	str	r3, [r7, #28]
 800d41c:	e002      	b.n	800d424 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d422:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	69fa      	ldr	r2, [r7, #28]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d04b      	beq.n	800d4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	429a      	cmp	r2, r3
 800d436:	d146      	bne.n	800d4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d438:	4b25      	ldr	r3, [pc, #148]	; (800d4d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	69ba      	ldr	r2, [r7, #24]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d10a      	bne.n	800d458 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	60bb      	str	r3, [r7, #8]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	69fa      	ldr	r2, [r7, #28]
 800d462:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	db04      	blt.n	800d476 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	6959      	ldr	r1, [r3, #20]
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	4613      	mov	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4a13      	ldr	r2, [pc, #76]	; (800d4d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d486:	4413      	add	r3, r2
 800d488:	4299      	cmp	r1, r3
 800d48a:	d11c      	bne.n	800d4c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	3304      	adds	r3, #4
 800d490:	4618      	mov	r0, r3
 800d492:	f7fd fccd 	bl	800ae30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49a:	4b0f      	ldr	r3, [pc, #60]	; (800d4d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d903      	bls.n	800d4aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a6:	4a0c      	ldr	r2, [pc, #48]	; (800d4d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4a8:	6013      	str	r3, [r2, #0]
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4a07      	ldr	r2, [pc, #28]	; (800d4d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4b8:	441a      	add	r2, r3
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	4619      	mov	r1, r3
 800d4c0:	4610      	mov	r0, r2
 800d4c2:	f7fd fc58 	bl	800ad76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4c6:	bf00      	nop
 800d4c8:	3720      	adds	r7, #32
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20001274 	.word	0x20001274
 800d4d4:	20001278 	.word	0x20001278
 800d4d8:	20001750 	.word	0x20001750

0800d4dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4dc:	b480      	push	{r7}
 800d4de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4e0:	4b07      	ldr	r3, [pc, #28]	; (800d500 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d004      	beq.n	800d4f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4ee:	3201      	adds	r2, #1
 800d4f0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d4f2:	4b03      	ldr	r3, [pc, #12]	; (800d500 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
	}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	20001274 	.word	0x20001274

0800d504 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d512:	f000 fe07 	bl	800e124 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d516:	4b29      	ldr	r3, [pc, #164]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b02      	cmp	r3, #2
 800d522:	d01c      	beq.n	800d55e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d524:	4b25      	ldr	r3, [pc, #148]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	43d2      	mvns	r2, r2
 800d530:	400a      	ands	r2, r1
 800d532:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d536:	4b21      	ldr	r3, [pc, #132]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00b      	beq.n	800d55e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d546:	2101      	movs	r1, #1
 800d548:	6838      	ldr	r0, [r7, #0]
 800d54a:	f000 f91f 	bl	800d78c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d54e:	4b1c      	ldr	r3, [pc, #112]	; (800d5c0 <xTaskNotifyWait+0xbc>)
 800d550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d55e:	f000 fe11 	bl	800e184 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d562:	f000 fddf 	bl	800e124 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d56c:	4b13      	ldr	r3, [pc, #76]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d578:	4b10      	ldr	r3, [pc, #64]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d580:	b2db      	uxtb	r3, r3
 800d582:	2b02      	cmp	r3, #2
 800d584:	d002      	beq.n	800d58c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d586:	2300      	movs	r3, #0
 800d588:	617b      	str	r3, [r7, #20]
 800d58a:	e00a      	b.n	800d5a2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d58c:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	43d2      	mvns	r2, r2
 800d598:	400a      	ands	r2, r1
 800d59a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5a2:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <xTaskNotifyWait+0xb8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800d5ac:	f000 fdea 	bl	800e184 <vPortExitCritical>

		return xReturn;
 800d5b0:	697b      	ldr	r3, [r7, #20]
	}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20001274 	.word	0x20001274
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08a      	sub	sp, #40	; 0x28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <xTaskGenericNotify+0x30>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	61bb      	str	r3, [r7, #24]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d5f8:	f000 fd94 	bl	800e124 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d004      	beq.n	800d60c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d612:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	2202      	movs	r2, #2
 800d618:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	2b04      	cmp	r3, #4
 800d620:	d82d      	bhi.n	800d67e <xTaskGenericNotify+0xba>
 800d622:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <xTaskGenericNotify+0x64>)
 800d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d628:	0800d6a1 	.word	0x0800d6a1
 800d62c:	0800d63d 	.word	0x0800d63d
 800d630:	0800d64f 	.word	0x0800d64f
 800d634:	0800d65f 	.word	0x0800d65f
 800d638:	0800d669 	.word	0x0800d669
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	431a      	orrs	r2, r3
 800d646:	6a3b      	ldr	r3, [r7, #32]
 800d648:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800d64c:	e02b      	b.n	800d6a6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800d65c:	e023      	b.n	800d6a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800d666:	e01e      	b.n	800d6a6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d668:	7ffb      	ldrb	r3, [r7, #31]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d004      	beq.n	800d678 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d676:	e016      	b.n	800d6a6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d678:	2300      	movs	r3, #0
 800d67a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d67c:	e013      	b.n	800d6a6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d00c      	beq.n	800d6a4 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	617b      	str	r3, [r7, #20]
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <xTaskGenericNotify+0xda>
					break;
 800d6a0:	bf00      	nop
 800d6a2:	e000      	b.n	800d6a6 <xTaskGenericNotify+0xe2>

					break;
 800d6a4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d6a6:	7ffb      	ldrb	r3, [r7, #31]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d13a      	bne.n	800d722 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fd fbbd 	bl	800ae30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ba:	4b1d      	ldr	r3, [pc, #116]	; (800d730 <xTaskGenericNotify+0x16c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d903      	bls.n	800d6ca <xTaskGenericNotify+0x106>
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c6:	4a1a      	ldr	r2, [pc, #104]	; (800d730 <xTaskGenericNotify+0x16c>)
 800d6c8:	6013      	str	r3, [r2, #0]
 800d6ca:	6a3b      	ldr	r3, [r7, #32]
 800d6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4413      	add	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4a17      	ldr	r2, [pc, #92]	; (800d734 <xTaskGenericNotify+0x170>)
 800d6d8:	441a      	add	r2, r3
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	4619      	mov	r1, r3
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	f7fd fb48 	bl	800ad76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00a      	beq.n	800d704 <xTaskGenericNotify+0x140>
	__asm volatile
 800d6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	613b      	str	r3, [r7, #16]
}
 800d700:	bf00      	nop
 800d702:	e7fe      	b.n	800d702 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d708:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <xTaskGenericNotify+0x174>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70e:	429a      	cmp	r2, r3
 800d710:	d907      	bls.n	800d722 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <xTaskGenericNotify+0x178>)
 800d714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d718:	601a      	str	r2, [r3, #0]
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d722:	f000 fd2f 	bl	800e184 <vPortExitCritical>

		return xReturn;
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d728:	4618      	mov	r0, r3
 800d72a:	3728      	adds	r7, #40	; 0x28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20001750 	.word	0x20001750
 800d734:	20001278 	.word	0x20001278
 800d738:	20001274 	.word	0x20001274
 800d73c:	e000ed04 	.word	0xe000ed04

0800d740 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <xTaskNotifyStateClear+0x14>
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <xTaskNotifyStateClear+0x48>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	e000      	b.n	800d756 <xTaskNotifyStateClear+0x16>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800d758:	f000 fce4 	bl	800e124 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b02      	cmp	r3, #2
 800d766:	d106      	bne.n	800d776 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 800d770:	2301      	movs	r3, #1
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e001      	b.n	800d77a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800d776:	2300      	movs	r3, #0
 800d778:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800d77a:	f000 fd03 	bl	800e184 <vPortExitCritical>

		return xReturn;
 800d77e:	68fb      	ldr	r3, [r7, #12]
	}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20001274 	.word	0x20001274

0800d78c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d796:	4b21      	ldr	r3, [pc, #132]	; (800d81c <prvAddCurrentTaskToDelayedList+0x90>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d79c:	4b20      	ldr	r3, [pc, #128]	; (800d820 <prvAddCurrentTaskToDelayedList+0x94>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3304      	adds	r3, #4
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fd fb44 	bl	800ae30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ae:	d10a      	bne.n	800d7c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7b6:	4b1a      	ldr	r3, [pc, #104]	; (800d820 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	4619      	mov	r1, r3
 800d7be:	4819      	ldr	r0, [pc, #100]	; (800d824 <prvAddCurrentTaskToDelayedList+0x98>)
 800d7c0:	f7fd fad9 	bl	800ad76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d7c4:	e026      	b.n	800d814 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d7ce:	4b14      	ldr	r3, [pc, #80]	; (800d820 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d209      	bcs.n	800d7f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7de:	4b12      	ldr	r3, [pc, #72]	; (800d828 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	4610      	mov	r0, r2
 800d7ec:	f7fd fae7 	bl	800adbe <vListInsert>
}
 800d7f0:	e010      	b.n	800d814 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7f2:	4b0e      	ldr	r3, [pc, #56]	; (800d82c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	4b0a      	ldr	r3, [pc, #40]	; (800d820 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f7fd fadd 	bl	800adbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d202      	bcs.n	800d814 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d80e:	4a08      	ldr	r2, [pc, #32]	; (800d830 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	6013      	str	r3, [r2, #0]
}
 800d814:	bf00      	nop
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	2000174c 	.word	0x2000174c
 800d820:	20001274 	.word	0x20001274
 800d824:	20001734 	.word	0x20001734
 800d828:	20001704 	.word	0x20001704
 800d82c:	20001700 	.word	0x20001700
 800d830:	20001768 	.word	0x20001768

0800d834 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08a      	sub	sp, #40	; 0x28
 800d838:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d83e:	f000 fb07 	bl	800de50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d842:	4b1c      	ldr	r3, [pc, #112]	; (800d8b4 <xTimerCreateTimerTask+0x80>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d021      	beq.n	800d88e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d852:	1d3a      	adds	r2, r7, #4
 800d854:	f107 0108 	add.w	r1, r7, #8
 800d858:	f107 030c 	add.w	r3, r7, #12
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fd fa43 	bl	800ace8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	68fa      	ldr	r2, [r7, #12]
 800d868:	9202      	str	r2, [sp, #8]
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	2302      	movs	r3, #2
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	2300      	movs	r3, #0
 800d872:	460a      	mov	r2, r1
 800d874:	4910      	ldr	r1, [pc, #64]	; (800d8b8 <xTimerCreateTimerTask+0x84>)
 800d876:	4811      	ldr	r0, [pc, #68]	; (800d8bc <xTimerCreateTimerTask+0x88>)
 800d878:	f7fe fe0a 	bl	800c490 <xTaskCreateStatic>
 800d87c:	4603      	mov	r3, r0
 800d87e:	4a10      	ldr	r2, [pc, #64]	; (800d8c0 <xTimerCreateTimerTask+0x8c>)
 800d880:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d882:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <xTimerCreateTimerTask+0x8c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d001      	beq.n	800d88e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d88a:	2301      	movs	r3, #1
 800d88c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10a      	bne.n	800d8aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	613b      	str	r3, [r7, #16]
}
 800d8a6:	bf00      	nop
 800d8a8:	e7fe      	b.n	800d8a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d8aa:	697b      	ldr	r3, [r7, #20]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	200017ac 	.word	0x200017ac
 800d8b8:	0800fcac 	.word	0x0800fcac
 800d8bc:	0800d9f9 	.word	0x0800d9f9
 800d8c0:	200017b0 	.word	0x200017b0

0800d8c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b08a      	sub	sp, #40	; 0x28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10a      	bne.n	800d8f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	623b      	str	r3, [r7, #32]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8f2:	4b1a      	ldr	r3, [pc, #104]	; (800d95c <xTimerGenericCommand+0x98>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d02a      	beq.n	800d950 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2b05      	cmp	r3, #5
 800d90a:	dc18      	bgt.n	800d93e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d90c:	f7ff fc70 	bl	800d1f0 <xTaskGetSchedulerState>
 800d910:	4603      	mov	r3, r0
 800d912:	2b02      	cmp	r3, #2
 800d914:	d109      	bne.n	800d92a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d916:	4b11      	ldr	r3, [pc, #68]	; (800d95c <xTimerGenericCommand+0x98>)
 800d918:	6818      	ldr	r0, [r3, #0]
 800d91a:	f107 0110 	add.w	r1, r7, #16
 800d91e:	2300      	movs	r3, #0
 800d920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d922:	f7fd fca3 	bl	800b26c <xQueueGenericSend>
 800d926:	6278      	str	r0, [r7, #36]	; 0x24
 800d928:	e012      	b.n	800d950 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d92a:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <xTimerGenericCommand+0x98>)
 800d92c:	6818      	ldr	r0, [r3, #0]
 800d92e:	f107 0110 	add.w	r1, r7, #16
 800d932:	2300      	movs	r3, #0
 800d934:	2200      	movs	r2, #0
 800d936:	f7fd fc99 	bl	800b26c <xQueueGenericSend>
 800d93a:	6278      	str	r0, [r7, #36]	; 0x24
 800d93c:	e008      	b.n	800d950 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d93e:	4b07      	ldr	r3, [pc, #28]	; (800d95c <xTimerGenericCommand+0x98>)
 800d940:	6818      	ldr	r0, [r3, #0]
 800d942:	f107 0110 	add.w	r1, r7, #16
 800d946:	2300      	movs	r3, #0
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	f7fd fd8d 	bl	800b468 <xQueueGenericSendFromISR>
 800d94e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d952:	4618      	mov	r0, r3
 800d954:	3728      	adds	r7, #40	; 0x28
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	200017ac 	.word	0x200017ac

0800d960 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b088      	sub	sp, #32
 800d964:	af02      	add	r7, sp, #8
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96a:	4b22      	ldr	r3, [pc, #136]	; (800d9f4 <prvProcessExpiredTimer+0x94>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	3304      	adds	r3, #4
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fd fa59 	bl	800ae30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d022      	beq.n	800d9d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	699a      	ldr	r2, [r3, #24]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	18d1      	adds	r1, r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	6978      	ldr	r0, [r7, #20]
 800d99a:	f000 f8d1 	bl	800db40 <prvInsertTimerInActiveList>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d01f      	beq.n	800d9e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	6978      	ldr	r0, [r7, #20]
 800d9b0:	f7ff ff88 	bl	800d8c4 <xTimerGenericCommand>
 800d9b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d113      	bne.n	800d9e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	60fb      	str	r3, [r7, #12]
}
 800d9ce:	bf00      	nop
 800d9d0:	e7fe      	b.n	800d9d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9d8:	f023 0301 	bic.w	r3, r3, #1
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	6a1b      	ldr	r3, [r3, #32]
 800d9e8:	6978      	ldr	r0, [r7, #20]
 800d9ea:	4798      	blx	r3
}
 800d9ec:	bf00      	nop
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	200017a4 	.word	0x200017a4

0800d9f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da00:	f107 0308 	add.w	r3, r7, #8
 800da04:	4618      	mov	r0, r3
 800da06:	f000 f857 	bl	800dab8 <prvGetNextExpireTime>
 800da0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	4619      	mov	r1, r3
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	f000 f803 	bl	800da1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da16:	f000 f8d5 	bl	800dbc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da1a:	e7f1      	b.n	800da00 <prvTimerTask+0x8>

0800da1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da26:	f7fe ff95 	bl	800c954 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da2a:	f107 0308 	add.w	r3, r7, #8
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f866 	bl	800db00 <prvSampleTimeNow>
 800da34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d130      	bne.n	800da9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10a      	bne.n	800da58 <prvProcessTimerOrBlockTask+0x3c>
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	429a      	cmp	r2, r3
 800da48:	d806      	bhi.n	800da58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da4a:	f7fe ff91 	bl	800c970 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da4e:	68f9      	ldr	r1, [r7, #12]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ff85 	bl	800d960 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da56:	e024      	b.n	800daa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d008      	beq.n	800da70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da5e:	4b13      	ldr	r3, [pc, #76]	; (800daac <prvProcessTimerOrBlockTask+0x90>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d101      	bne.n	800da6c <prvProcessTimerOrBlockTask+0x50>
 800da68:	2301      	movs	r3, #1
 800da6a:	e000      	b.n	800da6e <prvProcessTimerOrBlockTask+0x52>
 800da6c:	2300      	movs	r3, #0
 800da6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da70:	4b0f      	ldr	r3, [pc, #60]	; (800dab0 <prvProcessTimerOrBlockTask+0x94>)
 800da72:	6818      	ldr	r0, [r3, #0]
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	f7fe f94d 	bl	800bd1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da82:	f7fe ff75 	bl	800c970 <xTaskResumeAll>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da8c:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <prvProcessTimerOrBlockTask+0x98>)
 800da8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	f3bf 8f6f 	isb	sy
}
 800da9c:	e001      	b.n	800daa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da9e:	f7fe ff67 	bl	800c970 <xTaskResumeAll>
}
 800daa2:	bf00      	nop
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	200017a8 	.word	0x200017a8
 800dab0:	200017ac 	.word	0x200017ac
 800dab4:	e000ed04 	.word	0xe000ed04

0800dab8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dac0:	4b0e      	ldr	r3, [pc, #56]	; (800dafc <prvGetNextExpireTime+0x44>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d101      	bne.n	800dace <prvGetNextExpireTime+0x16>
 800daca:	2201      	movs	r2, #1
 800dacc:	e000      	b.n	800dad0 <prvGetNextExpireTime+0x18>
 800dace:	2200      	movs	r2, #0
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d105      	bne.n	800dae8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dadc:	4b07      	ldr	r3, [pc, #28]	; (800dafc <prvGetNextExpireTime+0x44>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	60fb      	str	r3, [r7, #12]
 800dae6:	e001      	b.n	800daec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800daec:	68fb      	ldr	r3, [r7, #12]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	200017a4 	.word	0x200017a4

0800db00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db08:	f7fe ffd0 	bl	800caac <xTaskGetTickCount>
 800db0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db0e:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <prvSampleTimeNow+0x3c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	429a      	cmp	r2, r3
 800db16:	d205      	bcs.n	800db24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db18:	f000 f936 	bl	800dd88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	e002      	b.n	800db2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db2a:	4a04      	ldr	r2, [pc, #16]	; (800db3c <prvSampleTimeNow+0x3c>)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db30:	68fb      	ldr	r3, [r7, #12]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	200017b4 	.word	0x200017b4

0800db40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db4e:	2300      	movs	r3, #0
 800db50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d812      	bhi.n	800db8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	1ad2      	subs	r2, r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	429a      	cmp	r2, r3
 800db72:	d302      	bcc.n	800db7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db74:	2301      	movs	r3, #1
 800db76:	617b      	str	r3, [r7, #20]
 800db78:	e01b      	b.n	800dbb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db7a:	4b10      	ldr	r3, [pc, #64]	; (800dbbc <prvInsertTimerInActiveList+0x7c>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3304      	adds	r3, #4
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f7fd f91a 	bl	800adbe <vListInsert>
 800db8a:	e012      	b.n	800dbb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d206      	bcs.n	800dba2 <prvInsertTimerInActiveList+0x62>
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d302      	bcc.n	800dba2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db9c:	2301      	movs	r3, #1
 800db9e:	617b      	str	r3, [r7, #20]
 800dba0:	e007      	b.n	800dbb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dba2:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <prvInsertTimerInActiveList+0x80>)
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4610      	mov	r0, r2
 800dbae:	f7fd f906 	bl	800adbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbb2:	697b      	ldr	r3, [r7, #20]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3718      	adds	r7, #24
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	200017a8 	.word	0x200017a8
 800dbc0:	200017a4 	.word	0x200017a4

0800dbc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08e      	sub	sp, #56	; 0x38
 800dbc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbca:	e0ca      	b.n	800dd62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	da18      	bge.n	800dc04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dbd2:	1d3b      	adds	r3, r7, #4
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	61fb      	str	r3, [r7, #28]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbfa:	6850      	ldr	r0, [r2, #4]
 800dbfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbfe:	6892      	ldr	r2, [r2, #8]
 800dc00:	4611      	mov	r1, r2
 800dc02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f2c0 80aa 	blt.w	800dd60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d004      	beq.n	800dc22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fd f907 	bl	800ae30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc22:	463b      	mov	r3, r7
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7ff ff6b 	bl	800db00 <prvSampleTimeNow>
 800dc2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b09      	cmp	r3, #9
 800dc30:	f200 8097 	bhi.w	800dd62 <prvProcessReceivedCommands+0x19e>
 800dc34:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <prvProcessReceivedCommands+0x78>)
 800dc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3a:	bf00      	nop
 800dc3c:	0800dc65 	.word	0x0800dc65
 800dc40:	0800dc65 	.word	0x0800dc65
 800dc44:	0800dc65 	.word	0x0800dc65
 800dc48:	0800dcd9 	.word	0x0800dcd9
 800dc4c:	0800dced 	.word	0x0800dced
 800dc50:	0800dd37 	.word	0x0800dd37
 800dc54:	0800dc65 	.word	0x0800dc65
 800dc58:	0800dc65 	.word	0x0800dc65
 800dc5c:	0800dcd9 	.word	0x0800dcd9
 800dc60:	0800dced 	.word	0x0800dced
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	18d1      	adds	r1, r2, r3
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc84:	f7ff ff5c 	bl	800db40 <prvInsertTimerInActiveList>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d069      	beq.n	800dd62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d05e      	beq.n	800dd62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	699b      	ldr	r3, [r3, #24]
 800dcaa:	441a      	add	r2, r3
 800dcac:	2300      	movs	r3, #0
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb6:	f7ff fe05 	bl	800d8c4 <xTimerGenericCommand>
 800dcba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dcbc:	6a3b      	ldr	r3, [r7, #32]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d14f      	bne.n	800dd62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc6:	f383 8811 	msr	BASEPRI, r3
 800dcca:	f3bf 8f6f 	isb	sy
 800dcce:	f3bf 8f4f 	dsb	sy
 800dcd2:	61bb      	str	r3, [r7, #24]
}
 800dcd4:	bf00      	nop
 800dcd6:	e7fe      	b.n	800dcd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcde:	f023 0301 	bic.w	r3, r3, #1
 800dce2:	b2da      	uxtb	r2, r3
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dcea:	e03a      	b.n	800dd62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	699b      	ldr	r3, [r3, #24]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	617b      	str	r3, [r7, #20]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	699a      	ldr	r2, [r3, #24]
 800dd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd28:	18d1      	adds	r1, r2, r3
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd30:	f7ff ff06 	bl	800db40 <prvInsertTimerInActiveList>
					break;
 800dd34:	e015      	b.n	800dd62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd3c:	f003 0302 	and.w	r3, r3, #2
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d103      	bne.n	800dd4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dd44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd46:	f000 fbdf 	bl	800e508 <vPortFree>
 800dd4a:	e00a      	b.n	800dd62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd52:	f023 0301 	bic.w	r3, r3, #1
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd5e:	e000      	b.n	800dd62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dd60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd62:	4b08      	ldr	r3, [pc, #32]	; (800dd84 <prvProcessReceivedCommands+0x1c0>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	1d39      	adds	r1, r7, #4
 800dd68:	2200      	movs	r2, #0
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd fc18 	bl	800b5a0 <xQueueReceive>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f47f af2a 	bne.w	800dbcc <prvProcessReceivedCommands+0x8>
	}
}
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
 800dd7c:	3730      	adds	r7, #48	; 0x30
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200017ac 	.word	0x200017ac

0800dd88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd8e:	e048      	b.n	800de22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd90:	4b2d      	ldr	r3, [pc, #180]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd9a:	4b2b      	ldr	r3, [pc, #172]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3304      	adds	r3, #4
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd f841 	bl	800ae30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddbc:	f003 0304 	and.w	r3, r3, #4
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d02e      	beq.n	800de22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	699b      	ldr	r3, [r3, #24]
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	4413      	add	r3, r2
 800ddcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d90e      	bls.n	800ddf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dde2:	4b19      	ldr	r3, [pc, #100]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	3304      	adds	r3, #4
 800ddea:	4619      	mov	r1, r3
 800ddec:	4610      	mov	r0, r2
 800ddee:	f7fc ffe6 	bl	800adbe <vListInsert>
 800ddf2:	e016      	b.n	800de22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	693a      	ldr	r2, [r7, #16]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff fd60 	bl	800d8c4 <xTimerGenericCommand>
 800de04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10a      	bne.n	800de22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	603b      	str	r3, [r7, #0]
}
 800de1e:	bf00      	nop
 800de20:	e7fe      	b.n	800de20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de22:	4b09      	ldr	r3, [pc, #36]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1b1      	bne.n	800dd90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de2c:	4b06      	ldr	r3, [pc, #24]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de32:	4b06      	ldr	r3, [pc, #24]	; (800de4c <prvSwitchTimerLists+0xc4>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4a04      	ldr	r2, [pc, #16]	; (800de48 <prvSwitchTimerLists+0xc0>)
 800de38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de3a:	4a04      	ldr	r2, [pc, #16]	; (800de4c <prvSwitchTimerLists+0xc4>)
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	6013      	str	r3, [r2, #0]
}
 800de40:	bf00      	nop
 800de42:	3718      	adds	r7, #24
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	200017a4 	.word	0x200017a4
 800de4c:	200017a8 	.word	0x200017a8

0800de50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de56:	f000 f965 	bl	800e124 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de5a:	4b15      	ldr	r3, [pc, #84]	; (800deb0 <prvCheckForValidListAndQueue+0x60>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d120      	bne.n	800dea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de62:	4814      	ldr	r0, [pc, #80]	; (800deb4 <prvCheckForValidListAndQueue+0x64>)
 800de64:	f7fc ff5a 	bl	800ad1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de68:	4813      	ldr	r0, [pc, #76]	; (800deb8 <prvCheckForValidListAndQueue+0x68>)
 800de6a:	f7fc ff57 	bl	800ad1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de6e:	4b13      	ldr	r3, [pc, #76]	; (800debc <prvCheckForValidListAndQueue+0x6c>)
 800de70:	4a10      	ldr	r2, [pc, #64]	; (800deb4 <prvCheckForValidListAndQueue+0x64>)
 800de72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de74:	4b12      	ldr	r3, [pc, #72]	; (800dec0 <prvCheckForValidListAndQueue+0x70>)
 800de76:	4a10      	ldr	r2, [pc, #64]	; (800deb8 <prvCheckForValidListAndQueue+0x68>)
 800de78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de7a:	2300      	movs	r3, #0
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	4b11      	ldr	r3, [pc, #68]	; (800dec4 <prvCheckForValidListAndQueue+0x74>)
 800de80:	4a11      	ldr	r2, [pc, #68]	; (800dec8 <prvCheckForValidListAndQueue+0x78>)
 800de82:	2110      	movs	r1, #16
 800de84:	200a      	movs	r0, #10
 800de86:	f7fd f865 	bl	800af54 <xQueueGenericCreateStatic>
 800de8a:	4603      	mov	r3, r0
 800de8c:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <prvCheckForValidListAndQueue+0x60>)
 800de8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de90:	4b07      	ldr	r3, [pc, #28]	; (800deb0 <prvCheckForValidListAndQueue+0x60>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d005      	beq.n	800dea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <prvCheckForValidListAndQueue+0x60>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	490b      	ldr	r1, [pc, #44]	; (800decc <prvCheckForValidListAndQueue+0x7c>)
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd ff12 	bl	800bcc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dea4:	f000 f96e 	bl	800e184 <vPortExitCritical>
}
 800dea8:	bf00      	nop
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	200017ac 	.word	0x200017ac
 800deb4:	2000177c 	.word	0x2000177c
 800deb8:	20001790 	.word	0x20001790
 800debc:	200017a4 	.word	0x200017a4
 800dec0:	200017a8 	.word	0x200017a8
 800dec4:	20001858 	.word	0x20001858
 800dec8:	200017b8 	.word	0x200017b8
 800decc:	0800fcb4 	.word	0x0800fcb4

0800ded0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3b04      	subs	r3, #4
 800dee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3b04      	subs	r3, #4
 800deee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	f023 0201 	bic.w	r2, r3, #1
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3b04      	subs	r3, #4
 800defe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df00:	4a0c      	ldr	r2, [pc, #48]	; (800df34 <pxPortInitialiseStack+0x64>)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3b14      	subs	r3, #20
 800df0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3b04      	subs	r3, #4
 800df16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f06f 0202 	mvn.w	r2, #2
 800df1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3b20      	subs	r3, #32
 800df24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df26:	68fb      	ldr	r3, [r7, #12]
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	0800df39 	.word	0x0800df39

0800df38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df42:	4b12      	ldr	r3, [pc, #72]	; (800df8c <prvTaskExitError+0x54>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4a:	d00a      	beq.n	800df62 <prvTaskExitError+0x2a>
	__asm volatile
 800df4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df50:	f383 8811 	msr	BASEPRI, r3
 800df54:	f3bf 8f6f 	isb	sy
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	60fb      	str	r3, [r7, #12]
}
 800df5e:	bf00      	nop
 800df60:	e7fe      	b.n	800df60 <prvTaskExitError+0x28>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60bb      	str	r3, [r7, #8]
}
 800df74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df76:	bf00      	nop
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d0fc      	beq.n	800df78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	2000001c 	.word	0x2000001c

0800df90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df90:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <pxCurrentTCBConst2>)
 800df92:	6819      	ldr	r1, [r3, #0]
 800df94:	6808      	ldr	r0, [r1, #0]
 800df96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9a:	f380 8809 	msr	PSP, r0
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f04f 0000 	mov.w	r0, #0
 800dfa6:	f380 8811 	msr	BASEPRI, r0
 800dfaa:	4770      	bx	lr
 800dfac:	f3af 8000 	nop.w

0800dfb0 <pxCurrentTCBConst2>:
 800dfb0:	20001274 	.word	0x20001274
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop

0800dfb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfb8:	4808      	ldr	r0, [pc, #32]	; (800dfdc <prvPortStartFirstTask+0x24>)
 800dfba:	6800      	ldr	r0, [r0, #0]
 800dfbc:	6800      	ldr	r0, [r0, #0]
 800dfbe:	f380 8808 	msr	MSP, r0
 800dfc2:	f04f 0000 	mov.w	r0, #0
 800dfc6:	f380 8814 	msr	CONTROL, r0
 800dfca:	b662      	cpsie	i
 800dfcc:	b661      	cpsie	f
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	f3bf 8f6f 	isb	sy
 800dfd6:	df00      	svc	0
 800dfd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dfda:	bf00      	nop
 800dfdc:	e000ed08 	.word	0xe000ed08

0800dfe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dfe6:	4b46      	ldr	r3, [pc, #280]	; (800e100 <xPortStartScheduler+0x120>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a46      	ldr	r2, [pc, #280]	; (800e104 <xPortStartScheduler+0x124>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d10a      	bne.n	800e006 <xPortStartScheduler+0x26>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	613b      	str	r3, [r7, #16]
}
 800e002:	bf00      	nop
 800e004:	e7fe      	b.n	800e004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e006:	4b3e      	ldr	r3, [pc, #248]	; (800e100 <xPortStartScheduler+0x120>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a3f      	ldr	r2, [pc, #252]	; (800e108 <xPortStartScheduler+0x128>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d10a      	bne.n	800e026 <xPortStartScheduler+0x46>
	__asm volatile
 800e010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	60fb      	str	r3, [r7, #12]
}
 800e022:	bf00      	nop
 800e024:	e7fe      	b.n	800e024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e026:	4b39      	ldr	r3, [pc, #228]	; (800e10c <xPortStartScheduler+0x12c>)
 800e028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	22ff      	movs	r2, #255	; 0xff
 800e036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	4b31      	ldr	r3, [pc, #196]	; (800e110 <xPortStartScheduler+0x130>)
 800e04c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e04e:	4b31      	ldr	r3, [pc, #196]	; (800e114 <xPortStartScheduler+0x134>)
 800e050:	2207      	movs	r2, #7
 800e052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e054:	e009      	b.n	800e06a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e056:	4b2f      	ldr	r3, [pc, #188]	; (800e114 <xPortStartScheduler+0x134>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	4a2d      	ldr	r2, [pc, #180]	; (800e114 <xPortStartScheduler+0x134>)
 800e05e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	b2db      	uxtb	r3, r3
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	b2db      	uxtb	r3, r3
 800e068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e06a:	78fb      	ldrb	r3, [r7, #3]
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e072:	2b80      	cmp	r3, #128	; 0x80
 800e074:	d0ef      	beq.n	800e056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e076:	4b27      	ldr	r3, [pc, #156]	; (800e114 <xPortStartScheduler+0x134>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f1c3 0307 	rsb	r3, r3, #7
 800e07e:	2b04      	cmp	r3, #4
 800e080:	d00a      	beq.n	800e098 <xPortStartScheduler+0xb8>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	60bb      	str	r3, [r7, #8]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e098:	4b1e      	ldr	r3, [pc, #120]	; (800e114 <xPortStartScheduler+0x134>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	4a1d      	ldr	r2, [pc, #116]	; (800e114 <xPortStartScheduler+0x134>)
 800e0a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e0a2:	4b1c      	ldr	r3, [pc, #112]	; (800e114 <xPortStartScheduler+0x134>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e0aa:	4a1a      	ldr	r2, [pc, #104]	; (800e114 <xPortStartScheduler+0x134>)
 800e0ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e0b6:	4b18      	ldr	r3, [pc, #96]	; (800e118 <xPortStartScheduler+0x138>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a17      	ldr	r2, [pc, #92]	; (800e118 <xPortStartScheduler+0x138>)
 800e0bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e0c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e0c2:	4b15      	ldr	r3, [pc, #84]	; (800e118 <xPortStartScheduler+0x138>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a14      	ldr	r2, [pc, #80]	; (800e118 <xPortStartScheduler+0x138>)
 800e0c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e0cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0ce:	f000 f8dd 	bl	800e28c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0d2:	4b12      	ldr	r3, [pc, #72]	; (800e11c <xPortStartScheduler+0x13c>)
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0d8:	f000 f8fc 	bl	800e2d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0dc:	4b10      	ldr	r3, [pc, #64]	; (800e120 <xPortStartScheduler+0x140>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4a0f      	ldr	r2, [pc, #60]	; (800e120 <xPortStartScheduler+0x140>)
 800e0e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e0e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0e8:	f7ff ff66 	bl	800dfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0ec:	f7fe fda8 	bl	800cc40 <vTaskSwitchContext>
	prvTaskExitError();
 800e0f0:	f7ff ff22 	bl	800df38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3718      	adds	r7, #24
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	e000ed00 	.word	0xe000ed00
 800e104:	410fc271 	.word	0x410fc271
 800e108:	410fc270 	.word	0x410fc270
 800e10c:	e000e400 	.word	0xe000e400
 800e110:	200018a8 	.word	0x200018a8
 800e114:	200018ac 	.word	0x200018ac
 800e118:	e000ed20 	.word	0xe000ed20
 800e11c:	2000001c 	.word	0x2000001c
 800e120:	e000ef34 	.word	0xe000ef34

0800e124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
	__asm volatile
 800e12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12e:	f383 8811 	msr	BASEPRI, r3
 800e132:	f3bf 8f6f 	isb	sy
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	607b      	str	r3, [r7, #4]
}
 800e13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e13e:	4b0f      	ldr	r3, [pc, #60]	; (800e17c <vPortEnterCritical+0x58>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	4a0d      	ldr	r2, [pc, #52]	; (800e17c <vPortEnterCritical+0x58>)
 800e146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e148:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <vPortEnterCritical+0x58>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d10f      	bne.n	800e170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <vPortEnterCritical+0x5c>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	b2db      	uxtb	r3, r3
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00a      	beq.n	800e170 <vPortEnterCritical+0x4c>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	603b      	str	r3, [r7, #0]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <vPortEnterCritical+0x4a>
	}
}
 800e170:	bf00      	nop
 800e172:	370c      	adds	r7, #12
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr
 800e17c:	2000001c 	.word	0x2000001c
 800e180:	e000ed04 	.word	0xe000ed04

0800e184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e184:	b480      	push	{r7}
 800e186:	b083      	sub	sp, #12
 800e188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e18a:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <vPortExitCritical+0x50>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10a      	bne.n	800e1a8 <vPortExitCritical+0x24>
	__asm volatile
 800e192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	607b      	str	r3, [r7, #4]
}
 800e1a4:	bf00      	nop
 800e1a6:	e7fe      	b.n	800e1a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e1a8:	4b0a      	ldr	r3, [pc, #40]	; (800e1d4 <vPortExitCritical+0x50>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	4a09      	ldr	r2, [pc, #36]	; (800e1d4 <vPortExitCritical+0x50>)
 800e1b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e1b2:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <vPortExitCritical+0x50>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d105      	bne.n	800e1c6 <vPortExitCritical+0x42>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	f383 8811 	msr	BASEPRI, r3
}
 800e1c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	2000001c 	.word	0x2000001c
	...

0800e1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1e0:	f3ef 8009 	mrs	r0, PSP
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	4b15      	ldr	r3, [pc, #84]	; (800e240 <pxCurrentTCBConst>)
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	f01e 0f10 	tst.w	lr, #16
 800e1f0:	bf08      	it	eq
 800e1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fa:	6010      	str	r0, [r2, #0]
 800e1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e200:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e204:	f380 8811 	msr	BASEPRI, r0
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f7fe fd16 	bl	800cc40 <vTaskSwitchContext>
 800e214:	f04f 0000 	mov.w	r0, #0
 800e218:	f380 8811 	msr	BASEPRI, r0
 800e21c:	bc09      	pop	{r0, r3}
 800e21e:	6819      	ldr	r1, [r3, #0]
 800e220:	6808      	ldr	r0, [r1, #0]
 800e222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e226:	f01e 0f10 	tst.w	lr, #16
 800e22a:	bf08      	it	eq
 800e22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e230:	f380 8809 	msr	PSP, r0
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	f3af 8000 	nop.w

0800e240 <pxCurrentTCBConst>:
 800e240:	20001274 	.word	0x20001274
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop

0800e248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
	__asm volatile
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	607b      	str	r3, [r7, #4]
}
 800e260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e262:	f7fe fc33 	bl	800cacc <xTaskIncrementTick>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d003      	beq.n	800e274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e26c:	4b06      	ldr	r3, [pc, #24]	; (800e288 <xPortSysTickHandler+0x40>)
 800e26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	2300      	movs	r3, #0
 800e276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	f383 8811 	msr	BASEPRI, r3
}
 800e27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e280:	bf00      	nop
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	e000ed04 	.word	0xe000ed04

0800e28c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e290:	4b0b      	ldr	r3, [pc, #44]	; (800e2c0 <vPortSetupTimerInterrupt+0x34>)
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e296:	4b0b      	ldr	r3, [pc, #44]	; (800e2c4 <vPortSetupTimerInterrupt+0x38>)
 800e298:	2200      	movs	r2, #0
 800e29a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <vPortSetupTimerInterrupt+0x3c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a0a      	ldr	r2, [pc, #40]	; (800e2cc <vPortSetupTimerInterrupt+0x40>)
 800e2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a6:	099b      	lsrs	r3, r3, #6
 800e2a8:	4a09      	ldr	r2, [pc, #36]	; (800e2d0 <vPortSetupTimerInterrupt+0x44>)
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e2ae:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <vPortSetupTimerInterrupt+0x34>)
 800e2b0:	2207      	movs	r2, #7
 800e2b2:	601a      	str	r2, [r3, #0]
}
 800e2b4:	bf00      	nop
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	e000e010 	.word	0xe000e010
 800e2c4:	e000e018 	.word	0xe000e018
 800e2c8:	20000010 	.word	0x20000010
 800e2cc:	10624dd3 	.word	0x10624dd3
 800e2d0:	e000e014 	.word	0xe000e014

0800e2d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e2e4 <vPortEnableVFP+0x10>
 800e2d8:	6801      	ldr	r1, [r0, #0]
 800e2da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e2de:	6001      	str	r1, [r0, #0]
 800e2e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2e2:	bf00      	nop
 800e2e4:	e000ed88 	.word	0xe000ed88

0800e2e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2ee:	f3ef 8305 	mrs	r3, IPSR
 800e2f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b0f      	cmp	r3, #15
 800e2f8:	d914      	bls.n	800e324 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2fa:	4a17      	ldr	r2, [pc, #92]	; (800e358 <vPortValidateInterruptPriority+0x70>)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e304:	4b15      	ldr	r3, [pc, #84]	; (800e35c <vPortValidateInterruptPriority+0x74>)
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	7afa      	ldrb	r2, [r7, #11]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d20a      	bcs.n	800e324 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	607b      	str	r3, [r7, #4]
}
 800e320:	bf00      	nop
 800e322:	e7fe      	b.n	800e322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e324:	4b0e      	ldr	r3, [pc, #56]	; (800e360 <vPortValidateInterruptPriority+0x78>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e32c:	4b0d      	ldr	r3, [pc, #52]	; (800e364 <vPortValidateInterruptPriority+0x7c>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d90a      	bls.n	800e34a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e338:	f383 8811 	msr	BASEPRI, r3
 800e33c:	f3bf 8f6f 	isb	sy
 800e340:	f3bf 8f4f 	dsb	sy
 800e344:	603b      	str	r3, [r7, #0]
}
 800e346:	bf00      	nop
 800e348:	e7fe      	b.n	800e348 <vPortValidateInterruptPriority+0x60>
	}
 800e34a:	bf00      	nop
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	e000e3f0 	.word	0xe000e3f0
 800e35c:	200018a8 	.word	0x200018a8
 800e360:	e000ed0c 	.word	0xe000ed0c
 800e364:	200018ac 	.word	0x200018ac

0800e368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08a      	sub	sp, #40	; 0x28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e370:	2300      	movs	r3, #0
 800e372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e374:	f7fe faee 	bl	800c954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e378:	4b5d      	ldr	r3, [pc, #372]	; (800e4f0 <pvPortMalloc+0x188>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e380:	f000 f924 	bl	800e5cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e384:	4b5b      	ldr	r3, [pc, #364]	; (800e4f4 <pvPortMalloc+0x18c>)
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4013      	ands	r3, r2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f040 8093 	bne.w	800e4b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d01d      	beq.n	800e3d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e398:	2208      	movs	r2, #8
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4413      	add	r3, r2
 800e39e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f003 0307 	and.w	r3, r3, #7
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d014      	beq.n	800e3d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f023 0307 	bic.w	r3, r3, #7
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00a      	beq.n	800e3d4 <pvPortMalloc+0x6c>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	617b      	str	r3, [r7, #20]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d06e      	beq.n	800e4b8 <pvPortMalloc+0x150>
 800e3da:	4b47      	ldr	r3, [pc, #284]	; (800e4f8 <pvPortMalloc+0x190>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d869      	bhi.n	800e4b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3e4:	4b45      	ldr	r3, [pc, #276]	; (800e4fc <pvPortMalloc+0x194>)
 800e3e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3e8:	4b44      	ldr	r3, [pc, #272]	; (800e4fc <pvPortMalloc+0x194>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ee:	e004      	b.n	800e3fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	429a      	cmp	r2, r3
 800e402:	d903      	bls.n	800e40c <pvPortMalloc+0xa4>
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d1f1      	bne.n	800e3f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e40c:	4b38      	ldr	r3, [pc, #224]	; (800e4f0 <pvPortMalloc+0x188>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e412:	429a      	cmp	r2, r3
 800e414:	d050      	beq.n	800e4b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2208      	movs	r2, #8
 800e41c:	4413      	add	r3, r2
 800e41e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	685a      	ldr	r2, [r3, #4]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	1ad2      	subs	r2, r2, r3
 800e430:	2308      	movs	r3, #8
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	429a      	cmp	r2, r3
 800e436:	d91f      	bls.n	800e478 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	f003 0307 	and.w	r3, r3, #7
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00a      	beq.n	800e460 <pvPortMalloc+0xf8>
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	613b      	str	r3, [r7, #16]
}
 800e45c:	bf00      	nop
 800e45e:	e7fe      	b.n	800e45e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	685a      	ldr	r2, [r3, #4]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	1ad2      	subs	r2, r2, r3
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e472:	69b8      	ldr	r0, [r7, #24]
 800e474:	f000 f90c 	bl	800e690 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e478:	4b1f      	ldr	r3, [pc, #124]	; (800e4f8 <pvPortMalloc+0x190>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	4a1d      	ldr	r2, [pc, #116]	; (800e4f8 <pvPortMalloc+0x190>)
 800e484:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e486:	4b1c      	ldr	r3, [pc, #112]	; (800e4f8 <pvPortMalloc+0x190>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	4b1d      	ldr	r3, [pc, #116]	; (800e500 <pvPortMalloc+0x198>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d203      	bcs.n	800e49a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e492:	4b19      	ldr	r3, [pc, #100]	; (800e4f8 <pvPortMalloc+0x190>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a1a      	ldr	r2, [pc, #104]	; (800e500 <pvPortMalloc+0x198>)
 800e498:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	4b15      	ldr	r3, [pc, #84]	; (800e4f4 <pvPortMalloc+0x18c>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <pvPortMalloc+0x19c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	4a13      	ldr	r2, [pc, #76]	; (800e504 <pvPortMalloc+0x19c>)
 800e4b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e4b8:	f7fe fa5a 	bl	800c970 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e4c2:	f7f7 f8c9 	bl	8005658 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	f003 0307 	and.w	r3, r3, #7
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00a      	beq.n	800e4e6 <pvPortMalloc+0x17e>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <pvPortMalloc+0x17c>
	return pvReturn;
 800e4e6:	69fb      	ldr	r3, [r7, #28]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3728      	adds	r7, #40	; 0x28
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	200098b8 	.word	0x200098b8
 800e4f4:	200098cc 	.word	0x200098cc
 800e4f8:	200098bc 	.word	0x200098bc
 800e4fc:	200098b0 	.word	0x200098b0
 800e500:	200098c0 	.word	0x200098c0
 800e504:	200098c4 	.word	0x200098c4

0800e508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d04d      	beq.n	800e5b6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e51a:	2308      	movs	r3, #8
 800e51c:	425b      	negs	r3, r3
 800e51e:	697a      	ldr	r2, [r7, #20]
 800e520:	4413      	add	r3, r2
 800e522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	4b24      	ldr	r3, [pc, #144]	; (800e5c0 <vPortFree+0xb8>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4013      	ands	r3, r2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10a      	bne.n	800e54c <vPortFree+0x44>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	60fb      	str	r3, [r7, #12]
}
 800e548:	bf00      	nop
 800e54a:	e7fe      	b.n	800e54a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d00a      	beq.n	800e56a <vPortFree+0x62>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	60bb      	str	r3, [r7, #8]
}
 800e566:	bf00      	nop
 800e568:	e7fe      	b.n	800e568 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	4b14      	ldr	r3, [pc, #80]	; (800e5c0 <vPortFree+0xb8>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4013      	ands	r3, r2
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01e      	beq.n	800e5b6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d11a      	bne.n	800e5b6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <vPortFree+0xb8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	43db      	mvns	r3, r3
 800e58a:	401a      	ands	r2, r3
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e590:	f7fe f9e0 	bl	800c954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <vPortFree+0xbc>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4413      	add	r3, r2
 800e59e:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <vPortFree+0xbc>)
 800e5a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5a2:	6938      	ldr	r0, [r7, #16]
 800e5a4:	f000 f874 	bl	800e690 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e5a8:	4b07      	ldr	r3, [pc, #28]	; (800e5c8 <vPortFree+0xc0>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	4a06      	ldr	r2, [pc, #24]	; (800e5c8 <vPortFree+0xc0>)
 800e5b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e5b2:	f7fe f9dd 	bl	800c970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5b6:	bf00      	nop
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	200098cc 	.word	0x200098cc
 800e5c4:	200098bc 	.word	0x200098bc
 800e5c8:	200098c8 	.word	0x200098c8

0800e5cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5d8:	4b27      	ldr	r3, [pc, #156]	; (800e678 <prvHeapInit+0xac>)
 800e5da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f003 0307 	and.w	r3, r3, #7
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00c      	beq.n	800e600 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3307      	adds	r3, #7
 800e5ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f023 0307 	bic.w	r3, r3, #7
 800e5f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	4a1f      	ldr	r2, [pc, #124]	; (800e678 <prvHeapInit+0xac>)
 800e5fc:	4413      	add	r3, r2
 800e5fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e604:	4a1d      	ldr	r2, [pc, #116]	; (800e67c <prvHeapInit+0xb0>)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e60a:	4b1c      	ldr	r3, [pc, #112]	; (800e67c <prvHeapInit+0xb0>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	4413      	add	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e618:	2208      	movs	r2, #8
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	1a9b      	subs	r3, r3, r2
 800e61e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f023 0307 	bic.w	r3, r3, #7
 800e626:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	4a15      	ldr	r2, [pc, #84]	; (800e680 <prvHeapInit+0xb4>)
 800e62c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e62e:	4b14      	ldr	r3, [pc, #80]	; (800e680 <prvHeapInit+0xb4>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2200      	movs	r2, #0
 800e634:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e636:	4b12      	ldr	r3, [pc, #72]	; (800e680 <prvHeapInit+0xb4>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	1ad2      	subs	r2, r2, r3
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e64c:	4b0c      	ldr	r3, [pc, #48]	; (800e680 <prvHeapInit+0xb4>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	4a0a      	ldr	r2, [pc, #40]	; (800e684 <prvHeapInit+0xb8>)
 800e65a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	4a09      	ldr	r2, [pc, #36]	; (800e688 <prvHeapInit+0xbc>)
 800e662:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e664:	4b09      	ldr	r3, [pc, #36]	; (800e68c <prvHeapInit+0xc0>)
 800e666:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e66a:	601a      	str	r2, [r3, #0]
}
 800e66c:	bf00      	nop
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	200018b0 	.word	0x200018b0
 800e67c:	200098b0 	.word	0x200098b0
 800e680:	200098b8 	.word	0x200098b8
 800e684:	200098c0 	.word	0x200098c0
 800e688:	200098bc 	.word	0x200098bc
 800e68c:	200098cc 	.word	0x200098cc

0800e690 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e690:	b480      	push	{r7}
 800e692:	b085      	sub	sp, #20
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e698:	4b28      	ldr	r3, [pc, #160]	; (800e73c <prvInsertBlockIntoFreeList+0xac>)
 800e69a:	60fb      	str	r3, [r7, #12]
 800e69c:	e002      	b.n	800e6a4 <prvInsertBlockIntoFreeList+0x14>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d8f7      	bhi.n	800e69e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d108      	bne.n	800e6d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	441a      	add	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	68ba      	ldr	r2, [r7, #8]
 800e6dc:	441a      	add	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d118      	bne.n	800e718 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	4b15      	ldr	r3, [pc, #84]	; (800e740 <prvInsertBlockIntoFreeList+0xb0>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d00d      	beq.n	800e70e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	441a      	add	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	e008      	b.n	800e720 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e70e:	4b0c      	ldr	r3, [pc, #48]	; (800e740 <prvInsertBlockIntoFreeList+0xb0>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	e003      	b.n	800e720 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	429a      	cmp	r2, r3
 800e726:	d002      	beq.n	800e72e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e72e:	bf00      	nop
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	200098b0 	.word	0x200098b0
 800e740:	200098b8 	.word	0x200098b8

0800e744 <__cxa_guard_acquire>:
 800e744:	6803      	ldr	r3, [r0, #0]
 800e746:	07db      	lsls	r3, r3, #31
 800e748:	d406      	bmi.n	800e758 <__cxa_guard_acquire+0x14>
 800e74a:	7843      	ldrb	r3, [r0, #1]
 800e74c:	b103      	cbz	r3, 800e750 <__cxa_guard_acquire+0xc>
 800e74e:	deff      	udf	#255	; 0xff
 800e750:	2301      	movs	r3, #1
 800e752:	7043      	strb	r3, [r0, #1]
 800e754:	4618      	mov	r0, r3
 800e756:	4770      	bx	lr
 800e758:	2000      	movs	r0, #0
 800e75a:	4770      	bx	lr

0800e75c <__cxa_guard_release>:
 800e75c:	2301      	movs	r3, #1
 800e75e:	6003      	str	r3, [r0, #0]
 800e760:	4770      	bx	lr

0800e762 <_ZSt25__throw_bad_function_callv>:
 800e762:	b508      	push	{r3, lr}
 800e764:	f000 f824 	bl	800e7b0 <abort>

0800e768 <roundf>:
 800e768:	ee10 0a10 	vmov	r0, s0
 800e76c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e770:	3a7f      	subs	r2, #127	; 0x7f
 800e772:	2a16      	cmp	r2, #22
 800e774:	dc15      	bgt.n	800e7a2 <roundf+0x3a>
 800e776:	2a00      	cmp	r2, #0
 800e778:	da08      	bge.n	800e78c <roundf+0x24>
 800e77a:	3201      	adds	r2, #1
 800e77c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800e780:	d101      	bne.n	800e786 <roundf+0x1e>
 800e782:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800e786:	ee00 3a10 	vmov	s0, r3
 800e78a:	4770      	bx	lr
 800e78c:	4907      	ldr	r1, [pc, #28]	; (800e7ac <roundf+0x44>)
 800e78e:	4111      	asrs	r1, r2
 800e790:	4208      	tst	r0, r1
 800e792:	d0fa      	beq.n	800e78a <roundf+0x22>
 800e794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e798:	4113      	asrs	r3, r2
 800e79a:	4403      	add	r3, r0
 800e79c:	ea23 0301 	bic.w	r3, r3, r1
 800e7a0:	e7f1      	b.n	800e786 <roundf+0x1e>
 800e7a2:	2a80      	cmp	r2, #128	; 0x80
 800e7a4:	d1f1      	bne.n	800e78a <roundf+0x22>
 800e7a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e7aa:	4770      	bx	lr
 800e7ac:	007fffff 	.word	0x007fffff

0800e7b0 <abort>:
 800e7b0:	b508      	push	{r3, lr}
 800e7b2:	2006      	movs	r0, #6
 800e7b4:	f000 fb5c 	bl	800ee70 <raise>
 800e7b8:	2001      	movs	r0, #1
 800e7ba:	f7f7 fb61 	bl	8005e80 <_exit>

0800e7be <atexit>:
 800e7be:	2300      	movs	r3, #0
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 bc85 	b.w	800f0d4 <__register_exitproc>
	...

0800e7cc <__errno>:
 800e7cc:	4b01      	ldr	r3, [pc, #4]	; (800e7d4 <__errno+0x8>)
 800e7ce:	6818      	ldr	r0, [r3, #0]
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000020 	.word	0x20000020

0800e7d8 <std>:
 800e7d8:	2300      	movs	r3, #0
 800e7da:	b510      	push	{r4, lr}
 800e7dc:	4604      	mov	r4, r0
 800e7de:	e9c0 3300 	strd	r3, r3, [r0]
 800e7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7e6:	6083      	str	r3, [r0, #8]
 800e7e8:	8181      	strh	r1, [r0, #12]
 800e7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e7ec:	81c2      	strh	r2, [r0, #14]
 800e7ee:	6183      	str	r3, [r0, #24]
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	2208      	movs	r2, #8
 800e7f4:	305c      	adds	r0, #92	; 0x5c
 800e7f6:	f000 f923 	bl	800ea40 <memset>
 800e7fa:	4b05      	ldr	r3, [pc, #20]	; (800e810 <std+0x38>)
 800e7fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e7fe:	4b05      	ldr	r3, [pc, #20]	; (800e814 <std+0x3c>)
 800e800:	62a3      	str	r3, [r4, #40]	; 0x28
 800e802:	4b05      	ldr	r3, [pc, #20]	; (800e818 <std+0x40>)
 800e804:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e806:	4b05      	ldr	r3, [pc, #20]	; (800e81c <std+0x44>)
 800e808:	6224      	str	r4, [r4, #32]
 800e80a:	6323      	str	r3, [r4, #48]	; 0x30
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	bf00      	nop
 800e810:	0800eea9 	.word	0x0800eea9
 800e814:	0800eecb 	.word	0x0800eecb
 800e818:	0800ef03 	.word	0x0800ef03
 800e81c:	0800ef27 	.word	0x0800ef27

0800e820 <_cleanup_r>:
 800e820:	4901      	ldr	r1, [pc, #4]	; (800e828 <_cleanup_r+0x8>)
 800e822:	f000 b8af 	b.w	800e984 <_fwalk_reent>
 800e826:	bf00      	nop
 800e828:	0800f2c5 	.word	0x0800f2c5

0800e82c <__sfmoreglue>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	2268      	movs	r2, #104	; 0x68
 800e830:	1e4d      	subs	r5, r1, #1
 800e832:	4355      	muls	r5, r2
 800e834:	460e      	mov	r6, r1
 800e836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e83a:	f000 f975 	bl	800eb28 <_malloc_r>
 800e83e:	4604      	mov	r4, r0
 800e840:	b140      	cbz	r0, 800e854 <__sfmoreglue+0x28>
 800e842:	2100      	movs	r1, #0
 800e844:	e9c0 1600 	strd	r1, r6, [r0]
 800e848:	300c      	adds	r0, #12
 800e84a:	60a0      	str	r0, [r4, #8]
 800e84c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e850:	f000 f8f6 	bl	800ea40 <memset>
 800e854:	4620      	mov	r0, r4
 800e856:	bd70      	pop	{r4, r5, r6, pc}

0800e858 <__sfp_lock_acquire>:
 800e858:	4801      	ldr	r0, [pc, #4]	; (800e860 <__sfp_lock_acquire+0x8>)
 800e85a:	f000 b8d8 	b.w	800ea0e <__retarget_lock_acquire_recursive>
 800e85e:	bf00      	nop
 800e860:	200098d2 	.word	0x200098d2

0800e864 <__sfp_lock_release>:
 800e864:	4801      	ldr	r0, [pc, #4]	; (800e86c <__sfp_lock_release+0x8>)
 800e866:	f000 b8d4 	b.w	800ea12 <__retarget_lock_release_recursive>
 800e86a:	bf00      	nop
 800e86c:	200098d2 	.word	0x200098d2

0800e870 <__sinit_lock_acquire>:
 800e870:	4801      	ldr	r0, [pc, #4]	; (800e878 <__sinit_lock_acquire+0x8>)
 800e872:	f000 b8cc 	b.w	800ea0e <__retarget_lock_acquire_recursive>
 800e876:	bf00      	nop
 800e878:	200098d3 	.word	0x200098d3

0800e87c <__sinit_lock_release>:
 800e87c:	4801      	ldr	r0, [pc, #4]	; (800e884 <__sinit_lock_release+0x8>)
 800e87e:	f000 b8c8 	b.w	800ea12 <__retarget_lock_release_recursive>
 800e882:	bf00      	nop
 800e884:	200098d3 	.word	0x200098d3

0800e888 <__sinit>:
 800e888:	b510      	push	{r4, lr}
 800e88a:	4604      	mov	r4, r0
 800e88c:	f7ff fff0 	bl	800e870 <__sinit_lock_acquire>
 800e890:	69a3      	ldr	r3, [r4, #24]
 800e892:	b11b      	cbz	r3, 800e89c <__sinit+0x14>
 800e894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e898:	f7ff bff0 	b.w	800e87c <__sinit_lock_release>
 800e89c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e8a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e8a2:	4b13      	ldr	r3, [pc, #76]	; (800e8f0 <__sinit+0x68>)
 800e8a4:	4a13      	ldr	r2, [pc, #76]	; (800e8f4 <__sinit+0x6c>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e8aa:	42a3      	cmp	r3, r4
 800e8ac:	bf04      	itt	eq
 800e8ae:	2301      	moveq	r3, #1
 800e8b0:	61a3      	streq	r3, [r4, #24]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 f820 	bl	800e8f8 <__sfp>
 800e8b8:	6060      	str	r0, [r4, #4]
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f000 f81c 	bl	800e8f8 <__sfp>
 800e8c0:	60a0      	str	r0, [r4, #8]
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 f818 	bl	800e8f8 <__sfp>
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	60e0      	str	r0, [r4, #12]
 800e8cc:	2104      	movs	r1, #4
 800e8ce:	6860      	ldr	r0, [r4, #4]
 800e8d0:	f7ff ff82 	bl	800e7d8 <std>
 800e8d4:	68a0      	ldr	r0, [r4, #8]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	2109      	movs	r1, #9
 800e8da:	f7ff ff7d 	bl	800e7d8 <std>
 800e8de:	68e0      	ldr	r0, [r4, #12]
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	2112      	movs	r1, #18
 800e8e4:	f7ff ff78 	bl	800e7d8 <std>
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	61a3      	str	r3, [r4, #24]
 800e8ec:	e7d2      	b.n	800e894 <__sinit+0xc>
 800e8ee:	bf00      	nop
 800e8f0:	0800fe24 	.word	0x0800fe24
 800e8f4:	0800e821 	.word	0x0800e821

0800e8f8 <__sfp>:
 800e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	f7ff ffac 	bl	800e858 <__sfp_lock_acquire>
 800e900:	4b1e      	ldr	r3, [pc, #120]	; (800e97c <__sfp+0x84>)
 800e902:	681e      	ldr	r6, [r3, #0]
 800e904:	69b3      	ldr	r3, [r6, #24]
 800e906:	b913      	cbnz	r3, 800e90e <__sfp+0x16>
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff ffbd 	bl	800e888 <__sinit>
 800e90e:	3648      	adds	r6, #72	; 0x48
 800e910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e914:	3b01      	subs	r3, #1
 800e916:	d503      	bpl.n	800e920 <__sfp+0x28>
 800e918:	6833      	ldr	r3, [r6, #0]
 800e91a:	b30b      	cbz	r3, 800e960 <__sfp+0x68>
 800e91c:	6836      	ldr	r6, [r6, #0]
 800e91e:	e7f7      	b.n	800e910 <__sfp+0x18>
 800e920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e924:	b9d5      	cbnz	r5, 800e95c <__sfp+0x64>
 800e926:	4b16      	ldr	r3, [pc, #88]	; (800e980 <__sfp+0x88>)
 800e928:	60e3      	str	r3, [r4, #12]
 800e92a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e92e:	6665      	str	r5, [r4, #100]	; 0x64
 800e930:	f000 f86c 	bl	800ea0c <__retarget_lock_init_recursive>
 800e934:	f7ff ff96 	bl	800e864 <__sfp_lock_release>
 800e938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e93c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e940:	6025      	str	r5, [r4, #0]
 800e942:	61a5      	str	r5, [r4, #24]
 800e944:	2208      	movs	r2, #8
 800e946:	4629      	mov	r1, r5
 800e948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e94c:	f000 f878 	bl	800ea40 <memset>
 800e950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e958:	4620      	mov	r0, r4
 800e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e95c:	3468      	adds	r4, #104	; 0x68
 800e95e:	e7d9      	b.n	800e914 <__sfp+0x1c>
 800e960:	2104      	movs	r1, #4
 800e962:	4638      	mov	r0, r7
 800e964:	f7ff ff62 	bl	800e82c <__sfmoreglue>
 800e968:	4604      	mov	r4, r0
 800e96a:	6030      	str	r0, [r6, #0]
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d1d5      	bne.n	800e91c <__sfp+0x24>
 800e970:	f7ff ff78 	bl	800e864 <__sfp_lock_release>
 800e974:	230c      	movs	r3, #12
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	e7ee      	b.n	800e958 <__sfp+0x60>
 800e97a:	bf00      	nop
 800e97c:	0800fe24 	.word	0x0800fe24
 800e980:	ffff0001 	.word	0xffff0001

0800e984 <_fwalk_reent>:
 800e984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e988:	4606      	mov	r6, r0
 800e98a:	4688      	mov	r8, r1
 800e98c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e990:	2700      	movs	r7, #0
 800e992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e996:	f1b9 0901 	subs.w	r9, r9, #1
 800e99a:	d505      	bpl.n	800e9a8 <_fwalk_reent+0x24>
 800e99c:	6824      	ldr	r4, [r4, #0]
 800e99e:	2c00      	cmp	r4, #0
 800e9a0:	d1f7      	bne.n	800e992 <_fwalk_reent+0xe>
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9a8:	89ab      	ldrh	r3, [r5, #12]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d907      	bls.n	800e9be <_fwalk_reent+0x3a>
 800e9ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	d003      	beq.n	800e9be <_fwalk_reent+0x3a>
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	47c0      	blx	r8
 800e9bc:	4307      	orrs	r7, r0
 800e9be:	3568      	adds	r5, #104	; 0x68
 800e9c0:	e7e9      	b.n	800e996 <_fwalk_reent+0x12>
	...

0800e9c4 <__libc_init_array>:
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	4d0d      	ldr	r5, [pc, #52]	; (800e9fc <__libc_init_array+0x38>)
 800e9c8:	4c0d      	ldr	r4, [pc, #52]	; (800ea00 <__libc_init_array+0x3c>)
 800e9ca:	1b64      	subs	r4, r4, r5
 800e9cc:	10a4      	asrs	r4, r4, #2
 800e9ce:	2600      	movs	r6, #0
 800e9d0:	42a6      	cmp	r6, r4
 800e9d2:	d109      	bne.n	800e9e8 <__libc_init_array+0x24>
 800e9d4:	4d0b      	ldr	r5, [pc, #44]	; (800ea04 <__libc_init_array+0x40>)
 800e9d6:	4c0c      	ldr	r4, [pc, #48]	; (800ea08 <__libc_init_array+0x44>)
 800e9d8:	f001 f856 	bl	800fa88 <_init>
 800e9dc:	1b64      	subs	r4, r4, r5
 800e9de:	10a4      	asrs	r4, r4, #2
 800e9e0:	2600      	movs	r6, #0
 800e9e2:	42a6      	cmp	r6, r4
 800e9e4:	d105      	bne.n	800e9f2 <__libc_init_array+0x2e>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ec:	4798      	blx	r3
 800e9ee:	3601      	adds	r6, #1
 800e9f0:	e7ee      	b.n	800e9d0 <__libc_init_array+0xc>
 800e9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9f6:	4798      	blx	r3
 800e9f8:	3601      	adds	r6, #1
 800e9fa:	e7f2      	b.n	800e9e2 <__libc_init_array+0x1e>
 800e9fc:	0800fe64 	.word	0x0800fe64
 800ea00:	0800fe64 	.word	0x0800fe64
 800ea04:	0800fe64 	.word	0x0800fe64
 800ea08:	0800fe80 	.word	0x0800fe80

0800ea0c <__retarget_lock_init_recursive>:
 800ea0c:	4770      	bx	lr

0800ea0e <__retarget_lock_acquire_recursive>:
 800ea0e:	4770      	bx	lr

0800ea10 <__retarget_lock_release>:
 800ea10:	4770      	bx	lr

0800ea12 <__retarget_lock_release_recursive>:
 800ea12:	4770      	bx	lr

0800ea14 <malloc>:
 800ea14:	4b02      	ldr	r3, [pc, #8]	; (800ea20 <malloc+0xc>)
 800ea16:	4601      	mov	r1, r0
 800ea18:	6818      	ldr	r0, [r3, #0]
 800ea1a:	f000 b885 	b.w	800eb28 <_malloc_r>
 800ea1e:	bf00      	nop
 800ea20:	20000020 	.word	0x20000020

0800ea24 <memcpy>:
 800ea24:	440a      	add	r2, r1
 800ea26:	4291      	cmp	r1, r2
 800ea28:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea2c:	d100      	bne.n	800ea30 <memcpy+0xc>
 800ea2e:	4770      	bx	lr
 800ea30:	b510      	push	{r4, lr}
 800ea32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea3a:	4291      	cmp	r1, r2
 800ea3c:	d1f9      	bne.n	800ea32 <memcpy+0xe>
 800ea3e:	bd10      	pop	{r4, pc}

0800ea40 <memset>:
 800ea40:	4402      	add	r2, r0
 800ea42:	4603      	mov	r3, r0
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d100      	bne.n	800ea4a <memset+0xa>
 800ea48:	4770      	bx	lr
 800ea4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea4e:	e7f9      	b.n	800ea44 <memset+0x4>

0800ea50 <_free_r>:
 800ea50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea52:	2900      	cmp	r1, #0
 800ea54:	d044      	beq.n	800eae0 <_free_r+0x90>
 800ea56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea5a:	9001      	str	r0, [sp, #4]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea62:	bfb8      	it	lt
 800ea64:	18e4      	addlt	r4, r4, r3
 800ea66:	f000 fce1 	bl	800f42c <__malloc_lock>
 800ea6a:	4a1e      	ldr	r2, [pc, #120]	; (800eae4 <_free_r+0x94>)
 800ea6c:	9801      	ldr	r0, [sp, #4]
 800ea6e:	6813      	ldr	r3, [r2, #0]
 800ea70:	b933      	cbnz	r3, 800ea80 <_free_r+0x30>
 800ea72:	6063      	str	r3, [r4, #4]
 800ea74:	6014      	str	r4, [r2, #0]
 800ea76:	b003      	add	sp, #12
 800ea78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea7c:	f000 bcdc 	b.w	800f438 <__malloc_unlock>
 800ea80:	42a3      	cmp	r3, r4
 800ea82:	d908      	bls.n	800ea96 <_free_r+0x46>
 800ea84:	6825      	ldr	r5, [r4, #0]
 800ea86:	1961      	adds	r1, r4, r5
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf01      	itttt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	1949      	addeq	r1, r1, r5
 800ea92:	6021      	streq	r1, [r4, #0]
 800ea94:	e7ed      	b.n	800ea72 <_free_r+0x22>
 800ea96:	461a      	mov	r2, r3
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	b10b      	cbz	r3, 800eaa0 <_free_r+0x50>
 800ea9c:	42a3      	cmp	r3, r4
 800ea9e:	d9fa      	bls.n	800ea96 <_free_r+0x46>
 800eaa0:	6811      	ldr	r1, [r2, #0]
 800eaa2:	1855      	adds	r5, r2, r1
 800eaa4:	42a5      	cmp	r5, r4
 800eaa6:	d10b      	bne.n	800eac0 <_free_r+0x70>
 800eaa8:	6824      	ldr	r4, [r4, #0]
 800eaaa:	4421      	add	r1, r4
 800eaac:	1854      	adds	r4, r2, r1
 800eaae:	42a3      	cmp	r3, r4
 800eab0:	6011      	str	r1, [r2, #0]
 800eab2:	d1e0      	bne.n	800ea76 <_free_r+0x26>
 800eab4:	681c      	ldr	r4, [r3, #0]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	6053      	str	r3, [r2, #4]
 800eaba:	4421      	add	r1, r4
 800eabc:	6011      	str	r1, [r2, #0]
 800eabe:	e7da      	b.n	800ea76 <_free_r+0x26>
 800eac0:	d902      	bls.n	800eac8 <_free_r+0x78>
 800eac2:	230c      	movs	r3, #12
 800eac4:	6003      	str	r3, [r0, #0]
 800eac6:	e7d6      	b.n	800ea76 <_free_r+0x26>
 800eac8:	6825      	ldr	r5, [r4, #0]
 800eaca:	1961      	adds	r1, r4, r5
 800eacc:	428b      	cmp	r3, r1
 800eace:	bf04      	itt	eq
 800ead0:	6819      	ldreq	r1, [r3, #0]
 800ead2:	685b      	ldreq	r3, [r3, #4]
 800ead4:	6063      	str	r3, [r4, #4]
 800ead6:	bf04      	itt	eq
 800ead8:	1949      	addeq	r1, r1, r5
 800eada:	6021      	streq	r1, [r4, #0]
 800eadc:	6054      	str	r4, [r2, #4]
 800eade:	e7ca      	b.n	800ea76 <_free_r+0x26>
 800eae0:	b003      	add	sp, #12
 800eae2:	bd30      	pop	{r4, r5, pc}
 800eae4:	200098d4 	.word	0x200098d4

0800eae8 <sbrk_aligned>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	4e0e      	ldr	r6, [pc, #56]	; (800eb24 <sbrk_aligned+0x3c>)
 800eaec:	460c      	mov	r4, r1
 800eaee:	6831      	ldr	r1, [r6, #0]
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	b911      	cbnz	r1, 800eafa <sbrk_aligned+0x12>
 800eaf4:	f000 f984 	bl	800ee00 <_sbrk_r>
 800eaf8:	6030      	str	r0, [r6, #0]
 800eafa:	4621      	mov	r1, r4
 800eafc:	4628      	mov	r0, r5
 800eafe:	f000 f97f 	bl	800ee00 <_sbrk_r>
 800eb02:	1c43      	adds	r3, r0, #1
 800eb04:	d00a      	beq.n	800eb1c <sbrk_aligned+0x34>
 800eb06:	1cc4      	adds	r4, r0, #3
 800eb08:	f024 0403 	bic.w	r4, r4, #3
 800eb0c:	42a0      	cmp	r0, r4
 800eb0e:	d007      	beq.n	800eb20 <sbrk_aligned+0x38>
 800eb10:	1a21      	subs	r1, r4, r0
 800eb12:	4628      	mov	r0, r5
 800eb14:	f000 f974 	bl	800ee00 <_sbrk_r>
 800eb18:	3001      	adds	r0, #1
 800eb1a:	d101      	bne.n	800eb20 <sbrk_aligned+0x38>
 800eb1c:	f04f 34ff 	mov.w	r4, #4294967295
 800eb20:	4620      	mov	r0, r4
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	200098d8 	.word	0x200098d8

0800eb28 <_malloc_r>:
 800eb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb2c:	1ccd      	adds	r5, r1, #3
 800eb2e:	f025 0503 	bic.w	r5, r5, #3
 800eb32:	3508      	adds	r5, #8
 800eb34:	2d0c      	cmp	r5, #12
 800eb36:	bf38      	it	cc
 800eb38:	250c      	movcc	r5, #12
 800eb3a:	2d00      	cmp	r5, #0
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	db01      	blt.n	800eb44 <_malloc_r+0x1c>
 800eb40:	42a9      	cmp	r1, r5
 800eb42:	d905      	bls.n	800eb50 <_malloc_r+0x28>
 800eb44:	230c      	movs	r3, #12
 800eb46:	603b      	str	r3, [r7, #0]
 800eb48:	2600      	movs	r6, #0
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb50:	4e2e      	ldr	r6, [pc, #184]	; (800ec0c <_malloc_r+0xe4>)
 800eb52:	f000 fc6b 	bl	800f42c <__malloc_lock>
 800eb56:	6833      	ldr	r3, [r6, #0]
 800eb58:	461c      	mov	r4, r3
 800eb5a:	bb34      	cbnz	r4, 800ebaa <_malloc_r+0x82>
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	4638      	mov	r0, r7
 800eb60:	f7ff ffc2 	bl	800eae8 <sbrk_aligned>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	4604      	mov	r4, r0
 800eb68:	d14d      	bne.n	800ec06 <_malloc_r+0xde>
 800eb6a:	6834      	ldr	r4, [r6, #0]
 800eb6c:	4626      	mov	r6, r4
 800eb6e:	2e00      	cmp	r6, #0
 800eb70:	d140      	bne.n	800ebf4 <_malloc_r+0xcc>
 800eb72:	6823      	ldr	r3, [r4, #0]
 800eb74:	4631      	mov	r1, r6
 800eb76:	4638      	mov	r0, r7
 800eb78:	eb04 0803 	add.w	r8, r4, r3
 800eb7c:	f000 f940 	bl	800ee00 <_sbrk_r>
 800eb80:	4580      	cmp	r8, r0
 800eb82:	d13a      	bne.n	800ebfa <_malloc_r+0xd2>
 800eb84:	6821      	ldr	r1, [r4, #0]
 800eb86:	3503      	adds	r5, #3
 800eb88:	1a6d      	subs	r5, r5, r1
 800eb8a:	f025 0503 	bic.w	r5, r5, #3
 800eb8e:	3508      	adds	r5, #8
 800eb90:	2d0c      	cmp	r5, #12
 800eb92:	bf38      	it	cc
 800eb94:	250c      	movcc	r5, #12
 800eb96:	4629      	mov	r1, r5
 800eb98:	4638      	mov	r0, r7
 800eb9a:	f7ff ffa5 	bl	800eae8 <sbrk_aligned>
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d02b      	beq.n	800ebfa <_malloc_r+0xd2>
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	442b      	add	r3, r5
 800eba6:	6023      	str	r3, [r4, #0]
 800eba8:	e00e      	b.n	800ebc8 <_malloc_r+0xa0>
 800ebaa:	6822      	ldr	r2, [r4, #0]
 800ebac:	1b52      	subs	r2, r2, r5
 800ebae:	d41e      	bmi.n	800ebee <_malloc_r+0xc6>
 800ebb0:	2a0b      	cmp	r2, #11
 800ebb2:	d916      	bls.n	800ebe2 <_malloc_r+0xba>
 800ebb4:	1961      	adds	r1, r4, r5
 800ebb6:	42a3      	cmp	r3, r4
 800ebb8:	6025      	str	r5, [r4, #0]
 800ebba:	bf18      	it	ne
 800ebbc:	6059      	strne	r1, [r3, #4]
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	bf08      	it	eq
 800ebc2:	6031      	streq	r1, [r6, #0]
 800ebc4:	5162      	str	r2, [r4, r5]
 800ebc6:	604b      	str	r3, [r1, #4]
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f104 060b 	add.w	r6, r4, #11
 800ebce:	f000 fc33 	bl	800f438 <__malloc_unlock>
 800ebd2:	f026 0607 	bic.w	r6, r6, #7
 800ebd6:	1d23      	adds	r3, r4, #4
 800ebd8:	1af2      	subs	r2, r6, r3
 800ebda:	d0b6      	beq.n	800eb4a <_malloc_r+0x22>
 800ebdc:	1b9b      	subs	r3, r3, r6
 800ebde:	50a3      	str	r3, [r4, r2]
 800ebe0:	e7b3      	b.n	800eb4a <_malloc_r+0x22>
 800ebe2:	6862      	ldr	r2, [r4, #4]
 800ebe4:	42a3      	cmp	r3, r4
 800ebe6:	bf0c      	ite	eq
 800ebe8:	6032      	streq	r2, [r6, #0]
 800ebea:	605a      	strne	r2, [r3, #4]
 800ebec:	e7ec      	b.n	800ebc8 <_malloc_r+0xa0>
 800ebee:	4623      	mov	r3, r4
 800ebf0:	6864      	ldr	r4, [r4, #4]
 800ebf2:	e7b2      	b.n	800eb5a <_malloc_r+0x32>
 800ebf4:	4634      	mov	r4, r6
 800ebf6:	6876      	ldr	r6, [r6, #4]
 800ebf8:	e7b9      	b.n	800eb6e <_malloc_r+0x46>
 800ebfa:	230c      	movs	r3, #12
 800ebfc:	603b      	str	r3, [r7, #0]
 800ebfe:	4638      	mov	r0, r7
 800ec00:	f000 fc1a 	bl	800f438 <__malloc_unlock>
 800ec04:	e7a1      	b.n	800eb4a <_malloc_r+0x22>
 800ec06:	6025      	str	r5, [r4, #0]
 800ec08:	e7de      	b.n	800ebc8 <_malloc_r+0xa0>
 800ec0a:	bf00      	nop
 800ec0c:	200098d4 	.word	0x200098d4

0800ec10 <iprintf>:
 800ec10:	b40f      	push	{r0, r1, r2, r3}
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <iprintf+0x2c>)
 800ec14:	b513      	push	{r0, r1, r4, lr}
 800ec16:	681c      	ldr	r4, [r3, #0]
 800ec18:	b124      	cbz	r4, 800ec24 <iprintf+0x14>
 800ec1a:	69a3      	ldr	r3, [r4, #24]
 800ec1c:	b913      	cbnz	r3, 800ec24 <iprintf+0x14>
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f7ff fe32 	bl	800e888 <__sinit>
 800ec24:	ab05      	add	r3, sp, #20
 800ec26:	9a04      	ldr	r2, [sp, #16]
 800ec28:	68a1      	ldr	r1, [r4, #8]
 800ec2a:	9301      	str	r3, [sp, #4]
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 fc33 	bl	800f498 <_vfiprintf_r>
 800ec32:	b002      	add	sp, #8
 800ec34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec38:	b004      	add	sp, #16
 800ec3a:	4770      	bx	lr
 800ec3c:	20000020 	.word	0x20000020

0800ec40 <_puts_r>:
 800ec40:	b570      	push	{r4, r5, r6, lr}
 800ec42:	460e      	mov	r6, r1
 800ec44:	4605      	mov	r5, r0
 800ec46:	b118      	cbz	r0, 800ec50 <_puts_r+0x10>
 800ec48:	6983      	ldr	r3, [r0, #24]
 800ec4a:	b90b      	cbnz	r3, 800ec50 <_puts_r+0x10>
 800ec4c:	f7ff fe1c 	bl	800e888 <__sinit>
 800ec50:	69ab      	ldr	r3, [r5, #24]
 800ec52:	68ac      	ldr	r4, [r5, #8]
 800ec54:	b913      	cbnz	r3, 800ec5c <_puts_r+0x1c>
 800ec56:	4628      	mov	r0, r5
 800ec58:	f7ff fe16 	bl	800e888 <__sinit>
 800ec5c:	4b2c      	ldr	r3, [pc, #176]	; (800ed10 <_puts_r+0xd0>)
 800ec5e:	429c      	cmp	r4, r3
 800ec60:	d120      	bne.n	800eca4 <_puts_r+0x64>
 800ec62:	686c      	ldr	r4, [r5, #4]
 800ec64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec66:	07db      	lsls	r3, r3, #31
 800ec68:	d405      	bmi.n	800ec76 <_puts_r+0x36>
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	0598      	lsls	r0, r3, #22
 800ec6e:	d402      	bmi.n	800ec76 <_puts_r+0x36>
 800ec70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec72:	f7ff fecc 	bl	800ea0e <__retarget_lock_acquire_recursive>
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	0719      	lsls	r1, r3, #28
 800ec7a:	d51d      	bpl.n	800ecb8 <_puts_r+0x78>
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	b1db      	cbz	r3, 800ecb8 <_puts_r+0x78>
 800ec80:	3e01      	subs	r6, #1
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	60a3      	str	r3, [r4, #8]
 800ec8c:	bb39      	cbnz	r1, 800ecde <_puts_r+0x9e>
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da38      	bge.n	800ed04 <_puts_r+0xc4>
 800ec92:	4622      	mov	r2, r4
 800ec94:	210a      	movs	r1, #10
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 f94a 	bl	800ef30 <__swbuf_r>
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d011      	beq.n	800ecc4 <_puts_r+0x84>
 800eca0:	250a      	movs	r5, #10
 800eca2:	e011      	b.n	800ecc8 <_puts_r+0x88>
 800eca4:	4b1b      	ldr	r3, [pc, #108]	; (800ed14 <_puts_r+0xd4>)
 800eca6:	429c      	cmp	r4, r3
 800eca8:	d101      	bne.n	800ecae <_puts_r+0x6e>
 800ecaa:	68ac      	ldr	r4, [r5, #8]
 800ecac:	e7da      	b.n	800ec64 <_puts_r+0x24>
 800ecae:	4b1a      	ldr	r3, [pc, #104]	; (800ed18 <_puts_r+0xd8>)
 800ecb0:	429c      	cmp	r4, r3
 800ecb2:	bf08      	it	eq
 800ecb4:	68ec      	ldreq	r4, [r5, #12]
 800ecb6:	e7d5      	b.n	800ec64 <_puts_r+0x24>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f000 f99c 	bl	800eff8 <__swsetup_r>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d0dd      	beq.n	800ec80 <_puts_r+0x40>
 800ecc4:	f04f 35ff 	mov.w	r5, #4294967295
 800ecc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecca:	07da      	lsls	r2, r3, #31
 800eccc:	d405      	bmi.n	800ecda <_puts_r+0x9a>
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	059b      	lsls	r3, r3, #22
 800ecd2:	d402      	bmi.n	800ecda <_puts_r+0x9a>
 800ecd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd6:	f7ff fe9c 	bl	800ea12 <__retarget_lock_release_recursive>
 800ecda:	4628      	mov	r0, r5
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	da04      	bge.n	800ecec <_puts_r+0xac>
 800ece2:	69a2      	ldr	r2, [r4, #24]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	dc06      	bgt.n	800ecf6 <_puts_r+0xb6>
 800ece8:	290a      	cmp	r1, #10
 800ecea:	d004      	beq.n	800ecf6 <_puts_r+0xb6>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	6022      	str	r2, [r4, #0]
 800ecf2:	7019      	strb	r1, [r3, #0]
 800ecf4:	e7c5      	b.n	800ec82 <_puts_r+0x42>
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 f919 	bl	800ef30 <__swbuf_r>
 800ecfe:	3001      	adds	r0, #1
 800ed00:	d1bf      	bne.n	800ec82 <_puts_r+0x42>
 800ed02:	e7df      	b.n	800ecc4 <_puts_r+0x84>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	250a      	movs	r5, #10
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	6022      	str	r2, [r4, #0]
 800ed0c:	701d      	strb	r5, [r3, #0]
 800ed0e:	e7db      	b.n	800ecc8 <_puts_r+0x88>
 800ed10:	0800fde4 	.word	0x0800fde4
 800ed14:	0800fe04 	.word	0x0800fe04
 800ed18:	0800fdc4 	.word	0x0800fdc4

0800ed1c <puts>:
 800ed1c:	4b02      	ldr	r3, [pc, #8]	; (800ed28 <puts+0xc>)
 800ed1e:	4601      	mov	r1, r0
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f7ff bf8d 	b.w	800ec40 <_puts_r>
 800ed26:	bf00      	nop
 800ed28:	20000020 	.word	0x20000020

0800ed2c <cleanup_glue>:
 800ed2c:	b538      	push	{r3, r4, r5, lr}
 800ed2e:	460c      	mov	r4, r1
 800ed30:	6809      	ldr	r1, [r1, #0]
 800ed32:	4605      	mov	r5, r0
 800ed34:	b109      	cbz	r1, 800ed3a <cleanup_glue+0xe>
 800ed36:	f7ff fff9 	bl	800ed2c <cleanup_glue>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed42:	f7ff be85 	b.w	800ea50 <_free_r>
	...

0800ed48 <_reclaim_reent>:
 800ed48:	4b2c      	ldr	r3, [pc, #176]	; (800edfc <_reclaim_reent+0xb4>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4283      	cmp	r3, r0
 800ed4e:	b570      	push	{r4, r5, r6, lr}
 800ed50:	4604      	mov	r4, r0
 800ed52:	d051      	beq.n	800edf8 <_reclaim_reent+0xb0>
 800ed54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed56:	b143      	cbz	r3, 800ed6a <_reclaim_reent+0x22>
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d14a      	bne.n	800edf4 <_reclaim_reent+0xac>
 800ed5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed60:	6819      	ldr	r1, [r3, #0]
 800ed62:	b111      	cbz	r1, 800ed6a <_reclaim_reent+0x22>
 800ed64:	4620      	mov	r0, r4
 800ed66:	f7ff fe73 	bl	800ea50 <_free_r>
 800ed6a:	6961      	ldr	r1, [r4, #20]
 800ed6c:	b111      	cbz	r1, 800ed74 <_reclaim_reent+0x2c>
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f7ff fe6e 	bl	800ea50 <_free_r>
 800ed74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed76:	b111      	cbz	r1, 800ed7e <_reclaim_reent+0x36>
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f7ff fe69 	bl	800ea50 <_free_r>
 800ed7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ed80:	b111      	cbz	r1, 800ed88 <_reclaim_reent+0x40>
 800ed82:	4620      	mov	r0, r4
 800ed84:	f7ff fe64 	bl	800ea50 <_free_r>
 800ed88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ed8a:	b111      	cbz	r1, 800ed92 <_reclaim_reent+0x4a>
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	f7ff fe5f 	bl	800ea50 <_free_r>
 800ed92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ed94:	b111      	cbz	r1, 800ed9c <_reclaim_reent+0x54>
 800ed96:	4620      	mov	r0, r4
 800ed98:	f7ff fe5a 	bl	800ea50 <_free_r>
 800ed9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ed9e:	b111      	cbz	r1, 800eda6 <_reclaim_reent+0x5e>
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7ff fe55 	bl	800ea50 <_free_r>
 800eda6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eda8:	b111      	cbz	r1, 800edb0 <_reclaim_reent+0x68>
 800edaa:	4620      	mov	r0, r4
 800edac:	f7ff fe50 	bl	800ea50 <_free_r>
 800edb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edb2:	b111      	cbz	r1, 800edba <_reclaim_reent+0x72>
 800edb4:	4620      	mov	r0, r4
 800edb6:	f7ff fe4b 	bl	800ea50 <_free_r>
 800edba:	69a3      	ldr	r3, [r4, #24]
 800edbc:	b1e3      	cbz	r3, 800edf8 <_reclaim_reent+0xb0>
 800edbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800edc0:	4620      	mov	r0, r4
 800edc2:	4798      	blx	r3
 800edc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800edc6:	b1b9      	cbz	r1, 800edf8 <_reclaim_reent+0xb0>
 800edc8:	4620      	mov	r0, r4
 800edca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edce:	f7ff bfad 	b.w	800ed2c <cleanup_glue>
 800edd2:	5949      	ldr	r1, [r1, r5]
 800edd4:	b941      	cbnz	r1, 800ede8 <_reclaim_reent+0xa0>
 800edd6:	3504      	adds	r5, #4
 800edd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edda:	2d80      	cmp	r5, #128	; 0x80
 800eddc:	68d9      	ldr	r1, [r3, #12]
 800edde:	d1f8      	bne.n	800edd2 <_reclaim_reent+0x8a>
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7ff fe35 	bl	800ea50 <_free_r>
 800ede6:	e7ba      	b.n	800ed5e <_reclaim_reent+0x16>
 800ede8:	680e      	ldr	r6, [r1, #0]
 800edea:	4620      	mov	r0, r4
 800edec:	f7ff fe30 	bl	800ea50 <_free_r>
 800edf0:	4631      	mov	r1, r6
 800edf2:	e7ef      	b.n	800edd4 <_reclaim_reent+0x8c>
 800edf4:	2500      	movs	r5, #0
 800edf6:	e7ef      	b.n	800edd8 <_reclaim_reent+0x90>
 800edf8:	bd70      	pop	{r4, r5, r6, pc}
 800edfa:	bf00      	nop
 800edfc:	20000020 	.word	0x20000020

0800ee00 <_sbrk_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d06      	ldr	r5, [pc, #24]	; (800ee1c <_sbrk_r+0x1c>)
 800ee04:	2300      	movs	r3, #0
 800ee06:	4604      	mov	r4, r0
 800ee08:	4608      	mov	r0, r1
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	f7f7 f8b0 	bl	8005f70 <_sbrk>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_sbrk_r+0x1a>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_sbrk_r+0x1a>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	200098dc 	.word	0x200098dc

0800ee20 <_raise_r>:
 800ee20:	291f      	cmp	r1, #31
 800ee22:	b538      	push	{r3, r4, r5, lr}
 800ee24:	4604      	mov	r4, r0
 800ee26:	460d      	mov	r5, r1
 800ee28:	d904      	bls.n	800ee34 <_raise_r+0x14>
 800ee2a:	2316      	movs	r3, #22
 800ee2c:	6003      	str	r3, [r0, #0]
 800ee2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee36:	b112      	cbz	r2, 800ee3e <_raise_r+0x1e>
 800ee38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee3c:	b94b      	cbnz	r3, 800ee52 <_raise_r+0x32>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f000 f830 	bl	800eea4 <_getpid_r>
 800ee44:	462a      	mov	r2, r5
 800ee46:	4601      	mov	r1, r0
 800ee48:	4620      	mov	r0, r4
 800ee4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee4e:	f000 b817 	b.w	800ee80 <_kill_r>
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d00a      	beq.n	800ee6c <_raise_r+0x4c>
 800ee56:	1c59      	adds	r1, r3, #1
 800ee58:	d103      	bne.n	800ee62 <_raise_r+0x42>
 800ee5a:	2316      	movs	r3, #22
 800ee5c:	6003      	str	r3, [r0, #0]
 800ee5e:	2001      	movs	r0, #1
 800ee60:	e7e7      	b.n	800ee32 <_raise_r+0x12>
 800ee62:	2400      	movs	r4, #0
 800ee64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee68:	4628      	mov	r0, r5
 800ee6a:	4798      	blx	r3
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	e7e0      	b.n	800ee32 <_raise_r+0x12>

0800ee70 <raise>:
 800ee70:	4b02      	ldr	r3, [pc, #8]	; (800ee7c <raise+0xc>)
 800ee72:	4601      	mov	r1, r0
 800ee74:	6818      	ldr	r0, [r3, #0]
 800ee76:	f7ff bfd3 	b.w	800ee20 <_raise_r>
 800ee7a:	bf00      	nop
 800ee7c:	20000020 	.word	0x20000020

0800ee80 <_kill_r>:
 800ee80:	b538      	push	{r3, r4, r5, lr}
 800ee82:	4d07      	ldr	r5, [pc, #28]	; (800eea0 <_kill_r+0x20>)
 800ee84:	2300      	movs	r3, #0
 800ee86:	4604      	mov	r4, r0
 800ee88:	4608      	mov	r0, r1
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	602b      	str	r3, [r5, #0]
 800ee8e:	f7f6 ffe7 	bl	8005e60 <_kill>
 800ee92:	1c43      	adds	r3, r0, #1
 800ee94:	d102      	bne.n	800ee9c <_kill_r+0x1c>
 800ee96:	682b      	ldr	r3, [r5, #0]
 800ee98:	b103      	cbz	r3, 800ee9c <_kill_r+0x1c>
 800ee9a:	6023      	str	r3, [r4, #0]
 800ee9c:	bd38      	pop	{r3, r4, r5, pc}
 800ee9e:	bf00      	nop
 800eea0:	200098dc 	.word	0x200098dc

0800eea4 <_getpid_r>:
 800eea4:	f7f6 bfd4 	b.w	8005e50 <_getpid>

0800eea8 <__sread>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	460c      	mov	r4, r1
 800eeac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb0:	f000 fdb6 	bl	800fa20 <_read_r>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	bfab      	itete	ge
 800eeb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eeba:	89a3      	ldrhlt	r3, [r4, #12]
 800eebc:	181b      	addge	r3, r3, r0
 800eebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eec2:	bfac      	ite	ge
 800eec4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eec6:	81a3      	strhlt	r3, [r4, #12]
 800eec8:	bd10      	pop	{r4, pc}

0800eeca <__swrite>:
 800eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eece:	461f      	mov	r7, r3
 800eed0:	898b      	ldrh	r3, [r1, #12]
 800eed2:	05db      	lsls	r3, r3, #23
 800eed4:	4605      	mov	r5, r0
 800eed6:	460c      	mov	r4, r1
 800eed8:	4616      	mov	r6, r2
 800eeda:	d505      	bpl.n	800eee8 <__swrite+0x1e>
 800eedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee0:	2302      	movs	r3, #2
 800eee2:	2200      	movs	r2, #0
 800eee4:	f000 fa2a 	bl	800f33c <_lseek_r>
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eef2:	81a3      	strh	r3, [r4, #12]
 800eef4:	4632      	mov	r2, r6
 800eef6:	463b      	mov	r3, r7
 800eef8:	4628      	mov	r0, r5
 800eefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eefe:	f000 b869 	b.w	800efd4 <_write_r>

0800ef02 <__sseek>:
 800ef02:	b510      	push	{r4, lr}
 800ef04:	460c      	mov	r4, r1
 800ef06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef0a:	f000 fa17 	bl	800f33c <_lseek_r>
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	bf15      	itete	ne
 800ef14:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef1e:	81a3      	strheq	r3, [r4, #12]
 800ef20:	bf18      	it	ne
 800ef22:	81a3      	strhne	r3, [r4, #12]
 800ef24:	bd10      	pop	{r4, pc}

0800ef26 <__sclose>:
 800ef26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2a:	f000 b935 	b.w	800f198 <_close_r>
	...

0800ef30 <__swbuf_r>:
 800ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef32:	460e      	mov	r6, r1
 800ef34:	4614      	mov	r4, r2
 800ef36:	4605      	mov	r5, r0
 800ef38:	b118      	cbz	r0, 800ef42 <__swbuf_r+0x12>
 800ef3a:	6983      	ldr	r3, [r0, #24]
 800ef3c:	b90b      	cbnz	r3, 800ef42 <__swbuf_r+0x12>
 800ef3e:	f7ff fca3 	bl	800e888 <__sinit>
 800ef42:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <__swbuf_r+0x98>)
 800ef44:	429c      	cmp	r4, r3
 800ef46:	d12b      	bne.n	800efa0 <__swbuf_r+0x70>
 800ef48:	686c      	ldr	r4, [r5, #4]
 800ef4a:	69a3      	ldr	r3, [r4, #24]
 800ef4c:	60a3      	str	r3, [r4, #8]
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	071a      	lsls	r2, r3, #28
 800ef52:	d52f      	bpl.n	800efb4 <__swbuf_r+0x84>
 800ef54:	6923      	ldr	r3, [r4, #16]
 800ef56:	b36b      	cbz	r3, 800efb4 <__swbuf_r+0x84>
 800ef58:	6923      	ldr	r3, [r4, #16]
 800ef5a:	6820      	ldr	r0, [r4, #0]
 800ef5c:	1ac0      	subs	r0, r0, r3
 800ef5e:	6963      	ldr	r3, [r4, #20]
 800ef60:	b2f6      	uxtb	r6, r6
 800ef62:	4283      	cmp	r3, r0
 800ef64:	4637      	mov	r7, r6
 800ef66:	dc04      	bgt.n	800ef72 <__swbuf_r+0x42>
 800ef68:	4621      	mov	r1, r4
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f000 f9aa 	bl	800f2c4 <_fflush_r>
 800ef70:	bb30      	cbnz	r0, 800efc0 <__swbuf_r+0x90>
 800ef72:	68a3      	ldr	r3, [r4, #8]
 800ef74:	3b01      	subs	r3, #1
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	6823      	ldr	r3, [r4, #0]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	6022      	str	r2, [r4, #0]
 800ef7e:	701e      	strb	r6, [r3, #0]
 800ef80:	6963      	ldr	r3, [r4, #20]
 800ef82:	3001      	adds	r0, #1
 800ef84:	4283      	cmp	r3, r0
 800ef86:	d004      	beq.n	800ef92 <__swbuf_r+0x62>
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	07db      	lsls	r3, r3, #31
 800ef8c:	d506      	bpl.n	800ef9c <__swbuf_r+0x6c>
 800ef8e:	2e0a      	cmp	r6, #10
 800ef90:	d104      	bne.n	800ef9c <__swbuf_r+0x6c>
 800ef92:	4621      	mov	r1, r4
 800ef94:	4628      	mov	r0, r5
 800ef96:	f000 f995 	bl	800f2c4 <_fflush_r>
 800ef9a:	b988      	cbnz	r0, 800efc0 <__swbuf_r+0x90>
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efa0:	4b0a      	ldr	r3, [pc, #40]	; (800efcc <__swbuf_r+0x9c>)
 800efa2:	429c      	cmp	r4, r3
 800efa4:	d101      	bne.n	800efaa <__swbuf_r+0x7a>
 800efa6:	68ac      	ldr	r4, [r5, #8]
 800efa8:	e7cf      	b.n	800ef4a <__swbuf_r+0x1a>
 800efaa:	4b09      	ldr	r3, [pc, #36]	; (800efd0 <__swbuf_r+0xa0>)
 800efac:	429c      	cmp	r4, r3
 800efae:	bf08      	it	eq
 800efb0:	68ec      	ldreq	r4, [r5, #12]
 800efb2:	e7ca      	b.n	800ef4a <__swbuf_r+0x1a>
 800efb4:	4621      	mov	r1, r4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 f81e 	bl	800eff8 <__swsetup_r>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d0cb      	beq.n	800ef58 <__swbuf_r+0x28>
 800efc0:	f04f 37ff 	mov.w	r7, #4294967295
 800efc4:	e7ea      	b.n	800ef9c <__swbuf_r+0x6c>
 800efc6:	bf00      	nop
 800efc8:	0800fde4 	.word	0x0800fde4
 800efcc:	0800fe04 	.word	0x0800fe04
 800efd0:	0800fdc4 	.word	0x0800fdc4

0800efd4 <_write_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d07      	ldr	r5, [pc, #28]	; (800eff4 <_write_r+0x20>)
 800efd8:	4604      	mov	r4, r0
 800efda:	4608      	mov	r0, r1
 800efdc:	4611      	mov	r1, r2
 800efde:	2200      	movs	r2, #0
 800efe0:	602a      	str	r2, [r5, #0]
 800efe2:	461a      	mov	r2, r3
 800efe4:	f7f6 ff73 	bl	8005ece <_write>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_write_r+0x1e>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_write_r+0x1e>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	200098dc 	.word	0x200098dc

0800eff8 <__swsetup_r>:
 800eff8:	4b32      	ldr	r3, [pc, #200]	; (800f0c4 <__swsetup_r+0xcc>)
 800effa:	b570      	push	{r4, r5, r6, lr}
 800effc:	681d      	ldr	r5, [r3, #0]
 800effe:	4606      	mov	r6, r0
 800f000:	460c      	mov	r4, r1
 800f002:	b125      	cbz	r5, 800f00e <__swsetup_r+0x16>
 800f004:	69ab      	ldr	r3, [r5, #24]
 800f006:	b913      	cbnz	r3, 800f00e <__swsetup_r+0x16>
 800f008:	4628      	mov	r0, r5
 800f00a:	f7ff fc3d 	bl	800e888 <__sinit>
 800f00e:	4b2e      	ldr	r3, [pc, #184]	; (800f0c8 <__swsetup_r+0xd0>)
 800f010:	429c      	cmp	r4, r3
 800f012:	d10f      	bne.n	800f034 <__swsetup_r+0x3c>
 800f014:	686c      	ldr	r4, [r5, #4]
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f01c:	0719      	lsls	r1, r3, #28
 800f01e:	d42c      	bmi.n	800f07a <__swsetup_r+0x82>
 800f020:	06dd      	lsls	r5, r3, #27
 800f022:	d411      	bmi.n	800f048 <__swsetup_r+0x50>
 800f024:	2309      	movs	r3, #9
 800f026:	6033      	str	r3, [r6, #0]
 800f028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	f04f 30ff 	mov.w	r0, #4294967295
 800f032:	e03e      	b.n	800f0b2 <__swsetup_r+0xba>
 800f034:	4b25      	ldr	r3, [pc, #148]	; (800f0cc <__swsetup_r+0xd4>)
 800f036:	429c      	cmp	r4, r3
 800f038:	d101      	bne.n	800f03e <__swsetup_r+0x46>
 800f03a:	68ac      	ldr	r4, [r5, #8]
 800f03c:	e7eb      	b.n	800f016 <__swsetup_r+0x1e>
 800f03e:	4b24      	ldr	r3, [pc, #144]	; (800f0d0 <__swsetup_r+0xd8>)
 800f040:	429c      	cmp	r4, r3
 800f042:	bf08      	it	eq
 800f044:	68ec      	ldreq	r4, [r5, #12]
 800f046:	e7e6      	b.n	800f016 <__swsetup_r+0x1e>
 800f048:	0758      	lsls	r0, r3, #29
 800f04a:	d512      	bpl.n	800f072 <__swsetup_r+0x7a>
 800f04c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f04e:	b141      	cbz	r1, 800f062 <__swsetup_r+0x6a>
 800f050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f054:	4299      	cmp	r1, r3
 800f056:	d002      	beq.n	800f05e <__swsetup_r+0x66>
 800f058:	4630      	mov	r0, r6
 800f05a:	f7ff fcf9 	bl	800ea50 <_free_r>
 800f05e:	2300      	movs	r3, #0
 800f060:	6363      	str	r3, [r4, #52]	; 0x34
 800f062:	89a3      	ldrh	r3, [r4, #12]
 800f064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f068:	81a3      	strh	r3, [r4, #12]
 800f06a:	2300      	movs	r3, #0
 800f06c:	6063      	str	r3, [r4, #4]
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	f043 0308 	orr.w	r3, r3, #8
 800f078:	81a3      	strh	r3, [r4, #12]
 800f07a:	6923      	ldr	r3, [r4, #16]
 800f07c:	b94b      	cbnz	r3, 800f092 <__swsetup_r+0x9a>
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f088:	d003      	beq.n	800f092 <__swsetup_r+0x9a>
 800f08a:	4621      	mov	r1, r4
 800f08c:	4630      	mov	r0, r6
 800f08e:	f000 f98d 	bl	800f3ac <__smakebuf_r>
 800f092:	89a0      	ldrh	r0, [r4, #12]
 800f094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f098:	f010 0301 	ands.w	r3, r0, #1
 800f09c:	d00a      	beq.n	800f0b4 <__swsetup_r+0xbc>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60a3      	str	r3, [r4, #8]
 800f0a2:	6963      	ldr	r3, [r4, #20]
 800f0a4:	425b      	negs	r3, r3
 800f0a6:	61a3      	str	r3, [r4, #24]
 800f0a8:	6923      	ldr	r3, [r4, #16]
 800f0aa:	b943      	cbnz	r3, 800f0be <__swsetup_r+0xc6>
 800f0ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0b0:	d1ba      	bne.n	800f028 <__swsetup_r+0x30>
 800f0b2:	bd70      	pop	{r4, r5, r6, pc}
 800f0b4:	0781      	lsls	r1, r0, #30
 800f0b6:	bf58      	it	pl
 800f0b8:	6963      	ldrpl	r3, [r4, #20]
 800f0ba:	60a3      	str	r3, [r4, #8]
 800f0bc:	e7f4      	b.n	800f0a8 <__swsetup_r+0xb0>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	e7f7      	b.n	800f0b2 <__swsetup_r+0xba>
 800f0c2:	bf00      	nop
 800f0c4:	20000020 	.word	0x20000020
 800f0c8:	0800fde4 	.word	0x0800fde4
 800f0cc:	0800fe04 	.word	0x0800fe04
 800f0d0:	0800fdc4 	.word	0x0800fdc4

0800f0d4 <__register_exitproc>:
 800f0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800f194 <__register_exitproc+0xc0>
 800f0dc:	4606      	mov	r6, r0
 800f0de:	f8d8 0000 	ldr.w	r0, [r8]
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	460d      	mov	r5, r1
 800f0e6:	4691      	mov	r9, r2
 800f0e8:	f7ff fc91 	bl	800ea0e <__retarget_lock_acquire_recursive>
 800f0ec:	4b25      	ldr	r3, [pc, #148]	; (800f184 <__register_exitproc+0xb0>)
 800f0ee:	681c      	ldr	r4, [r3, #0]
 800f0f0:	b934      	cbnz	r4, 800f100 <__register_exitproc+0x2c>
 800f0f2:	4c25      	ldr	r4, [pc, #148]	; (800f188 <__register_exitproc+0xb4>)
 800f0f4:	601c      	str	r4, [r3, #0]
 800f0f6:	4b25      	ldr	r3, [pc, #148]	; (800f18c <__register_exitproc+0xb8>)
 800f0f8:	b113      	cbz	r3, 800f100 <__register_exitproc+0x2c>
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800f100:	6863      	ldr	r3, [r4, #4]
 800f102:	2b1f      	cmp	r3, #31
 800f104:	dd07      	ble.n	800f116 <__register_exitproc+0x42>
 800f106:	f8d8 0000 	ldr.w	r0, [r8]
 800f10a:	f7ff fc82 	bl	800ea12 <__retarget_lock_release_recursive>
 800f10e:	f04f 30ff 	mov.w	r0, #4294967295
 800f112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f116:	b34e      	cbz	r6, 800f16c <__register_exitproc+0x98>
 800f118:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800f11c:	b988      	cbnz	r0, 800f142 <__register_exitproc+0x6e>
 800f11e:	4b1c      	ldr	r3, [pc, #112]	; (800f190 <__register_exitproc+0xbc>)
 800f120:	b923      	cbnz	r3, 800f12c <__register_exitproc+0x58>
 800f122:	f8d8 0000 	ldr.w	r0, [r8]
 800f126:	f7ff fc73 	bl	800ea10 <__retarget_lock_release>
 800f12a:	e7f0      	b.n	800f10e <__register_exitproc+0x3a>
 800f12c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800f130:	f7ff fc70 	bl	800ea14 <malloc>
 800f134:	2800      	cmp	r0, #0
 800f136:	d0f4      	beq.n	800f122 <__register_exitproc+0x4e>
 800f138:	2300      	movs	r3, #0
 800f13a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800f13e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800f142:	6863      	ldr	r3, [r4, #4]
 800f144:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f148:	2201      	movs	r2, #1
 800f14a:	409a      	lsls	r2, r3
 800f14c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f150:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800f154:	4313      	orrs	r3, r2
 800f156:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f15a:	2e02      	cmp	r6, #2
 800f15c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800f160:	bf02      	ittt	eq
 800f162:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800f166:	4313      	orreq	r3, r2
 800f168:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800f16c:	6863      	ldr	r3, [r4, #4]
 800f16e:	f8d8 0000 	ldr.w	r0, [r8]
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	3302      	adds	r3, #2
 800f176:	6062      	str	r2, [r4, #4]
 800f178:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800f17c:	f7ff fc49 	bl	800ea12 <__retarget_lock_release_recursive>
 800f180:	2000      	movs	r0, #0
 800f182:	e7c6      	b.n	800f112 <__register_exitproc+0x3e>
 800f184:	2000996c 	.word	0x2000996c
 800f188:	200098e0 	.word	0x200098e0
 800f18c:	00000000 	.word	0x00000000
 800f190:	0800ea15 	.word	0x0800ea15
 800f194:	20000084 	.word	0x20000084

0800f198 <_close_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d06      	ldr	r5, [pc, #24]	; (800f1b4 <_close_r+0x1c>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f6 feaf 	bl	8005f06 <_close>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_close_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_close_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	200098dc 	.word	0x200098dc

0800f1b8 <__sflush_r>:
 800f1b8:	898a      	ldrh	r2, [r1, #12]
 800f1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1be:	4605      	mov	r5, r0
 800f1c0:	0710      	lsls	r0, r2, #28
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	d458      	bmi.n	800f278 <__sflush_r+0xc0>
 800f1c6:	684b      	ldr	r3, [r1, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dc05      	bgt.n	800f1d8 <__sflush_r+0x20>
 800f1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	dc02      	bgt.n	800f1d8 <__sflush_r+0x20>
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1da:	2e00      	cmp	r6, #0
 800f1dc:	d0f9      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e4:	682f      	ldr	r7, [r5, #0]
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	d032      	beq.n	800f250 <__sflush_r+0x98>
 800f1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1ec:	89a3      	ldrh	r3, [r4, #12]
 800f1ee:	075a      	lsls	r2, r3, #29
 800f1f0:	d505      	bpl.n	800f1fe <__sflush_r+0x46>
 800f1f2:	6863      	ldr	r3, [r4, #4]
 800f1f4:	1ac0      	subs	r0, r0, r3
 800f1f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f8:	b10b      	cbz	r3, 800f1fe <__sflush_r+0x46>
 800f1fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1fc:	1ac0      	subs	r0, r0, r3
 800f1fe:	2300      	movs	r3, #0
 800f200:	4602      	mov	r2, r0
 800f202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f204:	6a21      	ldr	r1, [r4, #32]
 800f206:	4628      	mov	r0, r5
 800f208:	47b0      	blx	r6
 800f20a:	1c43      	adds	r3, r0, #1
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	d106      	bne.n	800f21e <__sflush_r+0x66>
 800f210:	6829      	ldr	r1, [r5, #0]
 800f212:	291d      	cmp	r1, #29
 800f214:	d82c      	bhi.n	800f270 <__sflush_r+0xb8>
 800f216:	4a2a      	ldr	r2, [pc, #168]	; (800f2c0 <__sflush_r+0x108>)
 800f218:	40ca      	lsrs	r2, r1
 800f21a:	07d6      	lsls	r6, r2, #31
 800f21c:	d528      	bpl.n	800f270 <__sflush_r+0xb8>
 800f21e:	2200      	movs	r2, #0
 800f220:	6062      	str	r2, [r4, #4]
 800f222:	04d9      	lsls	r1, r3, #19
 800f224:	6922      	ldr	r2, [r4, #16]
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	d504      	bpl.n	800f234 <__sflush_r+0x7c>
 800f22a:	1c42      	adds	r2, r0, #1
 800f22c:	d101      	bne.n	800f232 <__sflush_r+0x7a>
 800f22e:	682b      	ldr	r3, [r5, #0]
 800f230:	b903      	cbnz	r3, 800f234 <__sflush_r+0x7c>
 800f232:	6560      	str	r0, [r4, #84]	; 0x54
 800f234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f236:	602f      	str	r7, [r5, #0]
 800f238:	2900      	cmp	r1, #0
 800f23a:	d0ca      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f240:	4299      	cmp	r1, r3
 800f242:	d002      	beq.n	800f24a <__sflush_r+0x92>
 800f244:	4628      	mov	r0, r5
 800f246:	f7ff fc03 	bl	800ea50 <_free_r>
 800f24a:	2000      	movs	r0, #0
 800f24c:	6360      	str	r0, [r4, #52]	; 0x34
 800f24e:	e7c1      	b.n	800f1d4 <__sflush_r+0x1c>
 800f250:	6a21      	ldr	r1, [r4, #32]
 800f252:	2301      	movs	r3, #1
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	1c41      	adds	r1, r0, #1
 800f25a:	d1c7      	bne.n	800f1ec <__sflush_r+0x34>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d0c4      	beq.n	800f1ec <__sflush_r+0x34>
 800f262:	2b1d      	cmp	r3, #29
 800f264:	d001      	beq.n	800f26a <__sflush_r+0xb2>
 800f266:	2b16      	cmp	r3, #22
 800f268:	d101      	bne.n	800f26e <__sflush_r+0xb6>
 800f26a:	602f      	str	r7, [r5, #0]
 800f26c:	e7b1      	b.n	800f1d2 <__sflush_r+0x1a>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f274:	81a3      	strh	r3, [r4, #12]
 800f276:	e7ad      	b.n	800f1d4 <__sflush_r+0x1c>
 800f278:	690f      	ldr	r7, [r1, #16]
 800f27a:	2f00      	cmp	r7, #0
 800f27c:	d0a9      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f27e:	0793      	lsls	r3, r2, #30
 800f280:	680e      	ldr	r6, [r1, #0]
 800f282:	bf08      	it	eq
 800f284:	694b      	ldreq	r3, [r1, #20]
 800f286:	600f      	str	r7, [r1, #0]
 800f288:	bf18      	it	ne
 800f28a:	2300      	movne	r3, #0
 800f28c:	eba6 0807 	sub.w	r8, r6, r7
 800f290:	608b      	str	r3, [r1, #8]
 800f292:	f1b8 0f00 	cmp.w	r8, #0
 800f296:	dd9c      	ble.n	800f1d2 <__sflush_r+0x1a>
 800f298:	6a21      	ldr	r1, [r4, #32]
 800f29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f29c:	4643      	mov	r3, r8
 800f29e:	463a      	mov	r2, r7
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	47b0      	blx	r6
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	dc06      	bgt.n	800f2b6 <__sflush_r+0xfe>
 800f2a8:	89a3      	ldrh	r3, [r4, #12]
 800f2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b4:	e78e      	b.n	800f1d4 <__sflush_r+0x1c>
 800f2b6:	4407      	add	r7, r0
 800f2b8:	eba8 0800 	sub.w	r8, r8, r0
 800f2bc:	e7e9      	b.n	800f292 <__sflush_r+0xda>
 800f2be:	bf00      	nop
 800f2c0:	20400001 	.word	0x20400001

0800f2c4 <_fflush_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	690b      	ldr	r3, [r1, #16]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	b913      	cbnz	r3, 800f2d4 <_fflush_r+0x10>
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	b118      	cbz	r0, 800f2de <_fflush_r+0x1a>
 800f2d6:	6983      	ldr	r3, [r0, #24]
 800f2d8:	b90b      	cbnz	r3, 800f2de <_fflush_r+0x1a>
 800f2da:	f7ff fad5 	bl	800e888 <__sinit>
 800f2de:	4b14      	ldr	r3, [pc, #80]	; (800f330 <_fflush_r+0x6c>)
 800f2e0:	429c      	cmp	r4, r3
 800f2e2:	d11b      	bne.n	800f31c <_fflush_r+0x58>
 800f2e4:	686c      	ldr	r4, [r5, #4]
 800f2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d0ef      	beq.n	800f2ce <_fflush_r+0xa>
 800f2ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2f0:	07d0      	lsls	r0, r2, #31
 800f2f2:	d404      	bmi.n	800f2fe <_fflush_r+0x3a>
 800f2f4:	0599      	lsls	r1, r3, #22
 800f2f6:	d402      	bmi.n	800f2fe <_fflush_r+0x3a>
 800f2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2fa:	f7ff fb88 	bl	800ea0e <__retarget_lock_acquire_recursive>
 800f2fe:	4628      	mov	r0, r5
 800f300:	4621      	mov	r1, r4
 800f302:	f7ff ff59 	bl	800f1b8 <__sflush_r>
 800f306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f308:	07da      	lsls	r2, r3, #31
 800f30a:	4605      	mov	r5, r0
 800f30c:	d4e0      	bmi.n	800f2d0 <_fflush_r+0xc>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	059b      	lsls	r3, r3, #22
 800f312:	d4dd      	bmi.n	800f2d0 <_fflush_r+0xc>
 800f314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f316:	f7ff fb7c 	bl	800ea12 <__retarget_lock_release_recursive>
 800f31a:	e7d9      	b.n	800f2d0 <_fflush_r+0xc>
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <_fflush_r+0x70>)
 800f31e:	429c      	cmp	r4, r3
 800f320:	d101      	bne.n	800f326 <_fflush_r+0x62>
 800f322:	68ac      	ldr	r4, [r5, #8]
 800f324:	e7df      	b.n	800f2e6 <_fflush_r+0x22>
 800f326:	4b04      	ldr	r3, [pc, #16]	; (800f338 <_fflush_r+0x74>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	bf08      	it	eq
 800f32c:	68ec      	ldreq	r4, [r5, #12]
 800f32e:	e7da      	b.n	800f2e6 <_fflush_r+0x22>
 800f330:	0800fde4 	.word	0x0800fde4
 800f334:	0800fe04 	.word	0x0800fe04
 800f338:	0800fdc4 	.word	0x0800fdc4

0800f33c <_lseek_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d07      	ldr	r5, [pc, #28]	; (800f35c <_lseek_r+0x20>)
 800f340:	4604      	mov	r4, r0
 800f342:	4608      	mov	r0, r1
 800f344:	4611      	mov	r1, r2
 800f346:	2200      	movs	r2, #0
 800f348:	602a      	str	r2, [r5, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	f7f6 fe02 	bl	8005f54 <_lseek>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d102      	bne.n	800f35a <_lseek_r+0x1e>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	b103      	cbz	r3, 800f35a <_lseek_r+0x1e>
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	200098dc 	.word	0x200098dc

0800f360 <__swhatbuf_r>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	460e      	mov	r6, r1
 800f364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f368:	2900      	cmp	r1, #0
 800f36a:	b096      	sub	sp, #88	; 0x58
 800f36c:	4614      	mov	r4, r2
 800f36e:	461d      	mov	r5, r3
 800f370:	da08      	bge.n	800f384 <__swhatbuf_r+0x24>
 800f372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f376:	2200      	movs	r2, #0
 800f378:	602a      	str	r2, [r5, #0]
 800f37a:	061a      	lsls	r2, r3, #24
 800f37c:	d410      	bmi.n	800f3a0 <__swhatbuf_r+0x40>
 800f37e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f382:	e00e      	b.n	800f3a2 <__swhatbuf_r+0x42>
 800f384:	466a      	mov	r2, sp
 800f386:	f000 fb5d 	bl	800fa44 <_fstat_r>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	dbf1      	blt.n	800f372 <__swhatbuf_r+0x12>
 800f38e:	9a01      	ldr	r2, [sp, #4]
 800f390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f398:	425a      	negs	r2, r3
 800f39a:	415a      	adcs	r2, r3
 800f39c:	602a      	str	r2, [r5, #0]
 800f39e:	e7ee      	b.n	800f37e <__swhatbuf_r+0x1e>
 800f3a0:	2340      	movs	r3, #64	; 0x40
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	b016      	add	sp, #88	; 0x58
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3ac <__smakebuf_r>:
 800f3ac:	898b      	ldrh	r3, [r1, #12]
 800f3ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3b0:	079d      	lsls	r5, r3, #30
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	d507      	bpl.n	800f3c8 <__smakebuf_r+0x1c>
 800f3b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3bc:	6023      	str	r3, [r4, #0]
 800f3be:	6123      	str	r3, [r4, #16]
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	6163      	str	r3, [r4, #20]
 800f3c4:	b002      	add	sp, #8
 800f3c6:	bd70      	pop	{r4, r5, r6, pc}
 800f3c8:	ab01      	add	r3, sp, #4
 800f3ca:	466a      	mov	r2, sp
 800f3cc:	f7ff ffc8 	bl	800f360 <__swhatbuf_r>
 800f3d0:	9900      	ldr	r1, [sp, #0]
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff fba7 	bl	800eb28 <_malloc_r>
 800f3da:	b948      	cbnz	r0, 800f3f0 <__smakebuf_r+0x44>
 800f3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e0:	059a      	lsls	r2, r3, #22
 800f3e2:	d4ef      	bmi.n	800f3c4 <__smakebuf_r+0x18>
 800f3e4:	f023 0303 	bic.w	r3, r3, #3
 800f3e8:	f043 0302 	orr.w	r3, r3, #2
 800f3ec:	81a3      	strh	r3, [r4, #12]
 800f3ee:	e7e3      	b.n	800f3b8 <__smakebuf_r+0xc>
 800f3f0:	4b0d      	ldr	r3, [pc, #52]	; (800f428 <__smakebuf_r+0x7c>)
 800f3f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	6020      	str	r0, [r4, #0]
 800f3f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	9b00      	ldr	r3, [sp, #0]
 800f400:	6163      	str	r3, [r4, #20]
 800f402:	9b01      	ldr	r3, [sp, #4]
 800f404:	6120      	str	r0, [r4, #16]
 800f406:	b15b      	cbz	r3, 800f420 <__smakebuf_r+0x74>
 800f408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f40c:	4630      	mov	r0, r6
 800f40e:	f000 fb2b 	bl	800fa68 <_isatty_r>
 800f412:	b128      	cbz	r0, 800f420 <__smakebuf_r+0x74>
 800f414:	89a3      	ldrh	r3, [r4, #12]
 800f416:	f023 0303 	bic.w	r3, r3, #3
 800f41a:	f043 0301 	orr.w	r3, r3, #1
 800f41e:	81a3      	strh	r3, [r4, #12]
 800f420:	89a0      	ldrh	r0, [r4, #12]
 800f422:	4305      	orrs	r5, r0
 800f424:	81a5      	strh	r5, [r4, #12]
 800f426:	e7cd      	b.n	800f3c4 <__smakebuf_r+0x18>
 800f428:	0800e821 	.word	0x0800e821

0800f42c <__malloc_lock>:
 800f42c:	4801      	ldr	r0, [pc, #4]	; (800f434 <__malloc_lock+0x8>)
 800f42e:	f7ff baee 	b.w	800ea0e <__retarget_lock_acquire_recursive>
 800f432:	bf00      	nop
 800f434:	200098d1 	.word	0x200098d1

0800f438 <__malloc_unlock>:
 800f438:	4801      	ldr	r0, [pc, #4]	; (800f440 <__malloc_unlock+0x8>)
 800f43a:	f7ff baea 	b.w	800ea12 <__retarget_lock_release_recursive>
 800f43e:	bf00      	nop
 800f440:	200098d1 	.word	0x200098d1

0800f444 <__sfputc_r>:
 800f444:	6893      	ldr	r3, [r2, #8]
 800f446:	3b01      	subs	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	b410      	push	{r4}
 800f44c:	6093      	str	r3, [r2, #8]
 800f44e:	da08      	bge.n	800f462 <__sfputc_r+0x1e>
 800f450:	6994      	ldr	r4, [r2, #24]
 800f452:	42a3      	cmp	r3, r4
 800f454:	db01      	blt.n	800f45a <__sfputc_r+0x16>
 800f456:	290a      	cmp	r1, #10
 800f458:	d103      	bne.n	800f462 <__sfputc_r+0x1e>
 800f45a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f45e:	f7ff bd67 	b.w	800ef30 <__swbuf_r>
 800f462:	6813      	ldr	r3, [r2, #0]
 800f464:	1c58      	adds	r0, r3, #1
 800f466:	6010      	str	r0, [r2, #0]
 800f468:	7019      	strb	r1, [r3, #0]
 800f46a:	4608      	mov	r0, r1
 800f46c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <__sfputs_r>:
 800f472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f474:	4606      	mov	r6, r0
 800f476:	460f      	mov	r7, r1
 800f478:	4614      	mov	r4, r2
 800f47a:	18d5      	adds	r5, r2, r3
 800f47c:	42ac      	cmp	r4, r5
 800f47e:	d101      	bne.n	800f484 <__sfputs_r+0x12>
 800f480:	2000      	movs	r0, #0
 800f482:	e007      	b.n	800f494 <__sfputs_r+0x22>
 800f484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f488:	463a      	mov	r2, r7
 800f48a:	4630      	mov	r0, r6
 800f48c:	f7ff ffda 	bl	800f444 <__sfputc_r>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d1f3      	bne.n	800f47c <__sfputs_r+0xa>
 800f494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f498 <_vfiprintf_r>:
 800f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	460d      	mov	r5, r1
 800f49e:	b09d      	sub	sp, #116	; 0x74
 800f4a0:	4614      	mov	r4, r2
 800f4a2:	4698      	mov	r8, r3
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	b118      	cbz	r0, 800f4b0 <_vfiprintf_r+0x18>
 800f4a8:	6983      	ldr	r3, [r0, #24]
 800f4aa:	b90b      	cbnz	r3, 800f4b0 <_vfiprintf_r+0x18>
 800f4ac:	f7ff f9ec 	bl	800e888 <__sinit>
 800f4b0:	4b89      	ldr	r3, [pc, #548]	; (800f6d8 <_vfiprintf_r+0x240>)
 800f4b2:	429d      	cmp	r5, r3
 800f4b4:	d11b      	bne.n	800f4ee <_vfiprintf_r+0x56>
 800f4b6:	6875      	ldr	r5, [r6, #4]
 800f4b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4ba:	07d9      	lsls	r1, r3, #31
 800f4bc:	d405      	bmi.n	800f4ca <_vfiprintf_r+0x32>
 800f4be:	89ab      	ldrh	r3, [r5, #12]
 800f4c0:	059a      	lsls	r2, r3, #22
 800f4c2:	d402      	bmi.n	800f4ca <_vfiprintf_r+0x32>
 800f4c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4c6:	f7ff faa2 	bl	800ea0e <__retarget_lock_acquire_recursive>
 800f4ca:	89ab      	ldrh	r3, [r5, #12]
 800f4cc:	071b      	lsls	r3, r3, #28
 800f4ce:	d501      	bpl.n	800f4d4 <_vfiprintf_r+0x3c>
 800f4d0:	692b      	ldr	r3, [r5, #16]
 800f4d2:	b9eb      	cbnz	r3, 800f510 <_vfiprintf_r+0x78>
 800f4d4:	4629      	mov	r1, r5
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f7ff fd8e 	bl	800eff8 <__swsetup_r>
 800f4dc:	b1c0      	cbz	r0, 800f510 <_vfiprintf_r+0x78>
 800f4de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4e0:	07dc      	lsls	r4, r3, #31
 800f4e2:	d50e      	bpl.n	800f502 <_vfiprintf_r+0x6a>
 800f4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e8:	b01d      	add	sp, #116	; 0x74
 800f4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ee:	4b7b      	ldr	r3, [pc, #492]	; (800f6dc <_vfiprintf_r+0x244>)
 800f4f0:	429d      	cmp	r5, r3
 800f4f2:	d101      	bne.n	800f4f8 <_vfiprintf_r+0x60>
 800f4f4:	68b5      	ldr	r5, [r6, #8]
 800f4f6:	e7df      	b.n	800f4b8 <_vfiprintf_r+0x20>
 800f4f8:	4b79      	ldr	r3, [pc, #484]	; (800f6e0 <_vfiprintf_r+0x248>)
 800f4fa:	429d      	cmp	r5, r3
 800f4fc:	bf08      	it	eq
 800f4fe:	68f5      	ldreq	r5, [r6, #12]
 800f500:	e7da      	b.n	800f4b8 <_vfiprintf_r+0x20>
 800f502:	89ab      	ldrh	r3, [r5, #12]
 800f504:	0598      	lsls	r0, r3, #22
 800f506:	d4ed      	bmi.n	800f4e4 <_vfiprintf_r+0x4c>
 800f508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f50a:	f7ff fa82 	bl	800ea12 <__retarget_lock_release_recursive>
 800f50e:	e7e9      	b.n	800f4e4 <_vfiprintf_r+0x4c>
 800f510:	2300      	movs	r3, #0
 800f512:	9309      	str	r3, [sp, #36]	; 0x24
 800f514:	2320      	movs	r3, #32
 800f516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f51a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f51e:	2330      	movs	r3, #48	; 0x30
 800f520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6e4 <_vfiprintf_r+0x24c>
 800f524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f528:	f04f 0901 	mov.w	r9, #1
 800f52c:	4623      	mov	r3, r4
 800f52e:	469a      	mov	sl, r3
 800f530:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f534:	b10a      	cbz	r2, 800f53a <_vfiprintf_r+0xa2>
 800f536:	2a25      	cmp	r2, #37	; 0x25
 800f538:	d1f9      	bne.n	800f52e <_vfiprintf_r+0x96>
 800f53a:	ebba 0b04 	subs.w	fp, sl, r4
 800f53e:	d00b      	beq.n	800f558 <_vfiprintf_r+0xc0>
 800f540:	465b      	mov	r3, fp
 800f542:	4622      	mov	r2, r4
 800f544:	4629      	mov	r1, r5
 800f546:	4630      	mov	r0, r6
 800f548:	f7ff ff93 	bl	800f472 <__sfputs_r>
 800f54c:	3001      	adds	r0, #1
 800f54e:	f000 80aa 	beq.w	800f6a6 <_vfiprintf_r+0x20e>
 800f552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f554:	445a      	add	r2, fp
 800f556:	9209      	str	r2, [sp, #36]	; 0x24
 800f558:	f89a 3000 	ldrb.w	r3, [sl]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	f000 80a2 	beq.w	800f6a6 <_vfiprintf_r+0x20e>
 800f562:	2300      	movs	r3, #0
 800f564:	f04f 32ff 	mov.w	r2, #4294967295
 800f568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f56c:	f10a 0a01 	add.w	sl, sl, #1
 800f570:	9304      	str	r3, [sp, #16]
 800f572:	9307      	str	r3, [sp, #28]
 800f574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f578:	931a      	str	r3, [sp, #104]	; 0x68
 800f57a:	4654      	mov	r4, sl
 800f57c:	2205      	movs	r2, #5
 800f57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f582:	4858      	ldr	r0, [pc, #352]	; (800f6e4 <_vfiprintf_r+0x24c>)
 800f584:	f7f0 fe24 	bl	80001d0 <memchr>
 800f588:	9a04      	ldr	r2, [sp, #16]
 800f58a:	b9d8      	cbnz	r0, 800f5c4 <_vfiprintf_r+0x12c>
 800f58c:	06d1      	lsls	r1, r2, #27
 800f58e:	bf44      	itt	mi
 800f590:	2320      	movmi	r3, #32
 800f592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f596:	0713      	lsls	r3, r2, #28
 800f598:	bf44      	itt	mi
 800f59a:	232b      	movmi	r3, #43	; 0x2b
 800f59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f5a6:	d015      	beq.n	800f5d4 <_vfiprintf_r+0x13c>
 800f5a8:	9a07      	ldr	r2, [sp, #28]
 800f5aa:	4654      	mov	r4, sl
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f04f 0c0a 	mov.w	ip, #10
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5b8:	3b30      	subs	r3, #48	; 0x30
 800f5ba:	2b09      	cmp	r3, #9
 800f5bc:	d94e      	bls.n	800f65c <_vfiprintf_r+0x1c4>
 800f5be:	b1b0      	cbz	r0, 800f5ee <_vfiprintf_r+0x156>
 800f5c0:	9207      	str	r2, [sp, #28]
 800f5c2:	e014      	b.n	800f5ee <_vfiprintf_r+0x156>
 800f5c4:	eba0 0308 	sub.w	r3, r0, r8
 800f5c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	9304      	str	r3, [sp, #16]
 800f5d0:	46a2      	mov	sl, r4
 800f5d2:	e7d2      	b.n	800f57a <_vfiprintf_r+0xe2>
 800f5d4:	9b03      	ldr	r3, [sp, #12]
 800f5d6:	1d19      	adds	r1, r3, #4
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	9103      	str	r1, [sp, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	bfbb      	ittet	lt
 800f5e0:	425b      	neglt	r3, r3
 800f5e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f5e6:	9307      	strge	r3, [sp, #28]
 800f5e8:	9307      	strlt	r3, [sp, #28]
 800f5ea:	bfb8      	it	lt
 800f5ec:	9204      	strlt	r2, [sp, #16]
 800f5ee:	7823      	ldrb	r3, [r4, #0]
 800f5f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f5f2:	d10c      	bne.n	800f60e <_vfiprintf_r+0x176>
 800f5f4:	7863      	ldrb	r3, [r4, #1]
 800f5f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f5f8:	d135      	bne.n	800f666 <_vfiprintf_r+0x1ce>
 800f5fa:	9b03      	ldr	r3, [sp, #12]
 800f5fc:	1d1a      	adds	r2, r3, #4
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	9203      	str	r2, [sp, #12]
 800f602:	2b00      	cmp	r3, #0
 800f604:	bfb8      	it	lt
 800f606:	f04f 33ff 	movlt.w	r3, #4294967295
 800f60a:	3402      	adds	r4, #2
 800f60c:	9305      	str	r3, [sp, #20]
 800f60e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6f4 <_vfiprintf_r+0x25c>
 800f612:	7821      	ldrb	r1, [r4, #0]
 800f614:	2203      	movs	r2, #3
 800f616:	4650      	mov	r0, sl
 800f618:	f7f0 fdda 	bl	80001d0 <memchr>
 800f61c:	b140      	cbz	r0, 800f630 <_vfiprintf_r+0x198>
 800f61e:	2340      	movs	r3, #64	; 0x40
 800f620:	eba0 000a 	sub.w	r0, r0, sl
 800f624:	fa03 f000 	lsl.w	r0, r3, r0
 800f628:	9b04      	ldr	r3, [sp, #16]
 800f62a:	4303      	orrs	r3, r0
 800f62c:	3401      	adds	r4, #1
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f634:	482c      	ldr	r0, [pc, #176]	; (800f6e8 <_vfiprintf_r+0x250>)
 800f636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f63a:	2206      	movs	r2, #6
 800f63c:	f7f0 fdc8 	bl	80001d0 <memchr>
 800f640:	2800      	cmp	r0, #0
 800f642:	d03f      	beq.n	800f6c4 <_vfiprintf_r+0x22c>
 800f644:	4b29      	ldr	r3, [pc, #164]	; (800f6ec <_vfiprintf_r+0x254>)
 800f646:	bb1b      	cbnz	r3, 800f690 <_vfiprintf_r+0x1f8>
 800f648:	9b03      	ldr	r3, [sp, #12]
 800f64a:	3307      	adds	r3, #7
 800f64c:	f023 0307 	bic.w	r3, r3, #7
 800f650:	3308      	adds	r3, #8
 800f652:	9303      	str	r3, [sp, #12]
 800f654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f656:	443b      	add	r3, r7
 800f658:	9309      	str	r3, [sp, #36]	; 0x24
 800f65a:	e767      	b.n	800f52c <_vfiprintf_r+0x94>
 800f65c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f660:	460c      	mov	r4, r1
 800f662:	2001      	movs	r0, #1
 800f664:	e7a5      	b.n	800f5b2 <_vfiprintf_r+0x11a>
 800f666:	2300      	movs	r3, #0
 800f668:	3401      	adds	r4, #1
 800f66a:	9305      	str	r3, [sp, #20]
 800f66c:	4619      	mov	r1, r3
 800f66e:	f04f 0c0a 	mov.w	ip, #10
 800f672:	4620      	mov	r0, r4
 800f674:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f678:	3a30      	subs	r2, #48	; 0x30
 800f67a:	2a09      	cmp	r2, #9
 800f67c:	d903      	bls.n	800f686 <_vfiprintf_r+0x1ee>
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d0c5      	beq.n	800f60e <_vfiprintf_r+0x176>
 800f682:	9105      	str	r1, [sp, #20]
 800f684:	e7c3      	b.n	800f60e <_vfiprintf_r+0x176>
 800f686:	fb0c 2101 	mla	r1, ip, r1, r2
 800f68a:	4604      	mov	r4, r0
 800f68c:	2301      	movs	r3, #1
 800f68e:	e7f0      	b.n	800f672 <_vfiprintf_r+0x1da>
 800f690:	ab03      	add	r3, sp, #12
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	462a      	mov	r2, r5
 800f696:	4b16      	ldr	r3, [pc, #88]	; (800f6f0 <_vfiprintf_r+0x258>)
 800f698:	a904      	add	r1, sp, #16
 800f69a:	4630      	mov	r0, r6
 800f69c:	f3af 8000 	nop.w
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	1c78      	adds	r0, r7, #1
 800f6a4:	d1d6      	bne.n	800f654 <_vfiprintf_r+0x1bc>
 800f6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6a8:	07d9      	lsls	r1, r3, #31
 800f6aa:	d405      	bmi.n	800f6b8 <_vfiprintf_r+0x220>
 800f6ac:	89ab      	ldrh	r3, [r5, #12]
 800f6ae:	059a      	lsls	r2, r3, #22
 800f6b0:	d402      	bmi.n	800f6b8 <_vfiprintf_r+0x220>
 800f6b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6b4:	f7ff f9ad 	bl	800ea12 <__retarget_lock_release_recursive>
 800f6b8:	89ab      	ldrh	r3, [r5, #12]
 800f6ba:	065b      	lsls	r3, r3, #25
 800f6bc:	f53f af12 	bmi.w	800f4e4 <_vfiprintf_r+0x4c>
 800f6c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6c2:	e711      	b.n	800f4e8 <_vfiprintf_r+0x50>
 800f6c4:	ab03      	add	r3, sp, #12
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	462a      	mov	r2, r5
 800f6ca:	4b09      	ldr	r3, [pc, #36]	; (800f6f0 <_vfiprintf_r+0x258>)
 800f6cc:	a904      	add	r1, sp, #16
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	f000 f880 	bl	800f7d4 <_printf_i>
 800f6d4:	e7e4      	b.n	800f6a0 <_vfiprintf_r+0x208>
 800f6d6:	bf00      	nop
 800f6d8:	0800fde4 	.word	0x0800fde4
 800f6dc:	0800fe04 	.word	0x0800fe04
 800f6e0:	0800fdc4 	.word	0x0800fdc4
 800f6e4:	0800fe28 	.word	0x0800fe28
 800f6e8:	0800fe32 	.word	0x0800fe32
 800f6ec:	00000000 	.word	0x00000000
 800f6f0:	0800f473 	.word	0x0800f473
 800f6f4:	0800fe2e 	.word	0x0800fe2e

0800f6f8 <_printf_common>:
 800f6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	4699      	mov	r9, r3
 800f700:	688a      	ldr	r2, [r1, #8]
 800f702:	690b      	ldr	r3, [r1, #16]
 800f704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f708:	4293      	cmp	r3, r2
 800f70a:	bfb8      	it	lt
 800f70c:	4613      	movlt	r3, r2
 800f70e:	6033      	str	r3, [r6, #0]
 800f710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f714:	4607      	mov	r7, r0
 800f716:	460c      	mov	r4, r1
 800f718:	b10a      	cbz	r2, 800f71e <_printf_common+0x26>
 800f71a:	3301      	adds	r3, #1
 800f71c:	6033      	str	r3, [r6, #0]
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	0699      	lsls	r1, r3, #26
 800f722:	bf42      	ittt	mi
 800f724:	6833      	ldrmi	r3, [r6, #0]
 800f726:	3302      	addmi	r3, #2
 800f728:	6033      	strmi	r3, [r6, #0]
 800f72a:	6825      	ldr	r5, [r4, #0]
 800f72c:	f015 0506 	ands.w	r5, r5, #6
 800f730:	d106      	bne.n	800f740 <_printf_common+0x48>
 800f732:	f104 0a19 	add.w	sl, r4, #25
 800f736:	68e3      	ldr	r3, [r4, #12]
 800f738:	6832      	ldr	r2, [r6, #0]
 800f73a:	1a9b      	subs	r3, r3, r2
 800f73c:	42ab      	cmp	r3, r5
 800f73e:	dc26      	bgt.n	800f78e <_printf_common+0x96>
 800f740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f744:	1e13      	subs	r3, r2, #0
 800f746:	6822      	ldr	r2, [r4, #0]
 800f748:	bf18      	it	ne
 800f74a:	2301      	movne	r3, #1
 800f74c:	0692      	lsls	r2, r2, #26
 800f74e:	d42b      	bmi.n	800f7a8 <_printf_common+0xb0>
 800f750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f754:	4649      	mov	r1, r9
 800f756:	4638      	mov	r0, r7
 800f758:	47c0      	blx	r8
 800f75a:	3001      	adds	r0, #1
 800f75c:	d01e      	beq.n	800f79c <_printf_common+0xa4>
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	68e5      	ldr	r5, [r4, #12]
 800f762:	6832      	ldr	r2, [r6, #0]
 800f764:	f003 0306 	and.w	r3, r3, #6
 800f768:	2b04      	cmp	r3, #4
 800f76a:	bf08      	it	eq
 800f76c:	1aad      	subeq	r5, r5, r2
 800f76e:	68a3      	ldr	r3, [r4, #8]
 800f770:	6922      	ldr	r2, [r4, #16]
 800f772:	bf0c      	ite	eq
 800f774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f778:	2500      	movne	r5, #0
 800f77a:	4293      	cmp	r3, r2
 800f77c:	bfc4      	itt	gt
 800f77e:	1a9b      	subgt	r3, r3, r2
 800f780:	18ed      	addgt	r5, r5, r3
 800f782:	2600      	movs	r6, #0
 800f784:	341a      	adds	r4, #26
 800f786:	42b5      	cmp	r5, r6
 800f788:	d11a      	bne.n	800f7c0 <_printf_common+0xc8>
 800f78a:	2000      	movs	r0, #0
 800f78c:	e008      	b.n	800f7a0 <_printf_common+0xa8>
 800f78e:	2301      	movs	r3, #1
 800f790:	4652      	mov	r2, sl
 800f792:	4649      	mov	r1, r9
 800f794:	4638      	mov	r0, r7
 800f796:	47c0      	blx	r8
 800f798:	3001      	adds	r0, #1
 800f79a:	d103      	bne.n	800f7a4 <_printf_common+0xac>
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a4:	3501      	adds	r5, #1
 800f7a6:	e7c6      	b.n	800f736 <_printf_common+0x3e>
 800f7a8:	18e1      	adds	r1, r4, r3
 800f7aa:	1c5a      	adds	r2, r3, #1
 800f7ac:	2030      	movs	r0, #48	; 0x30
 800f7ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7b2:	4422      	add	r2, r4
 800f7b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7bc:	3302      	adds	r3, #2
 800f7be:	e7c7      	b.n	800f750 <_printf_common+0x58>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	4622      	mov	r2, r4
 800f7c4:	4649      	mov	r1, r9
 800f7c6:	4638      	mov	r0, r7
 800f7c8:	47c0      	blx	r8
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	d0e6      	beq.n	800f79c <_printf_common+0xa4>
 800f7ce:	3601      	adds	r6, #1
 800f7d0:	e7d9      	b.n	800f786 <_printf_common+0x8e>
	...

0800f7d4 <_printf_i>:
 800f7d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d8:	7e0f      	ldrb	r7, [r1, #24]
 800f7da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7dc:	2f78      	cmp	r7, #120	; 0x78
 800f7de:	4691      	mov	r9, r2
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	460c      	mov	r4, r1
 800f7e4:	469a      	mov	sl, r3
 800f7e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7ea:	d807      	bhi.n	800f7fc <_printf_i+0x28>
 800f7ec:	2f62      	cmp	r7, #98	; 0x62
 800f7ee:	d80a      	bhi.n	800f806 <_printf_i+0x32>
 800f7f0:	2f00      	cmp	r7, #0
 800f7f2:	f000 80d8 	beq.w	800f9a6 <_printf_i+0x1d2>
 800f7f6:	2f58      	cmp	r7, #88	; 0x58
 800f7f8:	f000 80a3 	beq.w	800f942 <_printf_i+0x16e>
 800f7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f804:	e03a      	b.n	800f87c <_printf_i+0xa8>
 800f806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f80a:	2b15      	cmp	r3, #21
 800f80c:	d8f6      	bhi.n	800f7fc <_printf_i+0x28>
 800f80e:	a101      	add	r1, pc, #4	; (adr r1, 800f814 <_printf_i+0x40>)
 800f810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f814:	0800f86d 	.word	0x0800f86d
 800f818:	0800f881 	.word	0x0800f881
 800f81c:	0800f7fd 	.word	0x0800f7fd
 800f820:	0800f7fd 	.word	0x0800f7fd
 800f824:	0800f7fd 	.word	0x0800f7fd
 800f828:	0800f7fd 	.word	0x0800f7fd
 800f82c:	0800f881 	.word	0x0800f881
 800f830:	0800f7fd 	.word	0x0800f7fd
 800f834:	0800f7fd 	.word	0x0800f7fd
 800f838:	0800f7fd 	.word	0x0800f7fd
 800f83c:	0800f7fd 	.word	0x0800f7fd
 800f840:	0800f98d 	.word	0x0800f98d
 800f844:	0800f8b1 	.word	0x0800f8b1
 800f848:	0800f96f 	.word	0x0800f96f
 800f84c:	0800f7fd 	.word	0x0800f7fd
 800f850:	0800f7fd 	.word	0x0800f7fd
 800f854:	0800f9af 	.word	0x0800f9af
 800f858:	0800f7fd 	.word	0x0800f7fd
 800f85c:	0800f8b1 	.word	0x0800f8b1
 800f860:	0800f7fd 	.word	0x0800f7fd
 800f864:	0800f7fd 	.word	0x0800f7fd
 800f868:	0800f977 	.word	0x0800f977
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	1d1a      	adds	r2, r3, #4
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	602a      	str	r2, [r5, #0]
 800f874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f87c:	2301      	movs	r3, #1
 800f87e:	e0a3      	b.n	800f9c8 <_printf_i+0x1f4>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	6829      	ldr	r1, [r5, #0]
 800f884:	0606      	lsls	r6, r0, #24
 800f886:	f101 0304 	add.w	r3, r1, #4
 800f88a:	d50a      	bpl.n	800f8a2 <_printf_i+0xce>
 800f88c:	680e      	ldr	r6, [r1, #0]
 800f88e:	602b      	str	r3, [r5, #0]
 800f890:	2e00      	cmp	r6, #0
 800f892:	da03      	bge.n	800f89c <_printf_i+0xc8>
 800f894:	232d      	movs	r3, #45	; 0x2d
 800f896:	4276      	negs	r6, r6
 800f898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f89c:	485e      	ldr	r0, [pc, #376]	; (800fa18 <_printf_i+0x244>)
 800f89e:	230a      	movs	r3, #10
 800f8a0:	e019      	b.n	800f8d6 <_printf_i+0x102>
 800f8a2:	680e      	ldr	r6, [r1, #0]
 800f8a4:	602b      	str	r3, [r5, #0]
 800f8a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8aa:	bf18      	it	ne
 800f8ac:	b236      	sxthne	r6, r6
 800f8ae:	e7ef      	b.n	800f890 <_printf_i+0xbc>
 800f8b0:	682b      	ldr	r3, [r5, #0]
 800f8b2:	6820      	ldr	r0, [r4, #0]
 800f8b4:	1d19      	adds	r1, r3, #4
 800f8b6:	6029      	str	r1, [r5, #0]
 800f8b8:	0601      	lsls	r1, r0, #24
 800f8ba:	d501      	bpl.n	800f8c0 <_printf_i+0xec>
 800f8bc:	681e      	ldr	r6, [r3, #0]
 800f8be:	e002      	b.n	800f8c6 <_printf_i+0xf2>
 800f8c0:	0646      	lsls	r6, r0, #25
 800f8c2:	d5fb      	bpl.n	800f8bc <_printf_i+0xe8>
 800f8c4:	881e      	ldrh	r6, [r3, #0]
 800f8c6:	4854      	ldr	r0, [pc, #336]	; (800fa18 <_printf_i+0x244>)
 800f8c8:	2f6f      	cmp	r7, #111	; 0x6f
 800f8ca:	bf0c      	ite	eq
 800f8cc:	2308      	moveq	r3, #8
 800f8ce:	230a      	movne	r3, #10
 800f8d0:	2100      	movs	r1, #0
 800f8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8d6:	6865      	ldr	r5, [r4, #4]
 800f8d8:	60a5      	str	r5, [r4, #8]
 800f8da:	2d00      	cmp	r5, #0
 800f8dc:	bfa2      	ittt	ge
 800f8de:	6821      	ldrge	r1, [r4, #0]
 800f8e0:	f021 0104 	bicge.w	r1, r1, #4
 800f8e4:	6021      	strge	r1, [r4, #0]
 800f8e6:	b90e      	cbnz	r6, 800f8ec <_printf_i+0x118>
 800f8e8:	2d00      	cmp	r5, #0
 800f8ea:	d04d      	beq.n	800f988 <_printf_i+0x1b4>
 800f8ec:	4615      	mov	r5, r2
 800f8ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8f2:	fb03 6711 	mls	r7, r3, r1, r6
 800f8f6:	5dc7      	ldrb	r7, [r0, r7]
 800f8f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8fc:	4637      	mov	r7, r6
 800f8fe:	42bb      	cmp	r3, r7
 800f900:	460e      	mov	r6, r1
 800f902:	d9f4      	bls.n	800f8ee <_printf_i+0x11a>
 800f904:	2b08      	cmp	r3, #8
 800f906:	d10b      	bne.n	800f920 <_printf_i+0x14c>
 800f908:	6823      	ldr	r3, [r4, #0]
 800f90a:	07de      	lsls	r6, r3, #31
 800f90c:	d508      	bpl.n	800f920 <_printf_i+0x14c>
 800f90e:	6923      	ldr	r3, [r4, #16]
 800f910:	6861      	ldr	r1, [r4, #4]
 800f912:	4299      	cmp	r1, r3
 800f914:	bfde      	ittt	le
 800f916:	2330      	movle	r3, #48	; 0x30
 800f918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f91c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f920:	1b52      	subs	r2, r2, r5
 800f922:	6122      	str	r2, [r4, #16]
 800f924:	f8cd a000 	str.w	sl, [sp]
 800f928:	464b      	mov	r3, r9
 800f92a:	aa03      	add	r2, sp, #12
 800f92c:	4621      	mov	r1, r4
 800f92e:	4640      	mov	r0, r8
 800f930:	f7ff fee2 	bl	800f6f8 <_printf_common>
 800f934:	3001      	adds	r0, #1
 800f936:	d14c      	bne.n	800f9d2 <_printf_i+0x1fe>
 800f938:	f04f 30ff 	mov.w	r0, #4294967295
 800f93c:	b004      	add	sp, #16
 800f93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f942:	4835      	ldr	r0, [pc, #212]	; (800fa18 <_printf_i+0x244>)
 800f944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f948:	6829      	ldr	r1, [r5, #0]
 800f94a:	6823      	ldr	r3, [r4, #0]
 800f94c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f950:	6029      	str	r1, [r5, #0]
 800f952:	061d      	lsls	r5, r3, #24
 800f954:	d514      	bpl.n	800f980 <_printf_i+0x1ac>
 800f956:	07df      	lsls	r7, r3, #31
 800f958:	bf44      	itt	mi
 800f95a:	f043 0320 	orrmi.w	r3, r3, #32
 800f95e:	6023      	strmi	r3, [r4, #0]
 800f960:	b91e      	cbnz	r6, 800f96a <_printf_i+0x196>
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	f023 0320 	bic.w	r3, r3, #32
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	2310      	movs	r3, #16
 800f96c:	e7b0      	b.n	800f8d0 <_printf_i+0xfc>
 800f96e:	6823      	ldr	r3, [r4, #0]
 800f970:	f043 0320 	orr.w	r3, r3, #32
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	2378      	movs	r3, #120	; 0x78
 800f978:	4828      	ldr	r0, [pc, #160]	; (800fa1c <_printf_i+0x248>)
 800f97a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f97e:	e7e3      	b.n	800f948 <_printf_i+0x174>
 800f980:	0659      	lsls	r1, r3, #25
 800f982:	bf48      	it	mi
 800f984:	b2b6      	uxthmi	r6, r6
 800f986:	e7e6      	b.n	800f956 <_printf_i+0x182>
 800f988:	4615      	mov	r5, r2
 800f98a:	e7bb      	b.n	800f904 <_printf_i+0x130>
 800f98c:	682b      	ldr	r3, [r5, #0]
 800f98e:	6826      	ldr	r6, [r4, #0]
 800f990:	6961      	ldr	r1, [r4, #20]
 800f992:	1d18      	adds	r0, r3, #4
 800f994:	6028      	str	r0, [r5, #0]
 800f996:	0635      	lsls	r5, r6, #24
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	d501      	bpl.n	800f9a0 <_printf_i+0x1cc>
 800f99c:	6019      	str	r1, [r3, #0]
 800f99e:	e002      	b.n	800f9a6 <_printf_i+0x1d2>
 800f9a0:	0670      	lsls	r0, r6, #25
 800f9a2:	d5fb      	bpl.n	800f99c <_printf_i+0x1c8>
 800f9a4:	8019      	strh	r1, [r3, #0]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	6123      	str	r3, [r4, #16]
 800f9aa:	4615      	mov	r5, r2
 800f9ac:	e7ba      	b.n	800f924 <_printf_i+0x150>
 800f9ae:	682b      	ldr	r3, [r5, #0]
 800f9b0:	1d1a      	adds	r2, r3, #4
 800f9b2:	602a      	str	r2, [r5, #0]
 800f9b4:	681d      	ldr	r5, [r3, #0]
 800f9b6:	6862      	ldr	r2, [r4, #4]
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f7f0 fc08 	bl	80001d0 <memchr>
 800f9c0:	b108      	cbz	r0, 800f9c6 <_printf_i+0x1f2>
 800f9c2:	1b40      	subs	r0, r0, r5
 800f9c4:	6060      	str	r0, [r4, #4]
 800f9c6:	6863      	ldr	r3, [r4, #4]
 800f9c8:	6123      	str	r3, [r4, #16]
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9d0:	e7a8      	b.n	800f924 <_printf_i+0x150>
 800f9d2:	6923      	ldr	r3, [r4, #16]
 800f9d4:	462a      	mov	r2, r5
 800f9d6:	4649      	mov	r1, r9
 800f9d8:	4640      	mov	r0, r8
 800f9da:	47d0      	blx	sl
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d0ab      	beq.n	800f938 <_printf_i+0x164>
 800f9e0:	6823      	ldr	r3, [r4, #0]
 800f9e2:	079b      	lsls	r3, r3, #30
 800f9e4:	d413      	bmi.n	800fa0e <_printf_i+0x23a>
 800f9e6:	68e0      	ldr	r0, [r4, #12]
 800f9e8:	9b03      	ldr	r3, [sp, #12]
 800f9ea:	4298      	cmp	r0, r3
 800f9ec:	bfb8      	it	lt
 800f9ee:	4618      	movlt	r0, r3
 800f9f0:	e7a4      	b.n	800f93c <_printf_i+0x168>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	4632      	mov	r2, r6
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	4640      	mov	r0, r8
 800f9fa:	47d0      	blx	sl
 800f9fc:	3001      	adds	r0, #1
 800f9fe:	d09b      	beq.n	800f938 <_printf_i+0x164>
 800fa00:	3501      	adds	r5, #1
 800fa02:	68e3      	ldr	r3, [r4, #12]
 800fa04:	9903      	ldr	r1, [sp, #12]
 800fa06:	1a5b      	subs	r3, r3, r1
 800fa08:	42ab      	cmp	r3, r5
 800fa0a:	dcf2      	bgt.n	800f9f2 <_printf_i+0x21e>
 800fa0c:	e7eb      	b.n	800f9e6 <_printf_i+0x212>
 800fa0e:	2500      	movs	r5, #0
 800fa10:	f104 0619 	add.w	r6, r4, #25
 800fa14:	e7f5      	b.n	800fa02 <_printf_i+0x22e>
 800fa16:	bf00      	nop
 800fa18:	0800fe39 	.word	0x0800fe39
 800fa1c:	0800fe4a 	.word	0x0800fe4a

0800fa20 <_read_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d07      	ldr	r5, [pc, #28]	; (800fa40 <_read_r+0x20>)
 800fa24:	4604      	mov	r4, r0
 800fa26:	4608      	mov	r0, r1
 800fa28:	4611      	mov	r1, r2
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	602a      	str	r2, [r5, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	f7f6 fa30 	bl	8005e94 <_read>
 800fa34:	1c43      	adds	r3, r0, #1
 800fa36:	d102      	bne.n	800fa3e <_read_r+0x1e>
 800fa38:	682b      	ldr	r3, [r5, #0]
 800fa3a:	b103      	cbz	r3, 800fa3e <_read_r+0x1e>
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	bd38      	pop	{r3, r4, r5, pc}
 800fa40:	200098dc 	.word	0x200098dc

0800fa44 <_fstat_r>:
 800fa44:	b538      	push	{r3, r4, r5, lr}
 800fa46:	4d07      	ldr	r5, [pc, #28]	; (800fa64 <_fstat_r+0x20>)
 800fa48:	2300      	movs	r3, #0
 800fa4a:	4604      	mov	r4, r0
 800fa4c:	4608      	mov	r0, r1
 800fa4e:	4611      	mov	r1, r2
 800fa50:	602b      	str	r3, [r5, #0]
 800fa52:	f7f6 fa64 	bl	8005f1e <_fstat>
 800fa56:	1c43      	adds	r3, r0, #1
 800fa58:	d102      	bne.n	800fa60 <_fstat_r+0x1c>
 800fa5a:	682b      	ldr	r3, [r5, #0]
 800fa5c:	b103      	cbz	r3, 800fa60 <_fstat_r+0x1c>
 800fa5e:	6023      	str	r3, [r4, #0]
 800fa60:	bd38      	pop	{r3, r4, r5, pc}
 800fa62:	bf00      	nop
 800fa64:	200098dc 	.word	0x200098dc

0800fa68 <_isatty_r>:
 800fa68:	b538      	push	{r3, r4, r5, lr}
 800fa6a:	4d06      	ldr	r5, [pc, #24]	; (800fa84 <_isatty_r+0x1c>)
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	4604      	mov	r4, r0
 800fa70:	4608      	mov	r0, r1
 800fa72:	602b      	str	r3, [r5, #0]
 800fa74:	f7f6 fa63 	bl	8005f3e <_isatty>
 800fa78:	1c43      	adds	r3, r0, #1
 800fa7a:	d102      	bne.n	800fa82 <_isatty_r+0x1a>
 800fa7c:	682b      	ldr	r3, [r5, #0]
 800fa7e:	b103      	cbz	r3, 800fa82 <_isatty_r+0x1a>
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	bd38      	pop	{r3, r4, r5, pc}
 800fa84:	200098dc 	.word	0x200098dc

0800fa88 <_init>:
 800fa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8a:	bf00      	nop
 800fa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa8e:	bc08      	pop	{r3}
 800fa90:	469e      	mov	lr, r3
 800fa92:	4770      	bx	lr

0800fa94 <_fini>:
 800fa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa96:	bf00      	nop
 800fa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa9a:	bc08      	pop	{r3}
 800fa9c:	469e      	mov	lr, r3
 800fa9e:	4770      	bx	lr
