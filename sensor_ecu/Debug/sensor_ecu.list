
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08010680  08010680  00020680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b14  08010b14  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08010b14  08010b14  00020b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b1c  08010b1c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08010b1c  08010b1c  00020b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010b3c  08010b3c  00020b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08010b44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00009d9c  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20009e24  20009e24  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042894  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000094c2  00000000  00000000  0007294c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b48  00000000  00000000  0007be10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002838  00000000  00000000  0007e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030883  00000000  00000000  00081190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000388be  00000000  00000000  000b1a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fba9f  00000000  00000000  000ea2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e5d70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c0a0  00000000  00000000  001e5dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010668 	.word	0x08010668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08010668 	.word	0x08010668

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4611      	mov	r1, r2
 8000580:	461a      	mov	r2, r3
 8000582:	460b      	mov	r3, r1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	4613      	mov	r3, r2
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	79fa      	ldrb	r2, [r7, #7]
 8000594:	711a      	strb	r2, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	79ba      	ldrb	r2, [r7, #6]
 800059a:	715a      	strb	r2, [r3, #5]
 800059c:	68f9      	ldr	r1, [r7, #12]
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	f04f 0300 	mov.w	r3, #0
 80005a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80005aa:	68f9      	ldr	r1, [r7, #12]
 80005ac:	f04f 0200 	mov.w	r2, #0
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80005c6:	b490      	push	{r4, r7}
 80005c8:	b084      	sub	sp, #16
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00a      	beq.n	80005f2 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2204      	movs	r2, #4
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	e009      	b.n	8000606 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	461a      	mov	r2, r3
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000622:	b2d4      	uxtb	r4, r2
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	0e0a      	lsrs	r2, r1, #24
 8000634:	2300      	movs	r3, #0
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	4323      	orrs	r3, r4
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	f04f 0300 	mov.w	r3, #0
 800064e:	0a02      	lsrs	r2, r0, #8
 8000650:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000654:	0a0b      	lsrs	r3, r1, #8
 8000656:	b2d4      	uxtb	r4, r2
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800065e:	f04f 0200 	mov.w	r2, #0
 8000662:	f04f 0300 	mov.w	r3, #0
 8000666:	0c0a      	lsrs	r2, r1, #16
 8000668:	2300      	movs	r3, #0
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	4322      	orrs	r2, r4
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	0c02      	lsrs	r2, r0, #16
 8000686:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800068a:	0c0b      	lsrs	r3, r1, #16
 800068c:	b2d4      	uxtb	r4, r2
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	0a0a      	lsrs	r2, r1, #8
 800069e:	2300      	movs	r3, #0
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3302      	adds	r3, #2
 80006a6:	4322      	orrs	r2, r4
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	0e02      	lsrs	r2, r0, #24
 80006bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006c0:	0e0b      	lsrs	r3, r1, #24
 80006c2:	b2d4      	uxtb	r4, r2
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	000a      	movs	r2, r1
 80006d4:	2300      	movs	r3, #0
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3303      	adds	r3, #3
 80006dc:	4322      	orrs	r2, r4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	000a      	movs	r2, r1
 80006f2:	2300      	movs	r3, #0
 80006f4:	b2d4      	uxtb	r4, r2
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	0e02      	lsrs	r2, r0, #24
 8000706:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800070a:	0e0b      	lsrs	r3, r1, #24
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3304      	adds	r3, #4
 8000712:	4322      	orrs	r2, r4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	0a0a      	lsrs	r2, r1, #8
 8000728:	2300      	movs	r3, #0
 800072a:	b2d4      	uxtb	r4, r2
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	f04f 0300 	mov.w	r3, #0
 800073a:	0c02      	lsrs	r2, r0, #16
 800073c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000740:	0c0b      	lsrs	r3, r1, #16
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3305      	adds	r3, #5
 8000748:	4322      	orrs	r2, r4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	f04f 0300 	mov.w	r3, #0
 800075c:	0c0a      	lsrs	r2, r1, #16
 800075e:	2300      	movs	r3, #0
 8000760:	b2d4      	uxtb	r4, r2
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000768:	f04f 0200 	mov.w	r2, #0
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	0a02      	lsrs	r2, r0, #8
 8000772:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000776:	0a0b      	lsrs	r3, r1, #8
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3306      	adds	r3, #6
 800077e:	4322      	orrs	r2, r4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800078a:	f04f 0200 	mov.w	r2, #0
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	0e0a      	lsrs	r2, r1, #24
 8000794:	2300      	movs	r3, #0
 8000796:	b2d1      	uxtb	r1, r2
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3307      	adds	r3, #7
 80007a4:	430a      	orrs	r2, r1
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]
        }
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc90      	pop	{r4, r7}
 80007b2:	4770      	bx	lr

080007b4 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	461a      	mov	r2, r3
 80007c0:	2300      	movs	r3, #0
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	6053      	str	r3, [r2, #4]
 80007c6:	6093      	str	r3, [r2, #8]
 80007c8:	60d3      	str	r3, [r2, #12]
 80007ca:	6113      	str	r3, [r2, #16]
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ffe3 	bl	80007b4 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f103 0218 	add.w	r2, r3, #24
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68f9      	ldr	r1, [r7, #12]
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	f7ff fee4 	bl	80005c6 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 80007fe:	bf00      	nop
        }
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffde 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <_ZNK3can11MessageBase4sendEm+0x54>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	2300      	movs	r3, #0
 800082a:	2200      	movs	r2, #0
 800082c:	f00a ff74 	bl	800b718 <osMessageQueuePut>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d008      	beq.n	8000852 <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8000840:	f00e fa60 	bl	800ed04 <vPortEnterCritical>
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <_ZNK3can11MessageBase4sendEm+0x58>)
 800084a:	f00e ffd1 	bl	800f7f0 <iprintf>
 800084e:	f00e fa89 	bl	800ed64 <vPortExitCritical>
            }
        }
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000564 	.word	0x20000564
 8000860:	08010680 	.word	0x08010680

08000864 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	2300      	movs	r3, #0
 8000870:	2204      	movs	r2, #4
 8000872:	2181      	movs	r1, #129	; 0x81
 8000874:	f7ff fe7e 	bl	8000574 <_ZN3can11MessageBaseC1Emhb>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 8000882:	b5b0      	push	{r4, r5, r7, lr}
 8000884:	b08c      	sub	sp, #48	; 0x30
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 800088a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffe5 	bl	8000864 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008aa:	2100      	movs	r1, #0
 80008ac:	2000      	movs	r0, #0
 80008ae:	f00d fc19 	bl	800e0e4 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d001      	beq.n	80008be <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80008ba:	f001 f893 	bl	80019e4 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d103      	bne.n	80008cc <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d00b      	beq.n	80008e4 <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2200      	movs	r2, #0
 80008d0:	461c      	mov	r4, r3
 80008d2:	4615      	mov	r5, r2
 80008d4:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff92 	bl	8000808 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80008e8:	e7db      	b.n	80008a2 <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

080008ec <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5b 	bl	80007b4 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 80008fe:	f240 7301 	movw	r3, #1793	; 0x701
 8000902:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 800090c:	f000 ff8a 	bl	8001824 <_ZN7canzero9getStatusEv>
 8000910:	4603      	mov	r3, r0
 8000912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8000918:	6818      	ldr	r0, [r3, #0]
 800091a:	f107 010c 	add.w	r1, r7, #12
 800091e:	2300      	movs	r3, #0
 8000920:	2200      	movs	r2, #0
 8000922:	f00a fef9 	bl	800b718 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 8000926:	f000 f841 	bl	80009ac <_ZN7canzero9heartbeat11getIntervalEv>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	4a06      	ldr	r2, [pc, #24]	; (8000950 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8000938:	fba2 2303 	umull	r2, r3, r2, r3
 800093c:	099b      	lsrs	r3, r3, #6
 800093e:	4618      	mov	r0, r3
 8000940:	f00a fd4e 	bl	800b3e0 <osDelay>
		frame ++;
 8000944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000946:	3301      	adds	r3, #1
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 800094a:	e7df      	b.n	800090c <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 800094c:	20000564 	.word	0x20000564
 8000950:	10624dd3 	.word	0x10624dd3

08000954 <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b08d      	sub	sp, #52	; 0x34
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 800095e:	681c      	ldr	r4, [r3, #0]
 8000960:	f000 f824 	bl	80009ac <_ZN7canzero9heartbeat11getIntervalEv>
 8000964:	4603      	mov	r3, r0
 8000966:	3305      	adds	r3, #5
 8000968:	461a      	mov	r2, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fb02 f303 	mul.w	r3, r2, r3
 8000972:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8000974:	fba2 2303 	umull	r2, r3, r2, r3
 8000978:	099b      	lsrs	r3, r3, #6
 800097a:	f107 010c 	add.w	r1, r7, #12
 800097e:	2224      	movs	r2, #36	; 0x24
 8000980:	4620      	mov	r0, r4
 8000982:	f00c f96f 	bl	800cc64 <xStreamBufferReceive>
 8000986:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf14      	ite	ne
 800098c:	2301      	movne	r3, #1
 800098e:	2300      	moveq	r3, #0
 8000990:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0e2      	beq.n	800095c <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 8000996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ff26 	bl	80017ec <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80009a0:	e7dc      	b.n	800095c <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	10624dd3 	.word	0x10624dd3

080009ac <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80009b0:	f003 fb32 	bl	8004018 <_Z24OD_HeartbeatInterval_getv>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_Z41__static_initialization_and_destruction_0ii>:
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d10c      	bne.n	80009e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d107      	bne.n	80009e6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2100      	movs	r1, #0
 80009da:	20c8      	movs	r0, #200	; 0xc8
 80009dc:	f00b ffc2 	bl	800c964 <xStreamBufferGenericCreate>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80009e4:	6013      	str	r3, [r2, #0]
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000a4 	.word	0x200000a4

080009f4 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff ffdd 	bl	80009bc <_Z41__static_initialization_and_destruction_0ii>
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d005      	beq.n	8000a3c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4798      	blx	r3
    }
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf0c      	ite	eq
 8000a56:	2301      	moveq	r3, #1
 8000a58:	2300      	movne	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffd4 	bl	8000a20 <_ZNSt14_Function_baseD1Ev>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_ZN7canzero10receiver_tC1Ev>:
#include <cinttypes>


namespace canzero {

struct receiver_t {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f8cd 	bl	8000c2c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN7canzero10receiver_tD1Ev>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffde 	bl	8000a68 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <_ZN7canzero10receiver_taSERKS0_>:
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f8df 	bl	8000c8a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	691a      	ldr	r2, [r3, #16]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	7d1a      	ldrb	r2, [r3, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	751a      	strb	r2, [r3, #20]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

void registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	4613      	mov	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId
	};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f8a2 	bl	8000c46 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	623b      	str	r3, [r7, #32]
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	g_receivers[g_size++] = recv;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x58>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	1c53      	adds	r3, r2, #1
 8000b12:	490b      	ldr	r1, [pc, #44]	; (8000b40 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x58>)
 8000b14:	600b      	str	r3, [r1, #0]
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x5c>)
 8000b20:	4413      	add	r3, r2
 8000b22:	f107 0210 	add.w	r2, r7, #16
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffc4 	bl	8000ab6 <_ZN7canzero10receiver_taSERKS0_>
	};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb2 	bl	8000a9c <_ZN7canzero10receiver_tD1Ev>
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000558 	.word	0x20000558
 8000b44:	200000a8 	.word	0x200000a8

08000b48 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12f      	bne.n	8000bb8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x70>
		for(uint32_t i = 0;i<g_size;i++){
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xdc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d258      	bcs.n	8000c18 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd0>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 8000b66:	4930      	ldr	r1, [pc, #192]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3314      	adds	r3, #20
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d119      	bne.n	8000bb0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x68>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6819      	ldr	r1, [r3, #0]
 8000b80:	4829      	ldr	r0, [pc, #164]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4403      	add	r3, r0
 8000b8e:	3310      	adds	r3, #16
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d10c      	bne.n	8000bb0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x68>
				g_receivers[i].m_callback(message);
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f88a 	bl	8000cc0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				return true;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e034      	b.n	8000c1a <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd2>
		for(uint32_t i = 0;i<g_size;i++){
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e7d1      	b.n	8000b5c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x14>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xdc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d228      	bcs.n	8000c18 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd0>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 8000bc6:	4918      	ldr	r1, [pc, #96]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3314      	adds	r3, #20
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d119      	bne.n	8000c10 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xc8>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4403      	add	r3, r0
 8000bee:	3310      	adds	r3, #16
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d10c      	bne.n	8000c10 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xc8>
				g_receivers[i].m_callback(message);
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8000c02:	4413      	add	r3, r2
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f85a 	bl	8000cc0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				return true;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e004      	b.n	8000c1a <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd2>
		for(uint32_t i = 0;i<g_size;i++){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	e7d1      	b.n	8000bbc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
			}
		}
	}
	return false;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000558 	.word	0x20000558
 8000c28:	200000a8 	.word	0x200000a8

08000c2c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fee4 	bl	8000a04 <_ZNSt14_Function_baseC1Ev>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fed6 	bl	8000a04 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f000 f84d 	bl	8000cf8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00d      	beq.n	8000c80 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
	}
    }
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffd3 	bl	8000c46 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f836 	bl	8000d18 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fed9 	bl	8000a68 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 8000cb6:	687b      	ldr	r3, [r7, #4]
      }
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff feba 	bl	8000a46 <_ZNKSt14_Function_base8_M_emptyEv>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 8000cd8:	f00e fb33 	bl	800f342 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68dc      	ldr	r4, [r3, #12]
 8000ce0:	687d      	ldr	r5, [r7, #4]
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f000 f839 	bl	8000d5a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4628      	mov	r0, r5
 8000cee:	47a0      	blx	r4
 8000cf0:	bf00      	nop
    }
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}

08000cf8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fe9f 	bl	8000a46 <_ZNKSt14_Function_base8_M_emptyEv>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f82c 	bl	8000d86 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f103 0208 	add.w	r2, r3, #8
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	3308      	adds	r3, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f000 f855 	bl	8000dea <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f103 020c 	add.w	r2, r3, #12
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	330c      	adds	r3, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	f000 f876 	bl	8000e3e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffed 	bl	8000d70 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000d96:	4602      	mov	r2, r0
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f7ff ffe3 	bl	8000d70 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000daa:	4602      	mov	r2, r0
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffd8 	bl	8000d70 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ffed 	bl	8000dd4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000e00:	6838      	ldr	r0, [r7, #0]
 8000e02:	f7ff ffe7 	bl	8000dd4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8000e06:	4603      	mov	r3, r0
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ffde 	bl	8000dd4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	601a      	str	r2, [r3, #0]
    }
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffed 	bl	8000e28 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f7ff ffe7 	bl	8000e28 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffde 	bl	8000e28 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	601a      	str	r2, [r3, #0]
    }
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_Z41__static_initialization_and_destruction_0ii>:

}
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d10f      	bne.n	8000eac <_Z41__static_initialization_and_destruction_0ii+0x30>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10a      	bne.n	8000eac <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000e98:	2431      	movs	r4, #49	; 0x31
 8000e9a:	461d      	mov	r5, r3
 8000e9c:	2c00      	cmp	r4, #0
 8000e9e:	db05      	blt.n	8000eac <_Z41__static_initialization_and_destruction_0ii+0x30>
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fdee 	bl	8000a82 <_ZN7canzero10receiver_tC1Ev>
 8000ea6:	3518      	adds	r5, #24
 8000ea8:	3c01      	subs	r4, #1
 8000eaa:	e7f7      	b.n	8000e9c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10d      	bne.n	8000ece <_Z41__static_initialization_and_destruction_0ii+0x52>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d108      	bne.n	8000ece <_Z41__static_initialization_and_destruction_0ii+0x52>
 8000ebc:	4c07      	ldr	r4, [pc, #28]	; (8000edc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	d004      	beq.n	8000ece <_Z41__static_initialization_and_destruction_0ii+0x52>
 8000ec4:	3c18      	subs	r4, #24
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff fde8 	bl	8000a9c <_ZN7canzero10receiver_tD1Ev>
 8000ecc:	e7f7      	b.n	8000ebe <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000a8 	.word	0x200000a8
 8000edc:	20000558 	.word	0x20000558

08000ee0 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff ffc7 	bl	8000e7c <_Z41__static_initialization_and_destruction_0ii>
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ffbf 	bl	8000e7c <_Z41__static_initialization_and_destruction_0ii>
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <ITM_SendChar+0x2c>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <ITM_SendChar+0x2e>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d010      	beq.n	8000f54 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <ITM_SendChar+0x4a>
    {
      __NOP();
 8000f46:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f48:	e7f3      	b.n	8000f32 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_Z3logPKc>:
#ifdef DEBUG

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 */
inline void log(const char *str) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	while (*str != '\0') {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <_Z3logPKc+0x22>
		ITM_SendChar(*str);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffc2 	bl	8000f00 <ITM_SendChar>
		str++;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
	while (*str != '\0') {
 8000f82:	e7f2      	b.n	8000f6a <_Z3logPKc+0x8>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_Z5loglnv>:

inline void logln() {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	ITM_SendChar('\n');
 8000f90:	200a      	movs	r0, #10
 8000f92:	f7ff ffb5 	bl	8000f00 <ITM_SendChar>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_Z5loglnPKc>:

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 * and appends a line break at the end.
 */
inline void logln(const char *str) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	log(str);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ffdd 	bl	8000f62 <_Z3logPKc>
	logln();
 8000fa8:	f7ff fff0 	bl	8000f8c <_Z5loglnv>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	f107 0c08 	add.w	ip, r7, #8
 8000fbe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8000fc2:	f107 0008 	add.w	r0, r7, #8
 8000fc6:	f000 f83f 	bl	8001048 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <_Z9processRX9RxMessage+0x80>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	f107 0108 	add.w	r1, r7, #8
 8000fdc:	f00b fd50 	bl	800ca80 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8000fe0:	e022      	b.n	8001028 <_Z9processRX9RxMessage+0x74>
	} else if (canzero::processRxMessageReceiver(message)) {
 8000fe2:	f107 0008 	add.w	r0, r7, #8
 8000fe6:	f7ff fdaf 	bl	8000b48 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d11b      	bne.n	8001028 <_Z9processRX9RxMessage+0x74>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <_Z9processRX9RxMessage+0x5c>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8000ff6:	f00d fe85 	bl	800ed04 <vPortEnterCritical>
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <_Z9processRX9RxMessage+0x84>)
 8001000:	f00e fbf6 	bl	800f7f0 <iprintf>
 8001004:	f00d feae 	bl	800ed64 <vPortExitCritical>
			logln("unknown/unhandled CAN Std-ID");
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <_Z9processRX9RxMessage+0x88>)
 800100a:	f7ff ffc6 	bl	8000f9a <_Z5loglnPKc>
}
 800100e:	e00b      	b.n	8001028 <_Z9processRX9RxMessage+0x74>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001010:	f00d fe78 	bl	800ed04 <vPortEnterCritical>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <_Z9processRX9RxMessage+0x8c>)
 800101a:	f00e fbe9 	bl	800f7f0 <iprintf>
 800101e:	f00d fea1 	bl	800ed64 <vPortExitCritical>
			logln("unknown/unhandled CAN Ext-ID");
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <_Z9processRX9RxMessage+0x90>)
 8001024:	f7ff ffb9 	bl	8000f9a <_Z5loglnPKc>
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001030:	b004      	add	sp, #16
 8001032:	4770      	bx	lr
 8001034:	2000055c 	.word	0x2000055c
 8001038:	080106b4 	.word	0x080106b4
 800103c:	080106d8 	.word	0x080106d8
 8001040:	080106f8 	.word	0x080106f8
 8001044:	0801071c 	.word	0x0801071c

08001048 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d109      	bne.n	800106c <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001060:	4293      	cmp	r3, r2
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e000      	b.n	800106e <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 800106c:	2300      	movs	r3, #0
    }
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_Z41__static_initialization_and_destruction_0ii>:
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10c      	bne.n	80010a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	4293      	cmp	r3, r2
 8001094:	d107      	bne.n	80010a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001096:	2201      	movs	r2, #1
 8001098:	2100      	movs	r1, #0
 800109a:	20c8      	movs	r0, #200	; 0xc8
 800109c:	f00b fc62 	bl	800c964 <xStreamBufferGenericCreate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80010a4:	6013      	str	r3, [r2, #0]
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000055c 	.word	0x2000055c

080010b4 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ffdd 	bl	800107c <_Z41__static_initialization_and_destruction_0ii>
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d10c      	bne.n	80010ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	4293      	cmp	r3, r2
 80010dc:	d107      	bne.n	80010ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80010de:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80010e0:	2124      	movs	r1, #36	; 0x24
 80010e2:	2010      	movs	r0, #16
 80010e4:	f00a faa5 	bl	800b632 <osMessageQueueNew>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	08010950 	.word	0x08010950
 80010fc:	20000560 	.word	0x20000560

08001100 <_GLOBAL__sub_I_czReceiveQueue>:
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
 8001104:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff ffdb 	bl	80010c4 <_Z41__static_initialization_and_destruction_0ii>
 800110e:	bd80      	pop	{r7, pc}

08001110 <__NVIC_SystemReset>:
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001114:	f3bf 8f4f 	dsb	sy
}
 8001118:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <__NVIC_SystemReset+0x24>)
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001122:	4904      	ldr	r1, [pc, #16]	; (8001134 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_SystemReset+0x28>)
 8001126:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001128:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800112a:	f3bf 8f4f 	dsb	sy
}
 800112e:	bf00      	nop
    __NOP();
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <__NVIC_SystemReset+0x20>
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	05fa0004 	.word	0x05fa0004

0800113c <_Z15cz_receive_taskPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "log_dep.hpp"


void cz_receive_task(void* argv) {
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b092      	sub	sp, #72	; 0x48
 8001140:	af06      	add	r7, sp, #24
 8001142:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <_Z15cz_receive_taskPv+0xa4>)
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	2200      	movs	r2, #0
 8001152:	f00a fb41 	bl	800b7d8 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d136      	bne.n	80011ca <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f8e3 	bl	800132c <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 800116c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001170:	2bff      	cmp	r3, #255	; 0xff
 8001172:	d1e7      	bne.n	8001144 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001174:	f7ff ffcc 	bl	8001110 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f8ee 	bl	800135e <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fae9 	bl	8003764 <_Z22handleSDORequestUploadRK9RxMessage>
 8001192:	e7d7      	b.n	8001144 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4618      	mov	r0, r3
 800119a:	f000 f8f9 	bl	8001390 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 ff3c 	bl	8003026 <_Z24handleSDORequestDownloadRK9RxMessage>
 80011ae:	e7c9      	b.n	8001144 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 80011b0:	466d      	mov	r5, sp
 80011b2:	f107 041c 	add.w	r4, r7, #28
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	602b      	str	r3, [r5, #0]
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c4:	f7ff fef6 	bl	8000fb4 <_Z9processRX9RxMessage>
 80011c8:	e7bc      	b.n	8001144 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d1b9      	bne.n	8001144 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 80011d0:	f00d fd98 	bl	800ed04 <vPortEnterCritical>
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <_Z15cz_receive_taskPv+0xa8>)
 80011d6:	f00e fb91 	bl	800f8fc <puts>
 80011da:	f00d fdc3 	bl	800ed64 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80011de:	e7b1      	b.n	8001144 <_Z15cz_receive_taskPv+0x8>
 80011e0:	20000560 	.word	0x20000560
 80011e4:	0801074c 	.word	0x0801074c

080011e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80011f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f006 fd3a 	bl	8007c74 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001200:	f107 040c 	add.w	r4, r7, #12
 8001204:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001214:	2300      	movs	r3, #0
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
 8001218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800121a:	2b07      	cmp	r3, #7
 800121c:	dc0e      	bgt.n	800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 800121e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	4413      	add	r3, r2
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800122c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800122e:	4413      	add	r3, r2
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001236:	3301      	adds	r3, #1
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
 800123a:	e7ed      	b.n	8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 010c 	add.w	r1, r7, #12
 8001244:	2300      	movs	r3, #0
 8001246:	2200      	movs	r2, #0
 8001248:	f00a fa66 	bl	800b718 <osMessageQueuePut>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0

	}
}
 8001250:	bf00      	nop
 8001252:	3758      	adds	r7, #88	; 0x58
 8001254:	46bd      	mov	sp, r7
 8001256:	bdb0      	pop	{r4, r5, r7, pc}
 8001258:	20000560 	.word	0x20000560

0800125c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b096      	sub	sp, #88	; 0x58
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001268:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800126c:	2101      	movs	r1, #1
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f006 fd00 	bl	8007c74 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001274:	f107 040c 	add.w	r4, r7, #12
 8001278:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800127c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001288:	2300      	movs	r3, #0
 800128a:	657b      	str	r3, [r7, #84]	; 0x54
 800128c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128e:	2b07      	cmp	r3, #7
 8001290:	dc0e      	bgt.n	80012b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001292:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001298:	4413      	add	r3, r2
 800129a:	7819      	ldrb	r1, [r3, #0]
 800129c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a2:	4413      	add	r3, r2
 80012a4:	460a      	mov	r2, r1
 80012a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80012a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012aa:	3301      	adds	r3, #1
 80012ac:	657b      	str	r3, [r7, #84]	; 0x54
 80012ae:	e7ed      	b.n	800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f107 010c 	add.w	r1, r7, #12
 80012b8:	2300      	movs	r3, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	f00a fa2c 	bl	800b718 <osMessageQueuePut>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0

	}
}
 80012c4:	bf00      	nop
 80012c6:	3758      	adds	r7, #88	; 0x58
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}
 80012cc:	20000560 	.word	0x20000560

080012d0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 f814 	bl	8008306 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80012de:	f3ef 8211 	mrs	r2, BASEPRI
 80012e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012e6:	f383 8811 	msr	BASEPRI, r3
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	f3bf 8f4f 	dsb	sy
 80012f2:	60fa      	str	r2, [r7, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80012f6:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <HAL_CAN_ErrorCallback+0x44>)
 80012fc:	f00e fafe 	bl	800f8fc <puts>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800130a:	bf00      	nop
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	08010764 	.word	0x08010764

08001318 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f240 7281 	movw	r2, #1921	; 0x781
 8001344:	4293      	cmp	r3, r2
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e000      	b.n	8001352 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001350:	2300      	movs	r3, #0
    }
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001376:	4293      	cmp	r3, r2
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	e000      	b.n	8001384 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001382:	2300      	movs	r3, #0
    }
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d109      	bne.n	80013b4 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f240 6201 	movw	r2, #1537	; 0x601
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e000      	b.n	80013b6 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80013b4:	2300      	movs	r3, #0
    }
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10c      	bne.n	80013ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	4293      	cmp	r3, r2
 80013dc:	d107      	bne.n	80013ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013de:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80013e0:	2120      	movs	r1, #32
 80013e2:	2010      	movs	r0, #16
 80013e4:	f00a f925 	bl	800b632 <osMessageQueueNew>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	08010968 	.word	0x08010968
 80013fc:	20000564 	.word	0x20000564

08001400 <_GLOBAL__sub_I_czSendQueue>:
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
 8001404:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ffdb 	bl	80013c4 <_Z41__static_initialization_and_destruction_0ii>
 800140e:	bd80      	pop	{r7, pc}

08001410 <_Z13cz_send_entryPv>:

//TODO remove me.
#include "log_dep.hpp"


void cz_send_entry(void* argv){
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f9c9 	bl	80007b4 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <_Z13cz_send_entryPv+0x170>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f107 010c 	add.w	r1, r7, #12
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2200      	movs	r2, #0
 8001434:	f00a f9d0 	bl	800b7d8 <osMessageQueueGet>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001448:	f004 fffa 	bl	8006440 <Error_Handler>
		}
		if(sendMessage.txHeader.DLC>8){
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b08      	cmp	r3, #8
 8001450:	d901      	bls.n	8001456 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001452:	f004 fff5 	bl	8006440 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	b29b      	uxth	r3, r3
 8001462:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d102      	bne.n	8001472 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <_Z13cz_send_entryPv+0x174>)
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
 8001470:	e010      	b.n	8001494 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001478:	d102      	bne.n	8001480 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <_Z13cz_send_entryPv+0x178>)
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
 800147e:	e009      	b.n	8001494 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <_Z13cz_send_entryPv+0x174>)
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
 800148e:	e001      	b.n	8001494 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <_Z13cz_send_entryPv+0x178>)
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001494:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001496:	f006 fbb8 	bl	8007c0a <HAL_CAN_GetTxMailboxesFreeLevel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 80014aa:	f107 0008 	add.w	r0, r7, #8
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	f103 0218 	add.w	r2, r3, #24
 80014b6:	f107 010c 	add.w	r1, r7, #12
 80014ba:	4603      	mov	r3, r0
 80014bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014be:	f006 fac9 	bl	8007a54 <HAL_CAN_AddTxMessage>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf14      	ite	ne
 80014c8:	2301      	movne	r3, #1
 80014ca:	2300      	moveq	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d051      	beq.n	8001576 <_Z13cz_send_entryPv+0x166>
				/* Transmission request Error */
				Error_Handler();
 80014d2:	f004 ffb5 	bl	8006440 <Error_Handler>
 80014d6:	e04e      	b.n	8001576 <_Z13cz_send_entryPv+0x166>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <_Z13cz_send_entryPv+0x174>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d108      	bne.n	80014f2 <_Z13cz_send_entryPv+0xe2>
				logln("Failed to send: CAN1 Mailbox overflowed");
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <_Z13cz_send_entryPv+0x17c>)
 80014e2:	f7ff fd5a 	bl	8000f9a <_Z5loglnPKc>
				OD_CAN1_DelayedTxMessages++;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <_Z13cz_send_entryPv+0x180>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <_Z13cz_send_entryPv+0x180>)
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e007      	b.n	8001502 <_Z13cz_send_entryPv+0xf2>
			} else {
				logln("Failed to send: CAN2 Mailbox overflowed");
 80014f2:	4828      	ldr	r0, [pc, #160]	; (8001594 <_Z13cz_send_entryPv+0x184>)
 80014f4:	f7ff fd51 	bl	8000f9a <_Z5loglnPKc>
				OD_CAN2_DelayedTxMessages++;
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <_Z13cz_send_entryPv+0x188>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a26      	ldr	r2, [pc, #152]	; (8001598 <_Z13cz_send_entryPv+0x188>)
 8001500:	6013      	str	r3, [r2, #0]
			}

			osDelay(1);		// Use smallest delay possible
 8001502:	2001      	movs	r0, #1
 8001504:	f009 ff6c 	bl	800b3e0 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001508:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800150a:	f006 fb7e 	bl	8007c0a <HAL_CAN_GetTxMailboxesFreeLevel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf14      	ite	ne
 8001514:	2301      	movne	r3, #1
 8001516:	2300      	moveq	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d016      	beq.n	800154c <_Z13cz_send_entryPv+0x13c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 800151e:	f107 0008 	add.w	r0, r7, #8
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	f103 0218 	add.w	r2, r3, #24
 800152a:	f107 010c 	add.w	r1, r7, #12
 800152e:	4603      	mov	r3, r0
 8001530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001532:	f006 fa8f 	bl	8007a54 <HAL_CAN_AddTxMessage>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf14      	ite	ne
 800153c:	2301      	movne	r3, #1
 800153e:	2300      	moveq	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d017      	beq.n	8001576 <_Z13cz_send_entryPv+0x166>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001546:	f000 fa5e 	bl	8001a06 <_ZN7canzero32handle_trasmission_request_errorEv>
 800154a:	e014      	b.n	8001576 <_Z13cz_send_entryPv+0x166>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 800154c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154e:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <_Z13cz_send_entryPv+0x174>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d108      	bne.n	8001566 <_Z13cz_send_entryPv+0x156>
					OD_CAN1_DiscardedTxMessages++;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_Z13cz_send_entryPv+0x18c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <_Z13cz_send_entryPv+0x18c>)
 800155c:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 800155e:	4809      	ldr	r0, [pc, #36]	; (8001584 <_Z13cz_send_entryPv+0x174>)
 8001560:	f000 fa47 	bl	80019f2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001564:	e007      	b.n	8001576 <_Z13cz_send_entryPv+0x166>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <_Z13cz_send_entryPv+0x190>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <_Z13cz_send_entryPv+0x190>)
 800156e:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <_Z13cz_send_entryPv+0x178>)
 8001572:	f000 fa3e 	bl	80019f2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	3301      	adds	r3, #1
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
	}
 800157c:	e753      	b.n	8001426 <_Z13cz_send_entryPv+0x16>
 800157e:	bf00      	nop
 8001580:	20000564 	.word	0x20000564
 8001584:	200008c4 	.word	0x200008c4
 8001588:	200008ec 	.word	0x200008ec
 800158c:	08010788 	.word	0x08010788
 8001590:	200005bc 	.word	0x200005bc
 8001594:	080107b0 	.word	0x080107b0
 8001598:	200005d4 	.word	0x200005d4
 800159c:	200005b4 	.word	0x200005b4
 80015a0:	200005cc 	.word	0x200005cc

080015a4 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f000 f91e 	bl	80017ec <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da4f      	bge.n	800165a <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015be:	2301      	movs	r3, #1
 80015c0:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 80015c2:	2300      	movs	r3, #0
 80015c4:	0b5b      	lsrs	r3, r3, #13
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 80015ca:	2300      	movs	r3, #0
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 80015d6:	2300      	movs	r3, #0
 80015d8:	0b5b      	lsrs	r3, r3, #13
 80015da:	b29b      	uxth	r3, r3
 80015dc:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 80015de:	2300      	movs	r3, #0
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f043 0306 	orr.w	r3, r3, #6
 80015e8:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	0fda      	lsrs	r2, r3, #31
 80015ee:	4413      	add	r3, r2
 80015f0:	105b      	asrs	r3, r3, #1
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	e001      	b.n	8001604 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001608:	230e      	movs	r3, #14
 800160a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4871      	ldr	r0, [pc, #452]	; (80017dc <_ZN7canzero4initEv+0x238>)
 8001616:	f006 f8f9 	bl	800780c <HAL_CAN_ConfigFilter>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 800162a:	f004 ff09 	bl	8006440 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	330e      	adds	r3, #14
 8001632:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4869      	ldr	r0, [pc, #420]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 800163a:	f006 f8e7 	bl	800780c <HAL_CAN_ConfigFilter>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 800164e:	f004 fef7 	bl	8006440 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	3301      	adds	r3, #1
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001658:	e7ac      	b.n	80015b4 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	2b08      	cmp	r3, #8
 8001662:	dc69      	bgt.n	8001738 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	0fda      	lsrs	r2, r3, #31
 8001668:	4413      	add	r3, r2
 800166a:	105b      	asrs	r3, r3, #1
 800166c:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001672:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <_ZN7canzero4initEv+0x240>)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	015b      	lsls	r3, r3, #5
 800167c:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 800167e:	4a5a      	ldr	r2, [pc, #360]	; (80017e8 <_ZN7canzero4initEv+0x244>)
 8001680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	f043 0318 	orr.w	r3, r3, #24
 800168c:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	2b08      	cmp	r3, #8
 8001692:	d106      	bne.n	80016a2 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001694:	2301      	movs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 800169c:	2306      	movs	r3, #6
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e011      	b.n	80016c6 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	3301      	adds	r3, #1
 80016aa:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <_ZN7canzero4initEv+0x240>)
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 80016b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b6:	3301      	adds	r3, #1
 80016b8:	4a4b      	ldr	r2, [pc, #300]	; (80017e8 <_ZN7canzero4initEv+0x244>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	f043 0318 	orr.w	r3, r3, #24
 80016c4:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	0fda      	lsrs	r2, r3, #31
 80016ca:	4413      	add	r3, r2
 80016cc:	105b      	asrs	r3, r3, #1
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	e001      	b.n	80016e0 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 80016e0:	2301      	movs	r3, #1
 80016e2:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 80016e4:	230e      	movs	r3, #14
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	483b      	ldr	r0, [pc, #236]	; (80017dc <_ZN7canzero4initEv+0x238>)
 80016ee:	f006 f88d 	bl	800780c <HAL_CAN_ConfigFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf14      	ite	ne
 80016f8:	2301      	movne	r3, #1
 80016fa:	2300      	moveq	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001702:	f004 fe9d 	bl	8006440 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001708:	0fda      	lsrs	r2, r3, #31
 800170a:	4413      	add	r3, r2
 800170c:	105b      	asrs	r3, r3, #1
 800170e:	330e      	adds	r3, #14
 8001710:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4832      	ldr	r0, [pc, #200]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 8001718:	f006 f878 	bl	800780c <HAL_CAN_ConfigFilter>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 800172c:	f004 fe88 	bl	8006440 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	3302      	adds	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
 8001736:	e792      	b.n	800165e <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001738:	4828      	ldr	r0, [pc, #160]	; (80017dc <_ZN7canzero4initEv+0x238>)
 800173a:	f006 f947 	bl	80079cc <HAL_CAN_Start>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <_ZN7canzero4initEv+0x1ac>
 8001744:	4826      	ldr	r0, [pc, #152]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 8001746:	f006 f941 	bl	80079cc <HAL_CAN_Start>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZN7canzero4initEv+0x1b0>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <_ZN7canzero4initEv+0x1b2>
 8001754:	2300      	movs	r3, #0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 800175a:	f004 fe71 	bl	8006440 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800175e:	2102      	movs	r1, #2
 8001760:	481e      	ldr	r0, [pc, #120]	; (80017dc <_ZN7canzero4initEv+0x238>)
 8001762:	f006 fb99 	bl	8007e98 <HAL_CAN_ActivateNotification>
 8001766:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10e      	bne.n	800178a <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800176c:	2110      	movs	r1, #16
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <_ZN7canzero4initEv+0x238>)
 8001770:	f006 fb92 	bl	8007e98 <HAL_CAN_ActivateNotification>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800177a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177e:	4817      	ldr	r0, [pc, #92]	; (80017dc <_ZN7canzero4initEv+0x238>)
 8001780:	f006 fb8a 	bl	8007e98 <HAL_CAN_ActivateNotification>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <_ZN7canzero4initEv+0x1ea>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <_ZN7canzero4initEv+0x1ec>
 800178e:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001794:	f004 fe54 	bl	8006440 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001798:	2102      	movs	r1, #2
 800179a:	4811      	ldr	r0, [pc, #68]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 800179c:	f006 fb7c 	bl	8007e98 <HAL_CAN_ActivateNotification>
 80017a0:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10e      	bne.n	80017c4 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80017a6:	2110      	movs	r1, #16
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 80017aa:	f006 fb75 	bl	8007e98 <HAL_CAN_ActivateNotification>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80017b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b8:	4809      	ldr	r0, [pc, #36]	; (80017e0 <_ZN7canzero4initEv+0x23c>)
 80017ba:	f006 fb6d 	bl	8007e98 <HAL_CAN_ActivateNotification>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <_ZN7canzero4initEv+0x224>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <_ZN7canzero4initEv+0x226>
 80017c8:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 80017ce:	f004 fe37 	bl	8006440 <Error_Handler>
	}
}
 80017d2:	bf00      	nop
 80017d4:	3730      	adds	r7, #48	; 0x30
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200008c4 	.word	0x200008c4
 80017e0:	200008ec 	.word	0x200008ec
 80017e4:	080109a4 	.word	0x080109a4
 80017e8:	08010980 	.word	0x08010980

080017ec <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <_ZN7canzero9setStatusE9cz_status+0x30>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 31ff 	mov.w	r1, #4294967295
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 fe8f 	bl	800b522 <osMutexAcquire>
	nodeStatus = new_status;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <_ZN7canzero9setStatusE9cz_status+0x30>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f009 fed2 	bl	800b5b8 <osMutexRelease>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000568 	.word	0x20000568
 8001820:	2000056c 	.word	0x2000056c

08001824 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <_ZN7canzero9getStatusEv+0x30>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f009 fe75 	bl	800b522 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_ZN7canzero9getStatusEv+0x34>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <_ZN7canzero9getStatusEv+0x30>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f009 feb8 	bl	800b5b8 <osMutexRelease>
	return returnValue;
 8001848:	79fb      	ldrb	r3, [r7, #7]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000568 	.word	0x20000568
 8001858:	2000056c 	.word	0x2000056c

0800185c <_Z41__static_initialization_and_destruction_0ii>:
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10a      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	4293      	cmp	r3, r2
 8001874:	d105      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001878:	f009 fdcd 	bl	800b416 <osMutexNew>
 800187c:	4603      	mov	r3, r0
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	080109c8 	.word	0x080109c8
 8001890:	20000568 	.word	0x20000568

08001894 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
 8001898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffdd 	bl	800185c <_Z41__static_initialization_and_destruction_0ii>
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	canzero::init();
 80018ac:	f7ff fe7a 	bl	80015a4 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 80018b4:	f107 0318 	add.w	r3, r7, #24
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2318      	movs	r3, #24
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	4939      	ldr	r1, [pc, #228]	; (80019ac <canzero_start+0x108>)
 80018c6:	483a      	ldr	r0, [pc, #232]	; (80019b0 <canzero_start+0x10c>)
 80018c8:	f00b fc2f 	bl	800d12a <xTaskCreate>
 80018cc:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d006      	beq.n	80018e2 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 80018d4:	f00d fa16 	bl	800ed04 <vPortEnterCritical>
 80018d8:	4836      	ldr	r0, [pc, #216]	; (80019b4 <canzero_start+0x110>)
 80018da:	f00d ff89 	bl	800f7f0 <iprintf>
 80018de:	f00d fa41 	bl	800ed64 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2318      	movs	r3, #24
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	4930      	ldr	r1, [pc, #192]	; (80019b8 <canzero_start+0x114>)
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <canzero_start+0x118>)
 80018fa:	f00b fc16 	bl	800d12a <xTaskCreate>
 80018fe:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	2b01      	cmp	r3, #1
 8001904:	d006      	beq.n	8001914 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8001906:	f00d f9fd 	bl	800ed04 <vPortEnterCritical>
 800190a:	482d      	ldr	r0, [pc, #180]	; (80019c0 <canzero_start+0x11c>)
 800190c:	f00d ff70 	bl	800f7f0 <iprintf>
 8001910:	f00d fa28 	bl	800ed64 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	2318      	movs	r3, #24
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001928:	4926      	ldr	r1, [pc, #152]	; (80019c4 <canzero_start+0x120>)
 800192a:	4827      	ldr	r0, [pc, #156]	; (80019c8 <canzero_start+0x124>)
 800192c:	f00b fbfd 	bl	800d12a <xTaskCreate>
 8001930:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	2b01      	cmp	r3, #1
 8001936:	d006      	beq.n	8001946 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8001938:	f00d f9e4 	bl	800ed04 <vPortEnterCritical>
 800193c:	4823      	ldr	r0, [pc, #140]	; (80019cc <canzero_start+0x128>)
 800193e:	f00d ff57 	bl	800f7f0 <iprintf>
 8001942:	f00d fa0f 	bl	800ed64 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	2318      	movs	r3, #24
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	491d      	ldr	r1, [pc, #116]	; (80019d0 <canzero_start+0x12c>)
 800195c:	481d      	ldr	r0, [pc, #116]	; (80019d4 <canzero_start+0x130>)
 800195e:	f00b fbe4 	bl	800d12a <xTaskCreate>
 8001962:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d006      	beq.n	8001978 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800196a:	f00d f9cb 	bl	800ed04 <vPortEnterCritical>
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <canzero_start+0x134>)
 8001970:	f00d ff3e 	bl	800f7f0 <iprintf>
 8001974:	f00d f9f6 	bl	800ed64 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2328      	movs	r3, #40	; 0x28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	4913      	ldr	r1, [pc, #76]	; (80019dc <canzero_start+0x138>)
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <canzero_start+0x13c>)
 8001990:	f00b fbcb 	bl	800d12a <xTaskCreate>
 8001994:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d001      	beq.n	80019a0 <canzero_start+0xfc>
		Error_Handler();
 800199c:	f004 fd50 	bl	8006440 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f009 fd1c 	bl	800b3e0 <osDelay>
 80019a8:	e7fa      	b.n	80019a0 <canzero_start+0xfc>
 80019aa:	bf00      	nop
 80019ac:	080107e8 	.word	0x080107e8
 80019b0:	08001411 	.word	0x08001411
 80019b4:	080107f0 	.word	0x080107f0
 80019b8:	08010814 	.word	0x08010814
 80019bc:	0800113d 	.word	0x0800113d
 80019c0:	08010820 	.word	0x08010820
 80019c4:	08010848 	.word	0x08010848
 80019c8:	08000955 	.word	0x08000955
 80019cc:	08010854 	.word	0x08010854
 80019d0:	08010884 	.word	0x08010884
 80019d4:	080008ed 	.word	0x080008ed
 80019d8:	08010890 	.word	0x08010890
 80019dc:	080108c0 	.word	0x080108c0
 80019e0:	08000883 	.word	0x08000883

080019e4 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a22:	f00d fc91 	bl	800f348 <roundf>
 8001a26:	eef0 7a40 	vmov.f32	s15, s0
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8001a34:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a38:	b0a2      	sub	sp, #136	; 0x88
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8001a40:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001a44:	4619      	mov	r1, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001a52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001a64:	7113      	strb	r3, [r2, #4]
 8001a66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a6a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001a6e:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8001a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	441a      	add	r2, r3
 8001a84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a88:	3302      	adds	r3, #2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	441a      	add	r2, r3
 8001a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a94:	3303      	adds	r3, #3
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	461c      	mov	r4, r3
 8001aa0:	4615      	mov	r5, r2
 8001aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa6:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8001aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aae:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2200      	movs	r2, #0
 8001abe:	673b      	str	r3, [r7, #112]	; 0x70
 8001ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001acc:	0019      	movs	r1, r3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad4:	3305      	adds	r3, #5
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2200      	movs	r2, #0
 8001adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8001aea:	0233      	lsls	r3, r6, #8
 8001aec:	2200      	movs	r2, #0
 8001aee:	eb10 0802 	adds.w	r8, r0, r2
 8001af2:	eb41 0903 	adc.w	r9, r1, r3
 8001af6:	eb14 0308 	adds.w	r3, r4, r8
 8001afa:	663b      	str	r3, [r7, #96]	; 0x60
 8001afc:	eb45 0309 	adc.w	r3, r5, r9
 8001b00:	667b      	str	r3, [r7, #100]	; 0x64
 8001b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b06:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8001b0a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8001b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b12:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2200      	movs	r2, #0
 8001b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b30:	0419      	lsls	r1, r3, #16
 8001b32:	2000      	movs	r0, #0
 8001b34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b38:	3307      	adds	r3, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2200      	movs	r2, #0
 8001b40:	653b      	str	r3, [r7, #80]	; 0x50
 8001b42:	657a      	str	r2, [r7, #84]	; 0x54
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8001b4e:	0633      	lsls	r3, r6, #24
 8001b50:	2200      	movs	r2, #0
 8001b52:	eb10 0a02 	adds.w	sl, r0, r2
 8001b56:	eb41 0b03 	adc.w	fp, r1, r3
 8001b5a:	eb14 030a 	adds.w	r3, r4, sl
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b60:	eb45 030b 	adc.w	r3, r5, fp
 8001b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001b6e:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8001b72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b76:	3307      	adds	r3, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b80:	3306      	adds	r3, #6
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	441a      	add	r2, r3
 8001b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b8c:	3305      	adds	r3, #5
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	441a      	add	r2, r3
 8001b94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b98:	3304      	adds	r3, #4
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8001ba4:	647a      	str	r2, [r7, #68]	; 0x44
 8001ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001baa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001bae:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8001bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bb6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bbe:	3303      	adds	r3, #3
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bca:	f04f 0000 	mov.w	r0, #0
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bdc:	3302      	adds	r3, #2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	633b      	str	r3, [r7, #48]	; 0x30
 8001be6:	637a      	str	r2, [r7, #52]	; 0x34
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001bf2:	0233      	lsls	r3, r6, #8
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	1886      	adds	r6, r0, r2
 8001bf8:	62be      	str	r6, [r7, #40]	; 0x28
 8001bfa:	eb41 0303 	adc.w	r3, r1, r3
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001c04:	460b      	mov	r3, r1
 8001c06:	18e3      	adds	r3, r4, r3
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	eb45 0303 	adc.w	r3, r5, r3
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c1a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8001c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c22:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	61fa      	str	r2, [r7, #28]
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	0419      	lsls	r1, r3, #16
 8001c42:	2000      	movs	r0, #0
 8001c44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	617a      	str	r2, [r7, #20]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	693e      	ldr	r6, [r7, #16]
 8001c5c:	0633      	lsls	r3, r6, #24
 8001c5e:	2200      	movs	r2, #0
 8001c60:	1886      	adds	r6, r0, r2
 8001c62:	60be      	str	r6, [r7, #8]
 8001c64:	eb41 0303 	adc.w	r3, r1, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	18e3      	adds	r3, r4, r3
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	eb45 0303 	adc.w	r3, r5, r3
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001c84:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8001c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3788      	adds	r7, #136	; 0x88
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c96:	4770      	bx	lr

08001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001c98:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c9c:	b087      	sub	sp, #28
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d302      	bcc.n	8001cb6 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8001cb0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cb4:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	8af9      	ldrh	r1, [r7, #22]
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	468a      	mov	sl, r1
 8001cc6:	4683      	mov	fp, r0
 8001cc8:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8001ccc:	2500      	movs	r5, #0
 8001cce:	ea42 0804 	orr.w	r8, r2, r4
 8001cd2:	ea43 0905 	orr.w	r9, r3, r5
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ce6:	4770      	bx	lr

08001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	b293      	uxth	r3, r2
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	81fb      	strh	r3, [r7, #14]
                return value;
 8001d00:	89fb      	ldrh	r3, [r7, #14]
            }
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001d0e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	4691      	mov	r9, r2
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8001d3c:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8001d40:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8001d44:	b294      	uxth	r4, r2
 8001d46:	2500      	movs	r5, #0
 8001d48:	ea40 0a04 	orr.w	sl, r0, r4
 8001d4c:	ea41 0b05 	orr.w	fp, r1, r5
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d60:	4770      	bx	lr

08001d62 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001d62:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6178      	str	r0, [r7, #20]
 8001d6c:	6139      	str	r1, [r7, #16]
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d302      	bcc.n	8001d80 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001d7a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001d7e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 8001d80:	f240 4369 	movw	r3, #1129	; 0x469
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	6978      	ldr	r0, [r7, #20]
 8001d8a:	f7ff ff85 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	69f9      	ldr	r1, [r7, #28]
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	468a      	mov	sl, r1
 8001d9e:	4683      	mov	fp, r0
 8001da0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001da4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001da8:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001dac:	0424      	lsls	r4, r4, #16
 8001dae:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001db2:	ea42 0104 	orr.w	r1, r2, r4
 8001db6:	6039      	str	r1, [r7, #0]
 8001db8:	432b      	orrs	r3, r5
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dc2:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2205      	movs	r2, #5
 8001dca:	701a      	strb	r2, [r3, #0]
            }
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001dd6 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001dd6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 8001de6:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ff52 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2200      	movs	r2, #0
 8001e02:	4698      	mov	r8, r3
 8001e04:	4691      	mov	r9, r2
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001e12:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001e16:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001e1a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001e1e:	2500      	movs	r5, #0
 8001e20:	ea40 0a04 	orr.w	sl, r0, r4
 8001e24:	ea41 0b05 	orr.w	fp, r1, r5
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	701a      	strb	r2, [r3, #0]
            }
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e3e <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8001e3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6178      	str	r0, [r7, #20]
 8001e48:	6139      	str	r1, [r7, #16]
 8001e4a:	60fa      	str	r2, [r7, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e54:	d302      	bcc.n	8001e5c <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8001e56:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001e5a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 8001e5c:	f240 4367 	movw	r3, #1127	; 0x467
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f7ff ff17 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	69f9      	ldr	r1, [r7, #28]
 8001e76:	2000      	movs	r0, #0
 8001e78:	468a      	mov	sl, r1
 8001e7a:	4683      	mov	fp, r0
 8001e7c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8001e80:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8001e84:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8001e88:	0424      	lsls	r4, r4, #16
 8001e8a:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8001e8e:	ea42 0104 	orr.w	r1, r2, r4
 8001e92:	6039      	str	r1, [r7, #0]
 8001e94:	432b      	orrs	r3, r5
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e9e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	701a      	strb	r2, [r3, #0]
            }
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001eb2 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001eb2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8001ec2:	f240 4366 	movw	r3, #1126	; 0x466
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff fee4 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2200      	movs	r2, #0
 8001ede:	4698      	mov	r8, r3
 8001ee0:	4691      	mov	r9, r2
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8001eee:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8001ef2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8001ef6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8001efa:	2500      	movs	r5, #0
 8001efc:	ea40 0a04 	orr.w	sl, r0, r4
 8001f00:	ea41 0b05 	orr.w	fp, r1, r5
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	701a      	strb	r2, [r3, #0]
            }
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f1a <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001f1a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6178      	str	r0, [r7, #20]
 8001f24:	6139      	str	r1, [r7, #16]
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f30:	d902      	bls.n	8001f38 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8001f38:	897b      	ldrh	r3, [r7, #10]
 8001f3a:	2b7c      	cmp	r3, #124	; 0x7c
 8001f3c:	d801      	bhi.n	8001f42 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8001f3e:	237d      	movs	r3, #125	; 0x7d
 8001f40:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 8001f42:	f240 4364 	movw	r3, #1124	; 0x464
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff fea4 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8001f50:	897b      	ldrh	r3, [r7, #10]
 8001f52:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	8bf9      	ldrh	r1, [r7, #30]
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	4688      	mov	r8, r1
 8001f60:	4681      	mov	r9, r0
 8001f62:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8001f66:	6079      	str	r1, [r7, #4]
 8001f68:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	683c      	ldr	r4, [r7, #0]
 8001f70:	2500      	movs	r5, #0
 8001f72:	ea42 0a04 	orr.w	sl, r2, r4
 8001f76:	ea43 0b05 	orr.w	fp, r3, r5
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2204      	movs	r2, #4
 8001f84:	701a      	strb	r2, [r3, #0]
            }
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f90 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fea3 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f240 4364 	movw	r3, #1124	; 0x464
 8001faa:	429a      	cmp	r2, r3
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d000      	beq.n	8001fba <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8001fb8:	e7fe      	b.n	8001fb8 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	0c02      	lsrs	r2, r0, #16
 8001fca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fce:	0c0b      	lsrs	r3, r1, #16
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	81fb      	strh	r3, [r7, #14]
                return value;
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
            }
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001fde:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 8001fee:	f240 4363 	movw	r3, #1123	; 0x463
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff fe4e 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	2200      	movs	r2, #0
 800200a:	4698      	mov	r8, r3
 800200c:	4691      	mov	r9, r2
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800201a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800201e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002022:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002026:	2500      	movs	r5, #0
 8002028:	ea40 0a04 	orr.w	sl, r0, r4
 800202c:	ea41 0b05 	orr.w	fp, r1, r5
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	701a      	strb	r2, [r3, #0]
            }
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002046 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fe48 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	f240 4363 	movw	r3, #1123	; 0x463
 8002060:	429a      	cmp	r2, r3
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d000      	beq.n	8002070 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 800206e:	e7fe      	b.n	800206e <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	0c02      	lsrs	r2, r0, #16
 8002080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002084:	0c0b      	lsrs	r3, r1, #16
 8002086:	4613      	mov	r3, r2
 8002088:	73fb      	strb	r3, [r7, #15]
                return value;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
            }
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b088      	sub	sp, #32
 800209a:	af00      	add	r7, sp, #0
 800209c:	6178      	str	r0, [r7, #20]
 800209e:	6139      	str	r1, [r7, #16]
 80020a0:	60fa      	str	r2, [r7, #12]
 80020a2:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 80020a4:	f240 4362 	movw	r3, #1122	; 0x462
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6939      	ldr	r1, [r7, #16]
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f7ff fdf3 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	69f9      	ldr	r1, [r7, #28]
 80020be:	2000      	movs	r0, #0
 80020c0:	468a      	mov	sl, r1
 80020c2:	4683      	mov	fp, r0
 80020c4:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80020c8:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 80020ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020d2:	ea08 0400 	and.w	r4, r8, r0
 80020d6:	ea09 0501 	and.w	r5, r9, r1
 80020da:	ea42 0104 	orr.w	r1, r2, r4
 80020de:	6039      	str	r1, [r7, #0]
 80020e0:	432b      	orrs	r3, r5
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020ea:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2206      	movs	r2, #6
 80020f2:	701a      	strb	r2, [r3, #0]
            }
 80020f4:	bf00      	nop
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fe:	bf00      	nop
 8002100:	ffff0000 	.word	0xffff0000

08002104 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8002114:	f240 4361 	movw	r3, #1121	; 0x461
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fdbb 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2200      	movs	r2, #0
 8002130:	4698      	mov	r8, r3
 8002132:	4691      	mov	r9, r2
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002140:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002144:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002148:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800214c:	2500      	movs	r5, #0
 800214e:	ea40 0a04 	orr.w	sl, r0, r4
 8002152:	ea41 0b05 	orr.w	fp, r1, r5
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	701a      	strb	r2, [r3, #0]
            }
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800216c <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800216c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 800217c:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fd87 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2200      	movs	r2, #0
 8002198:	4698      	mov	r8, r3
 800219a:	4691      	mov	r9, r2
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80021a8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80021ac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80021b0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80021b4:	2500      	movs	r5, #0
 80021b6:	ea40 0a04 	orr.w	sl, r0, r4
 80021ba:	ea41 0b05 	orr.w	fp, r1, r5
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	701a      	strb	r2, [r3, #0]
            }
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021d4 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b088      	sub	sp, #32
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6178      	str	r0, [r7, #20]
 80021de:	6139      	str	r1, [r7, #16]
 80021e0:	60fa      	str	r2, [r7, #12]
 80021e2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ea:	d302      	bcc.n	80021f2 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80021ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80021f0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 80021f2:	f240 4359 	movw	r3, #1113	; 0x459
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff fd4c 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	69f9      	ldr	r1, [r7, #28]
 800220c:	2000      	movs	r0, #0
 800220e:	468a      	mov	sl, r1
 8002210:	4683      	mov	fp, r0
 8002212:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002216:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800221a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800221e:	0424      	lsls	r4, r4, #16
 8002220:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002224:	ea42 0104 	orr.w	r1, r2, r4
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	432b      	orrs	r3, r5
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002234:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]
            }
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002248 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002258:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fd19 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002270:	7dfb      	ldrb	r3, [r7, #23]
 8002272:	2200      	movs	r2, #0
 8002274:	4698      	mov	r8, r3
 8002276:	4691      	mov	r9, r2
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002284:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002288:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800228c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002290:	2500      	movs	r5, #0
 8002292:	ea40 0a04 	orr.w	sl, r0, r4
 8002296:	ea41 0b05 	orr.w	fp, r1, r5
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	701a      	strb	r2, [r3, #0]
            }
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022b0 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b088      	sub	sp, #32
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6178      	str	r0, [r7, #20]
 80022ba:	6139      	str	r1, [r7, #16]
 80022bc:	60fa      	str	r2, [r7, #12]
 80022be:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c6:	d302      	bcc.n	80022ce <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80022c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80022cc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 80022ce:	f240 4357 	movw	r3, #1111	; 0x457
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	6939      	ldr	r1, [r7, #16]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff fcde 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	69f9      	ldr	r1, [r7, #28]
 80022e8:	2000      	movs	r0, #0
 80022ea:	468a      	mov	sl, r1
 80022ec:	4683      	mov	fp, r0
 80022ee:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80022f2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80022f6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80022fa:	0424      	lsls	r4, r4, #16
 80022fc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002300:	ea42 0104 	orr.w	r1, r2, r4
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	432b      	orrs	r3, r5
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002310:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2205      	movs	r2, #5
 8002318:	701a      	strb	r2, [r3, #0]
            }
 800231a:	bf00      	nop
 800231c:	3720      	adds	r7, #32
 800231e:	46bd      	mov	sp, r7
 8002320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002324 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002334:	f240 4356 	movw	r3, #1110	; 0x456
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff fcab 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	2200      	movs	r2, #0
 8002350:	4698      	mov	r8, r3
 8002352:	4691      	mov	r9, r2
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002360:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002364:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002368:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800236c:	2500      	movs	r5, #0
 800236e:	ea40 0a04 	orr.w	sl, r0, r4
 8002372:	ea41 0b05 	orr.w	fp, r1, r5
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	701a      	strb	r2, [r3, #0]
            }
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800238c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002390:	b088      	sub	sp, #32
 8002392:	af00      	add	r7, sp, #0
 8002394:	6178      	str	r0, [r7, #20]
 8002396:	6139      	str	r1, [r7, #16]
 8002398:	60fa      	str	r2, [r7, #12]
 800239a:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 800239c:	897b      	ldrh	r3, [r7, #10]
 800239e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a2:	d902      	bls.n	80023aa <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80023a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a8:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80023aa:	897b      	ldrh	r3, [r7, #10]
 80023ac:	2b7c      	cmp	r3, #124	; 0x7c
 80023ae:	d801      	bhi.n	80023b4 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80023b0:	237d      	movs	r3, #125	; 0x7d
 80023b2:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 80023b4:	f240 4354 	movw	r3, #1108	; 0x454
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	6939      	ldr	r1, [r7, #16]
 80023bc:	6978      	ldr	r0, [r7, #20]
 80023be:	f7ff fc6b 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	8bf9      	ldrh	r1, [r7, #30]
 80023ce:	2000      	movs	r0, #0
 80023d0:	4688      	mov	r8, r1
 80023d2:	4681      	mov	r9, r0
 80023d4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80023d8:	6079      	str	r1, [r7, #4]
 80023da:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80023de:	6039      	str	r1, [r7, #0]
 80023e0:	683c      	ldr	r4, [r7, #0]
 80023e2:	2500      	movs	r5, #0
 80023e4:	ea42 0a04 	orr.w	sl, r2, r4
 80023e8:	ea43 0b05 	orr.w	fp, r3, r5
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2204      	movs	r2, #4
 80023f6:	701a      	strb	r2, [r3, #0]
            }
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002402 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 800240c:	6839      	ldr	r1, [r7, #0]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fc6a 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	f240 4354 	movw	r3, #1108	; 0x454
 800241c:	429a      	cmp	r2, r3
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d000      	beq.n	800242c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800242a:	e7fe      	b.n	800242a <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	0c02      	lsrs	r2, r0, #16
 800243c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002440:	0c0b      	lsrs	r3, r1, #16
 8002442:	4613      	mov	r3, r2
 8002444:	81fb      	strh	r3, [r7, #14]
                return value;
 8002446:	89fb      	ldrh	r3, [r7, #14]
            }
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8002460:	f240 4353 	movw	r3, #1107	; 0x453
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff fc15 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2200      	movs	r2, #0
 800247c:	4698      	mov	r8, r3
 800247e:	4691      	mov	r9, r2
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800248c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002490:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002494:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002498:	2500      	movs	r5, #0
 800249a:	ea40 0a04 	orr.w	sl, r0, r4
 800249e:	ea41 0b05 	orr.w	fp, r1, r5
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	701a      	strb	r2, [r3, #0]
            }
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024b8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fc0f 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	f240 4353 	movw	r3, #1107	; 0x453
 80024d2:	429a      	cmp	r2, r3
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d000      	beq.n	80024e2 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80024e0:	e7fe      	b.n	80024e0 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	0c02      	lsrs	r2, r0, #16
 80024f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024f6:	0c0b      	lsrs	r3, r1, #16
 80024f8:	4613      	mov	r3, r2
 80024fa:	73fb      	strb	r3, [r7, #15]
                return value;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
            }
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b088      	sub	sp, #32
 800250e:	af00      	add	r7, sp, #0
 8002510:	6178      	str	r0, [r7, #20]
 8002512:	6139      	str	r1, [r7, #16]
 8002514:	60fa      	str	r2, [r7, #12]
 8002516:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002518:	f240 4352 	movw	r3, #1106	; 0x452
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	6939      	ldr	r1, [r7, #16]
 8002520:	6978      	ldr	r0, [r7, #20]
 8002522:	f7ff fbb9 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	69f9      	ldr	r1, [r7, #28]
 8002532:	2000      	movs	r0, #0
 8002534:	468a      	mov	sl, r1
 8002536:	4683      	mov	fp, r0
 8002538:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800253c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002542:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002546:	ea08 0400 	and.w	r4, r8, r0
 800254a:	ea09 0501 	and.w	r5, r9, r1
 800254e:	ea42 0104 	orr.w	r1, r2, r4
 8002552:	6039      	str	r1, [r7, #0]
 8002554:	432b      	orrs	r3, r5
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800255e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2206      	movs	r2, #6
 8002566:	701a      	strb	r2, [r3, #0]
            }
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002572:	bf00      	nop
 8002574:	ffff0000 	.word	0xffff0000

08002578 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002588:	f240 4351 	movw	r3, #1105	; 0x451
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fb81 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2200      	movs	r2, #0
 80025a4:	4698      	mov	r8, r3
 80025a6:	4691      	mov	r9, r2
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80025b4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80025b8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80025bc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80025c0:	2500      	movs	r5, #0
 80025c2:	ea40 0a04 	orr.w	sl, r0, r4
 80025c6:	ea41 0b05 	orr.w	fp, r1, r5
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2203      	movs	r2, #3
 80025d4:	701a      	strb	r2, [r3, #0]
            }
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025e0 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 80025f0:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff fb4d 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2200      	movs	r2, #0
 800260c:	4698      	mov	r8, r3
 800260e:	4691      	mov	r9, r2
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800261c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002620:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002624:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002628:	2500      	movs	r5, #0
 800262a:	ea40 0a04 	orr.w	sl, r0, r4
 800262e:	ea41 0b05 	orr.w	fp, r1, r5
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2203      	movs	r2, #3
 800263c:	701a      	strb	r2, [r3, #0]
            }
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002648 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b088      	sub	sp, #32
 800264e:	af00      	add	r7, sp, #0
 8002650:	6178      	str	r0, [r7, #20]
 8002652:	6139      	str	r1, [r7, #16]
 8002654:	60fa      	str	r2, [r7, #12]
 8002656:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265e:	d302      	bcc.n	8002666 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8002660:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002664:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8002666:	f240 4331 	movw	r3, #1073	; 0x431
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6939      	ldr	r1, [r7, #16]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff fb12 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	69f9      	ldr	r1, [r7, #28]
 8002680:	2000      	movs	r0, #0
 8002682:	468a      	mov	sl, r1
 8002684:	4683      	mov	fp, r0
 8002686:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800268a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800268e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002692:	0424      	lsls	r4, r4, #16
 8002694:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002698:	ea42 0104 	orr.w	r1, r2, r4
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	432b      	orrs	r3, r5
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80026a8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2205      	movs	r2, #5
 80026b0:	701a      	strb	r2, [r3, #0]
            }
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026bc <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b088      	sub	sp, #32
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6178      	str	r0, [r7, #20]
 80026c6:	6139      	str	r1, [r7, #16]
 80026c8:	60fa      	str	r2, [r7, #12]
 80026ca:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 80026cc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	6939      	ldr	r1, [r7, #16]
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	f7ff fadf 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	69f9      	ldr	r1, [r7, #28]
 80026e6:	2000      	movs	r0, #0
 80026e8:	468a      	mov	sl, r1
 80026ea:	4683      	mov	fp, r0
 80026ec:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80026f0:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 80026f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026fa:	ea08 0400 	and.w	r4, r8, r0
 80026fe:	ea09 0501 	and.w	r5, r9, r1
 8002702:	ea42 0104 	orr.w	r1, r2, r4
 8002706:	6039      	str	r1, [r7, #0]
 8002708:	432b      	orrs	r3, r5
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002712:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2206      	movs	r2, #6
 800271a:	701a      	strb	r2, [r3, #0]
            }
 800271c:	bf00      	nop
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002726:	bf00      	nop
 8002728:	ffff0000 	.word	0xffff0000

0800272c <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 800272c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
                if (value > max) {
 800273a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800273e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002742:	d305      	bcc.n	8002750 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8002750:	f240 4321 	movw	r3, #1057	; 0x421
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff fa9d 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 800275e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002762:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	e9d3 8900 	ldrd	r8, r9, [r3]
 800276c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	040b      	lsls	r3, r1, #16
 800277a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800277e:	0402      	lsls	r2, r0, #16
 8002780:	ea48 0402 	orr.w	r4, r8, r2
 8002784:	ea49 0503 	orr.w	r5, r9, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2208      	movs	r2, #8
 8002792:	701a      	strb	r2, [r3, #0]
            }
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800279e <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 800279e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80027ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d305      	bcc.n	80027c2 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 80027b6:	f04f 32ff 	mov.w	r2, #4294967295
 80027ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 80027c2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff fa64 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80027d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80027de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	040b      	lsls	r3, r1, #16
 80027ec:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80027f0:	0402      	lsls	r2, r0, #16
 80027f2:	ea48 0402 	orr.w	r4, r8, r2
 80027f6:	ea49 0503 	orr.w	r5, r9, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2208      	movs	r2, #8
 8002804:	701a      	strb	r2, [r3, #0]
            }
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002810 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8002820:	f240 4316 	movw	r3, #1046	; 0x416
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff fa35 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2200      	movs	r2, #0
 800283c:	4698      	mov	r8, r3
 800283e:	4691      	mov	r9, r2
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800284c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002850:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002854:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002858:	2500      	movs	r5, #0
 800285a:	ea40 0a04 	orr.w	sl, r0, r4
 800285e:	ea41 0b05 	orr.w	fp, r1, r5
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2203      	movs	r2, #3
 800286c:	701a      	strb	r2, [r3, #0]
            }
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002878 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 8002888:	f240 4315 	movw	r3, #1045	; 0x415
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fa01 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2200      	movs	r2, #0
 80028a4:	4698      	mov	r8, r3
 80028a6:	4691      	mov	r9, r2
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80028b4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80028b8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80028bc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80028c0:	2500      	movs	r5, #0
 80028c2:	ea40 0a04 	orr.w	sl, r0, r4
 80028c6:	ea41 0b05 	orr.w	fp, r1, r5
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	701a      	strb	r2, [r3, #0]
            }
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028e0 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b088      	sub	sp, #32
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6178      	str	r0, [r7, #20]
 80028ea:	6139      	str	r1, [r7, #16]
 80028ec:	60fa      	str	r2, [r7, #12]
 80028ee:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f6:	d302      	bcc.n	80028fe <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 80028f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80028fc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 80028fe:	f240 4314 	movw	r3, #1044	; 0x414
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6939      	ldr	r1, [r7, #16]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff f9c6 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	69f9      	ldr	r1, [r7, #28]
 8002918:	2000      	movs	r0, #0
 800291a:	468a      	mov	sl, r1
 800291c:	4683      	mov	fp, r0
 800291e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002922:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002926:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800292a:	0424      	lsls	r4, r4, #16
 800292c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002930:	ea42 0104 	orr.w	r1, r2, r4
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	432b      	orrs	r3, r5
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002940:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2205      	movs	r2, #5
 8002948:	701a      	strb	r2, [r3, #0]
            }
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002954 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b088      	sub	sp, #32
 800295a:	af00      	add	r7, sp, #0
 800295c:	6178      	str	r0, [r7, #20]
 800295e:	6139      	str	r1, [r7, #16]
 8002960:	60fa      	str	r2, [r7, #12]
 8002962:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002966:	edd7 7a02 	vldr	s15, [r7, #8]
 800296a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80029fc <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 800296e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	dd01      	ble.n	800297c <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 800297a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800297c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002980:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002988:	d502      	bpl.n	8002990 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8002990:	f240 4313 	movw	r3, #1043	; 0x413
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	6939      	ldr	r1, [r7, #16]
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7ff f97d 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 800299e:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002a04 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80029a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029aa:	eeb0 0a47 	vmov.f32	s0, s14
 80029ae:	f7ff f831 	bl	8001a14 <_ZSt5roundf>
 80029b2:	eef0 7a40 	vmov.f32	s15, s0
 80029b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	8bf9      	ldrh	r1, [r7, #30]
 80029c8:	2000      	movs	r0, #0
 80029ca:	4688      	mov	r8, r1
 80029cc:	4681      	mov	r9, r0
 80029ce:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80029d2:	6079      	str	r1, [r7, #4]
 80029d4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	683c      	ldr	r4, [r7, #0]
 80029dc:	2500      	movs	r5, #0
 80029de:	ea42 0a04 	orr.w	sl, r2, r4
 80029e2:	ea43 0b05 	orr.w	fp, r3, r5
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
            }
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fc:	428311ec 	.word	0x428311ec
 8002a00:	428311ec 	.word	0x428311ec
 8002a04:	3a83126f 	.word	0x3a83126f

08002a08 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a0c:	b088      	sub	sp, #32
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6178      	str	r0, [r7, #20]
 8002a12:	6139      	str	r1, [r7, #16]
 8002a14:	60fa      	str	r2, [r7, #12]
 8002a16:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a1e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002abc <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8002a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	dd01      	ble.n	8002a30 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8002a2e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002a30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a34:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a40:	d501      	bpl.n	8002a46 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8002a44:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 8002a46:	f240 4312 	movw	r3, #1042	; 0x412
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	6939      	ldr	r1, [r7, #16]
 8002a4e:	6978      	ldr	r0, [r7, #20]
 8002a50:	f7ff f922 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8002a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a58:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a60:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002ac8 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8002a64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a68:	eeb0 0a47 	vmov.f32	s0, s14
 8002a6c:	f7fe ffd2 	bl	8001a14 <_ZSt5roundf>
 8002a70:	eef0 7a40 	vmov.f32	s15, s0
 8002a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a78:	ee17 3a90 	vmov	r3, s15
 8002a7c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	8bf9      	ldrh	r1, [r7, #30]
 8002a86:	2000      	movs	r0, #0
 8002a88:	4688      	mov	r8, r1
 8002a8a:	4681      	mov	r9, r0
 8002a8c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a90:	6079      	str	r1, [r7, #4]
 8002a92:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002a96:	6039      	str	r1, [r7, #0]
 8002a98:	683c      	ldr	r4, [r7, #0]
 8002a9a:	2500      	movs	r5, #0
 8002a9c:	ea42 0a04 	orr.w	sl, r2, r4
 8002aa0:	ea43 0b05 	orr.w	fp, r3, r5
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
            }
 8002ab0:	bf00      	nop
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aba:	bf00      	nop
 8002abc:	441c5666 	.word	0x441c5666
 8002ac0:	441c5666 	.word	0x441c5666
 8002ac4:	c1f00000 	.word	0xc1f00000
 8002ac8:	3c23d70a 	.word	0x3c23d70a

08002acc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6178      	str	r0, [r7, #20]
 8002ad6:	6139      	str	r1, [r7, #16]
 8002ad8:	60fa      	str	r2, [r7, #12]
 8002ada:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002ae6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 8002ae8:	f240 4311 	movw	r3, #1041	; 0x411
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	6939      	ldr	r1, [r7, #16]
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7ff f8d1 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	69f9      	ldr	r1, [r7, #28]
 8002b04:	2000      	movs	r0, #0
 8002b06:	4688      	mov	r8, r1
 8002b08:	4681      	mov	r9, r0
 8002b0a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b0e:	6079      	str	r1, [r7, #4]
 8002b10:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	683c      	ldr	r4, [r7, #0]
 8002b18:	2500      	movs	r5, #0
 8002b1a:	ea42 0a04 	orr.w	sl, r2, r4
 8002b1e:	ea43 0b05 	orr.w	fp, r3, r5
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	701a      	strb	r2, [r3, #0]
            }
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b38:	0003fffc 	.word	0x0003fffc

08002b3c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b088      	sub	sp, #32
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6178      	str	r0, [r7, #20]
 8002b46:	6139      	str	r1, [r7, #16]
 8002b48:	60fa      	str	r2, [r7, #12]
 8002b4a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002b4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b52:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002bf0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8002b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	dd01      	ble.n	8002b64 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8002b62:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002b64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d502      	bpl.n	8002b78 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 8002b78:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6939      	ldr	r1, [r7, #16]
 8002b80:	6978      	ldr	r0, [r7, #20]
 8002b82:	f7ff f889 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8002b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b92:	eeb0 0a47 	vmov.f32	s0, s14
 8002b96:	f7fe ff3d 	bl	8001a14 <_ZSt5roundf>
 8002b9a:	eef0 7a40 	vmov.f32	s15, s0
 8002b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba2:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ba6:	793b      	ldrb	r3, [r7, #4]
 8002ba8:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb0:	7ffb      	ldrb	r3, [r7, #31]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4698      	mov	r8, r3
 8002bb6:	4691      	mov	r9, r2
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002bc4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002bc8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002bcc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002bd0:	2500      	movs	r5, #0
 8002bd2:	ea40 0a04 	orr.w	sl, r0, r4
 8002bd6:	ea41 0b05 	orr.w	fp, r1, r5
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
            }
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf0:	42c80000 	.word	0x42c80000
 8002bf4:	42c80000 	.word	0x42c80000

08002bf8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6178      	str	r0, [r7, #20]
 8002c02:	6139      	str	r1, [r7, #16]
 8002c04:	60fa      	str	r2, [r7, #12]
 8002c06:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 8002c08:	2321      	movs	r3, #33	; 0x21
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	6939      	ldr	r1, [r7, #16]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff f842 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002c14:	897b      	ldrh	r3, [r7, #10]
 8002c16:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	8bf9      	ldrh	r1, [r7, #30]
 8002c20:	2000      	movs	r0, #0
 8002c22:	4688      	mov	r8, r1
 8002c24:	4681      	mov	r9, r0
 8002c26:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002c2a:	6079      	str	r1, [r7, #4]
 8002c2c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	683c      	ldr	r4, [r7, #0]
 8002c34:	2500      	movs	r5, #0
 8002c36:	ea42 0a04 	orr.w	sl, r2, r4
 8002c3a:	ea43 0b05 	orr.w	fp, r3, r5
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
            }
 8002c4a:	bf00      	nop
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c54 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff f841 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b21      	cmp	r3, #33	; 0x21
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d000      	beq.n	8002c78 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8002c76:	e7fe      	b.n	8002c76 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	0c02      	lsrs	r2, r0, #16
 8002c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c8c:	0c0b      	lsrs	r3, r1, #16
 8002c8e:	4613      	mov	r3, r2
 8002c90:	81fb      	strh	r3, [r7, #14]
                return value;
 8002c92:	89fb      	ldrh	r3, [r7, #14]
            }
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8002cac:	2320      	movs	r3, #32
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7fe fff0 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4698      	mov	r8, r3
 8002cc8:	4691      	mov	r9, r2
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002cd6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002cda:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002cde:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ce2:	2500      	movs	r5, #0
 8002ce4:	ea40 0a04 	orr.w	sl, r0, r4
 8002ce8:	ea41 0b05 	orr.w	fp, r1, r5
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	701a      	strb	r2, [r3, #0]
            }
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d02 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe ffea 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d000      	beq.n	8002d26 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8002d24:	e7fe      	b.n	8002d24 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	0c02      	lsrs	r2, r0, #16
 8002d36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d3a:	0c0b      	lsrs	r3, r1, #16
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	73fb      	strb	r3, [r7, #15]
                return value;
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002d4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6178      	str	r0, [r7, #20]
 8002d54:	6139      	str	r1, [r7, #16]
 8002d56:	60fa      	str	r2, [r7, #12]
 8002d58:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	6978      	ldr	r0, [r7, #20]
 8002d62:	f7fe ff99 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	8bf9      	ldrh	r1, [r7, #30]
 8002d72:	2000      	movs	r0, #0
 8002d74:	4688      	mov	r8, r1
 8002d76:	4681      	mov	r9, r0
 8002d78:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d7c:	6079      	str	r1, [r7, #4]
 8002d7e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d82:	6039      	str	r1, [r7, #0]
 8002d84:	683c      	ldr	r4, [r7, #0]
 8002d86:	2500      	movs	r5, #0
 8002d88:	ea42 0a04 	orr.w	sl, r2, r4
 8002d8c:	ea43 0b05 	orr.w	fp, r3, r5
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	701a      	strb	r2, [r3, #0]
            }
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002da6 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe ff98 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d000      	beq.n	8002dca <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8002dc8:	e7fe      	b.n	8002dc8 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	0c02      	lsrs	r2, r0, #16
 8002dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dde:	0c0b      	lsrs	r3, r1, #16
 8002de0:	4613      	mov	r3, r2
 8002de2:	81fb      	strh	r3, [r7, #14]
                return value;
 8002de4:	89fb      	ldrh	r3, [r7, #14]
            }
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002dee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6178      	str	r0, [r7, #20]
 8002df8:	6139      	str	r1, [r7, #16]
 8002dfa:	60fa      	str	r2, [r7, #12]
 8002dfc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 8002dfe:	2305      	movs	r3, #5
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	6939      	ldr	r1, [r7, #16]
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f7fe ff47 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	8bf9      	ldrh	r1, [r7, #30]
 8002e16:	2000      	movs	r0, #0
 8002e18:	4688      	mov	r8, r1
 8002e1a:	4681      	mov	r9, r0
 8002e1c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e20:	6079      	str	r1, [r7, #4]
 8002e22:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e26:	6039      	str	r1, [r7, #0]
 8002e28:	683c      	ldr	r4, [r7, #0]
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	ea42 0a04 	orr.w	sl, r2, r4
 8002e30:	ea43 0b05 	orr.w	fp, r3, r5
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
            }
 8002e40:	bf00      	nop
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e4a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002e4a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6178      	str	r0, [r7, #20]
 8002e54:	6139      	str	r1, [r7, #16]
 8002e56:	60fa      	str	r2, [r7, #12]
 8002e58:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	6939      	ldr	r1, [r7, #16]
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f7fe ff19 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	8bf9      	ldrh	r1, [r7, #30]
 8002e72:	2000      	movs	r0, #0
 8002e74:	4688      	mov	r8, r1
 8002e76:	4681      	mov	r9, r0
 8002e78:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e7c:	6079      	str	r1, [r7, #4]
 8002e7e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e82:	6039      	str	r1, [r7, #0]
 8002e84:	683c      	ldr	r4, [r7, #0]
 8002e86:	2500      	movs	r5, #0
 8002e88:	ea42 0a04 	orr.w	sl, r2, r4
 8002e8c:	ea43 0b05 	orr.w	fp, r3, r5
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	701a      	strb	r2, [r3, #0]
            }
 8002e9c:	bf00      	nop
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ea6 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002ea6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6178      	str	r0, [r7, #20]
 8002eb0:	6139      	str	r1, [r7, #16]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	6978      	ldr	r0, [r7, #20]
 8002ebe:	f7fe feeb 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	8bf9      	ldrh	r1, [r7, #30]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4688      	mov	r8, r1
 8002ed2:	4681      	mov	r9, r0
 8002ed4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002ed8:	6079      	str	r1, [r7, #4]
 8002eda:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002ede:	6039      	str	r1, [r7, #0]
 8002ee0:	683c      	ldr	r4, [r7, #0]
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	ea42 0a04 	orr.w	sl, r2, r4
 8002ee8:	ea43 0b05 	orr.w	fp, r3, r5
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	701a      	strb	r2, [r3, #0]
            }
 8002ef8:	bf00      	nop
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f02 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 8002f12:	2302      	movs	r3, #2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7fe febd 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4698      	mov	r8, r3
 8002f2e:	4691      	mov	r9, r2
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002f3c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002f40:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002f44:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002f48:	2500      	movs	r5, #0
 8002f4a:	ea40 0a04 	orr.w	sl, r0, r4
 8002f4e:	ea41 0b05 	orr.w	fp, r1, r5
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	701a      	strb	r2, [r3, #0]
            }
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f68 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 8002f78:	2301      	movs	r3, #1
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7fe fe8a 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	2200      	movs	r2, #0
 8002f92:	4698      	mov	r8, r3
 8002f94:	4691      	mov	r9, r2
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002fa2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002fa6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002faa:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002fae:	2500      	movs	r5, #0
 8002fb0:	ea40 0a04 	orr.w	sl, r0, r4
 8002fb4:	ea41 0b05 	orr.w	fp, r1, r5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	701a      	strb	r2, [r3, #0]
            }
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fce <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af02      	add	r7, sp, #8
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f240 6101 	movw	r1, #1537	; 0x601
 8002fe8:	f7fe fd24 	bl	8001a34 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8002ff0:	f240 6201 	movw	r2, #1537	; 0x601
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d000      	beq.n	8002ffa <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8002ff8:	e7fe      	b.n	8002ff8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	6839      	ldr	r1, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	331c      	adds	r3, #28
 8003014:	461a      	mov	r2, r3
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ffd9 	bl	8002fce <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8003026:	b580      	push	{r7, lr}
 8003028:	b08a      	sub	sp, #40	; 0x28
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ffe5 	bl	8003004 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fc3c 	bl	80048bc <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003044:	4603      	mov	r3, r0
 8003046:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f814 	bl	8003078 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	2300      	movs	r3, #0
 8003064:	2208      	movs	r2, #8
 8003066:	f240 5181 	movw	r1, #1409	; 0x581
 800306a:	f7fd fa83 	bl	8000574 <_ZN3can11MessageBaseC1Emhb>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003078:	b580      	push	{r7, lr}
 800307a:	b092      	sub	sp, #72	; 0x48
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ffe6 	bl	8003058 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	2b21      	cmp	r3, #33	; 0x21
 8003096:	f300 810b 	bgt.w	80032b0 <_Z31handleSDORequestDownloadBySDOIDt+0x238>
 800309a:	2b00      	cmp	r3, #0
 800309c:	f300 80be 	bgt.w	800321c <_Z31handleSDORequestDownloadBySDOIDt+0x1a4>
 80030a0:	e30d      	b.n	80036be <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80030a2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80030a6:	2b59      	cmp	r3, #89	; 0x59
 80030a8:	f200 8309 	bhi.w	80036be <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <_Z31handleSDORequestDownloadBySDOIDt+0x3c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080033a5 	.word	0x080033a5
 80030b8:	080033c3 	.word	0x080033c3
 80030bc:	080033dd 	.word	0x080033dd
 80030c0:	080033fb 	.word	0x080033fb
 80030c4:	08003419 	.word	0x08003419
 80030c8:	08003433 	.word	0x08003433
 80030cc:	0800344f 	.word	0x0800344f
 80030d0:	080036bf 	.word	0x080036bf
 80030d4:	080036bf 	.word	0x080036bf
 80030d8:	080036bf 	.word	0x080036bf
 80030dc:	080036bf 	.word	0x080036bf
 80030e0:	080036bf 	.word	0x080036bf
 80030e4:	080036bf 	.word	0x080036bf
 80030e8:	080036bf 	.word	0x080036bf
 80030ec:	080036bf 	.word	0x080036bf
 80030f0:	080036bf 	.word	0x080036bf
 80030f4:	0800346b 	.word	0x0800346b
 80030f8:	08003485 	.word	0x08003485
 80030fc:	080036bf 	.word	0x080036bf
 8003100:	080036bf 	.word	0x080036bf
 8003104:	080036bf 	.word	0x080036bf
 8003108:	080036bf 	.word	0x080036bf
 800310c:	080036bf 	.word	0x080036bf
 8003110:	080036bf 	.word	0x080036bf
 8003114:	080036bf 	.word	0x080036bf
 8003118:	080036bf 	.word	0x080036bf
 800311c:	080036bf 	.word	0x080036bf
 8003120:	080036bf 	.word	0x080036bf
 8003124:	080036bf 	.word	0x080036bf
 8003128:	080036bf 	.word	0x080036bf
 800312c:	080036bf 	.word	0x080036bf
 8003130:	080036bf 	.word	0x080036bf
 8003134:	0800349f 	.word	0x0800349f
 8003138:	080034b9 	.word	0x080034b9
 800313c:	080036bf 	.word	0x080036bf
 8003140:	080036bf 	.word	0x080036bf
 8003144:	080036bf 	.word	0x080036bf
 8003148:	080036bf 	.word	0x080036bf
 800314c:	080036bf 	.word	0x080036bf
 8003150:	080036bf 	.word	0x080036bf
 8003154:	080036bf 	.word	0x080036bf
 8003158:	080036bf 	.word	0x080036bf
 800315c:	080036bf 	.word	0x080036bf
 8003160:	080036bf 	.word	0x080036bf
 8003164:	080036bf 	.word	0x080036bf
 8003168:	080036bf 	.word	0x080036bf
 800316c:	080036bf 	.word	0x080036bf
 8003170:	080036bf 	.word	0x080036bf
 8003174:	080036bf 	.word	0x080036bf
 8003178:	080036bf 	.word	0x080036bf
 800317c:	080036bf 	.word	0x080036bf
 8003180:	080036bf 	.word	0x080036bf
 8003184:	080036bf 	.word	0x080036bf
 8003188:	080036bf 	.word	0x080036bf
 800318c:	080036bf 	.word	0x080036bf
 8003190:	080036bf 	.word	0x080036bf
 8003194:	080036bf 	.word	0x080036bf
 8003198:	080036bf 	.word	0x080036bf
 800319c:	080036bf 	.word	0x080036bf
 80031a0:	080036bf 	.word	0x080036bf
 80031a4:	080036bf 	.word	0x080036bf
 80031a8:	080036bf 	.word	0x080036bf
 80031ac:	080036bf 	.word	0x080036bf
 80031b0:	080036bf 	.word	0x080036bf
 80031b4:	080034d3 	.word	0x080034d3
 80031b8:	080034ef 	.word	0x080034ef
 80031bc:	0800350b 	.word	0x0800350b
 80031c0:	08003525 	.word	0x08003525
 80031c4:	08003541 	.word	0x08003541
 80031c8:	080036bf 	.word	0x080036bf
 80031cc:	0800355d 	.word	0x0800355d
 80031d0:	08003579 	.word	0x08003579
 80031d4:	08003593 	.word	0x08003593
 80031d8:	080035af 	.word	0x080035af
 80031dc:	080036bf 	.word	0x080036bf
 80031e0:	080036bf 	.word	0x080036bf
 80031e4:	080036bf 	.word	0x080036bf
 80031e8:	080036bf 	.word	0x080036bf
 80031ec:	080036bf 	.word	0x080036bf
 80031f0:	080036bf 	.word	0x080036bf
 80031f4:	080035c9 	.word	0x080035c9
 80031f8:	080035e5 	.word	0x080035e5
 80031fc:	08003601 	.word	0x08003601
 8003200:	0800361b 	.word	0x0800361b
 8003204:	08003637 	.word	0x08003637
 8003208:	080036bf 	.word	0x080036bf
 800320c:	08003653 	.word	0x08003653
 8003210:	0800366f 	.word	0x0800366f
 8003214:	08003689 	.word	0x08003689
 8003218:	080036a5 	.word	0x080036a5
 800321c:	3b01      	subs	r3, #1
 800321e:	2b20      	cmp	r3, #32
 8003220:	f200 824d 	bhi.w	80036be <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <_Z31handleSDORequestDownloadBySDOIDt+0x1b4>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	080032c5 	.word	0x080032c5
 8003230:	080032e1 	.word	0x080032e1
 8003234:	080032fd 	.word	0x080032fd
 8003238:	08003319 	.word	0x08003319
 800323c:	08003335 	.word	0x08003335
 8003240:	080036bf 	.word	0x080036bf
 8003244:	080036bf 	.word	0x080036bf
 8003248:	080036bf 	.word	0x080036bf
 800324c:	080036bf 	.word	0x080036bf
 8003250:	080036bf 	.word	0x080036bf
 8003254:	080036bf 	.word	0x080036bf
 8003258:	080036bf 	.word	0x080036bf
 800325c:	080036bf 	.word	0x080036bf
 8003260:	080036bf 	.word	0x080036bf
 8003264:	080036bf 	.word	0x080036bf
 8003268:	08003351 	.word	0x08003351
 800326c:	080036bf 	.word	0x080036bf
 8003270:	080036bf 	.word	0x080036bf
 8003274:	080036bf 	.word	0x080036bf
 8003278:	080036bf 	.word	0x080036bf
 800327c:	080036bf 	.word	0x080036bf
 8003280:	080036bf 	.word	0x080036bf
 8003284:	080036bf 	.word	0x080036bf
 8003288:	080036bf 	.word	0x080036bf
 800328c:	080036bf 	.word	0x080036bf
 8003290:	080036bf 	.word	0x080036bf
 8003294:	080036bf 	.word	0x080036bf
 8003298:	080036bf 	.word	0x080036bf
 800329c:	080036bf 	.word	0x080036bf
 80032a0:	080036bf 	.word	0x080036bf
 80032a4:	080036bf 	.word	0x080036bf
 80032a8:	0800336d 	.word	0x0800336d
 80032ac:	08003389 	.word	0x08003389
 80032b0:	f240 4269 	movw	r2, #1129	; 0x469
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f300 8202 	bgt.w	80036be <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80032ba:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80032be:	f6bf aef0 	bge.w	80030a2 <_Z31handleSDORequestDownloadBySDOIDt+0x2a>
 80032c2:	e1fc      	b.n	80036be <_Z31handleSDORequestDownloadBySDOIDt+0x646>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 80032c4:	f000 fe1c 	bl	8003f00 <_Z13OD_NodeID_getv>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fb04 	bl	80048e0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80032de:	e1f6      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 80032e0:	f000 fe2a 	bl	8003f38 <_Z17OD_NodeStatus_getv>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fb0b 	bl	800490a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80032fa:	e1e8      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80032fc:	f000 fe38 	bl	8003f70 <_Z22OD_ProtocolVersion_getv>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fb12 	bl	8004934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003316:	e1da      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003318:	f000 fe46 	bl	8003fa8 <_Z19OD_StackVersion_getv>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fb19 	bl	800495e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003332:	e1cc      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003334:	f000 fe54 	bl	8003fe0 <_Z17OD_DbcVersion_getv>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fb20 	bl	8004988 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800334e:	e1be      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003350:	f000 fe62 	bl	8004018 <_Z24OD_HeartbeatInterval_getv>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fb27 	bl	80049b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800336a:	e1b0      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 800336c:	f000 fe8c 	bl	8004088 <_Z21OD_SendOdOnBootup_getv>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fb2e 	bl	80049dc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003386:	e1a2      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003388:	f000 feb6 	bl	80040f8 <_Z26OD_OdEntrySendInterval_getv>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003394:	4611      	mov	r1, r2
 8003396:	4618      	mov	r0, r3
 8003398:	f001 fb35 	bl	8004a06 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80033a2:	e194      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 80033a4:	f000 fee0 	bl	8004168 <_Z15OD_CpuUsage_getv>
 80033a8:	eef0 7a40 	vmov.f32	s15, s0
 80033ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 fb3b 	bl	8004a30 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80033c0:	e185      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 80033c2:	f000 feef 	bl	80041a4 <_Z14OD_MemFree_getv>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fb45 	bl	8004a5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80033da:	e178      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 80033dc:	f000 fefe 	bl	80041dc <_Z16OD_BoardTemp_getv>
 80033e0:	eef0 7a40 	vmov.f32	s15, s0
 80033e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fb4a 	bl	8004a86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80033f8:	e169      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 80033fa:	f000 ff0d 	bl	8004218 <_Z19OD_InputVoltage_getv>
 80033fe:	eef0 7a40 	vmov.f32	s15, s0
 8003402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003406:	eeb0 0a67 	vmov.f32	s0, s15
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fb52 	bl	8004ab4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003416:	e15a      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003418:	f000 ff1c 	bl	8004254 <_Z14OD_runtime_getv>
 800341c:	4602      	mov	r2, r0
 800341e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fb5c 	bl	8004ae2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800342a:	2300      	movs	r3, #0
 800342c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003430:	e14d      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003432:	f000 ff2b 	bl	800428c <_Z12OD_SdcIn_getv>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fb62 	bl	8004b0a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800344c:	e13f      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 800344e:	f000 ff39 	bl	80042c4 <_Z13OD_SdcOut_getv>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fb69 	bl	8004b34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003468:	e131      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 800346a:	f000 ff47 	bl	80042fc <_Z15OD_ChipUID1_getv>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003476:	4608      	mov	r0, r1
 8003478:	f001 fb71 	bl	8004b5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003482:	e124      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003484:	f000 ff5a 	bl	800433c <_Z15OD_ChipUID2_getv>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003490:	4608      	mov	r0, r1
 8003492:	f001 fb7d 	bl	8004b90 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800349c:	e117      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 800349e:	f000 ff6d 	bl	800437c <_Z16OD_BuildDate_getv>
 80034a2:	4602      	mov	r2, r0
 80034a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fb89 	bl	8004bc2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80034b6:	e10a      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 80034b8:	f000 ff7c 	bl	80043b4 <_Z16OD_BuildTime_getv>
 80034bc:	4602      	mov	r2, r0
 80034be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fb90 	bl	8004bea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80034d0:	e0fd      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80034d2:	f000 ff8b 	bl	80043ec <_Z20OD_CAN1_TxErrCnt_getv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fb96 	bl	8004c12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80034ec:	e0ef      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80034ee:	f000 ff99 	bl	8004424 <_Z20OD_CAN1_RxErrCnt_getv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fb9d 	bl	8004c3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003502:	2300      	movs	r3, #0
 8003504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003508:	e0e1      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 800350a:	f000 ffa7 	bl	800445c <_Z25OD_CAN1_lastErrorCode_getv>
 800350e:	4602      	mov	r2, r0
 8003510:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f001 fba5 	bl	8004c66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003522:	e0d4      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003524:	f000 ffb6 	bl	8004494 <_Z26OD_CAN1_autoErrorReset_getv>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fbab 	bl	8004c8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800353e:	e0c6      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003540:	f000 ffe0 	bl	8004504 <_Z20OD_CAN1_Baudrate_getv>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fbb2 	bl	8004cb8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800355a:	e0b8      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 800355c:	f001 f80a 	bl	8004574 <_Z18OD_CAN1_Status_getv>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fbb9 	bl	8004ce2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003576:	e0aa      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003578:	f001 f818 	bl	80045ac <_Z31OD_CAN1_DiscardedTxMessages_getv>
 800357c:	4602      	mov	r2, r0
 800357e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f001 fbc1 	bl	8004d0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003590:	e09d      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003592:	f001 f827 	bl	80045e4 <_Z23OD_CAN1_ErrorStatus_getv>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fbc7 	bl	8004d34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035ac:	e08f      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80035ae:	f001 f835 	bl	800461c <_Z29OD_CAN1_DelayedTxMessages_getv>
 80035b2:	4602      	mov	r2, r0
 80035b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fbcf 	bl	8004d5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035c6:	e082      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80035c8:	f001 f844 	bl	8004654 <_Z20OD_CAN2_TxErrCnt_getv>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fbd5 	bl	8004d86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035e2:	e074      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80035e4:	f001 f852 	bl	800468c <_Z20OD_CAN2_RxErrCnt_getv>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fbdc 	bl	8004db0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035fe:	e066      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8003600:	f001 f860 	bl	80046c4 <_Z25OD_CAN2_lastErrorCode_getv>
 8003604:	4602      	mov	r2, r0
 8003606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fbe4 	bl	8004dda <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003612:	2300      	movs	r3, #0
 8003614:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003618:	e059      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 800361a:	f001 f86f 	bl	80046fc <_Z26OD_CAN2_autoErrorReset_getv>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f001 fbea 	bl	8004e02 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800362e:	2300      	movs	r3, #0
 8003630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003634:	e04b      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003636:	f001 f899 	bl	800476c <_Z20OD_CAN2_Baudrate_getv>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fbf1 	bl	8004e2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003650:	e03d      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003652:	f001 f8c3 	bl	80047dc <_Z18OD_CAN2_Status_getv>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fbf8 	bl	8004e56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800366c:	e02f      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800366e:	f001 f8d1 	bl	8004814 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003672:	4602      	mov	r2, r0
 8003674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fc00 	bl	8004e80 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003686:	e022      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003688:	f001 f8e0 	bl	800484c <_Z23OD_CAN2_ErrorStatus_getv>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fc06 	bl	8004ea8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80036a2:	e014      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 80036a4:	f001 f8ee 	bl	8004884 <_Z29OD_CAN2_DelayedTxMessages_getv>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fc0e 	bl	8004ed2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80036bc:	e007      	b.n	80036ce <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fc17 	bl	8004efa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 80036cc:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 80036ce:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80036d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fc23 	bl	8004f24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80036e6:	2200      	movs	r2, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd f877 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <_Z31handleSDORequestDownloadBySDOIDt+0x690>)
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	f107 0108 	add.w	r1, r7, #8
 80036f6:	2300      	movs	r3, #0
 80036f8:	2200      	movs	r2, #0
 80036fa:	f008 f80d 	bl	800b718 <osMessageQueuePut>
}
 80036fe:	bf00      	nop
 8003700:	3748      	adds	r7, #72	; 0x48
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000564 	.word	0x20000564

0800370c <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	2208      	movs	r2, #8
 8003722:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8003726:	f7fe f985 	bl	8001a34 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800372e:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8003732:	4293      	cmp	r3, r2
 8003734:	d000      	beq.n	8003738 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003736:	e7fe      	b.n	8003736 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	6839      	ldr	r1, [r7, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	331c      	adds	r3, #28
 8003752:	461a      	mov	r2, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffd9 	bl	800370c <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b09c      	sub	sp, #112	; 0x70
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 800376c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ffe5 	bl	8003742 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fc6b 	bl	8003058 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800378c:	4618      	mov	r0, r3
 800378e:	f001 fbde 	bl	8004f4e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003792:	4603      	mov	r3, r0
 8003794:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 8003798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800379c:	2b21      	cmp	r3, #33	; 0x21
 800379e:	f300 810b 	bgt.w	80039b8 <_Z22handleSDORequestUploadRK9RxMessage+0x254>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f300 80be 	bgt.w	8003924 <_Z22handleSDORequestUploadRK9RxMessage+0x1c0>
 80037a8:	e382      	b.n	8003eb0 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80037aa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80037ae:	2b59      	cmp	r3, #89	; 0x59
 80037b0:	f200 837e 	bhi.w	8003eb0 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <_Z22handleSDORequestUploadRK9RxMessage+0x58>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	08003afb 	.word	0x08003afb
 80037c0:	08003b19 	.word	0x08003b19
 80037c4:	08003b33 	.word	0x08003b33
 80037c8:	08003b51 	.word	0x08003b51
 80037cc:	08003b6f 	.word	0x08003b6f
 80037d0:	08003b89 	.word	0x08003b89
 80037d4:	08003ba5 	.word	0x08003ba5
 80037d8:	08003eb1 	.word	0x08003eb1
 80037dc:	08003eb1 	.word	0x08003eb1
 80037e0:	08003eb1 	.word	0x08003eb1
 80037e4:	08003eb1 	.word	0x08003eb1
 80037e8:	08003eb1 	.word	0x08003eb1
 80037ec:	08003eb1 	.word	0x08003eb1
 80037f0:	08003eb1 	.word	0x08003eb1
 80037f4:	08003eb1 	.word	0x08003eb1
 80037f8:	08003eb1 	.word	0x08003eb1
 80037fc:	08003bc1 	.word	0x08003bc1
 8003800:	08003bdb 	.word	0x08003bdb
 8003804:	08003eb1 	.word	0x08003eb1
 8003808:	08003eb1 	.word	0x08003eb1
 800380c:	08003eb1 	.word	0x08003eb1
 8003810:	08003eb1 	.word	0x08003eb1
 8003814:	08003eb1 	.word	0x08003eb1
 8003818:	08003eb1 	.word	0x08003eb1
 800381c:	08003eb1 	.word	0x08003eb1
 8003820:	08003eb1 	.word	0x08003eb1
 8003824:	08003eb1 	.word	0x08003eb1
 8003828:	08003eb1 	.word	0x08003eb1
 800382c:	08003eb1 	.word	0x08003eb1
 8003830:	08003eb1 	.word	0x08003eb1
 8003834:	08003eb1 	.word	0x08003eb1
 8003838:	08003eb1 	.word	0x08003eb1
 800383c:	08003bf5 	.word	0x08003bf5
 8003840:	08003c0f 	.word	0x08003c0f
 8003844:	08003eb1 	.word	0x08003eb1
 8003848:	08003eb1 	.word	0x08003eb1
 800384c:	08003eb1 	.word	0x08003eb1
 8003850:	08003eb1 	.word	0x08003eb1
 8003854:	08003eb1 	.word	0x08003eb1
 8003858:	08003eb1 	.word	0x08003eb1
 800385c:	08003eb1 	.word	0x08003eb1
 8003860:	08003eb1 	.word	0x08003eb1
 8003864:	08003eb1 	.word	0x08003eb1
 8003868:	08003eb1 	.word	0x08003eb1
 800386c:	08003eb1 	.word	0x08003eb1
 8003870:	08003eb1 	.word	0x08003eb1
 8003874:	08003eb1 	.word	0x08003eb1
 8003878:	08003eb1 	.word	0x08003eb1
 800387c:	08003eb1 	.word	0x08003eb1
 8003880:	08003eb1 	.word	0x08003eb1
 8003884:	08003eb1 	.word	0x08003eb1
 8003888:	08003eb1 	.word	0x08003eb1
 800388c:	08003eb1 	.word	0x08003eb1
 8003890:	08003eb1 	.word	0x08003eb1
 8003894:	08003eb1 	.word	0x08003eb1
 8003898:	08003eb1 	.word	0x08003eb1
 800389c:	08003eb1 	.word	0x08003eb1
 80038a0:	08003eb1 	.word	0x08003eb1
 80038a4:	08003eb1 	.word	0x08003eb1
 80038a8:	08003eb1 	.word	0x08003eb1
 80038ac:	08003eb1 	.word	0x08003eb1
 80038b0:	08003eb1 	.word	0x08003eb1
 80038b4:	08003eb1 	.word	0x08003eb1
 80038b8:	08003eb1 	.word	0x08003eb1
 80038bc:	08003c29 	.word	0x08003c29
 80038c0:	08003c45 	.word	0x08003c45
 80038c4:	08003c61 	.word	0x08003c61
 80038c8:	08003c7b 	.word	0x08003c7b
 80038cc:	08003cb1 	.word	0x08003cb1
 80038d0:	08003eb1 	.word	0x08003eb1
 80038d4:	08003d01 	.word	0x08003d01
 80038d8:	08003d1d 	.word	0x08003d1d
 80038dc:	08003d37 	.word	0x08003d37
 80038e0:	08003d53 	.word	0x08003d53
 80038e4:	08003eb1 	.word	0x08003eb1
 80038e8:	08003eb1 	.word	0x08003eb1
 80038ec:	08003eb1 	.word	0x08003eb1
 80038f0:	08003eb1 	.word	0x08003eb1
 80038f4:	08003eb1 	.word	0x08003eb1
 80038f8:	08003eb1 	.word	0x08003eb1
 80038fc:	08003d6d 	.word	0x08003d6d
 8003900:	08003d89 	.word	0x08003d89
 8003904:	08003da5 	.word	0x08003da5
 8003908:	08003dbf 	.word	0x08003dbf
 800390c:	08003df5 	.word	0x08003df5
 8003910:	08003eb1 	.word	0x08003eb1
 8003914:	08003e45 	.word	0x08003e45
 8003918:	08003e61 	.word	0x08003e61
 800391c:	08003e7b 	.word	0x08003e7b
 8003920:	08003e97 	.word	0x08003e97
 8003924:	3b01      	subs	r3, #1
 8003926:	2b20      	cmp	r3, #32
 8003928:	f200 82c2 	bhi.w	8003eb0 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <_Z22handleSDORequestUploadRK9RxMessage+0x1d0>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	080039cd 	.word	0x080039cd
 8003938:	080039e9 	.word	0x080039e9
 800393c:	08003a05 	.word	0x08003a05
 8003940:	08003a21 	.word	0x08003a21
 8003944:	08003a3d 	.word	0x08003a3d
 8003948:	08003eb1 	.word	0x08003eb1
 800394c:	08003eb1 	.word	0x08003eb1
 8003950:	08003eb1 	.word	0x08003eb1
 8003954:	08003eb1 	.word	0x08003eb1
 8003958:	08003eb1 	.word	0x08003eb1
 800395c:	08003eb1 	.word	0x08003eb1
 8003960:	08003eb1 	.word	0x08003eb1
 8003964:	08003eb1 	.word	0x08003eb1
 8003968:	08003eb1 	.word	0x08003eb1
 800396c:	08003eb1 	.word	0x08003eb1
 8003970:	08003a59 	.word	0x08003a59
 8003974:	08003eb1 	.word	0x08003eb1
 8003978:	08003eb1 	.word	0x08003eb1
 800397c:	08003eb1 	.word	0x08003eb1
 8003980:	08003eb1 	.word	0x08003eb1
 8003984:	08003eb1 	.word	0x08003eb1
 8003988:	08003eb1 	.word	0x08003eb1
 800398c:	08003eb1 	.word	0x08003eb1
 8003990:	08003eb1 	.word	0x08003eb1
 8003994:	08003eb1 	.word	0x08003eb1
 8003998:	08003eb1 	.word	0x08003eb1
 800399c:	08003eb1 	.word	0x08003eb1
 80039a0:	08003eb1 	.word	0x08003eb1
 80039a4:	08003eb1 	.word	0x08003eb1
 80039a8:	08003eb1 	.word	0x08003eb1
 80039ac:	08003eb1 	.word	0x08003eb1
 80039b0:	08003a8f 	.word	0x08003a8f
 80039b4:	08003ac5 	.word	0x08003ac5
 80039b8:	f240 4269 	movw	r2, #1129	; 0x469
 80039bc:	4293      	cmp	r3, r2
 80039be:	f300 8277 	bgt.w	8003eb0 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80039c2:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80039c6:	f6bf aef0 	bge.w	80037aa <_Z22handleSDORequestUploadRK9RxMessage+0x46>
 80039ca:	e271      	b.n	8003eb0 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 80039d2:	f000 fa95 	bl	8003f00 <_Z13OD_NodeID_getv>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039de:	4611      	mov	r1, r2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 ff7d 	bl	80048e0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 80039e6:	e26c      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 80039ee:	f000 faa3 	bl	8003f38 <_Z17OD_NodeStatus_getv>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 ff84 	bl	800490a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 8003a02:	e25e      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003a0a:	f000 fab1 	bl	8003f70 <_Z22OD_ProtocolVersion_getv>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 ff8b 	bl	8004934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8003a1e:	e250      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003a26:	f000 fabf 	bl	8003fa8 <_Z19OD_StackVersion_getv>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 ff92 	bl	800495e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8003a3a:	e242      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003a42:	f000 facd 	bl	8003fe0 <_Z17OD_DbcVersion_getv>
 8003a46:	4603      	mov	r3, r0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 ff99 	bl	8004988 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8003a56:	e234      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 8003a58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 fa88 	bl	8004f72 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8003a68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 faef 	bl	8004050 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003a78:	f000 face 	bl	8004018 <_Z24OD_HeartbeatInterval_getv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 ff93 	bl	80049b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8003a8c:	e219      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 8003a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fa7f 	bl	8004f96 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8003a9e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fb0c 	bl	80040c0 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003aae:	f000 faeb 	bl	8004088 <_Z21OD_SendOdOnBootup_getv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ff8d 	bl	80049dc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8003ac2:	e1fe      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8003ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fa76 	bl	8004fba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8003ad4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fb29 	bl	8004130 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003ae4:	f000 fb08 	bl	80040f8 <_Z26OD_OdEntrySendInterval_getv>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	461a      	mov	r2, r3
 8003aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 ff87 	bl	8004a06 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8003af8:	e1e3      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003b00:	f000 fb32 	bl	8004168 <_Z15OD_CpuUsage_getv>
 8003b04:	eef0 7a40 	vmov.f32	s15, s0
 8003b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 ff8d 	bl	8004a30 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8003b16:	e1d4      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003b1e:	f000 fb41 	bl	80041a4 <_Z14OD_MemFree_getv>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 ff97 	bl	8004a5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8003b30:	e1c7      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003b38:	f000 fb50 	bl	80041dc <_Z16OD_BoardTemp_getv>
 8003b3c:	eef0 7a40 	vmov.f32	s15, s0
 8003b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b44:	eeb0 0a67 	vmov.f32	s0, s15
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 ff9c 	bl	8004a86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8003b4e:	e1b8      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003b56:	f000 fb5f 	bl	8004218 <_Z19OD_InputVoltage_getv>
 8003b5a:	eef0 7a40 	vmov.f32	s15, s0
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	eeb0 0a67 	vmov.f32	s0, s15
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ffa4 	bl	8004ab4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8003b6c:	e1a9      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003b74:	f000 fb6e 	bl	8004254 <_Z14OD_runtime_getv>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 ffae 	bl	8004ae2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8003b86:	e19c      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003b8e:	f000 fb7d 	bl	800428c <_Z12OD_SdcIn_getv>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 ffb4 	bl	8004b0a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8003ba2:	e18e      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003baa:	f000 fb8b 	bl	80042c4 <_Z13OD_SdcOut_getv>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 ffbb 	bl	8004b34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8003bbe:	e180      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003bc6:	f000 fb99 	bl	80042fc <_Z15OD_ChipUID1_getv>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003bd2:	4608      	mov	r0, r1
 8003bd4:	f000 ffc3 	bl	8004b5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8003bd8:	e173      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003be0:	f000 fbac 	bl	800433c <_Z15OD_ChipUID2_getv>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003bec:	4608      	mov	r0, r1
 8003bee:	f000 ffcf 	bl	8004b90 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8003bf2:	e166      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003bfa:	f000 fbbf 	bl	800437c <_Z16OD_BuildDate_getv>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c04:	4611      	mov	r1, r2
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 ffdb 	bl	8004bc2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8003c0c:	e159      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003c14:	f000 fbce 	bl	80043b4 <_Z16OD_BuildTime_getv>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 ffe2 	bl	8004bea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8003c26:	e14c      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003c2e:	f000 fbdd 	bl	80043ec <_Z20OD_CAN1_TxErrCnt_getv>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 ffe8 	bl	8004c12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8003c42:	e13e      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003c4a:	f000 fbeb 	bl	8004424 <_Z20OD_CAN1_RxErrCnt_getv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 ffef 	bl	8004c3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8003c5e:	e130      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003c66:	f000 fbf9 	bl	800445c <_Z25OD_CAN1_lastErrorCode_getv>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fff7 	bl	8004c66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8003c78:	e123      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 8003c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f9ad 	bl	8004fde <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8003c8a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc1c 	bl	80044cc <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003c9a:	f000 fbfb 	bl	8004494 <_Z26OD_CAN1_autoErrorReset_getv>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fff0 	bl	8004c8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8003cae:	e108      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8003cb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 f9a4 	bl	8005002 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8003cc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cc4:	2b7c      	cmp	r3, #124	; 0x7c
 8003cc6:	d904      	bls.n	8003cd2 <_Z22handleSDORequestUploadRK9RxMessage+0x56e>
 8003cc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd0:	d903      	bls.n	8003cda <_Z22handleSDORequestUploadRK9RxMessage+0x576>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003cd2:	2305      	movs	r3, #5
 8003cd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003cd8:	e007      	b.n	8003cea <_Z22handleSDORequestUploadRK9RxMessage+0x586>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8003cda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fc2c 	bl	800453c <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003cea:	f000 fc0b 	bl	8004504 <_Z20OD_CAN1_Baudrate_getv>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 ffdd 	bl	8004cb8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8003cfe:	e0e0      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003d06:	f000 fc35 	bl	8004574 <_Z18OD_CAN1_Status_getv>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 ffe4 	bl	8004ce2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8003d1a:	e0d2      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003d22:	f000 fc43 	bl	80045ac <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 ffec 	bl	8004d0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003d34:	e0c5      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003d3c:	f000 fc52 	bl	80045e4 <_Z23OD_CAN1_ErrorStatus_getv>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fff2 	bl	8004d34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8003d50:	e0b7      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003d58:	f000 fc60 	bl	800461c <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fffa 	bl	8004d5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003d6a:	e0aa      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8003d72:	f000 fc6f 	bl	8004654 <_Z20OD_CAN2_TxErrCnt_getv>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f800 	bl	8004d86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8003d86:	e09c      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003d8e:	f000 fc7d 	bl	800468c <_Z20OD_CAN2_RxErrCnt_getv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f807 	bl	8004db0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8003da2:	e08e      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8003daa:	f000 fc8b 	bl	80046c4 <_Z25OD_CAN2_lastErrorCode_getv>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f80f 	bl	8004dda <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8003dbc:	e081      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 8003dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f92f 	bl	8005026 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8003dce:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fcae 	bl	8004734 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003dde:	f000 fc8d 	bl	80046fc <_Z26OD_CAN2_autoErrorReset_getv>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f808 	bl	8004e02 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8003df2:	e066      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 8003df4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f926 	bl	800504a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8003e04:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003e08:	2b7c      	cmp	r3, #124	; 0x7c
 8003e0a:	d904      	bls.n	8003e16 <_Z22handleSDORequestUploadRK9RxMessage+0x6b2>
 8003e0c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e14:	d903      	bls.n	8003e1e <_Z22handleSDORequestUploadRK9RxMessage+0x6ba>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003e16:	2305      	movs	r3, #5
 8003e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003e1c:	e007      	b.n	8003e2e <_Z22handleSDORequestUploadRK9RxMessage+0x6ca>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8003e1e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fcbe 	bl	80047a4 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003e2e:	f000 fc9d 	bl	800476c <_Z20OD_CAN2_Baudrate_getv>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fff5 	bl	8004e2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8003e42:	e03e      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003e4a:	f000 fcc7 	bl	80047dc <_Z18OD_CAN2_Status_getv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fffc 	bl	8004e56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8003e5e:	e030      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8003e66:	f000 fcd5 	bl	8004814 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 f804 	bl	8004e80 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003e78:	e023      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003e80:	f000 fce4 	bl	800484c <_Z23OD_CAN2_ErrorStatus_getv>
 8003e84:	4603      	mov	r3, r0
 8003e86:	461a      	mov	r2, r3
 8003e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f80a 	bl	8004ea8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8003e94:	e015      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003e9c:	f000 fcf2 	bl	8004884 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 f812 	bl	8004ed2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8003eae:	e008      	b.n	8003ec2 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003eb0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f81d 	bl	8004efa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003ec0:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003ec2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f829 	bl	8004f24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003eda:	2200      	movs	r2, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fc fc7d 	bl	80007dc <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <_Z22handleSDORequestUploadRK9RxMessage+0x798>)
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f107 0108 	add.w	r1, r7, #8
 8003eea:	2300      	movs	r3, #0
 8003eec:	2200      	movs	r2, #0
 8003eee:	f007 fc13 	bl	800b718 <osMessageQueuePut>
}
 8003ef2:	bf00      	nop
 8003ef4:	3770      	adds	r7, #112	; 0x70
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000564 	.word	0x20000564

08003f00 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <_Z13OD_NodeID_getv+0x30>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f007 fb07 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_Z13OD_NodeID_getv+0x34>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <_Z13OD_NodeID_getv+0x30>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f007 fb4a 	bl	800b5b8 <osMutexRelease>
    return value;
 8003f24:	79fb      	ldrb	r3, [r7, #7]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200005d8 	.word	0x200005d8
 8003f34:	2000056d 	.word	0x2000056d

08003f38 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <_Z17OD_NodeStatus_getv+0x30>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 31ff 	mov.w	r1, #4294967295
 8003f46:	4618      	mov	r0, r3
 8003f48:	f007 faeb 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <_Z17OD_NodeStatus_getv+0x34>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <_Z17OD_NodeStatus_getv+0x30>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f007 fb2e 	bl	800b5b8 <osMutexRelease>
    return value;
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200005dc 	.word	0x200005dc
 8003f6c:	2000056e 	.word	0x2000056e

08003f70 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <_Z22OD_ProtocolVersion_getv+0x30>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f007 facf 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <_Z22OD_ProtocolVersion_getv+0x34>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <_Z22OD_ProtocolVersion_getv+0x30>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f007 fb12 	bl	800b5b8 <osMutexRelease>
    return value;
 8003f94:	88fb      	ldrh	r3, [r7, #6]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200005e0 	.word	0x200005e0
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <_Z19OD_StackVersion_getv+0x30>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f007 fab3 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <_Z19OD_StackVersion_getv+0x34>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <_Z19OD_StackVersion_getv+0x30>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f007 faf6 	bl	800b5b8 <osMutexRelease>
    return value;
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200005e4 	.word	0x200005e4
 8003fdc:	20000570 	.word	0x20000570

08003fe0 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <_Z17OD_DbcVersion_getv+0x30>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f04f 31ff 	mov.w	r1, #4294967295
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f007 fa97 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <_Z17OD_DbcVersion_getv+0x34>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <_Z17OD_DbcVersion_getv+0x30>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f007 fada 	bl	800b5b8 <osMutexRelease>
    return value;
 8004004:	88fb      	ldrh	r3, [r7, #6]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200005e8 	.word	0x200005e8
 8004014:	20000572 	.word	0x20000572

08004018 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f04f 31ff 	mov.w	r1, #4294967295
 8004026:	4618      	mov	r0, r3
 8004028:	f007 fa7b 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <_Z24OD_HeartbeatInterval_getv+0x34>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f007 fabe 	bl	800b5b8 <osMutexRelease>
    return value;
 800403c:	88fb      	ldrh	r3, [r7, #6]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200005ec 	.word	0x200005ec
 800404c:	20000002 	.word	0x20000002

08004050 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <_Z24OD_HeartbeatInterval_sett+0x30>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f04f 31ff 	mov.w	r1, #4294967295
 8004062:	4618      	mov	r0, r3
 8004064:	f007 fa5d 	bl	800b522 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <_Z24OD_HeartbeatInterval_sett+0x34>)
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800406e:	4b04      	ldr	r3, [pc, #16]	; (8004080 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f007 faa0 	bl	800b5b8 <osMutexRelease>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200005ec 	.word	0x200005ec
 8004084:	20000002 	.word	0x20000002

08004088 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f04f 31ff 	mov.w	r1, #4294967295
 8004096:	4618      	mov	r0, r3
 8004098:	f007 fa43 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <_Z21OD_SendOdOnBootup_getv+0x34>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80040a2:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f007 fa86 	bl	800b5b8 <osMutexRelease>
    return value;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200005f0 	.word	0x200005f0
 80040bc:	20000574 	.word	0x20000574

080040c0 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f04f 31ff 	mov.w	r1, #4294967295
 80040d2:	4618      	mov	r0, r3
 80040d4:	f007 fa25 	bl	800b522 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 80040d8:	4a06      	ldr	r2, [pc, #24]	; (80040f4 <_Z21OD_SendOdOnBootup_seth+0x34>)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f007 fa68 	bl	800b5b8 <osMutexRelease>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	200005f0 	.word	0x200005f0
 80040f4:	20000574 	.word	0x20000574

080040f8 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f04f 31ff 	mov.w	r1, #4294967295
 8004106:	4618      	mov	r0, r3
 8004108:	f007 fa0b 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <_Z26OD_OdEntrySendInterval_getv+0x34>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f007 fa4e 	bl	800b5b8 <osMutexRelease>
    return value;
 800411c:	88fb      	ldrh	r3, [r7, #6]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200005f4 	.word	0x200005f4
 800412c:	20000004 	.word	0x20000004

08004130 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f04f 31ff 	mov.w	r1, #4294967295
 8004142:	4618      	mov	r0, r3
 8004144:	f007 f9ed 	bl	800b522 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004148:	4a06      	ldr	r2, [pc, #24]	; (8004164 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f007 fa30 	bl	800b5b8 <osMutexRelease>
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	200005f4 	.word	0x200005f4
 8004164:	20000004 	.word	0x20000004

08004168 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <_Z15OD_CpuUsage_getv+0x34>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f04f 31ff 	mov.w	r1, #4294967295
 8004176:	4618      	mov	r0, r3
 8004178:	f007 f9d3 	bl	800b522 <osMutexAcquire>
    float value = OD_CpuUsage;
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <_Z15OD_CpuUsage_getv+0x38>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <_Z15OD_CpuUsage_getv+0x34>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f007 fa16 	bl	800b5b8 <osMutexRelease>
    return value;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	ee07 3a90 	vmov	s15, r3
}
 8004192:	eeb0 0a67 	vmov.f32	s0, s15
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	200005f8 	.word	0x200005f8
 80041a0:	20000578 	.word	0x20000578

080041a4 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <_Z14OD_MemFree_getv+0x30>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f04f 31ff 	mov.w	r1, #4294967295
 80041b2:	4618      	mov	r0, r3
 80041b4:	f007 f9b5 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <_Z14OD_MemFree_getv+0x34>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_Z14OD_MemFree_getv+0x30>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f007 f9f8 	bl	800b5b8 <osMutexRelease>
    return value;
 80041c8:	687b      	ldr	r3, [r7, #4]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200005fc 	.word	0x200005fc
 80041d8:	2000057c 	.word	0x2000057c

080041dc <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <_Z16OD_BoardTemp_getv+0x34>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f04f 31ff 	mov.w	r1, #4294967295
 80041ea:	4618      	mov	r0, r3
 80041ec:	f007 f999 	bl	800b522 <osMutexAcquire>
    float value = OD_BoardTemp;
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <_Z16OD_BoardTemp_getv+0x38>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <_Z16OD_BoardTemp_getv+0x34>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f007 f9dc 	bl	800b5b8 <osMutexRelease>
    return value;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	ee07 3a90 	vmov	s15, r3
}
 8004206:	eeb0 0a67 	vmov.f32	s0, s15
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000600 	.word	0x20000600
 8004214:	20000580 	.word	0x20000580

08004218 <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <_Z19OD_InputVoltage_getv+0x34>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f04f 31ff 	mov.w	r1, #4294967295
 8004226:	4618      	mov	r0, r3
 8004228:	f007 f97b 	bl	800b522 <osMutexAcquire>
    float value = OD_InputVoltage;
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <_Z19OD_InputVoltage_getv+0x38>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <_Z19OD_InputVoltage_getv+0x34>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f007 f9be 	bl	800b5b8 <osMutexRelease>
    return value;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	ee07 3a90 	vmov	s15, r3
}
 8004242:	eeb0 0a67 	vmov.f32	s0, s15
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000604 	.word	0x20000604
 8004250:	20000584 	.word	0x20000584

08004254 <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <_Z14OD_runtime_getv+0x30>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f04f 31ff 	mov.w	r1, #4294967295
 8004262:	4618      	mov	r0, r3
 8004264:	f007 f95d 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <_Z14OD_runtime_getv+0x34>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <_Z14OD_runtime_getv+0x30>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f007 f9a0 	bl	800b5b8 <osMutexRelease>
    return value;
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000608 	.word	0x20000608
 8004288:	20000588 	.word	0x20000588

0800428c <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <_Z12OD_SdcIn_getv+0x30>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f04f 31ff 	mov.w	r1, #4294967295
 800429a:	4618      	mov	r0, r3
 800429c:	f007 f941 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <_Z12OD_SdcIn_getv+0x34>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <_Z12OD_SdcIn_getv+0x30>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f007 f984 	bl	800b5b8 <osMutexRelease>
    return value;
 80042b0:	79fb      	ldrb	r3, [r7, #7]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2000060c 	.word	0x2000060c
 80042c0:	2000058c 	.word	0x2000058c

080042c4 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 80042ca:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <_Z13OD_SdcOut_getv+0x30>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f04f 31ff 	mov.w	r1, #4294967295
 80042d2:	4618      	mov	r0, r3
 80042d4:	f007 f925 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <_Z13OD_SdcOut_getv+0x34>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_Z13OD_SdcOut_getv+0x30>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f007 f968 	bl	800b5b8 <osMutexRelease>
    return value;
 80042e8:	79fb      	ldrb	r3, [r7, #7]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000610 	.word	0x20000610
 80042f8:	2000058d 	.word	0x2000058d

080042fc <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <_Z15OD_ChipUID1_getv+0x38>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f04f 31ff 	mov.w	r1, #4294967295
 800430a:	4618      	mov	r0, r3
 800430c:	f007 f909 	bl	800b522 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8004310:	4b09      	ldr	r3, [pc, #36]	; (8004338 <_Z15OD_ChipUID1_getv+0x3c>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <_Z15OD_ChipUID1_getv+0x38>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f007 f94a 	bl	800b5b8 <osMutexRelease>
    return value;
 8004324:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000614 	.word	0x20000614
 8004338:	20000590 	.word	0x20000590

0800433c <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <_Z15OD_ChipUID2_getv+0x38>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f04f 31ff 	mov.w	r1, #4294967295
 800434a:	4618      	mov	r0, r3
 800434c:	f007 f8e9 	bl	800b522 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <_Z15OD_ChipUID2_getv+0x3c>)
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <_Z15OD_ChipUID2_getv+0x38>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f007 f92a 	bl	800b5b8 <osMutexRelease>
    return value;
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000618 	.word	0x20000618
 8004378:	20000598 	.word	0x20000598

0800437c <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <_Z16OD_BuildDate_getv+0x30>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f04f 31ff 	mov.w	r1, #4294967295
 800438a:	4618      	mov	r0, r3
 800438c:	f007 f8c9 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8004390:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <_Z16OD_BuildDate_getv+0x34>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <_Z16OD_BuildDate_getv+0x30>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f007 f90c 	bl	800b5b8 <osMutexRelease>
    return value;
 80043a0:	687b      	ldr	r3, [r7, #4]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000061c 	.word	0x2000061c
 80043b0:	200005a0 	.word	0x200005a0

080043b4 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80043ba:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <_Z16OD_BuildTime_getv+0x30>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f04f 31ff 	mov.w	r1, #4294967295
 80043c2:	4618      	mov	r0, r3
 80043c4:	f007 f8ad 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <_Z16OD_BuildTime_getv+0x34>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <_Z16OD_BuildTime_getv+0x30>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f007 f8f0 	bl	800b5b8 <osMutexRelease>
    return value;
 80043d8:	687b      	ldr	r3, [r7, #4]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000620 	.word	0x20000620
 80043e8:	200005a4 	.word	0x200005a4

080043ec <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 80043f2:	4b0a      	ldr	r3, [pc, #40]	; (800441c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f04f 31ff 	mov.w	r1, #4294967295
 80043fa:	4618      	mov	r0, r3
 80043fc:	f007 f891 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f007 f8d4 	bl	800b5b8 <osMutexRelease>
    return value;
 8004410:	79fb      	ldrb	r3, [r7, #7]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000624 	.word	0x20000624
 8004420:	200005a8 	.word	0x200005a8

08004424 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f04f 31ff 	mov.w	r1, #4294967295
 8004432:	4618      	mov	r0, r3
 8004434:	f007 f875 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f007 f8b8 	bl	800b5b8 <osMutexRelease>
    return value;
 8004448:	79fb      	ldrb	r3, [r7, #7]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000628 	.word	0x20000628
 8004458:	200005a9 	.word	0x200005a9

0800445c <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f04f 31ff 	mov.w	r1, #4294967295
 800446a:	4618      	mov	r0, r3
 800446c:	f007 f859 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f007 f89c 	bl	800b5b8 <osMutexRelease>
    return value;
 8004480:	687b      	ldr	r3, [r7, #4]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000062c 	.word	0x2000062c
 8004490:	200005ac 	.word	0x200005ac

08004494 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f04f 31ff 	mov.w	r1, #4294967295
 80044a2:	4618      	mov	r0, r3
 80044a4:	f007 f83d 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 f880 	bl	800b5b8 <osMutexRelease>
    return value;
 80044b8:	79fb      	ldrb	r3, [r7, #7]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000630 	.word	0x20000630
 80044c8:	20000006 	.word	0x20000006

080044cc <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f04f 31ff 	mov.w	r1, #4294967295
 80044de:	4618      	mov	r0, r3
 80044e0:	f007 f81f 	bl	800b522 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 80044e4:	4a06      	ldr	r2, [pc, #24]	; (8004500 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f007 f862 	bl	800b5b8 <osMutexRelease>
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000630 	.word	0x20000630
 8004500:	20000006 	.word	0x20000006

08004504 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f04f 31ff 	mov.w	r1, #4294967295
 8004512:	4618      	mov	r0, r3
 8004514:	f007 f805 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f007 f848 	bl	800b5b8 <osMutexRelease>
    return value;
 8004528:	88fb      	ldrh	r3, [r7, #6]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000634 	.word	0x20000634
 8004538:	20000008 	.word	0x20000008

0800453c <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 31ff 	mov.w	r1, #4294967295
 800454e:	4618      	mov	r0, r3
 8004550:	f006 ffe7 	bl	800b522 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <_Z20OD_CAN1_Baudrate_sett+0x30>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f007 f82a 	bl	800b5b8 <osMutexRelease>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000634 	.word	0x20000634
 8004570:	20000008 	.word	0x20000008

08004574 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <_Z18OD_CAN1_Status_getv+0x30>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f04f 31ff 	mov.w	r1, #4294967295
 8004582:	4618      	mov	r0, r3
 8004584:	f006 ffcd 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <_Z18OD_CAN1_Status_getv+0x34>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <_Z18OD_CAN1_Status_getv+0x30>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f007 f810 	bl	800b5b8 <osMutexRelease>
    return value;
 8004598:	79fb      	ldrb	r3, [r7, #7]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000638 	.word	0x20000638
 80045a8:	200005b0 	.word	0x200005b0

080045ac <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 ffb1 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f006 fff4 	bl	800b5b8 <osMutexRelease>
    return value;
 80045d0:	687b      	ldr	r3, [r7, #4]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	2000063c 	.word	0x2000063c
 80045e0:	200005b4 	.word	0x200005b4

080045e4 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f04f 31ff 	mov.w	r1, #4294967295
 80045f2:	4618      	mov	r0, r3
 80045f4:	f006 ff95 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f006 ffd8 	bl	800b5b8 <osMutexRelease>
    return value;
 8004608:	79fb      	ldrb	r3, [r7, #7]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000640 	.word	0x20000640
 8004618:	200005b8 	.word	0x200005b8

0800461c <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f04f 31ff 	mov.w	r1, #4294967295
 800462a:	4618      	mov	r0, r3
 800462c:	f006 ff79 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f006 ffbc 	bl	800b5b8 <osMutexRelease>
    return value;
 8004640:	687b      	ldr	r3, [r7, #4]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000644 	.word	0x20000644
 8004650:	200005bc 	.word	0x200005bc

08004654 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f04f 31ff 	mov.w	r1, #4294967295
 8004662:	4618      	mov	r0, r3
 8004664:	f006 ff5d 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f006 ffa0 	bl	800b5b8 <osMutexRelease>
    return value;
 8004678:	79fb      	ldrb	r3, [r7, #7]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000648 	.word	0x20000648
 8004688:	200005c0 	.word	0x200005c0

0800468c <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f04f 31ff 	mov.w	r1, #4294967295
 800469a:	4618      	mov	r0, r3
 800469c:	f006 ff41 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f006 ff84 	bl	800b5b8 <osMutexRelease>
    return value;
 80046b0:	79fb      	ldrb	r3, [r7, #7]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000064c 	.word	0x2000064c
 80046c0:	200005c1 	.word	0x200005c1

080046c4 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f04f 31ff 	mov.w	r1, #4294967295
 80046d2:	4618      	mov	r0, r3
 80046d4:	f006 ff25 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f006 ff68 	bl	800b5b8 <osMutexRelease>
    return value;
 80046e8:	687b      	ldr	r3, [r7, #4]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000650 	.word	0x20000650
 80046f8:	200005c4 	.word	0x200005c4

080046fc <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f04f 31ff 	mov.w	r1, #4294967295
 800470a:	4618      	mov	r0, r3
 800470c:	f006 ff09 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8004710:	4b07      	ldr	r3, [pc, #28]	; (8004730 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f006 ff4c 	bl	800b5b8 <osMutexRelease>
    return value;
 8004720:	79fb      	ldrb	r3, [r7, #7]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000654 	.word	0x20000654
 8004730:	2000000a 	.word	0x2000000a

08004734 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f04f 31ff 	mov.w	r1, #4294967295
 8004746:	4618      	mov	r0, r3
 8004748:	f006 feeb 	bl	800b522 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 800474c:	4a06      	ldr	r2, [pc, #24]	; (8004768 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004752:	4b04      	ldr	r3, [pc, #16]	; (8004764 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f006 ff2e 	bl	800b5b8 <osMutexRelease>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000654 	.word	0x20000654
 8004768:	2000000a 	.word	0x2000000a

0800476c <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f04f 31ff 	mov.w	r1, #4294967295
 800477a:	4618      	mov	r0, r3
 800477c:	f006 fed1 	bl	800b522 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f006 ff14 	bl	800b5b8 <osMutexRelease>
    return value;
 8004790:	88fb      	ldrh	r3, [r7, #6]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000658 	.word	0x20000658
 80047a0:	2000000c 	.word	0x2000000c

080047a4 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f04f 31ff 	mov.w	r1, #4294967295
 80047b6:	4618      	mov	r0, r3
 80047b8:	f006 feb3 	bl	800b522 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 80047bc:	4a06      	ldr	r2, [pc, #24]	; (80047d8 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f006 fef6 	bl	800b5b8 <osMutexRelease>
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000658 	.word	0x20000658
 80047d8:	2000000c 	.word	0x2000000c

080047dc <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <_Z18OD_CAN2_Status_getv+0x30>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f04f 31ff 	mov.w	r1, #4294967295
 80047ea:	4618      	mov	r0, r3
 80047ec:	f006 fe99 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <_Z18OD_CAN2_Status_getv+0x34>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <_Z18OD_CAN2_Status_getv+0x30>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f006 fedc 	bl	800b5b8 <osMutexRelease>
    return value;
 8004800:	79fb      	ldrb	r3, [r7, #7]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000065c 	.word	0x2000065c
 8004810:	200005c8 	.word	0x200005c8

08004814 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f04f 31ff 	mov.w	r1, #4294967295
 8004822:	4618      	mov	r0, r3
 8004824:	f006 fe7d 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f006 fec0 	bl	800b5b8 <osMutexRelease>
    return value;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000660 	.word	0x20000660
 8004848:	200005cc 	.word	0x200005cc

0800484c <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f04f 31ff 	mov.w	r1, #4294967295
 800485a:	4618      	mov	r0, r3
 800485c:	f006 fe61 	bl	800b522 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f006 fea4 	bl	800b5b8 <osMutexRelease>
    return value;
 8004870:	79fb      	ldrb	r3, [r7, #7]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000664 	.word	0x20000664
 8004880:	200005d0 	.word	0x200005d0

08004884 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f04f 31ff 	mov.w	r1, #4294967295
 8004892:	4618      	mov	r0, r3
 8004894:	f006 fe45 	bl	800b522 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f006 fe88 	bl	800b5b8 <osMutexRelease>
    return value;
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000668 	.word	0x20000668
 80048b8:	200005d4 	.word	0x200005d4

080048bc <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f103 0208 	add.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3310      	adds	r3, #16
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fd fa09 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80048d6:	4603      	mov	r3, r0
        }
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 0008 	add.w	r0, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f103 0110 	add.w	r1, r3, #16
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1d1a      	adds	r2, r3, #4
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	f7fe fb33 	bl	8002f68 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800490a:	b580      	push	{r7, lr}
 800490c:	b082      	sub	sp, #8
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 0008 	add.w	r0, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f103 0110 	add.w	r1, r3, #16
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f7fe faeb 	bl	8002f02 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f103 0008 	add.w	r0, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f103 0110 	add.w	r1, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	f7fe faa8 	bl	8002ea6 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f103 0008 	add.w	r0, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f103 0110 	add.w	r1, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	f7fe fa65 	bl	8002e4a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f103 0008 	add.w	r0, r3, #8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f103 0110 	add.w	r1, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	f7fe fa22 	bl	8002dee <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f103 0008 	add.w	r0, r3, #8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f103 0110 	add.w	r1, r3, #16
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	1d1a      	adds	r2, r3, #4
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	f7fe f9bb 	bl	8002d4a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 0008 	add.w	r0, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f103 0110 	add.w	r1, r3, #16
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f7fe f94f 	bl	8002c9c <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f103 0008 	add.w	r0, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f103 0110 	add.w	r1, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	887b      	ldrh	r3, [r7, #2]
 8004a24:	f7fe f8e8 	bl	8002bf8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f103 0008 	add.w	r0, r3, #8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 0110 	add.w	r1, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	ed97 0a00 	vldr	s0, [r7]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f7fe f873 	bl	8002b3c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f103 0008 	add.w	r0, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f103 0110 	add.w	r1, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1d1a      	adds	r2, r3, #4
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f7fe f827 	bl	8002acc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f103 0008 	add.w	r0, r3, #8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f103 0110 	add.w	r1, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	ed97 0a00 	vldr	s0, [r7]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7fd ffae 	bl	8002a08 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f103 0008 	add.w	r0, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f103 0110 	add.w	r1, r3, #16
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	ed97 0a00 	vldr	s0, [r7]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f7fd ff3d 	bl	8002954 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f103 0008 	add.w	r0, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f103 0110 	add.w	r1, r3, #16
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	1d1a      	adds	r2, r3, #4
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f7fd feef 	bl	80028e0 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f103 0008 	add.w	r0, r3, #8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0110 	add.w	r1, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f7fd fea6 	bl	8002878 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f103 0008 	add.w	r0, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f103 0110 	add.w	r1, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	f7fd fe5d 	bl	8002810 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b5e:	b590      	push	{r4, r7, lr}
 8004b60:	b087      	sub	sp, #28
 8004b62:	af02      	add	r7, sp, #8
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f103 0008 	add.w	r0, r3, #8
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f103 0110 	add.w	r1, r3, #16
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1d1c      	adds	r4, r3, #4
 8004b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b7e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b82:	4622      	mov	r2, r4
 8004b84:	f7fd fe0b 	bl	800279e <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd90      	pop	{r4, r7, pc}

08004b90 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f103 0008 	add.w	r0, r3, #8
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f103 0110 	add.w	r1, r3, #16
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1d1c      	adds	r4, r3, #4
 8004bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb0:	e9cd 2300 	strd	r2, r3, [sp]
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	f7fd fdb9 	bl	800272c <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}

08004bc2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f103 0008 	add.w	r0, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f103 0110 	add.w	r1, r3, #16
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	1d1a      	adds	r2, r3, #4
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f7fd fd6d 	bl	80026bc <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0008 	add.w	r0, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f103 0110 	add.w	r1, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f7fd fd1f 	bl	8002648 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 0008 	add.w	r0, r3, #8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f103 0110 	add.w	r1, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f7fd fcd6 	bl	80025e0 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f103 0008 	add.w	r0, r3, #8
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f103 0110 	add.w	r1, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	1d1a      	adds	r2, r3, #4
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	f7fd fc8d 	bl	8002578 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f103 0008 	add.w	r0, r3, #8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f103 0110 	add.w	r1, r3, #16
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1d1a      	adds	r2, r3, #4
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f7fd fc41 	bl	8002508 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 0008 	add.w	r0, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f103 0110 	add.w	r1, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1d1a      	adds	r2, r3, #4
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f7fd fbd0 	bl	8002450 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f103 0008 	add.w	r0, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 0110 	add.w	r1, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1d1a      	adds	r2, r3, #4
 8004cd4:	887b      	ldrh	r3, [r7, #2]
 8004cd6:	f7fd fb59 	bl	800238c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f103 0008 	add.w	r0, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f103 0110 	add.w	r1, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	f7fd fb10 	bl	8002324 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f103 0008 	add.w	r0, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f103 0110 	add.w	r1, r3, #16
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f7fd fac2 	bl	80022b0 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f103 0008 	add.w	r0, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f103 0110 	add.w	r1, r3, #16
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f7fd fa79 	bl	8002248 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f103 0008 	add.w	r0, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f103 0110 	add.w	r1, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1d1a      	adds	r2, r3, #4
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f7fd fa2b 	bl	80021d4 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f103 0008 	add.w	r0, r3, #8
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 0110 	add.w	r1, r3, #16
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1d1a      	adds	r2, r3, #4
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	f7fd f9e2 	bl	800216c <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0008 	add.w	r0, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f103 0110 	add.w	r1, r3, #16
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	f7fd f999 	bl	8002104 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f103 0008 	add.w	r0, r3, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f103 0110 	add.w	r1, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	1d1a      	adds	r2, r3, #4
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f7fd f94d 	bl	8002094 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f103 0008 	add.w	r0, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f103 0110 	add.w	r1, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	1d1a      	adds	r2, r3, #4
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	f7fd f8dd 	bl	8001fde <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 0008 	add.w	r0, r3, #8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f103 0110 	add.w	r1, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	1d1a      	adds	r2, r3, #4
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	f7fd f866 	bl	8001f1a <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f103 0008 	add.w	r0, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f103 0110 	add.w	r1, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	f7fd f81d 	bl	8001eb2 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0008 	add.w	r0, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f103 0110 	add.w	r1, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1d1a      	adds	r2, r3, #4
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f7fc ffcf 	bl	8001e3e <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 0008 	add.w	r0, r3, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f103 0110 	add.w	r1, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1d1a      	adds	r2, r3, #4
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f7fc ff86 	bl	8001dd6 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8004eca:	bf00      	nop
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b082      	sub	sp, #8
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 0008 	add.w	r0, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f103 0110 	add.w	r1, r3, #16
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f7fc ff38 	bl	8001d62 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b082      	sub	sp, #8
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f103 0008 	add.w	r0, r3, #8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 0110 	add.w	r1, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	f7fc febe 	bl	8001c98 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f103 0008 	add.w	r0, r3, #8
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f103 0110 	add.w	r1, r3, #16
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	f7fc fee4 	bl	8001d0e <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f103 0208 	add.w	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3310      	adds	r3, #16
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fc fec0 	bl	8001ce8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8004f68:	4603      	mov	r3, r0
        }
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f103 0208 	add.w	r2, r3, #8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3310      	adds	r3, #16
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7fd ff0d 	bl	8002da6 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8004f8c:	4603      	mov	r3, r0
        }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f103 0208 	add.w	r2, r3, #8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fd fea9 	bl	8002d02 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8004fb0:	4603      	mov	r3, r0
        }
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f103 0208 	add.w	r2, r3, #8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fd fe40 	bl	8002c54 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 8004fd4:	4603      	mov	r3, r0
        }
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f103 0208 	add.w	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3310      	adds	r3, #16
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fd fa60 	bl	80024b8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 8004ff8:	4603      	mov	r3, r0
        }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f103 0208 	add.w	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3310      	adds	r3, #16
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fd f9f3 	bl	8002402 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 800501c:	4603      	mov	r3, r0
        }
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0208 	add.w	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3310      	adds	r3, #16
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fd f803 	bl	8002046 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8005040:	4603      	mov	r3, r0
        }
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f103 0208 	add.w	r2, r3, #8
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3310      	adds	r3, #16
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fc ff96 	bl	8001f90 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 8005064:	4603      	mov	r3, r0
        }
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	f040 80e4 	bne.w	800524a <_Z41__static_initialization_and_destruction_0ii+0x1da>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005088:	4293      	cmp	r3, r2
 800508a:	f040 80de 	bne.w	800524a <_Z41__static_initialization_and_destruction_0ii+0x1da>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 800508e:	2000      	movs	r0, #0
 8005090:	f006 f9c1 	bl	800b416 <osMutexNew>
 8005094:	4603      	mov	r3, r0
 8005096:	4a6f      	ldr	r2, [pc, #444]	; (8005254 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005098:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 800509a:	2000      	movs	r0, #0
 800509c:	f006 f9bb 	bl	800b416 <osMutexNew>
 80050a0:	4603      	mov	r3, r0
 80050a2:	4a6d      	ldr	r2, [pc, #436]	; (8005258 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80050a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f006 f9b5 	bl	800b416 <osMutexNew>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4a6b      	ldr	r2, [pc, #428]	; (800525c <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80050b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 80050b2:	2000      	movs	r0, #0
 80050b4:	f006 f9af 	bl	800b416 <osMutexNew>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4a69      	ldr	r2, [pc, #420]	; (8005260 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80050bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80050be:	2000      	movs	r0, #0
 80050c0:	f006 f9a9 	bl	800b416 <osMutexNew>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a67      	ldr	r2, [pc, #412]	; (8005264 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80050c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f006 f9a3 	bl	800b416 <osMutexNew>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4a65      	ldr	r2, [pc, #404]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80050d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80050d6:	2000      	movs	r0, #0
 80050d8:	f006 f99d 	bl	800b416 <osMutexNew>
 80050dc:	4603      	mov	r3, r0
 80050de:	4a63      	ldr	r2, [pc, #396]	; (800526c <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80050e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80050e2:	2000      	movs	r0, #0
 80050e4:	f006 f997 	bl	800b416 <osMutexNew>
 80050e8:	4603      	mov	r3, r0
 80050ea:	4a61      	ldr	r2, [pc, #388]	; (8005270 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80050ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80050ee:	2000      	movs	r0, #0
 80050f0:	f006 f991 	bl	800b416 <osMutexNew>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a5f      	ldr	r2, [pc, #380]	; (8005274 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80050f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80050fa:	2000      	movs	r0, #0
 80050fc:	f006 f98b 	bl	800b416 <osMutexNew>
 8005100:	4603      	mov	r3, r0
 8005102:	4a5d      	ldr	r2, [pc, #372]	; (8005278 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8005104:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8005106:	2000      	movs	r0, #0
 8005108:	f006 f985 	bl	800b416 <osMutexNew>
 800510c:	4603      	mov	r3, r0
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005110:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8005112:	2000      	movs	r0, #0
 8005114:	f006 f97f 	bl	800b416 <osMutexNew>
 8005118:	4603      	mov	r3, r0
 800511a:	4a59      	ldr	r2, [pc, #356]	; (8005280 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800511c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800511e:	2000      	movs	r0, #0
 8005120:	f006 f979 	bl	800b416 <osMutexNew>
 8005124:	4603      	mov	r3, r0
 8005126:	4a57      	ldr	r2, [pc, #348]	; (8005284 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8005128:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800512a:	2000      	movs	r0, #0
 800512c:	f006 f973 	bl	800b416 <osMutexNew>
 8005130:	4603      	mov	r3, r0
 8005132:	4a55      	ldr	r2, [pc, #340]	; (8005288 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005134:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8005136:	2000      	movs	r0, #0
 8005138:	f006 f96d 	bl	800b416 <osMutexNew>
 800513c:	4603      	mov	r3, r0
 800513e:	4a53      	ldr	r2, [pc, #332]	; (800528c <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005140:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8005142:	2000      	movs	r0, #0
 8005144:	f006 f967 	bl	800b416 <osMutexNew>
 8005148:	4603      	mov	r3, r0
 800514a:	4a51      	ldr	r2, [pc, #324]	; (8005290 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800514c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 800514e:	2000      	movs	r0, #0
 8005150:	f006 f961 	bl	800b416 <osMutexNew>
 8005154:	4603      	mov	r3, r0
 8005156:	4a4f      	ldr	r2, [pc, #316]	; (8005294 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005158:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800515a:	2000      	movs	r0, #0
 800515c:	f006 f95b 	bl	800b416 <osMutexNew>
 8005160:	4603      	mov	r3, r0
 8005162:	4a4d      	ldr	r2, [pc, #308]	; (8005298 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005164:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8005166:	2000      	movs	r0, #0
 8005168:	f006 f955 	bl	800b416 <osMutexNew>
 800516c:	4603      	mov	r3, r0
 800516e:	4a4b      	ldr	r2, [pc, #300]	; (800529c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005170:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8005172:	2000      	movs	r0, #0
 8005174:	f006 f94f 	bl	800b416 <osMutexNew>
 8005178:	4603      	mov	r3, r0
 800517a:	4a49      	ldr	r2, [pc, #292]	; (80052a0 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 800517c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 800517e:	2000      	movs	r0, #0
 8005180:	f006 f949 	bl	800b416 <osMutexNew>
 8005184:	4603      	mov	r3, r0
 8005186:	4a47      	ldr	r2, [pc, #284]	; (80052a4 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005188:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800518a:	2000      	movs	r0, #0
 800518c:	f006 f943 	bl	800b416 <osMutexNew>
 8005190:	4603      	mov	r3, r0
 8005192:	4a45      	ldr	r2, [pc, #276]	; (80052a8 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005194:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8005196:	2000      	movs	r0, #0
 8005198:	f006 f93d 	bl	800b416 <osMutexNew>
 800519c:	4603      	mov	r3, r0
 800519e:	4a43      	ldr	r2, [pc, #268]	; (80052ac <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80051a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80051a2:	2000      	movs	r0, #0
 80051a4:	f006 f937 	bl	800b416 <osMutexNew>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a41      	ldr	r2, [pc, #260]	; (80052b0 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80051ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f006 f931 	bl	800b416 <osMutexNew>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80051b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f006 f92b 	bl	800b416 <osMutexNew>
 80051c0:	4603      	mov	r3, r0
 80051c2:	4a3d      	ldr	r2, [pc, #244]	; (80052b8 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80051c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80051c6:	2000      	movs	r0, #0
 80051c8:	f006 f925 	bl	800b416 <osMutexNew>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a3b      	ldr	r2, [pc, #236]	; (80052bc <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80051d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f006 f91f 	bl	800b416 <osMutexNew>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80051dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80051de:	2000      	movs	r0, #0
 80051e0:	f006 f919 	bl	800b416 <osMutexNew>
 80051e4:	4603      	mov	r3, r0
 80051e6:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80051e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f006 f913 	bl	800b416 <osMutexNew>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80051f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f006 f90d 	bl	800b416 <osMutexNew>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4a33      	ldr	r2, [pc, #204]	; (80052cc <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005200:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8005202:	2000      	movs	r0, #0
 8005204:	f006 f907 	bl	800b416 <osMutexNew>
 8005208:	4603      	mov	r3, r0
 800520a:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 800520c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 800520e:	2000      	movs	r0, #0
 8005210:	f006 f901 	bl	800b416 <osMutexNew>
 8005214:	4603      	mov	r3, r0
 8005216:	4a2f      	ldr	r2, [pc, #188]	; (80052d4 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005218:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 800521a:	2000      	movs	r0, #0
 800521c:	f006 f8fb 	bl	800b416 <osMutexNew>
 8005220:	4603      	mov	r3, r0
 8005222:	4a2d      	ldr	r2, [pc, #180]	; (80052d8 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005224:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005226:	2000      	movs	r0, #0
 8005228:	f006 f8f5 	bl	800b416 <osMutexNew>
 800522c:	4603      	mov	r3, r0
 800522e:	4a2b      	ldr	r2, [pc, #172]	; (80052dc <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005230:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8005232:	2000      	movs	r0, #0
 8005234:	f006 f8ef 	bl	800b416 <osMutexNew>
 8005238:	4603      	mov	r3, r0
 800523a:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 800523c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800523e:	2000      	movs	r0, #0
 8005240:	f006 f8e9 	bl	800b416 <osMutexNew>
 8005244:	4603      	mov	r3, r0
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200005d8 	.word	0x200005d8
 8005258:	200005dc 	.word	0x200005dc
 800525c:	200005e0 	.word	0x200005e0
 8005260:	200005e4 	.word	0x200005e4
 8005264:	200005e8 	.word	0x200005e8
 8005268:	200005ec 	.word	0x200005ec
 800526c:	200005f0 	.word	0x200005f0
 8005270:	200005f4 	.word	0x200005f4
 8005274:	200005f8 	.word	0x200005f8
 8005278:	200005fc 	.word	0x200005fc
 800527c:	20000600 	.word	0x20000600
 8005280:	20000604 	.word	0x20000604
 8005284:	20000608 	.word	0x20000608
 8005288:	2000060c 	.word	0x2000060c
 800528c:	20000610 	.word	0x20000610
 8005290:	20000614 	.word	0x20000614
 8005294:	20000618 	.word	0x20000618
 8005298:	2000061c 	.word	0x2000061c
 800529c:	20000620 	.word	0x20000620
 80052a0:	20000624 	.word	0x20000624
 80052a4:	20000628 	.word	0x20000628
 80052a8:	2000062c 	.word	0x2000062c
 80052ac:	20000630 	.word	0x20000630
 80052b0:	20000634 	.word	0x20000634
 80052b4:	20000638 	.word	0x20000638
 80052b8:	2000063c 	.word	0x2000063c
 80052bc:	20000640 	.word	0x20000640
 80052c0:	20000644 	.word	0x20000644
 80052c4:	20000648 	.word	0x20000648
 80052c8:	2000064c 	.word	0x2000064c
 80052cc:	20000650 	.word	0x20000650
 80052d0:	20000654 	.word	0x20000654
 80052d4:	20000658 	.word	0x20000658
 80052d8:	2000065c 	.word	0x2000065c
 80052dc:	20000660 	.word	0x20000660
 80052e0:	20000664 	.word	0x20000664
 80052e4:	20000668 	.word	0x20000668

080052e8 <_GLOBAL__sub_I_OD_NodeID>:
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052f0:	2001      	movs	r0, #1
 80052f2:	f7ff febd 	bl	8005070 <_Z41__static_initialization_and_destruction_0ii>
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fb fb6a 	bl	8000a20 <_ZNSt14_Function_baseD1Ev>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8005356:	b5b0      	push	{r4, r5, r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	240f      	movs	r4, #15
 8005362:	461d      	mov	r5, r3
 8005364:	2c00      	cmp	r4, #0
 8005366:	db05      	blt.n	8005374 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8005368:	4628      	mov	r0, r5
 800536a:	f000 f8b0 	bl	80054ce <_ZNSt8functionIFvtEEC1Ev>
 800536e:	3510      	adds	r5, #16
 8005370:	3c01      	subs	r4, #1
 8005372:	e7f7      	b.n	8005364 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bdb0      	pop	{r4, r5, r7, pc}

08005386 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8005386:	b590      	push	{r4, r7, lr}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429c      	cmp	r4, r3
 800539e:	d004      	beq.n	80053aa <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 80053a0:	3c10      	subs	r4, #16
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff ffca 	bl	800533c <_ZNSt8functionIFvtEED1Ev>
 80053a8:	e7f7      	b.n	800539a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd90      	pop	{r4, r7, pc}

080053b4 <__tcf_1>:
		static GPIOExtiCallbackHandler instance;
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__tcf_1+0xc>)
 80053ba:	f7ff ffe4 	bl	8005386 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000066c 	.word	0x2000066c

080053c4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f3bf 8f5b 	dmb	ish
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80053e4:	480b      	ldr	r0, [pc, #44]	; (8005414 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80053e6:	f009 ff9d 	bl	800f324 <__cxa_guard_acquire>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80053fa:	4807      	ldr	r0, [pc, #28]	; (8005418 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 80053fc:	f7ff ffab 	bl	8005356 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8005400:	4806      	ldr	r0, [pc, #24]	; (800541c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8005402:	f009 ffcc 	bl	800f39e <atexit>
 8005406:	4803      	ldr	r0, [pc, #12]	; (8005414 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005408:	f009 ff98 	bl	800f33c <__cxa_guard_release>
		return instance;
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 800540e:	4618      	mov	r0, r3
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000770 	.word	0x20000770
 8005418:	2000066c 	.word	0x2000066c
 800541c:	080053b5 	.word	0x080053b5

08005420 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d20c      	bcs.n	8005456 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4413      	add	r3, r2
 8005444:	887a      	ldrh	r2, [r7, #2]
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f84d 	bl	80054e8 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e7ec      	b.n	8005430 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_GPIO_EXTI_Callback>:

	std::function<void(uint16_t)> m_listeners[16];
	unsigned int m_size = 0;
};

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	4603      	mov	r3, r0
 8005466:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 8005468:	f7ff ffac 	bl	80053c4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800546c:	4602      	mov	r2, r0
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f7ff ffd4 	bl	8005420 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZZ15testbench_entryENKUlR9RxMessageE_clES0_>:
};


void testbench_entry(void* argv){

	can::registerMessageReceiver<can::messages::SENSOR_HELLO_WORLD>([&](RxMessage& message){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
		logln("HELLO, WORLD");
 800548a:	4803      	ldr	r0, [pc, #12]	; (8005498 <_ZZ15testbench_entryENKUlR9RxMessageE_clES0_+0x18>)
 800548c:	f7fb fd85 	bl	8000f9a <_Z5loglnPKc>
	});
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	080108c8 	.word	0x080108c8

0800549c <testbench_entry>:
void testbench_entry(void* argv){
 800549c:	b580      	push	{r7, lr}
 800549e:	b0b0      	sub	sp, #192	; 0xc0
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	can::registerMessageReceiver<can::messages::SENSOR_HELLO_WORLD>([&](RxMessage& message){
 80054a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f83a 	bl	8005524 <_ZNSt8functionIFvR9RxMessageEEC1IZ15testbench_entryEUlS1_E_vvEET_>
 80054b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f85f 	bl	8005578 <_ZN3can23registerMessageReceiverINS_8messages18SENSOR_HELLO_WORLDEEEvSt8functionIFvR9RxMessageEE>
 80054ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fb fad2 	bl	8000a68 <_ZNSt8functionIFvR9RxMessageEED1Ev>

	while(true){
		osDelay(500);
 80054c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054c8:	f005 ff8a 	bl	800b3e0 <osDelay>
 80054cc:	e7fa      	b.n	80054c4 <testbench_entry+0x28>

080054ce <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb fa93 	bl	8000a04 <_ZNSt14_Function_baseC1Ev>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 80054e8:	b5b0      	push	{r4, r5, r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fb faa5 	bl	8000a46 <_ZNKSt14_Function_base8_M_emptyEv>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8005502:	f009 ff1e 	bl	800f342 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68dc      	ldr	r4, [r3, #12]
 800550a:	687d      	ldr	r5, [r7, #4]
 800550c:	1cbb      	adds	r3, r7, #2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f84c 	bl	80055ac <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8005514:	4603      	mov	r3, r0
 8005516:	4619      	mov	r1, r3
 8005518:	4628      	mov	r0, r5
 800551a:	47a0      	blx	r4
 800551c:	bf00      	nop
    }
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bdb0      	pop	{r4, r5, r7, pc}

08005524 <_ZNSt8functionIFvR9RxMessageEEC1IZ15testbench_entryEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb fa67 	bl	8000a04 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005536:	463b      	mov	r3, r7
 8005538:	4618      	mov	r0, r3
 800553a:	f000 f842 	bl	80055c2 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E21_M_not_empty_functionIS3_EEbRKT_>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00f      	beq.n	8005564 <_ZNSt8functionIFvR9RxMessageEEC1IZ15testbench_entryEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005544:	687c      	ldr	r4, [r7, #4]
 8005546:	463b      	mov	r3, r7
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f845 	bl	80055d8 <_ZSt4moveIRZ15testbench_entryEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS5_>
 800554e:	4603      	mov	r3, r0
 8005550:	4619      	mov	r1, r3
 8005552:	4620      	mov	r0, r4
 8005554:	f000 f84b 	bl	80055ee <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a05      	ldr	r2, [pc, #20]	; (8005570 <_ZNSt8functionIFvR9RxMessageEEC1IZ15testbench_entryEUlS1_E_vvEET_+0x4c>)
 800555c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a04      	ldr	r2, [pc, #16]	; (8005574 <_ZNSt8functionIFvR9RxMessageEEC1IZ15testbench_entryEUlS1_E_vvEET_+0x50>)
 8005562:	609a      	str	r2, [r3, #8]
      }
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bd90      	pop	{r4, r7, pc}
 800556e:	bf00      	nop
 8005570:	08005613 	.word	0x08005613
 8005574:	0800563d 	.word	0x0800563d

08005578 <_ZN3can23registerMessageReceiverINS_8messages18SENSOR_HELLO_WORLDEEEvSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline void registerMessageReceiver(std::function<void(RxMessage&)> receiver){
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	canzero::registerMessageReceiverInternal(receiver, MESSAGE::id, MESSAGE::isExtendedId);
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fb fb5d 	bl	8000c46 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	2200      	movs	r2, #0
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f7fb faa7 	bl	8000ae8 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb fa62 	bl	8000a68 <_ZNSt8functionIFvR9RxMessageEED1Ev>
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
	  { return true; }
 80055ca:	2301      	movs	r3, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZSt4moveIRZ15testbench_entryEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80055ee:	b590      	push	{r4, r7, lr}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80055f8:	6838      	ldr	r0, [r7, #0]
 80055fa:	f7ff ffed 	bl	80055d8 <_ZSt4moveIRZ15testbench_entryEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS5_>
 80055fe:	4603      	mov	r3, r0
 8005600:	4622      	mov	r2, r4
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f838 	bl	800567a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <_ZNSt17_Function_handlerIFvR9RxMessageEZ15testbench_entryEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005612:	b590      	push	{r4, r7, lr}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f841 	bl	80056a4 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 8005622:	4604      	mov	r4, r0
 8005624:	6838      	ldr	r0, [r7, #0]
 8005626:	f7fb fb98 	bl	8000d5a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800562a:	4603      	mov	r3, r0
 800562c:	4619      	mov	r1, r3
 800562e:	4620      	mov	r0, r4
 8005630:	f000 f849 	bl	80056c6 <_ZSt10__invoke_rIvRZ15testbench_entryEUlR9RxMessageE_JS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 8005634:	bf00      	nop
      }
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bd90      	pop	{r4, r7, pc}

0800563c <_ZNSt17_Function_handlerIFvR9RxMessageEZ15testbench_entryEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d109      	bne.n	8005664 <_ZNSt17_Function_handlerIFvR9RxMessageEZ15testbench_entryEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f84e 	bl	80056f2 <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlR9RxMessageE_EERT_v>
 8005656:	4604      	mov	r4, r0
 8005658:	68b8      	ldr	r0, [r7, #8]
 800565a:	f000 f823 	bl	80056a4 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800565e:	4603      	mov	r3, r0
 8005660:	6023      	str	r3, [r4, #0]
	    break;
 8005662:	e005      	b.n	8005670 <_ZNSt17_Function_handlerIFvR9RxMessageEZ15testbench_entryEUlS1_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	461a      	mov	r2, r3
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f84d 	bl	800570a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 8005670:	2300      	movs	r3, #0
      }
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}

0800567a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8005686:	68b8      	ldr	r0, [r7, #8]
 8005688:	f7ff ffa6 	bl	80055d8 <_ZSt4moveIRZ15testbench_entryEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS5_>
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff fe3f 	bl	8005310 <_ZNSt9_Any_data9_M_accessEv>
 8005692:	4603      	mov	r3, r0
 8005694:	4619      	mov	r1, r3
 8005696:	2001      	movs	r0, #1
 8005698:	f7ff fe2e 	bl	80052f8 <_ZnwjPv>
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f857 	bl	8005760 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlR9RxMessageE_EERKT_v>
 80056b2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f85f 	bl	8005778 <_ZSt11__addressofIKZ15testbench_entryEUlR9RxMessageE_EPT_RS4_>
 80056ba:	4603      	mov	r3, r0
 80056bc:	bf00      	nop
	}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_ZSt10__invoke_rIvRZ15testbench_entryEUlR9RxMessageE_JS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80056c6:	b5b0      	push	{r4, r5, r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f85c 	bl	800578e <_ZSt7forwardIRZ15testbench_entryEUlR9RxMessageE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80056d6:	4604      	mov	r4, r0
 80056d8:	6838      	ldr	r0, [r7, #0]
 80056da:	f7fb fb3e 	bl	8000d5a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 f85d 	bl	80057a4 <_ZSt13__invoke_implIvRZ15testbench_entryEUlR9RxMessageE_JS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}

080056f2 <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlR9RxMessageE_EERT_v>:
      _M_access()
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fe08 	bl	8005310 <_ZNSt9_Any_data9_M_accessEv>
 8005700:	4603      	mov	r3, r0
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800570a:	b5b0      	push	{r4, r5, r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	4613      	mov	r3, r2
 8005716:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d016      	beq.n	800574c <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 800571e:	2b03      	cmp	r3, #3
 8005720:	dc19      	bgt.n	8005756 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8005722:	2b01      	cmp	r3, #1
 8005724:	d002      	beq.n	800572c <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8005726:	2b02      	cmp	r3, #2
 8005728:	d00a      	beq.n	8005740 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 800572a:	e014      	b.n	8005756 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7ff ffe0 	bl	80056f2 <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlR9RxMessageE_EERT_v>
 8005732:	4604      	mov	r4, r0
 8005734:	68b8      	ldr	r0, [r7, #8]
 8005736:	f7ff ffb5 	bl	80056a4 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800573a:	4603      	mov	r3, r0
 800573c:	6023      	str	r3, [r4, #0]
	      break;
 800573e:	e00a      	b.n	8005756 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8005740:	462a      	mov	r2, r5
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f843 	bl	80057d0 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 800574a:	e004      	b.n	8005756 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800574c:	4621      	mov	r1, r4
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f853 	bl	80057fa <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005754:	bf00      	nop
	  return false;
 8005756:	2300      	movs	r3, #0
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bdb0      	pop	{r4, r5, r7, pc}

08005760 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fddc 	bl	8005326 <_ZNKSt9_Any_data9_M_accessEv>
 800576e:	4603      	mov	r3, r0
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_ZSt11__addressofIKZ15testbench_entryEUlR9RxMessageE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <_ZSt7forwardIRZ15testbench_entryEUlR9RxMessageE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <_ZSt13__invoke_implIvRZ15testbench_entryEUlR9RxMessageE_JS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	7338      	strb	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f7ff ffec 	bl	800578e <_ZSt7forwardIRZ15testbench_entryEUlR9RxMessageE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80057b6:	4604      	mov	r4, r0
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7fb face 	bl	8000d5a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80057be:	4603      	mov	r3, r0
 80057c0:	4619      	mov	r1, r3
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff fe5c 	bl	8005480 <_ZZ15testbench_entryENKUlR9RxMessageE_clES0_>
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd90      	pop	{r4, r7, pc}

080057d0 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80057dc:	68b8      	ldr	r0, [r7, #8]
 80057de:	f7ff ffbf 	bl	8005760 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlR9RxMessageE_EERKT_v>
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff fd94 	bl	8005310 <_ZNSt9_Any_data9_M_accessEv>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4619      	mov	r1, r3
 80057ec:	2001      	movs	r0, #1
 80057ee:	f7ff fd83 	bl	80052f8 <_ZnwjPv>
	}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f804 	bl	8005812 <_ZNSt9_Any_data9_M_accessIZ15testbench_entryEUlR9RxMessageE_EERT_v>
	}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <_ZNSt9_Any_data9_M_accessIZ15testbench_entryEUlR9RxMessageE_EERT_v>:
      _M_access()
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fd78 	bl	8005310 <_ZNSt9_Any_data9_M_accessEv>
 8005820:	4603      	mov	r3, r0
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005832:	463b      	mov	r3, r7
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <MX_ADC1_Init+0xec>)
 8005840:	4a36      	ldr	r2, [pc, #216]	; (800591c <MX_ADC1_Init+0xf0>)
 8005842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <MX_ADC1_Init+0xec>)
 8005846:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800584a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800584c:	4b32      	ldr	r3, [pc, #200]	; (8005918 <MX_ADC1_Init+0xec>)
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005852:	4b31      	ldr	r3, [pc, #196]	; (8005918 <MX_ADC1_Init+0xec>)
 8005854:	2201      	movs	r2, #1
 8005856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005858:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <MX_ADC1_Init+0xec>)
 800585a:	2200      	movs	r2, #0
 800585c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800585e:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <MX_ADC1_Init+0xec>)
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005866:	4b2c      	ldr	r3, [pc, #176]	; (8005918 <MX_ADC1_Init+0xec>)
 8005868:	2200      	movs	r2, #0
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800586c:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <MX_ADC1_Init+0xec>)
 800586e:	4a2c      	ldr	r2, [pc, #176]	; (8005920 <MX_ADC1_Init+0xf4>)
 8005870:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <MX_ADC1_Init+0xec>)
 8005874:	2200      	movs	r2, #0
 8005876:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <MX_ADC1_Init+0xec>)
 800587a:	2204      	movs	r2, #4
 800587c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <MX_ADC1_Init+0xec>)
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <MX_ADC1_Init+0xec>)
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800588c:	4822      	ldr	r0, [pc, #136]	; (8005918 <MX_ADC1_Init+0xec>)
 800588e:	f001 fc5f 	bl	8007150 <HAL_ADC_Init>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005898:	f000 fdd2 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800589c:	230a      	movs	r3, #10
 800589e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80058a0:	2301      	movs	r3, #1
 80058a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80058a4:	2305      	movs	r3, #5
 80058a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058a8:	463b      	mov	r3, r7
 80058aa:	4619      	mov	r1, r3
 80058ac:	481a      	ldr	r0, [pc, #104]	; (8005918 <MX_ADC1_Init+0xec>)
 80058ae:	f001 fc93 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80058b8:	f000 fdc2 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80058c0:	2302      	movs	r3, #2
 80058c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058c4:	463b      	mov	r3, r7
 80058c6:	4619      	mov	r1, r3
 80058c8:	4813      	ldr	r0, [pc, #76]	; (8005918 <MX_ADC1_Init+0xec>)
 80058ca:	f001 fc85 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80058d4:	f000 fdb4 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80058d8:	2310      	movs	r3, #16
 80058da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80058dc:	2303      	movs	r3, #3
 80058de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058e0:	463b      	mov	r3, r7
 80058e2:	4619      	mov	r1, r3
 80058e4:	480c      	ldr	r0, [pc, #48]	; (8005918 <MX_ADC1_Init+0xec>)
 80058e6:	f001 fc77 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80058f0:	f000 fda6 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80058f4:	2311      	movs	r3, #17
 80058f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80058f8:	2304      	movs	r3, #4
 80058fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058fc:	463b      	mov	r3, r7
 80058fe:	4619      	mov	r1, r3
 8005900:	4805      	ldr	r0, [pc, #20]	; (8005918 <MX_ADC1_Init+0xec>)
 8005902:	f001 fc69 	bl	80071d8 <HAL_ADC_ConfigChannel>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800590c:	f000 fd98 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005910:	bf00      	nop
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000774 	.word	0x20000774
 800591c:	40012000 	.word	0x40012000
 8005920:	0f000001 	.word	0x0f000001

08005924 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800592a:	463b      	mov	r3, r7
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005936:	4b52      	ldr	r3, [pc, #328]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005938:	4a52      	ldr	r2, [pc, #328]	; (8005a84 <MX_ADC2_Init+0x160>)
 800593a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <MX_ADC2_Init+0x15c>)
 800593e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005942:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005944:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800594a:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <MX_ADC2_Init+0x15c>)
 800594c:	2201      	movs	r2, #1
 800594e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005950:	4b4b      	ldr	r3, [pc, #300]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005952:	2200      	movs	r2, #0
 8005954:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005956:	4b4a      	ldr	r3, [pc, #296]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800595e:	4b48      	ldr	r3, [pc, #288]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005960:	2200      	movs	r2, #0
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005964:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005966:	4a48      	ldr	r2, [pc, #288]	; (8005a88 <MX_ADC2_Init+0x164>)
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800596a:	4b45      	ldr	r3, [pc, #276]	; (8005a80 <MX_ADC2_Init+0x15c>)
 800596c:	2200      	movs	r2, #0
 800596e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8005970:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005972:	2208      	movs	r2, #8
 8005974:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800597e:	4b40      	ldr	r3, [pc, #256]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005980:	2200      	movs	r2, #0
 8005982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005984:	483e      	ldr	r0, [pc, #248]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005986:	f001 fbe3 	bl	8007150 <HAL_ADC_Init>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005990:	f000 fd56 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005994:	230f      	movs	r3, #15
 8005996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005998:	2301      	movs	r3, #1
 800599a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800599c:	2304      	movs	r3, #4
 800599e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059a0:	463b      	mov	r3, r7
 80059a2:	4619      	mov	r1, r3
 80059a4:	4836      	ldr	r0, [pc, #216]	; (8005a80 <MX_ADC2_Init+0x15c>)
 80059a6:	f001 fc17 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80059b0:	f000 fd46 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80059b4:	230e      	movs	r3, #14
 80059b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80059b8:	2302      	movs	r3, #2
 80059ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059bc:	463b      	mov	r3, r7
 80059be:	4619      	mov	r1, r3
 80059c0:	482f      	ldr	r0, [pc, #188]	; (8005a80 <MX_ADC2_Init+0x15c>)
 80059c2:	f001 fc09 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80059cc:	f000 fd38 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80059d0:	2303      	movs	r3, #3
 80059d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80059d4:	2303      	movs	r3, #3
 80059d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059d8:	463b      	mov	r3, r7
 80059da:	4619      	mov	r1, r3
 80059dc:	4828      	ldr	r0, [pc, #160]	; (8005a80 <MX_ADC2_Init+0x15c>)
 80059de:	f001 fbfb 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80059e8:	f000 fd2a 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80059ec:	2302      	movs	r3, #2
 80059ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80059f0:	2304      	movs	r3, #4
 80059f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059f4:	463b      	mov	r3, r7
 80059f6:	4619      	mov	r1, r3
 80059f8:	4821      	ldr	r0, [pc, #132]	; (8005a80 <MX_ADC2_Init+0x15c>)
 80059fa:	f001 fbed 	bl	80071d8 <HAL_ADC_ConfigChannel>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005a04:	f000 fd1c 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005a08:	2304      	movs	r3, #4
 8005a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005a0c:	2305      	movs	r3, #5
 8005a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a10:	463b      	mov	r3, r7
 8005a12:	4619      	mov	r1, r3
 8005a14:	481a      	ldr	r0, [pc, #104]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005a16:	f001 fbdf 	bl	80071d8 <HAL_ADC_ConfigChannel>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005a20:	f000 fd0e 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005a24:	2305      	movs	r3, #5
 8005a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005a28:	2306      	movs	r3, #6
 8005a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4813      	ldr	r0, [pc, #76]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005a32:	f001 fbd1 	bl	80071d8 <HAL_ADC_ConfigChannel>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005a3c:	f000 fd00 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005a40:	2306      	movs	r3, #6
 8005a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005a44:	2307      	movs	r3, #7
 8005a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a48:	463b      	mov	r3, r7
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480c      	ldr	r0, [pc, #48]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005a4e:	f001 fbc3 	bl	80071d8 <HAL_ADC_ConfigChannel>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005a58:	f000 fcf2 	bl	8006440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005a5c:	2307      	movs	r3, #7
 8005a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005a60:	2308      	movs	r3, #8
 8005a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a64:	463b      	mov	r3, r7
 8005a66:	4619      	mov	r1, r3
 8005a68:	4805      	ldr	r0, [pc, #20]	; (8005a80 <MX_ADC2_Init+0x15c>)
 8005a6a:	f001 fbb5 	bl	80071d8 <HAL_ADC_ConfigChannel>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005a74:	f000 fce4 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	200007bc 	.word	0x200007bc
 8005a84:	40012100 	.word	0x40012100
 8005a88:	0f000001 	.word	0x0f000001

08005a8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a94:	f107 031c 	add.w	r3, r7, #28
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a6b      	ldr	r2, [pc, #428]	; (8005c58 <HAL_ADC_MspInit+0x1cc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d157      	bne.n	8005b5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abc:	6453      	str	r3, [r2, #68]	; 0x44
 8005abe:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	4b63      	ldr	r3, [pc, #396]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	4a62      	ldr	r2, [pc, #392]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ad4:	f043 0304 	orr.w	r3, r3, #4
 8005ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8005ada:	4b60      	ldr	r3, [pc, #384]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8005ae6:	2305      	movs	r3, #5
 8005ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005aea:	2303      	movs	r3, #3
 8005aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005af2:	f107 031c 	add.w	r3, r7, #28
 8005af6:	4619      	mov	r1, r3
 8005af8:	4859      	ldr	r0, [pc, #356]	; (8005c60 <HAL_ADC_MspInit+0x1d4>)
 8005afa:	f003 f80f 	bl	8008b1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005afe:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b00:	4a59      	ldr	r2, [pc, #356]	; (8005c68 <HAL_ADC_MspInit+0x1dc>)
 8005b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005b04:	4b57      	ldr	r3, [pc, #348]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b0a:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b10:	4b54      	ldr	r3, [pc, #336]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005b16:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b1e:	4b51      	ldr	r3, [pc, #324]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b26:	4b4f      	ldr	r3, [pc, #316]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005b2e:	4b4d      	ldr	r3, [pc, #308]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005b34:	4b4b      	ldr	r3, [pc, #300]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b3a:	4b4a      	ldr	r3, [pc, #296]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005b40:	4848      	ldr	r0, [pc, #288]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b42:	f002 fd01 	bl	8008548 <HAL_DMA_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8005b4c:	f000 fc78 	bl	8006440 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a44      	ldr	r2, [pc, #272]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
 8005b56:	4a43      	ldr	r2, [pc, #268]	; (8005c64 <HAL_ADC_MspInit+0x1d8>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005b5c:	e077      	b.n	8005c4e <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a42      	ldr	r2, [pc, #264]	; (8005c6c <HAL_ADC_MspInit+0x1e0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d172      	bne.n	8005c4e <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	4a3a      	ldr	r2, [pc, #232]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b76:	6453      	str	r3, [r2, #68]	; 0x44
 8005b78:	4b38      	ldr	r3, [pc, #224]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b8e:	f043 0304 	orr.w	r3, r3, #4
 8005b92:	6313      	str	r3, [r2, #48]	; 0x30
 8005b94:	4b31      	ldr	r3, [pc, #196]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	4a2c      	ldr	r2, [pc, #176]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb0:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <HAL_ADC_MspInit+0x1d0>)
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8005bbc:	2335      	movs	r3, #53	; 0x35
 8005bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bc8:	f107 031c 	add.w	r3, r7, #28
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4824      	ldr	r0, [pc, #144]	; (8005c60 <HAL_ADC_MspInit+0x1d4>)
 8005bd0:	f002 ffa4 	bl	8008b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8005bd4:	23fc      	movs	r3, #252	; 0xfc
 8005bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be0:	f107 031c 	add.w	r3, r7, #28
 8005be4:	4619      	mov	r1, r3
 8005be6:	4822      	ldr	r0, [pc, #136]	; (8005c70 <HAL_ADC_MspInit+0x1e4>)
 8005be8:	f002 ff98 	bl	8008b1c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005bec:	4b21      	ldr	r3, [pc, #132]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005bee:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <HAL_ADC_MspInit+0x1ec>)
 8005bf0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005bf2:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005bf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bf8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c0c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005c0e:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c14:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c1c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c2a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005c32:	4810      	ldr	r0, [pc, #64]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c34:	f002 fc88 	bl	8008548 <HAL_DMA_Init>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8005c3e:	f000 fbff 	bl	8006440 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <HAL_ADC_MspInit+0x1e8>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005c4e:	bf00      	nop
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40012000 	.word	0x40012000
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40020800 	.word	0x40020800
 8005c64:	20000804 	.word	0x20000804
 8005c68:	40026410 	.word	0x40026410
 8005c6c:	40012100 	.word	0x40012100
 8005c70:	40020000 	.word	0x40020000
 8005c74:	20000864 	.word	0x20000864
 8005c78:	40026440 	.word	0x40026440

08005c7c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8005c80:	4b17      	ldr	r3, [pc, #92]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005c82:	4a18      	ldr	r2, [pc, #96]	; (8005ce4 <MX_CAN1_Init+0x68>)
 8005c84:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8005c86:	4b16      	ldr	r3, [pc, #88]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005c88:	2203      	movs	r2, #3
 8005c8a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005c8c:	4b14      	ldr	r3, [pc, #80]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005c92:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005c98:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005c9a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8005c9e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005ca2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ca6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8005cae:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005ccc:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <MX_CAN1_Init+0x64>)
 8005cce:	f001 fca1 	bl	8007614 <HAL_CAN_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005cd8:	f000 fbb2 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8005cdc:	bf00      	nop
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	200008c4 	.word	0x200008c4
 8005ce4:	40006400 	.word	0x40006400

08005ce8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005cee:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <MX_CAN2_Init+0x68>)
 8005cf0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8005cf8:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005cfe:	4b13      	ldr	r3, [pc, #76]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8005d04:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d06:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8005d0a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d12:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8005d38:	4804      	ldr	r0, [pc, #16]	; (8005d4c <MX_CAN2_Init+0x64>)
 8005d3a:	f001 fc6b 	bl	8007614 <HAL_CAN_Init>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8005d44:	f000 fb7c 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200008ec 	.word	0x200008ec
 8005d50:	40006800 	.word	0x40006800

08005d54 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	; 0x30
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d5c:	f107 031c 	add.w	r3, r7, #28
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	609a      	str	r2, [r3, #8]
 8005d68:	60da      	str	r2, [r3, #12]
 8005d6a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5a      	ldr	r2, [pc, #360]	; (8005edc <HAL_CAN_MspInit+0x188>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d14d      	bne.n	8005e12 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005d76:	4b5a      	ldr	r3, [pc, #360]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005d7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005d80:	4b57      	ldr	r3, [pc, #348]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d10d      	bne.n	8005da4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	4b55      	ldr	r3, [pc, #340]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	4a54      	ldr	r2, [pc, #336]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d96:	6413      	str	r3, [r2, #64]	; 0x40
 8005d98:	4b52      	ldr	r3, [pc, #328]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	4b4e      	ldr	r3, [pc, #312]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005dae:	f043 0308 	orr.w	r3, r3, #8
 8005db2:	6313      	str	r3, [r2, #48]	; 0x30
 8005db4:	4b4b      	ldr	r3, [pc, #300]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005dd0:	2309      	movs	r3, #9
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dd4:	f107 031c 	add.w	r3, r7, #28
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4843      	ldr	r0, [pc, #268]	; (8005ee8 <HAL_CAN_MspInit+0x194>)
 8005ddc:	f002 fe9e 	bl	8008b1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2105      	movs	r1, #5
 8005de4:	2013      	movs	r0, #19
 8005de6:	f002 fb69 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8005dea:	2013      	movs	r0, #19
 8005dec:	f002 fb82 	bl	80084f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2105      	movs	r1, #5
 8005df4:	2014      	movs	r0, #20
 8005df6:	f002 fb61 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005dfa:	2014      	movs	r0, #20
 8005dfc:	f002 fb7a 	bl	80084f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8005e00:	2200      	movs	r2, #0
 8005e02:	2105      	movs	r1, #5
 8005e04:	2015      	movs	r0, #21
 8005e06:	f002 fb59 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8005e0a:	2015      	movs	r0, #21
 8005e0c:	f002 fb72 	bl	80084f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8005e10:	e05f      	b.n	8005ed2 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a35      	ldr	r2, [pc, #212]	; (8005eec <HAL_CAN_MspInit+0x198>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d15a      	bne.n	8005ed2 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8005e38:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005e40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8005e42:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_CAN_MspInit+0x18c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10d      	bne.n	8005e66 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	4b25      	ldr	r3, [pc, #148]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	4a24      	ldr	r2, [pc, #144]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e58:	6413      	str	r3, [r2, #64]	; 0x40
 8005e5a:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30
 8005e76:	4b1b      	ldr	r3, [pc, #108]	; (8005ee4 <HAL_CAN_MspInit+0x190>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005e82:	2360      	movs	r3, #96	; 0x60
 8005e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e86:	2302      	movs	r3, #2
 8005e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8005e92:	2309      	movs	r3, #9
 8005e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e96:	f107 031c 	add.w	r3, r7, #28
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4814      	ldr	r0, [pc, #80]	; (8005ef0 <HAL_CAN_MspInit+0x19c>)
 8005e9e:	f002 fe3d 	bl	8008b1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2105      	movs	r1, #5
 8005ea6:	203f      	movs	r0, #63	; 0x3f
 8005ea8:	f002 fb08 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8005eac:	203f      	movs	r0, #63	; 0x3f
 8005eae:	f002 fb21 	bl	80084f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2105      	movs	r1, #5
 8005eb6:	2040      	movs	r0, #64	; 0x40
 8005eb8:	f002 fb00 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8005ebc:	2040      	movs	r0, #64	; 0x40
 8005ebe:	f002 fb19 	bl	80084f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2105      	movs	r1, #5
 8005ec6:	2041      	movs	r0, #65	; 0x41
 8005ec8:	f002 faf8 	bl	80084bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8005ecc:	2041      	movs	r0, #65	; 0x41
 8005ece:	f002 fb11 	bl	80084f4 <HAL_NVIC_EnableIRQ>
}
 8005ed2:	bf00      	nop
 8005ed4:	3730      	adds	r7, #48	; 0x30
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40006400 	.word	0x40006400
 8005ee0:	20000914 	.word	0x20000914
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	40020c00 	.word	0x40020c00
 8005eec:	40006800 	.word	0x40006800
 8005ef0:	40020400 	.word	0x40020400

08005ef4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <MX_CRC_Init+0x20>)
 8005efa:	4a07      	ldr	r2, [pc, #28]	; (8005f18 <MX_CRC_Init+0x24>)
 8005efc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005efe:	4805      	ldr	r0, [pc, #20]	; (8005f14 <MX_CRC_Init+0x20>)
 8005f00:	f002 fb06 	bl	8008510 <HAL_CRC_Init>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005f0a:	f000 fa99 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000918 	.word	0x20000918
 8005f18:	40023000 	.word	0x40023000

08005f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_CRC_MspInit+0x3c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d10d      	bne.n	8005f4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_CRC_MspInit+0x40>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <HAL_CRC_MspInit+0x40>)
 8005f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <HAL_CRC_MspInit+0x40>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40023000 	.word	0x40023000
 8005f5c:	40023800 	.word	0x40023800

08005f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <MX_DMA_Init+0x6c>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <MX_DMA_Init+0x6c>)
 8005f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f74:	6313      	str	r3, [r2, #48]	; 0x30
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <MX_DMA_Init+0x6c>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8005f82:	2200      	movs	r2, #0
 8005f84:	2105      	movs	r1, #5
 8005f86:	2038      	movs	r0, #56	; 0x38
 8005f88:	f002 fa98 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005f8c:	2038      	movs	r0, #56	; 0x38
 8005f8e:	f002 fab1 	bl	80084f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8005f92:	2200      	movs	r2, #0
 8005f94:	2105      	movs	r1, #5
 8005f96:	203a      	movs	r0, #58	; 0x3a
 8005f98:	f002 fa90 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005f9c:	203a      	movs	r0, #58	; 0x3a
 8005f9e:	f002 faa9 	bl	80084f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2105      	movs	r1, #5
 8005fa6:	2044      	movs	r0, #68	; 0x44
 8005fa8:	f002 fa88 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8005fac:	2044      	movs	r0, #68	; 0x44
 8005fae:	f002 faa1 	bl	80084f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2105      	movs	r1, #5
 8005fb6:	2046      	movs	r0, #70	; 0x46
 8005fb8:	f002 fa80 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005fbc:	2046      	movs	r0, #70	; 0x46
 8005fbe:	f002 fa99 	bl	80084f4 <HAL_NVIC_EnableIRQ>

}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40023800 	.word	0x40023800

08005fd0 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0

}
 8005fd4:	bf00      	nop
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	af00      	add	r7, sp, #0
return 0;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8006018:	4a10      	ldr	r2, [pc, #64]	; (800605c <MX_FREERTOS_Init+0x48>)
 800601a:	2101      	movs	r1, #1
 800601c:	2010      	movs	r0, #16
 800601e:	f005 fb08 	bl	800b632 <osMessageQueueNew>
 8006022:	4603      	mov	r3, r0
 8006024:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <MX_FREERTOS_Init+0x4c>)
 8006026:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006028:	4a0e      	ldr	r2, [pc, #56]	; (8006064 <MX_FREERTOS_Init+0x50>)
 800602a:	2100      	movs	r1, #0
 800602c:	480e      	ldr	r0, [pc, #56]	; (8006068 <MX_FREERTOS_Init+0x54>)
 800602e:	f005 f945 	bl	800b2bc <osThreadNew>
 8006032:	4603      	mov	r3, r0
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <MX_FREERTOS_Init+0x58>)
 8006036:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 8006038:	4a0d      	ldr	r2, [pc, #52]	; (8006070 <MX_FREERTOS_Init+0x5c>)
 800603a:	2100      	movs	r1, #0
 800603c:	480d      	ldr	r0, [pc, #52]	; (8006074 <MX_FREERTOS_Init+0x60>)
 800603e:	f005 f93d 	bl	800b2bc <osThreadNew>
 8006042:	4603      	mov	r3, r0
 8006044:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <MX_FREERTOS_Init+0x64>)
 8006046:	6013      	str	r3, [r2, #0]

  /* creation of testbench */
  testbenchHandle = osThreadNew(testbench_entry, NULL, &testbench_attributes);
 8006048:	4a0c      	ldr	r2, [pc, #48]	; (800607c <MX_FREERTOS_Init+0x68>)
 800604a:	2100      	movs	r1, #0
 800604c:	480c      	ldr	r0, [pc, #48]	; (8006080 <MX_FREERTOS_Init+0x6c>)
 800604e:	f005 f935 	bl	800b2bc <osThreadNew>
 8006052:	4603      	mov	r3, r0
 8006054:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <MX_FREERTOS_Init+0x70>)
 8006056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8006058:	bf00      	nop
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08010a44 	.word	0x08010a44
 8006060:	20000bec 	.word	0x20000bec
 8006064:	080109d8 	.word	0x080109d8
 8006068:	08006089 	.word	0x08006089
 800606c:	20000920 	.word	0x20000920
 8006070:	080109fc 	.word	0x080109fc
 8006074:	080018a5 	.word	0x080018a5
 8006078:	20000be4 	.word	0x20000be4
 800607c:	08010a20 	.word	0x08010a20
 8006080:	0800549d 	.word	0x0800549d
 8006084:	20000be8 	.word	0x20000be8

08006088 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006090:	2001      	movs	r0, #1
 8006092:	f005 f9a5 	bl	800b3e0 <osDelay>
 8006096:	e7fb      	b.n	8006090 <StartDefaultTask+0x8>

08006098 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	609a      	str	r2, [r3, #8]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	4a4e      	ldr	r2, [pc, #312]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	6313      	str	r3, [r2, #48]	; 0x30
 80060be:	4b4c      	ldr	r3, [pc, #304]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	4b48      	ldr	r3, [pc, #288]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4a47      	ldr	r2, [pc, #284]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	6313      	str	r3, [r2, #48]	; 0x30
 80060da:	4b45      	ldr	r3, [pc, #276]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	4b41      	ldr	r3, [pc, #260]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	4a40      	ldr	r2, [pc, #256]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6313      	str	r3, [r2, #48]	; 0x30
 80060f6:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <MX_GPIO_Init+0x158>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	60bb      	str	r3, [r7, #8]
 8006100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	607b      	str	r3, [r7, #4]
 8006106:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <MX_GPIO_Init+0x158>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	4a39      	ldr	r2, [pc, #228]	; (80061f0 <MX_GPIO_Init+0x158>)
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6313      	str	r3, [r2, #48]	; 0x30
 8006112:	4b37      	ldr	r3, [pc, #220]	; (80061f0 <MX_GPIO_Init+0x158>)
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800611e:	2300      	movs	r3, #0
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <MX_GPIO_Init+0x158>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	4a32      	ldr	r2, [pc, #200]	; (80061f0 <MX_GPIO_Init+0x158>)
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	6313      	str	r3, [r2, #48]	; 0x30
 800612e:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <MX_GPIO_Init+0x158>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800613a:	2200      	movs	r2, #0
 800613c:	f641 4102 	movw	r1, #7170	; 0x1c02
 8006140:	482c      	ldr	r0, [pc, #176]	; (80061f4 <MX_GPIO_Init+0x15c>)
 8006142:	f002 fe87 	bl	8008e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006146:	2305      	movs	r3, #5
 8006148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800614a:	2303      	movs	r3, #3
 800614c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	4619      	mov	r1, r3
 8006158:	4827      	ldr	r0, [pc, #156]	; (80061f8 <MX_GPIO_Init+0x160>)
 800615a:	f002 fcdf 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 800615e:	230a      	movs	r3, #10
 8006160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006162:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4619      	mov	r1, r3
 8006172:	4821      	ldr	r0, [pc, #132]	; (80061f8 <MX_GPIO_Init+0x160>)
 8006174:	f002 fcd2 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 8006178:	f641 4302 	movw	r3, #7170	; 0x1c02
 800617c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800617e:	2301      	movs	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006186:	2300      	movs	r3, #0
 8006188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800618a:	f107 0314 	add.w	r3, r7, #20
 800618e:	4619      	mov	r1, r3
 8006190:	4818      	ldr	r0, [pc, #96]	; (80061f4 <MX_GPIO_Init+0x15c>)
 8006192:	f002 fcc3 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8006196:	2318      	movs	r3, #24
 8006198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	4619      	mov	r1, r3
 80061a8:	4814      	ldr	r0, [pc, #80]	; (80061fc <MX_GPIO_Init+0x164>)
 80061aa:	f002 fcb7 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIN3_Pin|DIN4_Pin;
 80061ae:	2390      	movs	r3, #144	; 0x90
 80061b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061ba:	f107 0314 	add.w	r3, r7, #20
 80061be:	4619      	mov	r1, r3
 80061c0:	480c      	ldr	r0, [pc, #48]	; (80061f4 <MX_GPIO_Init+0x15c>)
 80061c2:	f002 fcab 	bl	8008b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80061c6:	2200      	movs	r2, #0
 80061c8:	2105      	movs	r1, #5
 80061ca:	2007      	movs	r0, #7
 80061cc:	f002 f976 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80061d0:	2007      	movs	r0, #7
 80061d2:	f002 f98f 	bl	80084f4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80061d6:	2200      	movs	r2, #0
 80061d8:	2105      	movs	r1, #5
 80061da:	2009      	movs	r0, #9
 80061dc:	f002 f96e 	bl	80084bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80061e0:	2009      	movs	r0, #9
 80061e2:	f002 f987 	bl	80084f4 <HAL_NVIC_EnableIRQ>

}
 80061e6:	bf00      	nop
 80061e8:	3728      	adds	r7, #40	; 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	40023800 	.word	0x40023800
 80061f4:	40020400 	.word	0x40020400
 80061f8:	40020800 	.word	0x40020800
 80061fc:	40020c00 	.word	0x40020c00

08006200 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <MX_I2C1_Init+0x50>)
 8006206:	4a13      	ldr	r2, [pc, #76]	; (8006254 <MX_I2C1_Init+0x54>)
 8006208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <MX_I2C1_Init+0x50>)
 800620c:	4a12      	ldr	r2, [pc, #72]	; (8006258 <MX_I2C1_Init+0x58>)
 800620e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <MX_I2C1_Init+0x50>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006216:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <MX_I2C1_Init+0x50>)
 8006218:	2200      	movs	r2, #0
 800621a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800621c:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <MX_I2C1_Init+0x50>)
 800621e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <MX_I2C1_Init+0x50>)
 8006226:	2200      	movs	r2, #0
 8006228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <MX_I2C1_Init+0x50>)
 800622c:	2200      	movs	r2, #0
 800622e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <MX_I2C1_Init+0x50>)
 8006232:	2200      	movs	r2, #0
 8006234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <MX_I2C1_Init+0x50>)
 8006238:	2200      	movs	r2, #0
 800623a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800623c:	4804      	ldr	r0, [pc, #16]	; (8006250 <MX_I2C1_Init+0x50>)
 800623e:	f002 fe3b 	bl	8008eb8 <HAL_I2C_Init>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006248:	f000 f8fa 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000bf0 	.word	0x20000bf0
 8006254:	40005400 	.word	0x40005400
 8006258:	000186a0 	.word	0x000186a0

0800625c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_I2C_MspInit+0x84>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d12c      	bne.n	80062d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	6313      	str	r3, [r2, #48]	; 0x30
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 800629a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800629e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062a0:	2312      	movs	r3, #18
 80062a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062a4:	2301      	movs	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a8:	2303      	movs	r3, #3
 80062aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80062ac:	2304      	movs	r3, #4
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	4619      	mov	r1, r3
 80062b6:	480c      	ldr	r0, [pc, #48]	; (80062e8 <HAL_I2C_MspInit+0x8c>)
 80062b8:	f002 fc30 	bl	8008b1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	4a07      	ldr	r2, [pc, #28]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 80062c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ca:	6413      	str	r3, [r2, #64]	; 0x40
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_I2C_MspInit+0x88>)
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80062d8:	bf00      	nop
 80062da:	3728      	adds	r7, #40	; 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40005400 	.word	0x40005400
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020400 	.word	0x40020400

080062ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062f0:	f000 feec 	bl	80070cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062f4:	f000 f828 	bl	8006348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062f8:	f7ff fece 	bl	8006098 <MX_GPIO_Init>
  MX_DMA_Init();
 80062fc:	f7ff fe30 	bl	8005f60 <MX_DMA_Init>
  MX_ADC1_Init();
 8006300:	f7ff fa94 	bl	800582c <MX_ADC1_Init>
  MX_CAN1_Init();
 8006304:	f7ff fcba 	bl	8005c7c <MX_CAN1_Init>
  MX_CAN2_Init();
 8006308:	f7ff fcee 	bl	8005ce8 <MX_CAN2_Init>
  MX_CRC_Init();
 800630c:	f7ff fdf2 	bl	8005ef4 <MX_CRC_Init>
  MX_RNG_Init();
 8006310:	f000 f89c 	bl	800644c <MX_RNG_Init>
  MX_USART2_UART_Init();
 8006314:	f000 fda2 	bl	8006e5c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8006318:	f000 fba4 	bl	8006a64 <MX_TIM4_Init>
  MX_ADC2_Init();
 800631c:	f7ff fb02 	bl	8005924 <MX_ADC2_Init>
  MX_I2C1_Init();
 8006320:	f7ff ff6e 	bl	8006200 <MX_I2C1_Init>
  MX_SPI2_Init();
 8006324:	f000 f8c8 	bl	80064b8 <MX_SPI2_Init>
  MX_TIM5_Init();
 8006328:	f000 fc28 	bl	8006b7c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800632c:	f000 fd6c 	bl	8006e08 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8006330:	f000 fc78 	bl	8006c24 <MX_TIM14_Init>
  MX_TIM2_Init();
 8006334:	f000 fb48 	bl	80069c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006338:	f004 ff76 	bl	800b228 <osKernelInitialize>
  MX_FREERTOS_Init();
 800633c:	f7ff fe6a 	bl	8006014 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006340:	f004 ff96 	bl	800b270 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006344:	e7fe      	b.n	8006344 <main+0x58>
	...

08006348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b094      	sub	sp, #80	; 0x50
 800634c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800634e:	f107 0320 	add.w	r3, r7, #32
 8006352:	2230      	movs	r2, #48	; 0x30
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f009 f962 	bl	800f620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800636c:	2300      	movs	r3, #0
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	4b28      	ldr	r3, [pc, #160]	; (8006414 <SystemClock_Config+0xcc>)
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	4a27      	ldr	r2, [pc, #156]	; (8006414 <SystemClock_Config+0xcc>)
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800637a:	6413      	str	r3, [r2, #64]	; 0x40
 800637c:	4b25      	ldr	r3, [pc, #148]	; (8006414 <SystemClock_Config+0xcc>)
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006388:	2300      	movs	r3, #0
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <SystemClock_Config+0xd0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a21      	ldr	r2, [pc, #132]	; (8006418 <SystemClock_Config+0xd0>)
 8006392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <SystemClock_Config+0xd0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063ae:	2302      	movs	r3, #2
 80063b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80063b8:	2308      	movs	r3, #8
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80063bc:	23a8      	movs	r3, #168	; 0xa8
 80063be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80063c0:	2302      	movs	r3, #2
 80063c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80063c4:	2307      	movs	r3, #7
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063c8:	f107 0320 	add.w	r3, r7, #32
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 feb7 	bl	8009140 <HAL_RCC_OscConfig>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80063d8:	f000 f832 	bl	8006440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063dc:	230f      	movs	r3, #15
 80063de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063e0:	2302      	movs	r3, #2
 80063e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80063f4:	f107 030c 	add.w	r3, r7, #12
 80063f8:	2105      	movs	r1, #5
 80063fa:	4618      	mov	r0, r3
 80063fc:	f003 f918 	bl	8009630 <HAL_RCC_ClockConfig>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006406:	f000 f81b 	bl	8006440 <Error_Handler>
  }
}
 800640a:	bf00      	nop
 800640c:	3750      	adds	r7, #80	; 0x50
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	40007000 	.word	0x40007000

0800641c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800642e:	f000 fe6f 	bl	8007110 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000

08006440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006444:	b672      	cpsid	i
}
 8006446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006448:	e7fe      	b.n	8006448 <Error_Handler+0x8>
	...

0800644c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <MX_RNG_Init+0x20>)
 8006452:	4a07      	ldr	r2, [pc, #28]	; (8006470 <MX_RNG_Init+0x24>)
 8006454:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006456:	4805      	ldr	r0, [pc, #20]	; (800646c <MX_RNG_Init+0x20>)
 8006458:	f003 fb3a 	bl	8009ad0 <HAL_RNG_Init>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006462:	f7ff ffed 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000c44 	.word	0x20000c44
 8006470:	50060800 	.word	0x50060800

08006474 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <HAL_RNG_MspInit+0x3c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d10d      	bne.n	80064a2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <HAL_RNG_MspInit+0x40>)
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <HAL_RNG_MspInit+0x40>)
 8006490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006494:	6353      	str	r3, [r2, #52]	; 0x34
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <HAL_RNG_MspInit+0x40>)
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	50060800 	.word	0x50060800
 80064b4:	40023800 	.word	0x40023800

080064b8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80064bc:	4b17      	ldr	r3, [pc, #92]	; (800651c <MX_SPI2_Init+0x64>)
 80064be:	4a18      	ldr	r2, [pc, #96]	; (8006520 <MX_SPI2_Init+0x68>)
 80064c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80064c2:	4b16      	ldr	r3, [pc, #88]	; (800651c <MX_SPI2_Init+0x64>)
 80064c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80064ca:	4b14      	ldr	r3, [pc, #80]	; (800651c <MX_SPI2_Init+0x64>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80064d0:	4b12      	ldr	r3, [pc, #72]	; (800651c <MX_SPI2_Init+0x64>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <MX_SPI2_Init+0x64>)
 80064d8:	2200      	movs	r2, #0
 80064da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <MX_SPI2_Init+0x64>)
 80064de:	2200      	movs	r2, #0
 80064e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80064e2:	4b0e      	ldr	r3, [pc, #56]	; (800651c <MX_SPI2_Init+0x64>)
 80064e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <MX_SPI2_Init+0x64>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <MX_SPI2_Init+0x64>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <MX_SPI2_Init+0x64>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <MX_SPI2_Init+0x64>)
 80064fe:	2200      	movs	r2, #0
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <MX_SPI2_Init+0x64>)
 8006504:	220a      	movs	r2, #10
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006508:	4804      	ldr	r0, [pc, #16]	; (800651c <MX_SPI2_Init+0x64>)
 800650a:	f003 fb0b 	bl	8009b24 <HAL_SPI_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006514:	f7ff ff94 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006518:	bf00      	nop
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000c54 	.word	0x20000c54
 8006520:	40003800 	.word	0x40003800

08006524 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	609a      	str	r2, [r3, #8]
 8006538:	60da      	str	r2, [r3, #12]
 800653a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <HAL_SPI_MspInit+0x84>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d12c      	bne.n	80065a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <HAL_SPI_MspInit+0x88>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <HAL_SPI_MspInit+0x88>)
 8006550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006554:	6413      	str	r3, [r2, #64]	; 0x40
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <HAL_SPI_MspInit+0x88>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <HAL_SPI_MspInit+0x88>)
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	4a10      	ldr	r2, [pc, #64]	; (80065ac <HAL_SPI_MspInit+0x88>)
 800656c:	f043 0302 	orr.w	r3, r3, #2
 8006570:	6313      	str	r3, [r2, #48]	; 0x30
 8006572:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <HAL_SPI_MspInit+0x88>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800657e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006584:	2302      	movs	r3, #2
 8006586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800658c:	2303      	movs	r3, #3
 800658e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006590:	2305      	movs	r3, #5
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006594:	f107 0314 	add.w	r3, r7, #20
 8006598:	4619      	mov	r1, r3
 800659a:	4805      	ldr	r0, [pc, #20]	; (80065b0 <HAL_SPI_MspInit+0x8c>)
 800659c:	f002 fabe 	bl	8008b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80065a0:	bf00      	nop
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40003800 	.word	0x40003800
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40020400 	.word	0x40020400

080065b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <HAL_MspInit+0x54>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	4a11      	ldr	r2, [pc, #68]	; (8006608 <HAL_MspInit+0x54>)
 80065c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065c8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <HAL_MspInit+0x54>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_MspInit+0x54>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <HAL_MspInit+0x54>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6413      	str	r3, [r2, #64]	; 0x40
 80065e6:	4b08      	ldr	r3, [pc, #32]	; (8006608 <HAL_MspInit+0x54>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80065f2:	2200      	movs	r2, #0
 80065f4:	210f      	movs	r1, #15
 80065f6:	f06f 0001 	mvn.w	r0, #1
 80065fa:	f001 ff5f 	bl	80084bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800

0800660c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800661c:	2300      	movs	r3, #0
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	4b2f      	ldr	r3, [pc, #188]	; (80066e0 <HAL_InitTick+0xd4>)
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <HAL_InitTick+0xd4>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6453      	str	r3, [r2, #68]	; 0x44
 800662c:	4b2c      	ldr	r3, [pc, #176]	; (80066e0 <HAL_InitTick+0xd4>)
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006638:	f107 020c 	add.w	r2, r7, #12
 800663c:	f107 0310 	add.w	r3, r7, #16
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f003 fa12 	bl	8009a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006648:	f003 f9fc 	bl	8009a44 <HAL_RCC_GetPCLK2Freq>
 800664c:	4603      	mov	r3, r0
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <HAL_InitTick+0xd8>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	0c9b      	lsrs	r3, r3, #18
 800665c:	3b01      	subs	r3, #1
 800665e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006660:	4b21      	ldr	r3, [pc, #132]	; (80066e8 <HAL_InitTick+0xdc>)
 8006662:	4a22      	ldr	r2, [pc, #136]	; (80066ec <HAL_InitTick+0xe0>)
 8006664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_InitTick+0xdc>)
 8006668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800666c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800666e:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_InitTick+0xdc>)
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006674:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <HAL_InitTick+0xdc>)
 8006676:	2200      	movs	r2, #0
 8006678:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_InitTick+0xdc>)
 800667c:	2200      	movs	r2, #0
 800667e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_InitTick+0xdc>)
 8006682:	2200      	movs	r2, #0
 8006684:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006686:	4818      	ldr	r0, [pc, #96]	; (80066e8 <HAL_InitTick+0xdc>)
 8006688:	f003 fad5 	bl	8009c36 <HAL_TIM_Base_Init>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006696:	2b00      	cmp	r3, #0
 8006698:	d11b      	bne.n	80066d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800669a:	4813      	ldr	r0, [pc, #76]	; (80066e8 <HAL_InitTick+0xdc>)
 800669c:	f003 fb1a 	bl	8009cd4 <HAL_TIM_Base_Start_IT>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80066a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d111      	bne.n	80066d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80066ae:	2019      	movs	r0, #25
 80066b0:	f001 ff20 	bl	80084f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d808      	bhi.n	80066cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80066ba:	2200      	movs	r2, #0
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	2019      	movs	r0, #25
 80066c0:	f001 fefc 	bl	80084bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80066c4:	4a0a      	ldr	r2, [pc, #40]	; (80066f0 <HAL_InitTick+0xe4>)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e002      	b.n	80066d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80066d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3730      	adds	r7, #48	; 0x30
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	431bde83 	.word	0x431bde83
 80066e8:	20000cac 	.word	0x20000cac
 80066ec:	40010000 	.word	0x40010000
 80066f0:	20000014 	.word	0x20000014

080066f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066f8:	e7fe      	b.n	80066f8 <NMI_Handler+0x4>

080066fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066fe:	e7fe      	b.n	80066fe <HardFault_Handler+0x4>

08006700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006704:	e7fe      	b.n	8006704 <MemManage_Handler+0x4>

08006706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800670a:	e7fe      	b.n	800670a <BusFault_Handler+0x4>

0800670c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <UsageFault_Handler+0x4>

08006712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006716:	bf00      	nop
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 8006724:	2002      	movs	r0, #2
 8006726:	f002 fbaf 	bl	8008e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}

0800672e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8006732:	2008      	movs	r0, #8
 8006734:	f002 fba8 	bl	8008e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}

0800673c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <CAN1_TX_IRQHandler+0x10>)
 8006742:	f001 fbcf 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200008c4 	.word	0x200008c4

08006750 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006754:	4802      	ldr	r0, [pc, #8]	; (8006760 <CAN1_RX0_IRQHandler+0x10>)
 8006756:	f001 fbc5 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200008c4 	.word	0x200008c4

08006764 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006768:	4802      	ldr	r0, [pc, #8]	; (8006774 <CAN1_RX1_IRQHandler+0x10>)
 800676a:	f001 fbbb 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200008c4 	.word	0x200008c4

08006778 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800677c:	4802      	ldr	r0, [pc, #8]	; (8006788 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800677e:	f003 fc18 	bl	8009fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000cac 	.word	0x20000cac

0800678c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006790:	4802      	ldr	r0, [pc, #8]	; (800679c <DMA2_Stream0_IRQHandler+0x10>)
 8006792:	f001 ff87 	bl	80086a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000804 	.word	0x20000804

080067a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80067a4:	4802      	ldr	r0, [pc, #8]	; (80067b0 <DMA2_Stream2_IRQHandler+0x10>)
 80067a6:	f001 ff7d 	bl	80086a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000864 	.word	0x20000864

080067b4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80067b8:	4802      	ldr	r0, [pc, #8]	; (80067c4 <CAN2_TX_IRQHandler+0x10>)
 80067ba:	f001 fb93 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200008ec 	.word	0x200008ec

080067c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80067cc:	4802      	ldr	r0, [pc, #8]	; (80067d8 <CAN2_RX0_IRQHandler+0x10>)
 80067ce:	f001 fb89 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200008ec 	.word	0x200008ec

080067dc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80067e0:	4802      	ldr	r0, [pc, #8]	; (80067ec <CAN2_RX1_IRQHandler+0x10>)
 80067e2:	f001 fb7f 	bl	8007ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	200008ec 	.word	0x200008ec

080067f0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80067f4:	4802      	ldr	r0, [pc, #8]	; (8006800 <DMA2_Stream5_IRQHandler+0x10>)
 80067f6:	f001 ff55 	bl	80086a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000f00 	.word	0x20000f00

08006804 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006808:	4802      	ldr	r0, [pc, #8]	; (8006814 <DMA2_Stream7_IRQHandler+0x10>)
 800680a:	f001 ff4b 	bl	80086a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000ea0 	.word	0x20000ea0

08006818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return 1;
 800681c:	2301      	movs	r3, #1
}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <_kill>:

int _kill(int pid, int sig)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006832:	f008 fdbb 	bl	800f3ac <__errno>
 8006836:	4603      	mov	r3, r0
 8006838:	2216      	movs	r2, #22
 800683a:	601a      	str	r2, [r3, #0]
  return -1;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <_exit>:

void _exit (int status)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006850:	f04f 31ff 	mov.w	r1, #4294967295
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ffe7 	bl	8006828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800685a:	e7fe      	b.n	800685a <_exit+0x12>

0800685c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e00a      	b.n	8006884 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800686e:	f3af 8000 	nop.w
 8006872:	4601      	mov	r1, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	60ba      	str	r2, [r7, #8]
 800687a:	b2ca      	uxtb	r2, r1
 800687c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	3301      	adds	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	dbf0      	blt.n	800686e <_read+0x12>
  }

  return len;
 800688c:	687b      	ldr	r3, [r7, #4]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	e009      	b.n	80068bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	60ba      	str	r2, [r7, #8]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	dbf1      	blt.n	80068a8 <_write+0x12>
  }
  return len;
 80068c4:	687b      	ldr	r3, [r7, #4]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <_close>:

int _close(int file)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068f6:	605a      	str	r2, [r3, #4]
  return 0;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <_isatty>:

int _isatty(int file)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800690e:	2301      	movs	r3, #1
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <_sbrk+0x5c>)
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <_sbrk+0x60>)
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800694c:	4b13      	ldr	r3, [pc, #76]	; (800699c <_sbrk+0x64>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d102      	bne.n	800695a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006954:	4b11      	ldr	r3, [pc, #68]	; (800699c <_sbrk+0x64>)
 8006956:	4a12      	ldr	r2, [pc, #72]	; (80069a0 <_sbrk+0x68>)
 8006958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <_sbrk+0x64>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d207      	bcs.n	8006978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006968:	f008 fd20 	bl	800f3ac <__errno>
 800696c:	4603      	mov	r3, r0
 800696e:	220c      	movs	r2, #12
 8006970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	e009      	b.n	800698c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006978:	4b08      	ldr	r3, [pc, #32]	; (800699c <_sbrk+0x64>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <_sbrk+0x64>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4413      	add	r3, r2
 8006986:	4a05      	ldr	r2, [pc, #20]	; (800699c <_sbrk+0x64>)
 8006988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20020000 	.word	0x20020000
 8006998:	00000800 	.word	0x00000800
 800699c:	20000cf4 	.word	0x20000cf4
 80069a0:	20009e28 	.word	0x20009e28

080069a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <SystemInit+0x20>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <SystemInit+0x20>)
 80069b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	609a      	str	r2, [r3, #8]
 80069da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069dc:	463b      	mov	r3, r7
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80069e4:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <MX_TIM2_Init+0x98>)
 80069e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80069ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80069ec:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <MX_TIM2_Init+0x98>)
 80069ee:	f240 3247 	movw	r2, #839	; 0x347
 80069f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <MX_TIM2_Init+0x98>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <MX_TIM2_Init+0x98>)
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006a00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <MX_TIM2_Init+0x98>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <MX_TIM2_Init+0x98>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a0e:	4814      	ldr	r0, [pc, #80]	; (8006a60 <MX_TIM2_Init+0x98>)
 8006a10:	f003 f911 	bl	8009c36 <HAL_TIM_Base_Init>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006a1a:	f7ff fd11 	bl	8006440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a24:	f107 0308 	add.w	r3, r7, #8
 8006a28:	4619      	mov	r1, r3
 8006a2a:	480d      	ldr	r0, [pc, #52]	; (8006a60 <MX_TIM2_Init+0x98>)
 8006a2c:	f003 fc8c 	bl	800a348 <HAL_TIM_ConfigClockSource>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006a36:	f7ff fd03 	bl	8006440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a42:	463b      	mov	r3, r7
 8006a44:	4619      	mov	r1, r3
 8006a46:	4806      	ldr	r0, [pc, #24]	; (8006a60 <MX_TIM2_Init+0x98>)
 8006a48:	f004 f858 	bl	800aafc <HAL_TIMEx_MasterConfigSynchronization>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006a52:	f7ff fcf5 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a56:	bf00      	nop
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000cf8 	.word	0x20000cf8

08006a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	; 0x38
 8006a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	605a      	str	r2, [r3, #4]
 8006a74:	609a      	str	r2, [r3, #8]
 8006a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a78:	f107 0320 	add.w	r3, r7, #32
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a82:	1d3b      	adds	r3, r7, #4
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
 8006a90:	615a      	str	r2, [r3, #20]
 8006a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006a94:	4b37      	ldr	r3, [pc, #220]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006a96:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <MX_TIM4_Init+0x114>)
 8006a98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8006a9a:	4b36      	ldr	r3, [pc, #216]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006a9c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8006aa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa2:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8006aa8:	4b32      	ldr	r3, [pc, #200]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006aaa:	22fe      	movs	r2, #254	; 0xfe
 8006aac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aae:	4b31      	ldr	r3, [pc, #196]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab4:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006aba:	482e      	ldr	r0, [pc, #184]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006abc:	f003 f8bb 	bl	8009c36 <HAL_TIM_Base_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8006ac6:	f7ff fcbb 	bl	8006440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4827      	ldr	r0, [pc, #156]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006ad8:	f003 fc36 	bl	800a348 <HAL_TIM_ConfigClockSource>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8006ae2:	f7ff fcad 	bl	8006440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006ae6:	4823      	ldr	r0, [pc, #140]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006ae8:	f003 f964 	bl	8009db4 <HAL_TIM_PWM_Init>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8006af2:	f7ff fca5 	bl	8006440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006afe:	f107 0320 	add.w	r3, r7, #32
 8006b02:	4619      	mov	r1, r3
 8006b04:	481b      	ldr	r0, [pc, #108]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006b06:	f003 fff9 	bl	800aafc <HAL_TIMEx_MasterConfigSynchronization>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8006b10:	f7ff fc96 	bl	8006440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b14:	2360      	movs	r3, #96	; 0x60
 8006b16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006b24:	1d3b      	adds	r3, r7, #4
 8006b26:	2200      	movs	r2, #0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4812      	ldr	r0, [pc, #72]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006b2c:	f003 fb4a 	bl	800a1c4 <HAL_TIM_PWM_ConfigChannel>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8006b36:	f7ff fc83 	bl	8006440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006b3a:	1d3b      	adds	r3, r7, #4
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	4619      	mov	r1, r3
 8006b40:	480c      	ldr	r0, [pc, #48]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006b42:	f003 fb3f 	bl	800a1c4 <HAL_TIM_PWM_ConfigChannel>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8006b4c:	f7ff fc78 	bl	8006440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006b50:	1d3b      	adds	r3, r7, #4
 8006b52:	2208      	movs	r2, #8
 8006b54:	4619      	mov	r1, r3
 8006b56:	4807      	ldr	r0, [pc, #28]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006b58:	f003 fb34 	bl	800a1c4 <HAL_TIM_PWM_ConfigChannel>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8006b62:	f7ff fc6d 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006b66:	4803      	ldr	r0, [pc, #12]	; (8006b74 <MX_TIM4_Init+0x110>)
 8006b68:	f000 f914 	bl	8006d94 <HAL_TIM_MspPostInit>

}
 8006b6c:	bf00      	nop
 8006b6e:	3738      	adds	r7, #56	; 0x38
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000d40 	.word	0x20000d40
 8006b78:	40000800 	.word	0x40000800

08006b7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	; 0x30
 8006b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f008 fd48 	bl	800f620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b90:	1d3b      	adds	r3, r7, #4
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006b98:	4b20      	ldr	r3, [pc, #128]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006b9a:	4a21      	ldr	r2, [pc, #132]	; (8006c20 <MX_TIM5_Init+0xa4>)
 8006b9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8006b9e:	4b1f      	ldr	r3, [pc, #124]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ba4:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006baa:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006bb2:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bb8:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	4619      	mov	r1, r3
 8006be8:	480c      	ldr	r0, [pc, #48]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006bea:	f003 f93c 	bl	8009e66 <HAL_TIM_Encoder_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8006bf4:	f7ff fc24 	bl	8006440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4805      	ldr	r0, [pc, #20]	; (8006c1c <MX_TIM5_Init+0xa0>)
 8006c06:	f003 ff79 	bl	800aafc <HAL_TIMEx_MasterConfigSynchronization>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8006c10:	f7ff fc16 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006c14:	bf00      	nop
 8006c16:	3730      	adds	r7, #48	; 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000d88 	.word	0x20000d88
 8006c20:	40000c00 	.word	0x40000c00

08006c24 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006c28:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <MX_TIM14_Init+0x44>)
 8006c2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8006c2e:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c30:	f240 3247 	movw	r2, #839	; 0x347
 8006c34:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c36:	4b0b      	ldr	r3, [pc, #44]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c42:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c4a:	4b06      	ldr	r3, [pc, #24]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006c50:	4804      	ldr	r0, [pc, #16]	; (8006c64 <MX_TIM14_Init+0x40>)
 8006c52:	f002 fff0 	bl	8009c36 <HAL_TIM_Base_Init>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8006c5c:	f7ff fbf0 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000dd0 	.word	0x20000dd0
 8006c68:	40002000 	.word	0x40002000

08006c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7c:	d10e      	bne.n	8006c9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	4a1c      	ldr	r2, [pc, #112]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8006c9a:	e026      	b.n	8006cea <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <HAL_TIM_Base_MspInit+0x90>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	4a12      	ldr	r2, [pc, #72]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006cb0:	f043 0304 	orr.w	r3, r3, #4
 8006cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb6:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f003 0304 	and.w	r3, r3, #4
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	693b      	ldr	r3, [r7, #16]
}
 8006cc2:	e012      	b.n	8006cea <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a0d      	ldr	r2, [pc, #52]	; (8006d00 <HAL_TIM_Base_MspInit+0x94>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d10d      	bne.n	8006cea <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	4a08      	ldr	r2, [pc, #32]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <HAL_TIM_Base_MspInit+0x8c>)
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40002000 	.word	0x40002000

08006d04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	609a      	str	r2, [r3, #8]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <HAL_TIM_Encoder_MspInit+0x84>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d12b      	bne.n	8006d7e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	4b18      	ldr	r3, [pc, #96]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d30:	f043 0308 	orr.w	r3, r3, #8
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
 8006d36:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d4c:	f043 0301 	orr.w	r3, r3, #1
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
 8006d52:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <HAL_TIM_Encoder_MspInit+0x88>)
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d62:	2302      	movs	r3, #2
 8006d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006d6e:	2302      	movs	r3, #2
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	4619      	mov	r1, r3
 8006d78:	4805      	ldr	r0, [pc, #20]	; (8006d90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8006d7a:	f001 fecf 	bl	8008b1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006d7e:	bf00      	nop
 8006d80:	3728      	adds	r7, #40	; 0x28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40020000 	.word	0x40020000

08006d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <HAL_TIM_MspPostInit+0x68>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d11e      	bne.n	8006df4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <HAL_TIM_MspPostInit+0x6c>)
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	4a10      	ldr	r2, [pc, #64]	; (8006e00 <HAL_TIM_MspPostInit+0x6c>)
 8006dc0:	f043 0308 	orr.w	r3, r3, #8
 8006dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc6:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <HAL_TIM_MspPostInit+0x6c>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	60bb      	str	r3, [r7, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8006dd2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8006dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd8:	2302      	movs	r3, #2
 8006dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006de4:	2302      	movs	r3, #2
 8006de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006de8:	f107 030c 	add.w	r3, r7, #12
 8006dec:	4619      	mov	r1, r3
 8006dee:	4805      	ldr	r0, [pc, #20]	; (8006e04 <HAL_TIM_MspPostInit+0x70>)
 8006df0:	f001 fe94 	bl	8008b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006df4:	bf00      	nop
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40020c00 	.word	0x40020c00

08006e08 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e0e:	4a12      	ldr	r2, [pc, #72]	; (8006e58 <MX_USART1_UART_Init+0x50>)
 8006e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006e12:	4b10      	ldr	r3, [pc, #64]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e1a:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006e20:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e2e:	220c      	movs	r2, #12
 8006e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e38:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e40:	4804      	ldr	r0, [pc, #16]	; (8006e54 <MX_USART1_UART_Init+0x4c>)
 8006e42:	f003 feeb 	bl	800ac1c <HAL_UART_Init>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8006e4c:	f7ff faf8 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e50:	bf00      	nop
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000e18 	.word	0x20000e18
 8006e58:	40011000 	.word	0x40011000

08006e5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006e60:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e62:	4a12      	ldr	r2, [pc, #72]	; (8006eac <MX_USART2_UART_Init+0x50>)
 8006e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e68:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8006e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006e6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e82:	220c      	movs	r2, #12
 8006e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e86:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e8c:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006e92:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <MX_USART2_UART_Init+0x4c>)
 8006e94:	f003 fec2 	bl	800ac1c <HAL_UART_Init>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006e9e:	f7ff facf 	bl	8006440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006ea2:	bf00      	nop
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000e5c 	.word	0x20000e5c
 8006eac:	40004400 	.word	0x40004400

08006eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb8:	f107 031c 	add.w	r3, r7, #28
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	60da      	str	r2, [r3, #12]
 8006ec6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a61      	ldr	r2, [pc, #388]	; (8007054 <HAL_UART_MspInit+0x1a4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f040 808a 	bne.w	8006fe8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	4b5f      	ldr	r3, [pc, #380]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	4a5e      	ldr	r2, [pc, #376]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006ede:	f043 0310 	orr.w	r3, r3, #16
 8006ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee4:	4b5c      	ldr	r3, [pc, #368]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	4b58      	ldr	r3, [pc, #352]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	4a57      	ldr	r2, [pc, #348]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	6313      	str	r3, [r2, #48]	; 0x30
 8006f00:	4b55      	ldr	r3, [pc, #340]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006f0c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8006f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f12:	2302      	movs	r3, #2
 8006f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f1e:	2307      	movs	r3, #7
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f22:	f107 031c 	add.w	r3, r7, #28
 8006f26:	4619      	mov	r1, r3
 8006f28:	484c      	ldr	r0, [pc, #304]	; (800705c <HAL_UART_MspInit+0x1ac>)
 8006f2a:	f001 fdf7 	bl	8008b1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006f2e:	4b4c      	ldr	r3, [pc, #304]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f30:	4a4c      	ldr	r2, [pc, #304]	; (8007064 <HAL_UART_MspInit+0x1b4>)
 8006f32:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006f34:	4b4a      	ldr	r3, [pc, #296]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f3c:	4b48      	ldr	r3, [pc, #288]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f3e:	2240      	movs	r2, #64	; 0x40
 8006f40:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f42:	4b47      	ldr	r3, [pc, #284]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f48:	4b45      	ldr	r3, [pc, #276]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f50:	4b43      	ldr	r3, [pc, #268]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f56:	4b42      	ldr	r3, [pc, #264]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006f5c:	4b40      	ldr	r3, [pc, #256]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f62:	4b3f      	ldr	r3, [pc, #252]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f68:	4b3d      	ldr	r3, [pc, #244]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006f6e:	483c      	ldr	r0, [pc, #240]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f70:	f001 faea 	bl	8008548 <HAL_DMA_Init>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006f7a:	f7ff fa61 	bl	8006440 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a37      	ldr	r2, [pc, #220]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f82:	635a      	str	r2, [r3, #52]	; 0x34
 8006f84:	4a36      	ldr	r2, [pc, #216]	; (8007060 <HAL_UART_MspInit+0x1b0>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8006f8a:	4b37      	ldr	r3, [pc, #220]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006f8c:	4a37      	ldr	r2, [pc, #220]	; (800706c <HAL_UART_MspInit+0x1bc>)
 8006f8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006f90:	4b35      	ldr	r3, [pc, #212]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f96:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f98:	4b33      	ldr	r3, [pc, #204]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f9e:	4b32      	ldr	r3, [pc, #200]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fa4:	4b30      	ldr	r3, [pc, #192]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006faa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fac:	4b2e      	ldr	r3, [pc, #184]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006fb8:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fbe:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006fca:	4827      	ldr	r0, [pc, #156]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fcc:	f001 fabc 	bl	8008548 <HAL_DMA_Init>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8006fd6:	f7ff fa33 	bl	8006440 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fde:	639a      	str	r2, [r3, #56]	; 0x38
 8006fe0:	4a21      	ldr	r2, [pc, #132]	; (8007068 <HAL_UART_MspInit+0x1b8>)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006fe6:	e030      	b.n	800704a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <HAL_UART_MspInit+0x1c0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d12b      	bne.n	800704a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8006ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007000:	6413      	str	r3, [r2, #64]	; 0x40
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	4a10      	ldr	r2, [pc, #64]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8007018:	f043 0308 	orr.w	r3, r3, #8
 800701c:	6313      	str	r3, [r2, #48]	; 0x30
 800701e:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <HAL_UART_MspInit+0x1a8>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800702a:	2360      	movs	r3, #96	; 0x60
 800702c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702e:	2302      	movs	r3, #2
 8007030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007036:	2303      	movs	r3, #3
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800703a:	2307      	movs	r3, #7
 800703c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800703e:	f107 031c 	add.w	r3, r7, #28
 8007042:	4619      	mov	r1, r3
 8007044:	480b      	ldr	r0, [pc, #44]	; (8007074 <HAL_UART_MspInit+0x1c4>)
 8007046:	f001 fd69 	bl	8008b1c <HAL_GPIO_Init>
}
 800704a:	bf00      	nop
 800704c:	3730      	adds	r7, #48	; 0x30
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40011000 	.word	0x40011000
 8007058:	40023800 	.word	0x40023800
 800705c:	40020000 	.word	0x40020000
 8007060:	20000ea0 	.word	0x20000ea0
 8007064:	400264b8 	.word	0x400264b8
 8007068:	20000f00 	.word	0x20000f00
 800706c:	40026488 	.word	0x40026488
 8007070:	40004400 	.word	0x40004400
 8007074:	40020c00 	.word	0x40020c00

08007078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800707c:	480d      	ldr	r0, [pc, #52]	; (80070b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800707e:	490e      	ldr	r1, [pc, #56]	; (80070b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007080:	4a0e      	ldr	r2, [pc, #56]	; (80070bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007084:	e002      	b.n	800708c <LoopCopyDataInit>

08007086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800708a:	3304      	adds	r3, #4

0800708c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800708c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800708e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007090:	d3f9      	bcc.n	8007086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007092:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007094:	4c0b      	ldr	r4, [pc, #44]	; (80070c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007098:	e001      	b.n	800709e <LoopFillZerobss>

0800709a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800709a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800709c:	3204      	adds	r2, #4

0800709e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800709e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070a0:	d3fb      	bcc.n	800709a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80070a2:	f7ff fc7f 	bl	80069a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070a6:	f008 fa7d 	bl	800f5a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070aa:	f7ff f91f 	bl	80062ec <main>
  bx  lr    
 80070ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80070b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80070b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070b8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80070bc:	08010b44 	.word	0x08010b44
  ldr r2, =_sbss
 80070c0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80070c4:	20009e24 	.word	0x20009e24

080070c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070c8:	e7fe      	b.n	80070c8 <ADC_IRQHandler>
	...

080070cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <HAL_Init+0x40>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a0d      	ldr	r2, [pc, #52]	; (800710c <HAL_Init+0x40>)
 80070d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_Init+0x40>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_Init+0x40>)
 80070e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_Init+0x40>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a07      	ldr	r2, [pc, #28]	; (800710c <HAL_Init+0x40>)
 80070ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070f4:	2003      	movs	r0, #3
 80070f6:	f001 f9d6 	bl	80084a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070fa:	2000      	movs	r0, #0
 80070fc:	f7ff fa86 	bl	800660c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007100:	f7ff fa58 	bl	80065b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	40023c00 	.word	0x40023c00

08007110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <HAL_IncTick+0x20>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_IncTick+0x24>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4413      	add	r3, r2
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <HAL_IncTick+0x24>)
 8007122:	6013      	str	r3, [r2, #0]
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	20000018 	.word	0x20000018
 8007134:	20000f60 	.word	0x20000f60

08007138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return uwTick;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <HAL_GetTick+0x14>)
 800713e:	681b      	ldr	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000f60 	.word	0x20000f60

08007150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e033      	b.n	80071ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fe fc8c 	bl	8005a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	d118      	bne.n	80071c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007196:	f023 0302 	bic.w	r3, r3, #2
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f93a 	bl	800741c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
 80071be:	e001      	b.n	80071c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x1c>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e105      	b.n	8007400 <HAL_ADC_ConfigChannel+0x228>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b09      	cmp	r3, #9
 8007202:	d925      	bls.n	8007250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68d9      	ldr	r1, [r3, #12]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	461a      	mov	r2, r3
 8007212:	4613      	mov	r3, r2
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	4413      	add	r3, r2
 8007218:	3b1e      	subs	r3, #30
 800721a:	2207      	movs	r2, #7
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43da      	mvns	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	400a      	ands	r2, r1
 8007228:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68d9      	ldr	r1, [r3, #12]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	4618      	mov	r0, r3
 800723c:	4603      	mov	r3, r0
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	4403      	add	r3, r0
 8007242:	3b1e      	subs	r3, #30
 8007244:	409a      	lsls	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	e022      	b.n	8007296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6919      	ldr	r1, [r3, #16]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	461a      	mov	r2, r3
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	2207      	movs	r2, #7
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	400a      	ands	r2, r1
 8007272:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6919      	ldr	r1, [r3, #16]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	4618      	mov	r0, r3
 8007286:	4603      	mov	r3, r0
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4403      	add	r3, r0
 800728c:	409a      	lsls	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b06      	cmp	r3, #6
 800729c:	d824      	bhi.n	80072e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	3b05      	subs	r3, #5
 80072b0:	221f      	movs	r2, #31
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43da      	mvns	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	400a      	ands	r2, r1
 80072be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	4618      	mov	r0, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	3b05      	subs	r3, #5
 80072da:	fa00 f203 	lsl.w	r2, r0, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	635a      	str	r2, [r3, #52]	; 0x34
 80072e6:	e04c      	b.n	8007382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b0c      	cmp	r3, #12
 80072ee:	d824      	bhi.n	800733a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	3b23      	subs	r3, #35	; 0x23
 8007302:	221f      	movs	r2, #31
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	43da      	mvns	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	400a      	ands	r2, r1
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	4618      	mov	r0, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	3b23      	subs	r3, #35	; 0x23
 800732c:	fa00 f203 	lsl.w	r2, r0, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	631a      	str	r2, [r3, #48]	; 0x30
 8007338:	e023      	b.n	8007382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	3b41      	subs	r3, #65	; 0x41
 800734c:	221f      	movs	r2, #31
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43da      	mvns	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	400a      	ands	r2, r1
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	b29b      	uxth	r3, r3
 8007368:	4618      	mov	r0, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	3b41      	subs	r3, #65	; 0x41
 8007376:	fa00 f203 	lsl.w	r2, r0, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007382:	4b22      	ldr	r3, [pc, #136]	; (800740c <HAL_ADC_ConfigChannel+0x234>)
 8007384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a21      	ldr	r2, [pc, #132]	; (8007410 <HAL_ADC_ConfigChannel+0x238>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d109      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x1cc>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b12      	cmp	r3, #18
 8007396:	d105      	bne.n	80073a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <HAL_ADC_ConfigChannel+0x238>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d123      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x21e>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b10      	cmp	r3, #16
 80073b4:	d003      	beq.n	80073be <HAL_ADC_ConfigChannel+0x1e6>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b11      	cmp	r3, #17
 80073bc:	d11b      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d111      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <HAL_ADC_ConfigChannel+0x23c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a10      	ldr	r2, [pc, #64]	; (8007418 <HAL_ADC_ConfigChannel+0x240>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	0c9a      	lsrs	r2, r3, #18
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	005b      	lsls	r3, r3, #1
 80073e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073e8:	e002      	b.n	80073f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f9      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	40012300 	.word	0x40012300
 8007410:	40012000 	.word	0x40012000
 8007414:	20000010 	.word	0x20000010
 8007418:	431bde83 	.word	0x431bde83

0800741c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007424:	4b79      	ldr	r3, [pc, #484]	; (800760c <ADC_Init+0x1f0>)
 8007426:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	431a      	orrs	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6859      	ldr	r1, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	021a      	lsls	r2, r3, #8
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6859      	ldr	r1, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6899      	ldr	r1, [r3, #8]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ae:	4a58      	ldr	r2, [pc, #352]	; (8007610 <ADC_Init+0x1f4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6899      	ldr	r1, [r3, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6899      	ldr	r1, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
 80074f8:	e00f      	b.n	800751a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007518:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0202 	bic.w	r2, r2, #2
 8007528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6899      	ldr	r1, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7e1b      	ldrb	r3, [r3, #24]
 8007534:	005a      	lsls	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01b      	beq.n	8007580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007556:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	3b01      	subs	r3, #1
 8007574:	035a      	lsls	r2, r3, #13
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	e007      	b.n	8007590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800758e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	051a      	lsls	r2, r3, #20
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80075c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6899      	ldr	r1, [r3, #8]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d2:	025a      	lsls	r2, r3, #9
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6899      	ldr	r1, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	029a      	lsls	r2, r3, #10
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40012300 	.word	0x40012300
 8007610:	0f000001 	.word	0x0f000001

08007614 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e0ed      	b.n	8007802 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fe fb8e 	bl	8005d54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007648:	f7ff fd76 	bl	8007138 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800764e:	e012      	b.n	8007676 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007650:	f7ff fd72 	bl	8007138 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b0a      	cmp	r3, #10
 800765c:	d90b      	bls.n	8007676 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2205      	movs	r2, #5
 800766e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e0c5      	b.n	8007802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0e5      	beq.n	8007650 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0202 	bic.w	r2, r2, #2
 8007692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007694:	f7ff fd50 	bl	8007138 <HAL_GetTick>
 8007698:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800769a:	e012      	b.n	80076c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800769c:	f7ff fd4c 	bl	8007138 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b0a      	cmp	r3, #10
 80076a8:	d90b      	bls.n	80076c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2205      	movs	r2, #5
 80076ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e09f      	b.n	8007802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7e1b      	ldrb	r3, [r3, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d108      	bne.n	80076ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e007      	b.n	80076fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7e5b      	ldrb	r3, [r3, #25]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d108      	bne.n	8007714 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e007      	b.n	8007724 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7e9b      	ldrb	r3, [r3, #26]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d108      	bne.n	800773e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0220 	orr.w	r2, r2, #32
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e007      	b.n	800774e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0220 	bic.w	r2, r2, #32
 800774c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7edb      	ldrb	r3, [r3, #27]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d108      	bne.n	8007768 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0210 	bic.w	r2, r2, #16
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e007      	b.n	8007778 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0210 	orr.w	r2, r2, #16
 8007776:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7f1b      	ldrb	r3, [r3, #28]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d108      	bne.n	8007792 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e007      	b.n	80077a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0208 	bic.w	r2, r2, #8
 80077a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	7f5b      	ldrb	r3, [r3, #29]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d108      	bne.n	80077bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0204 	orr.w	r2, r2, #4
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	e007      	b.n	80077cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0204 	bic.w	r2, r2, #4
 80077ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	ea42 0103 	orr.w	r1, r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007822:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007824:	7cfb      	ldrb	r3, [r7, #19]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d003      	beq.n	8007832 <HAL_CAN_ConfigFilter+0x26>
 800782a:	7cfb      	ldrb	r3, [r7, #19]
 800782c:	2b02      	cmp	r3, #2
 800782e:	f040 80be 	bne.w	80079ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007832:	4b65      	ldr	r3, [pc, #404]	; (80079c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007834:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800783c:	f043 0201 	orr.w	r2, r3, #1
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800784c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	431a      	orrs	r2, r3
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f003 031f 	and.w	r3, r3, #31
 8007872:	2201      	movs	r2, #1
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	43db      	mvns	r3, r3
 8007884:	401a      	ands	r2, r3
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d123      	bne.n	80078dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	43db      	mvns	r3, r3
 800789e:	401a      	ands	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80078b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	3248      	adds	r2, #72	; 0x48
 80078bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	3348      	adds	r3, #72	; 0x48
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	440b      	add	r3, r1
 80078da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d122      	bne.n	800792a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007904:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	3248      	adds	r2, #72	; 0x48
 800790a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800791e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	3348      	adds	r3, #72	; 0x48
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	440b      	add	r3, r1
 8007928:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	43db      	mvns	r3, r3
 800793c:	401a      	ands	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007944:	e007      	b.n	8007956 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	431a      	orrs	r2, r3
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	43db      	mvns	r3, r3
 8007968:	401a      	ands	r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007970:	e007      	b.n	8007982 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	431a      	orrs	r2, r3
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d107      	bne.n	800799a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	431a      	orrs	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079a0:	f023 0201 	bic.w	r2, r3, #1
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e006      	b.n	80079bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	40006400 	.word	0x40006400

080079cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d12e      	bne.n	8007a3e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0201 	bic.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079f8:	f7ff fb9e 	bl	8007138 <HAL_GetTick>
 80079fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80079fe:	e012      	b.n	8007a26 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a00:	f7ff fb9a 	bl	8007138 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b0a      	cmp	r3, #10
 8007a0c:	d90b      	bls.n	8007a26 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e012      	b.n	8007a4c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e5      	bne.n	8007a00 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e006      	b.n	8007a4c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a68:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a72:	7ffb      	ldrb	r3, [r7, #31]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d003      	beq.n	8007a80 <HAL_CAN_AddTxMessage+0x2c>
 8007a78:	7ffb      	ldrb	r3, [r7, #31]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	f040 80b8 	bne.w	8007bf0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80a0 	beq.w	8007be0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	0e1b      	lsrs	r3, r3, #24
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d907      	bls.n	8007ac0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e09e      	b.n	8007bfe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10d      	bne.n	8007aee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007adc:	68f9      	ldr	r1, [r7, #12]
 8007ade:	6809      	ldr	r1, [r1, #0]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	3318      	adds	r3, #24
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	440b      	add	r3, r1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e00f      	b.n	8007b0e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007af8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007afe:	68f9      	ldr	r1, [r7, #12]
 8007b00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007b02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3318      	adds	r3, #24
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	440b      	add	r3, r1
 8007b0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6819      	ldr	r1, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	3318      	adds	r3, #24
 8007b1a:	011b      	lsls	r3, r3, #4
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3304      	adds	r3, #4
 8007b20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	7d1b      	ldrb	r3, [r3, #20]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d111      	bne.n	8007b4e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	3318      	adds	r3, #24
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	4413      	add	r3, r2
 8007b36:	3304      	adds	r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	3318      	adds	r3, #24
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	440b      	add	r3, r1
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3307      	adds	r3, #7
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	061a      	lsls	r2, r3, #24
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3306      	adds	r3, #6
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3305      	adds	r3, #5
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	3204      	adds	r2, #4
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	4610      	mov	r0, r2
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	6811      	ldr	r1, [r2, #0]
 8007b76:	ea43 0200 	orr.w	r2, r3, r0
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	440b      	add	r3, r1
 8007b80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007b84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3303      	adds	r3, #3
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	061a      	lsls	r2, r3, #24
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	3302      	adds	r3, #2
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	6811      	ldr	r1, [r2, #0]
 8007bac:	ea43 0200 	orr.w	r2, r3, r0
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007bba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	3318      	adds	r3, #24
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	4413      	add	r3, r2
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	f043 0201 	orr.w	r2, r3, #1
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	440b      	add	r3, r1
 8007bda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e00e      	b.n	8007bfe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e006      	b.n	8007bfe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
  }
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3724      	adds	r7, #36	; 0x24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d002      	beq.n	8007c2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d11d      	bne.n	8007c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007c66:	68fb      	ldr	r3, [r7, #12]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d003      	beq.n	8007c98 <HAL_CAN_GetRxMessage+0x24>
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	f040 80f3 	bne.w	8007e7e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10e      	bne.n	8007cbc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d116      	bne.n	8007cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e0e7      	b.n	8007e8c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e0d8      	b.n	8007e8c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	331b      	adds	r3, #27
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	4413      	add	r3, r2
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0204 	and.w	r2, r3, #4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10c      	bne.n	8007d12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	331b      	adds	r3, #27
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	4413      	add	r3, r2
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	0d5b      	lsrs	r3, r3, #21
 8007d08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e00b      	b.n	8007d2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	331b      	adds	r3, #27
 8007d1a:	011b      	lsls	r3, r3, #4
 8007d1c:	4413      	add	r3, r2
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	08db      	lsrs	r3, r3, #3
 8007d22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	331b      	adds	r3, #27
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	4413      	add	r3, r2
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0202 	and.w	r2, r3, #2
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	331b      	adds	r3, #27
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	4413      	add	r3, r2
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	331b      	adds	r3, #27
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	4413      	add	r3, r2
 8007d64:	3304      	adds	r3, #4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	331b      	adds	r3, #27
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	0a1a      	lsrs	r2, r3, #8
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	0c1a      	lsrs	r2, r3, #16
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	3302      	adds	r3, #2
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	0e1a      	lsrs	r2, r3, #24
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	3303      	adds	r3, #3
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	0a1a      	lsrs	r2, r3, #8
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	3305      	adds	r3, #5
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	0c1a      	lsrs	r2, r3, #16
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	3306      	adds	r3, #6
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	0e1a      	lsrs	r2, r3, #24
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d108      	bne.n	8007e6a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0220 	orr.w	r2, r2, #32
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	e007      	b.n	8007e7a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691a      	ldr	r2, [r3, #16]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f042 0220 	orr.w	r2, r2, #32
 8007e78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e006      	b.n	8007e8c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
  }
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	371c      	adds	r7, #28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ea8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d002      	beq.n	8007eb6 <HAL_CAN_ActivateNotification+0x1e>
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d109      	bne.n	8007eca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6959      	ldr	r1, [r3, #20]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e006      	b.n	8007ed8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d07c      	beq.n	8008024 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d023      	beq.n	8007f7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7f9 f9e6 	bl	8001318 <HAL_CAN_TxMailbox0CompleteCallback>
 8007f4c:	e016      	b.n	8007f7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f60:	e00c      	b.n	8007f7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f003 0308 	and.w	r3, r3, #8
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d004      	beq.n	8007f76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
 8007f74:	e002      	b.n	8007f7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f97f 	bl	800827a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d024      	beq.n	8007fd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f959 	bl	8008252 <HAL_CAN_TxMailbox1CompleteCallback>
 8007fa0:	e016      	b.n	8007fd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb4:	e00c      	b.n	8007fd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc8:	e002      	b.n	8007fd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f95f 	bl	800828e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d024      	beq.n	8008024 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007fe2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f939 	bl	8008266 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ff4:	e016      	b.n	8008024 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
 8008008:	e00c      	b.n	8008024 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
 800801c:	e002      	b.n	8008024 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f93f 	bl	80082a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00c      	beq.n	8008048 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d007      	beq.n	8008048 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800803e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2210      	movs	r2, #16
 8008046:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00b      	beq.n	800806a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d006      	beq.n	800806a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2208      	movs	r2, #8
 8008062:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f926 	bl	80082b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 f8b0 	bl	80011e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00c      	beq.n	80080ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2210      	movs	r2, #16
 80080aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d006      	beq.n	80080ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2208      	movs	r2, #8
 80080c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8fe 	bl	80082ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d009      	beq.n	80080ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7f9 f8b8 	bl	800125c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2210      	movs	r2, #16
 8008106:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8e8 	bl	80082de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d006      	beq.n	8008130 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2208      	movs	r2, #8
 8008128:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f8e1 	bl	80082f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d07b      	beq.n	8008232 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d072      	beq.n	800822a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d008      	beq.n	8008160 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f043 0301 	orr.w	r3, r3, #1
 800815e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f043 0302 	orr.w	r3, r3, #2
 800817a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008182:	2b00      	cmp	r3, #0
 8008184:	d008      	beq.n	8008198 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	f043 0304 	orr.w	r3, r3, #4
 8008196:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d043      	beq.n	800822a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d03e      	beq.n	800822a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081b2:	2b60      	cmp	r3, #96	; 0x60
 80081b4:	d02b      	beq.n	800820e <HAL_CAN_IRQHandler+0x32a>
 80081b6:	2b60      	cmp	r3, #96	; 0x60
 80081b8:	d82e      	bhi.n	8008218 <HAL_CAN_IRQHandler+0x334>
 80081ba:	2b50      	cmp	r3, #80	; 0x50
 80081bc:	d022      	beq.n	8008204 <HAL_CAN_IRQHandler+0x320>
 80081be:	2b50      	cmp	r3, #80	; 0x50
 80081c0:	d82a      	bhi.n	8008218 <HAL_CAN_IRQHandler+0x334>
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	d019      	beq.n	80081fa <HAL_CAN_IRQHandler+0x316>
 80081c6:	2b40      	cmp	r3, #64	; 0x40
 80081c8:	d826      	bhi.n	8008218 <HAL_CAN_IRQHandler+0x334>
 80081ca:	2b30      	cmp	r3, #48	; 0x30
 80081cc:	d010      	beq.n	80081f0 <HAL_CAN_IRQHandler+0x30c>
 80081ce:	2b30      	cmp	r3, #48	; 0x30
 80081d0:	d822      	bhi.n	8008218 <HAL_CAN_IRQHandler+0x334>
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d002      	beq.n	80081dc <HAL_CAN_IRQHandler+0x2f8>
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d005      	beq.n	80081e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80081da:	e01d      	b.n	8008218 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	f043 0308 	orr.w	r3, r3, #8
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80081e4:	e019      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	f043 0310 	orr.w	r3, r3, #16
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80081ee:	e014      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	f043 0320 	orr.w	r3, r3, #32
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80081f8:	e00f      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008202:	e00a      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800820c:	e005      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008216:	e000      	b.n	800821a <HAL_CAN_IRQHandler+0x336>
            break;
 8008218:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008228:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2204      	movs	r2, #4
 8008230:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7f9 f843 	bl	80012d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800824a:	bf00      	nop
 800824c:	3728      	adds	r7, #40	; 0x28
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008282:	bf00      	nop
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8008306:	b480      	push	{r7}
 8008308:	b085      	sub	sp, #20
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008318:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d002      	beq.n	8008326 <HAL_CAN_ResetError+0x20>
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d103      	bne.n	800832e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	625a      	str	r2, [r3, #36]	; 0x24
 800832c:	e007      	b.n	800833e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <__NVIC_SetPriorityGrouping>:
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800835c:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <__NVIC_SetPriorityGrouping+0x44>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008368:	4013      	ands	r3, r2
 800836a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800837e:	4a04      	ldr	r2, [pc, #16]	; (8008390 <__NVIC_SetPriorityGrouping+0x44>)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	60d3      	str	r3, [r2, #12]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	e000ed00 	.word	0xe000ed00

08008394 <__NVIC_GetPriorityGrouping>:
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008398:	4b04      	ldr	r3, [pc, #16]	; (80083ac <__NVIC_GetPriorityGrouping+0x18>)
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	f003 0307 	and.w	r3, r3, #7
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	e000ed00 	.word	0xe000ed00

080083b0 <__NVIC_EnableIRQ>:
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	db0b      	blt.n	80083da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	f003 021f 	and.w	r2, r3, #31
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <__NVIC_EnableIRQ+0x38>)
 80083ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	2001      	movs	r0, #1
 80083d2:	fa00 f202 	lsl.w	r2, r0, r2
 80083d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	e000e100 	.word	0xe000e100

080083ec <__NVIC_SetPriority>:
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	6039      	str	r1, [r7, #0]
 80083f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	db0a      	blt.n	8008416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	b2da      	uxtb	r2, r3
 8008404:	490c      	ldr	r1, [pc, #48]	; (8008438 <__NVIC_SetPriority+0x4c>)
 8008406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800840a:	0112      	lsls	r2, r2, #4
 800840c:	b2d2      	uxtb	r2, r2
 800840e:	440b      	add	r3, r1
 8008410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008414:	e00a      	b.n	800842c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	b2da      	uxtb	r2, r3
 800841a:	4908      	ldr	r1, [pc, #32]	; (800843c <__NVIC_SetPriority+0x50>)
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	f003 030f 	and.w	r3, r3, #15
 8008422:	3b04      	subs	r3, #4
 8008424:	0112      	lsls	r2, r2, #4
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	440b      	add	r3, r1
 800842a:	761a      	strb	r2, [r3, #24]
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	e000e100 	.word	0xe000e100
 800843c:	e000ed00 	.word	0xe000ed00

08008440 <NVIC_EncodePriority>:
{
 8008440:	b480      	push	{r7}
 8008442:	b089      	sub	sp, #36	; 0x24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f003 0307 	and.w	r3, r3, #7
 8008452:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	f1c3 0307 	rsb	r3, r3, #7
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf28      	it	cs
 800845e:	2304      	movcs	r3, #4
 8008460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	3304      	adds	r3, #4
 8008466:	2b06      	cmp	r3, #6
 8008468:	d902      	bls.n	8008470 <NVIC_EncodePriority+0x30>
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	3b03      	subs	r3, #3
 800846e:	e000      	b.n	8008472 <NVIC_EncodePriority+0x32>
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008474:	f04f 32ff 	mov.w	r2, #4294967295
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	43da      	mvns	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	401a      	ands	r2, r3
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008488:	f04f 31ff 	mov.w	r1, #4294967295
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	fa01 f303 	lsl.w	r3, r1, r3
 8008492:	43d9      	mvns	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008498:	4313      	orrs	r3, r2
}
 800849a:	4618      	mov	r0, r3
 800849c:	3724      	adds	r7, #36	; 0x24
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ff4c 	bl	800834c <__NVIC_SetPriorityGrouping>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	4603      	mov	r3, r0
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084ce:	f7ff ff61 	bl	8008394 <__NVIC_GetPriorityGrouping>
 80084d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	6978      	ldr	r0, [r7, #20]
 80084da:	f7ff ffb1 	bl	8008440 <NVIC_EncodePriority>
 80084de:	4602      	mov	r2, r0
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084e4:	4611      	mov	r1, r2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff ff80 	bl	80083ec <__NVIC_SetPriority>
}
 80084ec:	bf00      	nop
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff ff54 	bl	80083b0 <__NVIC_EnableIRQ>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e00e      	b.n	8008540 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	795b      	ldrb	r3, [r3, #5]
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d105      	bne.n	8008538 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fd fcf2 	bl	8005f1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008554:	f7fe fdf0 	bl	8007138 <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e099      	b.n	8008698 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f022 0201 	bic.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008584:	e00f      	b.n	80085a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008586:	f7fe fdd7 	bl	8007138 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b05      	cmp	r3, #5
 8008592:	d908      	bls.n	80085a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2203      	movs	r2, #3
 800859e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e078      	b.n	8008698 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e8      	bne.n	8008586 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4b38      	ldr	r3, [pc, #224]	; (80086a0 <HAL_DMA_Init+0x158>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d107      	bne.n	8008610 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	4313      	orrs	r3, r2
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	2b04      	cmp	r3, #4
 8008638:	d117      	bne.n	800866a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00e      	beq.n	800866a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f9e9 	bl	8008a24 <DMA_CheckFifoParam>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d008      	beq.n	800866a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2240      	movs	r2, #64	; 0x40
 800865c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008666:	2301      	movs	r3, #1
 8008668:	e016      	b.n	8008698 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9a0 	bl	80089b8 <DMA_CalcBaseAndBitshift>
 8008678:	4603      	mov	r3, r0
 800867a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008680:	223f      	movs	r2, #63	; 0x3f
 8008682:	409a      	lsls	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	f010803f 	.word	0xf010803f

080086a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086b0:	4b8e      	ldr	r3, [pc, #568]	; (80088ec <HAL_DMA_IRQHandler+0x248>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a8e      	ldr	r2, [pc, #568]	; (80088f0 <HAL_DMA_IRQHandler+0x24c>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0a9b      	lsrs	r3, r3, #10
 80086bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ce:	2208      	movs	r2, #8
 80086d0:	409a      	lsls	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4013      	ands	r3, r2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01a      	beq.n	8008710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d013      	beq.n	8008710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0204 	bic.w	r2, r2, #4
 80086f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fc:	2208      	movs	r2, #8
 80086fe:	409a      	lsls	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	f043 0201 	orr.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008714:	2201      	movs	r2, #1
 8008716:	409a      	lsls	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d012      	beq.n	8008746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008732:	2201      	movs	r2, #1
 8008734:	409a      	lsls	r2, r3
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	f043 0202 	orr.w	r2, r3, #2
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874a:	2204      	movs	r2, #4
 800874c:	409a      	lsls	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d012      	beq.n	800877c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00b      	beq.n	800877c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008768:	2204      	movs	r2, #4
 800876a:	409a      	lsls	r2, r3
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008774:	f043 0204 	orr.w	r2, r3, #4
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	2210      	movs	r2, #16
 8008782:	409a      	lsls	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4013      	ands	r3, r2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d043      	beq.n	8008814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d03c      	beq.n	8008814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879e:	2210      	movs	r2, #16
 80087a0:	409a      	lsls	r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d018      	beq.n	80087e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d108      	bne.n	80087d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d024      	beq.n	8008814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
 80087d2:	e01f      	b.n	8008814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01b      	beq.n	8008814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
 80087e4:	e016      	b.n	8008814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d107      	bne.n	8008804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0208 	bic.w	r2, r2, #8
 8008802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008818:	2220      	movs	r2, #32
 800881a:	409a      	lsls	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4013      	ands	r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 808f 	beq.w	8008944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 8087 	beq.w	8008944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883a:	2220      	movs	r2, #32
 800883c:	409a      	lsls	r2, r3
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b05      	cmp	r3, #5
 800884c:	d136      	bne.n	80088bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0216 	bic.w	r2, r2, #22
 800885c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800886c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	2b00      	cmp	r3, #0
 8008874:	d103      	bne.n	800887e <HAL_DMA_IRQHandler+0x1da>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0208 	bic.w	r2, r2, #8
 800888c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008892:	223f      	movs	r2, #63	; 0x3f
 8008894:	409a      	lsls	r2, r3
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d07e      	beq.n	80089b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
        }
        return;
 80088ba:	e079      	b.n	80089b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01d      	beq.n	8008906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10d      	bne.n	80088f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d031      	beq.n	8008944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
 80088e8:	e02c      	b.n	8008944 <HAL_DMA_IRQHandler+0x2a0>
 80088ea:	bf00      	nop
 80088ec:	20000010 	.word	0x20000010
 80088f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d023      	beq.n	8008944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	4798      	blx	r3
 8008904:	e01e      	b.n	8008944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10f      	bne.n	8008934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0210 	bic.w	r2, r2, #16
 8008922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	2b00      	cmp	r3, #0
 800894a:	d032      	beq.n	80089b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d022      	beq.n	800899e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2205      	movs	r2, #5
 800895c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3301      	adds	r3, #1
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	429a      	cmp	r2, r3
 800897a:	d307      	bcc.n	800898c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f2      	bne.n	8008970 <HAL_DMA_IRQHandler+0x2cc>
 800898a:	e000      	b.n	800898e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800898c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d005      	beq.n	80089b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	e000      	b.n	80089b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80089b0:	bf00      	nop
    }
  }
}
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	3b10      	subs	r3, #16
 80089c8:	4a14      	ldr	r2, [pc, #80]	; (8008a1c <DMA_CalcBaseAndBitshift+0x64>)
 80089ca:	fba2 2303 	umull	r2, r3, r2, r3
 80089ce:	091b      	lsrs	r3, r3, #4
 80089d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089d2:	4a13      	ldr	r2, [pc, #76]	; (8008a20 <DMA_CalcBaseAndBitshift+0x68>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4413      	add	r3, r2
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d909      	bls.n	80089fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	1d1a      	adds	r2, r3, #4
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	659a      	str	r2, [r3, #88]	; 0x58
 80089f8:	e007      	b.n	8008a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	aaaaaaab 	.word	0xaaaaaaab
 8008a20:	08010a74 	.word	0x08010a74

08008a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d11f      	bne.n	8008a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d856      	bhi.n	8008af2 <DMA_CheckFifoParam+0xce>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <DMA_CheckFifoParam+0x28>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a6f 	.word	0x08008a6f
 8008a54:	08008a5d 	.word	0x08008a5d
 8008a58:	08008af3 	.word	0x08008af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d046      	beq.n	8008af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a6c:	e043      	b.n	8008af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a76:	d140      	bne.n	8008afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a7c:	e03d      	b.n	8008afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a86:	d121      	bne.n	8008acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d837      	bhi.n	8008afe <DMA_CheckFifoParam+0xda>
 8008a8e:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <DMA_CheckFifoParam+0x70>)
 8008a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aab 	.word	0x08008aab
 8008a9c:	08008aa5 	.word	0x08008aa5
 8008aa0:	08008abd 	.word	0x08008abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa8:	e030      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d025      	beq.n	8008b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008aba:	e022      	b.n	8008b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ac4:	d11f      	bne.n	8008b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008aca:	e01c      	b.n	8008b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d903      	bls.n	8008ada <DMA_CheckFifoParam+0xb6>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d003      	beq.n	8008ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008ad8:	e018      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	e015      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	e00b      	b.n	8008b0a <DMA_CheckFifoParam+0xe6>
      break;
 8008af2:	bf00      	nop
 8008af4:	e00a      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;
 8008af6:	bf00      	nop
 8008af8:	e008      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;
 8008afa:	bf00      	nop
 8008afc:	e006      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;
 8008afe:	bf00      	nop
 8008b00:	e004      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;
 8008b02:	bf00      	nop
 8008b04:	e002      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8008b06:	bf00      	nop
 8008b08:	e000      	b.n	8008b0c <DMA_CheckFifoParam+0xe8>
      break;
 8008b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	e16b      	b.n	8008e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b38:	2201      	movs	r2, #1
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	f040 815a 	bne.w	8008e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d005      	beq.n	8008b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d130      	bne.n	8008bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	2203      	movs	r2, #3
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	4013      	ands	r3, r2
 8008b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68da      	ldr	r2, [r3, #12]
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	43db      	mvns	r3, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	091b      	lsrs	r3, r3, #4
 8008bba:	f003 0201 	and.w	r2, r3, #1
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d017      	beq.n	8008c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	2203      	movs	r2, #3
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	43db      	mvns	r3, r3
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d123      	bne.n	8008c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	08da      	lsrs	r2, r3, #3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3208      	adds	r2, #8
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	220f      	movs	r2, #15
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43db      	mvns	r3, r3
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f003 0307 	and.w	r3, r3, #7
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	08da      	lsrs	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3208      	adds	r2, #8
 8008c5a:	69b9      	ldr	r1, [r7, #24]
 8008c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	43db      	mvns	r3, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4013      	ands	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f003 0203 	and.w	r2, r3, #3
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80b4 	beq.w	8008e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	4b60      	ldr	r3, [pc, #384]	; (8008e28 <HAL_GPIO_Init+0x30c>)
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	4a5f      	ldr	r2, [pc, #380]	; (8008e28 <HAL_GPIO_Init+0x30c>)
 8008cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8008cb2:	4b5d      	ldr	r3, [pc, #372]	; (8008e28 <HAL_GPIO_Init+0x30c>)
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cbe:	4a5b      	ldr	r2, [pc, #364]	; (8008e2c <HAL_GPIO_Init+0x310>)
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	220f      	movs	r2, #15
 8008cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cda:	43db      	mvns	r3, r3
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a52      	ldr	r2, [pc, #328]	; (8008e30 <HAL_GPIO_Init+0x314>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d02b      	beq.n	8008d42 <HAL_GPIO_Init+0x226>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a51      	ldr	r2, [pc, #324]	; (8008e34 <HAL_GPIO_Init+0x318>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d025      	beq.n	8008d3e <HAL_GPIO_Init+0x222>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a50      	ldr	r2, [pc, #320]	; (8008e38 <HAL_GPIO_Init+0x31c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01f      	beq.n	8008d3a <HAL_GPIO_Init+0x21e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a4f      	ldr	r2, [pc, #316]	; (8008e3c <HAL_GPIO_Init+0x320>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d019      	beq.n	8008d36 <HAL_GPIO_Init+0x21a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a4e      	ldr	r2, [pc, #312]	; (8008e40 <HAL_GPIO_Init+0x324>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d013      	beq.n	8008d32 <HAL_GPIO_Init+0x216>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a4d      	ldr	r2, [pc, #308]	; (8008e44 <HAL_GPIO_Init+0x328>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00d      	beq.n	8008d2e <HAL_GPIO_Init+0x212>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a4c      	ldr	r2, [pc, #304]	; (8008e48 <HAL_GPIO_Init+0x32c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <HAL_GPIO_Init+0x20e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a4b      	ldr	r2, [pc, #300]	; (8008e4c <HAL_GPIO_Init+0x330>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d101      	bne.n	8008d26 <HAL_GPIO_Init+0x20a>
 8008d22:	2307      	movs	r3, #7
 8008d24:	e00e      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d26:	2308      	movs	r3, #8
 8008d28:	e00c      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d2a:	2306      	movs	r3, #6
 8008d2c:	e00a      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d2e:	2305      	movs	r3, #5
 8008d30:	e008      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d32:	2304      	movs	r3, #4
 8008d34:	e006      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d36:	2303      	movs	r3, #3
 8008d38:	e004      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	e002      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e000      	b.n	8008d44 <HAL_GPIO_Init+0x228>
 8008d42:	2300      	movs	r3, #0
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	f002 0203 	and.w	r2, r2, #3
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	4093      	lsls	r3, r2
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d54:	4935      	ldr	r1, [pc, #212]	; (8008e2c <HAL_GPIO_Init+0x310>)
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	3302      	adds	r3, #2
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d62:	4b3b      	ldr	r3, [pc, #236]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d86:	4a32      	ldr	r2, [pc, #200]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d8c:	4b30      	ldr	r3, [pc, #192]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	43db      	mvns	r3, r3
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	4013      	ands	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008db0:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008db6:	4b26      	ldr	r3, [pc, #152]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dda:	4a1d      	ldr	r2, [pc, #116]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008de0:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	43db      	mvns	r3, r3
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	4013      	ands	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e04:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <HAL_GPIO_Init+0x334>)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	f67f ae90 	bls.w	8008b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	3724      	adds	r7, #36	; 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	40013800 	.word	0x40013800
 8008e30:	40020000 	.word	0x40020000
 8008e34:	40020400 	.word	0x40020400
 8008e38:	40020800 	.word	0x40020800
 8008e3c:	40020c00 	.word	0x40020c00
 8008e40:	40021000 	.word	0x40021000
 8008e44:	40021400 	.word	0x40021400
 8008e48:	40021800 	.word	0x40021800
 8008e4c:	40021c00 	.word	0x40021c00
 8008e50:	40013c00 	.word	0x40013c00

08008e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	807b      	strh	r3, [r7, #2]
 8008e60:	4613      	mov	r3, r2
 8008e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e64:	787b      	ldrb	r3, [r7, #1]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e6a:	887a      	ldrh	r2, [r7, #2]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e70:	e003      	b.n	8008e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e72:	887b      	ldrh	r3, [r7, #2]
 8008e74:	041a      	lsls	r2, r3, #16
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	619a      	str	r2, [r3, #24]
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e94:	695a      	ldr	r2, [r3, #20]
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d006      	beq.n	8008eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e9e:	4a05      	ldr	r2, [pc, #20]	; (8008eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ea4:	88fb      	ldrh	r3, [r7, #6]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fc fad9 	bl	800545e <HAL_GPIO_EXTI_Callback>
  }
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40013c00 	.word	0x40013c00

08008eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e12b      	b.n	8009122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fd f9bc 	bl	800625c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2224      	movs	r2, #36	; 0x24
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0201 	bic.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f1c:	f000 fd7e 	bl	8009a1c <HAL_RCC_GetPCLK1Freq>
 8008f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4a81      	ldr	r2, [pc, #516]	; (800912c <HAL_I2C_Init+0x274>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d807      	bhi.n	8008f3c <HAL_I2C_Init+0x84>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4a80      	ldr	r2, [pc, #512]	; (8009130 <HAL_I2C_Init+0x278>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bf94      	ite	ls
 8008f34:	2301      	movls	r3, #1
 8008f36:	2300      	movhi	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	e006      	b.n	8008f4a <HAL_I2C_Init+0x92>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4a7d      	ldr	r2, [pc, #500]	; (8009134 <HAL_I2C_Init+0x27c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	bf94      	ite	ls
 8008f44:	2301      	movls	r3, #1
 8008f46:	2300      	movhi	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e0e7      	b.n	8009122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4a78      	ldr	r2, [pc, #480]	; (8009138 <HAL_I2C_Init+0x280>)
 8008f56:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5a:	0c9b      	lsrs	r3, r3, #18
 8008f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4a6a      	ldr	r2, [pc, #424]	; (800912c <HAL_I2C_Init+0x274>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d802      	bhi.n	8008f8c <HAL_I2C_Init+0xd4>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	e009      	b.n	8008fa0 <HAL_I2C_Init+0xe8>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	4a69      	ldr	r2, [pc, #420]	; (800913c <HAL_I2C_Init+0x284>)
 8008f98:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9c:	099b      	lsrs	r3, r3, #6
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	6812      	ldr	r2, [r2, #0]
 8008fa4:	430b      	orrs	r3, r1
 8008fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	495c      	ldr	r1, [pc, #368]	; (800912c <HAL_I2C_Init+0x274>)
 8008fbc:	428b      	cmp	r3, r1
 8008fbe:	d819      	bhi.n	8008ff4 <HAL_I2C_Init+0x13c>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	1e59      	subs	r1, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008fd4:	400b      	ands	r3, r1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <HAL_I2C_Init+0x138>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1e59      	subs	r1, r3, #1
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fee:	e051      	b.n	8009094 <HAL_I2C_Init+0x1dc>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	e04f      	b.n	8009094 <HAL_I2C_Init+0x1dc>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d111      	bne.n	8009020 <HAL_I2C_Init+0x168>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	1e58      	subs	r0, r3, #1
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6859      	ldr	r1, [r3, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	440b      	add	r3, r1
 800900a:	fbb0 f3f3 	udiv	r3, r0, r3
 800900e:	3301      	adds	r3, #1
 8009010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009014:	2b00      	cmp	r3, #0
 8009016:	bf0c      	ite	eq
 8009018:	2301      	moveq	r3, #1
 800901a:	2300      	movne	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e012      	b.n	8009046 <HAL_I2C_Init+0x18e>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	1e58      	subs	r0, r3, #1
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6859      	ldr	r1, [r3, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	0099      	lsls	r1, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	fbb0 f3f3 	udiv	r3, r0, r3
 8009036:	3301      	adds	r3, #1
 8009038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800903c:	2b00      	cmp	r3, #0
 800903e:	bf0c      	ite	eq
 8009040:	2301      	moveq	r3, #1
 8009042:	2300      	movne	r3, #0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_I2C_Init+0x196>
 800904a:	2301      	movs	r3, #1
 800904c:	e022      	b.n	8009094 <HAL_I2C_Init+0x1dc>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10e      	bne.n	8009074 <HAL_I2C_Init+0x1bc>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1e58      	subs	r0, r3, #1
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6859      	ldr	r1, [r3, #4]
 800905e:	460b      	mov	r3, r1
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	440b      	add	r3, r1
 8009064:	fbb0 f3f3 	udiv	r3, r0, r3
 8009068:	3301      	adds	r3, #1
 800906a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800906e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009072:	e00f      	b.n	8009094 <HAL_I2C_Init+0x1dc>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	1e58      	subs	r0, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6859      	ldr	r1, [r3, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	0099      	lsls	r1, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	fbb0 f3f3 	udiv	r3, r0, r3
 800908a:	3301      	adds	r3, #1
 800908c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	6809      	ldr	r1, [r1, #0]
 8009098:	4313      	orrs	r3, r2
 800909a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69da      	ldr	r2, [r3, #28]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80090c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6911      	ldr	r1, [r2, #16]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	68d2      	ldr	r2, [r2, #12]
 80090ce:	4311      	orrs	r1, r2
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	430b      	orrs	r3, r1
 80090d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695a      	ldr	r2, [r3, #20]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2220      	movs	r2, #32
 800910e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	000186a0 	.word	0x000186a0
 8009130:	001e847f 	.word	0x001e847f
 8009134:	003d08ff 	.word	0x003d08ff
 8009138:	431bde83 	.word	0x431bde83
 800913c:	10624dd3 	.word	0x10624dd3

08009140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e267      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d075      	beq.n	800924a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800915e:	4b88      	ldr	r3, [pc, #544]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 030c 	and.w	r3, r3, #12
 8009166:	2b04      	cmp	r3, #4
 8009168:	d00c      	beq.n	8009184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800916a:	4b85      	ldr	r3, [pc, #532]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009172:	2b08      	cmp	r3, #8
 8009174:	d112      	bne.n	800919c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009176:	4b82      	ldr	r3, [pc, #520]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800917e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009182:	d10b      	bne.n	800919c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009184:	4b7e      	ldr	r3, [pc, #504]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d05b      	beq.n	8009248 <HAL_RCC_OscConfig+0x108>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d157      	bne.n	8009248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e242      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a4:	d106      	bne.n	80091b4 <HAL_RCC_OscConfig+0x74>
 80091a6:	4b76      	ldr	r3, [pc, #472]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a75      	ldr	r2, [pc, #468]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	e01d      	b.n	80091f0 <HAL_RCC_OscConfig+0xb0>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091bc:	d10c      	bne.n	80091d8 <HAL_RCC_OscConfig+0x98>
 80091be:	4b70      	ldr	r3, [pc, #448]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a6f      	ldr	r2, [pc, #444]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	4b6d      	ldr	r3, [pc, #436]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a6c      	ldr	r2, [pc, #432]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	e00b      	b.n	80091f0 <HAL_RCC_OscConfig+0xb0>
 80091d8:	4b69      	ldr	r3, [pc, #420]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a68      	ldr	r2, [pc, #416]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	4b66      	ldr	r3, [pc, #408]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a65      	ldr	r2, [pc, #404]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80091ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d013      	beq.n	8009220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f8:	f7fd ff9e 	bl	8007138 <HAL_GetTick>
 80091fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091fe:	e008      	b.n	8009212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009200:	f7fd ff9a 	bl	8007138 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b64      	cmp	r3, #100	; 0x64
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e207      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009212:	4b5b      	ldr	r3, [pc, #364]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0f0      	beq.n	8009200 <HAL_RCC_OscConfig+0xc0>
 800921e:	e014      	b.n	800924a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009220:	f7fd ff8a 	bl	8007138 <HAL_GetTick>
 8009224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009226:	e008      	b.n	800923a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009228:	f7fd ff86 	bl	8007138 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	2b64      	cmp	r3, #100	; 0x64
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e1f3      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800923a:	4b51      	ldr	r3, [pc, #324]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1f0      	bne.n	8009228 <HAL_RCC_OscConfig+0xe8>
 8009246:	e000      	b.n	800924a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d063      	beq.n	800931e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009256:	4b4a      	ldr	r3, [pc, #296]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f003 030c 	and.w	r3, r3, #12
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00b      	beq.n	800927a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009262:	4b47      	ldr	r3, [pc, #284]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800926a:	2b08      	cmp	r3, #8
 800926c:	d11c      	bne.n	80092a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800926e:	4b44      	ldr	r3, [pc, #272]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d116      	bne.n	80092a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800927a:	4b41      	ldr	r3, [pc, #260]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0302 	and.w	r3, r3, #2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_RCC_OscConfig+0x152>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d001      	beq.n	8009292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e1c7      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009292:	4b3b      	ldr	r3, [pc, #236]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4937      	ldr	r1, [pc, #220]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092a6:	e03a      	b.n	800931e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d020      	beq.n	80092f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092b0:	4b34      	ldr	r3, [pc, #208]	; (8009384 <HAL_RCC_OscConfig+0x244>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b6:	f7fd ff3f 	bl	8007138 <HAL_GetTick>
 80092ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092bc:	e008      	b.n	80092d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092be:	f7fd ff3b 	bl	8007138 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e1a8      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092d0:	4b2b      	ldr	r3, [pc, #172]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092dc:	4b28      	ldr	r3, [pc, #160]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	4925      	ldr	r1, [pc, #148]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	600b      	str	r3, [r1, #0]
 80092f0:	e015      	b.n	800931e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <HAL_RCC_OscConfig+0x244>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f8:	f7fd ff1e 	bl	8007138 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009300:	f7fd ff1a 	bl	8007138 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e187      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009312:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1f0      	bne.n	8009300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d036      	beq.n	8009398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d016      	beq.n	8009360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <HAL_RCC_OscConfig+0x248>)
 8009334:	2201      	movs	r2, #1
 8009336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009338:	f7fd fefe 	bl	8007138 <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009340:	f7fd fefa 	bl	8007138 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e167      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <HAL_RCC_OscConfig+0x240>)
 8009354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f0      	beq.n	8009340 <HAL_RCC_OscConfig+0x200>
 800935e:	e01b      	b.n	8009398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009360:	4b09      	ldr	r3, [pc, #36]	; (8009388 <HAL_RCC_OscConfig+0x248>)
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009366:	f7fd fee7 	bl	8007138 <HAL_GetTick>
 800936a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800936c:	e00e      	b.n	800938c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800936e:	f7fd fee3 	bl	8007138 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d907      	bls.n	800938c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e150      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
 8009380:	40023800 	.word	0x40023800
 8009384:	42470000 	.word	0x42470000
 8009388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800938c:	4b88      	ldr	r3, [pc, #544]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800938e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1ea      	bne.n	800936e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 8097 	beq.w	80094d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093aa:	4b81      	ldr	r3, [pc, #516]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10f      	bne.n	80093d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	4b7d      	ldr	r3, [pc, #500]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	4a7c      	ldr	r2, [pc, #496]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6413      	str	r3, [r2, #64]	; 0x40
 80093c6:	4b7a      	ldr	r3, [pc, #488]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d6:	4b77      	ldr	r3, [pc, #476]	; (80095b4 <HAL_RCC_OscConfig+0x474>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d118      	bne.n	8009414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093e2:	4b74      	ldr	r3, [pc, #464]	; (80095b4 <HAL_RCC_OscConfig+0x474>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a73      	ldr	r2, [pc, #460]	; (80095b4 <HAL_RCC_OscConfig+0x474>)
 80093e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ee:	f7fd fea3 	bl	8007138 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093f4:	e008      	b.n	8009408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093f6:	f7fd fe9f 	bl	8007138 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e10c      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009408:	4b6a      	ldr	r3, [pc, #424]	; (80095b4 <HAL_RCC_OscConfig+0x474>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d106      	bne.n	800942a <HAL_RCC_OscConfig+0x2ea>
 800941c:	4b64      	ldr	r3, [pc, #400]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800941e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009420:	4a63      	ldr	r2, [pc, #396]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009422:	f043 0301 	orr.w	r3, r3, #1
 8009426:	6713      	str	r3, [r2, #112]	; 0x70
 8009428:	e01c      	b.n	8009464 <HAL_RCC_OscConfig+0x324>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	2b05      	cmp	r3, #5
 8009430:	d10c      	bne.n	800944c <HAL_RCC_OscConfig+0x30c>
 8009432:	4b5f      	ldr	r3, [pc, #380]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009436:	4a5e      	ldr	r2, [pc, #376]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009438:	f043 0304 	orr.w	r3, r3, #4
 800943c:	6713      	str	r3, [r2, #112]	; 0x70
 800943e:	4b5c      	ldr	r3, [pc, #368]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009442:	4a5b      	ldr	r2, [pc, #364]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009444:	f043 0301 	orr.w	r3, r3, #1
 8009448:	6713      	str	r3, [r2, #112]	; 0x70
 800944a:	e00b      	b.n	8009464 <HAL_RCC_OscConfig+0x324>
 800944c:	4b58      	ldr	r3, [pc, #352]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800944e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009450:	4a57      	ldr	r2, [pc, #348]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009452:	f023 0301 	bic.w	r3, r3, #1
 8009456:	6713      	str	r3, [r2, #112]	; 0x70
 8009458:	4b55      	ldr	r3, [pc, #340]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	4a54      	ldr	r2, [pc, #336]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800945e:	f023 0304 	bic.w	r3, r3, #4
 8009462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d015      	beq.n	8009498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946c:	f7fd fe64 	bl	8007138 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009472:	e00a      	b.n	800948a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009474:	f7fd fe60 	bl	8007138 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009482:	4293      	cmp	r3, r2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e0cb      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800948a:	4b49      	ldr	r3, [pc, #292]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0ee      	beq.n	8009474 <HAL_RCC_OscConfig+0x334>
 8009496:	e014      	b.n	80094c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009498:	f7fd fe4e 	bl	8007138 <HAL_GetTick>
 800949c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800949e:	e00a      	b.n	80094b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094a0:	f7fd fe4a 	bl	8007138 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d901      	bls.n	80094b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e0b5      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094b6:	4b3e      	ldr	r3, [pc, #248]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80094b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1ee      	bne.n	80094a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d105      	bne.n	80094d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094c8:	4b39      	ldr	r3, [pc, #228]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	4a38      	ldr	r2, [pc, #224]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80094ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80a1 	beq.w	8009620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094de:	4b34      	ldr	r3, [pc, #208]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 030c 	and.w	r3, r3, #12
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d05c      	beq.n	80095a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d141      	bne.n	8009576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094f2:	4b31      	ldr	r3, [pc, #196]	; (80095b8 <HAL_RCC_OscConfig+0x478>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094f8:	f7fd fe1e 	bl	8007138 <HAL_GetTick>
 80094fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009500:	f7fd fe1a 	bl	8007138 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e087      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009512:	4b27      	ldr	r3, [pc, #156]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69da      	ldr	r2, [r3, #28]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	019b      	lsls	r3, r3, #6
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009534:	085b      	lsrs	r3, r3, #1
 8009536:	3b01      	subs	r3, #1
 8009538:	041b      	lsls	r3, r3, #16
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	061b      	lsls	r3, r3, #24
 8009542:	491b      	ldr	r1, [pc, #108]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009544:	4313      	orrs	r3, r2
 8009546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009548:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <HAL_RCC_OscConfig+0x478>)
 800954a:	2201      	movs	r2, #1
 800954c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800954e:	f7fd fdf3 	bl	8007138 <HAL_GetTick>
 8009552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009554:	e008      	b.n	8009568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009556:	f7fd fdef 	bl	8007138 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d901      	bls.n	8009568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e05c      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009568:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0f0      	beq.n	8009556 <HAL_RCC_OscConfig+0x416>
 8009574:	e054      	b.n	8009620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009576:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <HAL_RCC_OscConfig+0x478>)
 8009578:	2200      	movs	r2, #0
 800957a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800957c:	f7fd fddc 	bl	8007138 <HAL_GetTick>
 8009580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009582:	e008      	b.n	8009596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009584:	f7fd fdd8 	bl	8007138 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e045      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009596:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <HAL_RCC_OscConfig+0x470>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1f0      	bne.n	8009584 <HAL_RCC_OscConfig+0x444>
 80095a2:	e03d      	b.n	8009620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d107      	bne.n	80095bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e038      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
 80095b0:	40023800 	.word	0x40023800
 80095b4:	40007000 	.word	0x40007000
 80095b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <HAL_RCC_OscConfig+0x4ec>)
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d028      	beq.n	800961c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d121      	bne.n	800961c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d11a      	bne.n	800961c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095ec:	4013      	ands	r3, r2
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d111      	bne.n	800961c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	3b01      	subs	r3, #1
 8009606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009608:	429a      	cmp	r2, r3
 800960a:	d107      	bne.n	800961c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009618:	429a      	cmp	r2, r3
 800961a:	d001      	beq.n	8009620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	40023800 	.word	0x40023800

08009630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e0cc      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009644:	4b68      	ldr	r3, [pc, #416]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	429a      	cmp	r2, r3
 8009650:	d90c      	bls.n	800966c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009652:	4b65      	ldr	r3, [pc, #404]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800965a:	4b63      	ldr	r3, [pc, #396]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0307 	and.w	r3, r3, #7
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d001      	beq.n	800966c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e0b8      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d020      	beq.n	80096ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009684:	4b59      	ldr	r3, [pc, #356]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	4a58      	ldr	r2, [pc, #352]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 800968a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800968e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0308 	and.w	r3, r3, #8
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800969c:	4b53      	ldr	r3, [pc, #332]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	4a52      	ldr	r2, [pc, #328]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096a8:	4b50      	ldr	r3, [pc, #320]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	494d      	ldr	r1, [pc, #308]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d044      	beq.n	8009750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d107      	bne.n	80096de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ce:	4b47      	ldr	r3, [pc, #284]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d119      	bne.n	800970e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e07f      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d003      	beq.n	80096ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d107      	bne.n	80096fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ee:	4b3f      	ldr	r3, [pc, #252]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e06f      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096fe:	4b3b      	ldr	r3, [pc, #236]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e067      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800970e:	4b37      	ldr	r3, [pc, #220]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	f023 0203 	bic.w	r2, r3, #3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	4934      	ldr	r1, [pc, #208]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 800971c:	4313      	orrs	r3, r2
 800971e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009720:	f7fd fd0a 	bl	8007138 <HAL_GetTick>
 8009724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009726:	e00a      	b.n	800973e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009728:	f7fd fd06 	bl	8007138 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	f241 3288 	movw	r2, #5000	; 0x1388
 8009736:	4293      	cmp	r3, r2
 8009738:	d901      	bls.n	800973e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e04f      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800973e:	4b2b      	ldr	r3, [pc, #172]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 020c 	and.w	r2, r3, #12
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	429a      	cmp	r2, r3
 800974e:	d1eb      	bne.n	8009728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009750:	4b25      	ldr	r3, [pc, #148]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d20c      	bcs.n	8009778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009766:	4b20      	ldr	r3, [pc, #128]	; (80097e8 <HAL_RCC_ClockConfig+0x1b8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d001      	beq.n	8009778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e032      	b.n	80097de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009784:	4b19      	ldr	r3, [pc, #100]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	4916      	ldr	r1, [pc, #88]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 8009792:	4313      	orrs	r3, r2
 8009794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097a2:	4b12      	ldr	r3, [pc, #72]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	490e      	ldr	r1, [pc, #56]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097b6:	f000 f821 	bl	80097fc <HAL_RCC_GetSysClockFreq>
 80097ba:	4602      	mov	r2, r0
 80097bc:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <HAL_RCC_ClockConfig+0x1bc>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	091b      	lsrs	r3, r3, #4
 80097c2:	f003 030f 	and.w	r3, r3, #15
 80097c6:	490a      	ldr	r1, [pc, #40]	; (80097f0 <HAL_RCC_ClockConfig+0x1c0>)
 80097c8:	5ccb      	ldrb	r3, [r1, r3]
 80097ca:	fa22 f303 	lsr.w	r3, r2, r3
 80097ce:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <HAL_RCC_ClockConfig+0x1c4>)
 80097d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <HAL_RCC_ClockConfig+0x1c8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fc ff18 	bl	800660c <HAL_InitTick>

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	40023c00 	.word	0x40023c00
 80097ec:	40023800 	.word	0x40023800
 80097f0:	08010a5c 	.word	0x08010a5c
 80097f4:	20000010 	.word	0x20000010
 80097f8:	20000014 	.word	0x20000014

080097fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009800:	b094      	sub	sp, #80	; 0x50
 8009802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	647b      	str	r3, [r7, #68]	; 0x44
 8009808:	2300      	movs	r3, #0
 800980a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800980c:	2300      	movs	r3, #0
 800980e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009814:	4b79      	ldr	r3, [pc, #484]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 030c 	and.w	r3, r3, #12
 800981c:	2b08      	cmp	r3, #8
 800981e:	d00d      	beq.n	800983c <HAL_RCC_GetSysClockFreq+0x40>
 8009820:	2b08      	cmp	r3, #8
 8009822:	f200 80e1 	bhi.w	80099e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <HAL_RCC_GetSysClockFreq+0x34>
 800982a:	2b04      	cmp	r3, #4
 800982c:	d003      	beq.n	8009836 <HAL_RCC_GetSysClockFreq+0x3a>
 800982e:	e0db      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009830:	4b73      	ldr	r3, [pc, #460]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8009832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009834:	e0db      	b.n	80099ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009836:	4b72      	ldr	r3, [pc, #456]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8009838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800983a:	e0d8      	b.n	80099ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800983c:	4b6f      	ldr	r3, [pc, #444]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009846:	4b6d      	ldr	r3, [pc, #436]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d063      	beq.n	800991a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009852:	4b6a      	ldr	r3, [pc, #424]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	099b      	lsrs	r3, r3, #6
 8009858:	2200      	movs	r2, #0
 800985a:	63bb      	str	r3, [r7, #56]	; 0x38
 800985c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	633b      	str	r3, [r7, #48]	; 0x30
 8009866:	2300      	movs	r3, #0
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
 800986a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800986e:	4622      	mov	r2, r4
 8009870:	462b      	mov	r3, r5
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f04f 0100 	mov.w	r1, #0
 800987a:	0159      	lsls	r1, r3, #5
 800987c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009880:	0150      	lsls	r0, r2, #5
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4621      	mov	r1, r4
 8009888:	1a51      	subs	r1, r2, r1
 800988a:	6139      	str	r1, [r7, #16]
 800988c:	4629      	mov	r1, r5
 800988e:	eb63 0301 	sbc.w	r3, r3, r1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a0:	4659      	mov	r1, fp
 80098a2:	018b      	lsls	r3, r1, #6
 80098a4:	4651      	mov	r1, sl
 80098a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098aa:	4651      	mov	r1, sl
 80098ac:	018a      	lsls	r2, r1, #6
 80098ae:	4651      	mov	r1, sl
 80098b0:	ebb2 0801 	subs.w	r8, r2, r1
 80098b4:	4659      	mov	r1, fp
 80098b6:	eb63 0901 	sbc.w	r9, r3, r1
 80098ba:	f04f 0200 	mov.w	r2, #0
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098ce:	4690      	mov	r8, r2
 80098d0:	4699      	mov	r9, r3
 80098d2:	4623      	mov	r3, r4
 80098d4:	eb18 0303 	adds.w	r3, r8, r3
 80098d8:	60bb      	str	r3, [r7, #8]
 80098da:	462b      	mov	r3, r5
 80098dc:	eb49 0303 	adc.w	r3, r9, r3
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	f04f 0200 	mov.w	r2, #0
 80098e6:	f04f 0300 	mov.w	r3, #0
 80098ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80098ee:	4629      	mov	r1, r5
 80098f0:	028b      	lsls	r3, r1, #10
 80098f2:	4621      	mov	r1, r4
 80098f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098f8:	4621      	mov	r1, r4
 80098fa:	028a      	lsls	r2, r1, #10
 80098fc:	4610      	mov	r0, r2
 80098fe:	4619      	mov	r1, r3
 8009900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009902:	2200      	movs	r2, #0
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
 8009906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800990c:	f7f6 fcb0 	bl	8000270 <__aeabi_uldivmod>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4613      	mov	r3, r2
 8009916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009918:	e058      	b.n	80099cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800991a:	4b38      	ldr	r3, [pc, #224]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	099b      	lsrs	r3, r3, #6
 8009920:	2200      	movs	r2, #0
 8009922:	4618      	mov	r0, r3
 8009924:	4611      	mov	r1, r2
 8009926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
 8009930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009934:	4642      	mov	r2, r8
 8009936:	464b      	mov	r3, r9
 8009938:	f04f 0000 	mov.w	r0, #0
 800993c:	f04f 0100 	mov.w	r1, #0
 8009940:	0159      	lsls	r1, r3, #5
 8009942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009946:	0150      	lsls	r0, r2, #5
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4641      	mov	r1, r8
 800994e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009952:	4649      	mov	r1, r9
 8009954:	eb63 0b01 	sbc.w	fp, r3, r1
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	f04f 0300 	mov.w	r3, #0
 8009960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800996c:	ebb2 040a 	subs.w	r4, r2, sl
 8009970:	eb63 050b 	sbc.w	r5, r3, fp
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	00eb      	lsls	r3, r5, #3
 800997e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009982:	00e2      	lsls	r2, r4, #3
 8009984:	4614      	mov	r4, r2
 8009986:	461d      	mov	r5, r3
 8009988:	4643      	mov	r3, r8
 800998a:	18e3      	adds	r3, r4, r3
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	464b      	mov	r3, r9
 8009990:	eb45 0303 	adc.w	r3, r5, r3
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099a2:	4629      	mov	r1, r5
 80099a4:	028b      	lsls	r3, r1, #10
 80099a6:	4621      	mov	r1, r4
 80099a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099ac:	4621      	mov	r1, r4
 80099ae:	028a      	lsls	r2, r1, #10
 80099b0:	4610      	mov	r0, r2
 80099b2:	4619      	mov	r1, r3
 80099b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b6:	2200      	movs	r2, #0
 80099b8:	61bb      	str	r3, [r7, #24]
 80099ba:	61fa      	str	r2, [r7, #28]
 80099bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099c0:	f7f6 fc56 	bl	8000270 <__aeabi_uldivmod>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4613      	mov	r3, r2
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80099cc:	4b0b      	ldr	r3, [pc, #44]	; (80099fc <HAL_RCC_GetSysClockFreq+0x200>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	0c1b      	lsrs	r3, r3, #16
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	3301      	adds	r3, #1
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80099dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80099e6:	e002      	b.n	80099ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80099ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80099ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3750      	adds	r7, #80	; 0x50
 80099f4:	46bd      	mov	sp, r7
 80099f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099fa:	bf00      	nop
 80099fc:	40023800 	.word	0x40023800
 8009a00:	00f42400 	.word	0x00f42400

08009a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a08:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000010 	.word	0x20000010

08009a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a20:	f7ff fff0 	bl	8009a04 <HAL_RCC_GetHCLKFreq>
 8009a24:	4602      	mov	r2, r0
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	0a9b      	lsrs	r3, r3, #10
 8009a2c:	f003 0307 	and.w	r3, r3, #7
 8009a30:	4903      	ldr	r1, [pc, #12]	; (8009a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a32:	5ccb      	ldrb	r3, [r1, r3]
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40023800 	.word	0x40023800
 8009a40:	08010a6c 	.word	0x08010a6c

08009a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a48:	f7ff ffdc 	bl	8009a04 <HAL_RCC_GetHCLKFreq>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	0b5b      	lsrs	r3, r3, #13
 8009a54:	f003 0307 	and.w	r3, r3, #7
 8009a58:	4903      	ldr	r1, [pc, #12]	; (8009a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a5a:	5ccb      	ldrb	r3, [r1, r3]
 8009a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40023800 	.word	0x40023800
 8009a68:	08010a6c 	.word	0x08010a6c

08009a6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	220f      	movs	r2, #15
 8009a7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009a7c:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 0203 	and.w	r2, r3, #3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009a94:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009aa0:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <HAL_RCC_GetClockConfig+0x5c>)
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009aae:	4b07      	ldr	r3, [pc, #28]	; (8009acc <HAL_RCC_GetClockConfig+0x60>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0207 	and.w	r2, r3, #7
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	601a      	str	r2, [r3, #0]
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40023800 	.word	0x40023800
 8009acc:	40023c00 	.word	0x40023c00

08009ad0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e01c      	b.n	8009b1c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	795b      	ldrb	r3, [r3, #5]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d105      	bne.n	8009af8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f7fc fcbe 	bl	8006474 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f042 0204 	orr.w	r2, r2, #4
 8009b0c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e07b      	b.n	8009c2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b46:	d009      	beq.n	8009b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	61da      	str	r2, [r3, #28]
 8009b4e:	e005      	b.n	8009b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fc fcd4 	bl	8006524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ba4:	431a      	orrs	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be0:	ea42 0103 	orr.w	r1, r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	f003 0104 	and.w	r1, r3, #4
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	f003 0210 	and.w	r2, r3, #16
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	69da      	ldr	r2, [r3, #28]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e041      	b.n	8009ccc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d106      	bne.n	8009c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7fd f805 	bl	8006c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2202      	movs	r2, #2
 8009c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3304      	adds	r3, #4
 8009c72:	4619      	mov	r1, r3
 8009c74:	4610      	mov	r0, r2
 8009c76:	f000 fc57 	bl	800a528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e04e      	b.n	8009d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0201 	orr.w	r2, r2, #1
 8009d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a23      	ldr	r2, [pc, #140]	; (8009d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d022      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d16:	d01d      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a1f      	ldr	r2, [pc, #124]	; (8009d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d018      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a1c      	ldr	r2, [pc, #112]	; (8009da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00e      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a1b      	ldr	r2, [pc, #108]	; (8009da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d009      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a19      	ldr	r2, [pc, #100]	; (8009dac <HAL_TIM_Base_Start_IT+0xd8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0x80>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	; (8009db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d111      	bne.n	8009d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f003 0307 	and.w	r3, r3, #7
 8009d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b06      	cmp	r3, #6
 8009d64:	d010      	beq.n	8009d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0201 	orr.w	r2, r2, #1
 8009d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d76:	e007      	b.n	8009d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0201 	orr.w	r2, r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40000400 	.word	0x40000400
 8009da0:	40000800 	.word	0x40000800
 8009da4:	40000c00 	.word	0x40000c00
 8009da8:	40010400 	.word	0x40010400
 8009dac:	40014000 	.word	0x40014000
 8009db0:	40001800 	.word	0x40001800

08009db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e041      	b.n	8009e4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f839 	bl	8009e52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f000 fb98 	bl	800a528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b086      	sub	sp, #24
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e097      	b.n	8009faa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7fc ff38 	bl	8006d04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6812      	ldr	r2, [r2, #0]
 8009ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eaa:	f023 0307 	bic.w	r3, r3, #7
 8009eae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f000 fb34 	bl	800a528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699b      	ldr	r3, [r3, #24]
 8009ece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee8:	f023 0303 	bic.w	r3, r3, #3
 8009eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009f06:	f023 030c 	bic.w	r3, r3, #12
 8009f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	68da      	ldr	r2, [r3, #12]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	021b      	lsls	r3, r3, #8
 8009f22:	4313      	orrs	r3, r2
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	011a      	lsls	r2, r3, #4
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	031b      	lsls	r3, r3, #12
 8009f36:	4313      	orrs	r3, r2
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	011b      	lsls	r3, r3, #4
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d122      	bne.n	800a00e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d11b      	bne.n	800a00e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f06f 0202 	mvn.w	r2, #2
 8009fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d003      	beq.n	8009ffc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa78 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 8009ffa:	e005      	b.n	800a008 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 fa6a 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa7b 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d122      	bne.n	800a062 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b04      	cmp	r3, #4
 800a028:	d11b      	bne.n	800a062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f06f 0204 	mvn.w	r2, #4
 800a032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2202      	movs	r2, #2
 800a038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fa4e 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a04e:	e005      	b.n	800a05c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fa40 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fa51 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d122      	bne.n	800a0b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	d11b      	bne.n	800a0b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f06f 0208 	mvn.w	r2, #8
 800a086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2204      	movs	r2, #4
 800a08c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d003      	beq.n	800a0a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa24 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a0a2:	e005      	b.n	800a0b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa16 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa27 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	d122      	bne.n	800a10a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f003 0310 	and.w	r3, r3, #16
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d11b      	bne.n	800a10a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f06f 0210 	mvn.w	r2, #16
 800a0da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2208      	movs	r2, #8
 800a0e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f9fa 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a0f6:	e005      	b.n	800a104 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f9ec 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f9fd 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b01      	cmp	r3, #1
 800a116:	d10e      	bne.n	800a136 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b01      	cmp	r3, #1
 800a124:	d107      	bne.n	800a136 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f06f 0201 	mvn.w	r2, #1
 800a12e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fc f973 	bl	800641c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b80      	cmp	r3, #128	; 0x80
 800a142:	d10e      	bne.n	800a162 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b80      	cmp	r3, #128	; 0x80
 800a150:	d107      	bne.n	800a162 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fd53 	bl	800ac08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b40      	cmp	r3, #64	; 0x40
 800a16e:	d10e      	bne.n	800a18e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b40      	cmp	r3, #64	; 0x40
 800a17c:	d107      	bne.n	800a18e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9c2 	bl	800a512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d10e      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d107      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f06f 0220 	mvn.w	r2, #32
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fd1d 	bl	800abf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e0ae      	b.n	800a340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b0c      	cmp	r3, #12
 800a1ee:	f200 809f 	bhi.w	800a330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1f2:	a201      	add	r2, pc, #4	; (adr r2, 800a1f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f8:	0800a22d 	.word	0x0800a22d
 800a1fc:	0800a331 	.word	0x0800a331
 800a200:	0800a331 	.word	0x0800a331
 800a204:	0800a331 	.word	0x0800a331
 800a208:	0800a26d 	.word	0x0800a26d
 800a20c:	0800a331 	.word	0x0800a331
 800a210:	0800a331 	.word	0x0800a331
 800a214:	0800a331 	.word	0x0800a331
 800a218:	0800a2af 	.word	0x0800a2af
 800a21c:	0800a331 	.word	0x0800a331
 800a220:	0800a331 	.word	0x0800a331
 800a224:	0800a331 	.word	0x0800a331
 800a228:	0800a2ef 	.word	0x0800a2ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fa18 	bl	800a668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	699a      	ldr	r2, [r3, #24]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0208 	orr.w	r2, r2, #8
 800a246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	699a      	ldr	r2, [r3, #24]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0204 	bic.w	r2, r2, #4
 800a256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6999      	ldr	r1, [r3, #24]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	619a      	str	r2, [r3, #24]
      break;
 800a26a:	e064      	b.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fa68 	bl	800a748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699a      	ldr	r2, [r3, #24]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699a      	ldr	r2, [r3, #24]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6999      	ldr	r1, [r3, #24]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	021a      	lsls	r2, r3, #8
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	619a      	str	r2, [r3, #24]
      break;
 800a2ac:	e043      	b.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68b9      	ldr	r1, [r7, #8]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fabd 	bl	800a834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69da      	ldr	r2, [r3, #28]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f042 0208 	orr.w	r2, r2, #8
 800a2c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69da      	ldr	r2, [r3, #28]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0204 	bic.w	r2, r2, #4
 800a2d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	69d9      	ldr	r1, [r3, #28]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	61da      	str	r2, [r3, #28]
      break;
 800a2ec:	e023      	b.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fb11 	bl	800a91c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69da      	ldr	r2, [r3, #28]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69d9      	ldr	r1, [r3, #28]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	021a      	lsls	r2, r3, #8
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	61da      	str	r2, [r3, #28]
      break;
 800a32e:	e002      	b.n	800a336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	75fb      	strb	r3, [r7, #23]
      break;
 800a334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_TIM_ConfigClockSource+0x1c>
 800a360:	2302      	movs	r3, #2
 800a362:	e0b4      	b.n	800a4ce <HAL_TIM_ConfigClockSource+0x186>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a38a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a39c:	d03e      	beq.n	800a41c <HAL_TIM_ConfigClockSource+0xd4>
 800a39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a2:	f200 8087 	bhi.w	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3aa:	f000 8086 	beq.w	800a4ba <HAL_TIM_ConfigClockSource+0x172>
 800a3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b2:	d87f      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b4:	2b70      	cmp	r3, #112	; 0x70
 800a3b6:	d01a      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0xa6>
 800a3b8:	2b70      	cmp	r3, #112	; 0x70
 800a3ba:	d87b      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3bc:	2b60      	cmp	r3, #96	; 0x60
 800a3be:	d050      	beq.n	800a462 <HAL_TIM_ConfigClockSource+0x11a>
 800a3c0:	2b60      	cmp	r3, #96	; 0x60
 800a3c2:	d877      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3c4:	2b50      	cmp	r3, #80	; 0x50
 800a3c6:	d03c      	beq.n	800a442 <HAL_TIM_ConfigClockSource+0xfa>
 800a3c8:	2b50      	cmp	r3, #80	; 0x50
 800a3ca:	d873      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3cc:	2b40      	cmp	r3, #64	; 0x40
 800a3ce:	d058      	beq.n	800a482 <HAL_TIM_ConfigClockSource+0x13a>
 800a3d0:	2b40      	cmp	r3, #64	; 0x40
 800a3d2:	d86f      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d4:	2b30      	cmp	r3, #48	; 0x30
 800a3d6:	d064      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3d8:	2b30      	cmp	r3, #48	; 0x30
 800a3da:	d86b      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d060      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d867      	bhi.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d05c      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3e8:	2b10      	cmp	r3, #16
 800a3ea:	d05a      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0x15a>
 800a3ec:	e062      	b.n	800a4b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6818      	ldr	r0, [r3, #0]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6899      	ldr	r1, [r3, #8]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f000 fb5d 	bl	800aabc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	609a      	str	r2, [r3, #8]
      break;
 800a41a:	e04f      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	6899      	ldr	r1, [r3, #8]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f000 fb46 	bl	800aabc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a43e:	609a      	str	r2, [r3, #8]
      break;
 800a440:	e03c      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6818      	ldr	r0, [r3, #0]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	6859      	ldr	r1, [r3, #4]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	461a      	mov	r2, r3
 800a450:	f000 faba 	bl	800a9c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2150      	movs	r1, #80	; 0x50
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fb13 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a460:	e02c      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	6859      	ldr	r1, [r3, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	461a      	mov	r2, r3
 800a470:	f000 fad9 	bl	800aa26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2160      	movs	r1, #96	; 0x60
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 fb03 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a480:	e01c      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	6859      	ldr	r1, [r3, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	461a      	mov	r2, r3
 800a490:	f000 fa9a 	bl	800a9c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2140      	movs	r1, #64	; 0x40
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 faf3 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a4a0:	e00c      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f000 faea 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a4b2:	e003      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b8:	e000      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a40      	ldr	r2, [pc, #256]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d013      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d00f      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a3d      	ldr	r2, [pc, #244]	; (800a640 <TIM_Base_SetConfig+0x118>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00b      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a3c      	ldr	r2, [pc, #240]	; (800a644 <TIM_Base_SetConfig+0x11c>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d007      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a3b      	ldr	r2, [pc, #236]	; (800a648 <TIM_Base_SetConfig+0x120>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a3a      	ldr	r2, [pc, #232]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d108      	bne.n	800a57a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a56e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a2f      	ldr	r2, [pc, #188]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d02b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a588:	d027      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a2c      	ldr	r2, [pc, #176]	; (800a640 <TIM_Base_SetConfig+0x118>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d023      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a2b      	ldr	r2, [pc, #172]	; (800a644 <TIM_Base_SetConfig+0x11c>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d01f      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <TIM_Base_SetConfig+0x120>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a29      	ldr	r2, [pc, #164]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d017      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a28      	ldr	r2, [pc, #160]	; (800a650 <TIM_Base_SetConfig+0x128>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d013      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a27      	ldr	r2, [pc, #156]	; (800a654 <TIM_Base_SetConfig+0x12c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00f      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a26      	ldr	r2, [pc, #152]	; (800a658 <TIM_Base_SetConfig+0x130>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a25      	ldr	r2, [pc, #148]	; (800a65c <TIM_Base_SetConfig+0x134>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d007      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a24      	ldr	r2, [pc, #144]	; (800a660 <TIM_Base_SetConfig+0x138>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a23      	ldr	r2, [pc, #140]	; (800a664 <TIM_Base_SetConfig+0x13c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d108      	bne.n	800a5ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d003      	beq.n	800a620 <TIM_Base_SetConfig+0xf8>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d103      	bne.n	800a628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	615a      	str	r2, [r3, #20]
}
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40010000 	.word	0x40010000
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40010400 	.word	0x40010400
 800a650:	40014000 	.word	0x40014000
 800a654:	40014400 	.word	0x40014400
 800a658:	40014800 	.word	0x40014800
 800a65c:	40001800 	.word	0x40001800
 800a660:	40001c00 	.word	0x40001c00
 800a664:	40002000 	.word	0x40002000

0800a668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	f023 0201 	bic.w	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f023 0302 	bic.w	r3, r3, #2
 800a6b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a20      	ldr	r2, [pc, #128]	; (800a740 <TIM_OC1_SetConfig+0xd8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC1_SetConfig+0x64>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a1f      	ldr	r2, [pc, #124]	; (800a744 <TIM_OC1_SetConfig+0xdc>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10c      	bne.n	800a6e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 0308 	bic.w	r3, r3, #8
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f023 0304 	bic.w	r3, r3, #4
 800a6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <TIM_OC1_SetConfig+0xd8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <TIM_OC1_SetConfig+0x8e>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a14      	ldr	r2, [pc, #80]	; (800a744 <TIM_OC1_SetConfig+0xdc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d111      	bne.n	800a71a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	4313      	orrs	r3, r2
 800a718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	621a      	str	r2, [r3, #32]
}
 800a734:	bf00      	nop
 800a736:	371c      	adds	r7, #28
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	40010000 	.word	0x40010000
 800a744:	40010400 	.word	0x40010400

0800a748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0210 	bic.w	r2, r3, #16
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	021b      	lsls	r3, r3, #8
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f023 0320 	bic.w	r3, r3, #32
 800a792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a22      	ldr	r2, [pc, #136]	; (800a82c <TIM_OC2_SetConfig+0xe4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d003      	beq.n	800a7b0 <TIM_OC2_SetConfig+0x68>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a21      	ldr	r2, [pc, #132]	; (800a830 <TIM_OC2_SetConfig+0xe8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d10d      	bne.n	800a7cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <TIM_OC2_SetConfig+0xe4>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d003      	beq.n	800a7dc <TIM_OC2_SetConfig+0x94>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a16      	ldr	r2, [pc, #88]	; (800a830 <TIM_OC2_SetConfig+0xe8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d113      	bne.n	800a804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	621a      	str	r2, [r3, #32]
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40010000 	.word	0x40010000
 800a830:	40010400 	.word	0x40010400

0800a834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a21      	ldr	r2, [pc, #132]	; (800a914 <TIM_OC3_SetConfig+0xe0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC3_SetConfig+0x66>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a20      	ldr	r2, [pc, #128]	; (800a918 <TIM_OC3_SetConfig+0xe4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d10d      	bne.n	800a8b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a16      	ldr	r2, [pc, #88]	; (800a914 <TIM_OC3_SetConfig+0xe0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_OC3_SetConfig+0x92>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a15      	ldr	r2, [pc, #84]	; (800a918 <TIM_OC3_SetConfig+0xe4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d113      	bne.n	800a8ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	621a      	str	r2, [r3, #32]
}
 800a908:	bf00      	nop
 800a90a:	371c      	adds	r7, #28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40010000 	.word	0x40010000
 800a918:	40010400 	.word	0x40010400

0800a91c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	031b      	lsls	r3, r3, #12
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a12      	ldr	r2, [pc, #72]	; (800a9c0 <TIM_OC4_SetConfig+0xa4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_OC4_SetConfig+0x68>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a11      	ldr	r2, [pc, #68]	; (800a9c4 <TIM_OC4_SetConfig+0xa8>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d109      	bne.n	800a998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a98a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	019b      	lsls	r3, r3, #6
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40010400 	.word	0x40010400

0800a9c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f023 0201 	bic.w	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f023 030a 	bic.w	r3, r3, #10
 800aa04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	621a      	str	r2, [r3, #32]
}
 800aa1a:	bf00      	nop
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b087      	sub	sp, #28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f023 0210 	bic.w	r2, r3, #16
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	031b      	lsls	r3, r3, #12
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	621a      	str	r2, [r3, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f043 0307 	orr.w	r3, r3, #7
 800aaa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	609a      	str	r2, [r3, #8]
}
 800aab0:	bf00      	nop
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	021a      	lsls	r2, r3, #8
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	431a      	orrs	r2, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	609a      	str	r2, [r3, #8]
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d101      	bne.n	800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab10:	2302      	movs	r3, #2
 800ab12:	e05a      	b.n	800abca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a21      	ldr	r2, [pc, #132]	; (800abd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d022      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab60:	d01d      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a1d      	ldr	r2, [pc, #116]	; (800abdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d018      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a1b      	ldr	r2, [pc, #108]	; (800abe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d013      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a1a      	ldr	r2, [pc, #104]	; (800abe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d00e      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d009      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a17      	ldr	r2, [pc, #92]	; (800abec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d004      	beq.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d10c      	bne.n	800abb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	4313      	orrs	r3, r2
 800abae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40000400 	.word	0x40000400
 800abe0:	40000800 	.word	0x40000800
 800abe4:	40000c00 	.word	0x40000c00
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40001800 	.word	0x40001800

0800abf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d101      	bne.n	800ac2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e03f      	b.n	800acae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7fc f934 	bl	8006eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2224      	movs	r2, #36	; 0x24
 800ac4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68da      	ldr	r2, [r3, #12]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f829 	bl	800acb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	691a      	ldr	r2, [r3, #16]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	695a      	ldr	r2, [r3, #20]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2220      	movs	r2, #32
 800aca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800acb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acbc:	b0c0      	sub	sp, #256	; 0x100
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800acd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd4:	68d9      	ldr	r1, [r3, #12]
 800acd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	ea40 0301 	orr.w	r3, r0, r1
 800ace0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ace2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	431a      	orrs	r2, r3
 800acf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	431a      	orrs	r2, r3
 800acf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ad04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ad10:	f021 010c 	bic.w	r1, r1, #12
 800ad14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ad22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ad2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad32:	6999      	ldr	r1, [r3, #24]
 800ad34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	ea40 0301 	orr.w	r3, r0, r1
 800ad3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ad40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b8f      	ldr	r3, [pc, #572]	; (800af84 <UART_SetConfig+0x2cc>)
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d005      	beq.n	800ad58 <UART_SetConfig+0xa0>
 800ad4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	4b8d      	ldr	r3, [pc, #564]	; (800af88 <UART_SetConfig+0x2d0>)
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d104      	bne.n	800ad62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad58:	f7fe fe74 	bl	8009a44 <HAL_RCC_GetPCLK2Freq>
 800ad5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ad60:	e003      	b.n	800ad6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad62:	f7fe fe5b 	bl	8009a1c <HAL_RCC_GetPCLK1Freq>
 800ad66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad74:	f040 810c 	bne.w	800af90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	1891      	adds	r1, r2, r2
 800ad90:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad92:	415b      	adcs	r3, r3
 800ad94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	eb12 0801 	adds.w	r8, r2, r1
 800ada0:	4629      	mov	r1, r5
 800ada2:	eb43 0901 	adc.w	r9, r3, r1
 800ada6:	f04f 0200 	mov.w	r2, #0
 800adaa:	f04f 0300 	mov.w	r3, #0
 800adae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800adb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adba:	4690      	mov	r8, r2
 800adbc:	4699      	mov	r9, r3
 800adbe:	4623      	mov	r3, r4
 800adc0:	eb18 0303 	adds.w	r3, r8, r3
 800adc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adc8:	462b      	mov	r3, r5
 800adca:	eb49 0303 	adc.w	r3, r9, r3
 800adce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800add2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800adde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ade2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ade6:	460b      	mov	r3, r1
 800ade8:	18db      	adds	r3, r3, r3
 800adea:	653b      	str	r3, [r7, #80]	; 0x50
 800adec:	4613      	mov	r3, r2
 800adee:	eb42 0303 	adc.w	r3, r2, r3
 800adf2:	657b      	str	r3, [r7, #84]	; 0x54
 800adf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800adf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800adfc:	f7f5 fa38 	bl	8000270 <__aeabi_uldivmod>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4b61      	ldr	r3, [pc, #388]	; (800af8c <UART_SetConfig+0x2d4>)
 800ae06:	fba3 2302 	umull	r2, r3, r3, r2
 800ae0a:	095b      	lsrs	r3, r3, #5
 800ae0c:	011c      	lsls	r4, r3, #4
 800ae0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ae1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	1891      	adds	r1, r2, r2
 800ae26:	64b9      	str	r1, [r7, #72]	; 0x48
 800ae28:	415b      	adcs	r3, r3
 800ae2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ae30:	4641      	mov	r1, r8
 800ae32:	eb12 0a01 	adds.w	sl, r2, r1
 800ae36:	4649      	mov	r1, r9
 800ae38:	eb43 0b01 	adc.w	fp, r3, r1
 800ae3c:	f04f 0200 	mov.w	r2, #0
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae50:	4692      	mov	sl, r2
 800ae52:	469b      	mov	fp, r3
 800ae54:	4643      	mov	r3, r8
 800ae56:	eb1a 0303 	adds.w	r3, sl, r3
 800ae5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae5e:	464b      	mov	r3, r9
 800ae60:	eb4b 0303 	adc.w	r3, fp, r3
 800ae64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	18db      	adds	r3, r3, r3
 800ae80:	643b      	str	r3, [r7, #64]	; 0x40
 800ae82:	4613      	mov	r3, r2
 800ae84:	eb42 0303 	adc.w	r3, r2, r3
 800ae88:	647b      	str	r3, [r7, #68]	; 0x44
 800ae8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae92:	f7f5 f9ed 	bl	8000270 <__aeabi_uldivmod>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4b3b      	ldr	r3, [pc, #236]	; (800af8c <UART_SetConfig+0x2d4>)
 800ae9e:	fba3 2301 	umull	r2, r3, r3, r1
 800aea2:	095b      	lsrs	r3, r3, #5
 800aea4:	2264      	movs	r2, #100	; 0x64
 800aea6:	fb02 f303 	mul.w	r3, r2, r3
 800aeaa:	1acb      	subs	r3, r1, r3
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aeb2:	4b36      	ldr	r3, [pc, #216]	; (800af8c <UART_SetConfig+0x2d4>)
 800aeb4:	fba3 2302 	umull	r2, r3, r3, r2
 800aeb8:	095b      	lsrs	r3, r3, #5
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aec0:	441c      	add	r4, r3
 800aec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aec6:	2200      	movs	r2, #0
 800aec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aed4:	4642      	mov	r2, r8
 800aed6:	464b      	mov	r3, r9
 800aed8:	1891      	adds	r1, r2, r2
 800aeda:	63b9      	str	r1, [r7, #56]	; 0x38
 800aedc:	415b      	adcs	r3, r3
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aee4:	4641      	mov	r1, r8
 800aee6:	1851      	adds	r1, r2, r1
 800aee8:	6339      	str	r1, [r7, #48]	; 0x30
 800aeea:	4649      	mov	r1, r9
 800aeec:	414b      	adcs	r3, r1
 800aeee:	637b      	str	r3, [r7, #52]	; 0x34
 800aef0:	f04f 0200 	mov.w	r2, #0
 800aef4:	f04f 0300 	mov.w	r3, #0
 800aef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aefc:	4659      	mov	r1, fp
 800aefe:	00cb      	lsls	r3, r1, #3
 800af00:	4651      	mov	r1, sl
 800af02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af06:	4651      	mov	r1, sl
 800af08:	00ca      	lsls	r2, r1, #3
 800af0a:	4610      	mov	r0, r2
 800af0c:	4619      	mov	r1, r3
 800af0e:	4603      	mov	r3, r0
 800af10:	4642      	mov	r2, r8
 800af12:	189b      	adds	r3, r3, r2
 800af14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af18:	464b      	mov	r3, r9
 800af1a:	460a      	mov	r2, r1
 800af1c:	eb42 0303 	adc.w	r3, r2, r3
 800af20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800af30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800af34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800af38:	460b      	mov	r3, r1
 800af3a:	18db      	adds	r3, r3, r3
 800af3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800af3e:	4613      	mov	r3, r2
 800af40:	eb42 0303 	adc.w	r3, r2, r3
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800af4e:	f7f5 f98f 	bl	8000270 <__aeabi_uldivmod>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <UART_SetConfig+0x2d4>)
 800af58:	fba3 1302 	umull	r1, r3, r3, r2
 800af5c:	095b      	lsrs	r3, r3, #5
 800af5e:	2164      	movs	r1, #100	; 0x64
 800af60:	fb01 f303 	mul.w	r3, r1, r3
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	3332      	adds	r3, #50	; 0x32
 800af6a:	4a08      	ldr	r2, [pc, #32]	; (800af8c <UART_SetConfig+0x2d4>)
 800af6c:	fba2 2303 	umull	r2, r3, r2, r3
 800af70:	095b      	lsrs	r3, r3, #5
 800af72:	f003 0207 	and.w	r2, r3, #7
 800af76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4422      	add	r2, r4
 800af7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af80:	e105      	b.n	800b18e <UART_SetConfig+0x4d6>
 800af82:	bf00      	nop
 800af84:	40011000 	.word	0x40011000
 800af88:	40011400 	.word	0x40011400
 800af8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af94:	2200      	movs	r2, #0
 800af96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800afa2:	4642      	mov	r2, r8
 800afa4:	464b      	mov	r3, r9
 800afa6:	1891      	adds	r1, r2, r2
 800afa8:	6239      	str	r1, [r7, #32]
 800afaa:	415b      	adcs	r3, r3
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
 800afae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afb2:	4641      	mov	r1, r8
 800afb4:	1854      	adds	r4, r2, r1
 800afb6:	4649      	mov	r1, r9
 800afb8:	eb43 0501 	adc.w	r5, r3, r1
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	f04f 0300 	mov.w	r3, #0
 800afc4:	00eb      	lsls	r3, r5, #3
 800afc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800afca:	00e2      	lsls	r2, r4, #3
 800afcc:	4614      	mov	r4, r2
 800afce:	461d      	mov	r5, r3
 800afd0:	4643      	mov	r3, r8
 800afd2:	18e3      	adds	r3, r4, r3
 800afd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800afd8:	464b      	mov	r3, r9
 800afda:	eb45 0303 	adc.w	r3, r5, r3
 800afde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800afe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aff2:	f04f 0200 	mov.w	r2, #0
 800aff6:	f04f 0300 	mov.w	r3, #0
 800affa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800affe:	4629      	mov	r1, r5
 800b000:	008b      	lsls	r3, r1, #2
 800b002:	4621      	mov	r1, r4
 800b004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b008:	4621      	mov	r1, r4
 800b00a:	008a      	lsls	r2, r1, #2
 800b00c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b010:	f7f5 f92e 	bl	8000270 <__aeabi_uldivmod>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4b60      	ldr	r3, [pc, #384]	; (800b19c <UART_SetConfig+0x4e4>)
 800b01a:	fba3 2302 	umull	r2, r3, r3, r2
 800b01e:	095b      	lsrs	r3, r3, #5
 800b020:	011c      	lsls	r4, r3, #4
 800b022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b026:	2200      	movs	r2, #0
 800b028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b02c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b034:	4642      	mov	r2, r8
 800b036:	464b      	mov	r3, r9
 800b038:	1891      	adds	r1, r2, r2
 800b03a:	61b9      	str	r1, [r7, #24]
 800b03c:	415b      	adcs	r3, r3
 800b03e:	61fb      	str	r3, [r7, #28]
 800b040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b044:	4641      	mov	r1, r8
 800b046:	1851      	adds	r1, r2, r1
 800b048:	6139      	str	r1, [r7, #16]
 800b04a:	4649      	mov	r1, r9
 800b04c:	414b      	adcs	r3, r1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	f04f 0200 	mov.w	r2, #0
 800b054:	f04f 0300 	mov.w	r3, #0
 800b058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b05c:	4659      	mov	r1, fp
 800b05e:	00cb      	lsls	r3, r1, #3
 800b060:	4651      	mov	r1, sl
 800b062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b066:	4651      	mov	r1, sl
 800b068:	00ca      	lsls	r2, r1, #3
 800b06a:	4610      	mov	r0, r2
 800b06c:	4619      	mov	r1, r3
 800b06e:	4603      	mov	r3, r0
 800b070:	4642      	mov	r2, r8
 800b072:	189b      	adds	r3, r3, r2
 800b074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b078:	464b      	mov	r3, r9
 800b07a:	460a      	mov	r2, r1
 800b07c:	eb42 0303 	adc.w	r3, r2, r3
 800b080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b08e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	f04f 0300 	mov.w	r3, #0
 800b098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b09c:	4649      	mov	r1, r9
 800b09e:	008b      	lsls	r3, r1, #2
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0a6:	4641      	mov	r1, r8
 800b0a8:	008a      	lsls	r2, r1, #2
 800b0aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b0ae:	f7f5 f8df 	bl	8000270 <__aeabi_uldivmod>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4b39      	ldr	r3, [pc, #228]	; (800b19c <UART_SetConfig+0x4e4>)
 800b0b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	2164      	movs	r1, #100	; 0x64
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	3332      	adds	r3, #50	; 0x32
 800b0ca:	4a34      	ldr	r2, [pc, #208]	; (800b19c <UART_SetConfig+0x4e4>)
 800b0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0d6:	441c      	add	r4, r3
 800b0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0dc:	2200      	movs	r2, #0
 800b0de:	673b      	str	r3, [r7, #112]	; 0x70
 800b0e0:	677a      	str	r2, [r7, #116]	; 0x74
 800b0e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	1891      	adds	r1, r2, r2
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	415b      	adcs	r3, r3
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0f6:	4641      	mov	r1, r8
 800b0f8:	1851      	adds	r1, r2, r1
 800b0fa:	6039      	str	r1, [r7, #0]
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	414b      	adcs	r3, r1
 800b100:	607b      	str	r3, [r7, #4]
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b10e:	4659      	mov	r1, fp
 800b110:	00cb      	lsls	r3, r1, #3
 800b112:	4651      	mov	r1, sl
 800b114:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b118:	4651      	mov	r1, sl
 800b11a:	00ca      	lsls	r2, r1, #3
 800b11c:	4610      	mov	r0, r2
 800b11e:	4619      	mov	r1, r3
 800b120:	4603      	mov	r3, r0
 800b122:	4642      	mov	r2, r8
 800b124:	189b      	adds	r3, r3, r2
 800b126:	66bb      	str	r3, [r7, #104]	; 0x68
 800b128:	464b      	mov	r3, r9
 800b12a:	460a      	mov	r2, r1
 800b12c:	eb42 0303 	adc.w	r3, r2, r3
 800b130:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	663b      	str	r3, [r7, #96]	; 0x60
 800b13c:	667a      	str	r2, [r7, #100]	; 0x64
 800b13e:	f04f 0200 	mov.w	r2, #0
 800b142:	f04f 0300 	mov.w	r3, #0
 800b146:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b14a:	4649      	mov	r1, r9
 800b14c:	008b      	lsls	r3, r1, #2
 800b14e:	4641      	mov	r1, r8
 800b150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b154:	4641      	mov	r1, r8
 800b156:	008a      	lsls	r2, r1, #2
 800b158:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b15c:	f7f5 f888 	bl	8000270 <__aeabi_uldivmod>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4b0d      	ldr	r3, [pc, #52]	; (800b19c <UART_SetConfig+0x4e4>)
 800b166:	fba3 1302 	umull	r1, r3, r3, r2
 800b16a:	095b      	lsrs	r3, r3, #5
 800b16c:	2164      	movs	r1, #100	; 0x64
 800b16e:	fb01 f303 	mul.w	r3, r1, r3
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	011b      	lsls	r3, r3, #4
 800b176:	3332      	adds	r3, #50	; 0x32
 800b178:	4a08      	ldr	r2, [pc, #32]	; (800b19c <UART_SetConfig+0x4e4>)
 800b17a:	fba2 2303 	umull	r2, r3, r2, r3
 800b17e:	095b      	lsrs	r3, r3, #5
 800b180:	f003 020f 	and.w	r2, r3, #15
 800b184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4422      	add	r2, r4
 800b18c:	609a      	str	r2, [r3, #8]
}
 800b18e:	bf00      	nop
 800b190:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b194:	46bd      	mov	sp, r7
 800b196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b19a:	bf00      	nop
 800b19c:	51eb851f 	.word	0x51eb851f

0800b1a0 <__NVIC_SetPriority>:
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	6039      	str	r1, [r7, #0]
 800b1aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	db0a      	blt.n	800b1ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	490c      	ldr	r1, [pc, #48]	; (800b1ec <__NVIC_SetPriority+0x4c>)
 800b1ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1be:	0112      	lsls	r2, r2, #4
 800b1c0:	b2d2      	uxtb	r2, r2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b1c8:	e00a      	b.n	800b1e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	4908      	ldr	r1, [pc, #32]	; (800b1f0 <__NVIC_SetPriority+0x50>)
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	f003 030f 	and.w	r3, r3, #15
 800b1d6:	3b04      	subs	r3, #4
 800b1d8:	0112      	lsls	r2, r2, #4
 800b1da:	b2d2      	uxtb	r2, r2
 800b1dc:	440b      	add	r3, r1
 800b1de:	761a      	strb	r2, [r3, #24]
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	e000e100 	.word	0xe000e100
 800b1f0:	e000ed00 	.word	0xe000ed00

0800b1f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1f8:	4b05      	ldr	r3, [pc, #20]	; (800b210 <SysTick_Handler+0x1c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1fc:	f002 fde8 	bl	800ddd0 <xTaskGetSchedulerState>
 800b200:	4603      	mov	r3, r0
 800b202:	2b01      	cmp	r3, #1
 800b204:	d001      	beq.n	800b20a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b206:	f003 fe0f 	bl	800ee28 <xPortSysTickHandler>
  }
}
 800b20a:	bf00      	nop
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000e010 	.word	0xe000e010

0800b214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b218:	2100      	movs	r1, #0
 800b21a:	f06f 0004 	mvn.w	r0, #4
 800b21e:	f7ff ffbf 	bl	800b1a0 <__NVIC_SetPriority>
#endif
}
 800b222:	bf00      	nop
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b22e:	f3ef 8305 	mrs	r3, IPSR
 800b232:	603b      	str	r3, [r7, #0]
  return(result);
 800b234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b23a:	f06f 0305 	mvn.w	r3, #5
 800b23e:	607b      	str	r3, [r7, #4]
 800b240:	e00c      	b.n	800b25c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b242:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <osKernelInitialize+0x44>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d105      	bne.n	800b256 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b24a:	4b08      	ldr	r3, [pc, #32]	; (800b26c <osKernelInitialize+0x44>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b250:	2300      	movs	r3, #0
 800b252:	607b      	str	r3, [r7, #4]
 800b254:	e002      	b.n	800b25c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b256:	f04f 33ff 	mov.w	r3, #4294967295
 800b25a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b25c:	687b      	ldr	r3, [r7, #4]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20000f64 	.word	0x20000f64

0800b270 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b276:	f3ef 8305 	mrs	r3, IPSR
 800b27a:	603b      	str	r3, [r7, #0]
  return(result);
 800b27c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b282:	f06f 0305 	mvn.w	r3, #5
 800b286:	607b      	str	r3, [r7, #4]
 800b288:	e010      	b.n	800b2ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b28a:	4b0b      	ldr	r3, [pc, #44]	; (800b2b8 <osKernelStart+0x48>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d109      	bne.n	800b2a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b292:	f7ff ffbf 	bl	800b214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b296:	4b08      	ldr	r3, [pc, #32]	; (800b2b8 <osKernelStart+0x48>)
 800b298:	2202      	movs	r2, #2
 800b29a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b29c:	f002 f8d8 	bl	800d450 <vTaskStartScheduler>
      stat = osOK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	607b      	str	r3, [r7, #4]
 800b2a4:	e002      	b.n	800b2ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2ac:	687b      	ldr	r3, [r7, #4]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20000f64 	.word	0x20000f64

0800b2bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08e      	sub	sp, #56	; 0x38
 800b2c0:	af04      	add	r7, sp, #16
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2cc:	f3ef 8305 	mrs	r3, IPSR
 800b2d0:	617b      	str	r3, [r7, #20]
  return(result);
 800b2d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d17e      	bne.n	800b3d6 <osThreadNew+0x11a>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d07b      	beq.n	800b3d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b2de:	2380      	movs	r3, #128	; 0x80
 800b2e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2e2:	2318      	movs	r3, #24
 800b2e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d045      	beq.n	800b382 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <osThreadNew+0x48>
        name = attr->name;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d008      	beq.n	800b32a <osThreadNew+0x6e>
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	2b38      	cmp	r3, #56	; 0x38
 800b31c:	d805      	bhi.n	800b32a <osThreadNew+0x6e>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <osThreadNew+0x72>
        return (NULL);
 800b32a:	2300      	movs	r3, #0
 800b32c:	e054      	b.n	800b3d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	695b      	ldr	r3, [r3, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	089b      	lsrs	r3, r3, #2
 800b33c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00e      	beq.n	800b364 <osThreadNew+0xa8>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2bbf      	cmp	r3, #191	; 0xbf
 800b34c:	d90a      	bls.n	800b364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b352:	2b00      	cmp	r3, #0
 800b354:	d006      	beq.n	800b364 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <osThreadNew+0xa8>
        mem = 1;
 800b35e:	2301      	movs	r3, #1
 800b360:	61bb      	str	r3, [r7, #24]
 800b362:	e010      	b.n	800b386 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d10c      	bne.n	800b386 <osThreadNew+0xca>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d108      	bne.n	800b386 <osThreadNew+0xca>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d104      	bne.n	800b386 <osThreadNew+0xca>
          mem = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	e001      	b.n	800b386 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d110      	bne.n	800b3ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b394:	9202      	str	r2, [sp, #8]
 800b396:	9301      	str	r3, [sp, #4]
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	6a3a      	ldr	r2, [r7, #32]
 800b3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f001 fe64 	bl	800d070 <xTaskCreateStatic>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	613b      	str	r3, [r7, #16]
 800b3ac:	e013      	b.n	800b3d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d110      	bne.n	800b3d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	f107 0310 	add.w	r3, r7, #16
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f001 feaf 	bl	800d12a <xTaskCreate>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d001      	beq.n	800b3d6 <osThreadNew+0x11a>
            hTask = NULL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b3d6:	693b      	ldr	r3, [r7, #16]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3728      	adds	r7, #40	; 0x28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e8:	f3ef 8305 	mrs	r3, IPSR
 800b3ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d003      	beq.n	800b3fc <osDelay+0x1c>
    stat = osErrorISR;
 800b3f4:	f06f 0305 	mvn.w	r3, #5
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e007      	b.n	800b40c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 ffee 	bl	800d3e8 <vTaskDelay>
    }
  }

  return (stat);
 800b40c:	68fb      	ldr	r3, [r7, #12]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b422:	f3ef 8305 	mrs	r3, IPSR
 800b426:	60bb      	str	r3, [r7, #8]
  return(result);
 800b428:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d174      	bne.n	800b518 <osMutexNew+0x102>
    if (attr != NULL) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	61bb      	str	r3, [r7, #24]
 800b43a:	e001      	b.n	800b440 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d002      	beq.n	800b450 <osMutexNew+0x3a>
      rmtx = 1U;
 800b44a:	2301      	movs	r3, #1
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	e001      	b.n	800b454 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	f003 0308 	and.w	r3, r3, #8
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d15c      	bne.n	800b518 <osMutexNew+0x102>
      mem = -1;
 800b45e:	f04f 33ff 	mov.w	r3, #4294967295
 800b462:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d015      	beq.n	800b496 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d006      	beq.n	800b480 <osMutexNew+0x6a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b4f      	cmp	r3, #79	; 0x4f
 800b478:	d902      	bls.n	800b480 <osMutexNew+0x6a>
          mem = 1;
 800b47a:	2301      	movs	r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
 800b47e:	e00c      	b.n	800b49a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d108      	bne.n	800b49a <osMutexNew+0x84>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <osMutexNew+0x84>
            mem = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	613b      	str	r3, [r7, #16]
 800b494:	e001      	b.n	800b49a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d112      	bne.n	800b4c6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d007      	beq.n	800b4b6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	2004      	movs	r0, #4
 800b4ae:	f000 fc48 	bl	800bd42 <xQueueCreateMutexStatic>
 800b4b2:	61f8      	str	r0, [r7, #28]
 800b4b4:	e016      	b.n	800b4e4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	2001      	movs	r0, #1
 800b4be:	f000 fc40 	bl	800bd42 <xQueueCreateMutexStatic>
 800b4c2:	61f8      	str	r0, [r7, #28]
 800b4c4:	e00e      	b.n	800b4e4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10b      	bne.n	800b4e4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d004      	beq.n	800b4dc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b4d2:	2004      	movs	r0, #4
 800b4d4:	f000 fc1d 	bl	800bd12 <xQueueCreateMutex>
 800b4d8:	61f8      	str	r0, [r7, #28]
 800b4da:	e003      	b.n	800b4e4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f000 fc18 	bl	800bd12 <xQueueCreateMutex>
 800b4e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00c      	beq.n	800b504 <osMutexNew+0xee>
        if (attr != NULL) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d003      	beq.n	800b4f8 <osMutexNew+0xe2>
          name = attr->name;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	e001      	b.n	800b4fc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b4fc:	68f9      	ldr	r1, [r7, #12]
 800b4fe:	69f8      	ldr	r0, [r7, #28]
 800b500:	f001 f9d2 	bl	800c8a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <osMutexNew+0x102>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	f043 0301 	orr.w	r3, r3, #1
 800b516:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b518:	69fb      	ldr	r3, [r7, #28]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b522:	b580      	push	{r7, lr}
 800b524:	b086      	sub	sp, #24
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f023 0301 	bic.w	r3, r3, #1
 800b532:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b540:	f3ef 8305 	mrs	r3, IPSR
 800b544:	60bb      	str	r3, [r7, #8]
  return(result);
 800b546:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b54c:	f06f 0305 	mvn.w	r3, #5
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e02c      	b.n	800b5ae <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d103      	bne.n	800b562 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b55a:	f06f 0303 	mvn.w	r3, #3
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	e025      	b.n	800b5ae <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d011      	beq.n	800b58c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6938      	ldr	r0, [r7, #16]
 800b56c:	f000 fc38 	bl	800bde0 <xQueueTakeMutexRecursive>
 800b570:	4603      	mov	r3, r0
 800b572:	2b01      	cmp	r3, #1
 800b574:	d01b      	beq.n	800b5ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d003      	beq.n	800b584 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b57c:	f06f 0301 	mvn.w	r3, #1
 800b580:	617b      	str	r3, [r7, #20]
 800b582:	e014      	b.n	800b5ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b584:	f06f 0302 	mvn.w	r3, #2
 800b588:	617b      	str	r3, [r7, #20]
 800b58a:	e010      	b.n	800b5ae <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6938      	ldr	r0, [r7, #16]
 800b590:	f000 fed6 	bl	800c340 <xQueueSemaphoreTake>
 800b594:	4603      	mov	r3, r0
 800b596:	2b01      	cmp	r3, #1
 800b598:	d009      	beq.n	800b5ae <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b5a0:	f06f 0301 	mvn.w	r3, #1
 800b5a4:	617b      	str	r3, [r7, #20]
 800b5a6:	e002      	b.n	800b5ae <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b5a8:	f06f 0302 	mvn.w	r3, #2
 800b5ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b5ae:	697b      	ldr	r3, [r7, #20]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f023 0301 	bic.w	r3, r3, #1
 800b5c6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5d4:	f3ef 8305 	mrs	r3, IPSR
 800b5d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5da:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b5e0:	f06f 0305 	mvn.w	r3, #5
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	e01f      	b.n	800b628 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d103      	bne.n	800b5f6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b5ee:	f06f 0303 	mvn.w	r3, #3
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e018      	b.n	800b628 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d009      	beq.n	800b610 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b5fc:	6938      	ldr	r0, [r7, #16]
 800b5fe:	f000 fbbb 	bl	800bd78 <xQueueGiveMutexRecursive>
 800b602:	4603      	mov	r3, r0
 800b604:	2b01      	cmp	r3, #1
 800b606:	d00f      	beq.n	800b628 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b608:	f06f 0302 	mvn.w	r3, #2
 800b60c:	617b      	str	r3, [r7, #20]
 800b60e:	e00b      	b.n	800b628 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b610:	2300      	movs	r3, #0
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	6938      	ldr	r0, [r7, #16]
 800b618:	f000 fc18 	bl	800be4c <xQueueGenericSend>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d002      	beq.n	800b628 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b622:	f06f 0302 	mvn.w	r3, #2
 800b626:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b628:	697b      	ldr	r3, [r7, #20]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b632:	b580      	push	{r7, lr}
 800b634:	b08a      	sub	sp, #40	; 0x28
 800b636:	af02      	add	r7, sp, #8
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b63e:	2300      	movs	r3, #0
 800b640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b642:	f3ef 8305 	mrs	r3, IPSR
 800b646:	613b      	str	r3, [r7, #16]
  return(result);
 800b648:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d15f      	bne.n	800b70e <osMessageQueueNew+0xdc>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05c      	beq.n	800b70e <osMessageQueueNew+0xdc>
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d059      	beq.n	800b70e <osMessageQueueNew+0xdc>
    mem = -1;
 800b65a:	f04f 33ff 	mov.w	r3, #4294967295
 800b65e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d029      	beq.n	800b6ba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d012      	beq.n	800b694 <osMessageQueueNew+0x62>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	2b4f      	cmp	r3, #79	; 0x4f
 800b674:	d90e      	bls.n	800b694 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	695a      	ldr	r2, [r3, #20]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	68b9      	ldr	r1, [r7, #8]
 800b686:	fb01 f303 	mul.w	r3, r1, r3
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d302      	bcc.n	800b694 <osMessageQueueNew+0x62>
        mem = 1;
 800b68e:	2301      	movs	r3, #1
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	e014      	b.n	800b6be <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d110      	bne.n	800b6be <osMessageQueueNew+0x8c>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d10c      	bne.n	800b6be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d108      	bne.n	800b6be <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d104      	bne.n	800b6be <osMessageQueueNew+0x8c>
          mem = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	61bb      	str	r3, [r7, #24]
 800b6b8:	e001      	b.n	800b6be <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d10b      	bne.n	800b6dc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	9100      	str	r1, [sp, #0]
 800b6d0:	68b9      	ldr	r1, [r7, #8]
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 fa2e 	bl	800bb34 <xQueueGenericCreateStatic>
 800b6d8:	61f8      	str	r0, [r7, #28]
 800b6da:	e008      	b.n	800b6ee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d105      	bne.n	800b6ee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 fa9c 	bl	800bc24 <xQueueGenericCreate>
 800b6ec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d00c      	beq.n	800b70e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	e001      	b.n	800b706 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b706:	6979      	ldr	r1, [r7, #20]
 800b708:	69f8      	ldr	r0, [r7, #28]
 800b70a:	f001 f8cd 	bl	800c8a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b70e:	69fb      	ldr	r3, [r7, #28]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3720      	adds	r7, #32
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b718:	b580      	push	{r7, lr}
 800b71a:	b088      	sub	sp, #32
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	4613      	mov	r3, r2
 800b726:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b730:	f3ef 8305 	mrs	r3, IPSR
 800b734:	617b      	str	r3, [r7, #20]
  return(result);
 800b736:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d028      	beq.n	800b78e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d005      	beq.n	800b74e <osMessageQueuePut+0x36>
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <osMessageQueuePut+0x36>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b74e:	f06f 0303 	mvn.w	r3, #3
 800b752:	61fb      	str	r3, [r7, #28]
 800b754:	e038      	b.n	800b7c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b75a:	f107 0210 	add.w	r2, r7, #16
 800b75e:	2300      	movs	r3, #0
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	69b8      	ldr	r0, [r7, #24]
 800b764:	f000 fc70 	bl	800c048 <xQueueGenericSendFromISR>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d003      	beq.n	800b776 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b76e:	f06f 0302 	mvn.w	r3, #2
 800b772:	61fb      	str	r3, [r7, #28]
 800b774:	e028      	b.n	800b7c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d025      	beq.n	800b7c8 <osMessageQueuePut+0xb0>
 800b77c:	4b15      	ldr	r3, [pc, #84]	; (800b7d4 <osMessageQueuePut+0xbc>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	e01c      	b.n	800b7c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <osMessageQueuePut+0x82>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d103      	bne.n	800b7a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b79a:	f06f 0303 	mvn.w	r3, #3
 800b79e:	61fb      	str	r3, [r7, #28]
 800b7a0:	e012      	b.n	800b7c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	69b8      	ldr	r0, [r7, #24]
 800b7aa:	f000 fb4f 	bl	800be4c <xQueueGenericSend>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d009      	beq.n	800b7c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b7ba:	f06f 0301 	mvn.w	r3, #1
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	e002      	b.n	800b7c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b7c2:	f06f 0302 	mvn.w	r3, #2
 800b7c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b7c8:	69fb      	ldr	r3, [r7, #28]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	e000ed04 	.word	0xe000ed04

0800b7d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ee:	f3ef 8305 	mrs	r3, IPSR
 800b7f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b7f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d028      	beq.n	800b84c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <osMessageQueueGet+0x34>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <osMessageQueueGet+0x34>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b80c:	f06f 0303 	mvn.w	r3, #3
 800b810:	61fb      	str	r3, [r7, #28]
 800b812:	e037      	b.n	800b884 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b814:	2300      	movs	r3, #0
 800b816:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b818:	f107 0310 	add.w	r3, r7, #16
 800b81c:	461a      	mov	r2, r3
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	69b8      	ldr	r0, [r7, #24]
 800b822:	f000 fe99 	bl	800c558 <xQueueReceiveFromISR>
 800b826:	4603      	mov	r3, r0
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d003      	beq.n	800b834 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b82c:	f06f 0302 	mvn.w	r3, #2
 800b830:	61fb      	str	r3, [r7, #28]
 800b832:	e027      	b.n	800b884 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d024      	beq.n	800b884 <osMessageQueueGet+0xac>
 800b83a:	4b15      	ldr	r3, [pc, #84]	; (800b890 <osMessageQueueGet+0xb8>)
 800b83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	e01b      	b.n	800b884 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <osMessageQueueGet+0x80>
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d103      	bne.n	800b860 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b858:	f06f 0303 	mvn.w	r3, #3
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	e011      	b.n	800b884 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	69b8      	ldr	r0, [r7, #24]
 800b866:	f000 fc8b 	bl	800c180 <xQueueReceive>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d009      	beq.n	800b884 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b876:	f06f 0301 	mvn.w	r3, #1
 800b87a:	61fb      	str	r3, [r7, #28]
 800b87c:	e002      	b.n	800b884 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b87e:	f06f 0302 	mvn.w	r3, #2
 800b882:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b884:	69fb      	ldr	r3, [r7, #28]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3720      	adds	r7, #32
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	e000ed04 	.word	0xe000ed04

0800b894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4a07      	ldr	r2, [pc, #28]	; (800b8c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	4a06      	ldr	r2, [pc, #24]	; (800b8c4 <vApplicationGetIdleTaskMemory+0x30>)
 800b8aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2280      	movs	r2, #128	; 0x80
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	20000f68 	.word	0x20000f68
 800b8c4:	20001028 	.word	0x20001028

0800b8c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b8d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	4a06      	ldr	r2, [pc, #24]	; (800b8f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b8de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8e6:	601a      	str	r2, [r3, #0]
}
 800b8e8:	bf00      	nop
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	20001228 	.word	0x20001228
 800b8f8:	200012e8 	.word	0x200012e8

0800b8fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f103 0208 	add.w	r2, r3, #8
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f04f 32ff 	mov.w	r2, #4294967295
 800b914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f103 0208 	add.w	r2, r3, #8
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f103 0208 	add.w	r2, r3, #8
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b930:	bf00      	nop
 800b932:	370c      	adds	r7, #12
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b94a:	bf00      	nop
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b956:	b480      	push	{r7}
 800b958:	b085      	sub	sp, #20
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	601a      	str	r2, [r3, #0]
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b4:	d103      	bne.n	800b9be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	e00c      	b.n	800b9d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	e002      	b.n	800b9cc <vListInsert+0x2e>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d2f6      	bcs.n	800b9c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	601a      	str	r2, [r3, #0]
}
 800ba04:	bf00      	nop
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	6892      	ldr	r2, [r2, #8]
 800ba26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	6852      	ldr	r2, [r2, #4]
 800ba30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d103      	bne.n	800ba44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689a      	ldr	r2, [r3, #8]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	1e5a      	subs	r2, r3, #1
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <xQueueGenericReset+0x2a>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	60bb      	str	r3, [r7, #8]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba8e:	f003 f939 	bl	800ed04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9a:	68f9      	ldr	r1, [r7, #12]
 800ba9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba9e:	fb01 f303 	mul.w	r3, r1, r3
 800baa2:	441a      	add	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800babe:	3b01      	subs	r3, #1
 800bac0:	68f9      	ldr	r1, [r7, #12]
 800bac2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bac4:	fb01 f303 	mul.w	r3, r1, r3
 800bac8:	441a      	add	r2, r3
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	22ff      	movs	r2, #255	; 0xff
 800bada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d114      	bne.n	800bb0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01a      	beq.n	800bb22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3310      	adds	r3, #16
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 ff75 	bl	800d9e0 <xTaskRemoveFromEventList>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d012      	beq.n	800bb22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bafc:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <xQueueGenericReset+0xcc>)
 800bafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	e009      	b.n	800bb22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3310      	adds	r3, #16
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fef2 	bl	800b8fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	3324      	adds	r3, #36	; 0x24
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff feed 	bl	800b8fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb22:	f003 f91f 	bl	800ed64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb26:	2301      	movs	r3, #1
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	e000ed04 	.word	0xe000ed04

0800bb34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08e      	sub	sp, #56	; 0x38
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10a      	bne.n	800bb5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	f383 8811 	msr	BASEPRI, r3
 800bb50:	f3bf 8f6f 	isb	sy
 800bb54:	f3bf 8f4f 	dsb	sy
 800bb58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb5a:	bf00      	nop
 800bb5c:	e7fe      	b.n	800bb5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <xQueueGenericCreateStatic+0x52>
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <xQueueGenericCreateStatic+0x56>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <xQueueGenericCreateStatic+0x58>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10a      	bne.n	800bba6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	623b      	str	r3, [r7, #32]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <xQueueGenericCreateStatic+0x7e>
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <xQueueGenericCreateStatic+0x82>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <xQueueGenericCreateStatic+0x84>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	61fb      	str	r3, [r7, #28]
}
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbd2:	2350      	movs	r3, #80	; 0x50
 800bbd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2b50      	cmp	r3, #80	; 0x50
 800bbda:	d00a      	beq.n	800bbf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	61bb      	str	r3, [r7, #24]
}
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00d      	beq.n	800bc1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 f83f 	bl	800bc98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3730      	adds	r7, #48	; 0x30
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <xQueueGenericCreate+0x2a>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	613b      	str	r3, [r7, #16]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	fb02 f303 	mul.w	r3, r2, r3
 800bc56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	3350      	adds	r3, #80	; 0x50
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f003 f973 	bl	800ef48 <pvPortMalloc>
 800bc62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d011      	beq.n	800bc8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	3350      	adds	r3, #80	; 0x50
 800bc72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc7c:	79fa      	ldrb	r2, [r7, #7]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	4613      	mov	r3, r2
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	68b9      	ldr	r1, [r7, #8]
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f805 	bl	800bc98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc8e:	69bb      	ldr	r3, [r7, #24]
	}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3720      	adds	r7, #32
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d103      	bne.n	800bcb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e002      	b.n	800bcba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	69b8      	ldr	r0, [r7, #24]
 800bcca:	f7ff fecb 	bl	800ba64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	78fa      	ldrb	r2, [r7, #3]
 800bcd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00e      	beq.n	800bd0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2200      	movs	r2, #0
 800bd02:	2100      	movs	r1, #0
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f8a1 	bl	800be4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd0a:	bf00      	nop
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b086      	sub	sp, #24
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	4603      	mov	r3, r0
 800bd1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	2300      	movs	r3, #0
 800bd22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd24:	79fb      	ldrb	r3, [r7, #7]
 800bd26:	461a      	mov	r2, r3
 800bd28:	6939      	ldr	r1, [r7, #16]
 800bd2a:	6978      	ldr	r0, [r7, #20]
 800bd2c:	f7ff ff7a 	bl	800bc24 <xQueueGenericCreate>
 800bd30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff ffd3 	bl	800bcde <prvInitialiseMutex>

		return xNewQueue;
 800bd38:	68fb      	ldr	r3, [r7, #12]
	}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b088      	sub	sp, #32
 800bd46:	af02      	add	r7, sp, #8
 800bd48:	4603      	mov	r3, r0
 800bd4a:	6039      	str	r1, [r7, #0]
 800bd4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	2300      	movs	r3, #0
 800bd54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd56:	79fb      	ldrb	r3, [r7, #7]
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	6939      	ldr	r1, [r7, #16]
 800bd60:	6978      	ldr	r0, [r7, #20]
 800bd62:	f7ff fee7 	bl	800bb34 <xQueueGenericCreateStatic>
 800bd66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7ff ffb8 	bl	800bcde <prvInitialiseMutex>

		return xNewQueue;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bd78:	b590      	push	{r4, r7, lr}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	60fb      	str	r3, [r7, #12]
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	689c      	ldr	r4, [r3, #8]
 800bda4:	f002 f804 	bl	800ddb0 <xTaskGetCurrentTaskHandle>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	429c      	cmp	r4, r3
 800bdac:	d111      	bne.n	800bdd2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	1e5a      	subs	r2, r3, #1
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d105      	bne.n	800bdcc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	6938      	ldr	r0, [r7, #16]
 800bdc8:	f000 f840 	bl	800be4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e001      	b.n	800bdd6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bdd6:	697b      	ldr	r3, [r7, #20]
	}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	371c      	adds	r7, #28
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd90      	pop	{r4, r7, pc}

0800bde0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bde0:	b590      	push	{r4, r7, lr}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10a      	bne.n	800be0a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	e7fe      	b.n	800be08 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	689c      	ldr	r4, [r3, #8]
 800be0e:	f001 ffcf 	bl	800ddb0 <xTaskGetCurrentTaskHandle>
 800be12:	4603      	mov	r3, r0
 800be14:	429c      	cmp	r4, r3
 800be16:	d107      	bne.n	800be28 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800be22:	2301      	movs	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e00c      	b.n	800be42 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6938      	ldr	r0, [r7, #16]
 800be2c:	f000 fa88 	bl	800c340 <xQueueSemaphoreTake>
 800be30:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d004      	beq.n	800be42 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800be42:	697b      	ldr	r3, [r7, #20]
	}
 800be44:	4618      	mov	r0, r3
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd90      	pop	{r4, r7, pc}

0800be4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08e      	sub	sp, #56	; 0x38
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be5a:	2300      	movs	r3, #0
 800be5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xQueueGenericSend+0x32>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d103      	bne.n	800be8c <xQueueGenericSend+0x40>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <xQueueGenericSend+0x44>
 800be8c:	2301      	movs	r3, #1
 800be8e:	e000      	b.n	800be92 <xQueueGenericSend+0x46>
 800be90:	2300      	movs	r3, #0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10a      	bne.n	800beac <xQueueGenericSend+0x60>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bea8:	bf00      	nop
 800beaa:	e7fe      	b.n	800beaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d103      	bne.n	800beba <xQueueGenericSend+0x6e>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d101      	bne.n	800bebe <xQueueGenericSend+0x72>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <xQueueGenericSend+0x74>
 800bebe:	2300      	movs	r3, #0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xQueueGenericSend+0x8e>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	623b      	str	r3, [r7, #32]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beda:	f001 ff79 	bl	800ddd0 <xTaskGetSchedulerState>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d102      	bne.n	800beea <xQueueGenericSend+0x9e>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <xQueueGenericSend+0xa2>
 800beea:	2301      	movs	r3, #1
 800beec:	e000      	b.n	800bef0 <xQueueGenericSend+0xa4>
 800beee:	2300      	movs	r3, #0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10a      	bne.n	800bf0a <xQueueGenericSend+0xbe>
	__asm volatile
 800bef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	61fb      	str	r3, [r7, #28]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0a:	f002 fefb 	bl	800ed04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <xQueueGenericSend+0xd4>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d129      	bne.n	800bf74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf26:	f000 fbaf 	bl	800c688 <prvCopyDataToQueue>
 800bf2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d010      	beq.n	800bf56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	3324      	adds	r3, #36	; 0x24
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f001 fd51 	bl	800d9e0 <xTaskRemoveFromEventList>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d013      	beq.n	800bf6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf44:	4b3f      	ldr	r3, [pc, #252]	; (800c044 <xQueueGenericSend+0x1f8>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	e00a      	b.n	800bf6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf5c:	4b39      	ldr	r3, [pc, #228]	; (800c044 <xQueueGenericSend+0x1f8>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf6c:	f002 fefa 	bl	800ed64 <vPortExitCritical>
				return pdPASS;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e063      	b.n	800c03c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d103      	bne.n	800bf82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf7a:	f002 fef3 	bl	800ed64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e05c      	b.n	800c03c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf88:	f107 0314 	add.w	r3, r7, #20
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 fdb1 	bl	800daf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf92:	2301      	movs	r3, #1
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf96:	f002 fee5 	bl	800ed64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf9a:	f001 facb 	bl	800d534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf9e:	f002 feb1 	bl	800ed04 <vPortEnterCritical>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d103      	bne.n	800bfb8 <xQueueGenericSend+0x16c>
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfbe:	b25b      	sxtb	r3, r3
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d103      	bne.n	800bfce <xQueueGenericSend+0x182>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfce:	f002 fec9 	bl	800ed64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfd2:	1d3a      	adds	r2, r7, #4
 800bfd4:	f107 0314 	add.w	r3, r7, #20
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 fda0 	bl	800db20 <xTaskCheckForTimeOut>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d124      	bne.n	800c030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe8:	f000 fc46 	bl	800c878 <prvIsQueueFull>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d018      	beq.n	800c024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff4:	3310      	adds	r3, #16
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	4611      	mov	r1, r2
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 fca0 	bl	800d940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c002:	f000 fbd1 	bl	800c7a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c006:	f001 faa3 	bl	800d550 <xTaskResumeAll>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f47f af7c 	bne.w	800bf0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c012:	4b0c      	ldr	r3, [pc, #48]	; (800c044 <xQueueGenericSend+0x1f8>)
 800c014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	e772      	b.n	800bf0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c026:	f000 fbbf 	bl	800c7a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02a:	f001 fa91 	bl	800d550 <xTaskResumeAll>
 800c02e:	e76c      	b.n	800bf0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c032:	f000 fbb9 	bl	800c7a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c036:	f001 fa8b 	bl	800d550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c03a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3738      	adds	r7, #56	; 0x38
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	e000ed04 	.word	0xe000ed04

0800c048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b090      	sub	sp, #64	; 0x40
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d103      	bne.n	800c084 <xQueueGenericSendFromISR+0x3c>
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <xQueueGenericSendFromISR+0x40>
 800c084:	2301      	movs	r3, #1
 800c086:	e000      	b.n	800c08a <xQueueGenericSendFromISR+0x42>
 800c088:	2300      	movs	r3, #0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d10a      	bne.n	800c0a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d103      	bne.n	800c0b2 <xQueueGenericSendFromISR+0x6a>
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d101      	bne.n	800c0b6 <xQueueGenericSendFromISR+0x6e>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <xQueueGenericSendFromISR+0x70>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	623b      	str	r3, [r7, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d2:	f002 fef9 	bl	800eec8 <vPortValidateInterruptPriority>
	__asm volatile
 800c0d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	61fa      	str	r2, [r7, #28]
 800c0ec:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c0ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d302      	bcc.n	800c104 <xQueueGenericSendFromISR+0xbc>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d12f      	bne.n	800c164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c11a:	f000 fab5 	bl	800c688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c11e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c126:	d112      	bne.n	800c14e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d016      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	3324      	adds	r3, #36	; 0x24
 800c134:	4618      	mov	r0, r3
 800c136:	f001 fc53 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00e      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d00b      	beq.n	800c15e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e007      	b.n	800c15e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c152:	3301      	adds	r3, #1
 800c154:	b2db      	uxtb	r3, r3
 800c156:	b25a      	sxtb	r2, r3
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c15e:	2301      	movs	r3, #1
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c162:	e001      	b.n	800c168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f383 8811 	msr	BASEPRI, r3
}
 800c172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c176:	4618      	mov	r0, r3
 800c178:	3740      	adds	r7, #64	; 0x40
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08c      	sub	sp, #48	; 0x30
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c18c:	2300      	movs	r3, #0
 800c18e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <xQueueReceive+0x30>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	623b      	str	r3, [r7, #32]
}
 800c1ac:	bf00      	nop
 800c1ae:	e7fe      	b.n	800c1ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d103      	bne.n	800c1be <xQueueReceive+0x3e>
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d101      	bne.n	800c1c2 <xQueueReceive+0x42>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e000      	b.n	800c1c4 <xQueueReceive+0x44>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10a      	bne.n	800c1de <xQueueReceive+0x5e>
	__asm volatile
 800c1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1cc:	f383 8811 	msr	BASEPRI, r3
 800c1d0:	f3bf 8f6f 	isb	sy
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	61fb      	str	r3, [r7, #28]
}
 800c1da:	bf00      	nop
 800c1dc:	e7fe      	b.n	800c1dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1de:	f001 fdf7 	bl	800ddd0 <xTaskGetSchedulerState>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <xQueueReceive+0x6e>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <xQueueReceive+0x72>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e000      	b.n	800c1f4 <xQueueReceive+0x74>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d10a      	bne.n	800c20e <xQueueReceive+0x8e>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	61bb      	str	r3, [r7, #24]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c20e:	f002 fd79 	bl	800ed04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c216:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d01f      	beq.n	800c25e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c222:	f000 fa9b 	bl	800c75c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	1e5a      	subs	r2, r3, #1
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00f      	beq.n	800c256 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	3310      	adds	r3, #16
 800c23a:	4618      	mov	r0, r3
 800c23c:	f001 fbd0 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d007      	beq.n	800c256 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c246:	4b3d      	ldr	r3, [pc, #244]	; (800c33c <xQueueReceive+0x1bc>)
 800c248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c256:	f002 fd85 	bl	800ed64 <vPortExitCritical>
				return pdPASS;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e069      	b.n	800c332 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c264:	f002 fd7e 	bl	800ed64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c268:	2300      	movs	r3, #0
 800c26a:	e062      	b.n	800c332 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d106      	bne.n	800c280 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c272:	f107 0310 	add.w	r3, r7, #16
 800c276:	4618      	mov	r0, r3
 800c278:	f001 fc3c 	bl	800daf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c27c:	2301      	movs	r3, #1
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c280:	f002 fd70 	bl	800ed64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c284:	f001 f956 	bl	800d534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c288:	f002 fd3c 	bl	800ed04 <vPortEnterCritical>
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c292:	b25b      	sxtb	r3, r3
 800c294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c298:	d103      	bne.n	800c2a2 <xQueueReceive+0x122>
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2a8:	b25b      	sxtb	r3, r3
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d103      	bne.n	800c2b8 <xQueueReceive+0x138>
 800c2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b8:	f002 fd54 	bl	800ed64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2bc:	1d3a      	adds	r2, r7, #4
 800c2be:	f107 0310 	add.w	r3, r7, #16
 800c2c2:	4611      	mov	r1, r2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 fc2b 	bl	800db20 <xTaskCheckForTimeOut>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d123      	bne.n	800c318 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d2:	f000 fabb 	bl	800c84c <prvIsQueueEmpty>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d017      	beq.n	800c30c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	3324      	adds	r3, #36	; 0x24
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f001 fb2b 	bl	800d940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ec:	f000 fa5c 	bl	800c7a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2f0:	f001 f92e 	bl	800d550 <xTaskResumeAll>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d189      	bne.n	800c20e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2fa:	4b10      	ldr	r3, [pc, #64]	; (800c33c <xQueueReceive+0x1bc>)
 800c2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	e780      	b.n	800c20e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30e:	f000 fa4b 	bl	800c7a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c312:	f001 f91d 	bl	800d550 <xTaskResumeAll>
 800c316:	e77a      	b.n	800c20e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31a:	f000 fa45 	bl	800c7a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c31e:	f001 f917 	bl	800d550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c324:	f000 fa92 	bl	800c84c <prvIsQueueEmpty>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f43f af6f 	beq.w	800c20e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c332:	4618      	mov	r0, r3
 800c334:	3730      	adds	r7, #48	; 0x30
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	e000ed04 	.word	0xe000ed04

0800c340 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08e      	sub	sp, #56	; 0x38
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c34a:	2300      	movs	r3, #0
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c352:	2300      	movs	r3, #0
 800c354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10a      	bne.n	800c372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	f383 8811 	msr	BASEPRI, r3
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	623b      	str	r3, [r7, #32]
}
 800c36e:	bf00      	nop
 800c370:	e7fe      	b.n	800c370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00a      	beq.n	800c390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	61fb      	str	r3, [r7, #28]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c390:	f001 fd1e 	bl	800ddd0 <xTaskGetSchedulerState>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d102      	bne.n	800c3a0 <xQueueSemaphoreTake+0x60>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <xQueueSemaphoreTake+0x64>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <xQueueSemaphoreTake+0x66>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10a      	bne.n	800c3c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	61bb      	str	r3, [r7, #24]
}
 800c3bc:	bf00      	nop
 800c3be:	e7fe      	b.n	800c3be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3c0:	f002 fca0 	bl	800ed04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d024      	beq.n	800c41a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	1e5a      	subs	r2, r3, #1
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d104      	bne.n	800c3ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3e0:	f001 fe6c 	bl	800e0bc <pvTaskIncrementMutexHeldCount>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00f      	beq.n	800c412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	3310      	adds	r3, #16
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 faf2 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d007      	beq.n	800c412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c402:	4b54      	ldr	r3, [pc, #336]	; (800c554 <xQueueSemaphoreTake+0x214>)
 800c404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c412:	f002 fca7 	bl	800ed64 <vPortExitCritical>
				return pdPASS;
 800c416:	2301      	movs	r3, #1
 800c418:	e097      	b.n	800c54a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d111      	bne.n	800c444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00a      	beq.n	800c43c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42a:	f383 8811 	msr	BASEPRI, r3
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	617b      	str	r3, [r7, #20]
}
 800c438:	bf00      	nop
 800c43a:	e7fe      	b.n	800c43a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c43c:	f002 fc92 	bl	800ed64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c440:	2300      	movs	r3, #0
 800c442:	e082      	b.n	800c54a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 fb50 	bl	800daf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c454:	2301      	movs	r3, #1
 800c456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c458:	f002 fc84 	bl	800ed64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c45c:	f001 f86a 	bl	800d534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c460:	f002 fc50 	bl	800ed04 <vPortEnterCritical>
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c46a:	b25b      	sxtb	r3, r3
 800c46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c470:	d103      	bne.n	800c47a <xQueueSemaphoreTake+0x13a>
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c480:	b25b      	sxtb	r3, r3
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d103      	bne.n	800c490 <xQueueSemaphoreTake+0x150>
 800c488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c490:	f002 fc68 	bl	800ed64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c494:	463a      	mov	r2, r7
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	4611      	mov	r1, r2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 fb3f 	bl	800db20 <xTaskCheckForTimeOut>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d132      	bne.n	800c50e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4aa:	f000 f9cf 	bl	800c84c <prvIsQueueEmpty>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d026      	beq.n	800c502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4bc:	f002 fc22 	bl	800ed04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f001 fca1 	bl	800de0c <xTaskPriorityInherit>
 800c4ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4cc:	f002 fc4a 	bl	800ed64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	3324      	adds	r3, #36	; 0x24
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f001 fa31 	bl	800d940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e0:	f000 f962 	bl	800c7a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4e4:	f001 f834 	bl	800d550 <xTaskResumeAll>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f47f af68 	bne.w	800c3c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4f0:	4b18      	ldr	r3, [pc, #96]	; (800c554 <xQueueSemaphoreTake+0x214>)
 800c4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	e75e      	b.n	800c3c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c504:	f000 f950 	bl	800c7a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c508:	f001 f822 	bl	800d550 <xTaskResumeAll>
 800c50c:	e758      	b.n	800c3c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c510:	f000 f94a 	bl	800c7a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c514:	f001 f81c 	bl	800d550 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c51a:	f000 f997 	bl	800c84c <prvIsQueueEmpty>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	f43f af4d 	beq.w	800c3c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00d      	beq.n	800c548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c52c:	f002 fbea 	bl	800ed04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c532:	f000 f891 	bl	800c658 <prvGetDisinheritPriorityAfterTimeout>
 800c536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 fd3a 	bl	800dfb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c544:	f002 fc0e 	bl	800ed64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3738      	adds	r7, #56	; 0x38
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	e000ed04 	.word	0xe000ed04

0800c558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	; 0x38
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10a      	bne.n	800c584 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	623b      	str	r3, [r7, #32]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d103      	bne.n	800c592 <xQueueReceiveFromISR+0x3a>
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <xQueueReceiveFromISR+0x3e>
 800c592:	2301      	movs	r3, #1
 800c594:	e000      	b.n	800c598 <xQueueReceiveFromISR+0x40>
 800c596:	2300      	movs	r3, #0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	61fb      	str	r3, [r7, #28]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5b2:	f002 fc89 	bl	800eec8 <vPortValidateInterruptPriority>
	__asm volatile
 800c5b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	61ba      	str	r2, [r7, #24]
 800c5cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d02f      	beq.n	800c63e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5ec:	f000 f8b6 	bl	800c75c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	1e5a      	subs	r2, r3, #1
 800c5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c600:	d112      	bne.n	800c628 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d016      	beq.n	800c638 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60c:	3310      	adds	r3, #16
 800c60e:	4618      	mov	r0, r3
 800c610:	f001 f9e6 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00e      	beq.n	800c638 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	601a      	str	r2, [r3, #0]
 800c626:	e007      	b.n	800c638 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c62c:	3301      	adds	r3, #1
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	b25a      	sxtb	r2, r3
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c638:	2301      	movs	r3, #1
 800c63a:	637b      	str	r3, [r7, #52]	; 0x34
 800c63c:	e001      	b.n	800c642 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c63e:	2300      	movs	r3, #0
 800c640:	637b      	str	r3, [r7, #52]	; 0x34
 800c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c644:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	f383 8811 	msr	BASEPRI, r3
}
 800c64c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c650:	4618      	mov	r0, r3
 800c652:	3738      	adds	r7, #56	; 0x38
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	d006      	beq.n	800c676 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c672:	60fb      	str	r3, [r7, #12]
 800c674:	e001      	b.n	800c67a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c676:	2300      	movs	r3, #0
 800c678:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c67a:	68fb      	ldr	r3, [r7, #12]
	}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3714      	adds	r7, #20
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c694:	2300      	movs	r3, #0
 800c696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10d      	bne.n	800c6c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d14d      	bne.n	800c74a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f001 fc12 	bl	800dedc <xTaskPriorityDisinherit>
 800c6b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	609a      	str	r2, [r3, #8]
 800c6c0:	e043      	b.n	800c74a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d119      	bne.n	800c6fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6858      	ldr	r0, [r3, #4]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	68b9      	ldr	r1, [r7, #8]
 800c6d4:	f002 ff96 	bl	800f604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e0:	441a      	add	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d32b      	bcc.n	800c74a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	605a      	str	r2, [r3, #4]
 800c6fa:	e026      	b.n	800c74a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	68d8      	ldr	r0, [r3, #12]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c704:	461a      	mov	r2, r3
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	f002 ff7c 	bl	800f604 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c714:	425b      	negs	r3, r3
 800c716:	441a      	add	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	429a      	cmp	r2, r3
 800c726:	d207      	bcs.n	800c738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	689a      	ldr	r2, [r3, #8]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c730:	425b      	negs	r3, r3
 800c732:	441a      	add	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d105      	bne.n	800c74a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	3b01      	subs	r3, #1
 800c748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c752:	697b      	ldr	r3, [r7, #20]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d018      	beq.n	800c7a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68da      	ldr	r2, [r3, #12]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c776:	441a      	add	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	429a      	cmp	r2, r3
 800c786:	d303      	bcc.n	800c790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68d9      	ldr	r1, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	461a      	mov	r2, r3
 800c79a:	6838      	ldr	r0, [r7, #0]
 800c79c:	f002 ff32 	bl	800f604 <memcpy>
	}
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7b0:	f002 faa8 	bl	800ed04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7bc:	e011      	b.n	800c7e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d012      	beq.n	800c7ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3324      	adds	r3, #36	; 0x24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f001 f908 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7d6:	f001 fa05 	bl	800dbe4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dce9      	bgt.n	800c7be <prvUnlockQueue+0x16>
 800c7ea:	e000      	b.n	800c7ee <prvUnlockQueue+0x46>
					break;
 800c7ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	22ff      	movs	r2, #255	; 0xff
 800c7f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7f6:	f002 fab5 	bl	800ed64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7fa:	f002 fa83 	bl	800ed04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c806:	e011      	b.n	800c82c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d012      	beq.n	800c836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3310      	adds	r3, #16
 800c814:	4618      	mov	r0, r3
 800c816:	f001 f8e3 	bl	800d9e0 <xTaskRemoveFromEventList>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c820:	f001 f9e0 	bl	800dbe4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	3b01      	subs	r3, #1
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c830:	2b00      	cmp	r3, #0
 800c832:	dce9      	bgt.n	800c808 <prvUnlockQueue+0x60>
 800c834:	e000      	b.n	800c838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	22ff      	movs	r2, #255	; 0xff
 800c83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c840:	f002 fa90 	bl	800ed64 <vPortExitCritical>
}
 800c844:	bf00      	nop
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c854:	f002 fa56 	bl	800ed04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e001      	b.n	800c86a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c866:	2300      	movs	r3, #0
 800c868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c86a:	f002 fa7b 	bl	800ed64 <vPortExitCritical>

	return xReturn;
 800c86e:	68fb      	ldr	r3, [r7, #12]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c880:	f002 fa40 	bl	800ed04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d102      	bne.n	800c896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c890:	2301      	movs	r3, #1
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e001      	b.n	800c89a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c896:	2300      	movs	r3, #0
 800c898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c89a:	f002 fa63 	bl	800ed64 <vPortExitCritical>

	return xReturn;
 800c89e:	68fb      	ldr	r3, [r7, #12]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	e014      	b.n	800c8e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8b8:	4a0f      	ldr	r2, [pc, #60]	; (800c8f8 <vQueueAddToRegistry+0x50>)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10b      	bne.n	800c8dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8c4:	490c      	ldr	r1, [pc, #48]	; (800c8f8 <vQueueAddToRegistry+0x50>)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8ce:	4a0a      	ldr	r2, [pc, #40]	; (800c8f8 <vQueueAddToRegistry+0x50>)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4413      	add	r3, r2
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8da:	e006      	b.n	800c8ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	60fb      	str	r3, [r7, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b07      	cmp	r3, #7
 800c8e6:	d9e7      	bls.n	800c8b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8e8:	bf00      	nop
 800c8ea:	bf00      	nop
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	200016e8 	.word	0x200016e8

0800c8fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c90c:	f002 f9fa 	bl	800ed04 <vPortEnterCritical>
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c916:	b25b      	sxtb	r3, r3
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d103      	bne.n	800c926 <vQueueWaitForMessageRestricted+0x2a>
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c92c:	b25b      	sxtb	r3, r3
 800c92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c932:	d103      	bne.n	800c93c <vQueueWaitForMessageRestricted+0x40>
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c93c:	f002 fa12 	bl	800ed64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	3324      	adds	r3, #36	; 0x24
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	68b9      	ldr	r1, [r7, #8]
 800c950:	4618      	mov	r0, r3
 800c952:	f001 f819 	bl	800d988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c956:	6978      	ldr	r0, [r7, #20]
 800c958:	f7ff ff26 	bl	800c7a8 <prvUnlockQueue>
	}
 800c95c:	bf00      	nop
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08c      	sub	sp, #48	; 0x30
 800c968:	af02      	add	r7, sp, #8
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d110      	bne.n	800c998 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800c976:	2301      	movs	r3, #1
 800c978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d81b      	bhi.n	800c9ba <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	61fb      	str	r3, [r7, #28]
}
 800c994:	bf00      	nop
 800c996:	e7fe      	b.n	800c996 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10a      	bne.n	800c9ba <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	61bb      	str	r3, [r7, #24]
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d90a      	bls.n	800c9d8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	617b      	str	r3, [r7, #20]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3324      	adds	r3, #36	; 0x24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f002 faab 	bl	800ef48 <pvPortMalloc>
 800c9f2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d00a      	beq.n	800ca10 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ca00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	6a38      	ldr	r0, [r7, #32]
 800ca0c:	f000 fafd 	bl	800d00a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ca10:	6a3b      	ldr	r3, [r7, #32]
	}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3728      	adds	r7, #40	; 0x28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b087      	sub	sp, #28
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	60fb      	str	r3, [r7, #12]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	689a      	ldr	r2, [r3, #8]
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d304      	bcc.n	800ca72 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800ca72:	697b      	ldr	r3, [r7, #20]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b090      	sub	sp, #64	; 0x40
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10a      	bne.n	800cab6 <xStreamBufferSend+0x36>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cab2:	bf00      	nop
 800cab4:	e7fe      	b.n	800cab4 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <xStreamBufferSend+0x52>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	623b      	str	r3, [r7, #32]
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	7f1b      	ldrb	r3, [r3, #28]
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d011      	beq.n	800cb02 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	3304      	adds	r3, #4
 800cae2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800cae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d80a      	bhi.n	800cb02 <xStreamBufferSend+0x82>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	61fb      	str	r3, [r7, #28]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d03e      	beq.n	800cb86 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800cb08:	f107 0310 	add.w	r3, r7, #16
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 ffcb 	bl	800daa8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800cb12:	f002 f8f7 	bl	800ed04 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800cb16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb18:	f7ff ff7f 	bl	800ca1a <xStreamBufferSpacesAvailable>
 800cb1c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800cb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d217      	bcs.n	800cb56 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800cb26:	2000      	movs	r0, #0
 800cb28:	f001 fbfa 	bl	800e320 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	695b      	ldr	r3, [r3, #20]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00a      	beq.n	800cb4a <xStreamBufferSend+0xca>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	61bb      	str	r3, [r7, #24]
}
 800cb46:	bf00      	nop
 800cb48:	e7fe      	b.n	800cb48 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800cb4a:	f001 f931 	bl	800ddb0 <xTaskGetCurrentTaskHandle>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	615a      	str	r2, [r3, #20]
 800cb54:	e002      	b.n	800cb5c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800cb56:	f002 f905 	bl	800ed64 <vPortExitCritical>
					break;
 800cb5a:	e014      	b.n	800cb86 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800cb5c:	f002 f902 	bl	800ed64 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2200      	movs	r2, #0
 800cb64:	2100      	movs	r1, #0
 800cb66:	2000      	movs	r0, #0
 800cb68:	f001 fabc 	bl	800e0e4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	2200      	movs	r2, #0
 800cb70:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800cb72:	463a      	mov	r2, r7
 800cb74:	f107 0310 	add.w	r3, r7, #16
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 ffd0 	bl	800db20 <xTaskCheckForTimeOut>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0c5      	beq.n	800cb12 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800cb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d103      	bne.n	800cb94 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800cb8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb8e:	f7ff ff44 	bl	800ca1a <xStreamBufferSpacesAvailable>
 800cb92:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cba0:	f000 f823 	bl	800cbea <prvWriteMessageToBuffer>
 800cba4:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d019      	beq.n	800cbe0 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800cbac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbae:	f000 fa0c 	bl	800cfca <prvBytesInBuffer>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d311      	bcc.n	800cbe0 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800cbbc:	f000 fcba 	bl	800d534 <vTaskSuspendAll>
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d009      	beq.n	800cbdc <xStreamBufferSend+0x15c>
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	6918      	ldr	r0, [r3, #16]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	f001 fae7 	bl	800e1a4 <xTaskGenericNotify>
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	2200      	movs	r2, #0
 800cbda:	611a      	str	r2, [r3, #16]
 800cbdc:	f000 fcb8 	bl	800d550 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800cbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3738      	adds	r7, #56	; 0x38
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b086      	sub	sp, #24
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
 800cbf6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d102      	bne.n	800cc04 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	e01d      	b.n	800cc40 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	7f1b      	ldrb	r3, [r3, #28]
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d108      	bne.n	800cc22 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800cc10:	2301      	movs	r3, #1
 800cc12:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	bf28      	it	cs
 800cc1c:	4613      	movcs	r3, r2
 800cc1e:	607b      	str	r3, [r7, #4]
 800cc20:	e00e      	b.n	800cc40 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d308      	bcc.n	800cc3c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800cc2e:	1d3b      	adds	r3, r7, #4
 800cc30:	2204      	movs	r2, #4
 800cc32:	4619      	mov	r1, r3
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 f8dc 	bl	800cdf2 <prvWriteBytesToBuffer>
 800cc3a:	e001      	b.n	800cc40 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d007      	beq.n	800cc56 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 f8d0 	bl	800cdf2 <prvWriteBytesToBuffer>
 800cc52:	6138      	str	r0, [r7, #16]
 800cc54:	e001      	b.n	800cc5a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800cc5a:	693b      	ldr	r3, [r7, #16]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3718      	adds	r7, #24
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08e      	sub	sp, #56	; 0x38
 800cc68:	af02      	add	r7, sp, #8
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800cc76:	2300      	movs	r3, #0
 800cc78:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10a      	bne.n	800cc96 <xStreamBufferReceive+0x32>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	61fb      	str	r3, [r7, #28]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10a      	bne.n	800ccb2 <xStreamBufferReceive+0x4e>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	61bb      	str	r3, [r7, #24]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	7f1b      	ldrb	r3, [r3, #28]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ccbe:	2304      	movs	r3, #4
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc2:	e001      	b.n	800ccc8 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d034      	beq.n	800cd38 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800ccce:	f002 f819 	bl	800ed04 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ccd2:	6a38      	ldr	r0, [r7, #32]
 800ccd4:	f000 f979 	bl	800cfca <prvBytesInBuffer>
 800ccd8:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ccda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d816      	bhi.n	800cd10 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800cce2:	2000      	movs	r0, #0
 800cce4:	f001 fb1c 	bl	800e320 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00a      	beq.n	800cd06 <xStreamBufferReceive+0xa2>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	617b      	str	r3, [r7, #20]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800cd06:	f001 f853 	bl	800ddb0 <xTaskGetCurrentTaskHandle>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd10:	f002 f828 	bl	800ed64 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800cd14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d811      	bhi.n	800cd40 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	2100      	movs	r1, #0
 800cd22:	2000      	movs	r0, #0
 800cd24:	f001 f9de 	bl	800e0e4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800cd28:	6a3b      	ldr	r3, [r7, #32]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800cd2e:	6a38      	ldr	r0, [r7, #32]
 800cd30:	f000 f94b 	bl	800cfca <prvBytesInBuffer>
 800cd34:	62b8      	str	r0, [r7, #40]	; 0x28
 800cd36:	e003      	b.n	800cd40 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800cd38:	6a38      	ldr	r0, [r7, #32]
 800cd3a:	f000 f946 	bl	800cfca <prvBytesInBuffer>
 800cd3e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800cd40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d91d      	bls.n	800cd84 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	68b9      	ldr	r1, [r7, #8]
 800cd52:	6a38      	ldr	r0, [r7, #32]
 800cd54:	f000 f81b 	bl	800cd8e <prvReadMessageFromBuffer>
 800cd58:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d011      	beq.n	800cd84 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800cd60:	f000 fbe8 	bl	800d534 <vTaskSuspendAll>
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d009      	beq.n	800cd80 <xStreamBufferReceive+0x11c>
 800cd6c:	6a3b      	ldr	r3, [r7, #32]
 800cd6e:	6958      	ldr	r0, [r3, #20]
 800cd70:	2300      	movs	r3, #0
 800cd72:	2200      	movs	r2, #0
 800cd74:	2100      	movs	r1, #0
 800cd76:	f001 fa15 	bl	800e1a4 <xTaskGenericNotify>
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	615a      	str	r2, [r3, #20]
 800cd80:	f000 fbe6 	bl	800d550 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3730      	adds	r7, #48	; 0x30
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b088      	sub	sp, #32
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	60f8      	str	r0, [r7, #12]
 800cd96:	60b9      	str	r1, [r7, #8]
 800cd98:	607a      	str	r2, [r7, #4]
 800cd9a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d019      	beq.n	800cdd6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800cda8:	f107 0110 	add.w	r1, r7, #16
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f000 f890 	bl	800ced6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800cdc2:	69fa      	ldr	r2, [r7, #28]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d907      	bls.n	800cdda <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	69ba      	ldr	r2, [r7, #24]
 800cdce:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	e001      	b.n	800cdda <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	69fa      	ldr	r2, [r7, #28]
 800cdde:	68b9      	ldr	r1, [r7, #8]
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 f878 	bl	800ced6 <prvReadBytesFromBuffer>
 800cde6:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800cde8:	697b      	ldr	r3, [r7, #20]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3720      	adds	r7, #32
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b08a      	sub	sp, #40	; 0x28
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10a      	bne.n	800ce1a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800ce04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	61fb      	str	r3, [r7, #28]
}
 800ce16:	bf00      	nop
 800ce18:	e7fe      	b.n	800ce18 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	bf28      	it	cs
 800ce2e:	4613      	movcs	r3, r2
 800ce30:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800ce32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	441a      	add	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d90a      	bls.n	800ce56 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	61bb      	str	r3, [r7, #24]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	699a      	ldr	r2, [r3, #24]
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	4413      	add	r3, r2
 800ce5e:	6a3a      	ldr	r2, [r7, #32]
 800ce60:	68b9      	ldr	r1, [r7, #8]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f002 fbce 	bl	800f604 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d91c      	bls.n	800ceaa <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	1ad2      	subs	r2, r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d90a      	bls.n	800ce94 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	617b      	str	r3, [r7, #20]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6998      	ldr	r0, [r3, #24]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	18d1      	adds	r1, r2, r3
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	461a      	mov	r2, r3
 800cea6:	f002 fbad 	bl	800f604 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800ceaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4413      	add	r3, r2
 800ceb0:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d304      	bcc.n	800cec6 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	689b      	ldr	r3, [r3, #8]
 800cec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	605a      	str	r2, [r3, #4]

	return xCount;
 800cecc:	687b      	ldr	r3, [r7, #4]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3728      	adds	r7, #40	; 0x28
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b08a      	sub	sp, #40	; 0x28
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	60b9      	str	r1, [r7, #8]
 800cee0:	607a      	str	r2, [r7, #4]
 800cee2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	bf28      	it	cs
 800ceec:	4613      	movcs	r3, r2
 800ceee:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d064      	beq.n	800cfc0 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	6a3a      	ldr	r2, [r7, #32]
 800cf06:	4293      	cmp	r3, r2
 800cf08:	bf28      	it	cs
 800cf0a:	4613      	movcs	r3, r2
 800cf0c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800cf0e:	69fa      	ldr	r2, [r7, #28]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d90a      	bls.n	800cf2c <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	61bb      	str	r3, [r7, #24]
}
 800cf28:	bf00      	nop
 800cf2a:	e7fe      	b.n	800cf2a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800cf2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	441a      	add	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d90a      	bls.n	800cf50 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800cf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	617b      	str	r3, [r7, #20]
}
 800cf4c:	bf00      	nop
 800cf4e:	e7fe      	b.n	800cf4e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	699a      	ldr	r2, [r3, #24]
 800cf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf56:	4413      	add	r3, r2
 800cf58:	69fa      	ldr	r2, [r7, #28]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	68b8      	ldr	r0, [r7, #8]
 800cf5e:	f002 fb51 	bl	800f604 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800cf62:	6a3a      	ldr	r2, [r7, #32]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d919      	bls.n	800cf9e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800cf6a:	6a3a      	ldr	r2, [r7, #32]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d90a      	bls.n	800cf88 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	613b      	str	r3, [r7, #16]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	18d0      	adds	r0, r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6999      	ldr	r1, [r3, #24]
 800cf92:	6a3a      	ldr	r2, [r7, #32]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f002 fb33 	bl	800f604 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800cf9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa0:	6a3b      	ldr	r3, [r7, #32]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d304      	bcc.n	800cfba <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfbe:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3728      	adds	r7, #40	; 0x28
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b085      	sub	sp, #20
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	689a      	ldr	r2, [r3, #8]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	4413      	add	r3, r2
 800cfdc:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d304      	bcc.n	800cffc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800cffc:	68fb      	ldr	r3, [r7, #12]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b086      	sub	sp, #24
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
 800d016:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800d018:	2355      	movs	r3, #85	; 0x55
 800d01a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	6979      	ldr	r1, [r7, #20]
 800d020:	68b8      	ldr	r0, [r7, #8]
 800d022:	f002 fafd 	bl	800f620 <memset>
 800d026:	4602      	mov	r2, r0
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00a      	beq.n	800d044 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	613b      	str	r3, [r7, #16]
}
 800d040:	bf00      	nop
 800d042:	e7fe      	b.n	800d042 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800d044:	2224      	movs	r2, #36	; 0x24
 800d046:	2100      	movs	r1, #0
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f002 fae9 	bl	800f620 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d066:	771a      	strb	r2, [r3, #28]
}
 800d068:	bf00      	nop
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08e      	sub	sp, #56	; 0x38
 800d074:	af04      	add	r7, sp, #16
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	607a      	str	r2, [r7, #4]
 800d07c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10a      	bne.n	800d09a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	623b      	str	r3, [r7, #32]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10a      	bne.n	800d0b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	61fb      	str	r3, [r7, #28]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0b6:	23c0      	movs	r3, #192	; 0xc0
 800d0b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2bc0      	cmp	r3, #192	; 0xc0
 800d0be:	d00a      	beq.n	800d0d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	61bb      	str	r3, [r7, #24]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d0d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d01e      	beq.n	800d11c <xTaskCreateStatic+0xac>
 800d0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01b      	beq.n	800d11c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	9302      	str	r3, [sp, #8]
 800d0fe:	f107 0314 	add.w	r3, r7, #20
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	68b9      	ldr	r1, [r7, #8]
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f000 f850 	bl	800d1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d116:	f000 f8f7 	bl	800d308 <prvAddNewTaskToReadyList>
 800d11a:	e001      	b.n	800d120 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d11c:	2300      	movs	r3, #0
 800d11e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d120:	697b      	ldr	r3, [r7, #20]
	}
 800d122:	4618      	mov	r0, r3
 800d124:	3728      	adds	r7, #40	; 0x28
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b08c      	sub	sp, #48	; 0x30
 800d12e:	af04      	add	r7, sp, #16
 800d130:	60f8      	str	r0, [r7, #12]
 800d132:	60b9      	str	r1, [r7, #8]
 800d134:	603b      	str	r3, [r7, #0]
 800d136:	4613      	mov	r3, r2
 800d138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d13a:	88fb      	ldrh	r3, [r7, #6]
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4618      	mov	r0, r3
 800d140:	f001 ff02 	bl	800ef48 <pvPortMalloc>
 800d144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00e      	beq.n	800d16a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d14c:	20c0      	movs	r0, #192	; 0xc0
 800d14e:	f001 fefb 	bl	800ef48 <pvPortMalloc>
 800d152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d003      	beq.n	800d162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	631a      	str	r2, [r3, #48]	; 0x30
 800d160:	e005      	b.n	800d16e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d162:	6978      	ldr	r0, [r7, #20]
 800d164:	f001 ffc0 	bl	800f0e8 <vPortFree>
 800d168:	e001      	b.n	800d16e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d017      	beq.n	800d1a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d17c:	88fa      	ldrh	r2, [r7, #6]
 800d17e:	2300      	movs	r3, #0
 800d180:	9303      	str	r3, [sp, #12]
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	9302      	str	r3, [sp, #8]
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f000 f80e 	bl	800d1b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d198:	69f8      	ldr	r0, [r7, #28]
 800d19a:	f000 f8b5 	bl	800d308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	61bb      	str	r3, [r7, #24]
 800d1a2:	e002      	b.n	800d1aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3720      	adds	r7, #32
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	21a5      	movs	r1, #165	; 0xa5
 800d1ce:	f002 fa27 	bl	800f620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	f023 0307 	bic.w	r3, r3, #7
 800d1ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	f003 0307 	and.w	r3, r3, #7
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	617b      	str	r3, [r7, #20]
}
 800d208:	bf00      	nop
 800d20a:	e7fe      	b.n	800d20a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d01f      	beq.n	800d252 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d212:	2300      	movs	r3, #0
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	e012      	b.n	800d23e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	7819      	ldrb	r1, [r3, #0]
 800d220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	4413      	add	r3, r2
 800d226:	3334      	adds	r3, #52	; 0x34
 800d228:	460a      	mov	r2, r1
 800d22a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d22c:	68ba      	ldr	r2, [r7, #8]
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	4413      	add	r3, r2
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d006      	beq.n	800d246 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	3301      	adds	r3, #1
 800d23c:	61fb      	str	r3, [r7, #28]
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	2b0f      	cmp	r3, #15
 800d242:	d9e9      	bls.n	800d218 <prvInitialiseNewTask+0x64>
 800d244:	e000      	b.n	800d248 <prvInitialiseNewTask+0x94>
			{
				break;
 800d246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d250:	e003      	b.n	800d25a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25c:	2b37      	cmp	r3, #55	; 0x37
 800d25e:	d901      	bls.n	800d264 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d260:	2337      	movs	r3, #55	; 0x37
 800d262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d26e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d272:	2200      	movs	r2, #0
 800d274:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	3304      	adds	r3, #4
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fe fb5e 	bl	800b93c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	3318      	adds	r3, #24
 800d284:	4618      	mov	r0, r3
 800d286:	f7fe fb59 	bl	800b93c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d28e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d29e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	3358      	adds	r3, #88	; 0x58
 800d2ba:	2260      	movs	r2, #96	; 0x60
 800d2bc:	2100      	movs	r1, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f002 f9ae 	bl	800f620 <memset>
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	4a0d      	ldr	r2, [pc, #52]	; (800d2fc <prvInitialiseNewTask+0x148>)
 800d2c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	4a0c      	ldr	r2, [pc, #48]	; (800d300 <prvInitialiseNewTask+0x14c>)
 800d2ce:	661a      	str	r2, [r3, #96]	; 0x60
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d2:	4a0c      	ldr	r2, [pc, #48]	; (800d304 <prvInitialiseNewTask+0x150>)
 800d2d4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	68f9      	ldr	r1, [r7, #12]
 800d2da:	69b8      	ldr	r0, [r7, #24]
 800d2dc:	f001 fbe8 	bl	800eab0 <pxPortInitialiseStack>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2f2:	bf00      	nop
 800d2f4:	3720      	adds	r7, #32
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	08010a9c 	.word	0x08010a9c
 800d300:	08010abc 	.word	0x08010abc
 800d304:	08010a7c 	.word	0x08010a7c

0800d308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d310:	f001 fcf8 	bl	800ed04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d314:	4b2d      	ldr	r3, [pc, #180]	; (800d3cc <prvAddNewTaskToReadyList+0xc4>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3301      	adds	r3, #1
 800d31a:	4a2c      	ldr	r2, [pc, #176]	; (800d3cc <prvAddNewTaskToReadyList+0xc4>)
 800d31c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d31e:	4b2c      	ldr	r3, [pc, #176]	; (800d3d0 <prvAddNewTaskToReadyList+0xc8>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d109      	bne.n	800d33a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d326:	4a2a      	ldr	r2, [pc, #168]	; (800d3d0 <prvAddNewTaskToReadyList+0xc8>)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d32c:	4b27      	ldr	r3, [pc, #156]	; (800d3cc <prvAddNewTaskToReadyList+0xc4>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d110      	bne.n	800d356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d334:	f000 fc7a 	bl	800dc2c <prvInitialiseTaskLists>
 800d338:	e00d      	b.n	800d356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d33a:	4b26      	ldr	r3, [pc, #152]	; (800d3d4 <prvAddNewTaskToReadyList+0xcc>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d109      	bne.n	800d356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d342:	4b23      	ldr	r3, [pc, #140]	; (800d3d0 <prvAddNewTaskToReadyList+0xc8>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d802      	bhi.n	800d356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d350:	4a1f      	ldr	r2, [pc, #124]	; (800d3d0 <prvAddNewTaskToReadyList+0xc8>)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d356:	4b20      	ldr	r3, [pc, #128]	; (800d3d8 <prvAddNewTaskToReadyList+0xd0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	4a1e      	ldr	r2, [pc, #120]	; (800d3d8 <prvAddNewTaskToReadyList+0xd0>)
 800d35e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d360:	4b1d      	ldr	r3, [pc, #116]	; (800d3d8 <prvAddNewTaskToReadyList+0xd0>)
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36c:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <prvAddNewTaskToReadyList+0xd4>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d903      	bls.n	800d37c <prvAddNewTaskToReadyList+0x74>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d378:	4a18      	ldr	r2, [pc, #96]	; (800d3dc <prvAddNewTaskToReadyList+0xd4>)
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4a15      	ldr	r2, [pc, #84]	; (800d3e0 <prvAddNewTaskToReadyList+0xd8>)
 800d38a:	441a      	add	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3304      	adds	r3, #4
 800d390:	4619      	mov	r1, r3
 800d392:	4610      	mov	r0, r2
 800d394:	f7fe fadf 	bl	800b956 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d398:	f001 fce4 	bl	800ed64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d39c:	4b0d      	ldr	r3, [pc, #52]	; (800d3d4 <prvAddNewTaskToReadyList+0xcc>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00e      	beq.n	800d3c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <prvAddNewTaskToReadyList+0xc8>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d207      	bcs.n	800d3c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3b2:	4b0c      	ldr	r3, [pc, #48]	; (800d3e4 <prvAddNewTaskToReadyList+0xdc>)
 800d3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	20001bfc 	.word	0x20001bfc
 800d3d0:	20001728 	.word	0x20001728
 800d3d4:	20001c08 	.word	0x20001c08
 800d3d8:	20001c18 	.word	0x20001c18
 800d3dc:	20001c04 	.word	0x20001c04
 800d3e0:	2000172c 	.word	0x2000172c
 800d3e4:	e000ed04 	.word	0xe000ed04

0800d3e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d017      	beq.n	800d42a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d3fa:	4b13      	ldr	r3, [pc, #76]	; (800d448 <vTaskDelay+0x60>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00a      	beq.n	800d418 <vTaskDelay+0x30>
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	60bb      	str	r3, [r7, #8]
}
 800d414:	bf00      	nop
 800d416:	e7fe      	b.n	800d416 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d418:	f000 f88c 	bl	800d534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d41c:	2100      	movs	r1, #0
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 ffa4 	bl	800e36c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d424:	f000 f894 	bl	800d550 <xTaskResumeAll>
 800d428:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d107      	bne.n	800d440 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d430:	4b06      	ldr	r3, [pc, #24]	; (800d44c <vTaskDelay+0x64>)
 800d432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d436:	601a      	str	r2, [r3, #0]
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d440:	bf00      	nop
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20001c24 	.word	0x20001c24
 800d44c:	e000ed04 	.word	0xe000ed04

0800d450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b08a      	sub	sp, #40	; 0x28
 800d454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d456:	2300      	movs	r3, #0
 800d458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d45e:	463a      	mov	r2, r7
 800d460:	1d39      	adds	r1, r7, #4
 800d462:	f107 0308 	add.w	r3, r7, #8
 800d466:	4618      	mov	r0, r3
 800d468:	f7fe fa14 	bl	800b894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	9202      	str	r2, [sp, #8]
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	2300      	movs	r3, #0
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	460a      	mov	r2, r1
 800d47e:	4925      	ldr	r1, [pc, #148]	; (800d514 <vTaskStartScheduler+0xc4>)
 800d480:	4825      	ldr	r0, [pc, #148]	; (800d518 <vTaskStartScheduler+0xc8>)
 800d482:	f7ff fdf5 	bl	800d070 <xTaskCreateStatic>
 800d486:	4603      	mov	r3, r0
 800d488:	4a24      	ldr	r2, [pc, #144]	; (800d51c <vTaskStartScheduler+0xcc>)
 800d48a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d48c:	4b23      	ldr	r3, [pc, #140]	; (800d51c <vTaskStartScheduler+0xcc>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d002      	beq.n	800d49a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d494:	2301      	movs	r3, #1
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e001      	b.n	800d49e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d102      	bne.n	800d4aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4a4:	f000 ffb6 	bl	800e414 <xTimerCreateTimerTask>
 800d4a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d11d      	bne.n	800d4ec <vTaskStartScheduler+0x9c>
	__asm volatile
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	613b      	str	r3, [r7, #16]
}
 800d4c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d4c4:	4b16      	ldr	r3, [pc, #88]	; (800d520 <vTaskStartScheduler+0xd0>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3358      	adds	r3, #88	; 0x58
 800d4ca:	4a16      	ldr	r2, [pc, #88]	; (800d524 <vTaskStartScheduler+0xd4>)
 800d4cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4ce:	4b16      	ldr	r3, [pc, #88]	; (800d528 <vTaskStartScheduler+0xd8>)
 800d4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4d6:	4b15      	ldr	r3, [pc, #84]	; (800d52c <vTaskStartScheduler+0xdc>)
 800d4d8:	2201      	movs	r2, #1
 800d4da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4dc:	4b14      	ldr	r3, [pc, #80]	; (800d530 <vTaskStartScheduler+0xe0>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d4e2:	f7f8 fd75 	bl	8005fd0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d4e6:	f001 fb6b 	bl	800ebc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d4ea:	e00e      	b.n	800d50a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	d10a      	bne.n	800d50a <vTaskStartScheduler+0xba>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60fb      	str	r3, [r7, #12]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <vTaskStartScheduler+0xb8>
}
 800d50a:	bf00      	nop
 800d50c:	3718      	adds	r7, #24
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	08010910 	.word	0x08010910
 800d518:	0800dbfd 	.word	0x0800dbfd
 800d51c:	20001c20 	.word	0x20001c20
 800d520:	20001728 	.word	0x20001728
 800d524:	20000020 	.word	0x20000020
 800d528:	20001c1c 	.word	0x20001c1c
 800d52c:	20001c08 	.word	0x20001c08
 800d530:	20001c00 	.word	0x20001c00

0800d534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d538:	4b04      	ldr	r3, [pc, #16]	; (800d54c <vTaskSuspendAll+0x18>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3301      	adds	r3, #1
 800d53e:	4a03      	ldr	r2, [pc, #12]	; (800d54c <vTaskSuspendAll+0x18>)
 800d540:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d542:	bf00      	nop
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	20001c24 	.word	0x20001c24

0800d550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d55a:	2300      	movs	r3, #0
 800d55c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d55e:	4b42      	ldr	r3, [pc, #264]	; (800d668 <xTaskResumeAll+0x118>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10a      	bne.n	800d57c <xTaskResumeAll+0x2c>
	__asm volatile
 800d566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56a:	f383 8811 	msr	BASEPRI, r3
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	603b      	str	r3, [r7, #0]
}
 800d578:	bf00      	nop
 800d57a:	e7fe      	b.n	800d57a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d57c:	f001 fbc2 	bl	800ed04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d580:	4b39      	ldr	r3, [pc, #228]	; (800d668 <xTaskResumeAll+0x118>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3b01      	subs	r3, #1
 800d586:	4a38      	ldr	r2, [pc, #224]	; (800d668 <xTaskResumeAll+0x118>)
 800d588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d58a:	4b37      	ldr	r3, [pc, #220]	; (800d668 <xTaskResumeAll+0x118>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d162      	bne.n	800d658 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d592:	4b36      	ldr	r3, [pc, #216]	; (800d66c <xTaskResumeAll+0x11c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05e      	beq.n	800d658 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d59a:	e02f      	b.n	800d5fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d59c:	4b34      	ldr	r3, [pc, #208]	; (800d670 <xTaskResumeAll+0x120>)
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	3318      	adds	r3, #24
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fa31 	bl	800ba10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7fe fa2c 	bl	800ba10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5bc:	4b2d      	ldr	r3, [pc, #180]	; (800d674 <xTaskResumeAll+0x124>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d903      	bls.n	800d5cc <xTaskResumeAll+0x7c>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	4a2a      	ldr	r2, [pc, #168]	; (800d674 <xTaskResumeAll+0x124>)
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4a27      	ldr	r2, [pc, #156]	; (800d678 <xTaskResumeAll+0x128>)
 800d5da:	441a      	add	r2, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	f7fe f9b7 	bl	800b956 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ec:	4b23      	ldr	r3, [pc, #140]	; (800d67c <xTaskResumeAll+0x12c>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d302      	bcc.n	800d5fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d5f6:	4b22      	ldr	r3, [pc, #136]	; (800d680 <xTaskResumeAll+0x130>)
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5fc:	4b1c      	ldr	r3, [pc, #112]	; (800d670 <xTaskResumeAll+0x120>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1cb      	bne.n	800d59c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d001      	beq.n	800d60e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d60a:	f000 fbb1 	bl	800dd70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d60e:	4b1d      	ldr	r3, [pc, #116]	; (800d684 <xTaskResumeAll+0x134>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d010      	beq.n	800d63c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d61a:	f000 f847 	bl	800d6ac <xTaskIncrementTick>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d624:	4b16      	ldr	r3, [pc, #88]	; (800d680 <xTaskResumeAll+0x130>)
 800d626:	2201      	movs	r2, #1
 800d628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1f1      	bne.n	800d61a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d636:	4b13      	ldr	r3, [pc, #76]	; (800d684 <xTaskResumeAll+0x134>)
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d63c:	4b10      	ldr	r3, [pc, #64]	; (800d680 <xTaskResumeAll+0x130>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d009      	beq.n	800d658 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d644:	2301      	movs	r3, #1
 800d646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d648:	4b0f      	ldr	r3, [pc, #60]	; (800d688 <xTaskResumeAll+0x138>)
 800d64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d658:	f001 fb84 	bl	800ed64 <vPortExitCritical>

	return xAlreadyYielded;
 800d65c:	68bb      	ldr	r3, [r7, #8]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20001c24 	.word	0x20001c24
 800d66c:	20001bfc 	.word	0x20001bfc
 800d670:	20001bbc 	.word	0x20001bbc
 800d674:	20001c04 	.word	0x20001c04
 800d678:	2000172c 	.word	0x2000172c
 800d67c:	20001728 	.word	0x20001728
 800d680:	20001c10 	.word	0x20001c10
 800d684:	20001c0c 	.word	0x20001c0c
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d692:	4b05      	ldr	r3, [pc, #20]	; (800d6a8 <xTaskGetTickCount+0x1c>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d698:	687b      	ldr	r3, [r7, #4]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	20001c00 	.word	0x20001c00

0800d6ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6b6:	4b4f      	ldr	r3, [pc, #316]	; (800d7f4 <xTaskIncrementTick+0x148>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f040 808f 	bne.w	800d7de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d6c0:	4b4d      	ldr	r3, [pc, #308]	; (800d7f8 <xTaskIncrementTick+0x14c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d6c8:	4a4b      	ldr	r2, [pc, #300]	; (800d7f8 <xTaskIncrementTick+0x14c>)
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d120      	bne.n	800d716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6d4:	4b49      	ldr	r3, [pc, #292]	; (800d7fc <xTaskIncrementTick+0x150>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00a      	beq.n	800d6f4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	f383 8811 	msr	BASEPRI, r3
 800d6e6:	f3bf 8f6f 	isb	sy
 800d6ea:	f3bf 8f4f 	dsb	sy
 800d6ee:	603b      	str	r3, [r7, #0]
}
 800d6f0:	bf00      	nop
 800d6f2:	e7fe      	b.n	800d6f2 <xTaskIncrementTick+0x46>
 800d6f4:	4b41      	ldr	r3, [pc, #260]	; (800d7fc <xTaskIncrementTick+0x150>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	4b41      	ldr	r3, [pc, #260]	; (800d800 <xTaskIncrementTick+0x154>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a3f      	ldr	r2, [pc, #252]	; (800d7fc <xTaskIncrementTick+0x150>)
 800d700:	6013      	str	r3, [r2, #0]
 800d702:	4a3f      	ldr	r2, [pc, #252]	; (800d800 <xTaskIncrementTick+0x154>)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6013      	str	r3, [r2, #0]
 800d708:	4b3e      	ldr	r3, [pc, #248]	; (800d804 <xTaskIncrementTick+0x158>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3301      	adds	r3, #1
 800d70e:	4a3d      	ldr	r2, [pc, #244]	; (800d804 <xTaskIncrementTick+0x158>)
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	f000 fb2d 	bl	800dd70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d716:	4b3c      	ldr	r3, [pc, #240]	; (800d808 <xTaskIncrementTick+0x15c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d349      	bcc.n	800d7b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d720:	4b36      	ldr	r3, [pc, #216]	; (800d7fc <xTaskIncrementTick+0x150>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d104      	bne.n	800d734 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d72a:	4b37      	ldr	r3, [pc, #220]	; (800d808 <xTaskIncrementTick+0x15c>)
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295
 800d730:	601a      	str	r2, [r3, #0]
					break;
 800d732:	e03f      	b.n	800d7b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d734:	4b31      	ldr	r3, [pc, #196]	; (800d7fc <xTaskIncrementTick+0x150>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d203      	bcs.n	800d754 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d74c:	4a2e      	ldr	r2, [pc, #184]	; (800d808 <xTaskIncrementTick+0x15c>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d752:	e02f      	b.n	800d7b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3304      	adds	r3, #4
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fe f959 	bl	800ba10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d762:	2b00      	cmp	r3, #0
 800d764:	d004      	beq.n	800d770 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	3318      	adds	r3, #24
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe f950 	bl	800ba10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d774:	4b25      	ldr	r3, [pc, #148]	; (800d80c <xTaskIncrementTick+0x160>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d903      	bls.n	800d784 <xTaskIncrementTick+0xd8>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d780:	4a22      	ldr	r2, [pc, #136]	; (800d80c <xTaskIncrementTick+0x160>)
 800d782:	6013      	str	r3, [r2, #0]
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d788:	4613      	mov	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	4413      	add	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4a1f      	ldr	r2, [pc, #124]	; (800d810 <xTaskIncrementTick+0x164>)
 800d792:	441a      	add	r2, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	3304      	adds	r3, #4
 800d798:	4619      	mov	r1, r3
 800d79a:	4610      	mov	r0, r2
 800d79c:	f7fe f8db 	bl	800b956 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7a4:	4b1b      	ldr	r3, [pc, #108]	; (800d814 <xTaskIncrementTick+0x168>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d3b8      	bcc.n	800d720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7b2:	e7b5      	b.n	800d720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7b4:	4b17      	ldr	r3, [pc, #92]	; (800d814 <xTaskIncrementTick+0x168>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ba:	4915      	ldr	r1, [pc, #84]	; (800d810 <xTaskIncrementTick+0x164>)
 800d7bc:	4613      	mov	r3, r2
 800d7be:	009b      	lsls	r3, r3, #2
 800d7c0:	4413      	add	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	440b      	add	r3, r1
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d901      	bls.n	800d7d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d7d0:	4b11      	ldr	r3, [pc, #68]	; (800d818 <xTaskIncrementTick+0x16c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e004      	b.n	800d7e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d7de:	4b0f      	ldr	r3, [pc, #60]	; (800d81c <xTaskIncrementTick+0x170>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	4a0d      	ldr	r2, [pc, #52]	; (800d81c <xTaskIncrementTick+0x170>)
 800d7e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d7e8:	697b      	ldr	r3, [r7, #20]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20001c24 	.word	0x20001c24
 800d7f8:	20001c00 	.word	0x20001c00
 800d7fc:	20001bb4 	.word	0x20001bb4
 800d800:	20001bb8 	.word	0x20001bb8
 800d804:	20001c14 	.word	0x20001c14
 800d808:	20001c1c 	.word	0x20001c1c
 800d80c:	20001c04 	.word	0x20001c04
 800d810:	2000172c 	.word	0x2000172c
 800d814:	20001728 	.word	0x20001728
 800d818:	20001c10 	.word	0x20001c10
 800d81c:	20001c0c 	.word	0x20001c0c

0800d820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d826:	4b3e      	ldr	r3, [pc, #248]	; (800d920 <vTaskSwitchContext+0x100>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d82e:	4b3d      	ldr	r3, [pc, #244]	; (800d924 <vTaskSwitchContext+0x104>)
 800d830:	2201      	movs	r2, #1
 800d832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d834:	e070      	b.n	800d918 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800d836:	4b3b      	ldr	r3, [pc, #236]	; (800d924 <vTaskSwitchContext+0x104>)
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d83c:	f7f8 fbcf 	bl	8005fde <getRunTimeCounterValue>
 800d840:	4603      	mov	r3, r0
 800d842:	4a39      	ldr	r2, [pc, #228]	; (800d928 <vTaskSwitchContext+0x108>)
 800d844:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d846:	4b38      	ldr	r3, [pc, #224]	; (800d928 <vTaskSwitchContext+0x108>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b38      	ldr	r3, [pc, #224]	; (800d92c <vTaskSwitchContext+0x10c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d909      	bls.n	800d866 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d852:	4b37      	ldr	r3, [pc, #220]	; (800d930 <vTaskSwitchContext+0x110>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d858:	4a33      	ldr	r2, [pc, #204]	; (800d928 <vTaskSwitchContext+0x108>)
 800d85a:	6810      	ldr	r0, [r2, #0]
 800d85c:	4a33      	ldr	r2, [pc, #204]	; (800d92c <vTaskSwitchContext+0x10c>)
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	1a82      	subs	r2, r0, r2
 800d862:	440a      	add	r2, r1
 800d864:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d866:	4b30      	ldr	r3, [pc, #192]	; (800d928 <vTaskSwitchContext+0x108>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a30      	ldr	r2, [pc, #192]	; (800d92c <vTaskSwitchContext+0x10c>)
 800d86c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d86e:	4b30      	ldr	r3, [pc, #192]	; (800d930 <vTaskSwitchContext+0x110>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	4b2e      	ldr	r3, [pc, #184]	; (800d930 <vTaskSwitchContext+0x110>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d808      	bhi.n	800d890 <vTaskSwitchContext+0x70>
 800d87e:	4b2c      	ldr	r3, [pc, #176]	; (800d930 <vTaskSwitchContext+0x110>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	4b2b      	ldr	r3, [pc, #172]	; (800d930 <vTaskSwitchContext+0x110>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3334      	adds	r3, #52	; 0x34
 800d888:	4619      	mov	r1, r3
 800d88a:	4610      	mov	r0, r2
 800d88c:	f7f8 fbaf 	bl	8005fee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d890:	4b28      	ldr	r3, [pc, #160]	; (800d934 <vTaskSwitchContext+0x114>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60fb      	str	r3, [r7, #12]
 800d896:	e010      	b.n	800d8ba <vTaskSwitchContext+0x9a>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d10a      	bne.n	800d8b4 <vTaskSwitchContext+0x94>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	607b      	str	r3, [r7, #4]
}
 800d8b0:	bf00      	nop
 800d8b2:	e7fe      	b.n	800d8b2 <vTaskSwitchContext+0x92>
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	60fb      	str	r3, [r7, #12]
 800d8ba:	491f      	ldr	r1, [pc, #124]	; (800d938 <vTaskSwitchContext+0x118>)
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	440b      	add	r3, r1
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d0e4      	beq.n	800d898 <vTaskSwitchContext+0x78>
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	4a17      	ldr	r2, [pc, #92]	; (800d938 <vTaskSwitchContext+0x118>)
 800d8da:	4413      	add	r3, r2
 800d8dc:	60bb      	str	r3, [r7, #8]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	605a      	str	r2, [r3, #4]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d104      	bne.n	800d8fe <vTaskSwitchContext+0xde>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	605a      	str	r2, [r3, #4]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	4a0a      	ldr	r2, [pc, #40]	; (800d930 <vTaskSwitchContext+0x110>)
 800d906:	6013      	str	r3, [r2, #0]
 800d908:	4a0a      	ldr	r2, [pc, #40]	; (800d934 <vTaskSwitchContext+0x114>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d90e:	4b08      	ldr	r3, [pc, #32]	; (800d930 <vTaskSwitchContext+0x110>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3358      	adds	r3, #88	; 0x58
 800d914:	4a09      	ldr	r2, [pc, #36]	; (800d93c <vTaskSwitchContext+0x11c>)
 800d916:	6013      	str	r3, [r2, #0]
}
 800d918:	bf00      	nop
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20001c24 	.word	0x20001c24
 800d924:	20001c10 	.word	0x20001c10
 800d928:	20001c2c 	.word	0x20001c2c
 800d92c:	20001c28 	.word	0x20001c28
 800d930:	20001728 	.word	0x20001728
 800d934:	20001c04 	.word	0x20001c04
 800d938:	2000172c 	.word	0x2000172c
 800d93c:	20000020 	.word	0x20000020

0800d940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10a      	bne.n	800d966 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	60fb      	str	r3, [r7, #12]
}
 800d962:	bf00      	nop
 800d964:	e7fe      	b.n	800d964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d966:	4b07      	ldr	r3, [pc, #28]	; (800d984 <vTaskPlaceOnEventList+0x44>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	3318      	adds	r3, #24
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7fe f815 	bl	800b99e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d974:	2101      	movs	r1, #1
 800d976:	6838      	ldr	r0, [r7, #0]
 800d978:	f000 fcf8 	bl	800e36c <prvAddCurrentTaskToDelayedList>
}
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20001728 	.word	0x20001728

0800d988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10a      	bne.n	800d9b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	617b      	str	r3, [r7, #20]
}
 800d9ac:	bf00      	nop
 800d9ae:	e7fe      	b.n	800d9ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <vTaskPlaceOnEventListRestricted+0x54>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3318      	adds	r3, #24
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f7fd ffcc 	bl	800b956 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9ca:	6879      	ldr	r1, [r7, #4]
 800d9cc:	68b8      	ldr	r0, [r7, #8]
 800d9ce:	f000 fccd 	bl	800e36c <prvAddCurrentTaskToDelayedList>
	}
 800d9d2:	bf00      	nop
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	20001728 	.word	0x20001728

0800d9e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10a      	bne.n	800da0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	60fb      	str	r3, [r7, #12]
}
 800da08:	bf00      	nop
 800da0a:	e7fe      	b.n	800da0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	3318      	adds	r3, #24
 800da10:	4618      	mov	r0, r3
 800da12:	f7fd fffd 	bl	800ba10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da16:	4b1e      	ldr	r3, [pc, #120]	; (800da90 <xTaskRemoveFromEventList+0xb0>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d11d      	bne.n	800da5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	3304      	adds	r3, #4
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd fff4 	bl	800ba10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2c:	4b19      	ldr	r3, [pc, #100]	; (800da94 <xTaskRemoveFromEventList+0xb4>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <xTaskRemoveFromEventList+0x5c>
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	4a16      	ldr	r2, [pc, #88]	; (800da94 <xTaskRemoveFromEventList+0xb4>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4a13      	ldr	r2, [pc, #76]	; (800da98 <xTaskRemoveFromEventList+0xb8>)
 800da4a:	441a      	add	r2, r3
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	3304      	adds	r3, #4
 800da50:	4619      	mov	r1, r3
 800da52:	4610      	mov	r0, r2
 800da54:	f7fd ff7f 	bl	800b956 <vListInsertEnd>
 800da58:	e005      	b.n	800da66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	3318      	adds	r3, #24
 800da5e:	4619      	mov	r1, r3
 800da60:	480e      	ldr	r0, [pc, #56]	; (800da9c <xTaskRemoveFromEventList+0xbc>)
 800da62:	f7fd ff78 	bl	800b956 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da6a:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <xTaskRemoveFromEventList+0xc0>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da70:	429a      	cmp	r2, r3
 800da72:	d905      	bls.n	800da80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da74:	2301      	movs	r3, #1
 800da76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da78:	4b0a      	ldr	r3, [pc, #40]	; (800daa4 <xTaskRemoveFromEventList+0xc4>)
 800da7a:	2201      	movs	r2, #1
 800da7c:	601a      	str	r2, [r3, #0]
 800da7e:	e001      	b.n	800da84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800da80:	2300      	movs	r3, #0
 800da82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da84:	697b      	ldr	r3, [r7, #20]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	20001c24 	.word	0x20001c24
 800da94:	20001c04 	.word	0x20001c04
 800da98:	2000172c 	.word	0x2000172c
 800da9c:	20001bbc 	.word	0x20001bbc
 800daa0:	20001728 	.word	0x20001728
 800daa4:	20001c10 	.word	0x20001c10

0800daa8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10a      	bne.n	800dacc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60fb      	str	r3, [r7, #12]
}
 800dac8:	bf00      	nop
 800daca:	e7fe      	b.n	800daca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800dacc:	f001 f91a 	bl	800ed04 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <vTaskSetTimeOutState+0x44>)
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800dad8:	4b05      	ldr	r3, [pc, #20]	; (800daf0 <vTaskSetTimeOutState+0x48>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800dae0:	f001 f940 	bl	800ed64 <vPortExitCritical>
}
 800dae4:	bf00      	nop
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20001c14 	.word	0x20001c14
 800daf0:	20001c00 	.word	0x20001c00

0800daf4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dafc:	4b06      	ldr	r3, [pc, #24]	; (800db18 <vTaskInternalSetTimeOutState+0x24>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <vTaskInternalSetTimeOutState+0x28>)
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	605a      	str	r2, [r3, #4]
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	20001c14 	.word	0x20001c14
 800db1c:	20001c00 	.word	0x20001c00

0800db20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b088      	sub	sp, #32
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10a      	bne.n	800db46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	613b      	str	r3, [r7, #16]
}
 800db42:	bf00      	nop
 800db44:	e7fe      	b.n	800db44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10a      	bne.n	800db62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	60fb      	str	r3, [r7, #12]
}
 800db5e:	bf00      	nop
 800db60:	e7fe      	b.n	800db60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db62:	f001 f8cf 	bl	800ed04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db66:	4b1d      	ldr	r3, [pc, #116]	; (800dbdc <xTaskCheckForTimeOut+0xbc>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7e:	d102      	bne.n	800db86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	e023      	b.n	800dbce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	4b15      	ldr	r3, [pc, #84]	; (800dbe0 <xTaskCheckForTimeOut+0xc0>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d007      	beq.n	800dba2 <xTaskCheckForTimeOut+0x82>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d302      	bcc.n	800dba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db9c:	2301      	movs	r3, #1
 800db9e:	61fb      	str	r3, [r7, #28]
 800dba0:	e015      	b.n	800dbce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d20b      	bcs.n	800dbc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	1ad2      	subs	r2, r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7ff ff9b 	bl	800daf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e004      	b.n	800dbce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbce:	f001 f8c9 	bl	800ed64 <vPortExitCritical>

	return xReturn;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3720      	adds	r7, #32
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	20001c00 	.word	0x20001c00
 800dbe0:	20001c14 	.word	0x20001c14

0800dbe4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbe8:	4b03      	ldr	r3, [pc, #12]	; (800dbf8 <vTaskMissedYield+0x14>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	601a      	str	r2, [r3, #0]
}
 800dbee:	bf00      	nop
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr
 800dbf8:	20001c10 	.word	0x20001c10

0800dbfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dc04:	f000 f852 	bl	800dcac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc08:	4b06      	ldr	r3, [pc, #24]	; (800dc24 <prvIdleTask+0x28>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d9f9      	bls.n	800dc04 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc10:	4b05      	ldr	r3, [pc, #20]	; (800dc28 <prvIdleTask+0x2c>)
 800dc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc20:	e7f0      	b.n	800dc04 <prvIdleTask+0x8>
 800dc22:	bf00      	nop
 800dc24:	2000172c 	.word	0x2000172c
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc32:	2300      	movs	r3, #0
 800dc34:	607b      	str	r3, [r7, #4]
 800dc36:	e00c      	b.n	800dc52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4a12      	ldr	r2, [pc, #72]	; (800dc8c <prvInitialiseTaskLists+0x60>)
 800dc44:	4413      	add	r3, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fd fe58 	bl	800b8fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	607b      	str	r3, [r7, #4]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b37      	cmp	r3, #55	; 0x37
 800dc56:	d9ef      	bls.n	800dc38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc58:	480d      	ldr	r0, [pc, #52]	; (800dc90 <prvInitialiseTaskLists+0x64>)
 800dc5a:	f7fd fe4f 	bl	800b8fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc5e:	480d      	ldr	r0, [pc, #52]	; (800dc94 <prvInitialiseTaskLists+0x68>)
 800dc60:	f7fd fe4c 	bl	800b8fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc64:	480c      	ldr	r0, [pc, #48]	; (800dc98 <prvInitialiseTaskLists+0x6c>)
 800dc66:	f7fd fe49 	bl	800b8fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc6a:	480c      	ldr	r0, [pc, #48]	; (800dc9c <prvInitialiseTaskLists+0x70>)
 800dc6c:	f7fd fe46 	bl	800b8fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc70:	480b      	ldr	r0, [pc, #44]	; (800dca0 <prvInitialiseTaskLists+0x74>)
 800dc72:	f7fd fe43 	bl	800b8fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc76:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <prvInitialiseTaskLists+0x78>)
 800dc78:	4a05      	ldr	r2, [pc, #20]	; (800dc90 <prvInitialiseTaskLists+0x64>)
 800dc7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	; (800dca8 <prvInitialiseTaskLists+0x7c>)
 800dc7e:	4a05      	ldr	r2, [pc, #20]	; (800dc94 <prvInitialiseTaskLists+0x68>)
 800dc80:	601a      	str	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	3708      	adds	r7, #8
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	2000172c 	.word	0x2000172c
 800dc90:	20001b8c 	.word	0x20001b8c
 800dc94:	20001ba0 	.word	0x20001ba0
 800dc98:	20001bbc 	.word	0x20001bbc
 800dc9c:	20001bd0 	.word	0x20001bd0
 800dca0:	20001be8 	.word	0x20001be8
 800dca4:	20001bb4 	.word	0x20001bb4
 800dca8:	20001bb8 	.word	0x20001bb8

0800dcac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcb2:	e019      	b.n	800dce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dcb4:	f001 f826 	bl	800ed04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb8:	4b10      	ldr	r3, [pc, #64]	; (800dcfc <prvCheckTasksWaitingTermination+0x50>)
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fd fea3 	bl	800ba10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcca:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <prvCheckTasksWaitingTermination+0x54>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	4a0b      	ldr	r2, [pc, #44]	; (800dd00 <prvCheckTasksWaitingTermination+0x54>)
 800dcd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	4a0a      	ldr	r2, [pc, #40]	; (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcde:	f001 f841 	bl	800ed64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f810 	bl	800dd08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce8:	4b06      	ldr	r3, [pc, #24]	; (800dd04 <prvCheckTasksWaitingTermination+0x58>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e1      	bne.n	800dcb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20001bd0 	.word	0x20001bd0
 800dd00:	20001bfc 	.word	0x20001bfc
 800dd04:	20001be4 	.word	0x20001be4

0800dd08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3358      	adds	r3, #88	; 0x58
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 fe07 	bl	800f928 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f001 f9dd 	bl	800f0e8 <vPortFree>
				vPortFree( pxTCB );
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 f9da 	bl	800f0e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd34:	e018      	b.n	800dd68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d103      	bne.n	800dd48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f001 f9d1 	bl	800f0e8 <vPortFree>
	}
 800dd46:	e00f      	b.n	800dd68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d00a      	beq.n	800dd68 <prvDeleteTCB+0x60>
	__asm volatile
 800dd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd56:	f383 8811 	msr	BASEPRI, r3
 800dd5a:	f3bf 8f6f 	isb	sy
 800dd5e:	f3bf 8f4f 	dsb	sy
 800dd62:	60fb      	str	r3, [r7, #12]
}
 800dd64:	bf00      	nop
 800dd66:	e7fe      	b.n	800dd66 <prvDeleteTCB+0x5e>
	}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <prvResetNextTaskUnblockTime+0x38>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d104      	bne.n	800dd8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <prvResetNextTaskUnblockTime+0x3c>)
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd88:	e008      	b.n	800dd9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8a:	4b07      	ldr	r3, [pc, #28]	; (800dda8 <prvResetNextTaskUnblockTime+0x38>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	4a04      	ldr	r2, [pc, #16]	; (800ddac <prvResetNextTaskUnblockTime+0x3c>)
 800dd9a:	6013      	str	r3, [r2, #0]
}
 800dd9c:	bf00      	nop
 800dd9e:	370c      	adds	r7, #12
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	20001bb4 	.word	0x20001bb4
 800ddac:	20001c1c 	.word	0x20001c1c

0800ddb0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ddb6:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <xTaskGetCurrentTaskHandle+0x1c>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ddbc:	687b      	ldr	r3, [r7, #4]
	}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	370c      	adds	r7, #12
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	20001728 	.word	0x20001728

0800ddd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ddd6:	4b0b      	ldr	r3, [pc, #44]	; (800de04 <xTaskGetSchedulerState+0x34>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddde:	2301      	movs	r3, #1
 800dde0:	607b      	str	r3, [r7, #4]
 800dde2:	e008      	b.n	800ddf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dde4:	4b08      	ldr	r3, [pc, #32]	; (800de08 <xTaskGetSchedulerState+0x38>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d102      	bne.n	800ddf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddec:	2302      	movs	r3, #2
 800ddee:	607b      	str	r3, [r7, #4]
 800ddf0:	e001      	b.n	800ddf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddf6:	687b      	ldr	r3, [r7, #4]
	}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	20001c08 	.word	0x20001c08
 800de08:	20001c24 	.word	0x20001c24

0800de0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de18:	2300      	movs	r3, #0
 800de1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d051      	beq.n	800dec6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	4b2a      	ldr	r3, [pc, #168]	; (800ded0 <xTaskPriorityInherit+0xc4>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d241      	bcs.n	800deb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	2b00      	cmp	r3, #0
 800de36:	db06      	blt.n	800de46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de38:	4b25      	ldr	r3, [pc, #148]	; (800ded0 <xTaskPriorityInherit+0xc4>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	6959      	ldr	r1, [r3, #20]
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4e:	4613      	mov	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4413      	add	r3, r2
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4a1f      	ldr	r2, [pc, #124]	; (800ded4 <xTaskPriorityInherit+0xc8>)
 800de58:	4413      	add	r3, r2
 800de5a:	4299      	cmp	r1, r3
 800de5c:	d122      	bne.n	800dea4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	3304      	adds	r3, #4
 800de62:	4618      	mov	r0, r3
 800de64:	f7fd fdd4 	bl	800ba10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de68:	4b19      	ldr	r3, [pc, #100]	; (800ded0 <xTaskPriorityInherit+0xc4>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de76:	4b18      	ldr	r3, [pc, #96]	; (800ded8 <xTaskPriorityInherit+0xcc>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d903      	bls.n	800de86 <xTaskPriorityInherit+0x7a>
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de82:	4a15      	ldr	r2, [pc, #84]	; (800ded8 <xTaskPriorityInherit+0xcc>)
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4a10      	ldr	r2, [pc, #64]	; (800ded4 <xTaskPriorityInherit+0xc8>)
 800de94:	441a      	add	r2, r3
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	3304      	adds	r3, #4
 800de9a:	4619      	mov	r1, r3
 800de9c:	4610      	mov	r0, r2
 800de9e:	f7fd fd5a 	bl	800b956 <vListInsertEnd>
 800dea2:	e004      	b.n	800deae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dea4:	4b0a      	ldr	r3, [pc, #40]	; (800ded0 <xTaskPriorityInherit+0xc4>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800deae:	2301      	movs	r3, #1
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	e008      	b.n	800dec6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800deb8:	4b05      	ldr	r3, [pc, #20]	; (800ded0 <xTaskPriorityInherit+0xc4>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debe:	429a      	cmp	r2, r3
 800dec0:	d201      	bcs.n	800dec6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dec2:	2301      	movs	r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dec6:	68fb      	ldr	r3, [r7, #12]
	}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	20001728 	.word	0x20001728
 800ded4:	2000172c 	.word	0x2000172c
 800ded8:	20001c04 	.word	0x20001c04

0800dedc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b086      	sub	sp, #24
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d056      	beq.n	800dfa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800def2:	4b2e      	ldr	r3, [pc, #184]	; (800dfac <xTaskPriorityDisinherit+0xd0>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	429a      	cmp	r2, r3
 800defa:	d00a      	beq.n	800df12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800defc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df00:	f383 8811 	msr	BASEPRI, r3
 800df04:	f3bf 8f6f 	isb	sy
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	60fb      	str	r3, [r7, #12]
}
 800df0e:	bf00      	nop
 800df10:	e7fe      	b.n	800df10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10a      	bne.n	800df30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	60bb      	str	r3, [r7, #8]
}
 800df2c:	bf00      	nop
 800df2e:	e7fe      	b.n	800df2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df34:	1e5a      	subs	r2, r3, #1
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df42:	429a      	cmp	r2, r3
 800df44:	d02c      	beq.n	800dfa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d128      	bne.n	800dfa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	3304      	adds	r3, #4
 800df52:	4618      	mov	r0, r3
 800df54:	f7fd fd5c 	bl	800ba10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df70:	4b0f      	ldr	r3, [pc, #60]	; (800dfb0 <xTaskPriorityDisinherit+0xd4>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	429a      	cmp	r2, r3
 800df76:	d903      	bls.n	800df80 <xTaskPriorityDisinherit+0xa4>
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7c:	4a0c      	ldr	r2, [pc, #48]	; (800dfb0 <xTaskPriorityDisinherit+0xd4>)
 800df7e:	6013      	str	r3, [r2, #0]
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df84:	4613      	mov	r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4a09      	ldr	r2, [pc, #36]	; (800dfb4 <xTaskPriorityDisinherit+0xd8>)
 800df8e:	441a      	add	r2, r3
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	3304      	adds	r3, #4
 800df94:	4619      	mov	r1, r3
 800df96:	4610      	mov	r0, r2
 800df98:	f7fd fcdd 	bl	800b956 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df9c:	2301      	movs	r3, #1
 800df9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfa0:	697b      	ldr	r3, [r7, #20]
	}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3718      	adds	r7, #24
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	20001728 	.word	0x20001728
 800dfb0:	20001c04 	.word	0x20001c04
 800dfb4:	2000172c 	.word	0x2000172c

0800dfb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d06a      	beq.n	800e0a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	60fb      	str	r3, [r7, #12]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d902      	bls.n	800dffe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	61fb      	str	r3, [r7, #28]
 800dffc:	e002      	b.n	800e004 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e002:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d04b      	beq.n	800e0a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d146      	bne.n	800e0a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e018:	4b25      	ldr	r3, [pc, #148]	; (800e0b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d10a      	bne.n	800e038 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	60bb      	str	r3, [r7, #8]
}
 800e034:	bf00      	nop
 800e036:	e7fe      	b.n	800e036 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	69fa      	ldr	r2, [r7, #28]
 800e042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db04      	blt.n	800e056 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e052:	69bb      	ldr	r3, [r7, #24]
 800e054:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	6959      	ldr	r1, [r3, #20]
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	4613      	mov	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	4413      	add	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4a13      	ldr	r2, [pc, #76]	; (800e0b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e066:	4413      	add	r3, r2
 800e068:	4299      	cmp	r1, r3
 800e06a:	d11c      	bne.n	800e0a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06c:	69bb      	ldr	r3, [r7, #24]
 800e06e:	3304      	adds	r3, #4
 800e070:	4618      	mov	r0, r3
 800e072:	f7fd fccd 	bl	800ba10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07a:	4b0f      	ldr	r3, [pc, #60]	; (800e0b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d903      	bls.n	800e08a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	4a0c      	ldr	r2, [pc, #48]	; (800e0b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e088:	6013      	str	r3, [r2, #0]
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08e:	4613      	mov	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4a07      	ldr	r2, [pc, #28]	; (800e0b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e098:	441a      	add	r2, r3
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4619      	mov	r1, r3
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	f7fd fc58 	bl	800b956 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0a6:	bf00      	nop
 800e0a8:	3720      	adds	r7, #32
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20001728 	.word	0x20001728
 800e0b4:	2000172c 	.word	0x2000172c
 800e0b8:	20001c04 	.word	0x20001c04

0800e0bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e0bc:	b480      	push	{r7}
 800e0be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d004      	beq.n	800e0d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0c8:	4b05      	ldr	r3, [pc, #20]	; (800e0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0ce:	3201      	adds	r2, #1
 800e0d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0d2:	4b03      	ldr	r3, [pc, #12]	; (800e0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
	}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	20001728 	.word	0x20001728

0800e0e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
 800e0f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e0f2:	f000 fe07 	bl	800ed04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e0f6:	4b29      	ldr	r3, [pc, #164]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	2b02      	cmp	r3, #2
 800e102:	d01c      	beq.n	800e13e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e104:	4b25      	ldr	r3, [pc, #148]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	43d2      	mvns	r2, r2
 800e110:	400a      	ands	r2, r1
 800e112:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e116:	4b21      	ldr	r3, [pc, #132]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00b      	beq.n	800e13e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e126:	2101      	movs	r1, #1
 800e128:	6838      	ldr	r0, [r7, #0]
 800e12a:	f000 f91f 	bl	800e36c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e12e:	4b1c      	ldr	r3, [pc, #112]	; (800e1a0 <xTaskNotifyWait+0xbc>)
 800e130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e13e:	f000 fe11 	bl	800ed64 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e142:	f000 fddf 	bl	800ed04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e14c:	4b13      	ldr	r3, [pc, #76]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e158:	4b10      	ldr	r3, [pc, #64]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b02      	cmp	r3, #2
 800e164:	d002      	beq.n	800e16c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e166:	2300      	movs	r3, #0
 800e168:	617b      	str	r3, [r7, #20]
 800e16a:	e00a      	b.n	800e182 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e16c:	4b0b      	ldr	r3, [pc, #44]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	43d2      	mvns	r2, r2
 800e178:	400a      	ands	r2, r1
 800e17a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e182:	4b06      	ldr	r3, [pc, #24]	; (800e19c <xTaskNotifyWait+0xb8>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800e18c:	f000 fdea 	bl	800ed64 <vPortExitCritical>

		return xReturn;
 800e190:	697b      	ldr	r3, [r7, #20]
	}
 800e192:	4618      	mov	r0, r3
 800e194:	3718      	adds	r7, #24
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	20001728 	.word	0x20001728
 800e1a0:	e000ed04 	.word	0xe000ed04

0800e1a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b08a      	sub	sp, #40	; 0x28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	4613      	mov	r3, r2
 800e1b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <xTaskGenericNotify+0x30>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	61bb      	str	r3, [r7, #24]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e1d8:	f000 fd94 	bl	800ed04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d004      	beq.n	800e1ec <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e1f2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d82d      	bhi.n	800e25e <xTaskGenericNotify+0xba>
 800e202:	a201      	add	r2, pc, #4	; (adr r2, 800e208 <xTaskGenericNotify+0x64>)
 800e204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e208:	0800e281 	.word	0x0800e281
 800e20c:	0800e21d 	.word	0x0800e21d
 800e210:	0800e22f 	.word	0x0800e22f
 800e214:	0800e23f 	.word	0x0800e23f
 800e218:	0800e249 	.word	0x0800e249
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	431a      	orrs	r2, r3
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e22c:	e02b      	b.n	800e286 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e234:	1c5a      	adds	r2, r3, #1
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e23c:	e023      	b.n	800e286 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e246:	e01e      	b.n	800e286 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e248:	7ffb      	ldrb	r3, [r7, #31]
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d004      	beq.n	800e258 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e24e:	6a3b      	ldr	r3, [r7, #32]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e256:	e016      	b.n	800e286 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800e258:	2300      	movs	r3, #0
 800e25a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e25c:	e013      	b.n	800e286 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e25e:	6a3b      	ldr	r3, [r7, #32]
 800e260:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e268:	d00c      	beq.n	800e284 <xTaskGenericNotify+0xe0>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	617b      	str	r3, [r7, #20]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <xTaskGenericNotify+0xda>
					break;
 800e280:	bf00      	nop
 800e282:	e000      	b.n	800e286 <xTaskGenericNotify+0xe2>

					break;
 800e284:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e286:	7ffb      	ldrb	r3, [r7, #31]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d13a      	bne.n	800e302 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e28c:	6a3b      	ldr	r3, [r7, #32]
 800e28e:	3304      	adds	r3, #4
 800e290:	4618      	mov	r0, r3
 800e292:	f7fd fbbd 	bl	800ba10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29a:	4b1d      	ldr	r3, [pc, #116]	; (800e310 <xTaskGenericNotify+0x16c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d903      	bls.n	800e2aa <xTaskGenericNotify+0x106>
 800e2a2:	6a3b      	ldr	r3, [r7, #32]
 800e2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2a6:	4a1a      	ldr	r2, [pc, #104]	; (800e310 <xTaskGenericNotify+0x16c>)
 800e2a8:	6013      	str	r3, [r2, #0]
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4a17      	ldr	r2, [pc, #92]	; (800e314 <xTaskGenericNotify+0x170>)
 800e2b8:	441a      	add	r2, r3
 800e2ba:	6a3b      	ldr	r3, [r7, #32]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7fd fb48 	bl	800b956 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <xTaskGenericNotify+0x140>
	__asm volatile
 800e2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	613b      	str	r3, [r7, #16]
}
 800e2e0:	bf00      	nop
 800e2e2:	e7fe      	b.n	800e2e2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e8:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <xTaskGenericNotify+0x174>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d907      	bls.n	800e302 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e2f2:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <xTaskGenericNotify+0x178>)
 800e2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f8:	601a      	str	r2, [r3, #0]
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e302:	f000 fd2f 	bl	800ed64 <vPortExitCritical>

		return xReturn;
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	3728      	adds	r7, #40	; 0x28
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	20001c04 	.word	0x20001c04
 800e314:	2000172c 	.word	0x2000172c
 800e318:	20001728 	.word	0x20001728
 800e31c:	e000ed04 	.word	0xe000ed04

0800e320 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d102      	bne.n	800e334 <xTaskNotifyStateClear+0x14>
 800e32e:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <xTaskNotifyStateClear+0x48>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	e000      	b.n	800e336 <xTaskNotifyStateClear+0x16>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800e338:	f000 fce4 	bl	800ed04 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e342:	b2db      	uxtb	r3, r3
 800e344:	2b02      	cmp	r3, #2
 800e346:	d106      	bne.n	800e356 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 800e350:	2301      	movs	r3, #1
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	e001      	b.n	800e35a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800e356:	2300      	movs	r3, #0
 800e358:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800e35a:	f000 fd03 	bl	800ed64 <vPortExitCritical>

		return xReturn;
 800e35e:	68fb      	ldr	r3, [r7, #12]
	}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20001728 	.word	0x20001728

0800e36c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e376:	4b21      	ldr	r3, [pc, #132]	; (800e3fc <prvAddCurrentTaskToDelayedList+0x90>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e37c:	4b20      	ldr	r3, [pc, #128]	; (800e400 <prvAddCurrentTaskToDelayedList+0x94>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3304      	adds	r3, #4
 800e382:	4618      	mov	r0, r3
 800e384:	f7fd fb44 	bl	800ba10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38e:	d10a      	bne.n	800e3a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d007      	beq.n	800e3a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e396:	4b1a      	ldr	r3, [pc, #104]	; (800e400 <prvAddCurrentTaskToDelayedList+0x94>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3304      	adds	r3, #4
 800e39c:	4619      	mov	r1, r3
 800e39e:	4819      	ldr	r0, [pc, #100]	; (800e404 <prvAddCurrentTaskToDelayedList+0x98>)
 800e3a0:	f7fd fad9 	bl	800b956 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e3a4:	e026      	b.n	800e3f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e3ae:	4b14      	ldr	r3, [pc, #80]	; (800e400 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d209      	bcs.n	800e3d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3be:	4b12      	ldr	r3, [pc, #72]	; (800e408 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	4b0f      	ldr	r3, [pc, #60]	; (800e400 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f7fd fae7 	bl	800b99e <vListInsert>
}
 800e3d0:	e010      	b.n	800e3f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3d2:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	4b0a      	ldr	r3, [pc, #40]	; (800e400 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4619      	mov	r1, r3
 800e3de:	4610      	mov	r0, r2
 800e3e0:	f7fd fadd 	bl	800b99e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3e4:	4b0a      	ldr	r3, [pc, #40]	; (800e410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	68ba      	ldr	r2, [r7, #8]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d202      	bcs.n	800e3f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3ee:	4a08      	ldr	r2, [pc, #32]	; (800e410 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	6013      	str	r3, [r2, #0]
}
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20001c00 	.word	0x20001c00
 800e400:	20001728 	.word	0x20001728
 800e404:	20001be8 	.word	0x20001be8
 800e408:	20001bb8 	.word	0x20001bb8
 800e40c:	20001bb4 	.word	0x20001bb4
 800e410:	20001c1c 	.word	0x20001c1c

0800e414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08a      	sub	sp, #40	; 0x28
 800e418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e41e:	f000 fb07 	bl	800ea30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e422:	4b1c      	ldr	r3, [pc, #112]	; (800e494 <xTimerCreateTimerTask+0x80>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d021      	beq.n	800e46e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e42a:	2300      	movs	r3, #0
 800e42c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e432:	1d3a      	adds	r2, r7, #4
 800e434:	f107 0108 	add.w	r1, r7, #8
 800e438:	f107 030c 	add.w	r3, r7, #12
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd fa43 	bl	800b8c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	9202      	str	r2, [sp, #8]
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	2302      	movs	r3, #2
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	2300      	movs	r3, #0
 800e452:	460a      	mov	r2, r1
 800e454:	4910      	ldr	r1, [pc, #64]	; (800e498 <xTimerCreateTimerTask+0x84>)
 800e456:	4811      	ldr	r0, [pc, #68]	; (800e49c <xTimerCreateTimerTask+0x88>)
 800e458:	f7fe fe0a 	bl	800d070 <xTaskCreateStatic>
 800e45c:	4603      	mov	r3, r0
 800e45e:	4a10      	ldr	r2, [pc, #64]	; (800e4a0 <xTimerCreateTimerTask+0x8c>)
 800e460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e462:	4b0f      	ldr	r3, [pc, #60]	; (800e4a0 <xTimerCreateTimerTask+0x8c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d001      	beq.n	800e46e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e46a:	2301      	movs	r3, #1
 800e46c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d10a      	bne.n	800e48a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e478:	f383 8811 	msr	BASEPRI, r3
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f3bf 8f4f 	dsb	sy
 800e484:	613b      	str	r3, [r7, #16]
}
 800e486:	bf00      	nop
 800e488:	e7fe      	b.n	800e488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e48a:	697b      	ldr	r3, [r7, #20]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3718      	adds	r7, #24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20001c60 	.word	0x20001c60
 800e498:	08010940 	.word	0x08010940
 800e49c:	0800e5d9 	.word	0x0800e5d9
 800e4a0:	20001c64 	.word	0x20001c64

0800e4a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08a      	sub	sp, #40	; 0x28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10a      	bne.n	800e4d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c0:	f383 8811 	msr	BASEPRI, r3
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	623b      	str	r3, [r7, #32]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e4d2:	4b1a      	ldr	r3, [pc, #104]	; (800e53c <xTimerGenericCommand+0x98>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d02a      	beq.n	800e530 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b05      	cmp	r3, #5
 800e4ea:	dc18      	bgt.n	800e51e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4ec:	f7ff fc70 	bl	800ddd0 <xTaskGetSchedulerState>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d109      	bne.n	800e50a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4f6:	4b11      	ldr	r3, [pc, #68]	; (800e53c <xTimerGenericCommand+0x98>)
 800e4f8:	6818      	ldr	r0, [r3, #0]
 800e4fa:	f107 0110 	add.w	r1, r7, #16
 800e4fe:	2300      	movs	r3, #0
 800e500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e502:	f7fd fca3 	bl	800be4c <xQueueGenericSend>
 800e506:	6278      	str	r0, [r7, #36]	; 0x24
 800e508:	e012      	b.n	800e530 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e50a:	4b0c      	ldr	r3, [pc, #48]	; (800e53c <xTimerGenericCommand+0x98>)
 800e50c:	6818      	ldr	r0, [r3, #0]
 800e50e:	f107 0110 	add.w	r1, r7, #16
 800e512:	2300      	movs	r3, #0
 800e514:	2200      	movs	r2, #0
 800e516:	f7fd fc99 	bl	800be4c <xQueueGenericSend>
 800e51a:	6278      	str	r0, [r7, #36]	; 0x24
 800e51c:	e008      	b.n	800e530 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e51e:	4b07      	ldr	r3, [pc, #28]	; (800e53c <xTimerGenericCommand+0x98>)
 800e520:	6818      	ldr	r0, [r3, #0]
 800e522:	f107 0110 	add.w	r1, r7, #16
 800e526:	2300      	movs	r3, #0
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	f7fd fd8d 	bl	800c048 <xQueueGenericSendFromISR>
 800e52e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e532:	4618      	mov	r0, r3
 800e534:	3728      	adds	r7, #40	; 0x28
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	20001c60 	.word	0x20001c60

0800e540 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b088      	sub	sp, #32
 800e544:	af02      	add	r7, sp, #8
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e54a:	4b22      	ldr	r3, [pc, #136]	; (800e5d4 <prvProcessExpiredTimer+0x94>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	3304      	adds	r3, #4
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fd fa59 	bl	800ba10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e564:	f003 0304 	and.w	r3, r3, #4
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d022      	beq.n	800e5b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	699a      	ldr	r2, [r3, #24]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	18d1      	adds	r1, r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	6978      	ldr	r0, [r7, #20]
 800e57a:	f000 f8d1 	bl	800e720 <prvInsertTimerInActiveList>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d01f      	beq.n	800e5c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e584:	2300      	movs	r3, #0
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	2300      	movs	r3, #0
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	2100      	movs	r1, #0
 800e58e:	6978      	ldr	r0, [r7, #20]
 800e590:	f7ff ff88 	bl	800e4a4 <xTimerGenericCommand>
 800e594:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d113      	bne.n	800e5c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	60fb      	str	r3, [r7, #12]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5b8:	f023 0301 	bic.w	r3, r3, #1
 800e5bc:	b2da      	uxtb	r2, r3
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	6a1b      	ldr	r3, [r3, #32]
 800e5c8:	6978      	ldr	r0, [r7, #20]
 800e5ca:	4798      	blx	r3
}
 800e5cc:	bf00      	nop
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20001c58 	.word	0x20001c58

0800e5d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5e0:	f107 0308 	add.w	r3, r7, #8
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f000 f857 	bl	800e698 <prvGetNextExpireTime>
 800e5ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	68f8      	ldr	r0, [r7, #12]
 800e5f2:	f000 f803 	bl	800e5fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5f6:	f000 f8d5 	bl	800e7a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5fa:	e7f1      	b.n	800e5e0 <prvTimerTask+0x8>

0800e5fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e606:	f7fe ff95 	bl	800d534 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e60a:	f107 0308 	add.w	r3, r7, #8
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 f866 	bl	800e6e0 <prvSampleTimeNow>
 800e614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d130      	bne.n	800e67e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10a      	bne.n	800e638 <prvProcessTimerOrBlockTask+0x3c>
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	429a      	cmp	r2, r3
 800e628:	d806      	bhi.n	800e638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e62a:	f7fe ff91 	bl	800d550 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e62e:	68f9      	ldr	r1, [r7, #12]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff ff85 	bl	800e540 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e636:	e024      	b.n	800e682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d008      	beq.n	800e650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e63e:	4b13      	ldr	r3, [pc, #76]	; (800e68c <prvProcessTimerOrBlockTask+0x90>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <prvProcessTimerOrBlockTask+0x50>
 800e648:	2301      	movs	r3, #1
 800e64a:	e000      	b.n	800e64e <prvProcessTimerOrBlockTask+0x52>
 800e64c:	2300      	movs	r3, #0
 800e64e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e650:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <prvProcessTimerOrBlockTask+0x94>)
 800e652:	6818      	ldr	r0, [r3, #0]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	4619      	mov	r1, r3
 800e65e:	f7fe f94d 	bl	800c8fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e662:	f7fe ff75 	bl	800d550 <xTaskResumeAll>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10a      	bne.n	800e682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e66c:	4b09      	ldr	r3, [pc, #36]	; (800e694 <prvProcessTimerOrBlockTask+0x98>)
 800e66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	f3bf 8f6f 	isb	sy
}
 800e67c:	e001      	b.n	800e682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e67e:	f7fe ff67 	bl	800d550 <xTaskResumeAll>
}
 800e682:	bf00      	nop
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20001c5c 	.word	0x20001c5c
 800e690:	20001c60 	.word	0x20001c60
 800e694:	e000ed04 	.word	0xe000ed04

0800e698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e6a0:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <prvGetNextExpireTime+0x44>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d101      	bne.n	800e6ae <prvGetNextExpireTime+0x16>
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	e000      	b.n	800e6b0 <prvGetNextExpireTime+0x18>
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d105      	bne.n	800e6c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6bc:	4b07      	ldr	r3, [pc, #28]	; (800e6dc <prvGetNextExpireTime+0x44>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	e001      	b.n	800e6cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	20001c58 	.word	0x20001c58

0800e6e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6e8:	f7fe ffd0 	bl	800d68c <xTaskGetTickCount>
 800e6ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6ee:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <prvSampleTimeNow+0x3c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d205      	bcs.n	800e704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6f8:	f000 f936 	bl	800e968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	601a      	str	r2, [r3, #0]
 800e702:	e002      	b.n	800e70a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e70a:	4a04      	ldr	r2, [pc, #16]	; (800e71c <prvSampleTimeNow+0x3c>)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e710:	68fb      	ldr	r3, [r7, #12]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20001c68 	.word	0x20001c68

0800e720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e72e:	2300      	movs	r3, #0
 800e730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	68ba      	ldr	r2, [r7, #8]
 800e736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	429a      	cmp	r2, r3
 800e744:	d812      	bhi.n	800e76c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	699b      	ldr	r3, [r3, #24]
 800e750:	429a      	cmp	r2, r3
 800e752:	d302      	bcc.n	800e75a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e754:	2301      	movs	r3, #1
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	e01b      	b.n	800e792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e75a:	4b10      	ldr	r3, [pc, #64]	; (800e79c <prvInsertTimerInActiveList+0x7c>)
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	3304      	adds	r3, #4
 800e762:	4619      	mov	r1, r3
 800e764:	4610      	mov	r0, r2
 800e766:	f7fd f91a 	bl	800b99e <vListInsert>
 800e76a:	e012      	b.n	800e792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d206      	bcs.n	800e782 <prvInsertTimerInActiveList+0x62>
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d302      	bcc.n	800e782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e77c:	2301      	movs	r3, #1
 800e77e:	617b      	str	r3, [r7, #20]
 800e780:	e007      	b.n	800e792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e782:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <prvInsertTimerInActiveList+0x80>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3304      	adds	r3, #4
 800e78a:	4619      	mov	r1, r3
 800e78c:	4610      	mov	r0, r2
 800e78e:	f7fd f906 	bl	800b99e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e792:	697b      	ldr	r3, [r7, #20]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	20001c5c 	.word	0x20001c5c
 800e7a0:	20001c58 	.word	0x20001c58

0800e7a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08e      	sub	sp, #56	; 0x38
 800e7a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7aa:	e0ca      	b.n	800e942 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	da18      	bge.n	800e7e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e7b2:	1d3b      	adds	r3, r7, #4
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	61fb      	str	r3, [r7, #28]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7da:	6850      	ldr	r0, [r2, #4]
 800e7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7de:	6892      	ldr	r2, [r2, #8]
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f2c0 80aa 	blt.w	800e940 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	695b      	ldr	r3, [r3, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d004      	beq.n	800e802 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7fd f907 	bl	800ba10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e802:	463b      	mov	r3, r7
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff ff6b 	bl	800e6e0 <prvSampleTimeNow>
 800e80a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b09      	cmp	r3, #9
 800e810:	f200 8097 	bhi.w	800e942 <prvProcessReceivedCommands+0x19e>
 800e814:	a201      	add	r2, pc, #4	; (adr r2, 800e81c <prvProcessReceivedCommands+0x78>)
 800e816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e81a:	bf00      	nop
 800e81c:	0800e845 	.word	0x0800e845
 800e820:	0800e845 	.word	0x0800e845
 800e824:	0800e845 	.word	0x0800e845
 800e828:	0800e8b9 	.word	0x0800e8b9
 800e82c:	0800e8cd 	.word	0x0800e8cd
 800e830:	0800e917 	.word	0x0800e917
 800e834:	0800e845 	.word	0x0800e845
 800e838:	0800e845 	.word	0x0800e845
 800e83c:	0800e8b9 	.word	0x0800e8b9
 800e840:	0800e8cd 	.word	0x0800e8cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e84a:	f043 0301 	orr.w	r3, r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	699b      	ldr	r3, [r3, #24]
 800e85c:	18d1      	adds	r1, r2, r3
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e864:	f7ff ff5c 	bl	800e720 <prvInsertTimerInActiveList>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d069      	beq.n	800e942 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e87c:	f003 0304 	and.w	r3, r3, #4
 800e880:	2b00      	cmp	r3, #0
 800e882:	d05e      	beq.n	800e942 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	441a      	add	r2, r3
 800e88c:	2300      	movs	r3, #0
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	2300      	movs	r3, #0
 800e892:	2100      	movs	r1, #0
 800e894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e896:	f7ff fe05 	bl	800e4a4 <xTimerGenericCommand>
 800e89a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d14f      	bne.n	800e942 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	61bb      	str	r3, [r7, #24]
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8be:	f023 0301 	bic.w	r3, r3, #1
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e8ca:	e03a      	b.n	800e942 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8d2:	f043 0301 	orr.w	r3, r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8de:	68ba      	ldr	r2, [r7, #8]
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10a      	bne.n	800e902 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	f383 8811 	msr	BASEPRI, r3
 800e8f4:	f3bf 8f6f 	isb	sy
 800e8f8:	f3bf 8f4f 	dsb	sy
 800e8fc:	617b      	str	r3, [r7, #20]
}
 800e8fe:	bf00      	nop
 800e900:	e7fe      	b.n	800e900 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	18d1      	adds	r1, r2, r3
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e910:	f7ff ff06 	bl	800e720 <prvInsertTimerInActiveList>
					break;
 800e914:	e015      	b.n	800e942 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e91c:	f003 0302 	and.w	r3, r3, #2
 800e920:	2b00      	cmp	r3, #0
 800e922:	d103      	bne.n	800e92c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e926:	f000 fbdf 	bl	800f0e8 <vPortFree>
 800e92a:	e00a      	b.n	800e942 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e932:	f023 0301 	bic.w	r3, r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e93e:	e000      	b.n	800e942 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e942:	4b08      	ldr	r3, [pc, #32]	; (800e964 <prvProcessReceivedCommands+0x1c0>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	1d39      	adds	r1, r7, #4
 800e948:	2200      	movs	r2, #0
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fd fc18 	bl	800c180 <xQueueReceive>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	f47f af2a 	bne.w	800e7ac <prvProcessReceivedCommands+0x8>
	}
}
 800e958:	bf00      	nop
 800e95a:	bf00      	nop
 800e95c:	3730      	adds	r7, #48	; 0x30
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	20001c60 	.word	0x20001c60

0800e968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e96e:	e048      	b.n	800ea02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e970:	4b2d      	ldr	r3, [pc, #180]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e97a:	4b2b      	ldr	r3, [pc, #172]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	3304      	adds	r3, #4
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fd f841 	bl	800ba10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e99c:	f003 0304 	and.w	r3, r3, #4
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d02e      	beq.n	800ea02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	693a      	ldr	r2, [r7, #16]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d90e      	bls.n	800e9d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9c2:	4b19      	ldr	r3, [pc, #100]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	f7fc ffe6 	bl	800b99e <vListInsert>
 800e9d2:	e016      	b.n	800ea02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f7ff fd60 	bl	800e4a4 <xTimerGenericCommand>
 800e9e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10a      	bne.n	800ea02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f0:	f383 8811 	msr	BASEPRI, r3
 800e9f4:	f3bf 8f6f 	isb	sy
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	603b      	str	r3, [r7, #0]
}
 800e9fe:	bf00      	nop
 800ea00:	e7fe      	b.n	800ea00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea02:	4b09      	ldr	r3, [pc, #36]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1b1      	bne.n	800e970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ea12:	4b06      	ldr	r3, [pc, #24]	; (800ea2c <prvSwitchTimerLists+0xc4>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a04      	ldr	r2, [pc, #16]	; (800ea28 <prvSwitchTimerLists+0xc0>)
 800ea18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea1a:	4a04      	ldr	r2, [pc, #16]	; (800ea2c <prvSwitchTimerLists+0xc4>)
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	6013      	str	r3, [r2, #0]
}
 800ea20:	bf00      	nop
 800ea22:	3718      	adds	r7, #24
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20001c58 	.word	0x20001c58
 800ea2c:	20001c5c 	.word	0x20001c5c

0800ea30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea36:	f000 f965 	bl	800ed04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea3a:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <prvCheckForValidListAndQueue+0x60>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d120      	bne.n	800ea84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea42:	4814      	ldr	r0, [pc, #80]	; (800ea94 <prvCheckForValidListAndQueue+0x64>)
 800ea44:	f7fc ff5a 	bl	800b8fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea48:	4813      	ldr	r0, [pc, #76]	; (800ea98 <prvCheckForValidListAndQueue+0x68>)
 800ea4a:	f7fc ff57 	bl	800b8fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea4e:	4b13      	ldr	r3, [pc, #76]	; (800ea9c <prvCheckForValidListAndQueue+0x6c>)
 800ea50:	4a10      	ldr	r2, [pc, #64]	; (800ea94 <prvCheckForValidListAndQueue+0x64>)
 800ea52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea54:	4b12      	ldr	r3, [pc, #72]	; (800eaa0 <prvCheckForValidListAndQueue+0x70>)
 800ea56:	4a10      	ldr	r2, [pc, #64]	; (800ea98 <prvCheckForValidListAndQueue+0x68>)
 800ea58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	4b11      	ldr	r3, [pc, #68]	; (800eaa4 <prvCheckForValidListAndQueue+0x74>)
 800ea60:	4a11      	ldr	r2, [pc, #68]	; (800eaa8 <prvCheckForValidListAndQueue+0x78>)
 800ea62:	2110      	movs	r1, #16
 800ea64:	200a      	movs	r0, #10
 800ea66:	f7fd f865 	bl	800bb34 <xQueueGenericCreateStatic>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	4a08      	ldr	r2, [pc, #32]	; (800ea90 <prvCheckForValidListAndQueue+0x60>)
 800ea6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <prvCheckForValidListAndQueue+0x60>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d005      	beq.n	800ea84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea78:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <prvCheckForValidListAndQueue+0x60>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	490b      	ldr	r1, [pc, #44]	; (800eaac <prvCheckForValidListAndQueue+0x7c>)
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fd ff12 	bl	800c8a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea84:	f000 f96e 	bl	800ed64 <vPortExitCritical>
}
 800ea88:	bf00      	nop
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20001c60 	.word	0x20001c60
 800ea94:	20001c30 	.word	0x20001c30
 800ea98:	20001c44 	.word	0x20001c44
 800ea9c:	20001c58 	.word	0x20001c58
 800eaa0:	20001c5c 	.word	0x20001c5c
 800eaa4:	20001d0c 	.word	0x20001d0c
 800eaa8:	20001c6c 	.word	0x20001c6c
 800eaac:	08010948 	.word	0x08010948

0800eab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	3b04      	subs	r3, #4
 800eac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3b04      	subs	r3, #4
 800eace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	f023 0201 	bic.w	r2, r3, #1
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3b04      	subs	r3, #4
 800eade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eae0:	4a0c      	ldr	r2, [pc, #48]	; (800eb14 <pxPortInitialiseStack+0x64>)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	3b14      	subs	r3, #20
 800eaea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	3b04      	subs	r3, #4
 800eaf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f06f 0202 	mvn.w	r2, #2
 800eafe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3b20      	subs	r3, #32
 800eb04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb06:	68fb      	ldr	r3, [r7, #12]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	0800eb19 	.word	0x0800eb19

0800eb18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eb22:	4b12      	ldr	r3, [pc, #72]	; (800eb6c <prvTaskExitError+0x54>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2a:	d00a      	beq.n	800eb42 <prvTaskExitError+0x2a>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	60fb      	str	r3, [r7, #12]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <prvTaskExitError+0x28>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	60bb      	str	r3, [r7, #8]
}
 800eb54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb56:	bf00      	nop
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d0fc      	beq.n	800eb58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb5e:	bf00      	nop
 800eb60:	bf00      	nop
 800eb62:	3714      	adds	r7, #20
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	2000001c 	.word	0x2000001c

0800eb70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb70:	4b07      	ldr	r3, [pc, #28]	; (800eb90 <pxCurrentTCBConst2>)
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	6808      	ldr	r0, [r1, #0]
 800eb76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb7a:	f380 8809 	msr	PSP, r0
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f04f 0000 	mov.w	r0, #0
 800eb86:	f380 8811 	msr	BASEPRI, r0
 800eb8a:	4770      	bx	lr
 800eb8c:	f3af 8000 	nop.w

0800eb90 <pxCurrentTCBConst2>:
 800eb90:	20001728 	.word	0x20001728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb94:	bf00      	nop
 800eb96:	bf00      	nop

0800eb98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb98:	4808      	ldr	r0, [pc, #32]	; (800ebbc <prvPortStartFirstTask+0x24>)
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	6800      	ldr	r0, [r0, #0]
 800eb9e:	f380 8808 	msr	MSP, r0
 800eba2:	f04f 0000 	mov.w	r0, #0
 800eba6:	f380 8814 	msr	CONTROL, r0
 800ebaa:	b662      	cpsie	i
 800ebac:	b661      	cpsie	f
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	df00      	svc	0
 800ebb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ebba:	bf00      	nop
 800ebbc:	e000ed08 	.word	0xe000ed08

0800ebc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ebc6:	4b46      	ldr	r3, [pc, #280]	; (800ece0 <xPortStartScheduler+0x120>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a46      	ldr	r2, [pc, #280]	; (800ece4 <xPortStartScheduler+0x124>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d10a      	bne.n	800ebe6 <xPortStartScheduler+0x26>
	__asm volatile
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	613b      	str	r3, [r7, #16]
}
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ebe6:	4b3e      	ldr	r3, [pc, #248]	; (800ece0 <xPortStartScheduler+0x120>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a3f      	ldr	r2, [pc, #252]	; (800ece8 <xPortStartScheduler+0x128>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d10a      	bne.n	800ec06 <xPortStartScheduler+0x46>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	60fb      	str	r3, [r7, #12]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec06:	4b39      	ldr	r3, [pc, #228]	; (800ecec <xPortStartScheduler+0x12c>)
 800ec08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	22ff      	movs	r2, #255	; 0xff
 800ec16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ec20:	78fb      	ldrb	r3, [r7, #3]
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <xPortStartScheduler+0x130>)
 800ec2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ec2e:	4b31      	ldr	r3, [pc, #196]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec30:	2207      	movs	r2, #7
 800ec32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec34:	e009      	b.n	800ec4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ec36:	4b2f      	ldr	r3, [pc, #188]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	4a2d      	ldr	r2, [pc, #180]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec40:	78fb      	ldrb	r3, [r7, #3]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	005b      	lsls	r3, r3, #1
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec4a:	78fb      	ldrb	r3, [r7, #3]
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec52:	2b80      	cmp	r3, #128	; 0x80
 800ec54:	d0ef      	beq.n	800ec36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec56:	4b27      	ldr	r3, [pc, #156]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f1c3 0307 	rsb	r3, r3, #7
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	d00a      	beq.n	800ec78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec66:	f383 8811 	msr	BASEPRI, r3
 800ec6a:	f3bf 8f6f 	isb	sy
 800ec6e:	f3bf 8f4f 	dsb	sy
 800ec72:	60bb      	str	r3, [r7, #8]
}
 800ec74:	bf00      	nop
 800ec76:	e7fe      	b.n	800ec76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec78:	4b1e      	ldr	r3, [pc, #120]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	021b      	lsls	r3, r3, #8
 800ec7e:	4a1d      	ldr	r2, [pc, #116]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec82:	4b1c      	ldr	r3, [pc, #112]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec8a:	4a1a      	ldr	r2, [pc, #104]	; (800ecf4 <xPortStartScheduler+0x134>)
 800ec8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec96:	4b18      	ldr	r3, [pc, #96]	; (800ecf8 <xPortStartScheduler+0x138>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a17      	ldr	r2, [pc, #92]	; (800ecf8 <xPortStartScheduler+0x138>)
 800ec9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eca2:	4b15      	ldr	r3, [pc, #84]	; (800ecf8 <xPortStartScheduler+0x138>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	4a14      	ldr	r2, [pc, #80]	; (800ecf8 <xPortStartScheduler+0x138>)
 800eca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ecac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ecae:	f000 f8dd 	bl	800ee6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ecb2:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <xPortStartScheduler+0x13c>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ecb8:	f000 f8fc 	bl	800eeb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ecbc:	4b10      	ldr	r3, [pc, #64]	; (800ed00 <xPortStartScheduler+0x140>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a0f      	ldr	r2, [pc, #60]	; (800ed00 <xPortStartScheduler+0x140>)
 800ecc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ecc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ecc8:	f7ff ff66 	bl	800eb98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eccc:	f7fe fda8 	bl	800d820 <vTaskSwitchContext>
	prvTaskExitError();
 800ecd0:	f7ff ff22 	bl	800eb18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	e000ed00 	.word	0xe000ed00
 800ece4:	410fc271 	.word	0x410fc271
 800ece8:	410fc270 	.word	0x410fc270
 800ecec:	e000e400 	.word	0xe000e400
 800ecf0:	20001d5c 	.word	0x20001d5c
 800ecf4:	20001d60 	.word	0x20001d60
 800ecf8:	e000ed20 	.word	0xe000ed20
 800ecfc:	2000001c 	.word	0x2000001c
 800ed00:	e000ef34 	.word	0xe000ef34

0800ed04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	607b      	str	r3, [r7, #4]
}
 800ed1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ed1e:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <vPortEnterCritical+0x58>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3301      	adds	r3, #1
 800ed24:	4a0d      	ldr	r2, [pc, #52]	; (800ed5c <vPortEnterCritical+0x58>)
 800ed26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ed28:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <vPortEnterCritical+0x58>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d10f      	bne.n	800ed50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed30:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <vPortEnterCritical+0x5c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00a      	beq.n	800ed50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	603b      	str	r3, [r7, #0]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <vPortEnterCritical+0x4a>
	}
}
 800ed50:	bf00      	nop
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr
 800ed5c:	2000001c 	.word	0x2000001c
 800ed60:	e000ed04 	.word	0xe000ed04

0800ed64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed6a:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <vPortExitCritical+0x50>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10a      	bne.n	800ed88 <vPortExitCritical+0x24>
	__asm volatile
 800ed72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed76:	f383 8811 	msr	BASEPRI, r3
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	f3bf 8f4f 	dsb	sy
 800ed82:	607b      	str	r3, [r7, #4]
}
 800ed84:	bf00      	nop
 800ed86:	e7fe      	b.n	800ed86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed88:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <vPortExitCritical+0x50>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	4a09      	ldr	r2, [pc, #36]	; (800edb4 <vPortExitCritical+0x50>)
 800ed90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed92:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <vPortExitCritical+0x50>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d105      	bne.n	800eda6 <vPortExitCritical+0x42>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	f383 8811 	msr	BASEPRI, r3
}
 800eda4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eda6:	bf00      	nop
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	2000001c 	.word	0x2000001c
	...

0800edc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800edc0:	f3ef 8009 	mrs	r0, PSP
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	4b15      	ldr	r3, [pc, #84]	; (800ee20 <pxCurrentTCBConst>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	f01e 0f10 	tst.w	lr, #16
 800edd0:	bf08      	it	eq
 800edd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800edd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edda:	6010      	str	r0, [r2, #0]
 800eddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ede0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ede4:	f380 8811 	msr	BASEPRI, r0
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f7fe fd16 	bl	800d820 <vTaskSwitchContext>
 800edf4:	f04f 0000 	mov.w	r0, #0
 800edf8:	f380 8811 	msr	BASEPRI, r0
 800edfc:	bc09      	pop	{r0, r3}
 800edfe:	6819      	ldr	r1, [r3, #0]
 800ee00:	6808      	ldr	r0, [r1, #0]
 800ee02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee06:	f01e 0f10 	tst.w	lr, #16
 800ee0a:	bf08      	it	eq
 800ee0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ee10:	f380 8809 	msr	PSP, r0
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	f3af 8000 	nop.w

0800ee20 <pxCurrentTCBConst>:
 800ee20:	20001728 	.word	0x20001728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ee24:	bf00      	nop
 800ee26:	bf00      	nop

0800ee28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee32:	f383 8811 	msr	BASEPRI, r3
 800ee36:	f3bf 8f6f 	isb	sy
 800ee3a:	f3bf 8f4f 	dsb	sy
 800ee3e:	607b      	str	r3, [r7, #4]
}
 800ee40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee42:	f7fe fc33 	bl	800d6ac <xTaskIncrementTick>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d003      	beq.n	800ee54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee4c:	4b06      	ldr	r3, [pc, #24]	; (800ee68 <xPortSysTickHandler+0x40>)
 800ee4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	2300      	movs	r3, #0
 800ee56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	f383 8811 	msr	BASEPRI, r3
}
 800ee5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	e000ed04 	.word	0xe000ed04

0800ee6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee70:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <vPortSetupTimerInterrupt+0x34>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee76:	4b0b      	ldr	r3, [pc, #44]	; (800eea4 <vPortSetupTimerInterrupt+0x38>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee7c:	4b0a      	ldr	r3, [pc, #40]	; (800eea8 <vPortSetupTimerInterrupt+0x3c>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a0a      	ldr	r2, [pc, #40]	; (800eeac <vPortSetupTimerInterrupt+0x40>)
 800ee82:	fba2 2303 	umull	r2, r3, r2, r3
 800ee86:	099b      	lsrs	r3, r3, #6
 800ee88:	4a09      	ldr	r2, [pc, #36]	; (800eeb0 <vPortSetupTimerInterrupt+0x44>)
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee8e:	4b04      	ldr	r3, [pc, #16]	; (800eea0 <vPortSetupTimerInterrupt+0x34>)
 800ee90:	2207      	movs	r2, #7
 800ee92:	601a      	str	r2, [r3, #0]
}
 800ee94:	bf00      	nop
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	e000e010 	.word	0xe000e010
 800eea4:	e000e018 	.word	0xe000e018
 800eea8:	20000010 	.word	0x20000010
 800eeac:	10624dd3 	.word	0x10624dd3
 800eeb0:	e000e014 	.word	0xe000e014

0800eeb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eeb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eec4 <vPortEnableVFP+0x10>
 800eeb8:	6801      	ldr	r1, [r0, #0]
 800eeba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eebe:	6001      	str	r1, [r0, #0]
 800eec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eec2:	bf00      	nop
 800eec4:	e000ed88 	.word	0xe000ed88

0800eec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eece:	f3ef 8305 	mrs	r3, IPSR
 800eed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b0f      	cmp	r3, #15
 800eed8:	d914      	bls.n	800ef04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eeda:	4a17      	ldr	r2, [pc, #92]	; (800ef38 <vPortValidateInterruptPriority+0x70>)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	4413      	add	r3, r2
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eee4:	4b15      	ldr	r3, [pc, #84]	; (800ef3c <vPortValidateInterruptPriority+0x74>)
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	7afa      	ldrb	r2, [r7, #11]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d20a      	bcs.n	800ef04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	607b      	str	r3, [r7, #4]
}
 800ef00:	bf00      	nop
 800ef02:	e7fe      	b.n	800ef02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef04:	4b0e      	ldr	r3, [pc, #56]	; (800ef40 <vPortValidateInterruptPriority+0x78>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef0c:	4b0d      	ldr	r3, [pc, #52]	; (800ef44 <vPortValidateInterruptPriority+0x7c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d90a      	bls.n	800ef2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ef14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef18:	f383 8811 	msr	BASEPRI, r3
 800ef1c:	f3bf 8f6f 	isb	sy
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	603b      	str	r3, [r7, #0]
}
 800ef26:	bf00      	nop
 800ef28:	e7fe      	b.n	800ef28 <vPortValidateInterruptPriority+0x60>
	}
 800ef2a:	bf00      	nop
 800ef2c:	3714      	adds	r7, #20
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	e000e3f0 	.word	0xe000e3f0
 800ef3c:	20001d5c 	.word	0x20001d5c
 800ef40:	e000ed0c 	.word	0xe000ed0c
 800ef44:	20001d60 	.word	0x20001d60

0800ef48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	; 0x28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef54:	f7fe faee 	bl	800d534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef58:	4b5d      	ldr	r3, [pc, #372]	; (800f0d0 <pvPortMalloc+0x188>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d101      	bne.n	800ef64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef60:	f000 f924 	bl	800f1ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef64:	4b5b      	ldr	r3, [pc, #364]	; (800f0d4 <pvPortMalloc+0x18c>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f040 8093 	bne.w	800f098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d01d      	beq.n	800efb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef78:	2208      	movs	r2, #8
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f003 0307 	and.w	r3, r3, #7
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d014      	beq.n	800efb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f023 0307 	bic.w	r3, r3, #7
 800ef90:	3308      	adds	r3, #8
 800ef92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00a      	beq.n	800efb4 <pvPortMalloc+0x6c>
	__asm volatile
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	f383 8811 	msr	BASEPRI, r3
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	f3bf 8f4f 	dsb	sy
 800efae:	617b      	str	r3, [r7, #20]
}
 800efb0:	bf00      	nop
 800efb2:	e7fe      	b.n	800efb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d06e      	beq.n	800f098 <pvPortMalloc+0x150>
 800efba:	4b47      	ldr	r3, [pc, #284]	; (800f0d8 <pvPortMalloc+0x190>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d869      	bhi.n	800f098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800efc4:	4b45      	ldr	r3, [pc, #276]	; (800f0dc <pvPortMalloc+0x194>)
 800efc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800efc8:	4b44      	ldr	r3, [pc, #272]	; (800f0dc <pvPortMalloc+0x194>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efce:	e004      	b.n	800efda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d903      	bls.n	800efec <pvPortMalloc+0xa4>
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1f1      	bne.n	800efd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800efec:	4b38      	ldr	r3, [pc, #224]	; (800f0d0 <pvPortMalloc+0x188>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d050      	beq.n	800f098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2208      	movs	r2, #8
 800effc:	4413      	add	r3, r2
 800effe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	1ad2      	subs	r2, r2, r3
 800f010:	2308      	movs	r3, #8
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	429a      	cmp	r2, r3
 800f016:	d91f      	bls.n	800f058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4413      	add	r3, r2
 800f01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	f003 0307 	and.w	r3, r3, #7
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00a      	beq.n	800f040 <pvPortMalloc+0xf8>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	613b      	str	r3, [r7, #16]
}
 800f03c:	bf00      	nop
 800f03e:	e7fe      	b.n	800f03e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	1ad2      	subs	r2, r2, r3
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f052:	69b8      	ldr	r0, [r7, #24]
 800f054:	f000 f90c 	bl	800f270 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f058:	4b1f      	ldr	r3, [pc, #124]	; (800f0d8 <pvPortMalloc+0x190>)
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	1ad3      	subs	r3, r2, r3
 800f062:	4a1d      	ldr	r2, [pc, #116]	; (800f0d8 <pvPortMalloc+0x190>)
 800f064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f066:	4b1c      	ldr	r3, [pc, #112]	; (800f0d8 <pvPortMalloc+0x190>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	4b1d      	ldr	r3, [pc, #116]	; (800f0e0 <pvPortMalloc+0x198>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d203      	bcs.n	800f07a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f072:	4b19      	ldr	r3, [pc, #100]	; (800f0d8 <pvPortMalloc+0x190>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a1a      	ldr	r2, [pc, #104]	; (800f0e0 <pvPortMalloc+0x198>)
 800f078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07c:	685a      	ldr	r2, [r3, #4]
 800f07e:	4b15      	ldr	r3, [pc, #84]	; (800f0d4 <pvPortMalloc+0x18c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	431a      	orrs	r2, r3
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	2200      	movs	r2, #0
 800f08c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f08e:	4b15      	ldr	r3, [pc, #84]	; (800f0e4 <pvPortMalloc+0x19c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3301      	adds	r3, #1
 800f094:	4a13      	ldr	r2, [pc, #76]	; (800f0e4 <pvPortMalloc+0x19c>)
 800f096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f098:	f7fe fa5a 	bl	800d550 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d101      	bne.n	800f0a6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f0a2:	f7f6 ffaf 	bl	8006004 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	f003 0307 	and.w	r3, r3, #7
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00a      	beq.n	800f0c6 <pvPortMalloc+0x17e>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	60fb      	str	r3, [r7, #12]
}
 800f0c2:	bf00      	nop
 800f0c4:	e7fe      	b.n	800f0c4 <pvPortMalloc+0x17c>
	return pvReturn;
 800f0c6:	69fb      	ldr	r3, [r7, #28]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3728      	adds	r7, #40	; 0x28
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	20009d6c 	.word	0x20009d6c
 800f0d4:	20009d80 	.word	0x20009d80
 800f0d8:	20009d70 	.word	0x20009d70
 800f0dc:	20009d64 	.word	0x20009d64
 800f0e0:	20009d74 	.word	0x20009d74
 800f0e4:	20009d78 	.word	0x20009d78

0800f0e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d04d      	beq.n	800f196 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f0fa:	2308      	movs	r3, #8
 800f0fc:	425b      	negs	r3, r3
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	4413      	add	r3, r2
 800f102:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	4b24      	ldr	r3, [pc, #144]	; (800f1a0 <vPortFree+0xb8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4013      	ands	r3, r2
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10a      	bne.n	800f12c <vPortFree+0x44>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	60fb      	str	r3, [r7, #12]
}
 800f128:	bf00      	nop
 800f12a:	e7fe      	b.n	800f12a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00a      	beq.n	800f14a <vPortFree+0x62>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	60bb      	str	r3, [r7, #8]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	685a      	ldr	r2, [r3, #4]
 800f14e:	4b14      	ldr	r3, [pc, #80]	; (800f1a0 <vPortFree+0xb8>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	4013      	ands	r3, r2
 800f154:	2b00      	cmp	r3, #0
 800f156:	d01e      	beq.n	800f196 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d11a      	bne.n	800f196 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	685a      	ldr	r2, [r3, #4]
 800f164:	4b0e      	ldr	r3, [pc, #56]	; (800f1a0 <vPortFree+0xb8>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	43db      	mvns	r3, r3
 800f16a:	401a      	ands	r2, r3
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f170:	f7fe f9e0 	bl	800d534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	685a      	ldr	r2, [r3, #4]
 800f178:	4b0a      	ldr	r3, [pc, #40]	; (800f1a4 <vPortFree+0xbc>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4413      	add	r3, r2
 800f17e:	4a09      	ldr	r2, [pc, #36]	; (800f1a4 <vPortFree+0xbc>)
 800f180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f182:	6938      	ldr	r0, [r7, #16]
 800f184:	f000 f874 	bl	800f270 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f188:	4b07      	ldr	r3, [pc, #28]	; (800f1a8 <vPortFree+0xc0>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	3301      	adds	r3, #1
 800f18e:	4a06      	ldr	r2, [pc, #24]	; (800f1a8 <vPortFree+0xc0>)
 800f190:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f192:	f7fe f9dd 	bl	800d550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f196:	bf00      	nop
 800f198:	3718      	adds	r7, #24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20009d80 	.word	0x20009d80
 800f1a4:	20009d70 	.word	0x20009d70
 800f1a8:	20009d7c 	.word	0x20009d7c

0800f1ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f1b8:	4b27      	ldr	r3, [pc, #156]	; (800f258 <prvHeapInit+0xac>)
 800f1ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f003 0307 	and.w	r3, r3, #7
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00c      	beq.n	800f1e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	3307      	adds	r3, #7
 800f1ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f023 0307 	bic.w	r3, r3, #7
 800f1d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	4a1f      	ldr	r2, [pc, #124]	; (800f258 <prvHeapInit+0xac>)
 800f1dc:	4413      	add	r3, r2
 800f1de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f1e4:	4a1d      	ldr	r2, [pc, #116]	; (800f25c <prvHeapInit+0xb0>)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f1ea:	4b1c      	ldr	r3, [pc, #112]	; (800f25c <prvHeapInit+0xb0>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f1f8:	2208      	movs	r2, #8
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	1a9b      	subs	r3, r3, r2
 800f1fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 0307 	bic.w	r3, r3, #7
 800f206:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4a15      	ldr	r2, [pc, #84]	; (800f260 <prvHeapInit+0xb4>)
 800f20c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f20e:	4b14      	ldr	r3, [pc, #80]	; (800f260 <prvHeapInit+0xb4>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2200      	movs	r2, #0
 800f214:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f216:	4b12      	ldr	r3, [pc, #72]	; (800f260 <prvHeapInit+0xb4>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2200      	movs	r2, #0
 800f21c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	1ad2      	subs	r2, r2, r3
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f22c:	4b0c      	ldr	r3, [pc, #48]	; (800f260 <prvHeapInit+0xb4>)
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	4a0a      	ldr	r2, [pc, #40]	; (800f264 <prvHeapInit+0xb8>)
 800f23a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	4a09      	ldr	r2, [pc, #36]	; (800f268 <prvHeapInit+0xbc>)
 800f242:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f244:	4b09      	ldr	r3, [pc, #36]	; (800f26c <prvHeapInit+0xc0>)
 800f246:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f24a:	601a      	str	r2, [r3, #0]
}
 800f24c:	bf00      	nop
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	20001d64 	.word	0x20001d64
 800f25c:	20009d64 	.word	0x20009d64
 800f260:	20009d6c 	.word	0x20009d6c
 800f264:	20009d74 	.word	0x20009d74
 800f268:	20009d70 	.word	0x20009d70
 800f26c:	20009d80 	.word	0x20009d80

0800f270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f270:	b480      	push	{r7}
 800f272:	b085      	sub	sp, #20
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f278:	4b28      	ldr	r3, [pc, #160]	; (800f31c <prvInsertBlockIntoFreeList+0xac>)
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	e002      	b.n	800f284 <prvInsertBlockIntoFreeList+0x14>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d8f7      	bhi.n	800f27e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	4413      	add	r3, r2
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d108      	bne.n	800f2b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	685a      	ldr	r2, [r3, #4]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	441a      	add	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	685b      	ldr	r3, [r3, #4]
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	441a      	add	r2, r3
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d118      	bne.n	800f2f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	4b15      	ldr	r3, [pc, #84]	; (800f320 <prvInsertBlockIntoFreeList+0xb0>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d00d      	beq.n	800f2ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	441a      	add	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	601a      	str	r2, [r3, #0]
 800f2ec:	e008      	b.n	800f300 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f2ee:	4b0c      	ldr	r3, [pc, #48]	; (800f320 <prvInsertBlockIntoFreeList+0xb0>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	e003      	b.n	800f300 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f300:	68fa      	ldr	r2, [r7, #12]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	d002      	beq.n	800f30e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f30e:	bf00      	nop
 800f310:	3714      	adds	r7, #20
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	20009d64 	.word	0x20009d64
 800f320:	20009d6c 	.word	0x20009d6c

0800f324 <__cxa_guard_acquire>:
 800f324:	6803      	ldr	r3, [r0, #0]
 800f326:	07db      	lsls	r3, r3, #31
 800f328:	d406      	bmi.n	800f338 <__cxa_guard_acquire+0x14>
 800f32a:	7843      	ldrb	r3, [r0, #1]
 800f32c:	b103      	cbz	r3, 800f330 <__cxa_guard_acquire+0xc>
 800f32e:	deff      	udf	#255	; 0xff
 800f330:	2301      	movs	r3, #1
 800f332:	7043      	strb	r3, [r0, #1]
 800f334:	4618      	mov	r0, r3
 800f336:	4770      	bx	lr
 800f338:	2000      	movs	r0, #0
 800f33a:	4770      	bx	lr

0800f33c <__cxa_guard_release>:
 800f33c:	2301      	movs	r3, #1
 800f33e:	6003      	str	r3, [r0, #0]
 800f340:	4770      	bx	lr

0800f342 <_ZSt25__throw_bad_function_callv>:
 800f342:	b508      	push	{r3, lr}
 800f344:	f000 f824 	bl	800f390 <abort>

0800f348 <roundf>:
 800f348:	ee10 0a10 	vmov	r0, s0
 800f34c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f350:	3a7f      	subs	r2, #127	; 0x7f
 800f352:	2a16      	cmp	r2, #22
 800f354:	dc15      	bgt.n	800f382 <roundf+0x3a>
 800f356:	2a00      	cmp	r2, #0
 800f358:	da08      	bge.n	800f36c <roundf+0x24>
 800f35a:	3201      	adds	r2, #1
 800f35c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800f360:	d101      	bne.n	800f366 <roundf+0x1e>
 800f362:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800f366:	ee00 3a10 	vmov	s0, r3
 800f36a:	4770      	bx	lr
 800f36c:	4907      	ldr	r1, [pc, #28]	; (800f38c <roundf+0x44>)
 800f36e:	4111      	asrs	r1, r2
 800f370:	4208      	tst	r0, r1
 800f372:	d0fa      	beq.n	800f36a <roundf+0x22>
 800f374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f378:	4113      	asrs	r3, r2
 800f37a:	4403      	add	r3, r0
 800f37c:	ea23 0301 	bic.w	r3, r3, r1
 800f380:	e7f1      	b.n	800f366 <roundf+0x1e>
 800f382:	2a80      	cmp	r2, #128	; 0x80
 800f384:	d1f1      	bne.n	800f36a <roundf+0x22>
 800f386:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f38a:	4770      	bx	lr
 800f38c:	007fffff 	.word	0x007fffff

0800f390 <abort>:
 800f390:	b508      	push	{r3, lr}
 800f392:	2006      	movs	r0, #6
 800f394:	f000 fb5c 	bl	800fa50 <raise>
 800f398:	2001      	movs	r0, #1
 800f39a:	f7f7 fa55 	bl	8006848 <_exit>

0800f39e <atexit>:
 800f39e:	2300      	movs	r3, #0
 800f3a0:	4601      	mov	r1, r0
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f000 bc85 	b.w	800fcb4 <__register_exitproc>
	...

0800f3ac <__errno>:
 800f3ac:	4b01      	ldr	r3, [pc, #4]	; (800f3b4 <__errno+0x8>)
 800f3ae:	6818      	ldr	r0, [r3, #0]
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	20000020 	.word	0x20000020

0800f3b8 <std>:
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	b510      	push	{r4, lr}
 800f3bc:	4604      	mov	r4, r0
 800f3be:	e9c0 3300 	strd	r3, r3, [r0]
 800f3c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3c6:	6083      	str	r3, [r0, #8]
 800f3c8:	8181      	strh	r1, [r0, #12]
 800f3ca:	6643      	str	r3, [r0, #100]	; 0x64
 800f3cc:	81c2      	strh	r2, [r0, #14]
 800f3ce:	6183      	str	r3, [r0, #24]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	2208      	movs	r2, #8
 800f3d4:	305c      	adds	r0, #92	; 0x5c
 800f3d6:	f000 f923 	bl	800f620 <memset>
 800f3da:	4b05      	ldr	r3, [pc, #20]	; (800f3f0 <std+0x38>)
 800f3dc:	6263      	str	r3, [r4, #36]	; 0x24
 800f3de:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <std+0x3c>)
 800f3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3e2:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <std+0x40>)
 800f3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3e6:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <std+0x44>)
 800f3e8:	6224      	str	r4, [r4, #32]
 800f3ea:	6323      	str	r3, [r4, #48]	; 0x30
 800f3ec:	bd10      	pop	{r4, pc}
 800f3ee:	bf00      	nop
 800f3f0:	0800fa89 	.word	0x0800fa89
 800f3f4:	0800faab 	.word	0x0800faab
 800f3f8:	0800fae3 	.word	0x0800fae3
 800f3fc:	0800fb07 	.word	0x0800fb07

0800f400 <_cleanup_r>:
 800f400:	4901      	ldr	r1, [pc, #4]	; (800f408 <_cleanup_r+0x8>)
 800f402:	f000 b8af 	b.w	800f564 <_fwalk_reent>
 800f406:	bf00      	nop
 800f408:	0800fea5 	.word	0x0800fea5

0800f40c <__sfmoreglue>:
 800f40c:	b570      	push	{r4, r5, r6, lr}
 800f40e:	2268      	movs	r2, #104	; 0x68
 800f410:	1e4d      	subs	r5, r1, #1
 800f412:	4355      	muls	r5, r2
 800f414:	460e      	mov	r6, r1
 800f416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f41a:	f000 f975 	bl	800f708 <_malloc_r>
 800f41e:	4604      	mov	r4, r0
 800f420:	b140      	cbz	r0, 800f434 <__sfmoreglue+0x28>
 800f422:	2100      	movs	r1, #0
 800f424:	e9c0 1600 	strd	r1, r6, [r0]
 800f428:	300c      	adds	r0, #12
 800f42a:	60a0      	str	r0, [r4, #8]
 800f42c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f430:	f000 f8f6 	bl	800f620 <memset>
 800f434:	4620      	mov	r0, r4
 800f436:	bd70      	pop	{r4, r5, r6, pc}

0800f438 <__sfp_lock_acquire>:
 800f438:	4801      	ldr	r0, [pc, #4]	; (800f440 <__sfp_lock_acquire+0x8>)
 800f43a:	f000 b8d8 	b.w	800f5ee <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	20009d86 	.word	0x20009d86

0800f444 <__sfp_lock_release>:
 800f444:	4801      	ldr	r0, [pc, #4]	; (800f44c <__sfp_lock_release+0x8>)
 800f446:	f000 b8d4 	b.w	800f5f2 <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	20009d86 	.word	0x20009d86

0800f450 <__sinit_lock_acquire>:
 800f450:	4801      	ldr	r0, [pc, #4]	; (800f458 <__sinit_lock_acquire+0x8>)
 800f452:	f000 b8cc 	b.w	800f5ee <__retarget_lock_acquire_recursive>
 800f456:	bf00      	nop
 800f458:	20009d87 	.word	0x20009d87

0800f45c <__sinit_lock_release>:
 800f45c:	4801      	ldr	r0, [pc, #4]	; (800f464 <__sinit_lock_release+0x8>)
 800f45e:	f000 b8c8 	b.w	800f5f2 <__retarget_lock_release_recursive>
 800f462:	bf00      	nop
 800f464:	20009d87 	.word	0x20009d87

0800f468 <__sinit>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	4604      	mov	r4, r0
 800f46c:	f7ff fff0 	bl	800f450 <__sinit_lock_acquire>
 800f470:	69a3      	ldr	r3, [r4, #24]
 800f472:	b11b      	cbz	r3, 800f47c <__sinit+0x14>
 800f474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f478:	f7ff bff0 	b.w	800f45c <__sinit_lock_release>
 800f47c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f480:	6523      	str	r3, [r4, #80]	; 0x50
 800f482:	4b13      	ldr	r3, [pc, #76]	; (800f4d0 <__sinit+0x68>)
 800f484:	4a13      	ldr	r2, [pc, #76]	; (800f4d4 <__sinit+0x6c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	62a2      	str	r2, [r4, #40]	; 0x28
 800f48a:	42a3      	cmp	r3, r4
 800f48c:	bf04      	itt	eq
 800f48e:	2301      	moveq	r3, #1
 800f490:	61a3      	streq	r3, [r4, #24]
 800f492:	4620      	mov	r0, r4
 800f494:	f000 f820 	bl	800f4d8 <__sfp>
 800f498:	6060      	str	r0, [r4, #4]
 800f49a:	4620      	mov	r0, r4
 800f49c:	f000 f81c 	bl	800f4d8 <__sfp>
 800f4a0:	60a0      	str	r0, [r4, #8]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f000 f818 	bl	800f4d8 <__sfp>
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	60e0      	str	r0, [r4, #12]
 800f4ac:	2104      	movs	r1, #4
 800f4ae:	6860      	ldr	r0, [r4, #4]
 800f4b0:	f7ff ff82 	bl	800f3b8 <std>
 800f4b4:	68a0      	ldr	r0, [r4, #8]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	2109      	movs	r1, #9
 800f4ba:	f7ff ff7d 	bl	800f3b8 <std>
 800f4be:	68e0      	ldr	r0, [r4, #12]
 800f4c0:	2202      	movs	r2, #2
 800f4c2:	2112      	movs	r1, #18
 800f4c4:	f7ff ff78 	bl	800f3b8 <std>
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	61a3      	str	r3, [r4, #24]
 800f4cc:	e7d2      	b.n	800f474 <__sinit+0xc>
 800f4ce:	bf00      	nop
 800f4d0:	08010adc 	.word	0x08010adc
 800f4d4:	0800f401 	.word	0x0800f401

0800f4d8 <__sfp>:
 800f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4da:	4607      	mov	r7, r0
 800f4dc:	f7ff ffac 	bl	800f438 <__sfp_lock_acquire>
 800f4e0:	4b1e      	ldr	r3, [pc, #120]	; (800f55c <__sfp+0x84>)
 800f4e2:	681e      	ldr	r6, [r3, #0]
 800f4e4:	69b3      	ldr	r3, [r6, #24]
 800f4e6:	b913      	cbnz	r3, 800f4ee <__sfp+0x16>
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	f7ff ffbd 	bl	800f468 <__sinit>
 800f4ee:	3648      	adds	r6, #72	; 0x48
 800f4f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	d503      	bpl.n	800f500 <__sfp+0x28>
 800f4f8:	6833      	ldr	r3, [r6, #0]
 800f4fa:	b30b      	cbz	r3, 800f540 <__sfp+0x68>
 800f4fc:	6836      	ldr	r6, [r6, #0]
 800f4fe:	e7f7      	b.n	800f4f0 <__sfp+0x18>
 800f500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f504:	b9d5      	cbnz	r5, 800f53c <__sfp+0x64>
 800f506:	4b16      	ldr	r3, [pc, #88]	; (800f560 <__sfp+0x88>)
 800f508:	60e3      	str	r3, [r4, #12]
 800f50a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f50e:	6665      	str	r5, [r4, #100]	; 0x64
 800f510:	f000 f86c 	bl	800f5ec <__retarget_lock_init_recursive>
 800f514:	f7ff ff96 	bl	800f444 <__sfp_lock_release>
 800f518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f51c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f520:	6025      	str	r5, [r4, #0]
 800f522:	61a5      	str	r5, [r4, #24]
 800f524:	2208      	movs	r2, #8
 800f526:	4629      	mov	r1, r5
 800f528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f52c:	f000 f878 	bl	800f620 <memset>
 800f530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f538:	4620      	mov	r0, r4
 800f53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f53c:	3468      	adds	r4, #104	; 0x68
 800f53e:	e7d9      	b.n	800f4f4 <__sfp+0x1c>
 800f540:	2104      	movs	r1, #4
 800f542:	4638      	mov	r0, r7
 800f544:	f7ff ff62 	bl	800f40c <__sfmoreglue>
 800f548:	4604      	mov	r4, r0
 800f54a:	6030      	str	r0, [r6, #0]
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d1d5      	bne.n	800f4fc <__sfp+0x24>
 800f550:	f7ff ff78 	bl	800f444 <__sfp_lock_release>
 800f554:	230c      	movs	r3, #12
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	e7ee      	b.n	800f538 <__sfp+0x60>
 800f55a:	bf00      	nop
 800f55c:	08010adc 	.word	0x08010adc
 800f560:	ffff0001 	.word	0xffff0001

0800f564 <_fwalk_reent>:
 800f564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f568:	4606      	mov	r6, r0
 800f56a:	4688      	mov	r8, r1
 800f56c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f570:	2700      	movs	r7, #0
 800f572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f576:	f1b9 0901 	subs.w	r9, r9, #1
 800f57a:	d505      	bpl.n	800f588 <_fwalk_reent+0x24>
 800f57c:	6824      	ldr	r4, [r4, #0]
 800f57e:	2c00      	cmp	r4, #0
 800f580:	d1f7      	bne.n	800f572 <_fwalk_reent+0xe>
 800f582:	4638      	mov	r0, r7
 800f584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f588:	89ab      	ldrh	r3, [r5, #12]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d907      	bls.n	800f59e <_fwalk_reent+0x3a>
 800f58e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f592:	3301      	adds	r3, #1
 800f594:	d003      	beq.n	800f59e <_fwalk_reent+0x3a>
 800f596:	4629      	mov	r1, r5
 800f598:	4630      	mov	r0, r6
 800f59a:	47c0      	blx	r8
 800f59c:	4307      	orrs	r7, r0
 800f59e:	3568      	adds	r5, #104	; 0x68
 800f5a0:	e7e9      	b.n	800f576 <_fwalk_reent+0x12>
	...

0800f5a4 <__libc_init_array>:
 800f5a4:	b570      	push	{r4, r5, r6, lr}
 800f5a6:	4d0d      	ldr	r5, [pc, #52]	; (800f5dc <__libc_init_array+0x38>)
 800f5a8:	4c0d      	ldr	r4, [pc, #52]	; (800f5e0 <__libc_init_array+0x3c>)
 800f5aa:	1b64      	subs	r4, r4, r5
 800f5ac:	10a4      	asrs	r4, r4, #2
 800f5ae:	2600      	movs	r6, #0
 800f5b0:	42a6      	cmp	r6, r4
 800f5b2:	d109      	bne.n	800f5c8 <__libc_init_array+0x24>
 800f5b4:	4d0b      	ldr	r5, [pc, #44]	; (800f5e4 <__libc_init_array+0x40>)
 800f5b6:	4c0c      	ldr	r4, [pc, #48]	; (800f5e8 <__libc_init_array+0x44>)
 800f5b8:	f001 f856 	bl	8010668 <_init>
 800f5bc:	1b64      	subs	r4, r4, r5
 800f5be:	10a4      	asrs	r4, r4, #2
 800f5c0:	2600      	movs	r6, #0
 800f5c2:	42a6      	cmp	r6, r4
 800f5c4:	d105      	bne.n	800f5d2 <__libc_init_array+0x2e>
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
 800f5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5cc:	4798      	blx	r3
 800f5ce:	3601      	adds	r6, #1
 800f5d0:	e7ee      	b.n	800f5b0 <__libc_init_array+0xc>
 800f5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5d6:	4798      	blx	r3
 800f5d8:	3601      	adds	r6, #1
 800f5da:	e7f2      	b.n	800f5c2 <__libc_init_array+0x1e>
 800f5dc:	08010b1c 	.word	0x08010b1c
 800f5e0:	08010b1c 	.word	0x08010b1c
 800f5e4:	08010b1c 	.word	0x08010b1c
 800f5e8:	08010b3c 	.word	0x08010b3c

0800f5ec <__retarget_lock_init_recursive>:
 800f5ec:	4770      	bx	lr

0800f5ee <__retarget_lock_acquire_recursive>:
 800f5ee:	4770      	bx	lr

0800f5f0 <__retarget_lock_release>:
 800f5f0:	4770      	bx	lr

0800f5f2 <__retarget_lock_release_recursive>:
 800f5f2:	4770      	bx	lr

0800f5f4 <malloc>:
 800f5f4:	4b02      	ldr	r3, [pc, #8]	; (800f600 <malloc+0xc>)
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	f000 b885 	b.w	800f708 <_malloc_r>
 800f5fe:	bf00      	nop
 800f600:	20000020 	.word	0x20000020

0800f604 <memcpy>:
 800f604:	440a      	add	r2, r1
 800f606:	4291      	cmp	r1, r2
 800f608:	f100 33ff 	add.w	r3, r0, #4294967295
 800f60c:	d100      	bne.n	800f610 <memcpy+0xc>
 800f60e:	4770      	bx	lr
 800f610:	b510      	push	{r4, lr}
 800f612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f61a:	4291      	cmp	r1, r2
 800f61c:	d1f9      	bne.n	800f612 <memcpy+0xe>
 800f61e:	bd10      	pop	{r4, pc}

0800f620 <memset>:
 800f620:	4402      	add	r2, r0
 800f622:	4603      	mov	r3, r0
 800f624:	4293      	cmp	r3, r2
 800f626:	d100      	bne.n	800f62a <memset+0xa>
 800f628:	4770      	bx	lr
 800f62a:	f803 1b01 	strb.w	r1, [r3], #1
 800f62e:	e7f9      	b.n	800f624 <memset+0x4>

0800f630 <_free_r>:
 800f630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f632:	2900      	cmp	r1, #0
 800f634:	d044      	beq.n	800f6c0 <_free_r+0x90>
 800f636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f63a:	9001      	str	r0, [sp, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f1a1 0404 	sub.w	r4, r1, #4
 800f642:	bfb8      	it	lt
 800f644:	18e4      	addlt	r4, r4, r3
 800f646:	f000 fce1 	bl	801000c <__malloc_lock>
 800f64a:	4a1e      	ldr	r2, [pc, #120]	; (800f6c4 <_free_r+0x94>)
 800f64c:	9801      	ldr	r0, [sp, #4]
 800f64e:	6813      	ldr	r3, [r2, #0]
 800f650:	b933      	cbnz	r3, 800f660 <_free_r+0x30>
 800f652:	6063      	str	r3, [r4, #4]
 800f654:	6014      	str	r4, [r2, #0]
 800f656:	b003      	add	sp, #12
 800f658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f65c:	f000 bcdc 	b.w	8010018 <__malloc_unlock>
 800f660:	42a3      	cmp	r3, r4
 800f662:	d908      	bls.n	800f676 <_free_r+0x46>
 800f664:	6825      	ldr	r5, [r4, #0]
 800f666:	1961      	adds	r1, r4, r5
 800f668:	428b      	cmp	r3, r1
 800f66a:	bf01      	itttt	eq
 800f66c:	6819      	ldreq	r1, [r3, #0]
 800f66e:	685b      	ldreq	r3, [r3, #4]
 800f670:	1949      	addeq	r1, r1, r5
 800f672:	6021      	streq	r1, [r4, #0]
 800f674:	e7ed      	b.n	800f652 <_free_r+0x22>
 800f676:	461a      	mov	r2, r3
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	b10b      	cbz	r3, 800f680 <_free_r+0x50>
 800f67c:	42a3      	cmp	r3, r4
 800f67e:	d9fa      	bls.n	800f676 <_free_r+0x46>
 800f680:	6811      	ldr	r1, [r2, #0]
 800f682:	1855      	adds	r5, r2, r1
 800f684:	42a5      	cmp	r5, r4
 800f686:	d10b      	bne.n	800f6a0 <_free_r+0x70>
 800f688:	6824      	ldr	r4, [r4, #0]
 800f68a:	4421      	add	r1, r4
 800f68c:	1854      	adds	r4, r2, r1
 800f68e:	42a3      	cmp	r3, r4
 800f690:	6011      	str	r1, [r2, #0]
 800f692:	d1e0      	bne.n	800f656 <_free_r+0x26>
 800f694:	681c      	ldr	r4, [r3, #0]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	6053      	str	r3, [r2, #4]
 800f69a:	4421      	add	r1, r4
 800f69c:	6011      	str	r1, [r2, #0]
 800f69e:	e7da      	b.n	800f656 <_free_r+0x26>
 800f6a0:	d902      	bls.n	800f6a8 <_free_r+0x78>
 800f6a2:	230c      	movs	r3, #12
 800f6a4:	6003      	str	r3, [r0, #0]
 800f6a6:	e7d6      	b.n	800f656 <_free_r+0x26>
 800f6a8:	6825      	ldr	r5, [r4, #0]
 800f6aa:	1961      	adds	r1, r4, r5
 800f6ac:	428b      	cmp	r3, r1
 800f6ae:	bf04      	itt	eq
 800f6b0:	6819      	ldreq	r1, [r3, #0]
 800f6b2:	685b      	ldreq	r3, [r3, #4]
 800f6b4:	6063      	str	r3, [r4, #4]
 800f6b6:	bf04      	itt	eq
 800f6b8:	1949      	addeq	r1, r1, r5
 800f6ba:	6021      	streq	r1, [r4, #0]
 800f6bc:	6054      	str	r4, [r2, #4]
 800f6be:	e7ca      	b.n	800f656 <_free_r+0x26>
 800f6c0:	b003      	add	sp, #12
 800f6c2:	bd30      	pop	{r4, r5, pc}
 800f6c4:	20009d88 	.word	0x20009d88

0800f6c8 <sbrk_aligned>:
 800f6c8:	b570      	push	{r4, r5, r6, lr}
 800f6ca:	4e0e      	ldr	r6, [pc, #56]	; (800f704 <sbrk_aligned+0x3c>)
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	6831      	ldr	r1, [r6, #0]
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	b911      	cbnz	r1, 800f6da <sbrk_aligned+0x12>
 800f6d4:	f000 f984 	bl	800f9e0 <_sbrk_r>
 800f6d8:	6030      	str	r0, [r6, #0]
 800f6da:	4621      	mov	r1, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f000 f97f 	bl	800f9e0 <_sbrk_r>
 800f6e2:	1c43      	adds	r3, r0, #1
 800f6e4:	d00a      	beq.n	800f6fc <sbrk_aligned+0x34>
 800f6e6:	1cc4      	adds	r4, r0, #3
 800f6e8:	f024 0403 	bic.w	r4, r4, #3
 800f6ec:	42a0      	cmp	r0, r4
 800f6ee:	d007      	beq.n	800f700 <sbrk_aligned+0x38>
 800f6f0:	1a21      	subs	r1, r4, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f000 f974 	bl	800f9e0 <_sbrk_r>
 800f6f8:	3001      	adds	r0, #1
 800f6fa:	d101      	bne.n	800f700 <sbrk_aligned+0x38>
 800f6fc:	f04f 34ff 	mov.w	r4, #4294967295
 800f700:	4620      	mov	r0, r4
 800f702:	bd70      	pop	{r4, r5, r6, pc}
 800f704:	20009d8c 	.word	0x20009d8c

0800f708 <_malloc_r>:
 800f708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70c:	1ccd      	adds	r5, r1, #3
 800f70e:	f025 0503 	bic.w	r5, r5, #3
 800f712:	3508      	adds	r5, #8
 800f714:	2d0c      	cmp	r5, #12
 800f716:	bf38      	it	cc
 800f718:	250c      	movcc	r5, #12
 800f71a:	2d00      	cmp	r5, #0
 800f71c:	4607      	mov	r7, r0
 800f71e:	db01      	blt.n	800f724 <_malloc_r+0x1c>
 800f720:	42a9      	cmp	r1, r5
 800f722:	d905      	bls.n	800f730 <_malloc_r+0x28>
 800f724:	230c      	movs	r3, #12
 800f726:	603b      	str	r3, [r7, #0]
 800f728:	2600      	movs	r6, #0
 800f72a:	4630      	mov	r0, r6
 800f72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f730:	4e2e      	ldr	r6, [pc, #184]	; (800f7ec <_malloc_r+0xe4>)
 800f732:	f000 fc6b 	bl	801000c <__malloc_lock>
 800f736:	6833      	ldr	r3, [r6, #0]
 800f738:	461c      	mov	r4, r3
 800f73a:	bb34      	cbnz	r4, 800f78a <_malloc_r+0x82>
 800f73c:	4629      	mov	r1, r5
 800f73e:	4638      	mov	r0, r7
 800f740:	f7ff ffc2 	bl	800f6c8 <sbrk_aligned>
 800f744:	1c43      	adds	r3, r0, #1
 800f746:	4604      	mov	r4, r0
 800f748:	d14d      	bne.n	800f7e6 <_malloc_r+0xde>
 800f74a:	6834      	ldr	r4, [r6, #0]
 800f74c:	4626      	mov	r6, r4
 800f74e:	2e00      	cmp	r6, #0
 800f750:	d140      	bne.n	800f7d4 <_malloc_r+0xcc>
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	4631      	mov	r1, r6
 800f756:	4638      	mov	r0, r7
 800f758:	eb04 0803 	add.w	r8, r4, r3
 800f75c:	f000 f940 	bl	800f9e0 <_sbrk_r>
 800f760:	4580      	cmp	r8, r0
 800f762:	d13a      	bne.n	800f7da <_malloc_r+0xd2>
 800f764:	6821      	ldr	r1, [r4, #0]
 800f766:	3503      	adds	r5, #3
 800f768:	1a6d      	subs	r5, r5, r1
 800f76a:	f025 0503 	bic.w	r5, r5, #3
 800f76e:	3508      	adds	r5, #8
 800f770:	2d0c      	cmp	r5, #12
 800f772:	bf38      	it	cc
 800f774:	250c      	movcc	r5, #12
 800f776:	4629      	mov	r1, r5
 800f778:	4638      	mov	r0, r7
 800f77a:	f7ff ffa5 	bl	800f6c8 <sbrk_aligned>
 800f77e:	3001      	adds	r0, #1
 800f780:	d02b      	beq.n	800f7da <_malloc_r+0xd2>
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	442b      	add	r3, r5
 800f786:	6023      	str	r3, [r4, #0]
 800f788:	e00e      	b.n	800f7a8 <_malloc_r+0xa0>
 800f78a:	6822      	ldr	r2, [r4, #0]
 800f78c:	1b52      	subs	r2, r2, r5
 800f78e:	d41e      	bmi.n	800f7ce <_malloc_r+0xc6>
 800f790:	2a0b      	cmp	r2, #11
 800f792:	d916      	bls.n	800f7c2 <_malloc_r+0xba>
 800f794:	1961      	adds	r1, r4, r5
 800f796:	42a3      	cmp	r3, r4
 800f798:	6025      	str	r5, [r4, #0]
 800f79a:	bf18      	it	ne
 800f79c:	6059      	strne	r1, [r3, #4]
 800f79e:	6863      	ldr	r3, [r4, #4]
 800f7a0:	bf08      	it	eq
 800f7a2:	6031      	streq	r1, [r6, #0]
 800f7a4:	5162      	str	r2, [r4, r5]
 800f7a6:	604b      	str	r3, [r1, #4]
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	f104 060b 	add.w	r6, r4, #11
 800f7ae:	f000 fc33 	bl	8010018 <__malloc_unlock>
 800f7b2:	f026 0607 	bic.w	r6, r6, #7
 800f7b6:	1d23      	adds	r3, r4, #4
 800f7b8:	1af2      	subs	r2, r6, r3
 800f7ba:	d0b6      	beq.n	800f72a <_malloc_r+0x22>
 800f7bc:	1b9b      	subs	r3, r3, r6
 800f7be:	50a3      	str	r3, [r4, r2]
 800f7c0:	e7b3      	b.n	800f72a <_malloc_r+0x22>
 800f7c2:	6862      	ldr	r2, [r4, #4]
 800f7c4:	42a3      	cmp	r3, r4
 800f7c6:	bf0c      	ite	eq
 800f7c8:	6032      	streq	r2, [r6, #0]
 800f7ca:	605a      	strne	r2, [r3, #4]
 800f7cc:	e7ec      	b.n	800f7a8 <_malloc_r+0xa0>
 800f7ce:	4623      	mov	r3, r4
 800f7d0:	6864      	ldr	r4, [r4, #4]
 800f7d2:	e7b2      	b.n	800f73a <_malloc_r+0x32>
 800f7d4:	4634      	mov	r4, r6
 800f7d6:	6876      	ldr	r6, [r6, #4]
 800f7d8:	e7b9      	b.n	800f74e <_malloc_r+0x46>
 800f7da:	230c      	movs	r3, #12
 800f7dc:	603b      	str	r3, [r7, #0]
 800f7de:	4638      	mov	r0, r7
 800f7e0:	f000 fc1a 	bl	8010018 <__malloc_unlock>
 800f7e4:	e7a1      	b.n	800f72a <_malloc_r+0x22>
 800f7e6:	6025      	str	r5, [r4, #0]
 800f7e8:	e7de      	b.n	800f7a8 <_malloc_r+0xa0>
 800f7ea:	bf00      	nop
 800f7ec:	20009d88 	.word	0x20009d88

0800f7f0 <iprintf>:
 800f7f0:	b40f      	push	{r0, r1, r2, r3}
 800f7f2:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <iprintf+0x2c>)
 800f7f4:	b513      	push	{r0, r1, r4, lr}
 800f7f6:	681c      	ldr	r4, [r3, #0]
 800f7f8:	b124      	cbz	r4, 800f804 <iprintf+0x14>
 800f7fa:	69a3      	ldr	r3, [r4, #24]
 800f7fc:	b913      	cbnz	r3, 800f804 <iprintf+0x14>
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7ff fe32 	bl	800f468 <__sinit>
 800f804:	ab05      	add	r3, sp, #20
 800f806:	9a04      	ldr	r2, [sp, #16]
 800f808:	68a1      	ldr	r1, [r4, #8]
 800f80a:	9301      	str	r3, [sp, #4]
 800f80c:	4620      	mov	r0, r4
 800f80e:	f000 fc33 	bl	8010078 <_vfiprintf_r>
 800f812:	b002      	add	sp, #8
 800f814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f818:	b004      	add	sp, #16
 800f81a:	4770      	bx	lr
 800f81c:	20000020 	.word	0x20000020

0800f820 <_puts_r>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	460e      	mov	r6, r1
 800f824:	4605      	mov	r5, r0
 800f826:	b118      	cbz	r0, 800f830 <_puts_r+0x10>
 800f828:	6983      	ldr	r3, [r0, #24]
 800f82a:	b90b      	cbnz	r3, 800f830 <_puts_r+0x10>
 800f82c:	f7ff fe1c 	bl	800f468 <__sinit>
 800f830:	69ab      	ldr	r3, [r5, #24]
 800f832:	68ac      	ldr	r4, [r5, #8]
 800f834:	b913      	cbnz	r3, 800f83c <_puts_r+0x1c>
 800f836:	4628      	mov	r0, r5
 800f838:	f7ff fe16 	bl	800f468 <__sinit>
 800f83c:	4b2c      	ldr	r3, [pc, #176]	; (800f8f0 <_puts_r+0xd0>)
 800f83e:	429c      	cmp	r4, r3
 800f840:	d120      	bne.n	800f884 <_puts_r+0x64>
 800f842:	686c      	ldr	r4, [r5, #4]
 800f844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f846:	07db      	lsls	r3, r3, #31
 800f848:	d405      	bmi.n	800f856 <_puts_r+0x36>
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	0598      	lsls	r0, r3, #22
 800f84e:	d402      	bmi.n	800f856 <_puts_r+0x36>
 800f850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f852:	f7ff fecc 	bl	800f5ee <__retarget_lock_acquire_recursive>
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	0719      	lsls	r1, r3, #28
 800f85a:	d51d      	bpl.n	800f898 <_puts_r+0x78>
 800f85c:	6923      	ldr	r3, [r4, #16]
 800f85e:	b1db      	cbz	r3, 800f898 <_puts_r+0x78>
 800f860:	3e01      	subs	r6, #1
 800f862:	68a3      	ldr	r3, [r4, #8]
 800f864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f868:	3b01      	subs	r3, #1
 800f86a:	60a3      	str	r3, [r4, #8]
 800f86c:	bb39      	cbnz	r1, 800f8be <_puts_r+0x9e>
 800f86e:	2b00      	cmp	r3, #0
 800f870:	da38      	bge.n	800f8e4 <_puts_r+0xc4>
 800f872:	4622      	mov	r2, r4
 800f874:	210a      	movs	r1, #10
 800f876:	4628      	mov	r0, r5
 800f878:	f000 f94a 	bl	800fb10 <__swbuf_r>
 800f87c:	3001      	adds	r0, #1
 800f87e:	d011      	beq.n	800f8a4 <_puts_r+0x84>
 800f880:	250a      	movs	r5, #10
 800f882:	e011      	b.n	800f8a8 <_puts_r+0x88>
 800f884:	4b1b      	ldr	r3, [pc, #108]	; (800f8f4 <_puts_r+0xd4>)
 800f886:	429c      	cmp	r4, r3
 800f888:	d101      	bne.n	800f88e <_puts_r+0x6e>
 800f88a:	68ac      	ldr	r4, [r5, #8]
 800f88c:	e7da      	b.n	800f844 <_puts_r+0x24>
 800f88e:	4b1a      	ldr	r3, [pc, #104]	; (800f8f8 <_puts_r+0xd8>)
 800f890:	429c      	cmp	r4, r3
 800f892:	bf08      	it	eq
 800f894:	68ec      	ldreq	r4, [r5, #12]
 800f896:	e7d5      	b.n	800f844 <_puts_r+0x24>
 800f898:	4621      	mov	r1, r4
 800f89a:	4628      	mov	r0, r5
 800f89c:	f000 f99c 	bl	800fbd8 <__swsetup_r>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0dd      	beq.n	800f860 <_puts_r+0x40>
 800f8a4:	f04f 35ff 	mov.w	r5, #4294967295
 800f8a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8aa:	07da      	lsls	r2, r3, #31
 800f8ac:	d405      	bmi.n	800f8ba <_puts_r+0x9a>
 800f8ae:	89a3      	ldrh	r3, [r4, #12]
 800f8b0:	059b      	lsls	r3, r3, #22
 800f8b2:	d402      	bmi.n	800f8ba <_puts_r+0x9a>
 800f8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8b6:	f7ff fe9c 	bl	800f5f2 <__retarget_lock_release_recursive>
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	da04      	bge.n	800f8cc <_puts_r+0xac>
 800f8c2:	69a2      	ldr	r2, [r4, #24]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	dc06      	bgt.n	800f8d6 <_puts_r+0xb6>
 800f8c8:	290a      	cmp	r1, #10
 800f8ca:	d004      	beq.n	800f8d6 <_puts_r+0xb6>
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	6022      	str	r2, [r4, #0]
 800f8d2:	7019      	strb	r1, [r3, #0]
 800f8d4:	e7c5      	b.n	800f862 <_puts_r+0x42>
 800f8d6:	4622      	mov	r2, r4
 800f8d8:	4628      	mov	r0, r5
 800f8da:	f000 f919 	bl	800fb10 <__swbuf_r>
 800f8de:	3001      	adds	r0, #1
 800f8e0:	d1bf      	bne.n	800f862 <_puts_r+0x42>
 800f8e2:	e7df      	b.n	800f8a4 <_puts_r+0x84>
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	250a      	movs	r5, #10
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	6022      	str	r2, [r4, #0]
 800f8ec:	701d      	strb	r5, [r3, #0]
 800f8ee:	e7db      	b.n	800f8a8 <_puts_r+0x88>
 800f8f0:	08010a9c 	.word	0x08010a9c
 800f8f4:	08010abc 	.word	0x08010abc
 800f8f8:	08010a7c 	.word	0x08010a7c

0800f8fc <puts>:
 800f8fc:	4b02      	ldr	r3, [pc, #8]	; (800f908 <puts+0xc>)
 800f8fe:	4601      	mov	r1, r0
 800f900:	6818      	ldr	r0, [r3, #0]
 800f902:	f7ff bf8d 	b.w	800f820 <_puts_r>
 800f906:	bf00      	nop
 800f908:	20000020 	.word	0x20000020

0800f90c <cleanup_glue>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	460c      	mov	r4, r1
 800f910:	6809      	ldr	r1, [r1, #0]
 800f912:	4605      	mov	r5, r0
 800f914:	b109      	cbz	r1, 800f91a <cleanup_glue+0xe>
 800f916:	f7ff fff9 	bl	800f90c <cleanup_glue>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4628      	mov	r0, r5
 800f91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f922:	f7ff be85 	b.w	800f630 <_free_r>
	...

0800f928 <_reclaim_reent>:
 800f928:	4b2c      	ldr	r3, [pc, #176]	; (800f9dc <_reclaim_reent+0xb4>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4283      	cmp	r3, r0
 800f92e:	b570      	push	{r4, r5, r6, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	d051      	beq.n	800f9d8 <_reclaim_reent+0xb0>
 800f934:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f936:	b143      	cbz	r3, 800f94a <_reclaim_reent+0x22>
 800f938:	68db      	ldr	r3, [r3, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d14a      	bne.n	800f9d4 <_reclaim_reent+0xac>
 800f93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f940:	6819      	ldr	r1, [r3, #0]
 800f942:	b111      	cbz	r1, 800f94a <_reclaim_reent+0x22>
 800f944:	4620      	mov	r0, r4
 800f946:	f7ff fe73 	bl	800f630 <_free_r>
 800f94a:	6961      	ldr	r1, [r4, #20]
 800f94c:	b111      	cbz	r1, 800f954 <_reclaim_reent+0x2c>
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff fe6e 	bl	800f630 <_free_r>
 800f954:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f956:	b111      	cbz	r1, 800f95e <_reclaim_reent+0x36>
 800f958:	4620      	mov	r0, r4
 800f95a:	f7ff fe69 	bl	800f630 <_free_r>
 800f95e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f960:	b111      	cbz	r1, 800f968 <_reclaim_reent+0x40>
 800f962:	4620      	mov	r0, r4
 800f964:	f7ff fe64 	bl	800f630 <_free_r>
 800f968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f96a:	b111      	cbz	r1, 800f972 <_reclaim_reent+0x4a>
 800f96c:	4620      	mov	r0, r4
 800f96e:	f7ff fe5f 	bl	800f630 <_free_r>
 800f972:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f974:	b111      	cbz	r1, 800f97c <_reclaim_reent+0x54>
 800f976:	4620      	mov	r0, r4
 800f978:	f7ff fe5a 	bl	800f630 <_free_r>
 800f97c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f97e:	b111      	cbz	r1, 800f986 <_reclaim_reent+0x5e>
 800f980:	4620      	mov	r0, r4
 800f982:	f7ff fe55 	bl	800f630 <_free_r>
 800f986:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f988:	b111      	cbz	r1, 800f990 <_reclaim_reent+0x68>
 800f98a:	4620      	mov	r0, r4
 800f98c:	f7ff fe50 	bl	800f630 <_free_r>
 800f990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f992:	b111      	cbz	r1, 800f99a <_reclaim_reent+0x72>
 800f994:	4620      	mov	r0, r4
 800f996:	f7ff fe4b 	bl	800f630 <_free_r>
 800f99a:	69a3      	ldr	r3, [r4, #24]
 800f99c:	b1e3      	cbz	r3, 800f9d8 <_reclaim_reent+0xb0>
 800f99e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	4798      	blx	r3
 800f9a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f9a6:	b1b9      	cbz	r1, 800f9d8 <_reclaim_reent+0xb0>
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9ae:	f7ff bfad 	b.w	800f90c <cleanup_glue>
 800f9b2:	5949      	ldr	r1, [r1, r5]
 800f9b4:	b941      	cbnz	r1, 800f9c8 <_reclaim_reent+0xa0>
 800f9b6:	3504      	adds	r5, #4
 800f9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9ba:	2d80      	cmp	r5, #128	; 0x80
 800f9bc:	68d9      	ldr	r1, [r3, #12]
 800f9be:	d1f8      	bne.n	800f9b2 <_reclaim_reent+0x8a>
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7ff fe35 	bl	800f630 <_free_r>
 800f9c6:	e7ba      	b.n	800f93e <_reclaim_reent+0x16>
 800f9c8:	680e      	ldr	r6, [r1, #0]
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f7ff fe30 	bl	800f630 <_free_r>
 800f9d0:	4631      	mov	r1, r6
 800f9d2:	e7ef      	b.n	800f9b4 <_reclaim_reent+0x8c>
 800f9d4:	2500      	movs	r5, #0
 800f9d6:	e7ef      	b.n	800f9b8 <_reclaim_reent+0x90>
 800f9d8:	bd70      	pop	{r4, r5, r6, pc}
 800f9da:	bf00      	nop
 800f9dc:	20000020 	.word	0x20000020

0800f9e0 <_sbrk_r>:
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	4d06      	ldr	r5, [pc, #24]	; (800f9fc <_sbrk_r+0x1c>)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	4608      	mov	r0, r1
 800f9ea:	602b      	str	r3, [r5, #0]
 800f9ec:	f7f6 ffa4 	bl	8006938 <_sbrk>
 800f9f0:	1c43      	adds	r3, r0, #1
 800f9f2:	d102      	bne.n	800f9fa <_sbrk_r+0x1a>
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	b103      	cbz	r3, 800f9fa <_sbrk_r+0x1a>
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	bd38      	pop	{r3, r4, r5, pc}
 800f9fc:	20009d90 	.word	0x20009d90

0800fa00 <_raise_r>:
 800fa00:	291f      	cmp	r1, #31
 800fa02:	b538      	push	{r3, r4, r5, lr}
 800fa04:	4604      	mov	r4, r0
 800fa06:	460d      	mov	r5, r1
 800fa08:	d904      	bls.n	800fa14 <_raise_r+0x14>
 800fa0a:	2316      	movs	r3, #22
 800fa0c:	6003      	str	r3, [r0, #0]
 800fa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa16:	b112      	cbz	r2, 800fa1e <_raise_r+0x1e>
 800fa18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa1c:	b94b      	cbnz	r3, 800fa32 <_raise_r+0x32>
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 f830 	bl	800fa84 <_getpid_r>
 800fa24:	462a      	mov	r2, r5
 800fa26:	4601      	mov	r1, r0
 800fa28:	4620      	mov	r0, r4
 800fa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2e:	f000 b817 	b.w	800fa60 <_kill_r>
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d00a      	beq.n	800fa4c <_raise_r+0x4c>
 800fa36:	1c59      	adds	r1, r3, #1
 800fa38:	d103      	bne.n	800fa42 <_raise_r+0x42>
 800fa3a:	2316      	movs	r3, #22
 800fa3c:	6003      	str	r3, [r0, #0]
 800fa3e:	2001      	movs	r0, #1
 800fa40:	e7e7      	b.n	800fa12 <_raise_r+0x12>
 800fa42:	2400      	movs	r4, #0
 800fa44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa48:	4628      	mov	r0, r5
 800fa4a:	4798      	blx	r3
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	e7e0      	b.n	800fa12 <_raise_r+0x12>

0800fa50 <raise>:
 800fa50:	4b02      	ldr	r3, [pc, #8]	; (800fa5c <raise+0xc>)
 800fa52:	4601      	mov	r1, r0
 800fa54:	6818      	ldr	r0, [r3, #0]
 800fa56:	f7ff bfd3 	b.w	800fa00 <_raise_r>
 800fa5a:	bf00      	nop
 800fa5c:	20000020 	.word	0x20000020

0800fa60 <_kill_r>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4d07      	ldr	r5, [pc, #28]	; (800fa80 <_kill_r+0x20>)
 800fa64:	2300      	movs	r3, #0
 800fa66:	4604      	mov	r4, r0
 800fa68:	4608      	mov	r0, r1
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	f7f6 fedb 	bl	8006828 <_kill>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d102      	bne.n	800fa7c <_kill_r+0x1c>
 800fa76:	682b      	ldr	r3, [r5, #0]
 800fa78:	b103      	cbz	r3, 800fa7c <_kill_r+0x1c>
 800fa7a:	6023      	str	r3, [r4, #0]
 800fa7c:	bd38      	pop	{r3, r4, r5, pc}
 800fa7e:	bf00      	nop
 800fa80:	20009d90 	.word	0x20009d90

0800fa84 <_getpid_r>:
 800fa84:	f7f6 bec8 	b.w	8006818 <_getpid>

0800fa88 <__sread>:
 800fa88:	b510      	push	{r4, lr}
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa90:	f000 fdb6 	bl	8010600 <_read_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	bfab      	itete	ge
 800fa98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa9a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa9c:	181b      	addge	r3, r3, r0
 800fa9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faa2:	bfac      	ite	ge
 800faa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800faa6:	81a3      	strhlt	r3, [r4, #12]
 800faa8:	bd10      	pop	{r4, pc}

0800faaa <__swrite>:
 800faaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faae:	461f      	mov	r7, r3
 800fab0:	898b      	ldrh	r3, [r1, #12]
 800fab2:	05db      	lsls	r3, r3, #23
 800fab4:	4605      	mov	r5, r0
 800fab6:	460c      	mov	r4, r1
 800fab8:	4616      	mov	r6, r2
 800faba:	d505      	bpl.n	800fac8 <__swrite+0x1e>
 800fabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac0:	2302      	movs	r3, #2
 800fac2:	2200      	movs	r2, #0
 800fac4:	f000 fa2a 	bl	800ff1c <_lseek_r>
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800face:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fad2:	81a3      	strh	r3, [r4, #12]
 800fad4:	4632      	mov	r2, r6
 800fad6:	463b      	mov	r3, r7
 800fad8:	4628      	mov	r0, r5
 800fada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	f000 b869 	b.w	800fbb4 <_write_r>

0800fae2 <__sseek>:
 800fae2:	b510      	push	{r4, lr}
 800fae4:	460c      	mov	r4, r1
 800fae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faea:	f000 fa17 	bl	800ff1c <_lseek_r>
 800faee:	1c43      	adds	r3, r0, #1
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	bf15      	itete	ne
 800faf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800faf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fafa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fafe:	81a3      	strheq	r3, [r4, #12]
 800fb00:	bf18      	it	ne
 800fb02:	81a3      	strhne	r3, [r4, #12]
 800fb04:	bd10      	pop	{r4, pc}

0800fb06 <__sclose>:
 800fb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb0a:	f000 b935 	b.w	800fd78 <_close_r>
	...

0800fb10 <__swbuf_r>:
 800fb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb12:	460e      	mov	r6, r1
 800fb14:	4614      	mov	r4, r2
 800fb16:	4605      	mov	r5, r0
 800fb18:	b118      	cbz	r0, 800fb22 <__swbuf_r+0x12>
 800fb1a:	6983      	ldr	r3, [r0, #24]
 800fb1c:	b90b      	cbnz	r3, 800fb22 <__swbuf_r+0x12>
 800fb1e:	f7ff fca3 	bl	800f468 <__sinit>
 800fb22:	4b21      	ldr	r3, [pc, #132]	; (800fba8 <__swbuf_r+0x98>)
 800fb24:	429c      	cmp	r4, r3
 800fb26:	d12b      	bne.n	800fb80 <__swbuf_r+0x70>
 800fb28:	686c      	ldr	r4, [r5, #4]
 800fb2a:	69a3      	ldr	r3, [r4, #24]
 800fb2c:	60a3      	str	r3, [r4, #8]
 800fb2e:	89a3      	ldrh	r3, [r4, #12]
 800fb30:	071a      	lsls	r2, r3, #28
 800fb32:	d52f      	bpl.n	800fb94 <__swbuf_r+0x84>
 800fb34:	6923      	ldr	r3, [r4, #16]
 800fb36:	b36b      	cbz	r3, 800fb94 <__swbuf_r+0x84>
 800fb38:	6923      	ldr	r3, [r4, #16]
 800fb3a:	6820      	ldr	r0, [r4, #0]
 800fb3c:	1ac0      	subs	r0, r0, r3
 800fb3e:	6963      	ldr	r3, [r4, #20]
 800fb40:	b2f6      	uxtb	r6, r6
 800fb42:	4283      	cmp	r3, r0
 800fb44:	4637      	mov	r7, r6
 800fb46:	dc04      	bgt.n	800fb52 <__swbuf_r+0x42>
 800fb48:	4621      	mov	r1, r4
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f000 f9aa 	bl	800fea4 <_fflush_r>
 800fb50:	bb30      	cbnz	r0, 800fba0 <__swbuf_r+0x90>
 800fb52:	68a3      	ldr	r3, [r4, #8]
 800fb54:	3b01      	subs	r3, #1
 800fb56:	60a3      	str	r3, [r4, #8]
 800fb58:	6823      	ldr	r3, [r4, #0]
 800fb5a:	1c5a      	adds	r2, r3, #1
 800fb5c:	6022      	str	r2, [r4, #0]
 800fb5e:	701e      	strb	r6, [r3, #0]
 800fb60:	6963      	ldr	r3, [r4, #20]
 800fb62:	3001      	adds	r0, #1
 800fb64:	4283      	cmp	r3, r0
 800fb66:	d004      	beq.n	800fb72 <__swbuf_r+0x62>
 800fb68:	89a3      	ldrh	r3, [r4, #12]
 800fb6a:	07db      	lsls	r3, r3, #31
 800fb6c:	d506      	bpl.n	800fb7c <__swbuf_r+0x6c>
 800fb6e:	2e0a      	cmp	r6, #10
 800fb70:	d104      	bne.n	800fb7c <__swbuf_r+0x6c>
 800fb72:	4621      	mov	r1, r4
 800fb74:	4628      	mov	r0, r5
 800fb76:	f000 f995 	bl	800fea4 <_fflush_r>
 800fb7a:	b988      	cbnz	r0, 800fba0 <__swbuf_r+0x90>
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb80:	4b0a      	ldr	r3, [pc, #40]	; (800fbac <__swbuf_r+0x9c>)
 800fb82:	429c      	cmp	r4, r3
 800fb84:	d101      	bne.n	800fb8a <__swbuf_r+0x7a>
 800fb86:	68ac      	ldr	r4, [r5, #8]
 800fb88:	e7cf      	b.n	800fb2a <__swbuf_r+0x1a>
 800fb8a:	4b09      	ldr	r3, [pc, #36]	; (800fbb0 <__swbuf_r+0xa0>)
 800fb8c:	429c      	cmp	r4, r3
 800fb8e:	bf08      	it	eq
 800fb90:	68ec      	ldreq	r4, [r5, #12]
 800fb92:	e7ca      	b.n	800fb2a <__swbuf_r+0x1a>
 800fb94:	4621      	mov	r1, r4
 800fb96:	4628      	mov	r0, r5
 800fb98:	f000 f81e 	bl	800fbd8 <__swsetup_r>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d0cb      	beq.n	800fb38 <__swbuf_r+0x28>
 800fba0:	f04f 37ff 	mov.w	r7, #4294967295
 800fba4:	e7ea      	b.n	800fb7c <__swbuf_r+0x6c>
 800fba6:	bf00      	nop
 800fba8:	08010a9c 	.word	0x08010a9c
 800fbac:	08010abc 	.word	0x08010abc
 800fbb0:	08010a7c 	.word	0x08010a7c

0800fbb4 <_write_r>:
 800fbb4:	b538      	push	{r3, r4, r5, lr}
 800fbb6:	4d07      	ldr	r5, [pc, #28]	; (800fbd4 <_write_r+0x20>)
 800fbb8:	4604      	mov	r4, r0
 800fbba:	4608      	mov	r0, r1
 800fbbc:	4611      	mov	r1, r2
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	602a      	str	r2, [r5, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	f7f6 fe67 	bl	8006896 <_write>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	d102      	bne.n	800fbd2 <_write_r+0x1e>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	b103      	cbz	r3, 800fbd2 <_write_r+0x1e>
 800fbd0:	6023      	str	r3, [r4, #0]
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	20009d90 	.word	0x20009d90

0800fbd8 <__swsetup_r>:
 800fbd8:	4b32      	ldr	r3, [pc, #200]	; (800fca4 <__swsetup_r+0xcc>)
 800fbda:	b570      	push	{r4, r5, r6, lr}
 800fbdc:	681d      	ldr	r5, [r3, #0]
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	b125      	cbz	r5, 800fbee <__swsetup_r+0x16>
 800fbe4:	69ab      	ldr	r3, [r5, #24]
 800fbe6:	b913      	cbnz	r3, 800fbee <__swsetup_r+0x16>
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f7ff fc3d 	bl	800f468 <__sinit>
 800fbee:	4b2e      	ldr	r3, [pc, #184]	; (800fca8 <__swsetup_r+0xd0>)
 800fbf0:	429c      	cmp	r4, r3
 800fbf2:	d10f      	bne.n	800fc14 <__swsetup_r+0x3c>
 800fbf4:	686c      	ldr	r4, [r5, #4]
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbfc:	0719      	lsls	r1, r3, #28
 800fbfe:	d42c      	bmi.n	800fc5a <__swsetup_r+0x82>
 800fc00:	06dd      	lsls	r5, r3, #27
 800fc02:	d411      	bmi.n	800fc28 <__swsetup_r+0x50>
 800fc04:	2309      	movs	r3, #9
 800fc06:	6033      	str	r3, [r6, #0]
 800fc08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc12:	e03e      	b.n	800fc92 <__swsetup_r+0xba>
 800fc14:	4b25      	ldr	r3, [pc, #148]	; (800fcac <__swsetup_r+0xd4>)
 800fc16:	429c      	cmp	r4, r3
 800fc18:	d101      	bne.n	800fc1e <__swsetup_r+0x46>
 800fc1a:	68ac      	ldr	r4, [r5, #8]
 800fc1c:	e7eb      	b.n	800fbf6 <__swsetup_r+0x1e>
 800fc1e:	4b24      	ldr	r3, [pc, #144]	; (800fcb0 <__swsetup_r+0xd8>)
 800fc20:	429c      	cmp	r4, r3
 800fc22:	bf08      	it	eq
 800fc24:	68ec      	ldreq	r4, [r5, #12]
 800fc26:	e7e6      	b.n	800fbf6 <__swsetup_r+0x1e>
 800fc28:	0758      	lsls	r0, r3, #29
 800fc2a:	d512      	bpl.n	800fc52 <__swsetup_r+0x7a>
 800fc2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc2e:	b141      	cbz	r1, 800fc42 <__swsetup_r+0x6a>
 800fc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc34:	4299      	cmp	r1, r3
 800fc36:	d002      	beq.n	800fc3e <__swsetup_r+0x66>
 800fc38:	4630      	mov	r0, r6
 800fc3a:	f7ff fcf9 	bl	800f630 <_free_r>
 800fc3e:	2300      	movs	r3, #0
 800fc40:	6363      	str	r3, [r4, #52]	; 0x34
 800fc42:	89a3      	ldrh	r3, [r4, #12]
 800fc44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fc48:	81a3      	strh	r3, [r4, #12]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	6063      	str	r3, [r4, #4]
 800fc4e:	6923      	ldr	r3, [r4, #16]
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	89a3      	ldrh	r3, [r4, #12]
 800fc54:	f043 0308 	orr.w	r3, r3, #8
 800fc58:	81a3      	strh	r3, [r4, #12]
 800fc5a:	6923      	ldr	r3, [r4, #16]
 800fc5c:	b94b      	cbnz	r3, 800fc72 <__swsetup_r+0x9a>
 800fc5e:	89a3      	ldrh	r3, [r4, #12]
 800fc60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fc64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc68:	d003      	beq.n	800fc72 <__swsetup_r+0x9a>
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f000 f98d 	bl	800ff8c <__smakebuf_r>
 800fc72:	89a0      	ldrh	r0, [r4, #12]
 800fc74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc78:	f010 0301 	ands.w	r3, r0, #1
 800fc7c:	d00a      	beq.n	800fc94 <__swsetup_r+0xbc>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60a3      	str	r3, [r4, #8]
 800fc82:	6963      	ldr	r3, [r4, #20]
 800fc84:	425b      	negs	r3, r3
 800fc86:	61a3      	str	r3, [r4, #24]
 800fc88:	6923      	ldr	r3, [r4, #16]
 800fc8a:	b943      	cbnz	r3, 800fc9e <__swsetup_r+0xc6>
 800fc8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fc90:	d1ba      	bne.n	800fc08 <__swsetup_r+0x30>
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	0781      	lsls	r1, r0, #30
 800fc96:	bf58      	it	pl
 800fc98:	6963      	ldrpl	r3, [r4, #20]
 800fc9a:	60a3      	str	r3, [r4, #8]
 800fc9c:	e7f4      	b.n	800fc88 <__swsetup_r+0xb0>
 800fc9e:	2000      	movs	r0, #0
 800fca0:	e7f7      	b.n	800fc92 <__swsetup_r+0xba>
 800fca2:	bf00      	nop
 800fca4:	20000020 	.word	0x20000020
 800fca8:	08010a9c 	.word	0x08010a9c
 800fcac:	08010abc 	.word	0x08010abc
 800fcb0:	08010a7c 	.word	0x08010a7c

0800fcb4 <__register_exitproc>:
 800fcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800fd74 <__register_exitproc+0xc0>
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	f8d8 0000 	ldr.w	r0, [r8]
 800fcc2:	461f      	mov	r7, r3
 800fcc4:	460d      	mov	r5, r1
 800fcc6:	4691      	mov	r9, r2
 800fcc8:	f7ff fc91 	bl	800f5ee <__retarget_lock_acquire_recursive>
 800fccc:	4b25      	ldr	r3, [pc, #148]	; (800fd64 <__register_exitproc+0xb0>)
 800fcce:	681c      	ldr	r4, [r3, #0]
 800fcd0:	b934      	cbnz	r4, 800fce0 <__register_exitproc+0x2c>
 800fcd2:	4c25      	ldr	r4, [pc, #148]	; (800fd68 <__register_exitproc+0xb4>)
 800fcd4:	601c      	str	r4, [r3, #0]
 800fcd6:	4b25      	ldr	r3, [pc, #148]	; (800fd6c <__register_exitproc+0xb8>)
 800fcd8:	b113      	cbz	r3, 800fce0 <__register_exitproc+0x2c>
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fce0:	6863      	ldr	r3, [r4, #4]
 800fce2:	2b1f      	cmp	r3, #31
 800fce4:	dd07      	ble.n	800fcf6 <__register_exitproc+0x42>
 800fce6:	f8d8 0000 	ldr.w	r0, [r8]
 800fcea:	f7ff fc82 	bl	800f5f2 <__retarget_lock_release_recursive>
 800fcee:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	b34e      	cbz	r6, 800fd4c <__register_exitproc+0x98>
 800fcf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800fcfc:	b988      	cbnz	r0, 800fd22 <__register_exitproc+0x6e>
 800fcfe:	4b1c      	ldr	r3, [pc, #112]	; (800fd70 <__register_exitproc+0xbc>)
 800fd00:	b923      	cbnz	r3, 800fd0c <__register_exitproc+0x58>
 800fd02:	f8d8 0000 	ldr.w	r0, [r8]
 800fd06:	f7ff fc73 	bl	800f5f0 <__retarget_lock_release>
 800fd0a:	e7f0      	b.n	800fcee <__register_exitproc+0x3a>
 800fd0c:	f44f 7084 	mov.w	r0, #264	; 0x108
 800fd10:	f7ff fc70 	bl	800f5f4 <malloc>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d0f4      	beq.n	800fd02 <__register_exitproc+0x4e>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800fd1e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800fd22:	6863      	ldr	r3, [r4, #4]
 800fd24:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800fd28:	2201      	movs	r2, #1
 800fd2a:	409a      	lsls	r2, r3
 800fd2c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800fd30:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800fd34:	4313      	orrs	r3, r2
 800fd36:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800fd3a:	2e02      	cmp	r6, #2
 800fd3c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800fd40:	bf02      	ittt	eq
 800fd42:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800fd46:	4313      	orreq	r3, r2
 800fd48:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800fd4c:	6863      	ldr	r3, [r4, #4]
 800fd4e:	f8d8 0000 	ldr.w	r0, [r8]
 800fd52:	1c5a      	adds	r2, r3, #1
 800fd54:	3302      	adds	r3, #2
 800fd56:	6062      	str	r2, [r4, #4]
 800fd58:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800fd5c:	f7ff fc49 	bl	800f5f2 <__retarget_lock_release_recursive>
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7c6      	b.n	800fcf2 <__register_exitproc+0x3e>
 800fd64:	20009e20 	.word	0x20009e20
 800fd68:	20009d94 	.word	0x20009d94
 800fd6c:	00000000 	.word	0x00000000
 800fd70:	0800f5f5 	.word	0x0800f5f5
 800fd74:	20000084 	.word	0x20000084

0800fd78 <_close_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_close_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f6 fda3 	bl	80068ce <_close>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_close_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_close_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20009d90 	.word	0x20009d90

0800fd98 <__sflush_r>:
 800fd98:	898a      	ldrh	r2, [r1, #12]
 800fd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9e:	4605      	mov	r5, r0
 800fda0:	0710      	lsls	r0, r2, #28
 800fda2:	460c      	mov	r4, r1
 800fda4:	d458      	bmi.n	800fe58 <__sflush_r+0xc0>
 800fda6:	684b      	ldr	r3, [r1, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	dc05      	bgt.n	800fdb8 <__sflush_r+0x20>
 800fdac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	dc02      	bgt.n	800fdb8 <__sflush_r+0x20>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdba:	2e00      	cmp	r6, #0
 800fdbc:	d0f9      	beq.n	800fdb2 <__sflush_r+0x1a>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdc4:	682f      	ldr	r7, [r5, #0]
 800fdc6:	602b      	str	r3, [r5, #0]
 800fdc8:	d032      	beq.n	800fe30 <__sflush_r+0x98>
 800fdca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	075a      	lsls	r2, r3, #29
 800fdd0:	d505      	bpl.n	800fdde <__sflush_r+0x46>
 800fdd2:	6863      	ldr	r3, [r4, #4]
 800fdd4:	1ac0      	subs	r0, r0, r3
 800fdd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdd8:	b10b      	cbz	r3, 800fdde <__sflush_r+0x46>
 800fdda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fddc:	1ac0      	subs	r0, r0, r3
 800fdde:	2300      	movs	r3, #0
 800fde0:	4602      	mov	r2, r0
 800fde2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fde4:	6a21      	ldr	r1, [r4, #32]
 800fde6:	4628      	mov	r0, r5
 800fde8:	47b0      	blx	r6
 800fdea:	1c43      	adds	r3, r0, #1
 800fdec:	89a3      	ldrh	r3, [r4, #12]
 800fdee:	d106      	bne.n	800fdfe <__sflush_r+0x66>
 800fdf0:	6829      	ldr	r1, [r5, #0]
 800fdf2:	291d      	cmp	r1, #29
 800fdf4:	d82c      	bhi.n	800fe50 <__sflush_r+0xb8>
 800fdf6:	4a2a      	ldr	r2, [pc, #168]	; (800fea0 <__sflush_r+0x108>)
 800fdf8:	40ca      	lsrs	r2, r1
 800fdfa:	07d6      	lsls	r6, r2, #31
 800fdfc:	d528      	bpl.n	800fe50 <__sflush_r+0xb8>
 800fdfe:	2200      	movs	r2, #0
 800fe00:	6062      	str	r2, [r4, #4]
 800fe02:	04d9      	lsls	r1, r3, #19
 800fe04:	6922      	ldr	r2, [r4, #16]
 800fe06:	6022      	str	r2, [r4, #0]
 800fe08:	d504      	bpl.n	800fe14 <__sflush_r+0x7c>
 800fe0a:	1c42      	adds	r2, r0, #1
 800fe0c:	d101      	bne.n	800fe12 <__sflush_r+0x7a>
 800fe0e:	682b      	ldr	r3, [r5, #0]
 800fe10:	b903      	cbnz	r3, 800fe14 <__sflush_r+0x7c>
 800fe12:	6560      	str	r0, [r4, #84]	; 0x54
 800fe14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe16:	602f      	str	r7, [r5, #0]
 800fe18:	2900      	cmp	r1, #0
 800fe1a:	d0ca      	beq.n	800fdb2 <__sflush_r+0x1a>
 800fe1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe20:	4299      	cmp	r1, r3
 800fe22:	d002      	beq.n	800fe2a <__sflush_r+0x92>
 800fe24:	4628      	mov	r0, r5
 800fe26:	f7ff fc03 	bl	800f630 <_free_r>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe2e:	e7c1      	b.n	800fdb4 <__sflush_r+0x1c>
 800fe30:	6a21      	ldr	r1, [r4, #32]
 800fe32:	2301      	movs	r3, #1
 800fe34:	4628      	mov	r0, r5
 800fe36:	47b0      	blx	r6
 800fe38:	1c41      	adds	r1, r0, #1
 800fe3a:	d1c7      	bne.n	800fdcc <__sflush_r+0x34>
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d0c4      	beq.n	800fdcc <__sflush_r+0x34>
 800fe42:	2b1d      	cmp	r3, #29
 800fe44:	d001      	beq.n	800fe4a <__sflush_r+0xb2>
 800fe46:	2b16      	cmp	r3, #22
 800fe48:	d101      	bne.n	800fe4e <__sflush_r+0xb6>
 800fe4a:	602f      	str	r7, [r5, #0]
 800fe4c:	e7b1      	b.n	800fdb2 <__sflush_r+0x1a>
 800fe4e:	89a3      	ldrh	r3, [r4, #12]
 800fe50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe54:	81a3      	strh	r3, [r4, #12]
 800fe56:	e7ad      	b.n	800fdb4 <__sflush_r+0x1c>
 800fe58:	690f      	ldr	r7, [r1, #16]
 800fe5a:	2f00      	cmp	r7, #0
 800fe5c:	d0a9      	beq.n	800fdb2 <__sflush_r+0x1a>
 800fe5e:	0793      	lsls	r3, r2, #30
 800fe60:	680e      	ldr	r6, [r1, #0]
 800fe62:	bf08      	it	eq
 800fe64:	694b      	ldreq	r3, [r1, #20]
 800fe66:	600f      	str	r7, [r1, #0]
 800fe68:	bf18      	it	ne
 800fe6a:	2300      	movne	r3, #0
 800fe6c:	eba6 0807 	sub.w	r8, r6, r7
 800fe70:	608b      	str	r3, [r1, #8]
 800fe72:	f1b8 0f00 	cmp.w	r8, #0
 800fe76:	dd9c      	ble.n	800fdb2 <__sflush_r+0x1a>
 800fe78:	6a21      	ldr	r1, [r4, #32]
 800fe7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe7c:	4643      	mov	r3, r8
 800fe7e:	463a      	mov	r2, r7
 800fe80:	4628      	mov	r0, r5
 800fe82:	47b0      	blx	r6
 800fe84:	2800      	cmp	r0, #0
 800fe86:	dc06      	bgt.n	800fe96 <__sflush_r+0xfe>
 800fe88:	89a3      	ldrh	r3, [r4, #12]
 800fe8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe8e:	81a3      	strh	r3, [r4, #12]
 800fe90:	f04f 30ff 	mov.w	r0, #4294967295
 800fe94:	e78e      	b.n	800fdb4 <__sflush_r+0x1c>
 800fe96:	4407      	add	r7, r0
 800fe98:	eba8 0800 	sub.w	r8, r8, r0
 800fe9c:	e7e9      	b.n	800fe72 <__sflush_r+0xda>
 800fe9e:	bf00      	nop
 800fea0:	20400001 	.word	0x20400001

0800fea4 <_fflush_r>:
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	690b      	ldr	r3, [r1, #16]
 800fea8:	4605      	mov	r5, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	b913      	cbnz	r3, 800feb4 <_fflush_r+0x10>
 800feae:	2500      	movs	r5, #0
 800feb0:	4628      	mov	r0, r5
 800feb2:	bd38      	pop	{r3, r4, r5, pc}
 800feb4:	b118      	cbz	r0, 800febe <_fflush_r+0x1a>
 800feb6:	6983      	ldr	r3, [r0, #24]
 800feb8:	b90b      	cbnz	r3, 800febe <_fflush_r+0x1a>
 800feba:	f7ff fad5 	bl	800f468 <__sinit>
 800febe:	4b14      	ldr	r3, [pc, #80]	; (800ff10 <_fflush_r+0x6c>)
 800fec0:	429c      	cmp	r4, r3
 800fec2:	d11b      	bne.n	800fefc <_fflush_r+0x58>
 800fec4:	686c      	ldr	r4, [r5, #4]
 800fec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d0ef      	beq.n	800feae <_fflush_r+0xa>
 800fece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fed0:	07d0      	lsls	r0, r2, #31
 800fed2:	d404      	bmi.n	800fede <_fflush_r+0x3a>
 800fed4:	0599      	lsls	r1, r3, #22
 800fed6:	d402      	bmi.n	800fede <_fflush_r+0x3a>
 800fed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feda:	f7ff fb88 	bl	800f5ee <__retarget_lock_acquire_recursive>
 800fede:	4628      	mov	r0, r5
 800fee0:	4621      	mov	r1, r4
 800fee2:	f7ff ff59 	bl	800fd98 <__sflush_r>
 800fee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fee8:	07da      	lsls	r2, r3, #31
 800feea:	4605      	mov	r5, r0
 800feec:	d4e0      	bmi.n	800feb0 <_fflush_r+0xc>
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	059b      	lsls	r3, r3, #22
 800fef2:	d4dd      	bmi.n	800feb0 <_fflush_r+0xc>
 800fef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fef6:	f7ff fb7c 	bl	800f5f2 <__retarget_lock_release_recursive>
 800fefa:	e7d9      	b.n	800feb0 <_fflush_r+0xc>
 800fefc:	4b05      	ldr	r3, [pc, #20]	; (800ff14 <_fflush_r+0x70>)
 800fefe:	429c      	cmp	r4, r3
 800ff00:	d101      	bne.n	800ff06 <_fflush_r+0x62>
 800ff02:	68ac      	ldr	r4, [r5, #8]
 800ff04:	e7df      	b.n	800fec6 <_fflush_r+0x22>
 800ff06:	4b04      	ldr	r3, [pc, #16]	; (800ff18 <_fflush_r+0x74>)
 800ff08:	429c      	cmp	r4, r3
 800ff0a:	bf08      	it	eq
 800ff0c:	68ec      	ldreq	r4, [r5, #12]
 800ff0e:	e7da      	b.n	800fec6 <_fflush_r+0x22>
 800ff10:	08010a9c 	.word	0x08010a9c
 800ff14:	08010abc 	.word	0x08010abc
 800ff18:	08010a7c 	.word	0x08010a7c

0800ff1c <_lseek_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4d07      	ldr	r5, [pc, #28]	; (800ff3c <_lseek_r+0x20>)
 800ff20:	4604      	mov	r4, r0
 800ff22:	4608      	mov	r0, r1
 800ff24:	4611      	mov	r1, r2
 800ff26:	2200      	movs	r2, #0
 800ff28:	602a      	str	r2, [r5, #0]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	f7f6 fcf6 	bl	800691c <_lseek>
 800ff30:	1c43      	adds	r3, r0, #1
 800ff32:	d102      	bne.n	800ff3a <_lseek_r+0x1e>
 800ff34:	682b      	ldr	r3, [r5, #0]
 800ff36:	b103      	cbz	r3, 800ff3a <_lseek_r+0x1e>
 800ff38:	6023      	str	r3, [r4, #0]
 800ff3a:	bd38      	pop	{r3, r4, r5, pc}
 800ff3c:	20009d90 	.word	0x20009d90

0800ff40 <__swhatbuf_r>:
 800ff40:	b570      	push	{r4, r5, r6, lr}
 800ff42:	460e      	mov	r6, r1
 800ff44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff48:	2900      	cmp	r1, #0
 800ff4a:	b096      	sub	sp, #88	; 0x58
 800ff4c:	4614      	mov	r4, r2
 800ff4e:	461d      	mov	r5, r3
 800ff50:	da08      	bge.n	800ff64 <__swhatbuf_r+0x24>
 800ff52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff56:	2200      	movs	r2, #0
 800ff58:	602a      	str	r2, [r5, #0]
 800ff5a:	061a      	lsls	r2, r3, #24
 800ff5c:	d410      	bmi.n	800ff80 <__swhatbuf_r+0x40>
 800ff5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff62:	e00e      	b.n	800ff82 <__swhatbuf_r+0x42>
 800ff64:	466a      	mov	r2, sp
 800ff66:	f000 fb5d 	bl	8010624 <_fstat_r>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	dbf1      	blt.n	800ff52 <__swhatbuf_r+0x12>
 800ff6e:	9a01      	ldr	r2, [sp, #4]
 800ff70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff78:	425a      	negs	r2, r3
 800ff7a:	415a      	adcs	r2, r3
 800ff7c:	602a      	str	r2, [r5, #0]
 800ff7e:	e7ee      	b.n	800ff5e <__swhatbuf_r+0x1e>
 800ff80:	2340      	movs	r3, #64	; 0x40
 800ff82:	2000      	movs	r0, #0
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	b016      	add	sp, #88	; 0x58
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff8c <__smakebuf_r>:
 800ff8c:	898b      	ldrh	r3, [r1, #12]
 800ff8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff90:	079d      	lsls	r5, r3, #30
 800ff92:	4606      	mov	r6, r0
 800ff94:	460c      	mov	r4, r1
 800ff96:	d507      	bpl.n	800ffa8 <__smakebuf_r+0x1c>
 800ff98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	6123      	str	r3, [r4, #16]
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	6163      	str	r3, [r4, #20]
 800ffa4:	b002      	add	sp, #8
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}
 800ffa8:	ab01      	add	r3, sp, #4
 800ffaa:	466a      	mov	r2, sp
 800ffac:	f7ff ffc8 	bl	800ff40 <__swhatbuf_r>
 800ffb0:	9900      	ldr	r1, [sp, #0]
 800ffb2:	4605      	mov	r5, r0
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f7ff fba7 	bl	800f708 <_malloc_r>
 800ffba:	b948      	cbnz	r0, 800ffd0 <__smakebuf_r+0x44>
 800ffbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffc0:	059a      	lsls	r2, r3, #22
 800ffc2:	d4ef      	bmi.n	800ffa4 <__smakebuf_r+0x18>
 800ffc4:	f023 0303 	bic.w	r3, r3, #3
 800ffc8:	f043 0302 	orr.w	r3, r3, #2
 800ffcc:	81a3      	strh	r3, [r4, #12]
 800ffce:	e7e3      	b.n	800ff98 <__smakebuf_r+0xc>
 800ffd0:	4b0d      	ldr	r3, [pc, #52]	; (8010008 <__smakebuf_r+0x7c>)
 800ffd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	6020      	str	r0, [r4, #0]
 800ffd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffdc:	81a3      	strh	r3, [r4, #12]
 800ffde:	9b00      	ldr	r3, [sp, #0]
 800ffe0:	6163      	str	r3, [r4, #20]
 800ffe2:	9b01      	ldr	r3, [sp, #4]
 800ffe4:	6120      	str	r0, [r4, #16]
 800ffe6:	b15b      	cbz	r3, 8010000 <__smakebuf_r+0x74>
 800ffe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffec:	4630      	mov	r0, r6
 800ffee:	f000 fb2b 	bl	8010648 <_isatty_r>
 800fff2:	b128      	cbz	r0, 8010000 <__smakebuf_r+0x74>
 800fff4:	89a3      	ldrh	r3, [r4, #12]
 800fff6:	f023 0303 	bic.w	r3, r3, #3
 800fffa:	f043 0301 	orr.w	r3, r3, #1
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	89a0      	ldrh	r0, [r4, #12]
 8010002:	4305      	orrs	r5, r0
 8010004:	81a5      	strh	r5, [r4, #12]
 8010006:	e7cd      	b.n	800ffa4 <__smakebuf_r+0x18>
 8010008:	0800f401 	.word	0x0800f401

0801000c <__malloc_lock>:
 801000c:	4801      	ldr	r0, [pc, #4]	; (8010014 <__malloc_lock+0x8>)
 801000e:	f7ff baee 	b.w	800f5ee <__retarget_lock_acquire_recursive>
 8010012:	bf00      	nop
 8010014:	20009d85 	.word	0x20009d85

08010018 <__malloc_unlock>:
 8010018:	4801      	ldr	r0, [pc, #4]	; (8010020 <__malloc_unlock+0x8>)
 801001a:	f7ff baea 	b.w	800f5f2 <__retarget_lock_release_recursive>
 801001e:	bf00      	nop
 8010020:	20009d85 	.word	0x20009d85

08010024 <__sfputc_r>:
 8010024:	6893      	ldr	r3, [r2, #8]
 8010026:	3b01      	subs	r3, #1
 8010028:	2b00      	cmp	r3, #0
 801002a:	b410      	push	{r4}
 801002c:	6093      	str	r3, [r2, #8]
 801002e:	da08      	bge.n	8010042 <__sfputc_r+0x1e>
 8010030:	6994      	ldr	r4, [r2, #24]
 8010032:	42a3      	cmp	r3, r4
 8010034:	db01      	blt.n	801003a <__sfputc_r+0x16>
 8010036:	290a      	cmp	r1, #10
 8010038:	d103      	bne.n	8010042 <__sfputc_r+0x1e>
 801003a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801003e:	f7ff bd67 	b.w	800fb10 <__swbuf_r>
 8010042:	6813      	ldr	r3, [r2, #0]
 8010044:	1c58      	adds	r0, r3, #1
 8010046:	6010      	str	r0, [r2, #0]
 8010048:	7019      	strb	r1, [r3, #0]
 801004a:	4608      	mov	r0, r1
 801004c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010050:	4770      	bx	lr

08010052 <__sfputs_r>:
 8010052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010054:	4606      	mov	r6, r0
 8010056:	460f      	mov	r7, r1
 8010058:	4614      	mov	r4, r2
 801005a:	18d5      	adds	r5, r2, r3
 801005c:	42ac      	cmp	r4, r5
 801005e:	d101      	bne.n	8010064 <__sfputs_r+0x12>
 8010060:	2000      	movs	r0, #0
 8010062:	e007      	b.n	8010074 <__sfputs_r+0x22>
 8010064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010068:	463a      	mov	r2, r7
 801006a:	4630      	mov	r0, r6
 801006c:	f7ff ffda 	bl	8010024 <__sfputc_r>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d1f3      	bne.n	801005c <__sfputs_r+0xa>
 8010074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010078 <_vfiprintf_r>:
 8010078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801007c:	460d      	mov	r5, r1
 801007e:	b09d      	sub	sp, #116	; 0x74
 8010080:	4614      	mov	r4, r2
 8010082:	4698      	mov	r8, r3
 8010084:	4606      	mov	r6, r0
 8010086:	b118      	cbz	r0, 8010090 <_vfiprintf_r+0x18>
 8010088:	6983      	ldr	r3, [r0, #24]
 801008a:	b90b      	cbnz	r3, 8010090 <_vfiprintf_r+0x18>
 801008c:	f7ff f9ec 	bl	800f468 <__sinit>
 8010090:	4b89      	ldr	r3, [pc, #548]	; (80102b8 <_vfiprintf_r+0x240>)
 8010092:	429d      	cmp	r5, r3
 8010094:	d11b      	bne.n	80100ce <_vfiprintf_r+0x56>
 8010096:	6875      	ldr	r5, [r6, #4]
 8010098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801009a:	07d9      	lsls	r1, r3, #31
 801009c:	d405      	bmi.n	80100aa <_vfiprintf_r+0x32>
 801009e:	89ab      	ldrh	r3, [r5, #12]
 80100a0:	059a      	lsls	r2, r3, #22
 80100a2:	d402      	bmi.n	80100aa <_vfiprintf_r+0x32>
 80100a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100a6:	f7ff faa2 	bl	800f5ee <__retarget_lock_acquire_recursive>
 80100aa:	89ab      	ldrh	r3, [r5, #12]
 80100ac:	071b      	lsls	r3, r3, #28
 80100ae:	d501      	bpl.n	80100b4 <_vfiprintf_r+0x3c>
 80100b0:	692b      	ldr	r3, [r5, #16]
 80100b2:	b9eb      	cbnz	r3, 80100f0 <_vfiprintf_r+0x78>
 80100b4:	4629      	mov	r1, r5
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff fd8e 	bl	800fbd8 <__swsetup_r>
 80100bc:	b1c0      	cbz	r0, 80100f0 <_vfiprintf_r+0x78>
 80100be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100c0:	07dc      	lsls	r4, r3, #31
 80100c2:	d50e      	bpl.n	80100e2 <_vfiprintf_r+0x6a>
 80100c4:	f04f 30ff 	mov.w	r0, #4294967295
 80100c8:	b01d      	add	sp, #116	; 0x74
 80100ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ce:	4b7b      	ldr	r3, [pc, #492]	; (80102bc <_vfiprintf_r+0x244>)
 80100d0:	429d      	cmp	r5, r3
 80100d2:	d101      	bne.n	80100d8 <_vfiprintf_r+0x60>
 80100d4:	68b5      	ldr	r5, [r6, #8]
 80100d6:	e7df      	b.n	8010098 <_vfiprintf_r+0x20>
 80100d8:	4b79      	ldr	r3, [pc, #484]	; (80102c0 <_vfiprintf_r+0x248>)
 80100da:	429d      	cmp	r5, r3
 80100dc:	bf08      	it	eq
 80100de:	68f5      	ldreq	r5, [r6, #12]
 80100e0:	e7da      	b.n	8010098 <_vfiprintf_r+0x20>
 80100e2:	89ab      	ldrh	r3, [r5, #12]
 80100e4:	0598      	lsls	r0, r3, #22
 80100e6:	d4ed      	bmi.n	80100c4 <_vfiprintf_r+0x4c>
 80100e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ea:	f7ff fa82 	bl	800f5f2 <__retarget_lock_release_recursive>
 80100ee:	e7e9      	b.n	80100c4 <_vfiprintf_r+0x4c>
 80100f0:	2300      	movs	r3, #0
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	2320      	movs	r3, #32
 80100f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80100fe:	2330      	movs	r3, #48	; 0x30
 8010100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102c4 <_vfiprintf_r+0x24c>
 8010104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010108:	f04f 0901 	mov.w	r9, #1
 801010c:	4623      	mov	r3, r4
 801010e:	469a      	mov	sl, r3
 8010110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010114:	b10a      	cbz	r2, 801011a <_vfiprintf_r+0xa2>
 8010116:	2a25      	cmp	r2, #37	; 0x25
 8010118:	d1f9      	bne.n	801010e <_vfiprintf_r+0x96>
 801011a:	ebba 0b04 	subs.w	fp, sl, r4
 801011e:	d00b      	beq.n	8010138 <_vfiprintf_r+0xc0>
 8010120:	465b      	mov	r3, fp
 8010122:	4622      	mov	r2, r4
 8010124:	4629      	mov	r1, r5
 8010126:	4630      	mov	r0, r6
 8010128:	f7ff ff93 	bl	8010052 <__sfputs_r>
 801012c:	3001      	adds	r0, #1
 801012e:	f000 80aa 	beq.w	8010286 <_vfiprintf_r+0x20e>
 8010132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010134:	445a      	add	r2, fp
 8010136:	9209      	str	r2, [sp, #36]	; 0x24
 8010138:	f89a 3000 	ldrb.w	r3, [sl]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 80a2 	beq.w	8010286 <_vfiprintf_r+0x20e>
 8010142:	2300      	movs	r3, #0
 8010144:	f04f 32ff 	mov.w	r2, #4294967295
 8010148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801014c:	f10a 0a01 	add.w	sl, sl, #1
 8010150:	9304      	str	r3, [sp, #16]
 8010152:	9307      	str	r3, [sp, #28]
 8010154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010158:	931a      	str	r3, [sp, #104]	; 0x68
 801015a:	4654      	mov	r4, sl
 801015c:	2205      	movs	r2, #5
 801015e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010162:	4858      	ldr	r0, [pc, #352]	; (80102c4 <_vfiprintf_r+0x24c>)
 8010164:	f7f0 f834 	bl	80001d0 <memchr>
 8010168:	9a04      	ldr	r2, [sp, #16]
 801016a:	b9d8      	cbnz	r0, 80101a4 <_vfiprintf_r+0x12c>
 801016c:	06d1      	lsls	r1, r2, #27
 801016e:	bf44      	itt	mi
 8010170:	2320      	movmi	r3, #32
 8010172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010176:	0713      	lsls	r3, r2, #28
 8010178:	bf44      	itt	mi
 801017a:	232b      	movmi	r3, #43	; 0x2b
 801017c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010180:	f89a 3000 	ldrb.w	r3, [sl]
 8010184:	2b2a      	cmp	r3, #42	; 0x2a
 8010186:	d015      	beq.n	80101b4 <_vfiprintf_r+0x13c>
 8010188:	9a07      	ldr	r2, [sp, #28]
 801018a:	4654      	mov	r4, sl
 801018c:	2000      	movs	r0, #0
 801018e:	f04f 0c0a 	mov.w	ip, #10
 8010192:	4621      	mov	r1, r4
 8010194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010198:	3b30      	subs	r3, #48	; 0x30
 801019a:	2b09      	cmp	r3, #9
 801019c:	d94e      	bls.n	801023c <_vfiprintf_r+0x1c4>
 801019e:	b1b0      	cbz	r0, 80101ce <_vfiprintf_r+0x156>
 80101a0:	9207      	str	r2, [sp, #28]
 80101a2:	e014      	b.n	80101ce <_vfiprintf_r+0x156>
 80101a4:	eba0 0308 	sub.w	r3, r0, r8
 80101a8:	fa09 f303 	lsl.w	r3, r9, r3
 80101ac:	4313      	orrs	r3, r2
 80101ae:	9304      	str	r3, [sp, #16]
 80101b0:	46a2      	mov	sl, r4
 80101b2:	e7d2      	b.n	801015a <_vfiprintf_r+0xe2>
 80101b4:	9b03      	ldr	r3, [sp, #12]
 80101b6:	1d19      	adds	r1, r3, #4
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	9103      	str	r1, [sp, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bfbb      	ittet	lt
 80101c0:	425b      	neglt	r3, r3
 80101c2:	f042 0202 	orrlt.w	r2, r2, #2
 80101c6:	9307      	strge	r3, [sp, #28]
 80101c8:	9307      	strlt	r3, [sp, #28]
 80101ca:	bfb8      	it	lt
 80101cc:	9204      	strlt	r2, [sp, #16]
 80101ce:	7823      	ldrb	r3, [r4, #0]
 80101d0:	2b2e      	cmp	r3, #46	; 0x2e
 80101d2:	d10c      	bne.n	80101ee <_vfiprintf_r+0x176>
 80101d4:	7863      	ldrb	r3, [r4, #1]
 80101d6:	2b2a      	cmp	r3, #42	; 0x2a
 80101d8:	d135      	bne.n	8010246 <_vfiprintf_r+0x1ce>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	1d1a      	adds	r2, r3, #4
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	9203      	str	r2, [sp, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	bfb8      	it	lt
 80101e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ea:	3402      	adds	r4, #2
 80101ec:	9305      	str	r3, [sp, #20]
 80101ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102d4 <_vfiprintf_r+0x25c>
 80101f2:	7821      	ldrb	r1, [r4, #0]
 80101f4:	2203      	movs	r2, #3
 80101f6:	4650      	mov	r0, sl
 80101f8:	f7ef ffea 	bl	80001d0 <memchr>
 80101fc:	b140      	cbz	r0, 8010210 <_vfiprintf_r+0x198>
 80101fe:	2340      	movs	r3, #64	; 0x40
 8010200:	eba0 000a 	sub.w	r0, r0, sl
 8010204:	fa03 f000 	lsl.w	r0, r3, r0
 8010208:	9b04      	ldr	r3, [sp, #16]
 801020a:	4303      	orrs	r3, r0
 801020c:	3401      	adds	r4, #1
 801020e:	9304      	str	r3, [sp, #16]
 8010210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010214:	482c      	ldr	r0, [pc, #176]	; (80102c8 <_vfiprintf_r+0x250>)
 8010216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801021a:	2206      	movs	r2, #6
 801021c:	f7ef ffd8 	bl	80001d0 <memchr>
 8010220:	2800      	cmp	r0, #0
 8010222:	d03f      	beq.n	80102a4 <_vfiprintf_r+0x22c>
 8010224:	4b29      	ldr	r3, [pc, #164]	; (80102cc <_vfiprintf_r+0x254>)
 8010226:	bb1b      	cbnz	r3, 8010270 <_vfiprintf_r+0x1f8>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	3307      	adds	r3, #7
 801022c:	f023 0307 	bic.w	r3, r3, #7
 8010230:	3308      	adds	r3, #8
 8010232:	9303      	str	r3, [sp, #12]
 8010234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010236:	443b      	add	r3, r7
 8010238:	9309      	str	r3, [sp, #36]	; 0x24
 801023a:	e767      	b.n	801010c <_vfiprintf_r+0x94>
 801023c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010240:	460c      	mov	r4, r1
 8010242:	2001      	movs	r0, #1
 8010244:	e7a5      	b.n	8010192 <_vfiprintf_r+0x11a>
 8010246:	2300      	movs	r3, #0
 8010248:	3401      	adds	r4, #1
 801024a:	9305      	str	r3, [sp, #20]
 801024c:	4619      	mov	r1, r3
 801024e:	f04f 0c0a 	mov.w	ip, #10
 8010252:	4620      	mov	r0, r4
 8010254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010258:	3a30      	subs	r2, #48	; 0x30
 801025a:	2a09      	cmp	r2, #9
 801025c:	d903      	bls.n	8010266 <_vfiprintf_r+0x1ee>
 801025e:	2b00      	cmp	r3, #0
 8010260:	d0c5      	beq.n	80101ee <_vfiprintf_r+0x176>
 8010262:	9105      	str	r1, [sp, #20]
 8010264:	e7c3      	b.n	80101ee <_vfiprintf_r+0x176>
 8010266:	fb0c 2101 	mla	r1, ip, r1, r2
 801026a:	4604      	mov	r4, r0
 801026c:	2301      	movs	r3, #1
 801026e:	e7f0      	b.n	8010252 <_vfiprintf_r+0x1da>
 8010270:	ab03      	add	r3, sp, #12
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	462a      	mov	r2, r5
 8010276:	4b16      	ldr	r3, [pc, #88]	; (80102d0 <_vfiprintf_r+0x258>)
 8010278:	a904      	add	r1, sp, #16
 801027a:	4630      	mov	r0, r6
 801027c:	f3af 8000 	nop.w
 8010280:	4607      	mov	r7, r0
 8010282:	1c78      	adds	r0, r7, #1
 8010284:	d1d6      	bne.n	8010234 <_vfiprintf_r+0x1bc>
 8010286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010288:	07d9      	lsls	r1, r3, #31
 801028a:	d405      	bmi.n	8010298 <_vfiprintf_r+0x220>
 801028c:	89ab      	ldrh	r3, [r5, #12]
 801028e:	059a      	lsls	r2, r3, #22
 8010290:	d402      	bmi.n	8010298 <_vfiprintf_r+0x220>
 8010292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010294:	f7ff f9ad 	bl	800f5f2 <__retarget_lock_release_recursive>
 8010298:	89ab      	ldrh	r3, [r5, #12]
 801029a:	065b      	lsls	r3, r3, #25
 801029c:	f53f af12 	bmi.w	80100c4 <_vfiprintf_r+0x4c>
 80102a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102a2:	e711      	b.n	80100c8 <_vfiprintf_r+0x50>
 80102a4:	ab03      	add	r3, sp, #12
 80102a6:	9300      	str	r3, [sp, #0]
 80102a8:	462a      	mov	r2, r5
 80102aa:	4b09      	ldr	r3, [pc, #36]	; (80102d0 <_vfiprintf_r+0x258>)
 80102ac:	a904      	add	r1, sp, #16
 80102ae:	4630      	mov	r0, r6
 80102b0:	f000 f880 	bl	80103b4 <_printf_i>
 80102b4:	e7e4      	b.n	8010280 <_vfiprintf_r+0x208>
 80102b6:	bf00      	nop
 80102b8:	08010a9c 	.word	0x08010a9c
 80102bc:	08010abc 	.word	0x08010abc
 80102c0:	08010a7c 	.word	0x08010a7c
 80102c4:	08010ae0 	.word	0x08010ae0
 80102c8:	08010aea 	.word	0x08010aea
 80102cc:	00000000 	.word	0x00000000
 80102d0:	08010053 	.word	0x08010053
 80102d4:	08010ae6 	.word	0x08010ae6

080102d8 <_printf_common>:
 80102d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102dc:	4616      	mov	r6, r2
 80102de:	4699      	mov	r9, r3
 80102e0:	688a      	ldr	r2, [r1, #8]
 80102e2:	690b      	ldr	r3, [r1, #16]
 80102e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102e8:	4293      	cmp	r3, r2
 80102ea:	bfb8      	it	lt
 80102ec:	4613      	movlt	r3, r2
 80102ee:	6033      	str	r3, [r6, #0]
 80102f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102f4:	4607      	mov	r7, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	b10a      	cbz	r2, 80102fe <_printf_common+0x26>
 80102fa:	3301      	adds	r3, #1
 80102fc:	6033      	str	r3, [r6, #0]
 80102fe:	6823      	ldr	r3, [r4, #0]
 8010300:	0699      	lsls	r1, r3, #26
 8010302:	bf42      	ittt	mi
 8010304:	6833      	ldrmi	r3, [r6, #0]
 8010306:	3302      	addmi	r3, #2
 8010308:	6033      	strmi	r3, [r6, #0]
 801030a:	6825      	ldr	r5, [r4, #0]
 801030c:	f015 0506 	ands.w	r5, r5, #6
 8010310:	d106      	bne.n	8010320 <_printf_common+0x48>
 8010312:	f104 0a19 	add.w	sl, r4, #25
 8010316:	68e3      	ldr	r3, [r4, #12]
 8010318:	6832      	ldr	r2, [r6, #0]
 801031a:	1a9b      	subs	r3, r3, r2
 801031c:	42ab      	cmp	r3, r5
 801031e:	dc26      	bgt.n	801036e <_printf_common+0x96>
 8010320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010324:	1e13      	subs	r3, r2, #0
 8010326:	6822      	ldr	r2, [r4, #0]
 8010328:	bf18      	it	ne
 801032a:	2301      	movne	r3, #1
 801032c:	0692      	lsls	r2, r2, #26
 801032e:	d42b      	bmi.n	8010388 <_printf_common+0xb0>
 8010330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010334:	4649      	mov	r1, r9
 8010336:	4638      	mov	r0, r7
 8010338:	47c0      	blx	r8
 801033a:	3001      	adds	r0, #1
 801033c:	d01e      	beq.n	801037c <_printf_common+0xa4>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	68e5      	ldr	r5, [r4, #12]
 8010342:	6832      	ldr	r2, [r6, #0]
 8010344:	f003 0306 	and.w	r3, r3, #6
 8010348:	2b04      	cmp	r3, #4
 801034a:	bf08      	it	eq
 801034c:	1aad      	subeq	r5, r5, r2
 801034e:	68a3      	ldr	r3, [r4, #8]
 8010350:	6922      	ldr	r2, [r4, #16]
 8010352:	bf0c      	ite	eq
 8010354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010358:	2500      	movne	r5, #0
 801035a:	4293      	cmp	r3, r2
 801035c:	bfc4      	itt	gt
 801035e:	1a9b      	subgt	r3, r3, r2
 8010360:	18ed      	addgt	r5, r5, r3
 8010362:	2600      	movs	r6, #0
 8010364:	341a      	adds	r4, #26
 8010366:	42b5      	cmp	r5, r6
 8010368:	d11a      	bne.n	80103a0 <_printf_common+0xc8>
 801036a:	2000      	movs	r0, #0
 801036c:	e008      	b.n	8010380 <_printf_common+0xa8>
 801036e:	2301      	movs	r3, #1
 8010370:	4652      	mov	r2, sl
 8010372:	4649      	mov	r1, r9
 8010374:	4638      	mov	r0, r7
 8010376:	47c0      	blx	r8
 8010378:	3001      	adds	r0, #1
 801037a:	d103      	bne.n	8010384 <_printf_common+0xac>
 801037c:	f04f 30ff 	mov.w	r0, #4294967295
 8010380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010384:	3501      	adds	r5, #1
 8010386:	e7c6      	b.n	8010316 <_printf_common+0x3e>
 8010388:	18e1      	adds	r1, r4, r3
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	2030      	movs	r0, #48	; 0x30
 801038e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010392:	4422      	add	r2, r4
 8010394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801039c:	3302      	adds	r3, #2
 801039e:	e7c7      	b.n	8010330 <_printf_common+0x58>
 80103a0:	2301      	movs	r3, #1
 80103a2:	4622      	mov	r2, r4
 80103a4:	4649      	mov	r1, r9
 80103a6:	4638      	mov	r0, r7
 80103a8:	47c0      	blx	r8
 80103aa:	3001      	adds	r0, #1
 80103ac:	d0e6      	beq.n	801037c <_printf_common+0xa4>
 80103ae:	3601      	adds	r6, #1
 80103b0:	e7d9      	b.n	8010366 <_printf_common+0x8e>
	...

080103b4 <_printf_i>:
 80103b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103b8:	7e0f      	ldrb	r7, [r1, #24]
 80103ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80103bc:	2f78      	cmp	r7, #120	; 0x78
 80103be:	4691      	mov	r9, r2
 80103c0:	4680      	mov	r8, r0
 80103c2:	460c      	mov	r4, r1
 80103c4:	469a      	mov	sl, r3
 80103c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80103ca:	d807      	bhi.n	80103dc <_printf_i+0x28>
 80103cc:	2f62      	cmp	r7, #98	; 0x62
 80103ce:	d80a      	bhi.n	80103e6 <_printf_i+0x32>
 80103d0:	2f00      	cmp	r7, #0
 80103d2:	f000 80d8 	beq.w	8010586 <_printf_i+0x1d2>
 80103d6:	2f58      	cmp	r7, #88	; 0x58
 80103d8:	f000 80a3 	beq.w	8010522 <_printf_i+0x16e>
 80103dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103e4:	e03a      	b.n	801045c <_printf_i+0xa8>
 80103e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103ea:	2b15      	cmp	r3, #21
 80103ec:	d8f6      	bhi.n	80103dc <_printf_i+0x28>
 80103ee:	a101      	add	r1, pc, #4	; (adr r1, 80103f4 <_printf_i+0x40>)
 80103f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103f4:	0801044d 	.word	0x0801044d
 80103f8:	08010461 	.word	0x08010461
 80103fc:	080103dd 	.word	0x080103dd
 8010400:	080103dd 	.word	0x080103dd
 8010404:	080103dd 	.word	0x080103dd
 8010408:	080103dd 	.word	0x080103dd
 801040c:	08010461 	.word	0x08010461
 8010410:	080103dd 	.word	0x080103dd
 8010414:	080103dd 	.word	0x080103dd
 8010418:	080103dd 	.word	0x080103dd
 801041c:	080103dd 	.word	0x080103dd
 8010420:	0801056d 	.word	0x0801056d
 8010424:	08010491 	.word	0x08010491
 8010428:	0801054f 	.word	0x0801054f
 801042c:	080103dd 	.word	0x080103dd
 8010430:	080103dd 	.word	0x080103dd
 8010434:	0801058f 	.word	0x0801058f
 8010438:	080103dd 	.word	0x080103dd
 801043c:	08010491 	.word	0x08010491
 8010440:	080103dd 	.word	0x080103dd
 8010444:	080103dd 	.word	0x080103dd
 8010448:	08010557 	.word	0x08010557
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	1d1a      	adds	r2, r3, #4
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	602a      	str	r2, [r5, #0]
 8010454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801045c:	2301      	movs	r3, #1
 801045e:	e0a3      	b.n	80105a8 <_printf_i+0x1f4>
 8010460:	6820      	ldr	r0, [r4, #0]
 8010462:	6829      	ldr	r1, [r5, #0]
 8010464:	0606      	lsls	r6, r0, #24
 8010466:	f101 0304 	add.w	r3, r1, #4
 801046a:	d50a      	bpl.n	8010482 <_printf_i+0xce>
 801046c:	680e      	ldr	r6, [r1, #0]
 801046e:	602b      	str	r3, [r5, #0]
 8010470:	2e00      	cmp	r6, #0
 8010472:	da03      	bge.n	801047c <_printf_i+0xc8>
 8010474:	232d      	movs	r3, #45	; 0x2d
 8010476:	4276      	negs	r6, r6
 8010478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801047c:	485e      	ldr	r0, [pc, #376]	; (80105f8 <_printf_i+0x244>)
 801047e:	230a      	movs	r3, #10
 8010480:	e019      	b.n	80104b6 <_printf_i+0x102>
 8010482:	680e      	ldr	r6, [r1, #0]
 8010484:	602b      	str	r3, [r5, #0]
 8010486:	f010 0f40 	tst.w	r0, #64	; 0x40
 801048a:	bf18      	it	ne
 801048c:	b236      	sxthne	r6, r6
 801048e:	e7ef      	b.n	8010470 <_printf_i+0xbc>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	6820      	ldr	r0, [r4, #0]
 8010494:	1d19      	adds	r1, r3, #4
 8010496:	6029      	str	r1, [r5, #0]
 8010498:	0601      	lsls	r1, r0, #24
 801049a:	d501      	bpl.n	80104a0 <_printf_i+0xec>
 801049c:	681e      	ldr	r6, [r3, #0]
 801049e:	e002      	b.n	80104a6 <_printf_i+0xf2>
 80104a0:	0646      	lsls	r6, r0, #25
 80104a2:	d5fb      	bpl.n	801049c <_printf_i+0xe8>
 80104a4:	881e      	ldrh	r6, [r3, #0]
 80104a6:	4854      	ldr	r0, [pc, #336]	; (80105f8 <_printf_i+0x244>)
 80104a8:	2f6f      	cmp	r7, #111	; 0x6f
 80104aa:	bf0c      	ite	eq
 80104ac:	2308      	moveq	r3, #8
 80104ae:	230a      	movne	r3, #10
 80104b0:	2100      	movs	r1, #0
 80104b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104b6:	6865      	ldr	r5, [r4, #4]
 80104b8:	60a5      	str	r5, [r4, #8]
 80104ba:	2d00      	cmp	r5, #0
 80104bc:	bfa2      	ittt	ge
 80104be:	6821      	ldrge	r1, [r4, #0]
 80104c0:	f021 0104 	bicge.w	r1, r1, #4
 80104c4:	6021      	strge	r1, [r4, #0]
 80104c6:	b90e      	cbnz	r6, 80104cc <_printf_i+0x118>
 80104c8:	2d00      	cmp	r5, #0
 80104ca:	d04d      	beq.n	8010568 <_printf_i+0x1b4>
 80104cc:	4615      	mov	r5, r2
 80104ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80104d2:	fb03 6711 	mls	r7, r3, r1, r6
 80104d6:	5dc7      	ldrb	r7, [r0, r7]
 80104d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80104dc:	4637      	mov	r7, r6
 80104de:	42bb      	cmp	r3, r7
 80104e0:	460e      	mov	r6, r1
 80104e2:	d9f4      	bls.n	80104ce <_printf_i+0x11a>
 80104e4:	2b08      	cmp	r3, #8
 80104e6:	d10b      	bne.n	8010500 <_printf_i+0x14c>
 80104e8:	6823      	ldr	r3, [r4, #0]
 80104ea:	07de      	lsls	r6, r3, #31
 80104ec:	d508      	bpl.n	8010500 <_printf_i+0x14c>
 80104ee:	6923      	ldr	r3, [r4, #16]
 80104f0:	6861      	ldr	r1, [r4, #4]
 80104f2:	4299      	cmp	r1, r3
 80104f4:	bfde      	ittt	le
 80104f6:	2330      	movle	r3, #48	; 0x30
 80104f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80104fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010500:	1b52      	subs	r2, r2, r5
 8010502:	6122      	str	r2, [r4, #16]
 8010504:	f8cd a000 	str.w	sl, [sp]
 8010508:	464b      	mov	r3, r9
 801050a:	aa03      	add	r2, sp, #12
 801050c:	4621      	mov	r1, r4
 801050e:	4640      	mov	r0, r8
 8010510:	f7ff fee2 	bl	80102d8 <_printf_common>
 8010514:	3001      	adds	r0, #1
 8010516:	d14c      	bne.n	80105b2 <_printf_i+0x1fe>
 8010518:	f04f 30ff 	mov.w	r0, #4294967295
 801051c:	b004      	add	sp, #16
 801051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010522:	4835      	ldr	r0, [pc, #212]	; (80105f8 <_printf_i+0x244>)
 8010524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010528:	6829      	ldr	r1, [r5, #0]
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010530:	6029      	str	r1, [r5, #0]
 8010532:	061d      	lsls	r5, r3, #24
 8010534:	d514      	bpl.n	8010560 <_printf_i+0x1ac>
 8010536:	07df      	lsls	r7, r3, #31
 8010538:	bf44      	itt	mi
 801053a:	f043 0320 	orrmi.w	r3, r3, #32
 801053e:	6023      	strmi	r3, [r4, #0]
 8010540:	b91e      	cbnz	r6, 801054a <_printf_i+0x196>
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	f023 0320 	bic.w	r3, r3, #32
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	2310      	movs	r3, #16
 801054c:	e7b0      	b.n	80104b0 <_printf_i+0xfc>
 801054e:	6823      	ldr	r3, [r4, #0]
 8010550:	f043 0320 	orr.w	r3, r3, #32
 8010554:	6023      	str	r3, [r4, #0]
 8010556:	2378      	movs	r3, #120	; 0x78
 8010558:	4828      	ldr	r0, [pc, #160]	; (80105fc <_printf_i+0x248>)
 801055a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801055e:	e7e3      	b.n	8010528 <_printf_i+0x174>
 8010560:	0659      	lsls	r1, r3, #25
 8010562:	bf48      	it	mi
 8010564:	b2b6      	uxthmi	r6, r6
 8010566:	e7e6      	b.n	8010536 <_printf_i+0x182>
 8010568:	4615      	mov	r5, r2
 801056a:	e7bb      	b.n	80104e4 <_printf_i+0x130>
 801056c:	682b      	ldr	r3, [r5, #0]
 801056e:	6826      	ldr	r6, [r4, #0]
 8010570:	6961      	ldr	r1, [r4, #20]
 8010572:	1d18      	adds	r0, r3, #4
 8010574:	6028      	str	r0, [r5, #0]
 8010576:	0635      	lsls	r5, r6, #24
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	d501      	bpl.n	8010580 <_printf_i+0x1cc>
 801057c:	6019      	str	r1, [r3, #0]
 801057e:	e002      	b.n	8010586 <_printf_i+0x1d2>
 8010580:	0670      	lsls	r0, r6, #25
 8010582:	d5fb      	bpl.n	801057c <_printf_i+0x1c8>
 8010584:	8019      	strh	r1, [r3, #0]
 8010586:	2300      	movs	r3, #0
 8010588:	6123      	str	r3, [r4, #16]
 801058a:	4615      	mov	r5, r2
 801058c:	e7ba      	b.n	8010504 <_printf_i+0x150>
 801058e:	682b      	ldr	r3, [r5, #0]
 8010590:	1d1a      	adds	r2, r3, #4
 8010592:	602a      	str	r2, [r5, #0]
 8010594:	681d      	ldr	r5, [r3, #0]
 8010596:	6862      	ldr	r2, [r4, #4]
 8010598:	2100      	movs	r1, #0
 801059a:	4628      	mov	r0, r5
 801059c:	f7ef fe18 	bl	80001d0 <memchr>
 80105a0:	b108      	cbz	r0, 80105a6 <_printf_i+0x1f2>
 80105a2:	1b40      	subs	r0, r0, r5
 80105a4:	6060      	str	r0, [r4, #4]
 80105a6:	6863      	ldr	r3, [r4, #4]
 80105a8:	6123      	str	r3, [r4, #16]
 80105aa:	2300      	movs	r3, #0
 80105ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105b0:	e7a8      	b.n	8010504 <_printf_i+0x150>
 80105b2:	6923      	ldr	r3, [r4, #16]
 80105b4:	462a      	mov	r2, r5
 80105b6:	4649      	mov	r1, r9
 80105b8:	4640      	mov	r0, r8
 80105ba:	47d0      	blx	sl
 80105bc:	3001      	adds	r0, #1
 80105be:	d0ab      	beq.n	8010518 <_printf_i+0x164>
 80105c0:	6823      	ldr	r3, [r4, #0]
 80105c2:	079b      	lsls	r3, r3, #30
 80105c4:	d413      	bmi.n	80105ee <_printf_i+0x23a>
 80105c6:	68e0      	ldr	r0, [r4, #12]
 80105c8:	9b03      	ldr	r3, [sp, #12]
 80105ca:	4298      	cmp	r0, r3
 80105cc:	bfb8      	it	lt
 80105ce:	4618      	movlt	r0, r3
 80105d0:	e7a4      	b.n	801051c <_printf_i+0x168>
 80105d2:	2301      	movs	r3, #1
 80105d4:	4632      	mov	r2, r6
 80105d6:	4649      	mov	r1, r9
 80105d8:	4640      	mov	r0, r8
 80105da:	47d0      	blx	sl
 80105dc:	3001      	adds	r0, #1
 80105de:	d09b      	beq.n	8010518 <_printf_i+0x164>
 80105e0:	3501      	adds	r5, #1
 80105e2:	68e3      	ldr	r3, [r4, #12]
 80105e4:	9903      	ldr	r1, [sp, #12]
 80105e6:	1a5b      	subs	r3, r3, r1
 80105e8:	42ab      	cmp	r3, r5
 80105ea:	dcf2      	bgt.n	80105d2 <_printf_i+0x21e>
 80105ec:	e7eb      	b.n	80105c6 <_printf_i+0x212>
 80105ee:	2500      	movs	r5, #0
 80105f0:	f104 0619 	add.w	r6, r4, #25
 80105f4:	e7f5      	b.n	80105e2 <_printf_i+0x22e>
 80105f6:	bf00      	nop
 80105f8:	08010af1 	.word	0x08010af1
 80105fc:	08010b02 	.word	0x08010b02

08010600 <_read_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4d07      	ldr	r5, [pc, #28]	; (8010620 <_read_r+0x20>)
 8010604:	4604      	mov	r4, r0
 8010606:	4608      	mov	r0, r1
 8010608:	4611      	mov	r1, r2
 801060a:	2200      	movs	r2, #0
 801060c:	602a      	str	r2, [r5, #0]
 801060e:	461a      	mov	r2, r3
 8010610:	f7f6 f924 	bl	800685c <_read>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_read_r+0x1e>
 8010618:	682b      	ldr	r3, [r5, #0]
 801061a:	b103      	cbz	r3, 801061e <_read_r+0x1e>
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	20009d90 	.word	0x20009d90

08010624 <_fstat_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4d07      	ldr	r5, [pc, #28]	; (8010644 <_fstat_r+0x20>)
 8010628:	2300      	movs	r3, #0
 801062a:	4604      	mov	r4, r0
 801062c:	4608      	mov	r0, r1
 801062e:	4611      	mov	r1, r2
 8010630:	602b      	str	r3, [r5, #0]
 8010632:	f7f6 f958 	bl	80068e6 <_fstat>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	d102      	bne.n	8010640 <_fstat_r+0x1c>
 801063a:	682b      	ldr	r3, [r5, #0]
 801063c:	b103      	cbz	r3, 8010640 <_fstat_r+0x1c>
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	bd38      	pop	{r3, r4, r5, pc}
 8010642:	bf00      	nop
 8010644:	20009d90 	.word	0x20009d90

08010648 <_isatty_r>:
 8010648:	b538      	push	{r3, r4, r5, lr}
 801064a:	4d06      	ldr	r5, [pc, #24]	; (8010664 <_isatty_r+0x1c>)
 801064c:	2300      	movs	r3, #0
 801064e:	4604      	mov	r4, r0
 8010650:	4608      	mov	r0, r1
 8010652:	602b      	str	r3, [r5, #0]
 8010654:	f7f6 f957 	bl	8006906 <_isatty>
 8010658:	1c43      	adds	r3, r0, #1
 801065a:	d102      	bne.n	8010662 <_isatty_r+0x1a>
 801065c:	682b      	ldr	r3, [r5, #0]
 801065e:	b103      	cbz	r3, 8010662 <_isatty_r+0x1a>
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	bd38      	pop	{r3, r4, r5, pc}
 8010664:	20009d90 	.word	0x20009d90

08010668 <_init>:
 8010668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066a:	bf00      	nop
 801066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066e:	bc08      	pop	{r3}
 8010670:	469e      	mov	lr, r3
 8010672:	4770      	bx	lr

08010674 <_fini>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	bf00      	nop
 8010678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067a:	bc08      	pop	{r3}
 801067c:	469e      	mov	lr, r3
 801067e:	4770      	bx	lr
